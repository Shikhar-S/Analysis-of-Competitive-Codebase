<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="DataAnalysis/Contest1245/China/hm/29564885_64008817.cpp"><using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><specifier>const</specifier> <name>long</name> <name>long</name></type> <name>maxn</name> <init>= <expr><literal type="number">100010</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>long</name> <name>long</name></type> <name>Mod</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>ans</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name><name>fac</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>inv</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>

<function><specifier>inline</specifier> <type><name>long</name> <name>long</name></type> <name>power</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
 <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>r</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
 <while>while <condition>( <expr><name>b</name></expr> )</condition> <block>{ <if>if <condition>( <expr><name>b</name> <operator>&amp;</operator> <literal type="number">1</literal></expr> )</condition><then> <block type="pseudo"><expr_stmt><expr><name>r</name> <operator>=</operator> <name>r</name> <operator>*</operator> <name>a</name> <operator>%</operator> <name>Mod</name></expr>;</expr_stmt></block></then></if> <expr_stmt><expr><name>a</name> <operator>=</operator> <name>a</name> <operator>*</operator> <name>a</name> <operator>%</operator> <name>Mod</name></expr>;</expr_stmt> <expr_stmt><expr><name>b</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt> }</block></while>
 <return>return <expr><name>r</name></expr>;</return>
}</block></function>

<function><specifier>inline</specifier> <type><name>long</name> <name>long</name></type> <name>Solve</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{
 <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>ret</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>last</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
 <for>for <control>( <init><decl><type><name>long</name> <name>long</name></type> <name>i</name> <init>= <expr><operator>(</operator><literal type="number">2</literal><operator>)</operator></expr></init></decl>, <decl><type ref="prev"/><name>_end_</name> <init>= <expr><operator>(</operator><name>x</name><operator>)</operator></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>_end_</name></expr>;</condition> <incr><expr><operator>++</operator> <name>i</name></expr></incr> )</control> <block>{ <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>p</name> <init>= <expr><name>ret</name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>ret</name> <operator>+</operator> <name>last</name><operator>)</operator> <operator>%</operator> <name>Mod</name></expr>;</expr_stmt> <expr_stmt><expr><name>last</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt> }</block></for>
 <return>return <expr><name>ret</name></expr>;</return>
}</block></function>

<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{

 <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"input.txt"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>,<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"output.txt"</literal></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>,<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

 <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>s</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>s</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <expr_stmt><expr><name><name>fac</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>inv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <for>for <control>( <init><decl><type><name>long</name> <name>long</name></type> <name>i</name> <init>= <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>, <decl><type ref="prev"/><name>_end_</name> <init>= <expr><operator>(</operator><name>n</name><operator>)</operator></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>_end_</name></expr>;</condition> <incr><expr><operator>++</operator> <name>i</name></expr></incr> )</control> <block type="pseudo"><expr_stmt><expr><name><name>fac</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>fac</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>i</name> <operator>%</operator> <name>Mod</name></expr>;</expr_stmt></block></for>
 <expr_stmt><expr><name><name>inv</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <call><name>power</name><argument_list>(<argument><expr><name><name>fac</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>Mod</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <for>for <control>( <init><decl><type><name>long</name> <name>long</name></type> <name>i</name> <init>= <expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>--</operator> <name>i</name></expr></incr> )</control> <block type="pseudo"><expr_stmt><expr><name><name>inv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>inv</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>Mod</name></expr>;</expr_stmt></block></for>
 <for>for <control>( <init><decl><type><name>long</name> <name>long</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator> <name>i</name></expr></incr> )</control>
 <block>{
  <if>if <condition>( <expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'m'</literal> <operator>||</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'w'</literal></expr> )</condition><then> <block>{ <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return> }</block></then></if>
  <if>if <condition>( <expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'u'</literal> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'n'</literal></expr> )</condition><then> <block type="pseudo"><continue>continue ;</continue></block></then></if>
  <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>j</name> <init>= <expr><name>i</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>( <expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>s</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <literal type="char">'u'</literal> <operator>||</operator> <name><name>s</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <literal type="char">'n'</literal><operator>)</operator></expr> )</condition> <block type="pseudo"><expr_stmt><expr><operator>++</operator> <name>j</name></expr>;</expr_stmt></block></while>
  <expr_stmt><expr><operator>--</operator> <name>j</name></expr>;</expr_stmt> <expr_stmt><expr><name>ans</name> <operator>=</operator> <name>ans</name> <operator>*</operator> <call><name>Solve</name><argument_list>(<argument><expr><name>j</name> <operator>-</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>%</operator> <name>Mod</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>i</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
 }</block></for>
 <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
 <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
