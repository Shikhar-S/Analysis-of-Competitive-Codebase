<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="DataAnalysis/Contest1245/China/lm/29598306_64011889.cpp"><using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">1e5</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MOD</name> <init>= <expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<struct><template>template <parameter_list>&lt;<parameter><type><name>int</name></type> <name>_MOD</name></parameter>&gt;</parameter_list></template> struct <name>Mint</name>
<block>{<public type="default">
    <decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <constructor><name>Mint</name><parameter_list>()</parameter_list> <block>{}</block></constructor>
    <constructor><name>Mint</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_v</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>v</name><argument_list>(<argument><expr><operator>(</operator><name>_v</name><operator>%</operator><name>_MOD</name><operator>+</operator><name>_MOD</name><operator>)</operator><operator>%</operator><name>_MOD</name></expr></argument>)</argument_list></call> </member_init_list><block>{}</block></constructor>
    <constructor><name>Mint</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>_v</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>v</name><argument_list>(<argument><expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><operator>(</operator><name>_v</name><operator>%</operator><name>_MOD</name><operator>+</operator><name>_MOD</name><operator>)</operator><operator>%</operator><name>_MOD</name></expr></argument>)</argument_list></cast></expr></argument>)</argument_list></call> </member_init_list><block>{}</block></constructor>
    <function type="operator"><type><name>Mint</name></type> <name>operator <name>=</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>_v</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>v</name></name> <operator>=</operator> <name>_v</name></expr>;</expr_stmt> <return>return <expr><operator>*</operator><name>this</name></expr>;</return> }</block></function>
    <function type="operator"><type><name>Mint</name></type> <name>operator <name>=</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>long</name> <name>long</name></type> <name>_v</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>v</name></name> <operator>=</operator> <cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>_v</name><operator>%</operator><name>_MOD</name></expr></argument>)</argument_list></cast></expr>;</expr_stmt> <return>return <expr><operator>*</operator><name>this</name></expr>;</return> }</block></function>
    <function type="operator"><type><name>bool</name></type> <name>operator <name>&lt;</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Mint</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{ <return>return <expr><name>v</name> <operator>&lt;</operator> <name><name>b</name><operator>.</operator><name>v</name></name></expr>;</return> }</block></function>
    <function type="operator"><type><name>bool</name></type> <name>operator <name>&gt;</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Mint</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{ <return>return <expr><name>v</name> <operator>&gt;</operator> <name><name>b</name><operator>.</operator><name>v</name></name></expr>;</return> }</block></function>
    <function type="operator"><type><name>bool</name></type> <name>operator <name>==</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Mint</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{ <return>return <expr><name>v</name> <operator>==</operator> <name><name>b</name><operator>.</operator><name>v</name></name></expr>;</return> }</block></function>
    <function type="operator"><type><name>bool</name></type> <name>operator <name>!=</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Mint</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{ <return>return <expr><name>v</name> <operator>!=</operator> <name><name>b</name><operator>.</operator><name>v</name></name></expr>;</return> }</block></function>
    <function type="operator"><type><name>bool</name></type> <name>operator <name>&lt;=</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Mint</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{ <return>return <expr><name>v</name> <operator>&lt;</operator> <name><name>b</name><operator>.</operator><name>v</name></name> <operator>||</operator> <name>v</name> <operator>==</operator> <name><name>b</name><operator>.</operator><name>v</name></name></expr>;</return> }</block></function>
    <function type="operator"><type><name>bool</name></type> <name>operator <name>&gt;=</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Mint</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{ <return>return <expr><name>v</name> <operator>&gt;</operator> <name><name>b</name><operator>.</operator><name>v</name></name> <operator>||</operator> <name>v</name> <operator>==</operator> <name><name>b</name><operator>.</operator><name>v</name></name></expr>;</return> }</block></function>
    <function type="operator"><type><name>Mint</name></type> <name>operator <name>+</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Mint</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>Mint</name><argument_list>(<argument><expr><name>v</name><operator>+</operator><name><name>b</name><operator>.</operator><name>v</name></name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
    <function type="operator"><type><name>Mint</name></type> <name>operator <name>-</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Mint</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>Mint</name><argument_list>(<argument><expr><name>v</name><operator>-</operator><name><name>b</name><operator>.</operator><name>v</name></name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
    <function type="operator"><type><name>Mint</name></type> <name>operator <name>*</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Mint</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>Mint</name><argument_list>(<argument><expr><literal type="number">1ll</literal><operator>*</operator><name>v</name><operator>*</operator><name><name>b</name><operator>.</operator><name>v</name></name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
    <function type="operator"><type><name>Mint</name></type> <name>operator <name>/</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Mint</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>Mint</name><argument_list>(<argument><expr><call><name><name>b</name><operator>.</operator><name>inv</name></name><argument_list>()</argument_list></call><operator>*</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
    <function type="operator"><type><name>Mint</name></type> <name>operator <name>+=</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Mint</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><operator>*</operator><name>this</name> <operator>=</operator> <operator>*</operator><name>this</name><operator>+</operator><name>b</name></expr>;</return> }</block></function>
    <function type="operator"><type><name>Mint</name></type> <name>operator <name>-=</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Mint</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><operator>*</operator><name>this</name> <operator>=</operator> <operator>*</operator><name>this</name><operator>-</operator><name>b</name></expr>;</return> }</block></function>
    <function type="operator"><type><name>Mint</name></type> <name>operator <name>*=</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Mint</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><operator>*</operator><name>this</name> <operator>=</operator> <operator>*</operator><name>this</name><operator>*</operator><name>b</name></expr>;</return> }</block></function>
    <function type="operator"><type><name>Mint</name></type> <name>operator <name>/=</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Mint</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><operator>*</operator><name>this</name> <operator>=</operator> <operator>*</operator><name>this</name><operator>/</operator><name>b</name></expr>;</return> }</block></function>
    <function><type><name>Mint</name></type> <name>pow</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{
        <decl_stmt><decl><type><name>Mint</name></type> <name>res</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>x</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>p</name></expr>)</condition> <block>{
            <if>if <condition>(<expr><name>p</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>res</name> <operator>=</operator> <name>res</name><operator>*</operator><name>x</name></expr>;</expr_stmt></block></then></if>
            <expr_stmt><expr><name>x</name> <operator>*=</operator> <name>x</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>p</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        }</block></while>
        <return>return <expr><name>res</name></expr>;</return>
    }</block></function>
    <function><type><name>Mint</name></type> <name>inv</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{ <return>return <expr><call><name>pow</name><argument_list>(<argument><expr><name>_MOD</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
    <friend>friend <function type="operator"><type><name>istream</name><modifier>&amp;</modifier></type> <name>operator <name>&gt;&gt;</name></name> <parameter_list>(<parameter><decl><type><name>istream</name> <modifier>&amp;</modifier></type><name>is</name></decl></parameter>, <parameter><decl><type><name>Mint</name> <modifier>&amp;</modifier></type><name>mt</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name>is</name> <operator>&gt;&gt;</operator> <name><name>mt</name><operator>.</operator><name>v</name></name></expr>;</return> }</block></function></friend>
    <friend>friend <function type="operator"><type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator <name>&lt;&lt;</name></name> <parameter_list>(<parameter><decl><type><name>ostream</name> <modifier>&amp;</modifier></type><name>os</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Mint</name> <modifier>&amp;</modifier></type><name>mt</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name>os</name> <operator>&lt;&lt;</operator> <name><name>mt</name><operator>.</operator><name>v</name></name></expr>;</return> }</block></function></friend>
</public>}</block>;</struct>
<using>using <name>mint</name> <init>= <type><name><name>Mint</name><argument_list type="generic">&lt;<argument><expr><name>MOD</name></expr></argument>&gt;</argument_list></name></type></init>;</using>

<decl_stmt><decl><type><name>string</name></type> <name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mint</name></type> <name><name>f</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mint</name></type> <name>res</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>str</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
        <expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>f</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>f</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
    }</block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name><name>str</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
        <if>if <condition>(<expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'m'</literal> <operator>||</operator> <name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'w'</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <break>break;</break>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'n'</literal> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'u'</literal></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
        <decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>i</name><operator>+</operator><literal type="number">1</literal> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name><name>str</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>c</name></expr>)</condition> <block>{
            <expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>++</operator><name>cnt</name></expr>;</expr_stmt>
        }</block></while>
        <expr_stmt><expr><name>res</name> <operator>*=</operator> <name><name>f</name><index>[<expr><name>cnt</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>res</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
