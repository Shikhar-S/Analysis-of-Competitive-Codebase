/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Himanshu Bhadani
 */

#include<iostream>
#include<fstream>
#include<climits>
#include<vector>
#include<string>
#include<cmath>
#include<utility>
#include<algorithm>
#include<iomanip>
#include<map>
#include <set>
#include <queue>
#include <stack>
#define ll long long
#define sil(x)  int x;in>>x;while(x--)
#define sid(n)   int n;in>>n
#define si(x) in>>x
#define s(x) string x;in>>x;
#define fl(m,n) for(  int i=m;i<n;i++)
#define flr(n,m) for( int i=n;i>=m;i--)
#define wl(q) while(q--)
#define P(A,B) std::pair<A,B>
#define V(A) std::vector<A>
#define pb push_back
class AIntegerPoints {
public:
	void solve(std::istream& in, std::ostream& out) {
	    int t;in>>t;
	    while(t--){
	        ll n;in>>n;
	        ll cnt=0;
	        int x;
	        fl(0,n){
	            in>>x;
	            if(x%2)cnt++;
	        }
	        ll m;in>>m;
	        ll cnt1=0;
	        fl(0,m){
	            in>>x;
	            if(x%2)cnt1++;
	        }
	        out<<(cnt*cnt1)+(n-cnt)*(m-cnt1)<<std::endl;
	    }

	}
};


int main() {
    std::ios_base::sync_with_stdio(false);
	AIntegerPoints solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
