<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29168344_62982652.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ss</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Fast</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(false),cin.tie(NULL),cout.tie(NULL)</cpp:value></cpp:define>
<function><type><name>ll</name></type> <name>po</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><name>n</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then>
    <elseif>else <if>if<condition>(<expr><name>n</name><operator>%</operator><literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><call><name>po</name><argument_list>(<argument><expr><operator>(</operator><name>x</name><operator>*</operator><name>x</name><operator>)</operator><operator>%</operator><name>M</name></expr></argument>,<argument><expr><name>n</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return></block></then></if></elseif>
    <else>else
        <block type="pseudo"><return>return <expr><operator>(</operator><name>x</name><operator>*</operator><call><name>po</name><argument_list>(<argument><expr><operator>(</operator><name>x</name><operator>*</operator><name>x</name><operator>)</operator><operator>%</operator><name>M</name></expr></argument>,<argument><expr><operator>(</operator><name>n</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>%</operator><name>M</name></expr>;</return></block></else></if>

}</block></function>
<function><type><name>ll</name></type> <name>GCD</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>B</name></decl></parameter>)</parameter_list> <block>{
    <if>if<condition>(<expr><name>B</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><name>A</name></expr>;</return></block></then>
    <else>else
        <block type="pseudo"><return>return <expr><call><name>GCD</name><argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>A</name> <operator>%</operator> <name>B</name></expr></argument>)</argument_list></call></expr>;</return></block></else></if>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><name>Fast</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name><name>a</name><index>[<expr><name>n</name></expr>]</index></name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>a</name><operator>+</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>j</name><init>=<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>x</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>y</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>c</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>c</name><operator>&lt;</operator><name>n</name></expr>)</condition>
    <block>{
        <if>if<condition>(<expr><name>c</name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>x</name><operator>+=</operator><name><name>a</name><index>[<expr><name>j</name><operator>--</operator></expr>]</index></name></expr>;</expr_stmt></block></then>
        <else>else
            <block type="pseudo"><expr_stmt><expr><name>y</name><operator>+=</operator><name><name>a</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt></block></else></if>
        <expr_stmt><expr><name>c</name><operator>++</operator></expr>;</expr_stmt>
    }</block></while>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>x</name><operator>*</operator><name>x</name><operator>+</operator><name>y</name><operator>*</operator><name>y</name></expr>;</expr_stmt>
}</block></function></unit>
