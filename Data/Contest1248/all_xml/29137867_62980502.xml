<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29137867_62980502.cpp"><comment type="line" format="doxygen">/// I won't go back on my words ... that's my ninja way !!!</comment>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">1e5</literal><operator>+</operator><literal type="number">5</literal></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl> ,<decl><type ref="prev"/><name>a</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name><name>deque</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>dq</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>x</name></decl> ,<decl><type ref="prev"/><name>y</name></decl> ;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dq</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <decl_stmt><decl><type><name>bool</name></type> <name>flag</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>dq</name><operator>.</operator><name>rbegin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>dq</name><operator>.</operator><name>rend</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>(<expr><call><name><name>dq</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{
        <if>if<condition>(<expr><name>flag</name></expr>)</condition><then><block>{
            <expr_stmt><expr><name>x</name><operator>+=</operator> <call><name><name>dq</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name><name>dq</name><operator>.</operator><name>pop_front</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else<block>{
            <expr_stmt><expr><name>y</name> <operator>+=</operator> <call><name><name>dq</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name><name>dq</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <name>flag</name></expr> ;</expr_stmt>
    }</block></while>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>x</name><operator>*</operator><name>x</name> <operator>+</operator> <name>y</name><operator>*</operator><name>y</name></expr> ;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
