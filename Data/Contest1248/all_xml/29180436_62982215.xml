<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29180436_62982215.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>LL</name>;</typedef>

<decl_stmt><decl><type><name>int</name></type> <name><name>datas</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>a</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>a</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>a</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>datas</name><index>[<expr><name>a</name></expr>]</index></name></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>datas</name></expr></argument>, <argument><expr><name>datas</name><operator>+</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>R</name><init>=<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>L</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>con</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LL</name></type> <name>h1</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>h2</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>L</name><operator>&lt;=</operator><name>R</name></expr>)</condition><block>{
		<if>if<condition>(<expr><name>con</name></expr>)</condition><then><block>{
			<expr_stmt><expr><name>h1</name><operator>+=</operator><name><name>datas</name><index>[<expr><name>R</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>R</name><operator>--</operator></expr>;</expr_stmt>
		}</block></then>
		<else>else<block>{
			<expr_stmt><expr><name>h2</name><operator>+=</operator><name><name>datas</name><index>[<expr><name>L</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>L</name><operator>++</operator></expr>;</expr_stmt>
		}</block></else></if>
		<expr_stmt><expr><name>con</name><operator>^=</operator><literal type="number">1</literal></expr>;</expr_stmt>
	}</block></while>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>(</operator><name>h1</name><operator>*</operator><name>h1</name><operator>)</operator><operator>+</operator><operator>(</operator><name>h2</name><operator>*</operator><name>h2</name><operator>)</operator><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
