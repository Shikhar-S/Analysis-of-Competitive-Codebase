<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29147119_62981260.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>N</name> <init>= <expr><literal type="number">1e6</literal><operator>+</operator><literal type="number">10</literal></expr></init></decl> ;</decl_stmt>

<decl_stmt><decl><type><name>ll</name></type> <name>T</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>lll</name></decl> , <decl><type ref="prev"/><name>out</name></decl> , <decl><type ref="prev"/><name>ji2</name></decl> , <decl><type ref="prev"/><name>ou2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>now</name></decl> ;</decl_stmt>
<function><type><name>int</name></type> <name>main</name> <parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator><name>T</name></expr> ;</expr_stmt>
    <while>while <condition>(<expr><name>T</name><operator>--</operator></expr>)</condition>
    <block>{
        <expr_stmt><expr><name>lll</name> <operator>=</operator> <name>out</name> <operator>=</operator> <name>ji2</name> <operator>=</operator> <name>ou2</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
            <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>now</name></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>now</name> <operator>%</operator> <literal type="number">2</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>lll</name><operator>++</operator></expr> ;</expr_stmt></block></then>
            <else>else
                <block type="pseudo"><expr_stmt><expr><name>out</name><operator>++</operator></expr> ;</expr_stmt></block></else></if>
        }</block></for>
        <expr_stmt><expr><call><name>scanf</name> <argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument> , <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <for>for <control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator><name>now</name></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>now</name> <operator>%</operator> <literal type="number">2</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>ji2</name><operator>++</operator></expr> ;</expr_stmt></block></then>
            <else>else
                <block type="pseudo"><expr_stmt><expr><name>ou2</name><operator>++</operator></expr> ;</expr_stmt></block></else></if>
        }</block></for>
        <decl_stmt><decl><type><name>ll</name></type> <name>res</name> <init>= <expr><name>lll</name> <operator>*</operator> <name>ji2</name> <operator>+</operator> <name>out</name> <operator>*</operator> <name>ou2</name></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator><name>res</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    }</block></while>
}</block></function>
</unit>
