<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29136168_62999698.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>long</name> <name>double</name></type>                 <name>ld</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>long</name></type>                   <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type>               <name>pii</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type>                 <name>pll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument> , <argument><expr><name>string</name></expr></argument>&gt;</argument_list></name></type>       <name>pss</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>                      <cpp:value>(x).begin(),(x).end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Sort</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>                     <cpp:value>sort(all((x)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro>                           <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name></cpp:macro>                           <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sep</name></cpp:macro>                         <cpp:value>' '</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro>                        <cpp:value>'\n'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>file_io</name></cpp:macro>                     <cpp:value>freopen("input.txt" , "r+" , stdin) ; freopen("output.txt" , "w+" , stdout);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fast_io</name></cpp:macro>                     <cpp:value>ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>error</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>                    <cpp:value>cerr &lt;&lt; "$$$ " &lt;&lt; x &lt;&lt; '\n';</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>error2</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro>                 <cpp:value>cerr &lt;&lt; "#F : " &lt;&lt; x &lt;&lt; "      #S : " &lt;&lt; y &lt;&lt; '\n';</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kill</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>                     <cpp:value>return cout &lt;&lt; x &lt;&lt; endl , 0;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro>                          <cpp:value>push_back</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>MXN</name> <init>= <expr><literal type="number">1e5</literal> <operator>+</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>MXM</name> <init>= <expr><literal type="number">5e2</literal> <operator>+</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>MX5</name> <init>= <expr><literal type="number">4e5</literal> <operator>+</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>MX6</name> <init>= <expr><literal type="number">1e6</literal> <operator>+</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>INF</name> <init>= <expr><literal type="number">8e18</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ld</name></type> <name>eps</name> <init>= <expr><literal type="number">1e-9</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>MOD</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt> <comment type="line">//998244353;</comment>

<function><type><name>ll</name></type> <name>power</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>md</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><operator>(</operator><ternary><condition><expr><operator>!</operator><name>b</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><name>b</name> <operator>&amp;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>a</name> <operator>*</operator> <call><name>power</name><argument_list>(<argument><expr><name>a</name> <operator>*</operator> <name>a</name> <operator>%</operator> <name>md</name></expr></argument>, <argument><expr><name>b</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>md</name></expr></argument>)</argument_list></call> <operator>%</operator> <name>md</name></expr> </then><else>: <expr><call><name>power</name><argument_list>(<argument><expr><name>a</name> <operator>*</operator> <name>a</name> <operator>%</operator> <name>md</name></expr></argument>, <argument><expr><name>b</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>md</name></expr></argument>)</argument_list></call> <operator>%</operator> <name>md</name></expr></else></ternary><operator>)</operator></expr></else></ternary><operator>)</operator></expr>;</return>
}</block></function>
<function><type><name>ll</name></type> <name>bmm</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
    <return>return <expr><operator>(</operator><ternary><condition><expr><name>a</name><operator>%</operator><name>b</name><operator>==</operator><literal type="number">0</literal></expr> ?</condition><then> <expr><name>b</name></expr> </then><else>: <expr><call><name>bmm</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>a</name><operator>%</operator><name>b</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr>;</return>
}</block></function>
<function><type><name>string</name></type> <name>base2</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name>string</name></type> <name>a</name><init>=<expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt><while>while<condition>(<expr><name>n</name><operator>&gt;=</operator><literal type="number">2</literal></expr>)</condition><block>{<expr_stmt><expr><name>a</name><operator>+=</operator><call>(<name>char</name>)<argument_list>(<argument><expr><name>n</name><operator>%</operator><literal type="number">2</literal><operator>+</operator><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name>n</name><operator>/=</operator><literal type="number">2</literal></expr>;</expr_stmt>}</block></while><expr_stmt><expr><name>a</name><operator>+=</operator><call>(<name>char</name>)<argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>reverse</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><name>a</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name><name>dp</name><index>[<expr><name>MXN</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>pd</name><index>[<expr><name>MXN</name></expr>]</index></name></decl>;</decl_stmt>



<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <comment type="line">//fast_io</comment>
    <comment type="line">//file_io</comment>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>m</name> <operator>&lt;</operator> <name>n</name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    <expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MXN</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>dp</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>dp</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name><operator>%</operator><name>MOD</name></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>dp</name><index>[<expr><name>n</name></expr>]</index></name> <operator>+</operator> <name><name>dp</name><index>[<expr><name>m</name></expr>]</index></name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>%</operator> <name>MOD</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
<comment type="line" format="doxygen">//! N.N</comment>

</unit>
