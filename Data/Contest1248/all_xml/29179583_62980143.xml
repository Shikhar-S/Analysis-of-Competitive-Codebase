<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29179583_62980143.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ext/pb_ds/assoc_container.hpp&gt;</cpp:file></cpp:include>
<comment type="line">//#pragma GCC optimize("O3")</comment>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<using>using <namespace>namespace <name>__gnu_pbds</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dd</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>eb</name></cpp:macro> <cpp:value>emplace_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name></cpp:macro> <cpp:value>size()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>For</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>s</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(lld i=(lld)s;i&lt;(lld)a;++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rpt</name><parameter_list>(<parameter><type><name>s</name></type></parameter>,<parameter><type><name>it</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(auto it=s.begin();it!=s.end();++it)</cpp:value></cpp:define>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>lld</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>lld</name></expr></argument>,<argument><expr><name>lld</name></expr></argument>&gt;</argument_list></name></type> <name>pll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>lld</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pli</name>;</typedef>		<comment type="line" format="doxygen">///</comment>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>lld</name></expr></argument>&gt;</argument_list></name></type> <name>pil</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>getchar_unlocked</name></cpp:macro> <cpp:value>getchar</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>putchar_unlocked</name></cpp:macro> <cpp:value>putchar</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZAPS</name></cpp:macro> <cpp:value>int t;scanf("%d",&amp;t);while(t--)solve();</cpp:value></cpp:define>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>scan</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>i</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>t</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name>z</name><init>=<expr><literal type="char">'a'</literal></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><operator>(</operator><name>z</name><operator>&lt;</operator><literal type="char">'0'</literal><operator>)</operator><operator>||</operator><operator>(</operator><name>z</name><operator>&gt;</operator><literal type="char">'9'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>z</name><operator>=</operator><call><name>getchar_unlocked</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
	<while>while<condition>(<expr><operator>(</operator><name>z</name><operator>&gt;=</operator><literal type="char">'0'</literal><operator>)</operator><operator>&amp;&amp;</operator><operator>(</operator><name>z</name><operator>&lt;=</operator><literal type="char">'9'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>t</name><operator>=</operator><operator>(</operator><name>t</name><operator>&lt;&lt;</operator><literal type="number">3ll</literal><operator>)</operator><operator>+</operator><operator>(</operator><name>t</name><operator>&lt;&lt;</operator><literal type="number">1ll</literal><operator>)</operator><operator>+</operator><name>z</name><operator>-</operator><literal type="char">'0'</literal></expr><operator>,</operator><expr><name>z</name><operator>=</operator><call><name>getchar_unlocked</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
	<expr_stmt><expr><operator>*</operator><name>i</name><operator>=</operator><name>t</name></expr>;</expr_stmt>
}</block></function>

<function><specifier>inline</specifier> <type><name>void</name></type> <name>scanll</name><parameter_list>(<parameter><decl><type><name>lld</name> <modifier>*</modifier></type><name>i</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>lld</name></type> <name>t</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name>z</name><init>=<expr><literal type="char">'a'</literal></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><operator>(</operator><name>z</name><operator>&lt;</operator><literal type="char">'0'</literal><operator>)</operator><operator>||</operator><operator>(</operator><name>z</name><operator>&gt;</operator><literal type="char">'9'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>z</name><operator>=</operator><call><name>getchar_unlocked</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
	<while>while<condition>(<expr><operator>(</operator><name>z</name><operator>&gt;=</operator><literal type="char">'0'</literal><operator>)</operator><operator>&amp;&amp;</operator><operator>(</operator><name>z</name><operator>&lt;=</operator><literal type="char">'9'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>t</name><operator>=</operator><operator>(</operator><name>t</name><operator>&lt;&lt;</operator><literal type="number">3ll</literal><operator>)</operator><operator>+</operator><operator>(</operator><name>t</name><operator>&lt;&lt;</operator><literal type="number">1ll</literal><operator>)</operator><operator>+</operator><name>z</name><operator>-</operator><literal type="char">'0'</literal></expr><operator>,</operator><expr><name>z</name><operator>=</operator><call><name>getchar_unlocked</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
	<expr_stmt><expr><operator>*</operator><name>i</name><operator>=</operator><name>t</name></expr>;</expr_stmt>
}</block></function>

<decl_stmt><decl><type><name>lld</name></type> <name><name>c</name><index>[<expr><literal type="number">100001</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int32_t</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{
	<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%i"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>For</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>a</argument>)</argument_list></macro>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lli"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>c</name><operator>+</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>lld</name></type> <name>p</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>p</name><operator>=</operator><name>k</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	<macro><name>For</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>a/<literal type="number">2</literal></argument>)</argument_list></macro><block>{
		<expr_stmt><expr><name>p</name><operator>+=</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>k</name><operator>+=</operator><name><name>c</name><index>[<expr><name>a</name><operator>-</operator><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	}</block>
	<if>if<condition>(<expr><name>a</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then>
	<block type="pseudo"><expr_stmt><expr><name>k</name><operator>+=</operator><name><name>c</name><index>[<expr><operator>(</operator><name>a</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt></block></then></if>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lli"</literal></expr></argument>,<argument><expr><name>p</name><operator>*</operator><name>p</name><operator>+</operator><name>k</name><operator>*</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>


















</unit>
