<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29176705_63003701.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N</name></cpp:macro> <cpp:value>611</cpp:value></cpp:define>
<function><specifier>inline</specifier> <type><name>int</name></type> <name>read</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>x</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>f</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name>c</name><init>=<expr><call><name>getchar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name><name>c</name><argument_list type="generic">&lt;<argument><expr><literal type="char">'0'</literal><operator>||</operator><name>c</name></expr></argument>&gt;</argument_list></name><literal type="char">'9'</literal></expr>)</condition><block>{
        <if>if<condition>(<expr><name>c</name><operator>==</operator><literal type="char">'-'</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>f</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></while>
    <while>while<condition>(<expr><name>c</name><operator>&gt;=</operator><literal type="char">'0'</literal><operator>&amp;&amp;</operator><name>c</name><operator>&lt;=</operator><literal type="char">'9'</literal></expr>)</condition><block>{
        <expr_stmt><expr><name>x</name><operator>=</operator><operator>(</operator><name>x</name><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator><operator>+</operator><operator>(</operator><name>x</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><name>c</name><operator>-</operator><literal type="char">'0'</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><name>x</name><operator>*</operator><name>f</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>,<decl><type ref="prev"/><name>ans</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>stack</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><name>N</name><operator>&lt;&lt;</operator><literal type="number">1</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>a</name><index>[<expr><name>N</name><operator>&lt;&lt;</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>solve</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{
	<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>,<decl><type ref="prev"/><name>r</name><init>=<expr><name>n</name></expr></init></decl>,<decl><type ref="prev"/><name>las</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>w</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while<condition>(<expr><operator>!</operator><call><name><name>st</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
	<for>for<control>(<init><expr><name>l</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>l</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>l</name><operator>++</operator></expr></incr>)</control><block>{
		<comment type="line">//if(l==n)goto p;</comment>
		<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>l</name></expr>]</index></name><operator>==</operator><literal type="char">'('</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<else>else<block>{
			<if>if<condition>(<expr><operator>!</operator><call><name><name>st</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
				<expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></then>
			<else>else<block>{
				<comment type="line">//p:</comment>
				<comment type="block">/*for(int i=n+1;i&lt;=n+l;i++){
					s[i]=s[i-n];
				}*/</comment>
				<expr_stmt><expr><name>las</name><operator>=</operator><name>l</name></expr>;</expr_stmt>
				<comment type="line">//r=n+l;</comment>
				
			}</block></else></if>
		}</block></else></if>
	}</block></for>
	<while>while<condition>(<expr><operator>!</operator><call><name><name>st</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
	<expr_stmt><expr><name>l</name><operator>=</operator><name>las</name></expr>;</expr_stmt><expr_stmt><expr><name>r</name><operator>=</operator><name>l</name><operator>+</operator><name>n</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name><operator>+</operator><name>l</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>s</name><index>[<expr><name>i</name><operator>-</operator><name>n</name></expr>]</index></name></expr>;</expr_stmt>
	}</block></for>
	<for>for<control>(<init><expr><name>l</name><operator>++</operator></expr>;</init><condition><expr><name>l</name><operator>&lt;=</operator><name>r</name></expr>;</condition><incr><expr><name>l</name><operator>++</operator></expr></incr>)</control><block>{
		<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>l</name></expr>]</index></name><operator>==</operator><literal type="char">'('</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<else>else<block>{
			<if>if<condition>(<expr><operator>!</operator><call><name><name>st</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
				<expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<if>if<condition>(<expr><call><name><name>st</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>w</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
			}</block></then>
			<else>else<block>{
				<return>return <expr><literal type="number">0</literal></expr>;</return>
			}</block></else></if>
		}</block></else></if>
	}</block></for>
	<if>if<condition>(<expr><operator>!</operator><call><name><name>st</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
	<return>return <expr><name>w</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><name>n</name><operator>=</operator><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>,<argument><expr><name>a</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if<condition>(<expr><name>n</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then><block>{
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="number">0</literal><operator>&lt;&lt;</operator><name>endl</name><operator>&lt;&lt;</operator><literal type="string">"1 1"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></then></if>
	<decl_stmt><decl><type><name>int</name></type> <name>cnt</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<if>if<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">')'</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
	}</block></for>
	<if>if<condition>(<expr><name>cnt</name><operator>*</operator><literal type="number">2</literal><operator>!=</operator><name>n</name></expr>)</condition><then><block>{
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="number">0</literal><operator>&lt;&lt;</operator><name>endl</name><operator>&lt;&lt;</operator><literal type="string">"1 1"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></then></if>
	<expr_stmt><expr><name>x</name><operator>=</operator><name>y</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><name>i</name></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
			<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>t</name><init>=<expr><call><name>solve</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if<condition>(<expr><name>t</name><operator>&gt;</operator><name>ans</name></expr>)</condition><then><block>{
				<expr_stmt><expr><name>ans</name><operator>=</operator><name>t</name></expr><operator>,</operator><expr><name>x</name><operator>=</operator><name>i</name></expr><operator>,</operator><expr><name>y</name><operator>=</operator><name>j</name></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
	}</block></for>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><name>endl</name><operator>&lt;&lt;</operator><name>x</name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name>y</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
<comment type="block">/*
16
()))(()))())((((
*/</comment></unit>
