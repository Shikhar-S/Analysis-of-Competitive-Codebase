<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29176360_62991382.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>x</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>y</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;int,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pll</name></cpp:macro> <cpp:value>pair&lt;ll,ll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xmod</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>ans</name></decl>,<decl><type ref="prev"/><name>on</name></decl>,<decl><type ref="prev"/><name>tw</name></decl>,<decl><type ref="prev"/><name><name>fac</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name>num</name></decl>;</decl_stmt>
<function><type><name>ll</name></type> <name>fpow</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
	<decl_stmt><decl><type><name>ll</name></type> <name>ans</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>base</name><init>=<expr><name>a</name></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><name>b</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block>{
		<if>if <condition>(<expr><operator>(</operator><name>b</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ans</name><operator>=</operator><name>ans</name><operator>*</operator><name>base</name><operator>%</operator><name>xmod</name></expr>;</expr_stmt></block></then></if>
		<expr_stmt><expr><name>base</name><operator>=</operator><name>base</name><operator>*</operator><name>base</name><operator>%</operator><name>xmod</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>b</name><operator>/=</operator><literal type="number">2</literal></expr>;</expr_stmt>
	}</block></while>
	<return>return <expr><name>ans</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld%lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fac</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">100000</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><name><name>fac</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>fac</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>*</operator><name>i</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fac</name><index>[<expr><name>i</name></expr>]</index></name><operator>%=</operator><name>xmod</name></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><name>ans</name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name><operator>/</operator><literal type="number">2</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><name>on</name><operator>=</operator><name>n</name><operator>-</operator><name>i</name><operator>*</operator><literal type="number">2</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>tw</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>num</name><operator>=</operator><operator>(</operator><operator>(</operator><operator>(</operator><name><name>fac</name><index>[<expr><name>on</name><operator>+</operator><name>tw</name></expr>]</index></name><operator>%</operator><name>xmod</name><operator>)</operator><operator>*</operator><operator>(</operator><call><name>fpow</name><argument_list>(<argument><expr><name><name>fac</name><index>[<expr><name>on</name></expr>]</index></name></expr></argument>,<argument><expr><name>xmod</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>%</operator><name>xmod</name><operator>)</operator><operator>%</operator><name>xmod</name><operator>)</operator><operator>*</operator><operator>(</operator><call><name>fpow</name><argument_list>(<argument><expr><name><name>fac</name><index>[<expr><name>tw</name></expr>]</index></name></expr></argument>,<argument><expr><name>xmod</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>%</operator><name>xmod</name><operator>)</operator><operator>)</operator><operator>%</operator><name>xmod</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>ans</name><operator>+=</operator><name>num</name><operator>*</operator><literal type="number">2</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>ans</name><operator>%=</operator><name>xmod</name></expr>;</expr_stmt>
		<comment type="line">//printf("%lld\n",num);</comment>
	}</block></for>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>m</name><operator>/</operator><literal type="number">2</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><name>on</name><operator>=</operator><name>m</name><operator>-</operator><name>i</name><operator>*</operator><literal type="number">2</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>tw</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>num</name><operator>=</operator><operator>(</operator><operator>(</operator><operator>(</operator><name><name>fac</name><index>[<expr><name>on</name><operator>+</operator><name>tw</name></expr>]</index></name><operator>%</operator><name>xmod</name><operator>)</operator><operator>*</operator><operator>(</operator><call><name>fpow</name><argument_list>(<argument><expr><name><name>fac</name><index>[<expr><name>on</name></expr>]</index></name></expr></argument>,<argument><expr><name>xmod</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>%</operator><name>xmod</name><operator>)</operator><operator>%</operator><name>xmod</name><operator>)</operator><operator>*</operator><operator>(</operator><call><name>fpow</name><argument_list>(<argument><expr><name><name>fac</name><index>[<expr><name>tw</name></expr>]</index></name></expr></argument>,<argument><expr><name>xmod</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>%</operator><name>xmod</name><operator>)</operator><operator>)</operator><operator>%</operator><name>xmod</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>ans</name><operator>+=</operator><name>num</name><operator>*</operator><literal type="number">2</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>ans</name><operator>%=</operator><name>xmod</name></expr>;</expr_stmt>
		<comment type="line">//printf("%lld\n",num);</comment>
	}</block></for>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>,<argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
