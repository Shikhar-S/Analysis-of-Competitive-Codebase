<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29159091_63001393.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>string</name></type> <name>s</name><init>=<expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>pref</name><index>[<expr><literal type="number">1000</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>suf</name><index>[<expr><literal type="number">1000</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rm</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ll</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>rr</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>n</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>s</name></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><name>i</name></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
		<block>{
			<if>if <condition>(<expr><name>j</name><operator>==</operator><name>i</name> <operator>&amp;&amp;</operator> <name>i</name><operator>!=</operator><literal type="number">0</literal></expr>)</condition><then>
				<block type="pseudo"><continue>continue;</continue></block></then></if>
			<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>bal</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>Max</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
			<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
			<block>{
				<if>if <condition>(<expr><name><name>s</name><index>[<expr><name>k</name></expr>]</index></name><operator>==</operator><literal type="char">'('</literal></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><name>bal</name><operator>--</operator></expr>;</expr_stmt></block></then>
				<else>else
					<block type="pseudo"><expr_stmt><expr><name>bal</name><operator>++</operator></expr>;</expr_stmt></block></else></if>	
				<expr_stmt><expr><name><name>pref</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>bal</name></expr>;</expr_stmt>
				<if>if <condition>(<expr><name>bal</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><name>Max</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>Max</name></expr></argument>, <argument><expr><name>bal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
			}</block></for>
			<expr_stmt><expr><name>bal</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name><init>=<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>k</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>k</name><operator>--</operator></expr></incr>)</control>
			<block>{
				<if>if <condition>(<expr><name><name>s</name><index>[<expr><name>k</name></expr>]</index></name><operator>==</operator><literal type="char">'('</literal></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><name>bal</name><operator>--</operator></expr>;</expr_stmt></block></then>
				<else>else
					<block type="pseudo"><expr_stmt><expr><name>bal</name><operator>++</operator></expr>;</expr_stmt></block></else></if>
				<expr_stmt><expr><name><name>suf</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>bal</name></expr>;</expr_stmt>
			}</block></for>
			<decl_stmt><decl><type><name>int</name></type> <name>res</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
			<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
			<block>{
				<if>if <condition>(<expr><operator>(</operator><name>k</name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pref</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>Max</name><operator>==</operator><literal type="number">0</literal><operator>)</operator> <operator>||</operator> <name><name>pref</name><index>[<expr><name>k</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>suf</name><index>[<expr><name>k</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>suf</name><index>[<expr><name>k</name></expr>]</index></name><operator>&lt;=</operator><operator>-</operator><name>Max</name> <operator>&amp;&amp;</operator> <name><name>pref</name><index>[<expr><name>k</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>&gt;=</operator><literal type="number">0</literal></expr>)</condition><then>
				<block>{
					<expr_stmt><expr><name>res</name><operator>++</operator></expr>;</expr_stmt>
				}</block></then></if>
			}</block></for>	
			<if>if <condition>(<expr><name>res</name><operator>&gt;</operator><name>rm</name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name>rm</name> <operator>=</operator> <name>res</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>ll</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>rr</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>	
	}</block></for>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>rm</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>	
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ll</name><operator>+</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator><literal type="char">' '</literal><operator>&lt;&lt;</operator><name>rr</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
}</block></function></unit>
