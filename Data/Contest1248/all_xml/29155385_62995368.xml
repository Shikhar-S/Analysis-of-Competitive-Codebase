<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29155385_62995368.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>re</name></cpp:macro> <cpp:value>return</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>du</name></cpp:macro> <cpp:value>double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>co</name></cpp:macro> <cpp:value>continue</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gcd</name></cpp:macro> <cpp:value>__gcd</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>br</name></cpp:macro> <cpp:value>break</cpp:value></cpp:define>
<function><type><name>void</name></type> <name>fast</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>mod</name><init>=<expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name>fast</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>o</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>no</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>n</name><operator>==</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>m</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>re</name> <literal type="number">0</literal></expr>;</expr_stmt>
    }</block></then></if>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
        <expr_stmt><expr><name>a</name><operator>=</operator><name>o</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>b</name><operator>=</operator><name>no</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>no</name><operator>+=</operator><name>a</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>o</name><operator>=</operator><name>b</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>o</name><operator>%=</operator><name>mod</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>no</name><operator>%=</operator><name>mod</name></expr>;</expr_stmt>
    }</block></for>
    <comment type="line">//cout &lt;&lt; o &lt;&lt; " " &lt;&lt; no &lt;&lt; endl;</comment>
    <expr_stmt><expr><name>ans</name><operator>+=</operator><operator>(</operator><name>o</name><operator>+</operator><name>no</name><operator>)</operator><operator>*</operator><literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>ans</name><operator>%=</operator><name>mod</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>o</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>no</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>m</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
        <expr_stmt><expr><name>a</name><operator>=</operator><name>o</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>b</name><operator>=</operator><name>no</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>no</name><operator>+=</operator><name>a</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>o</name><operator>=</operator><name>b</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>o</name><operator>%=</operator><name>mod</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>no</name><operator>%=</operator><name>mod</name></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><name>ans</name><operator>+=</operator><operator>(</operator><name>o</name><operator>+</operator><name>no</name><operator>)</operator><operator>*</operator><literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>ans</name><operator>-=</operator><literal type="number">2</literal></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>ans</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ans</name><operator>+=</operator><name>mod</name></expr>;</expr_stmt></block></then></if>
    <expr_stmt><expr><name>ans</name><operator>%=</operator><name>mod</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>re</name> <literal type="number">0</literal></expr>;</expr_stmt>
}</block></function>
</unit>
