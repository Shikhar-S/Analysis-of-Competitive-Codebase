<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29159417_62996668.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mk</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ss</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>pll</name>;</typedef>

<function><type><name>ll</name></type> <name>modpow</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{

    <decl_stmt><decl><type><name>ll</name></type> <name>ans</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>b</name></expr>)</condition><block>{
        <if>if<condition>(<expr><name>b</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name>ans</name><operator>=</operator><operator>(</operator><name>ans</name><operator>*</operator><name>a</name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name>a</name><operator>=</operator><operator>(</operator><name>a</name><operator>*</operator><name>a</name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>b</name><operator>=</operator><name>b</name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><name>ans</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><name>ll</name></type> <name><name>fib</name><index>[<expr><literal type="number">100010</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ll</name></type> <name><name>ans</name><index>[<expr><literal type="number">100010</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{

    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>m</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>fib</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>fib</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><name><name>fib</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>fib</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>fib</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt>
    }</block></for>

    <expr_stmt><expr><name><name>ans</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>fib</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ans</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>fib</name><index>[<expr><name>n</name></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ans</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>fib</name><index>[<expr><name>n</name></expr>]</index></name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>m</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><name><name>ans</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">2</literal><operator>*</operator><name><name>ans</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>ans</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">3</literal></expr>]</index></name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt>

        <if>if<condition>(<expr><name><name>ans</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then>  <block type="pseudo"><expr_stmt><expr><name><name>ans</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+=</operator> <name>mod</name></expr>;</expr_stmt></block></then></if>
    }</block></for>

    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>ans</name><index>[<expr><name>m</name></expr>]</index></name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>

    <comment type="line">// int dx[] = {-1, 1, 0, 0};</comment>
    <comment type="line">// int dy[] = {0, 0, -1, 1};</comment>

    <comment type="line">// int n,m;</comment>

    <comment type="line">// n = 7;</comment>

    <comment type="line">// for(m = 1; m &lt;= 3; m++) {</comment>

    <comment type="line">//     int ans = 0;</comment>

    <comment type="line">//     int cells = n*m;</comment>
        
    <comment type="line">//     for(int j = 0; j &lt; (1&lt;&lt;cells); j++) {</comment>

    <comment type="line">//         vector&lt;bool&gt; cellv(n*m, false);</comment>

    <comment type="line">//         for(int k = 0; k &lt; cells; k++) {</comment>
    <comment type="line">//             if((1&lt;&lt;k) &amp; j) {</comment>
    <comment type="line">//                 cellv[k] = true;</comment>
    <comment type="line">//             } else cellv[k] = false;</comment>
    <comment type="line">//         }</comment>


    <comment type="line">//         int fl = 0;</comment>

    <comment type="line">//         for(int i1 = 0; i1 &lt; n; i1++) {</comment>
    <comment type="line">//             for(int j1 = 0; j1 &lt; m; j1++) {</comment>
    <comment type="line">//                 int cellc = i1*m + j1;</comment>

    <comment type="line">//                 bool color = cellv[cellc];</comment>
    <comment type="line">//                 int cnt = 0;</comment>
    <comment type="line">//                 for(int k1 = 0; k1 &lt; 4; k1++) {</comment>
    <comment type="line">//                     if(dx[k1] + i1 &lt; 0 || dx[k1] + i1 &gt;= n || dy[k1] + j1 &lt; 0 || dy[k1] + j1 &gt;= m) continue;</comment>

    <comment type="line">//                     int cellc1 = (dx[k1]+i1)*m + (dy[k1]+j1);</comment>
    <comment type="line">//                     if(cellv[cellc1] == color) cnt++;</comment>
    <comment type="line">//                 }</comment>

    <comment type="line">//                 if(cnt &gt; 1) {</comment>
    <comment type="line">//                     fl = 1;</comment>
    <comment type="line">//                     break;</comment>
    <comment type="line">//                 }</comment>
    <comment type="line">//             }</comment>

    <comment type="line">//             if(fl) break;</comment>
    <comment type="line">//         }</comment>

    <comment type="line">//         if(fl == 0) ans++;</comment>

    <comment type="line">//     }</comment>

    <comment type="line">//     cout&lt;&lt;n&lt;&lt;" "&lt;&lt;m&lt;&lt;" "&lt;&lt;ans&lt;&lt;endl;</comment>
    <comment type="line">// }</comment>

    


}</block></function>
</unit>
