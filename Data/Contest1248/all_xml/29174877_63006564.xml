<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29174877_63006564.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>

<comment type="line">//const int maxn=19;</comment>
<comment type="line">//int a[maxn][maxn];</comment>
<comment type="line">//int n,m;</comment>
<comment type="line">//pair&lt;int,int&gt; getid(int x){</comment>
<comment type="line">//    return make_pair(x/m+1,x%m+1);</comment>
<comment type="line">//}</comment>
<comment type="line">//vector&lt;pair&lt;int,int&gt; &gt; v;</comment>
<comment type="line">//</comment>
<comment type="line">//bool cc(){</comment>
<comment type="line">//    for(int i=1;i&lt;=n;++i)</comment>
<comment type="line">//        for(int j=1;j&lt;=m;++j){</comment>
<comment type="line">//            if(i+1&lt;=n&amp;&amp;a[i+1][j]==a[i][j]&amp;&amp;j+1&lt;=m&amp;&amp;a[i][j+1]==a[i][j]) return 0;</comment>
<comment type="line">//            if(i-1&gt;=1&amp;&amp;a[i-1][j]==a[i][j]&amp;&amp;j+1&lt;=m&amp;&amp;a[i][j+1]==a[i][j]) return 0;</comment>
<comment type="line">//            if(i-1&gt;=1&amp;&amp;a[i-1][j]==a[i][j]&amp;&amp;j-1&gt;=1&amp;&amp;a[i][j-1]==a[i][j]) return 0;</comment>
<comment type="line">//            if(i+1&lt;=n&amp;&amp;a[i+1][j]==a[i][j]&amp;&amp;j-1&gt;=1&amp;&amp;a[i][j-1]==a[i][j]) return 0;</comment>
<comment type="line">//            if(i+1&lt;=n&amp;&amp;a[i+1][j]==a[i][j]&amp;&amp;i-1&gt;=1&amp;&amp;a[i-1][j]==a[i][j]) return 0;</comment>
<comment type="line">//            if(j-1&gt;=1&amp;&amp;a[i][j-1]==a[i][j]&amp;&amp;j+1&lt;=m&amp;&amp;a[i][j+1]==a[i][j]) return 0;</comment>
<comment type="line">//        }</comment>
<comment type="line">//    return 1;</comment>
<comment type="line">//}</comment>
<comment type="line">//</comment>
<comment type="line">//bool check(){</comment>
<comment type="line">//    if(!cc()) return 0;</comment>
<comment type="line" format="doxygen">////    for(int i=0;i&lt;v.size();++i){</comment>
<comment type="line" format="doxygen">////        a[v[i].first][v[i].second]=1;</comment>
<comment type="line" format="doxygen">////        if(cc()) return 0;</comment>
<comment type="line" format="doxygen">////        a[v[i].first][v[i].second]=0;</comment>
<comment type="line" format="doxygen">////    }</comment>
<comment type="line">//</comment>
<comment type="line">//    return 1;</comment>
<comment type="line">//}</comment>
<comment type="line">//</comment>
<comment type="line">//int main(){</comment>
<comment type="line">//    //scanf("%d%d",&amp;n,&amp;m);</comment>
<comment type="line">//</comment>
<comment type="line">//    for(n=1;n&lt;=5;++n){</comment>
<comment type="line">//        for(m=1;m&lt;=5;++m){</comment>
<comment type="line">//            int res=0;</comment>
<comment type="line">//            for(int val=0;val&lt;(1&lt;&lt;(n*m));++val){</comment>
<comment type="line">//                memset(a,0,sizeof(a));</comment>
<comment type="line">//                v.clear();</comment>
<comment type="line">//                for(int i=0;i&lt;n*m;++i){</comment>
<comment type="line">//                    pair&lt;int,int&gt; p=getid(i);</comment>
<comment type="line">//                    //cout&lt;&lt;p.first&lt;&lt;" "&lt;&lt;p.second&lt;&lt;endl;</comment>
<comment type="line">//                    if(val&amp;(1&lt;&lt;i)) a[p.first][p.second]=1;</comment>
<comment type="line">//                    else a[p.first][p.second]=0,v.push_back(p);</comment>
<comment type="line">//                }</comment>
<comment type="line">//                if(check()){</comment>
<comment type="line" format="doxygen">////                    for(int i=1;i&lt;=n;++i){</comment>
<comment type="line" format="doxygen">////                        for(int j=1;j&lt;=m;++j) cout&lt;&lt;a[i][j]&lt;&lt;" ";</comment>
<comment type="line" format="doxygen">////                        cout&lt;&lt;endl;</comment>
<comment type="line" format="doxygen">////                    }</comment>
<comment type="line" format="doxygen">////                    cout&lt;&lt;endl;</comment>
<comment type="line">//                    ++res;</comment>
<comment type="line">//                }</comment>
<comment type="line">//            }</comment>
<comment type="line">//            cout&lt;&lt;res&lt;&lt;" ";</comment>
<comment type="line">//</comment>
<comment type="line">//        }</comment>
<comment type="line">//        cout&lt;&lt;endl;</comment>
<comment type="line">//    }</comment>
<comment type="line">//</comment>
<comment type="line">//    return 0;</comment>
<comment type="line">//}</comment>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name><init>=<expr><literal type="number">1e5</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mod</name><init>=<expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>a</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>sum</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>b</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><literal type="number">2</literal></expr><operator>,</operator><expr><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sum</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><literal type="number">2</literal></expr><operator>,</operator><expr><name><name>sum</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>=</operator><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>+</operator><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">4</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>maxn</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><operator>(</operator><name><name>a</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>a</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>)</operator><operator>%</operator><name>mod</name></expr><operator>,</operator><expr><name><name>sum</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><operator>(</operator><name><name>sum</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt></block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">//    if(n==1||m==1){</comment>
<comment type="line">//        b[1]=1,b[2]=1,b[3]=3,b[4]=3,b[5]=4,b[6]=6,b[7]=9;</comment>
<comment type="line">//        for(int i=8;i&lt;maxn;++i) b[i]=(b[i-2]+b[i-3]+b[i-4]-b[i-6]+mod)%mod;</comment>
<comment type="line">//        if(n==1) swap(n,m);</comment>
<comment type="line">//        printf("%I64d\n",b[n]);</comment>
<comment type="line">//    }</comment>
<comment type="line">//    else{</comment>
<comment type="line">//        printf("%I64d\n",(6+sum[n]+sum[m])%mod);</comment>
<comment type="line">//    }</comment>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%I64d\n"</literal></expr></argument>,<argument><expr><operator>(</operator><literal type="number">2</literal><operator>+</operator><name><name>sum</name><index>[<expr><name>n</name></expr>]</index></name><operator>+</operator><name><name>sum</name><index>[<expr><name>m</name></expr>]</index></name><operator>)</operator><operator>%</operator><name>mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
