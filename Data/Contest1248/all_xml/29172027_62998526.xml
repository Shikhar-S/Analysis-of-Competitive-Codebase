<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29172027_62998526.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int i = 0; i &lt; (int)(n); i++)</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>dy</name> <init>= <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>dx</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<function><type><name>bool</name></type> <name>check</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name><name>a</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>m</name> <init>= <expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <macro><name>rep</name><argument_list>(<argument>i</argument>, <argument>n</argument>)</argument_list></macro> <block>{
    <macro><name>rep</name><argument_list>(<argument>j</argument>, <argument>m</argument>)</argument_list></macro> <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>adj</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <macro><name>rep</name><argument_list>(<argument>k</argument>, <argument><literal type="number">4</literal></argument>)</argument_list></macro> <block>{
        <decl_stmt><decl><type><name>auto</name></type> <name>ni</name> <init>= <expr><name>i</name> <operator>+</operator> <name><name>dy</name><index>[<expr><name>k</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>nj</name> <init>= <expr><name>j</name> <operator>+</operator> <name><name>dx</name><index>[<expr><name>k</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><literal type="number">0</literal> <operator>&lt;=</operator> <name>ni</name> <operator>and</operator> <name>ni</name> <operator>&lt;</operator> <name>n</name> <operator>and</operator> <literal type="number">0</literal> <operator>&lt;=</operator> <name>nj</name> <operator>and</operator> <name>nj</name> <operator>&lt;</operator> <name>m</name></expr>)</condition><then> <block>{
          <if>if <condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name><name>a</name><index>[<expr><name>ni</name></expr>]</index><index>[<expr><name>nj</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>adj</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
        }</block></then></if>
      }</block>
      <if>if <condition>(<expr><name>adj</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{ <return>return <expr><literal type="boolean">false</literal></expr>;</return> }</block></then></if>
    }</block>
  }</block>
  <return>return <expr><literal type="boolean">true</literal></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>solve</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>m</name></decl></parameter>)</parameter_list> <block>{
  <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int64_t</name></expr></argument>&gt;</argument_list></name></type> <name>fib</name><argument_list>(<argument><expr><literal type="number">200000</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>mod</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>fib</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>fib</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">200000</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
    <expr_stmt><expr><name><name>fib</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>fib</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>fib</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>%</operator> <name>mod</name></expr>;</expr_stmt>
  }</block></for>
  <if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <name>m</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
  <decl_stmt><decl><type><name>auto</name></type> <name>ans</name> <init>= <expr><name><name>fib</name><index>[<expr><name>m</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <macro><name>rep</name><argument_list>(<argument>i</argument>, <argument>n - <literal type="number">1</literal></argument>)</argument_list></macro> <expr_stmt><expr><name>ans</name> <operator>=</operator> <operator>(</operator><name>ans</name> <operator>+</operator> <name><name>fib</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>%</operator> <name>mod</name></expr>;</expr_stmt>
  <return>return <expr><name>ans</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{

  <if>if <condition>(<expr><literal type="number">0</literal></expr>)</condition><then> <block>{
    <for>for <control>(<init><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{
      <for>for <control>(<init><decl><type><name>int</name></type> <name>m</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <macro><name>rep</name><argument_list>(<argument>bits</argument>, <argument><literal type="number">1</literal> &lt;&lt; (n * m)</argument>)</argument_list></macro> <block>{
          <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>a</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><call><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
          <macro><name>rep</name><argument_list>(<argument>i</argument>, <argument>n</argument>)</argument_list></macro> <block>{
            <macro><name>rep</name><argument_list>(<argument>j</argument>, <argument>m</argument>)</argument_list></macro> <block>{ <expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>bits</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>i</name> <operator>*</operator> <name>m</name> <operator>+</operator> <name>j</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt> }</block>
          }</block>
          <if>if <condition>(<expr><call><name>check</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{ <expr_stmt><expr><name>ans</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt> }</block></then></if>
        }</block>
        <if>if <condition>(<expr><name>ans</name> <operator>!=</operator> <call><name>solve</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>n</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name>m</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"want: "</literal> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"got: "</literal> <operator>&lt;&lt;</operator> <call><name>solve</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
        }</block></then></if>
      }</block></for>
    }</block></for>
  }</block></then></if>

  <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>solve</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
