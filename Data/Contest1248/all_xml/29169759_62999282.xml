<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29169759_62999282.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cctype&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<namespace>namespace <name>Solve1</name>
<block>{
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mo</name><init>=<expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name><init>=<expr><literal type="number">100005</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>inv</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>fac</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
	<function><type><name>void</name></type> <name>Pre_Inv</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><name><name>inv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block type="pseudo"><expr_stmt><expr><name><name>inv</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>inv</name><index>[<expr><name>p</name><operator>%</operator><name>i</name></expr>]</index></name><operator>*</operator><operator>(</operator><name>p</name><operator>-</operator><name>p</name><operator>/</operator><name>i</name><operator>)</operator><operator>%</operator><name>p</name></expr>;</expr_stmt></block></for>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block type="pseudo"><expr_stmt><expr><name><name>inv</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>inv</name><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><name><name>inv</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>%</operator><name>mo</name></expr>;</expr_stmt></block></for>
		<expr_stmt><expr><name><name>fac</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt><expr_stmt><expr><name><name>fac</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt><expr_stmt><expr><name><name>inv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block type="pseudo"><expr_stmt><expr><name><name>fac</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>fac</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>*</operator><name>i</name><operator>%</operator><name>mo</name></expr>;</expr_stmt></block></for>
		<return>return;</return>
	}</block></function>
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
	<function><type><name>void</name></type> <name>work</name><parameter_list>()</parameter_list>
	<block>{
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Pre_Inv</name><argument_list>(<argument><expr><literal type="number">100000</literal></expr></argument>,<argument><expr><name>mo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>prt1</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>prt2</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>p</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>p</name><operator>&lt;=</operator><operator>(</operator><name>n</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator></expr>;</condition><incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
		<block>{
			<decl_stmt><decl><type><name>int</name></type> <name>q</name><init>=<expr><name>n</name><operator>-</operator><operator>(</operator><name>p</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>prt1</name><operator>=</operator><operator>(</operator><name>prt1</name><operator>+</operator><name><name>fac</name><index>[<expr><name>p</name><operator>+</operator><name>q</name></expr>]</index></name><operator>*</operator><name><name>inv</name><index>[<expr><name>p</name></expr>]</index></name><operator>%</operator><name>mo</name><operator>*</operator><name><name>inv</name><index>[<expr><name>q</name></expr>]</index></name><operator>%</operator><name>mo</name><operator>)</operator><operator>%</operator><name>mo</name></expr>;</expr_stmt>
		}</block></for>
		<expr_stmt><expr><name>prt1</name><operator>=</operator><operator>(</operator><name>prt1</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><name>mo</name></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>p</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>p</name><operator>&lt;=</operator><operator>(</operator><name>m</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator></expr>;</condition><incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
		<block>{
			<decl_stmt><decl><type><name>int</name></type> <name>q</name><init>=<expr><name>m</name><operator>-</operator><operator>(</operator><name>p</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>prt2</name><operator>=</operator><operator>(</operator><name>prt2</name><operator>+</operator><name><name>fac</name><index>[<expr><name>p</name><operator>+</operator><name>q</name></expr>]</index></name><operator>*</operator><name><name>inv</name><index>[<expr><name>p</name></expr>]</index></name><operator>%</operator><name>mo</name><operator>*</operator><name><name>inv</name><index>[<expr><name>q</name></expr>]</index></name><operator>%</operator><name>mo</name><operator>)</operator><operator>%</operator><name>mo</name></expr>;</expr_stmt>
		}</block></for>
		<expr_stmt><expr><name>prt2</name><operator>=</operator><operator>(</operator><name>prt2</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><name>mo</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>(</operator><name>prt1</name><operator>+</operator><name>prt2</name><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>%</operator><name>mo</name></expr>;</expr_stmt>
		<return>return;</return>
	}</block></function>
}</block></namespace>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LOCAL</name></cpp:ifdef>
	<expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"test.in"</literal></expr></argument>,<argument><expr><literal type="string">"r"</literal></expr></argument>,<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"test.out"</literal></expr></argument>,<argument><expr><literal type="string">"w"</literal></expr></argument>,<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	
	<expr_stmt><expr><call><name><name>Solve1</name><operator>::</operator><name>work</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
