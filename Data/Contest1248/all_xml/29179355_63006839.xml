<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29179355_63006839.cpp"><comment type="line">// youngjinp20</comment>
<comment type="line">// 2019 10</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pi</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pi</name></expr></argument>&gt;</argument_list></name></type> <name>vii</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vi</name></expr></argument>&gt;</argument_list></name></type> <name>vvi</name>;</typedef>

<function><type><name>bool</name></type> <name>othersort</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>pi</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>pi</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{
	<return>return <expr><name><name>a</name><operator>.</operator><name>second</name></name> <operator>&lt;</operator> <name><name>b</name><operator>.</operator><name>second</name></name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>cur</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>mi</name> <init>= <expr><literal type="number">1e9</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>mict</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr><literal type="number">300005</literal></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>cur</name> <operator>++</operator></expr>;</expr_stmt></block></then></if>
		<if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">')'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>cur</name> <operator>--</operator></expr>;</expr_stmt></block></then></if>
		<expr_stmt><expr><name>mi</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>mi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<if>if <condition>(<expr><name>cur</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"0\n1 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></then></if>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pi</name></expr></argument>&gt;</argument_list></name></type> <name>A</name></decl>, <decl><type ref="prev"/><name>B</name></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<if>if <condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>mi</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>mict</name> <operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>B</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name>i</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<if>if <condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>mi</name><operator>+</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>B</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name>i</name></expr>, <expr><literal type="number">1</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>A</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name>i</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<if>if <condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>mi</name><operator>+</operator><literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>A</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name>i</name></expr>, <expr><literal type="number">1</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
	}</block></for>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ct</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ma</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ma_l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ma_r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>oa</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>oa_l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>oa_r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>auto</name></type> <name>e</name> <range>: <expr><name>A</name></expr></range></decl></init>)</control> <block>{
		<if>if <condition>(<expr><name><name>e</name><operator>.</operator><name>second</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
			<if>if <condition>(<expr><name>ma</name> <operator>&lt;</operator> <name>ct</name></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>ma</name> <operator>=</operator> <name>ct</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>ma_l</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>ma_r</name> <operator>=</operator> <name><name>e</name><operator>.</operator><name>first</name></name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>e</name><operator>.</operator><name>first</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>ct</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		}</block></then>
		<else>else <block>{
			<expr_stmt><expr><name>ct</name> <operator>++</operator></expr>;</expr_stmt>
		}</block></else></if>
	}</block></for>
	<for>for <control>(<init><decl><type><name>auto</name></type> <name>e</name> <range>: <expr><name>A</name></expr></range></decl></init>)</control> <block>{
		<if>if <condition>(<expr><name><name>e</name><operator>.</operator><name>second</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
			<if>if <condition>(<expr><name>ma</name> <operator>&lt;</operator> <name>ct</name></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>ma</name> <operator>=</operator> <name>ct</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>ma_l</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>ma_r</name> <operator>=</operator> <name><name>e</name><operator>.</operator><name>first</name></name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><name>ct</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<break>break;</break>
		}</block></then>
		<else>else <block>{
			<expr_stmt><expr><name>ct</name> <operator>++</operator></expr>;</expr_stmt>
		}</block></else></if>
	}</block></for>
	<for>for <control>(<init><decl><type><name>auto</name></type> <name>e</name> <range>: <expr><name>B</name></expr></range></decl></init>)</control> <block>{
		<if>if <condition>(<expr><name><name>e</name><operator>.</operator><name>second</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
			<if>if <condition>(<expr><name>oa</name> <operator>&lt;</operator> <name>ct</name></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>oa</name> <operator>=</operator> <name>ct</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>oa_l</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>oa_r</name> <operator>=</operator> <name><name>e</name><operator>.</operator><name>first</name></name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>e</name><operator>.</operator><name>first</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>ct</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		}</block></then>
		<else>else <block>{
			<expr_stmt><expr><name>ct</name> <operator>++</operator></expr>;</expr_stmt>
		}</block></else></if>
	}</block></for>
	<for>for <control>(<init><decl><type><name>auto</name></type> <name>e</name> <range>: <expr><name>B</name></expr></range></decl></init>)</control> <block>{
		<if>if <condition>(<expr><name><name>e</name><operator>.</operator><name>second</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
			<if>if <condition>(<expr><name>oa</name> <operator>&lt;</operator> <name>ct</name></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>oa</name> <operator>=</operator> <name>ct</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>oa_l</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>oa_r</name> <operator>=</operator> <name><name>e</name><operator>.</operator><name>first</name></name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><name>ct</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<break>break;</break>
		}</block></then>
		<else>else <block>{
			<expr_stmt><expr><name>ct</name> <operator>++</operator></expr>;</expr_stmt>
		}</block></else></if>
	}</block></for>
	<if>if <condition>(<expr><name>mict</name> <operator>+</operator> <name>ma</name> <operator>&gt;</operator> <name>oa</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n%d %d\n"</literal></expr></argument>, <argument><expr><name>mict</name> <operator>+</operator> <name>ma</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>ma_l</name><operator>+</operator><name>n</name><operator>)</operator><operator>%</operator><name>n</name><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>ma_r</name><operator>+</operator><name>n</name><operator>)</operator><operator>%</operator><name>n</name><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
	<else>else <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n%d %d\n"</literal></expr></argument>, <argument><expr><name>oa</name></expr></argument>, <argument><expr><operator>(</operator><name>oa_l</name><operator>+</operator><name>n</name><operator>)</operator><operator>%</operator><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>oa_r</name><operator>+</operator><name>n</name><operator>)</operator><operator>%</operator><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
