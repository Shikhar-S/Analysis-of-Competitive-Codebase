<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29137867_63001848.cpp"><comment type="line" format="doxygen">/// I won't go back on my words ... that's my ninja way !!!</comment>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">5e2</literal><operator>+</operator><literal type="number">5</literal></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><name>N</name></expr>]</index></name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mx</name> <init>= <expr><operator>-</operator><literal type="number">1e9</literal></expr></init></decl> ,<decl><type ref="prev"/><name>a</name></decl> ,<decl><type ref="prev"/><name>b</name></decl> ;</decl_stmt>
<function><type><name>int</name></type> <name>solve</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name><name>deque</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>needOpen</name></decl> ,<decl><type ref="prev"/><name>Open</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ,<decl><type ref="prev"/><name>no</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
        <if>if<condition>(<expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'('</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><operator>++</operator><name>o</name></expr> ;</expr_stmt></block></then>
        <elseif>else <if>if<condition>(<expr><name>o</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><operator>--</operator><name>o</name></expr> ;</expr_stmt></block></then></if></elseif>
        <else>else <block type="pseudo"><expr_stmt><expr><operator>++</operator><name>no</name></expr> ;</expr_stmt></block></else></if>
        <if>if<condition>(<expr><operator>!</operator><name>o</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>needOpen</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>no</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><call><name><name>needOpen</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
    }</block></for>
    <expr_stmt><expr><name>o</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition><incr><expr><operator>--</operator><name>i</name></expr></incr>)</control><block>{
        <if>if<condition>(<expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'('</literal></expr>)</condition><then><block>{
            <if>if<condition>(<expr><name>c</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><operator>--</operator><name>c</name></expr> ;</expr_stmt></block></then>
            <else>else <block type="pseudo"><expr_stmt><expr><operator>++</operator><name>o</name></expr> ;</expr_stmt></block></else></if>
        }</block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><operator>++</operator><name>c</name></expr> ;</expr_stmt></block></else></if>
        <if>if<condition>(<expr><operator>!</operator><name>c</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>Open</name><operator>.</operator><name>push_front</name></name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><call><name><name>Open</name><operator>.</operator><name>push_front</name></name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
    }</block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name><name>needOpen</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>+</operator><literal type="number">1</literal><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
        <if>if<condition>(<expr><name><name>needOpen</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>Open</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><operator>++</operator><name>ret</name></expr> ;</expr_stmt></block></then></if>
    }</block></for>
    <return>return <expr><name>ret</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%s"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
        <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><name>i</name></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block>{
            <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>str</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><call><name>solve</name><argument_list>()</argument_list></call></expr></init></decl> ;</decl_stmt>
            <if>if<condition>(<expr><name>s</name> <operator>&gt;</operator> <name>mx</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>mx</name> <operator>=</operator> <name>s</name></expr> <operator>,</operator><expr><name>a</name><operator>=</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr> <operator>,</operator><expr><name>b</name><operator>=</operator><name>j</name><operator>+</operator><literal type="number">1</literal></expr> ;</expr_stmt></block></then></if>
            <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>str</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        }</block></for>
    }</block></for>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n%d %d"</literal></expr></argument>,<argument><expr><name>mx</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
