<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29156027_62985125.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;deque&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdlib&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bitset&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fstream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;list&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iomanip&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctime&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ull</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ever</name></cpp:macro> <cpp:value>;;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>forn</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>k</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = 0; i &lt; k; i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>forin</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>l</name></type></parameter>,<parameter><type><name>u</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int (i)=(int)(l);(i)&lt;=(int)(u);(i)++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>forun</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>l</name></type></parameter>,<parameter><type><name>u</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int (i)=(int)(l);(i)&gt;=(int)(u);(i)--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>forall</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for( typeof(v.begin()) i = v.begin(); i != v.end() ; i++ )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vi</name></cpp:macro> <cpp:value>vector &lt; int &gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vll</name></cpp:macro> <cpp:value>vector &lt; ll &gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pr</name></cpp:macro> <cpp:value>pair &lt; int, int &gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vvi</name></cpp:macro> <cpp:value>vector &lt; vector &lt; int &gt; &gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vvll</name></cpp:macro> <cpp:value>vector &lt; vector &lt; long long &gt; &gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ios</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(0);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>k</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>make_pair(i,k)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>v.begin(),v.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>int(v.size())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>belongs</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(find((c).begin(), (c).end(), x) != (c).end())</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>const</specifier> <name>ull</name></type> <name>p1</name> <init>= <expr><literal type="number">131</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ull</name></type> <name>p2</name> <init>= <expr><literal type="number">129</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>eps</name> <init>= <expr><literal type="number">1e-8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>pi</name> <init>= <expr><call><name>acos</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>infi</name> <init>= <expr><literal type="number">1e9</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>inf</name> <init>= <expr><literal type="number">9223372036854775807</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>dd</name> <init>= <expr><literal type="number">1e3</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>


<struct><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T1</name></parameter>, <parameter><type><name>class</name></type> <name>T2</name></parameter>, <parameter><type><name>class</name></type> <name>Pred</name> <init>= <expr><name><name>std</name><operator>::</operator><name><name>less</name><argument_list type="generic">&lt;<argument><expr><name>T2</name></expr></argument>&gt;</argument_list></name></name></expr></init></parameter> &gt;</parameter_list></template>
struct <name>sort_pair_second</name> <block>{<public type="default">
	<function type="operator"><type><name>bool</name></type> <name>operator<name>()</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>T1</name></expr></argument>, <argument><expr><name>T2</name></expr></argument>&gt;</argument_list></name></name><modifier>&amp;</modifier></type> <name>left</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>T1</name></expr></argument>, <argument><expr><name>T2</name></expr></argument>&gt;</argument_list></name></name><modifier>&amp;</modifier></type> <name>right</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>Pred</name></type> <name>p</name></decl>;</decl_stmt>
		<return>return <expr><call><name>p</name><argument_list>(<argument><expr><name><name>left</name><operator>.</operator><name>second</name></name></expr></argument>, <argument><expr><name><name>right</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
</public>}</block>;</struct>


<struct>struct <name>ftree</name> <block>{<public type="default">
	<decl_stmt><decl><type><name>vll</name></type> <name>B</name></decl>;</decl_stmt>
	<constructor><name>ftree</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>N</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>B</name><argument_list>(<argument><expr><call><name>vll</name><argument_list>(<argument><expr><name>N</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> </member_init_list><block>{
	}</block></constructor>
	<function><type><name>void</name></type> <name>change</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>B</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name>v</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>ll</name></type> <name>mask</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{
			<if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>i</name> <operator>&amp;</operator> <name>mask</name><operator>)</operator></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>i</name> <operator>|=</operator> <name>mask</name></expr>;</expr_stmt>
				<if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <call><name>sz</name><argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
					<break>break;</break>
				}</block></then></if>
				<expr_stmt><expr><name><name>B</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name>v</name></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><name>mask</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		}</block></while>
	}</block></function>
	<function><type><name>ll</name></type> <name>sum</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>ll</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

		<for>for <control>(<init>;</init> <condition><expr><name>x</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>&amp;</operator> <operator>(</operator><name>x</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{
			<expr_stmt><expr><name>result</name> <operator>+=</operator> <name><name>B</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
		}</block></for>

		<return>return <expr><name>result</name></expr>;</return>
	}</block></function>
	<function><type><name>ll</name></type> <name>sum</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>r</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><name>l</name></expr>)</condition><then> <block>{
			<return>return <expr><call><name>sum</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>sum</name><argument_list>(<argument><expr><name>l</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
		}</block></then>
		<else>else <block>{
			<return>return <expr><call><name>sum</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></else></if>
	}</block></function>
</public>}</block>;</struct>
<function><type><name>int</name></type> <name>getFirst</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
	<return>return <expr><name>x</name> <operator>%</operator> <literal type="number">10</literal></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>getLast</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
	<while>while <condition>(<expr><name>x</name> <operator>&gt;=</operator> <literal type="number">10</literal></expr>)</condition> <block>{
		<expr_stmt><expr><name>x</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
	}</block></while>
	<return>return <expr><name>x</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>FindMax</name><parameter_list>(<parameter><decl><type><name>vi</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>maxx</name> <init>= <expr><operator>-</operator><name>infi</name></expr></init></decl>;</decl_stmt>
	<macro><name>forn</name><argument_list>(<argument>i</argument>, <argument>(int)a.size()</argument>)</argument_list></macro> <block>{
		<expr_stmt><expr><name>maxx</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>maxx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block>
	<return>return <expr><name>maxx</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>FindMin</name><parameter_list>(<parameter><decl><type><name>vi</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>minn</name> <init>= <expr><name>infi</name></expr></init></decl>;</decl_stmt>
	<macro><name>forn</name><argument_list>(<argument>i</argument>, <argument>(int)a.size()</argument>)</argument_list></macro> <block>{
		<expr_stmt><expr><name>minn</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>minn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block>
	<return>return <expr><name>minn</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
	<if>if <condition>(<expr><name>b</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
		<block type="pseudo"><return>return <expr><name>a</name></expr>;</return></block></then>
	<else>else
		<block type="pseudo"><return>return <expr><call><name>gcd</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name> <operator>%</operator> <name>b</name></expr></argument>)</argument_list></call></expr>;</return></block></else></if>
}</block></function>
<function><type><name>string</name></type> <name>toBinary</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>string</name></type> <name>r</name></decl>;</decl_stmt>
	<while>while <condition>(<expr><name>n</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{ <expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>n</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">"0"</literal></expr> </then><else>: <expr><literal type="string">"1"</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <name>r</name></expr>;</expr_stmt> <expr_stmt><expr><name>n</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt> }</block></while>
	<return>return <expr><name>r</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{

	<expr_stmt><expr><name>ios</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">//Ð¿ÑÐ¸Ð¼Ð¸ÑÐµ Ð¿Ð¾Ð¶Ð°Ð»ÑÐ¹ÑÑÐ°</comment>
	<comment type="line">//ifstream cin("input.in");</comment>
	<comment type="line">//ofstream cout("output.txt");</comment>
	<comment type="line">//srand(time(0));</comment>
	<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>vll</name></type> <name>a</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
	<macro><name>forn</name><argument_list>(<argument>i</argument>, <argument>n</argument>)</argument_list></macro> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>x</name><init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>j</name><init>= <expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name><operator>/</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator><expr><name>j</name><operator>--</operator></expr></incr>)</control>
	<block>{
		<if>if <condition>(<expr><name>n</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>==</operator> <name>n</name> <operator>/</operator> <literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
		<expr_stmt><expr><name>x</name> <operator>+=</operator> <name><name>a</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>n</name> <operator>/</operator> <literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
		<expr_stmt><expr><name>y</name> <operator>+=</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>x</name> <operator>*</operator> <name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>y</name></expr>;</expr_stmt>
	<comment type="line">//cout &lt;&lt; endl&lt;&lt; "runtime = " &lt;&lt; clock() / 1000.0 &lt;&lt; endl;</comment>
	<comment type="line">//cout.close();</comment>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>






</unit>
