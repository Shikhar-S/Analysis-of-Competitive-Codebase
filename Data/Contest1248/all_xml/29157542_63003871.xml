<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29157542_63003871.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>start</name></type></parameter>, <parameter><type><name>end</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int i = (int)start; i &lt; (int)end; ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rrep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>start</name></type></parameter>, <parameter><type><name>end</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int i = (int)start - 1; i &gt;= end; --i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>arep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (auto i = (c).begin(); i != (c).end(); ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x).begin(), (x).end()</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>

<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>MOD</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<class><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
class <name>Combination</name> <block>{<private type="default">
    </private><private>private:
        <decl_stmt><decl><type><name>T</name></type> <name>mod</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>factorial</name></decl>, <decl><type ref="prev"/><name>inv_factorial</name></decl>, <decl><type ref="prev"/><name>inv</name></decl>;</decl_stmt>
    </private><public>public:
        <constructor><name>Combination</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>max_number</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>_mod</name></decl></parameter>)</parameter_list><member_init_list>:
        <call><name>mod</name><argument_list>(<argument><expr><name>_mod</name></expr></argument>)</argument_list></call>, <call><name>factorial</name><argument_list>(<argument><expr><name>max_number</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call>, <call><name>inv_factorial</name><argument_list>(<argument><expr><name>max_number</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call>, <call><name>inv</name><argument_list>(<argument><expr><name>max_number</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> </member_init_list><block>{
            <expr_stmt><expr><name><name>factorial</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>factorial</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>inv_factorial</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>inv_factorial</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>inv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>max_number</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
                <expr_stmt><expr><name><name>factorial</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>factorial</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>i</name><operator>)</operator> <operator>%</operator> <name>mod</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>inv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>mod</name> <operator>-</operator> <name><name>inv</name><index>[<expr><name>mod</name> <operator>%</operator> <name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>mod</name> <operator>/</operator> <name>i</name><operator>)</operator> <operator>%</operator> <name>mod</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>inv_factorial</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>inv_factorial</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>inv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>%</operator> <name>mod</name></expr>;</expr_stmt>
            }</block></for>
        }</block></constructor>
        <function><type><name>T</name></type> <name>calc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list> <block>{
            <if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <name>k</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
            <if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>k</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
            <return>return <expr><name><name>factorial</name><index>[<expr><name>n</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name><name>inv_factorial</name><index>[<expr><name>k</name></expr>]</index></name> <operator>*</operator> <name><name>inv_factorial</name><index>[<expr><name>n</name> <operator>-</operator> <name>k</name></expr>]</index></name> <operator>%</operator> <name>mod</name><operator>)</operator> <operator>%</operator> <name>mod</name></expr>;</return>
        }</block></function>
</public>}</block>;</class>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>N</name></decl>, <decl><type ref="prev"/><name>M</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>N</name> <operator>&gt;&gt;</operator> <name>M</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>Combination</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>comb</name><argument_list>(<argument><expr><call><name>max</name><argument_list>(<argument><expr><name>N</name></expr></argument>, <argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MOD</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <macro><name>rep</name><argument_list>(<argument>i</argument>, <argument><literal type="number">0</literal></argument>, <argument>N + <literal type="number">1</literal></argument>)</argument_list></macro> <block>{
        <if>if <condition>(<expr><operator>(</operator><name>N</name> <operator>-</operator> <name>i</name><operator>)</operator> <operator>%</operator> <literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
        <decl_stmt><decl><type><name>ll</name></type> <name>x</name> <init>= <expr><name>i</name></expr></init></decl>, <decl><type ref="prev"/><name>y</name> <init>= <expr><operator>(</operator><name>N</name> <operator>-</operator> <name>i</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>ans</name> <operator>=</operator> <operator>(</operator><name>ans</name> <operator>+</operator> <call><name><name>comb</name><operator>.</operator><name>calc</name></name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>%</operator> <name>MOD</name></expr>;</expr_stmt>
    }</block>
    <macro><name>rep</name><argument_list>(<argument>i</argument>, <argument><literal type="number">0</literal></argument>, <argument>M + <literal type="number">1</literal></argument>)</argument_list></macro> <block>{
        <if>if <condition>(<expr><operator>(</operator><name>M</name> <operator>-</operator> <name>i</name><operator>)</operator> <operator>%</operator> <literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
        <decl_stmt><decl><type><name>ll</name></type> <name>x</name> <init>= <expr><name>i</name></expr></init></decl>, <decl><type ref="prev"/><name>y</name> <init>= <expr><operator>(</operator><name>M</name> <operator>-</operator> <name>i</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>ans</name> <operator>=</operator> <operator>(</operator><name>ans</name> <operator>+</operator> <call><name><name>comb</name><operator>.</operator><name>calc</name></name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>%</operator> <name>MOD</name></expr>;</expr_stmt>
    }</block>
    <expr_stmt><expr><name>ans</name> <operator>=</operator> <operator>(</operator><name>ans</name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <name>MOD</name><operator>)</operator> <operator>%</operator> <name>MOD</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ans</name> <operator>=</operator> <operator>(</operator><name>ans</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator> <operator>%</operator> <name>MOD</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
