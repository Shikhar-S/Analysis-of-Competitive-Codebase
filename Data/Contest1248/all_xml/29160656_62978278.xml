<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29160656_62978278.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fast_io</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>ios_base::sync_with_stdio(false); cin.tie(0);</cpp:value></cpp:define>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>ii</name>;</typedef>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MOD</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>


<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name>fast_io</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name><name>arr</name><index>[<expr><name>n</name></expr>]</index></name></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
		<decl_stmt><decl><type><name>int</name></type> <name>odd</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>even</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>m</name></decl> ;</decl_stmt>
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>m</name></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
			<decl_stmt><decl><type><name>int</name></type> <name>num</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>num</name></expr>;</expr_stmt>
			<if>if<condition>(<expr><name>num</name><operator>%</operator><literal type="number">2</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>odd</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			}</block></then> <else>else <block>{
				<expr_stmt><expr><name>even</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			}</block></else></if>
		}</block></for>
		<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
			<if>if<condition>(<expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>%</operator><literal type="number">2</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>cnt</name> <operator>+=</operator> <name>odd</name></expr>;</expr_stmt>
			}</block></then> <else>else <block>{
				<expr_stmt><expr><name>cnt</name> <operator>+=</operator> <name>even</name></expr>;</expr_stmt>
			}</block></else></if>
		}</block></for>
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>cnt</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
	}</block></while>
}</block></function></unit>
