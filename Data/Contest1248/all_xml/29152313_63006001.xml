<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29152313_63006001.cpp"><cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><name>3</name><name>)</name></cpp:pragma>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstdlib&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;ctime&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;sstream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cctype&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iomanip&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;functional&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>in</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x=read()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>qr</name></cpp:macro> <cpp:value>read()</cpp:value></cpp:define>
<comment type="line">//#define int ll</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ull</name>;</typedef>
<namespace>namespace <name>fastIO</name>
<block>{
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUF_SIZE</name></cpp:macro> <cpp:value>100000</cpp:value></cpp:define>
    <decl_stmt><decl><type><name>bool</name></type> <name>IOerror</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <function><specifier>inline</specifier> <type><name>char</name></type> <name>nc</name><parameter_list>()</parameter_list>
	<block>{
        <decl_stmt><decl><specifier>static</specifier> <type><name>char</name></type> <name><name>buf</name><index>[<expr><name>BUF_SIZE</name></expr>]</index></name></decl>,<modifier>*</modifier><decl><type ref="prev"/><name>p1</name><init>=<expr><name>buf</name><operator>+</operator><name>BUF_SIZE</name></expr></init></decl>,<modifier>*</modifier><decl><type ref="prev"/><name>pend</name><init>=<expr><name>buf</name><operator>+</operator><name>BUF_SIZE</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>p1</name><operator>==</operator><name>pend</name></expr>)</condition><then><block>{
            <expr_stmt><expr><name>p1</name><operator>=</operator><name>buf</name></expr>;</expr_stmt> <expr_stmt><expr><name>pend</name><operator>=</operator><name>buf</name><operator>+</operator><call><name>fread</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>BUF_SIZE</name></expr></argument>,<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>pend</name><operator>==</operator><name>p1</name></expr>)</condition><then><block>{<expr_stmt><expr><name>IOerror</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt><return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>}</block></then></if>
        }</block></then></if>
        <return>return <expr><operator>*</operator><name>p1</name><operator>++</operator></expr>;</return>
    }</block></function>
    <function><specifier>inline</specifier> <type><name>bool</name></type> <name>blank</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>ch</name></decl></parameter>)</parameter_list><block>{<return>return <expr><name>ch</name><operator>==</operator><literal type="char">' '</literal><operator>||</operator><name>ch</name><operator>==</operator><literal type="char">'\n'</literal><operator>||</operator><name>ch</name><operator>==</operator><literal type="char">'\r'</literal><operator>||</operator><name>ch</name><operator>==</operator><literal type="char">'\t'</literal></expr>;</return>}</block></function>
    <function><specifier>inline</specifier> <type><name>ll</name></type> <name>read</name><parameter_list>()</parameter_list>
	<block>{
        <decl_stmt><decl><type><name>bool</name></type> <name>sign</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <decl_stmt><decl><type><name>char</name></type> <name>ch</name><init>=<expr><call><name>nc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><decl_stmt><decl><type><name>ll</name></type> <name>x</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init>;</init><condition><expr><call><name>blank</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</condition><incr><expr><name>ch</name><operator>=</operator><call><name>nc</name><argument_list>()</argument_list></call></expr></incr>)</control><block type="pseudo"><empty_stmt>;</empty_stmt></block></for>
        <if>if <condition>(<expr><name>IOerror</name></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
        <if>if <condition>(<expr><name>ch</name><operator>==</operator><literal type="char">'-'</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>sign</name><operator>=</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name>ch</name><operator>=</operator><call><name>nc</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
        <for>for <control>(<init>;</init><condition><expr><name>ch</name><operator>&gt;=</operator><literal type="char">'0'</literal><operator>&amp;&amp;</operator><name>ch</name><operator>&lt;=</operator><literal type="char">'9'</literal></expr>;</condition><incr><expr><name>ch</name><operator>=</operator><call><name>nc</name><argument_list>()</argument_list></call></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name>x</name><operator>=</operator><name>x</name><operator>*</operator><literal type="number">10</literal><operator>+</operator><name>ch</name><operator>-</operator><literal type="char">'0'</literal></expr>;</expr_stmt></block></for>
        <if>if <condition>(<expr><name>sign</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>x</name><operator>=</operator><operator>-</operator><name>x</name></expr>;</expr_stmt></block></then></if>
        <return>return <expr><name>x</name></expr>;</return>
    }</block></function>
    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BUF_SIZE</name></cpp:undef>
}</block></namespace><empty_stmt>;</empty_stmt>
<using>using <namespace>namespace <name>fastIO</name>;</namespace></using>
<decl_stmt><decl><type><name>int</name></type> <name><name>num</name><index>[<expr><literal type="number">1000</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>t</name><index>[<expr><literal type="number">10000</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>s</name><index>[<expr><literal type="number">10000</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>f</name></decl>,<decl><type ref="prev"/><name>l</name></decl>,<decl><type ref="prev"/><name><name>q</name><index>[<expr><literal type="number">10010</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<comment type="line">//freopen(".in","r",stdin);</comment>
	<comment type="line">//freopen(".out","w",stdout);</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>maxx</name><init>=<expr><operator>-</operator><literal type="number">1e16</literal></expr></init></decl>,<decl><type ref="prev"/><name>maxi</name></decl>,<decl><type ref="prev"/><name>maxj</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>s</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><name>i</name></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
		<block>{
			<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
			<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>t</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name><name>t</name><index>[<expr><name>n</name><operator>+</operator><name>i</name></expr>]</index></name><operator>=</operator><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
			<expr_stmt><expr><name>f</name><operator>=</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name>l</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>now</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
			<for>for<control>(<init><decl><type><name>int</name></type> <name>k</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>k</name><operator>&lt;</operator><literal type="number">2</literal><operator>*</operator><name>n</name></expr>;</condition><incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
			<block>{
				<if>if<condition>(<expr><name><name>t</name><index>[<expr><name>k</name></expr>]</index></name><operator>==</operator><literal type="char">'('</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>now</name><operator>++</operator></expr>;</expr_stmt></block></then>
				<else>else <block type="pseudo"><expr_stmt><expr><name>now</name><operator>--</operator></expr>;</expr_stmt></block></else></if>
				<expr_stmt><expr><name><name>num</name><index>[<expr><name>k</name></expr>]</index></name><operator>=</operator><name>now</name></expr>;</expr_stmt>
				<while>while<condition>(<expr><operator>(</operator><name>f</name><operator>&lt;=</operator><name>l</name><operator>)</operator><operator>&amp;&amp;</operator><operator>(</operator><name><name>num</name><index>[<expr><name>k</name></expr>]</index></name><operator>&lt;</operator><name><name>num</name><index>[<expr><name><name>q</name><index>[<expr><name>l</name></expr>]</index></name></expr>]</index></name><operator>)</operator></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>l</name><operator>--</operator></expr>;</expr_stmt></block></while>
				<expr_stmt><expr><name><name>q</name><index>[<expr><operator>++</operator><name>l</name></expr>]</index></name><operator>=</operator><name>k</name></expr>;</expr_stmt>
				<while>while<condition>(<expr><operator>(</operator><name>f</name><operator>&lt;=</operator><name>l</name><operator>)</operator><operator>&amp;&amp;</operator><operator>(</operator><name><name>q</name><index>[<expr><name>f</name></expr>]</index></name><operator>&lt;=</operator><name>k</name><operator>-</operator><name>n</name><operator>)</operator></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>f</name><operator>++</operator></expr>;</expr_stmt></block></while>
				<if>if<condition>(<expr><name>k</name><operator>&gt;=</operator><name>n</name></expr>)</condition><then>
				<block>{
				<comment type="line">//	cout&lt;&lt;i&lt;&lt;" "&lt;&lt;j&lt;&lt;" "&lt;&lt;k&lt;&lt;" "&lt;&lt;*s.begin()&lt;&lt;"\n";</comment>
					<if>if<condition>(<expr><name>now</name><operator>==</operator><name><name>num</name><index>[<expr><name>k</name><operator>-</operator><name>n</name></expr>]</index></name><operator>&amp;&amp;</operator><name><name>num</name><index>[<expr><name><name>q</name><index>[<expr><name>f</name></expr>]</index></name></expr>]</index></name><operator>==</operator><name><name>num</name><index>[<expr><name>k</name><operator>-</operator><name>n</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>ans</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
				}</block></then></if>
			}</block></for>
			<if>if<condition>(<expr><name>ans</name><operator>&gt;</operator><name>maxx</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>maxx</name><operator>=</operator><name>ans</name></expr><operator>,</operator><expr><name>maxi</name><operator>=</operator><name>i</name></expr><operator>,</operator><expr><name>maxj</name><operator>=</operator><name>j</name></expr>;</expr_stmt></block></then></if>
		}</block></for>
	}</block></for>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>maxx</name><operator>&lt;&lt;</operator><literal type="char">'\n'</literal><operator>&lt;&lt;</operator><name>maxi</name><operator>&lt;&lt;</operator><literal type="char">' '</literal><operator>&lt;&lt;</operator><name>maxj</name><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
