<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29180436_62997354.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>LL</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>LL</name></type> <name>MOD</name><init>=<expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LL</name></type> <name><name>memo</name><index>[<expr><literal type="number">100005</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>LL</name></type> <name>solve</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ix</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sisa</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>con</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><name>ix</name><operator>&lt;=</operator><literal type="number">0</literal></expr>)</condition><then><block>{
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    }</block></then></if>
    <if>if<condition>(<expr><name><name>memo</name><index>[<expr><name>ix</name></expr>]</index><index>[<expr><name>sisa</name></expr>]</index><index>[<expr><name>con</name></expr>]</index></name><operator>!=</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name><name>memo</name><index>[<expr><name>ix</name></expr>]</index><index>[<expr><name>sisa</name></expr>]</index><index>[<expr><name>con</name></expr>]</index></name></expr>;</return></block></then></if>
    <decl_stmt><decl><type><name>LL</name></type> <name>ret</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>sisa</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then><block>{
        <expr_stmt><expr><name>ret</name><operator>+=</operator><call><name>solve</name><argument_list>(<argument><expr><name>ix</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>con</name><operator>^</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ret</name><operator>%=</operator><name>MOD</name></expr>;</expr_stmt>
    }</block></then>
    <else>else<block>{
        <expr_stmt><expr><name>ret</name><operator>+=</operator><call><name>solve</name><argument_list>(<argument><expr><name>ix</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>sisa</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ret</name><operator>%=</operator><name>MOD</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ret</name><operator>+=</operator><call><name>solve</name><argument_list>(<argument><expr><name>ix</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>con</name><operator>^</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ret</name><operator>%=</operator><name>MOD</name></expr>;</expr_stmt>
    }</block></else></if>
    <return>return <expr><name><name>memo</name><index>[<expr><name>ix</name></expr>]</index><index>[<expr><name>sisa</name></expr>]</index><index>[<expr><name>con</name></expr>]</index></name><operator>=</operator><name>ret</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>memo</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>memo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>m</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>LL</name></type> <name>hasil</name><init>=<expr><operator>(</operator><call><name>solve</name><argument_list>(<argument><expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>+</operator><call><name>solve</name><argument_list>(<argument><expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>%</operator><name>MOD</name><operator>+</operator><operator>(</operator><call><name>solve</name><argument_list>(<argument><expr><name>m</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>+</operator><call><name>solve</name><argument_list>(<argument><expr><name>m</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>%</operator><name>MOD</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>(</operator><operator>(</operator><name>hasil</name><operator>-</operator><literal type="number">2</literal><operator>)</operator><operator>%</operator><name>MOD</name><operator>+</operator><name>MOD</name><operator>)</operator><operator>%</operator><name>MOD</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
