<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29177477_62981003.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ss</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<decl_stmt><decl><type><name>int</name> <specifier>const</specifier></type> <name>INF</name> <init>= <expr><literal type="number">2e8</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mod</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>g</name><index>[<expr><literal type="number">200004</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>color</name><argument_list>(<argument><expr><literal type="number">200004</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<struct>struct <name>point</name> <block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
</public>}</block>;</struct>
<function><type><name>bool</name></type> <name>comp1</name><parameter_list>(<parameter><decl><type><name>point</name></type> <name>p1</name></decl></parameter>, <parameter><decl><type><name>point</name></type> <name>p2</name></decl></parameter>)</parameter_list> <block>{
	<if>if <condition>(<expr><name><name>p1</name><operator>.</operator><name>x</name></name> <operator>==</operator> <name><name>p2</name><operator>.</operator><name>x</name></name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name><name>p1</name><operator>.</operator><name>y</name></name> <operator>&lt;</operator> <name><name>p2</name><operator>.</operator><name>y</name></name></expr>;</return></block></then></if>
	<return>return <expr><name><name>p1</name><operator>.</operator><name>x</name></name> <operator>&lt;</operator> <name><name>p2</name><operator>.</operator><name>x</name></name></expr>;</return>
}</block></function>
<function><type><name>bool</name></type> <name>comp2</name><parameter_list>(<parameter><decl><type><name>point</name></type> <name>p1</name></decl></parameter>, <parameter><decl><type><name>point</name></type> <name>p2</name></decl></parameter>)</parameter_list> <block>{
	<if>if <condition>(<expr><name><name>p1</name><operator>.</operator><name>y</name></name> <operator>==</operator> <name><name>p2</name><operator>.</operator><name>y</name></name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name><name>p1</name><operator>.</operator><name>x</name></name> <operator>&lt;</operator> <name><name>p2</name><operator>.</operator><name>x</name></name></expr>;</return></block></then></if>
	<return>return <expr><name><name>p1</name><operator>.</operator><name>y</name></name> <operator>&lt;</operator> <name><name>p2</name><operator>.</operator><name>y</name></name></expr>;</return>
}</block></function>

<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>a</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>a</name><operator>.</operator><name>rbegin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>a</name><operator>.</operator><name>rend</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ct1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>*</operator><literal type="number">2</literal> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<expr_stmt><expr><name>ct1</name> <operator>+=</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ct1</name> <operator>*</operator> <name>ct1</name> <operator>+</operator> <operator>(</operator><name>sum</name> <operator>-</operator> <name>ct1</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>sum</name> <operator>-</operator> <name>ct1</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
}</block></function>
</unit>
