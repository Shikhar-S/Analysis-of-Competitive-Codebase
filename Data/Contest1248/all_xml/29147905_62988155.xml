<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29147905_62988155.cpp"><comment type="line">//2019.10.18 by ljz</comment>
<comment type="line">//email 573902690@qq.com</comment>
<comment type="line">//if you find any bug in my code</comment>
<comment type="line">//please tell me</comment>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<comment type="line">//#include&lt;ext/pb_ds/tree_policy.hpp&gt;</comment>
<comment type="line">//#include&lt;ext/pb_ds/assoc_container.hpp&gt;</comment>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<comment type="line">//using namespace __gnu_pbds;</comment>
<comment type="line">//using namespace __gnu_cxx;</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>res</name></cpp:macro> <cpp:value>register int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inf</name></cpp:macro> <cpp:value>0x3f3f3f3f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INF</name></cpp:macro> <cpp:value>0x3f3f3f3f3f3f3f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>unl</name></cpp:macro> <cpp:value>__int128</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>eps</name></cpp:macro> <cpp:value>5.6e-8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RG</name></cpp:macro> <cpp:value>register</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>db</name></cpp:macro> <cpp:value>double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pc</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_popcount(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ctz</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_ctz(x)</cpp:value></cpp:define>
<comment type="line">//#define pc(x) __builtin_popcountll(x)</comment>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>Pair</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pi</name></cpp:macro> <cpp:value>acos(-1.0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ull</name></cpp:macro> <cpp:value>unsigned LL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lowbit</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x&amp;-x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gc</name></cpp:macro> <cpp:value>getchar</cpp:value></cpp:define>
<comment type="line">//template &lt;class T&gt;using Tree=tree&lt;T,null_type,less&lt;T&gt;,rb_tree_tag,tree_order_statistics_node_update&gt;;</comment>
<comment type="line">//inline char gc() {</comment>
<comment type="line">//    static char buf[100000],*p1,*p2;</comment>
<comment type="line">//    return p1==p2&amp;&amp;(p2=(p1=buf)+fread(buf,1,100000,stdin),p1==p2)?EOF:*p1++;</comment>
<comment type="line">//}</comment>
<function><specifier>inline</specifier> <type><name>int</name></type> <name>read</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>res</name></type> <name>s</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>ch</name><init>=<expr><call><name>gc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name><name>ch</name><argument_list type="generic">&lt;<argument><expr><literal type="char">'0'</literal><operator>||</operator><name>ch</name></expr></argument>&gt;</argument_list></name><literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>ch</name><operator>=</operator><call><name>gc</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
    <while>while<condition>(<expr><name>ch</name><operator>&gt;=</operator><literal type="char">'0'</literal><operator>&amp;&amp;</operator><name>ch</name><operator>&lt;=</operator><literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>s</name><operator>=</operator><name>s</name><operator>*</operator><literal type="number">10</literal><operator>+</operator><name>ch</name><operator>-</operator><literal type="char">'0'</literal></expr><operator>,</operator><expr><name>ch</name><operator>=</operator><call><name>gc</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
    <return>return <expr><name>s</name></expr>;</return>
}</block></function>
<comment type="line">//char sr[1&lt;&lt;21],z[20];</comment>
<comment type="line">//int C=-1,Z=0;</comment>
<comment type="line">//inline void Ot(){fwrite(sr,1,C+1,stdout),C=-1;}</comment>
<comment type="line">//inline void print(res x){</comment>
<comment type="line">//    if(C&gt;1&lt;&lt;20)Ot();if(x&lt;0)sr[++C]='-',x=-x;</comment>
<comment type="line">//    while(z[++Z]=x%10+48,x/=10);</comment>
<comment type="line">//    while(sr[++C]=z[Z],--Z);sr[++C]='\n';</comment>
<comment type="line">//}</comment>
<comment type="line">//inline int read() {</comment>
<comment type="line">//    res s=0,ch=gc(),w=1;</comment>
<comment type="line">//    while(ch&lt;'0'||ch&gt;'9'){if(ch=='-')w=-1;ch=gc();}</comment>
<comment type="line">//    while(ch&gt;='0'&amp;&amp;ch&lt;='9')s=s*10+ch-'0',ch=gc();</comment>
<comment type="line">//    return s*w;</comment>
<comment type="line">//}</comment>
<comment type="line">//inline LL Read() {</comment>
<comment type="line">//    RG LL s=0;</comment>
<comment type="line">//    res ch=gc();</comment>
<comment type="line">//    while(ch&lt;'0'||ch&gt;'9')ch=gc();</comment>
<comment type="line">//    while(ch&gt;='0'&amp;&amp;ch&lt;='9')s=s*10+ch-'0',ch=gc();</comment>
<comment type="line">//    return s;</comment>
<comment type="line">//}</comment>
<comment type="line">//inline LL Read() {</comment>
<comment type="line">//    RG LL s=0;</comment>
<comment type="line">//    res ch=gc(),w=1;</comment>
<comment type="line">//    while(ch&lt;'0'||ch&gt;'9'){if(ch=='-')w=-1;ch=gc();}</comment>
<comment type="line">//    while(ch&gt;='0'&amp;&amp;ch&lt;='9')s=s*10+ch-'0',ch=gc();</comment>
<comment type="line">//    return s*w;</comment>
<comment type="line">//}</comment>
<comment type="line">//inline void write(RG unl x){</comment>
<comment type="line">//    if(x&gt;10)write(x/10);</comment>
<comment type="line">//    putchar(int(x%10)+'0');</comment>
<comment type="line">//}</comment>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>swap</name><parameter_list>(<parameter><decl><type><name>res</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>,<parameter><decl><type><name>res</name> <modifier>&amp;</modifier></type><name>y</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name>x</name><operator>^=</operator><name>y</name><operator>^=</operator><name>x</name><operator>^=</operator><name>y</name></expr>;</expr_stmt>
}</block></function>
<decl_stmt><decl><type><name>int</name></type> <name>kcz</name><init>=<expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>res</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>res</name> <modifier>&amp;</modifier></type><name>y</name></decl></parameter>)</parameter_list><block>{
    <expr_stmt><expr><name>x</name><operator>+=</operator><name>y</name></expr><operator>,</operator><expr><ternary><condition><expr><name>x</name><operator>&gt;=</operator><name>kcz</name></expr>?</condition><then><expr><name>x</name><operator>-=</operator><name>kcz</name></expr></then><else>:<expr><operator>(</operator><ternary><condition><expr><name>x</name><operator>&lt;</operator><literal type="number">0</literal></expr>?</condition><then><expr><name>x</name><operator>+=</operator><name>kcz</name></expr></then><else>:<expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
}</block></function>
<function><specifier>inline</specifier> <type><name>int</name></type> <name>Add</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>res</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>res</name> <modifier>&amp;</modifier></type><name>y</name></decl></parameter>)</parameter_list><block>{
    <return>return <expr><ternary><condition><expr><name>x</name><operator>+</operator><name>y</name><operator>&gt;=</operator><name>kcz</name></expr>?</condition><then><expr><name>x</name><operator>+</operator><name>y</name><operator>-</operator><name>kcz</name></expr></then><else>:<expr><operator>(</operator><ternary><condition><expr><name>x</name><operator>+</operator><name>y</name><operator>&lt;</operator><literal type="number">0</literal></expr>?</condition><then><expr><name>x</name><operator>+</operator><name>y</name><operator>+</operator><name>kcz</name></expr></then><else>:<expr><name>x</name><operator>+</operator><name>y</name></expr></else></ternary><operator>)</operator></expr></else></ternary></expr>;</return>
}</block></function>
<function><specifier>inline</specifier> <type><name>int</name></type> <name>mul</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>res</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>res</name> <modifier>&amp;</modifier></type><name>y</name></decl></parameter>)</parameter_list><block>{
    <return>return <expr><call><name>int</name><argument_list>(<argument><expr><literal type="number">1LL</literal><operator>*</operator><name>x</name><operator>*</operator><name>y</name><operator>%</operator><name>kcz</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><specifier>inline</specifier> <type><name>int</name></type> <name>mul</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>res</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>res</name> <modifier>&amp;</modifier></type><name>y</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>res</name> <modifier>&amp;</modifier></type><name>d</name></decl></parameter>)</parameter_list><block>{
    <return>return <expr><call><name>int</name><argument_list>(<argument><expr><literal type="number">1LL</literal><operator>*</operator><name>x</name><operator>*</operator><name>y</name><operator>/</operator><name>d</name><operator>%</operator><name>kcz</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><specifier>inline</specifier> <type><name>int</name></type> <name>qpow</name><parameter_list>(<parameter><decl><type><name>res</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>res</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name>res</name></type> <name>ret</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>y</name></expr>)</condition><block>{
        <if>if<condition>(<expr><name>y</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>ret</name><operator>=</operator><call><name>mul</name><argument_list>(<argument><expr><name>ret</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name>x</name><operator>=</operator><call><name>mul</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><name>y</name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><name>ret</name></expr>;</return>
}</block></function>
<function><specifier>inline</specifier> <type><name>LL</name></type> <name>Qpow</name><parameter_list>(<parameter><decl><type><name>RG</name> <name>LL</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>res</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name>RG</name> <name>LL</name></type> <name>ret</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>y</name></expr>)</condition><block>{
        <if>if<condition>(<expr><name>y</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>ret</name><operator>*=</operator><name>x</name></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name>x</name><operator>*=</operator><name>x</name></expr><operator>,</operator><expr><name>y</name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><name>ret</name></expr>;</return>
}</block></function>
<comment type="line">//mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());</comment>
<comment type="line">//clock_t start=clock();</comment>
<comment type="line">//inline void ck(){</comment>
<comment type="line">//    if(1.0*(clock()-start)/CLOCKS_PER_SEC&gt;0.1)exit(0);</comment>
<comment type="line">//}</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name><init>=<expr><literal type="number">1e5</literal><operator>+</operator><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<namespace>namespace <name>MAIN</name><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name><name>dp</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
    <function><specifier>inline</specifier> <type><name>void</name></type> <name>MAIN</name><parameter_list>()</parameter_list><block>{
        <expr_stmt><expr><name>n</name><operator>=</operator><call><name>read</name><argument_list>()</argument_list></call></expr><operator>,</operator><expr><name>m</name><operator>=</operator><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">2</literal></expr><operator>,</operator><expr><name><name>dp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><literal type="number">4</literal></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>n</name><operator>&gt;</operator><name>m</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <for>for<control>(<init><decl><type><name>res</name></type> <name>i</name><init>=<expr><literal type="number">3</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>m</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><call><name>Add</name><argument_list>(<argument><expr><name><name>dp</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>dp</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
        <if>if<condition>(<expr><name>n</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>,<argument><expr><name><name>dp</name><index>[<expr><name>m</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return;</return>}</block></then></if>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>,<argument><expr><call><name>Add</name><argument_list>(<argument><expr><name><name>dp</name><index>[<expr><name>n</name></expr>]</index></name><operator>-</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name><name>dp</name><index>[<expr><name>m</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></namespace>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
<comment type="line">//    srand(19260817);</comment>
    <constructor_decl><name><name>MAIN</name><operator>::</operator><name>MAIN</name></name><parameter_list>()</parameter_list>;</constructor_decl>
<comment type="line">//    Ot();</comment>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
