<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29181009_62980724.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fast</name></cpp:macro> <cpp:value>ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PB</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>"\n"</cpp:value></cpp:define>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mod</name> <init>= <expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">1005000</literal></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>power</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>m</name><init>=<expr><name>mod</name></expr></init></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name>int</name></type> <name>res</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt><expr_stmt><expr><name>x</name><operator>=</operator><name>x</name><operator>%</operator><name>m</name></expr>;</expr_stmt><while>while<condition>(<expr><name>y</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><block>{<if>if<condition>(<expr><name>y</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>res</name><operator>=</operator><operator>(</operator><name>res</name><operator>*</operator><name>x</name><operator>)</operator><operator>%</operator><name>m</name></expr>;</expr_stmt></block></then></if><expr_stmt><expr><name>y</name><operator>=</operator><name>y</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</expr_stmt><expr_stmt><expr><name>x</name><operator>=</operator><operator>(</operator><name>x</name><operator>*</operator><name>x</name><operator>)</operator><operator>%</operator><name>m</name></expr>;</expr_stmt>}</block></while><return>return <expr><name>res</name></expr>;</return>}</block></function>
<function><type><name>int</name></type> <name>ncr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list><block>{<if>if<condition>(<expr><name>n</name><operator>&lt;</operator><name>r</name></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if><decl_stmt><decl><type><name>int</name></type> <name>p</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>k</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt><if>if<condition>(<expr><name>n</name><operator>-</operator><name>r</name><operator>&lt;</operator><name>r</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>r</name><operator>=</operator><name>n</name><operator>-</operator><name>r</name></expr>;</expr_stmt></block></then></if><if>if<condition>(<expr><name>r</name><operator>!=</operator><literal type="number">0</literal></expr>)</condition><then><block>{<while>while<condition>(<expr><name>r</name></expr>)</condition><block>{<expr_stmt><expr><name>p</name><operator>*=</operator><name>n</name></expr>;</expr_stmt><expr_stmt><expr><name>k</name><operator>*=</operator><name>r</name></expr>;</expr_stmt><decl_stmt><decl><type><name>int</name></type> <name>g</name><init>=<expr><call><name>__gcd</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><expr_stmt><expr><name>p</name><operator>/=</operator><name>g</name></expr>;</expr_stmt><expr_stmt><expr><name>k</name><operator>/=</operator><name>g</name></expr>;</expr_stmt><expr_stmt><expr><name>n</name><operator>--</operator></expr>;</expr_stmt><expr_stmt><expr><name>r</name><operator>--</operator></expr>;</expr_stmt>}</block></while>}</block></then><else>else <block type="pseudo"><expr_stmt><expr><name>p</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></else></if><return>return <expr><name>p</name></expr>;</return>}</block></function>
<comment type="line">//cout&lt;&lt;fixed&lt;&lt;setprecision(8)&lt;&lt;x&lt;&lt;endl;</comment>

<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><name>fast</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>t</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt> <while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>cn0</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>cn1</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>cm0</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>cm1</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
            <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>x</name></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>x</name><operator>%</operator><literal type="number">2</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>cn1</name><operator>++</operator></expr>;</expr_stmt></block></then>
            <else>else
                <block type="pseudo"><expr_stmt><expr><name>cn0</name><operator>++</operator></expr>;</expr_stmt></block></else></if>
        }</block></for>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>m</name></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>m</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
            <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>x</name></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>x</name><operator>%</operator><literal type="number">2</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>cm1</name><operator>++</operator></expr>;</expr_stmt></block></then>
            <else>else
                <block type="pseudo"><expr_stmt><expr><name>cm0</name><operator>++</operator></expr>;</expr_stmt></block></else></if>
        }</block></for>
        <comment type="line">//cout&lt;&lt; cn0 &lt;&lt; cn1 &lt;&lt; cm0 &lt;&lt; cm1 &lt;&lt; endl;</comment>
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator> <operator>(</operator><name>cn0</name><operator>*</operator><name>cm0</name> <operator>+</operator> <name>cn1</name><operator>*</operator><name>cm1</name><operator>)</operator><operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    }</block></while>
    <expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <literal type="string">"Time elapsed : "</literal> <operator>&lt;&lt;</operator> <literal type="number">1.0</literal> <operator>*</operator> <call><name>clock</name><argument_list>()</argument_list></call> <operator>/</operator> <name>CLOCKS_PER_SEC</name> <operator>&lt;&lt;</operator> <literal type="string">" sec \n"</literal></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>


</unit>
