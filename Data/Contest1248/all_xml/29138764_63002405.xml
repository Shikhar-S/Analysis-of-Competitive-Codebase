<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29138764_63002405.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>si</name></cpp:macro> <cpp:value>signed</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sc</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%I64d",&amp;x);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rd</name><parameter_list>(<parameter><type><name>A</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=1;i&lt;=n;i++)scanf("%I64d",&amp;A[i]);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P</name></cpp:macro> <cpp:value>pair&lt;int,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>'\n'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>forn</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=1;i&lt;=n;i++)</cpp:value></cpp:define>
<struct>struct <name>Nod</name><block>{<public type="default">
  <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
</public>}</block>;</struct>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>maxn</name></cpp:macro> <cpp:value>100000+10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name></cpp:macro> <cpp:value>cout&lt;&lt;"No Pro"&lt;&lt;'\n';</cpp:value></cpp:define>
<decl_stmt><decl><type><name>int</name></type> <name><name>A</name><index>[<expr><literal type="number">100</literal></expr>]</index><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mod</name><init>=<expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<function><type><name>bool</name></type> <name>check</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>a</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>m</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
            <expr_stmt><expr><name>a</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>x</name><operator>=</operator><name><name>A</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>i</name><operator>&gt;</operator><literal type="number">1</literal></expr>)</condition><then><block>{
                <expr_stmt><expr><name>a</name><operator>+=</operator><operator>(</operator><name><name>A</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>==</operator><name>x</name><operator>)</operator></expr>;</expr_stmt>
            }</block></then></if>
            <if>if<condition>(<expr><name>i</name><operator>&lt;</operator><name>n</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>a</name><operator>+=</operator><operator>(</operator><name><name>A</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>==</operator><name>x</name><operator>)</operator></expr>;</expr_stmt></block></then></if>
            <if>if<condition>(<expr><name>j</name><operator>&gt;</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>a</name><operator>+=</operator><name><name>A</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><name>x</name></expr>;</expr_stmt></block></then></if>
            <if>if<condition>(<expr><name>j</name><operator>&lt;</operator><name>m</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>a</name><operator>+=</operator><name><name>A</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><name>x</name></expr>;</expr_stmt></block></then></if>

            <if>if<condition>(<expr><name>a</name><operator>&gt;=</operator><literal type="number">2</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
        }</block></for>
    }</block></for>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name>int</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><name>y</name><operator>==</operator><name>m</name><operator>+</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>x</name><operator>=</operator><name>x</name><operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name>y</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
    <if>if<condition>(<expr><name>x</name><operator>==</operator><name>n</name><operator>+</operator><literal type="number">1</literal><operator>&amp;&amp;</operator><name>y</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
        <if>if<condition>(<expr><call><name>check</name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
            <expr_stmt><expr><name>ans</name><operator>++</operator></expr>;</expr_stmt>
           <comment type="line">// cout&lt;&lt;A[1][1]&lt;&lt;endl;</comment>
            <comment type="line">//cout&lt;&lt;x&lt;&lt;endl;</comment>
        }</block></then></if>
        <return>return ;</return>
    }</block></then></if>
    <expr_stmt><expr><name><name>A</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>A</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<decl_stmt><decl><type><name>int</name></type> <name><name>B</name><index>[<expr><literal type="number">100000</literal><operator>+</operator><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>C</name><index>[<expr><literal type="number">100000</literal><operator>+</operator><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>init</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><name><name>B</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>B</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">3</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">100000</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><name><name>B</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><operator>(</operator><name><name>B</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>B</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt>
    }</block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">100000</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><name><name>C</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><operator>(</operator><name><name>B</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>B</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt>
    }</block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">100000</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><name><name>B</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><operator>(</operator><name><name>B</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>B</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt>
    }</block></for>
}</block></function>
<function><type><name>si</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <macro><name>sc</name><argument_list>(<argument>n</argument>)</argument_list></macro><expr_stmt><expr><call><name>sc</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>(</operator><name><name>C</name><index>[<expr><name>m</name></expr>]</index></name><operator>+</operator><name><name>B</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>%</operator><name>mod</name><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt>
}</block></function>

</unit>
