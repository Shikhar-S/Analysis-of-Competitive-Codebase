<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29168828_63008422.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><literal type="number">900000</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sum</name></decl>,<decl><type ref="prev"/><name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>ans</name></decl>,<decl><type ref="prev"/><name>anx</name></decl>,<decl><type ref="prev"/><name>any</name></decl>,<decl><type ref="prev"/><name>ann</name></decl>,<decl><type ref="prev"/><name>an</name></decl>,<decl><type ref="prev"/><name>summax</name></decl>,<decl><type ref="prev"/><name>another</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>st</name><index>[<expr><literal type="number">900000</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>check</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list><block>{
    <expr_stmt><expr><name>sum</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>l</name></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>r</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
	<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'('</literal></expr>)</condition><then> <block>{
	    <expr_stmt><expr><name>sum</name><operator>++</operator></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>st</name><index>[<expr><name>sum</name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt>
	}</block></then>
	<else>else <block type="pseudo"><expr_stmt><expr><name>sum</name><operator>--</operator></expr>;</expr_stmt></block></else></if>
	<if>if<condition>(<expr><name>sum</name><operator>==</operator><literal type="number">2</literal><operator>&amp;&amp;</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'('</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>an</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
	<if>if<condition>(<expr><name>sum</name><operator>==</operator><literal type="number">0</literal><operator>&amp;&amp;</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">')'</literal></expr>)</condition><then><block>{
	    <if>if<condition>(<expr><name>an</name><operator>+</operator><literal type="number">1</literal><operator>&gt;</operator><name>ans</name></expr>)</condition><then><block>{
		<expr_stmt><expr><name>ans</name><operator>=</operator><name>an</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>anx</name><operator>=</operator><name><name>st</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>any</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
	    }</block></then></if>
	    <expr_stmt><expr><name>an</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	}</block></then></if>
    }</block></for>
}</block></function>
<function><type><name>void</name></type> <name>work</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list><block>{
    <expr_stmt><expr><name>sum</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt><expr_stmt><expr><name>ans</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt><expr_stmt><expr><name>anx</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt><expr_stmt><expr><name>any</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>l</name></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>r</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
	<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'('</literal></expr>)</condition><then> <block>{
	    <expr_stmt><expr><name>sum</name><operator>++</operator></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>st</name><index>[<expr><name>sum</name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt>
	}</block></then>
	<else>else <block type="pseudo"><expr_stmt><expr><name>sum</name><operator>--</operator></expr>;</expr_stmt></block></else></if>
	<if>if<condition>(<expr><name>sum</name><operator>==</operator><literal type="number">3</literal><operator>&amp;&amp;</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'('</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>an</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
	<comment type="line">//printf("%d %d\n",i,an);</comment>
	<if>if<condition>(<expr><name>sum</name><operator>==</operator><literal type="number">2</literal><operator>&amp;&amp;</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'('</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>another</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
	<if>if<condition>(<expr><name>sum</name><operator>==</operator><literal type="number">1</literal><operator>&amp;&amp;</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">')'</literal></expr>)</condition><then><block>{
	    <if>if<condition>(<expr><name>an</name><operator>&gt;</operator><name>ans</name></expr>)</condition><then><block>{
		<expr_stmt><expr><name>ans</name><operator>=</operator><name>an</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>anx</name><operator>=</operator><name><name>st</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>any</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
	    }</block></then></if>
	    <expr_stmt><expr><name>an</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	}</block></then></if>
	<if>if<condition>(<expr><operator>!</operator><name>sum</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ann</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
    }</block></for>
    <expr_stmt><expr><name>ans</name><operator>=</operator><name>ans</name><operator>+</operator><name>ann</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <comment type="line">//printf("%d %d %d\n",ann,ans,m);</comment>
    <expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>,<argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d\n"</literal></expr></argument>,<argument><expr><operator>(</operator><name>anx</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>any</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>,<argument><expr><name>s</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>m</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt><expr_stmt><expr><name>summax</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
	<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'('</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>sum</name><operator>++</operator></expr>;</expr_stmt></block></then>
	<else>else <block type="pseudo"><expr_stmt><expr><name>sum</name><operator>--</operator></expr>;</expr_stmt></block></else></if>
	<comment type="line">//printf("%d %d\n",i,sum);</comment>
	<if>if<condition>(<expr><name>sum</name><operator>&lt;</operator><name>summax</name></expr>)</condition><then><block>{
	    <expr_stmt><expr><name>summax</name><operator>=</operator><name>sum</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name>m</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
	}</block></then></if>
	<expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name><operator>+</operator><name>n</name></expr>]</index></name><operator>=</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></for>
    <if>if<condition>(<expr><name>sum</name><operator>!=</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"0\n1 1\n"</literal></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><literal type="number">0</literal></expr>;</return></block></then></if>
    <expr_stmt><expr><call><name>work</name><argument_list>(<argument><expr><name>m</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>m</name><operator>+</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
