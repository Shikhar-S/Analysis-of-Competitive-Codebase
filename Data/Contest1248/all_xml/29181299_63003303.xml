<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29181299_63003303.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ext/pb_ds/assoc_container.hpp&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ext/pb_ds/tree_policy.hpp&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<using>using <namespace>namespace <name>__gnu_pbds</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fto</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>s</name></type></parameter>, <parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = (s); i &lt;= (e); ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fto1</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>s</name></type></parameter>, <parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = (s); i &lt; (e); ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fdto</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>s</name></type></parameter>, <parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = (s); i &gt;= (e); --i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>forit</name><parameter_list>(<parameter><type><name>it</name></type></parameter>, <parameter><type><name>l</name></type></parameter>, <parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(auto it = (l); it != (r); ++it)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fit</name><parameter_list>(<parameter><type><name>it</name></type></parameter>, <parameter><type><name>var</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>forit(it, (var).begin(), (var).end())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>frit</name><parameter_list>(<parameter><type><name>it</name></type></parameter>, <parameter><type><name>var</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>forit(it, (var).rbegin(), (var).rend())</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>'\n'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bug1</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout &lt;&lt; #x &lt;&lt; '[' &lt;&lt; i &lt;&lt; "] = " &lt;&lt; x[i] &lt;&lt; endl</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bug2</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>i</name></type></parameter>, <parameter><type><name>j</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout &lt;&lt; #x &lt;&lt; '[' &lt;&lt; i &lt;&lt; "][" &lt;&lt; j &lt;&lt; "] = " &lt;&lt; x[i][j] &lt;&lt; endl</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bug3</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>i</name></type></parameter>, <parameter><type><name>j</name></type></parameter>, <parameter><type><name>k</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout &lt;&lt; #x &lt;&lt; '[' &lt;&lt; i &lt;&lt; "][" &lt;&lt; j &lt;&lt; "][" &lt;&lt; k &lt;&lt; "] = " &lt;&lt; x[i][j][k] &lt;&lt; endl</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bc</name></cpp:macro> <cpp:value>__builtin_popcountll</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>onb</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>bit</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x &amp; (1 &lt;&lt; bit)) != 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gcd</name></cpp:macro> <cpp:value>__gcd</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>y1</name></cpp:macro> <cpp:value>ansdj</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ii</name></cpp:macro> <cpp:value>pair&lt;int, int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>x</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>y</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>int((v).size())</cpp:value></cpp:define>

<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T1</name></parameter>, <parameter><type><name>class</name></type> <name>T2</name></parameter>&gt;</parameter_list></template> <type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name> <parameter_list>(<parameter><decl><type><name>ostream</name> <modifier>&amp;</modifier></type><name>os</name></decl></parameter>, <parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>T1</name></expr></argument>, <argument><expr><name>T2</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier> <modifier>&amp;</modifier></type><name>v</name></decl></parameter>)</parameter_list> <block>{
	<return>return <expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="char">'('</literal> <operator>&lt;&lt;</operator> <name><name>v</name><operator>.</operator><name>x</name></name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal> <operator>&lt;&lt;</operator> <name><name>v</name><operator>.</operator><name>y</name></name> <operator>&lt;&lt;</operator> <literal type="char">')'</literal></expr>;</return>
}</block></function>

<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>bug</name><parameter_list>(<parameter><decl><type><name>T</name> <specifier>const</specifier> <modifier>&amp;</modifier></type><name>v</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>v</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt> }</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>, <parameter><type><name>class</name><modifier>...</modifier></type> <name>Args</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>bug</name><parameter_list>(<parameter><decl><type><name>T</name> <specifier>const</specifier> <modifier>&amp;</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>Args</name> <specifier>const</specifier><modifier>&amp;</modifier><modifier>...</modifier></type> <name>args</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>v</name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal></expr>;</expr_stmt> <expr_stmt><expr><call><name>bug</name><argument_list>(<argument><expr><name>args</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>

<decl_stmt><decl><type><name>double</name> <specifier>const</specifier></type> <name>pi</name> <init>= <expr><call><name>acos</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>oo</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OO</name></cpp:macro> <cpp:value>1000000000000000003LL</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name><name>f</name><index>[<expr><literal type="number">1003</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>calc</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>&amp;</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><name>string</name> <modifier>&amp;</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{
	<decl_stmt><decl><type><name><name>deque</name><argument_list type="generic">&lt;<argument><expr><name>ii</name></expr></argument>&gt;</argument_list></name></type> <name>st</name></decl>;</decl_stmt>
	<macro><name>fto</name> <argument_list>(<argument>i</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">2</literal>*n</argument>)</argument_list></macro> <expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<macro><name>fto</name> <argument_list>(<argument>i</argument>, <argument><literal type="number">1</literal></argument>, <argument>n</argument>)</argument_list></macro> <block>{
		<if>if <condition>(<expr><operator>!</operator><call><name><name>st</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>st</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>x</name> <operator>==</operator> <literal type="char">'('</literal> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">')'</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name><name>f</name><index>[<expr><call><name><name>st</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>y</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><block>{<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>, <expr><name>i</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
	}</block>

	<decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><call><name><name>st</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<macro><name>fto1</name> <argument_list>(<argument>i</argument>, <argument>n+<literal type="number">1</literal></argument>, <argument><literal type="number">2</literal>*n</argument>)</argument_list></macro> <block>{
		<if>if <condition>(<expr><call><name><name>st</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>push_front</name></name><argument_list>(<argument><expr><block>{<expr><name><name>s</name><index>[<expr><name><name>f</name><index>[<expr><name>i</name><operator>-</operator><name>n</name></expr>]</index></name></expr>]</index></name></expr>, <expr><name><name>f</name><index>[<expr><name>i</name><operator>-</operator><name>n</name></expr>]</index></name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else>else <block>{
			<if>if <condition>(<expr><call><name><name>st</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call><operator>.</operator><name>y</name> <operator>==</operator> <name>i</name><operator>-</operator><name>n</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>pop_front</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then>
			<else>else <block type="pseudo"><expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>push_front</name></name><argument_list>(<argument><expr><block>{<expr><name><name>s</name><index>[<expr><name><name>f</name><index>[<expr><name>i</name><operator>-</operator><name>n</name></expr>]</index></name></expr>]</index></name></expr>, <expr><name><name>f</name><index>[<expr><name>i</name><operator>-</operator><name>n</name></expr>]</index></name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
		}</block></else></if>

		<if>if <condition>(<expr><operator>!</operator><call><name><name>st</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>st</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>x</name> <operator>==</operator> <literal type="char">'('</literal> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">')'</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name><name>f</name><index>[<expr><call><name><name>st</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>y</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><block>{<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>, <expr><name>i</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
		<expr_stmt><expr><name>ans</name> <operator>+=</operator> <call><name><name>st</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block>

	<return>return <expr><name>ans</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>KITTENS</name></cpp:ifdef>
		<expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"main.inp"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"main.out"</literal></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>s</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">" "</literal> <operator>+</operator> <name>s</name> <operator>+</operator> <name>s</name></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>tmp</name></decl>, <decl><type ref="prev"/><name>ans</name> <init>= <expr><call><name>calc</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ii</name></type> <name>res</name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>

	<macro><name>fto</name> <argument_list>(<argument>i</argument>, <argument><literal type="number">1</literal></argument>, <argument>n</argument>)</argument_list></macro> <block>{
		<macro><name>fto</name> <argument_list>(<argument>j</argument>, <argument>i+<literal type="number">1</literal></argument>, <argument>n</argument>)</argument_list></macro> <block>{
			<if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
			<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>n</name><operator>+</operator><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>n</name><operator>+</operator><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>calc</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if <condition>(<expr><name>ans</name> <operator>&lt;</operator> <name>tmp</name></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>ans</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>res</name> <operator>=</operator> <block>{<expr><name>i</name></expr>, <expr><name>j</name></expr>}</block></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>n</name><operator>+</operator><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>n</name><operator>+</operator><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block>
	}</block>

	<expr_stmt><expr><call><name>bug</name><argument_list>(<argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>bug</name><argument_list>(<argument><expr><name><name>res</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>res</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>KITTENS</name></cpp:ifdef>
		<expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <literal type="number">0.001</literal><operator>*</operator><call><name>clock</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
	<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
