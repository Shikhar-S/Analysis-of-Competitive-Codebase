<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29147866_63003275.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>"bits/stdc++.h"</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<comment type="block">/*
#pragma GCC target ("avx2")
#pragma GCC optimization ("O3")
#pragma GCC optimization ("unroll-loops")
*/</comment>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
  <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>best</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>cur</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt><comment type="line">//best refers to number of stuff added...</comment>
  <decl_stmt><decl><type><name>string</name></type> <name>a</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>a</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>bp</name><init>=<expr><call><name>make_pair</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>,<decl><type ref="prev"/><name>lowest_num</name></decl>;</decl_stmt>
  <for>for<control>(<init><decl><type><name>int</name></type> <name>x</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>x</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block>{
    <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>x</name></expr>]</index></name><operator>==</operator><literal type="char">'('</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>cur</name><operator>++</operator></expr>;</expr_stmt></block></then>
    <else>else <block type="pseudo"><expr_stmt><expr><name>cur</name><operator>--</operator></expr>;</expr_stmt></block></else></if>
  }</block></for>
  <if>if<condition>(<expr><name>cur</name><operator>!=</operator><literal type="number">0</literal></expr>)</condition><then><block>{
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"0\n1 1"</literal></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  }</block></then></if>

  <expr_stmt><expr><name>lowest_num</name><operator>=</operator><call><name>make_pair</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line">//number, and the number of times it has appeared...</comment>
  <expr_stmt><expr><name>cur</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
  <for>for<control>(<init><decl><type><name>int</name></type> <name>z</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>z</name><operator>+</operator><literal type="number">1</literal><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>z</name><operator>++</operator></expr></incr>)</control><block>{
    <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>z</name></expr>]</index></name><operator>==</operator><literal type="char">'('</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>cur</name><operator>++</operator></expr>;</expr_stmt></block></then>
    <else>else <block type="pseudo"><expr_stmt><expr><name>cur</name><operator>--</operator></expr>;</expr_stmt></block></else></if>
    <if>if<condition>(<expr><name>cur</name><operator>==</operator><name><name>lowest_num</name><operator>.</operator><name>first</name></name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name><name>lowest_num</name><operator>.</operator><name>second</name></name><operator>++</operator></expr>;</expr_stmt></block></then>
    <elseif>else <if>if<condition>(<expr><name>cur</name><operator>&lt;</operator><name><name>lowest_num</name><operator>.</operator><name>first</name></name></expr>)</condition><then><block>{
      <expr_stmt><expr><name>lowest_num</name><operator>=</operator><call><name>make_pair</name><argument_list>(<argument><expr><name>cur</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if></elseif></if>
  }</block></for>
  <expr_stmt><expr><name>best</name><operator>=</operator><name><name>lowest_num</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt>

  <for>for<control>(<init><decl><type><name>int</name></type> <name>x</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>x</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block>{
    <for>for<control>(<init><decl><type><name>int</name></type> <name>y</name><init>=<expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>y</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block>{
      <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>x</name></expr>]</index></name><operator>==</operator><name><name>a</name><index>[<expr><name>y</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
      <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>a</name><index>[<expr><name>y</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>lowest_num</name><operator>=</operator><call><name>make_pair</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line">//number, and the number of times it has appeared...</comment>
      <expr_stmt><expr><name>cur</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
      <for>for<control>(<init><decl><type><name>int</name></type> <name>z</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>z</name><operator>+</operator><literal type="number">1</literal><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>z</name><operator>++</operator></expr></incr>)</control><block>{
        <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>z</name></expr>]</index></name><operator>==</operator><literal type="char">'('</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>cur</name><operator>++</operator></expr>;</expr_stmt></block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><name>cur</name><operator>--</operator></expr>;</expr_stmt></block></else></if>
        <if>if<condition>(<expr><name>cur</name><operator>==</operator><name><name>lowest_num</name><operator>.</operator><name>first</name></name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name><name>lowest_num</name><operator>.</operator><name>second</name></name><operator>++</operator></expr>;</expr_stmt></block></then>
        <elseif>else <if>if<condition>(<expr><name>cur</name><operator>&lt;</operator><name><name>lowest_num</name><operator>.</operator><name>first</name></name></expr>)</condition><then><block>{
          <expr_stmt><expr><name>lowest_num</name><operator>=</operator><call><name>make_pair</name><argument_list>(<argument><expr><name>cur</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></elseif></if>
      }</block></for>
      <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>a</name><index>[<expr><name>y</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if<condition>(<expr><name><name>lowest_num</name><operator>.</operator><name>second</name></name><operator>&gt;=</operator><name>best</name></expr>)</condition><then><block>{
        <expr_stmt><expr><name>best</name><operator>=</operator><name><name>lowest_num</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>bp</name><operator>=</operator><call><name>make_pair</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></for>
  }</block></for>
  <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>best</name><operator>&lt;&lt;</operator><literal type="char">'\n'</literal><operator>&lt;&lt;</operator><name><name>bp</name><operator>.</operator><name>first</name></name><operator>+</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="char">' '</literal><operator>&lt;&lt;</operator><name><name>bp</name><operator>.</operator><name>second</name></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
