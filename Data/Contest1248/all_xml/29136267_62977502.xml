<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29136267_62977502.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lli</name></cpp:macro> <cpp:value>long long int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name> <name>(</name><cpp:literal>"-O2"</cpp:literal><name>)</name></cpp:pragma>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod2</name></cpp:macro> <cpp:value>998244353</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXN</name></cpp:macro> <cpp:value>1000000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>v32</name></cpp:macro> <cpp:value>vector&lt;int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>v64</name></cpp:macro> <cpp:value>vector&lt;lli&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>v1024</name></cpp:macro> <cpp:value>vector &lt;vector &lt;int&gt;&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>v4096</name></cpp:macro> <cpp:value>vector &lt;vector &lt;lli&gt;&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vt</name></cpp:macro> <cpp:value>vector</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (lli x = y; x &lt; z; x++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fd</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (lli x = y; x &gt; z; x--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lb</name></cpp:macro> <cpp:value>lower_bound</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ld</name></cpp:macro> <cpp:value>long double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>m64</name></cpp:macro> <cpp:value>map&lt;lli,lli&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>m32</name></cpp:macro> <cpp:value>map&lt;int,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>m64it</name></cpp:macro> <cpp:value>map&lt;lli,lli&gt;::iterator</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>m32it</name></cpp:macro> <cpp:value>map&lt;int,int&gt;::iterator</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fastio</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ist</name></cpp:macro> <cpp:value>insert</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>"\n"</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ext/pb_ds/assoc_container.hpp&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>p_q</name></cpp:macro> <cpp:value>priority_queue</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>min_p_q</name></cpp:macro> <cpp:value>priority_queue &lt;int,vt &lt;int&gt;,greater &lt;int&gt;&gt;</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<using>using <namespace>namespace <name>__gnu_pbds</name>;</namespace></using> 
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> 
<type><name>void</name></type> <name>DEBUG_ARR</name><parameter_list>(<parameter><decl><type><name><name>vt</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{
	<macro><name>f</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>a.size()</argument>)</argument_list></macro><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;&lt;</operator><literal type="string">" "</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"\n"</literal></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type> <name>op</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
  <return>return <expr><call><name>__gcd</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function><empty_stmt>;</empty_stmt>

<function><specifier>inline</specifier> <type><name>int</name></type> <name>log2Up</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>res</name><operator>)</operator> <operator>&lt;</operator> <name>n</name></expr>)</condition> <block>{
		<expr_stmt><expr><name>res</name><operator>++</operator></expr>;</expr_stmt>
	}</block></while>
	<return>return <expr><name>res</name></expr>;</return>
}</block></function>

<class>class <name>SqrtTree</name> <block>{<private type="default">
	</private><private>private:
		<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>lg</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>v</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>clz</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>layers</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>onLayer</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt; <argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>pref</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt; <argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>suf</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt; <argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>between</name></decl>;</decl_stmt>
		
		<function><type><name>void</name></type> <name>build</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>layer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lBound</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rBound</name></decl></parameter>)</parameter_list> <block>{
			<if>if <condition>(<expr><name>layer</name> <operator>&gt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name><name>layers</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
				<return>return;</return>
			}</block></then></if>
			<decl_stmt><decl><type><name>int</name></type> <name>bSzLog</name> <init>= <expr><operator>(</operator><name><name>layers</name><index>[<expr><name>layer</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>bCntLog</name> <init>= <expr><name><name>layers</name><index>[<expr><name>layer</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>bSz</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>bSzLog</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>bCnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
			<for>for <control>(<init><decl><type><name>int</name></type> <name>l</name> <init>= <expr><name>lBound</name></expr></init></decl>;</init> <condition><expr><name>l</name> <operator>&lt;</operator> <name>rBound</name></expr>;</condition> <incr><expr><name>l</name> <operator>+=</operator> <name>bSz</name></expr></incr>)</control> <block>{
				<expr_stmt><expr><name>bCnt</name><operator>++</operator></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name>l</name> <operator>+</operator> <name>bSz</name></expr></argument>, <argument><expr><name>rBound</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name><name>pref</name><index>[<expr><name>layer</name></expr>]</index><index>[<expr><name>l</name></expr>]</index></name> <operator>=</operator> <name><name>v</name><index>[<expr><name>l</name></expr>]</index></name></expr>;</expr_stmt>
				<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>r</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
					<expr_stmt><expr><name><name>pref</name><index>[<expr><name>layer</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>op</name><argument_list>(<argument><expr><name><name>pref</name><index>[<expr><name>layer</name></expr>]</index><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></for>
				<expr_stmt><expr><name><name>suf</name><index>[<expr><name>layer</name></expr>]</index><index>[<expr><name>r</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>v</name><index>[<expr><name>r</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
				<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>r</name><operator>-</operator><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <name>l</name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{
					<expr_stmt><expr><name><name>suf</name><index>[<expr><name>layer</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>op</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>suf</name><index>[<expr><name>layer</name></expr>]</index><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></for>
				<expr_stmt><expr><call><name>build</name><argument_list>(<argument><expr><name>layer</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></for>
			<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>bCnt</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
				<decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
				<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>bCnt</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{
					<decl_stmt><decl><type><name>int</name></type> <name>add</name> <init>= <expr><name><name>suf</name><index>[<expr><name>layer</name></expr>]</index><index>[<expr><name>lBound</name> <operator>+</operator> <operator>(</operator><name>j</name> <operator>&lt;&lt;</operator> <name>bSzLog</name><operator>)</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><name>ans</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>==</operator> <name>j</name><operator>)</operator></expr> ?</condition><then> <expr><name>add</name></expr> </then><else>: <expr><call><name>op</name><argument_list>(<argument><expr><name>ans</name></expr></argument>, <argument><expr><name>add</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>between</name><index>[<expr><name>layer</name></expr>]</index><index>[<expr><name>lBound</name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <name>bCntLog</name><operator>)</operator> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <name>ans</name></expr>;</expr_stmt>
				}</block></for>
			}</block></for>
		}</block></function>
	</private><public>public:
		<function><specifier>inline</specifier> <type><name>int</name></type> <name>query</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list> <block>{
			<if>if <condition>(<expr><name>l</name> <operator>==</operator> <name>r</name></expr>)</condition><then> <block>{
				<return>return <expr><name><name>v</name><index>[<expr><name>l</name></expr>]</index></name></expr>;</return>
			}</block></then></if>
			<if>if <condition>(<expr><name>l</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name>r</name></expr>)</condition><then> <block>{
				<return>return <expr><call><name>op</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><name>l</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>v</name><index>[<expr><name>r</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
			}</block></then></if>
			<decl_stmt><decl><type><name>int</name></type> <name>layer</name> <init>= <expr><name><name>onLayer</name><index>[<expr><name><name>clz</name><index>[<expr><name>l</name> <operator>^</operator> <name>r</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>bSzLog</name> <init>= <expr><operator>(</operator><name><name>layers</name><index>[<expr><name>layer</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>bCntLog</name> <init>= <expr><name><name>layers</name><index>[<expr><name>layer</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>lBound</name> <init>= <expr><operator>(</operator><name>l</name> <operator>&gt;&gt;</operator> <name><name>layers</name><index>[<expr><name>layer</name></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <name><name>layers</name><index>[<expr><name>layer</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>lBlock</name> <init>= <expr><operator>(</operator><operator>(</operator><name>l</name> <operator>-</operator> <name>lBound</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>bSzLog</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>rBlock</name> <init>= <expr><operator>(</operator><operator>(</operator><name>r</name> <operator>-</operator> <name>lBound</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>bSzLog</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><name><name>suf</name><index>[<expr><name>layer</name></expr>]</index><index>[<expr><name>l</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>lBlock</name> <operator>&lt;=</operator> <name>rBlock</name></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>ans</name> <operator>=</operator> <call><name>op</name><argument_list>(<argument><expr><name>ans</name></expr></argument>, <argument><expr><name><name>between</name><index>[<expr><name>layer</name></expr>]</index><index>[<expr><name>lBound</name> <operator>+</operator> <operator>(</operator><name>lBlock</name> <operator>&lt;&lt;</operator> <name>bCntLog</name><operator>)</operator> <operator>+</operator> <name>rBlock</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><name>ans</name> <operator>=</operator> <call><name>op</name><argument_list>(<argument><expr><name>ans</name></expr></argument>, <argument><expr><name><name>pref</name><index>[<expr><name>layer</name></expr>]</index><index>[<expr><name>r</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>ans</name></expr>;</return>
		}</block></function>
		
		<constructor><name>SqrtTree</name><parameter_list>( <parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>v</name></decl></parameter>)</parameter_list>
			<member_init_list>: <call><name>n</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name><name>v</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>, <call><name>lg</name><argument_list>(<argument><expr><call><name>log2Up</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>, <call><name>v</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call>, <call><name>clz</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>lg</name></expr></argument>)</argument_list></call>, <call><name>onLayer</name><argument_list>(<argument><expr><name>lg</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> </member_init_list><block>{
			<expr_stmt><expr><name><name>clz</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name><name>clz</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
				<expr_stmt><expr><name><name>clz</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>clz</name><index>[<expr><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			}</block></for>
			<decl_stmt><decl><type><name>int</name></type> <name>tlg</name> <init>= <expr><name>lg</name></expr></init></decl>;</decl_stmt>
			<while>while <condition>(<expr><name>tlg</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{
				<expr_stmt><expr><name><name>onLayer</name><index>[<expr><name>tlg</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name><name>layers</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>layers</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>tlg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>tlg</name> <operator>=</operator> <operator>(</operator><name>tlg</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			}</block></while>
			<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>lg</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{
				<expr_stmt><expr><name><name>onLayer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name><name>onLayer</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>onLayer</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></for>
			<expr_stmt><expr><call><name><name>pref</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><call><name><name>layers</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>suf</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><call><name><name>layers</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>between</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><call><name><name>layers</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>lg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>build</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></constructor>
</public>}</block>;</class>
<class>class <name>UnionFind</name> <comment type="line">//rank is equal to number of vertices in a connected component</comment>
<block>{<private type="default">
  </private><public>public: <decl_stmt><decl><type><name>v32</name></type> <name>p</name></decl>, <decl><type ref="prev"/><name>rank</name></decl>;</decl_stmt>
  <comment type="line">// remember: vi is vector&lt;int&gt;</comment>
  <constructor><name>UnionFind</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>N</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>rank</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><name>N</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><name>N</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block></for> }</block></constructor>
  <function><type><name>int</name></type> <name>findSet</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><ternary><condition><expr><operator>(</operator><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>i</name><operator>)</operator></expr> ?</condition><then> <expr><name>i</name></expr> </then><else>: <expr><operator>(</operator><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>findSet</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr></else></ternary></expr>;</return> }</block></function>
  <function><type><name>bool</name></type> <name>isSameSet</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>findSet</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>findSet</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><type><name>void</name></type> <name>unionSet</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> 
  <block>{
  <if>if <condition>(<expr><operator>!</operator><call><name>isSameSet</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
  <comment type="line">// if from different set</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><call><name>findSet</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>y</name> <init>= <expr><call><name>findSet</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name><name>rank</name><index>[<expr><name>x</name></expr>]</index></name> <operator>&gt;</operator> <name><name>rank</name><index>[<expr><name>y</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>p</name><index>[<expr><name>y</name></expr>]</index></name> <operator>=</operator> <name>x</name></expr><operator>,</operator><expr><name><name>rank</name><index>[<expr><name>x</name></expr>]</index></name><operator>+=</operator><name><name>rank</name><index>[<expr><name>y</name></expr>]</index></name></expr>;</expr_stmt></block></then>
  <comment type="line">// rank keeps the tree short</comment>
  <else>else 
     <block>{
     <expr_stmt><expr><name><name>p</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
     <expr_stmt><expr><name><name>rank</name><index>[<expr><name>y</name></expr>]</index></name><operator>+=</operator><name><name>rank</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt> 
     }</block></else></if>
  
  }</block></then></if> 
 
  }</block></function>   
</public>}</block>;</class>
<class>class <name>RMQv</name> <comment type="line">//returns max-min value in a given range</comment>
<block>{<private type="default">
    </private><public>public:
	<struct>struct <name>node</name>
    <block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>mn</name></decl>,<decl><type ref="prev"/><name>mx</name></decl>,<decl><type ref="prev"/><name>l</name></decl>,<decl><type ref="prev"/><name>r</name></decl>;</decl_stmt> 
    </public>}</block>;</struct>
	<decl_stmt><decl><type><name>v32</name></type> <name>h</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>vt</name> <argument_list type="generic">&lt;<argument><expr><name>node</name></expr></argument>&gt;</argument_list></name></type> <name>st</name></decl>;</decl_stmt>
 
    <function><type><name>bool</name></type> <name>is_intersection</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>ll</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>rr</name></decl></parameter>)</parameter_list>
    <block>{
       <if>if<condition>(<expr><name>r</name><operator>&lt;</operator><name>ll</name> <operator>||</operator> <name>rr</name><operator>&lt;</operator><name>l</name></expr>)</condition><then>
         <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
         <return>return <expr><literal type="number">1</literal></expr>;</return>
    }</block></function>
	<constructor><name>RMQv</name><parameter_list>(<parameter><decl><type><name>v32</name></type> <name>a</name></decl></parameter>)</parameter_list>
	<block>{
       <expr_stmt><expr><name>h</name><operator>=</operator><name>a</name></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">4</literal><operator>*</operator><call><name><name>h</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name>build</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><call><name><name>h</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>
	<function><type><name>void</name></type> <name>build</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>k</name><init>=<expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><name><name>st</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>l</name><operator>=</operator><name>l</name></expr><operator>,</operator><expr><name><name>st</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>r</name><operator>=</operator><name>r</name></expr>;</expr_stmt>
	    <if>if<condition>(<expr><name>l</name><operator>==</operator><name>r</name></expr>)</condition><then>
		   <block>{<expr_stmt><expr><name><name>st</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>mx</name><operator>=</operator><name><name>st</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>mn</name><operator>=</operator><name><name>h</name><index>[<expr><name>l</name></expr>]</index></name></expr>;</expr_stmt>
             <return>return;</return>
		   }</block></then></if>
	    <expr_stmt><expr><call><name>build</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><operator>(</operator><name>l</name><operator>+</operator><name>r</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">2</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>build</name><argument_list>(<argument><expr><operator>(</operator><name>l</name><operator>+</operator><name>r</name><operator>)</operator><operator>/</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><literal type="number">2</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>st</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>mx</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name><name>st</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>mx</name></expr></argument>,<argument><expr><name><name>st</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>mx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
	}</block></function>
	<function><type><name>int</name></type> <name>maxquery</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>k</name><init>=<expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list>
    <block>{
       <if>if<condition>(<expr><name>l</name><operator>&gt;</operator><name>r</name></expr>)</condition><then><block type="pseudo"><return>return <expr><operator>-</operator><name>MAXN</name></expr>;</return></block></then></if>
       <decl_stmt><decl><type><name>int</name></type> <name>ll</name><init>=<expr><name><name>st</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>l</name></expr></init></decl>,<decl><type ref="prev"/><name>rr</name><init>=<expr><name><name>st</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>r</name></expr></init></decl>,<decl><type ref="prev"/><name>mid</name><init>=<expr><operator>(</operator><name>ll</name><operator>+</operator><name>rr</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
       <if>if<condition>(<expr><name>ll</name><operator>&gt;=</operator><name>l</name> <operator>&amp;&amp;</operator> <name>rr</name><operator>&lt;=</operator><name>r</name></expr>)</condition><then>
          <block type="pseudo"><return>return <expr><name><name>st</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>mx</name></expr>;</return></block></then></if>
   	   <decl_stmt><decl><type><name>int</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>   
   	   <if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>r</name><operator>&lt;</operator><name>ll</name> <operator>||</operator> <name>mid</name><operator>&lt;</operator><name>l</name><operator>)</operator></expr>)</condition><then>
   	      <block type="pseudo"><expr_stmt><expr><name>ans</name><operator>=</operator><call><name>maxquery</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><literal type="number">2</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
   	   <if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>r</name><operator>&lt;</operator><name>mid</name><operator>+</operator><literal type="number">1</literal> <operator>||</operator> <name>rr</name><operator>&lt;</operator><name>l</name><operator>)</operator></expr>)</condition><then>
   	          <block type="pseudo"><expr_stmt><expr><name>ans</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>ans</name></expr></argument>,<argument><expr><call><name>maxquery</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><literal type="number">2</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
   	   <return>return <expr><name>ans</name></expr>;</return>     
    }</block></function>
    <function><type><name>void</name></type> <name>update</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>k</name><init>=<expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>l</name><init>=<expr><name><name>st</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>l</name></expr></init></decl>,<decl><type ref="prev"/><name>r</name><init>=<expr><name><name>st</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>r</name></expr></init></decl>,<decl><type ref="prev"/><name>mid</name><init>=<expr><operator>(</operator><name>l</name><operator>+</operator><name>r</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>l</name><operator>==</operator><name>r</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name><name>st</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>mx</name><operator>=</operator><name>val</name></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>
        <if>if<condition>(<expr><name>id</name><operator>&gt;=</operator><name>l</name> <operator>&amp;&amp;</operator> <name>id</name><operator>&lt;=</operator><name>mid</name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name>id</name></expr></argument>,<argument><expr><name>val</name></expr></argument>,<argument><expr><literal type="number">2</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <if>if<condition>(<expr><name>mid</name><operator>+</operator><literal type="number">1</literal><operator>&lt;=</operator> <name>id</name> <operator>&amp;&amp;</operator> <name>id</name><operator>&lt;=</operator><name>r</name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name>id</name></expr></argument>,<argument><expr><name>val</name></expr></argument>,<argument><expr><literal type="number">2</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name><name>st</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>mx</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name><name>st</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>mx</name></expr></argument>,<argument><expr><name><name>st</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>mx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    }</block></function>
</public>}</block>;</class>
<class>class <name>RMQ</name>  <comment type="line">//gives index of min-max in a given range</comment>
<block>{<private type="default">
    </private><public>public:
	<struct>struct <name>node</name>
    <block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>mn</name></decl>,<decl><type ref="prev"/><name>mx</name></decl>,<decl><type ref="prev"/><name>l</name></decl>,<decl><type ref="prev"/><name>r</name></decl>;</decl_stmt> 
    </public>}</block>;</struct>
	<decl_stmt><decl><type><name>v32</name></type> <name>h</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>vt</name> <argument_list type="generic">&lt;<argument><expr><name>node</name></expr></argument>&gt;</argument_list></name></type> <name>st</name></decl>;</decl_stmt>
 
    <function><type><name>bool</name></type> <name>is_intersection</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>ll</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>rr</name></decl></parameter>)</parameter_list>
    <block>{
       <if>if<condition>(<expr><name>r</name><operator>&lt;</operator><name>ll</name> <operator>||</operator> <name>rr</name><operator>&lt;</operator><name>l</name></expr>)</condition><then>
         <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
         <return>return <expr><literal type="number">1</literal></expr>;</return>
    }</block></function>
	<constructor><name>RMQ</name><parameter_list>(<parameter><decl><type><name>v32</name></type> <name>a</name></decl></parameter>)</parameter_list>
	<block>{
       <expr_stmt><expr><name>h</name><operator>=</operator><name>a</name></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">4</literal><operator>*</operator><call><name><name>h</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name>build</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><call><name><name>h</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>
	<function><type><name>void</name></type> <name>build</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>k</name><init>=<expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><name><name>st</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>l</name><operator>=</operator><name>l</name></expr><operator>,</operator><expr><name><name>st</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>r</name><operator>=</operator><name>r</name></expr>;</expr_stmt>
	    <if>if<condition>(<expr><name>l</name><operator>==</operator><name>r</name></expr>)</condition><then>
		   <block>{<expr_stmt><expr><name><name>st</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>mx</name><operator>=</operator><name><name>st</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>mn</name><operator>=</operator><name>l</name></expr>;</expr_stmt>
             <return>return;</return>
		   }</block></then></if>
	    <expr_stmt><expr><call><name>build</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><operator>(</operator><name>l</name><operator>+</operator><name>r</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">2</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>build</name><argument_list>(<argument><expr><operator>(</operator><name>l</name><operator>+</operator><name>r</name><operator>)</operator><operator>/</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><literal type="number">2</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if>if<condition>(<expr><name><name>h</name><index>[<expr><name><name>st</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>mn</name></expr>]</index></name><operator>&lt;=</operator><name><name>h</name><index>[<expr><name><name>st</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>mn</name></expr>]</index></name></expr>)</condition><then>
	    <block type="pseudo"><expr_stmt><expr><name><name>st</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>mn</name><operator>=</operator><name><name>st</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>mn</name></expr>;</expr_stmt></block></then>
	    <else>else <block type="pseudo"><expr_stmt><expr><name><name>st</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>mn</name><operator>=</operator><name><name>st</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>mn</name></expr>;</expr_stmt></block></else></if>	
        <if>if<condition>(<expr><name><name>h</name><index>[<expr><name><name>st</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>mx</name></expr>]</index></name><operator>&gt;=</operator><name><name>h</name><index>[<expr><name><name>st</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>mx</name></expr>]</index></name></expr>)</condition><then>
	    <block type="pseudo"><expr_stmt><expr><name><name>st</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>mx</name><operator>=</operator><name><name>st</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>mx</name></expr>;</expr_stmt></block></then>
	    <else>else <block type="pseudo"><expr_stmt><expr><name><name>st</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>mx</name><operator>=</operator><name><name>st</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>mx</name></expr>;</expr_stmt></block></else></if>
	}</block></function>
    <function><type><name>int</name></type> <name>minquery</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>k</name><init>=<expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list>
    <block>{
        <if>if<condition>(<expr><name>l</name><operator>&gt;</operator><name>r</name></expr>)</condition><then><block type="pseudo"><return>return <expr><name>MAXN</name></expr>;</return></block></then></if>
        <decl_stmt><decl><type><name>int</name></type> <name>ll</name><init>=<expr><name><name>st</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>l</name></expr></init></decl>,<decl><type ref="prev"/><name>rr</name><init>=<expr><name><name>st</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>r</name></expr></init></decl>,<decl><type ref="prev"/><name>mid</name><init>=<expr><operator>(</operator><name>ll</name><operator>+</operator><name>rr</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>ll</name><operator>&gt;=</operator><name>l</name> <operator>&amp;&amp;</operator> <name>rr</name><operator>&lt;=</operator><name>r</name></expr>)</condition><then>
         <block type="pseudo"><return>return <expr><name><name>st</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>mn</name></expr>;</return></block></then></if>
   	    <decl_stmt><decl><type><name>int</name></type> <name>ans</name><init>=<expr><name>l</name></expr></init></decl>;</decl_stmt>   
   	    <if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>r</name><operator>&lt;</operator><name>ll</name> <operator>||</operator> <name>mid</name><operator>&lt;</operator><name>l</name><operator>)</operator></expr>)</condition><then>
   	       <block type="pseudo"><expr_stmt><expr><name>ans</name><operator>=</operator><call><name>minquery</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><literal type="number">2</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
   	    <if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>r</name><operator>&lt;</operator><name>mid</name><operator>+</operator><literal type="number">1</literal> <operator>||</operator> <name>rr</name><operator>&lt;</operator><name>l</name><operator>)</operator></expr>)</condition><then>
   	     <block>{<if>if<condition>(<expr><name><name>h</name><index>[<expr><name>ans</name></expr>]</index></name><operator>&gt;</operator><name><name>h</name><index>[<expr><call><name>minquery</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><literal type="number">2</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>)</condition><then>	
   	       <block type="pseudo"><expr_stmt><expr><name>ans</name><operator>=</operator><call><name>minquery</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><literal type="number">2</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>}</block></then></if>
   	    <return>return <expr><name>ans</name></expr>;</return>     
    }</block></function>
	<function><type><name>int</name></type> <name>maxquery</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>k</name><init>=<expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list>
    <block>{
       <if>if<condition>(<expr><name>l</name><operator>&gt;</operator><name>r</name></expr>)</condition><then><block type="pseudo"><return>return <expr><operator>-</operator><name>MAXN</name></expr>;</return></block></then></if>
       <decl_stmt><decl><type><name>int</name></type> <name>ll</name><init>=<expr><name><name>st</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>l</name></expr></init></decl>,<decl><type ref="prev"/><name>rr</name><init>=<expr><name><name>st</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>r</name></expr></init></decl>,<decl><type ref="prev"/><name>mid</name><init>=<expr><operator>(</operator><name>ll</name><operator>+</operator><name>rr</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
       <if>if<condition>(<expr><name>ll</name><operator>&gt;=</operator><name>l</name> <operator>&amp;&amp;</operator> <name>rr</name><operator>&lt;=</operator><name>r</name></expr>)</condition><then>
          <block type="pseudo"><return>return <expr><name><name>st</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>mx</name></expr>;</return></block></then></if>
   	   <decl_stmt><decl><type><name>int</name></type> <name>ans</name><init>=<expr><name>l</name></expr></init></decl>;</decl_stmt>   
   	   <if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>r</name><operator>&lt;</operator><name>ll</name> <operator>||</operator> <name>mid</name><operator>&lt;</operator><name>l</name><operator>)</operator></expr>)</condition><then>
   	      <block type="pseudo"><expr_stmt><expr><name>ans</name><operator>=</operator><call><name>maxquery</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><literal type="number">2</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
   	   <if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>r</name><operator>&lt;</operator><name>mid</name><operator>+</operator><literal type="number">1</literal> <operator>||</operator> <name>rr</name><operator>&lt;</operator><name>l</name><operator>)</operator></expr>)</condition><then>
   	      <block>{<if>if<condition>(<expr><name><name>h</name><index>[<expr><name>ans</name></expr>]</index></name><operator>&lt;</operator><name><name>h</name><index>[<expr><call><name>maxquery</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><literal type="number">2</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>)</condition><then>	
   	          <block type="pseudo"><expr_stmt><expr><name>ans</name><operator>=</operator><call><name>maxquery</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><literal type="number">2</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>}</block></then></if>
   	   <return>return <expr><name>ans</name></expr>;</return>     
    }</block></function>
    <function><type><name>void</name></type> <name>update</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>k</name><init>=<expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>l</name><init>=<expr><name><name>st</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>l</name></expr></init></decl>,<decl><type ref="prev"/><name>r</name><init>=<expr><name><name>st</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>r</name></expr></init></decl>,<decl><type ref="prev"/><name>mid</name><init>=<expr><operator>(</operator><name>l</name><operator>+</operator><name>r</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>l</name><operator>==</operator><name>r</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name><name>h</name><index>[<expr><name>l</name></expr>]</index></name><operator>=</operator><name>val</name></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>
        <if>if<condition>(<expr><name>id</name><operator>&gt;=</operator><name>l</name> <operator>&amp;&amp;</operator> <name>id</name><operator>&lt;=</operator><name>mid</name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name>id</name></expr></argument>,<argument><expr><name>val</name></expr></argument>,<argument><expr><literal type="number">2</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <if>if<condition>(<expr><name>mid</name><operator>+</operator><literal type="number">1</literal><operator>&lt;=</operator> <name>id</name> <operator>&amp;&amp;</operator> <name>id</name><operator>&lt;=</operator><name>r</name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name>id</name></expr></argument>,<argument><expr><name>val</name></expr></argument>,<argument><expr><literal type="number">2</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <if>if<condition>(<expr><name><name>h</name><index>[<expr><name><name>st</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>mn</name></expr>]</index></name><operator>&lt;=</operator><name><name>h</name><index>[<expr><name><name>st</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>mn</name></expr>]</index></name></expr>)</condition><then>
	    <block type="pseudo"><expr_stmt><expr><name><name>st</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>mn</name><operator>=</operator><name><name>st</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>mn</name></expr>;</expr_stmt></block></then>
	    <else>else <block type="pseudo"><expr_stmt><expr><name><name>st</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>mn</name><operator>=</operator><name><name>st</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>mn</name></expr>;</expr_stmt></block></else></if>	
        <if>if<condition>(<expr><name><name>h</name><index>[<expr><name><name>st</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>mx</name></expr>]</index></name><operator>&gt;=</operator><name><name>h</name><index>[<expr><name><name>st</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>mx</name></expr>]</index></name></expr>)</condition><then>
	    <block type="pseudo"><expr_stmt><expr><name><name>st</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>mx</name><operator>=</operator><name><name>st</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>mx</name></expr>;</expr_stmt></block></then>
	    <else>else <block type="pseudo"><expr_stmt><expr><name><name>st</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>mx</name><operator>=</operator><name><name>st</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>mx</name></expr>;</expr_stmt></block></else></if>
    }</block></function>
</public>}</block>;</class>
<class>class <name>LAZY</name> <comment type="line">//currently set to set a given range by a value</comment>
<block>{<private type="default">
   </private><public>public:
   <struct>struct <name>node</name>
   <block>{<public type="default">
    <decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>,<decl><type ref="prev"/><name>r</name></decl>,<decl><type ref="prev"/><name>lazy</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt><decl_stmt><decl><type><name>lli</name></type> <name>lazyval</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>lli</name></type> <name>sum</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
   </public>}</block>;</struct>	
   <decl_stmt><decl><type><name><name>vt</name> <argument_list type="generic">&lt;<argument><expr><name>node</name></expr></argument>&gt;</argument_list></name></type> <name>st</name></decl>;</decl_stmt><decl_stmt><decl><type><name>v32</name></type> <name>h</name></decl>;</decl_stmt>
   <constructor><name>LAZY</name><parameter_list>(<parameter><decl><type><name>v32</name></type> <name>a</name></decl></parameter>)</parameter_list>
   <block>{ 
   	  <expr_stmt><expr><name>h</name><operator>=</operator><name>a</name></expr>;</expr_stmt>
   	  <expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">4</literal><operator>*</operator><call><name><name>h</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   	  <expr_stmt><expr><call><name>cst</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><call><name><name>h</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   }</block></constructor>	
   <function><type><name>int</name></type> <name>intersectiontype1</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>ll</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>rr</name></decl></parameter>)</parameter_list>
   <block>{ 
      	<if>if<condition>(<expr><name>r</name><operator>&lt;</operator><name>ll</name> <operator>||</operator> <name>rr</name><operator>&lt;</operator><name>l</name></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
   }</block></function>
   <function><type><name>void</name></type> <name>cst</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>k</name><init>=<expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list>
   <block>{
    <expr_stmt><expr><name><name>st</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>l</name><operator>=</operator><name>l</name></expr><operator>,</operator><expr><name><name>st</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>r</name><operator>=</operator><name>r</name></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>l</name><operator>==</operator><name>r</name></expr>)</condition><then>
        <block>{ 
          <expr_stmt><expr><name><name>st</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>sum</name><operator>=</operator><name><name>h</name><index>[<expr><name>l</name></expr>]</index></name></expr>;</expr_stmt>   
          <return>return;</return>
        }</block></then></if>
    <expr_stmt><expr><call><name>cst</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><operator>(</operator><name>l</name><operator>+</operator><name>r</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">2</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cst</name><argument_list>(<argument><expr><operator>(</operator><name>l</name><operator>+</operator><name>r</name><operator>)</operator><operator>/</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><literal type="number">2</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>st</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>sum</name><operator>=</operator><name><name>st</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sum</name><operator>+</operator><name><name>st</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>sum</name></expr>;</expr_stmt>    
   }</block></function>
   <function><type><name>void</name></type> <name>shift</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list>
   <block>{
   <expr_stmt><expr><name><name>st</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>sum</name><operator>=</operator><operator>(</operator><name><name>st</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>r</name><operator>-</operator><name><name>st</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>l</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name><name>st</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>lazyval</name></expr>;</expr_stmt>
   <if>if<condition>(<expr><name><name>st</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>l</name><operator>!=</operator><name><name>st</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>r</name></expr>)</condition><then>
   <block>{<expr_stmt><expr><name><name>st</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>lazyval</name><operator>=</operator><name><name>st</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>lazyval</name></expr>;</expr_stmt>
   <expr_stmt><expr><name><name>st</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>lazyval</name><operator>=</operator><name><name>st</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>lazyval</name></expr>;</expr_stmt>
   <expr_stmt><expr><name><name>st</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>lazy</name><operator>=</operator><name><name>st</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>lazy</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
   <expr_stmt><expr><name><name>st</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>lazy</name><operator>=</operator><name><name>st</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>lazy</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>}</block></then></if>
   <expr_stmt><expr><name><name>st</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>lazyval</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
   <expr_stmt><expr><name><name>st</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>lazy</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>      
   }</block></function>
   <function><type><name>lli</name></type> <name>query</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>k</name><init>=<expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list>
   <block>{
	<if>if<condition>(<expr><name><name>st</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>lazy</name><operator>!=</operator><literal type="number">0</literal></expr>)</condition><then>
       <block type="pseudo"><expr_stmt><expr><call><name>shift</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
   <decl_stmt><decl><type><name>int</name></type> <name>ll</name><init>=<expr><name><name>st</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>l</name></expr></init></decl>,<decl><type ref="prev"/><name>rr</name><init>=<expr><name><name>st</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>r</name></expr></init></decl>,<decl><type ref="prev"/><name>mid</name><init>=<expr><operator>(</operator><name>ll</name><operator>+</operator><name>rr</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
   <if>if<condition>(<expr><name>ll</name><operator>&gt;=</operator><name>l</name> <operator>&amp;&amp;</operator> <name>rr</name><operator>&lt;=</operator><name>r</name></expr>)</condition><then>
       <block type="pseudo"><return>return <expr><name><name>st</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>sum</name></expr>;</return></block></then></if>
       <decl_stmt><decl><type><name>lli</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>   
       <if>if<condition>(<expr><call><name>intersectiontype1</name><argument_list>(<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>mid</name></expr></argument>,<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
          <block type="pseudo"><expr_stmt><expr><name>ans</name><operator>=</operator><call><name>query</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><literal type="number">2</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
       <if>if<condition>(<expr><call><name>intersectiontype1</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>+</operator><name>mid</name></expr></argument>,<argument><expr><name>rr</name></expr></argument>,<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
          <block type="pseudo"><expr_stmt><expr><name>ans</name><operator>+=</operator><call><name>query</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><literal type="number">2</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
          <return>return <expr><name>ans</name></expr>;</return>     
   }</block></function>
   <function><type><name>void</name></type> <name>update</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>,<parameter><decl><type><name>lli</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>k</name><init>=<expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list>
   <block>{
	<if>if<condition>(<expr><name>l</name><operator>&gt;</operator><name>r</name></expr>)</condition><then>
		<block type="pseudo"><return>return;</return></block></then></if>
   <decl_stmt><decl><type><name>int</name></type> <name>ll</name><init>=<expr><name><name>st</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>l</name></expr></init></decl>,<decl><type ref="prev"/><name>rr</name><init>=<expr><name><name>st</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>r</name></expr></init></decl>,<decl><type ref="prev"/><name>mid</name><init>=<expr><operator>(</operator><name>ll</name><operator>+</operator><name>rr</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
   <if>if<condition>(<expr><name>ll</name><operator>&gt;=</operator><name>l</name> <operator>&amp;&amp;</operator> <name>rr</name><operator>&lt;=</operator><name>r</name></expr>)</condition><then>
         <block>{<expr_stmt><expr><name><name>st</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>lazyval</name><operator>=</operator><name>x</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>st</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>lazy</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>      
         <return>return;</return>}</block></then></if>
         <if>if<condition>(<expr><name><name>st</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>lazy</name><operator>!=</operator><literal type="number">0</literal></expr>)</condition><then>
           <block type="pseudo"><expr_stmt><expr><call><name>shift</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
           <if>if<condition>(<expr><name><name>st</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>l</name><operator>==</operator><name><name>st</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>r</name></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then></if>
   <if>if<condition>(<expr><call><name>intersectiontype1</name><argument_list>(<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>mid</name></expr></argument>,<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
      <block type="pseudo"><expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><literal type="number">2</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
   <if>if<condition>(<expr><call><name>intersectiontype1</name><argument_list>(<argument><expr><name>mid</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>rr</name></expr></argument>,<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
      <block type="pseudo"><expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><literal type="number">2</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
      <if>if<condition>(<expr><name><name>st</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>lazy</name><operator>!=</operator><literal type="number">0</literal></expr>)</condition><then>
       <block type="pseudo"><expr_stmt><expr><call><name>shift</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
       <if>if<condition>(<expr><name><name>st</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>lazy</name><operator>!=</operator><literal type="number">0</literal></expr>)</condition><then>
       <block type="pseudo"><expr_stmt><expr><call><name>shift</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    <expr_stmt><expr><name><name>st</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>sum</name><operator>=</operator><name><name>st</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sum</name><operator>+</operator><name><name>st</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>sum</name></expr>;</expr_stmt>           
   }</block></function>
   <function><type><name>int</name></type> <name>lower_bound</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>
   <block>{
    <while>while<condition>(<expr><name>l</name><operator>!=</operator><name>r</name></expr>)</condition>
    <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>mid</name><init>=<expr><operator>(</operator><name>l</name><operator>+</operator><name>r</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
      <if>if<condition>(<expr><call><name>query</name><argument_list>(<argument><expr><name>mid</name></expr></argument>,<argument><expr><name>mid</name></expr></argument>)</argument_list></call><operator>&gt;=</operator><name>val</name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>r</name><operator>=</operator><name>mid</name></expr>;</expr_stmt></block></then>
      <else>else 
        <block>{<expr_stmt><expr><name>l</name><operator>=</operator><name>mid</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
         <if>if<condition>(<expr><name>mid</name><operator>+</operator><literal type="number">1</literal><operator>&lt;</operator><call><name><name>h</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then>  
             <block type="pseudo"><if>if<condition>(<expr><call><name>query</name><argument_list>(<argument><expr><name>mid</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>mid</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>&gt;</operator><name>val</name></expr>)</condition><then>
             <block>{
              <expr_stmt><expr><name>l</name><operator>=</operator><name>mid</name></expr>;</expr_stmt>
              <break>break;</break>
             }</block></then></if></block></then></if>
        }</block></else></if>
    }</block></while>
    <return>return <expr><name>l</name></expr>;</return>
   }</block></function>
</public>}</block>;</class>
<class>class <name>span</name>
<block>{<private type="default">
  </private><public>public:
	<decl_stmt><decl><type><name>v32</name></type> <name>a</name></decl>;</decl_stmt>
	<constructor><name>span</name><parameter_list>()</parameter_list>
	<block>{}</block></constructor><empty_stmt>;</empty_stmt>
	<function><type><name>v32</name></type> <name>max_left_border_without_equality</name><parameter_list>()</parameter_list>
     <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>n</name><init>=<expr><call><name><name>a</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>v32</name></type> <name>ta</name></decl>,<decl><type ref="prev"/><name>al</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
	<macro><name>f</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro>
    <block>{
  	  <if>if<condition>(<expr><call><name><name>ta</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
  		<block>{
  			<expr_stmt><expr><call><name><name>ta</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  			<expr_stmt><expr><name><name>al</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt>
  		}</block></then>
  	  <else>else
  	  <block>{
  		<while>while<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;</operator><name><name>a</name><index>[<expr><name><name>ta</name><index>[<expr><call><name><name>ta</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr>)</condition> <block>{<expr_stmt><expr><call><name><name>ta</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt><if>if<condition>(<expr><call><name><name>ta</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><break>break;</break></block></then></if>}</block></while>
  		 <if>if<condition>(<expr><call><name><name>ta</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
  		 <block>{
  		    <expr_stmt><expr><call><name><name>ta</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  			<expr_stmt><expr><name><name>al</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>	
  		 }</block></then>
  		 <else>else
  		 <block>{
  		 	<expr_stmt><expr><name><name>al</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>ta</name><index>[<expr><call><name><name>ta</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
  		 	<expr_stmt><expr><call><name><name>ta</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  		 }</block></else></if>
  	  }</block></else></if>
  	}</block>
  	<return>return <expr><name>al</name></expr>;</return> 
     }</block></function>
    <function><type><name>v32</name></type> <name>max_left_border_with_equality</name><parameter_list>()</parameter_list>
     <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>n</name><init>=<expr><call><name><name>a</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>v32</name></type> <name>ta</name></decl>,<decl><type ref="prev"/><name>al</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
	<macro><name>f</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro>
    <block>{
  	  <if>if<condition>(<expr><call><name><name>ta</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
  		<block>{
  			<expr_stmt><expr><call><name><name>ta</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  			<expr_stmt><expr><name><name>al</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt>
  		}</block></then>
  	  <else>else
  	  <block>{
  		<while>while<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;=</operator><name><name>a</name><index>[<expr><name><name>ta</name><index>[<expr><call><name><name>ta</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr>)</condition> <block>{<expr_stmt><expr><call><name><name>ta</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt><if>if<condition>(<expr><call><name><name>ta</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><break>break;</break></block></then></if>}</block></while>
  		 <if>if<condition>(<expr><call><name><name>ta</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
  		 <block>{
  		    <expr_stmt><expr><call><name><name>ta</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  			<expr_stmt><expr><name><name>al</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>	
  		 }</block></then>
  		 <else>else
  		 <block>{
  		 	<expr_stmt><expr><name><name>al</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>ta</name><index>[<expr><call><name><name>ta</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
  		 	<expr_stmt><expr><call><name><name>ta</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  		 }</block></else></if>
  	  }</block></else></if>
  	}</block>
  	<return>return <expr><name>al</name></expr>;</return> 
     }</block></function>
    <function><type><name>v32</name></type> <name>min_left_border_without_equality</name><parameter_list>()</parameter_list>
     <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>n</name><init>=<expr><call><name><name>a</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>v32</name></type> <name>ta</name></decl>,<decl><type ref="prev"/><name>al</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
	<macro><name>f</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro>
    <block>{
  	  <if>if<condition>(<expr><call><name><name>ta</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
  		<block>{
  			<expr_stmt><expr><call><name><name>ta</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  			<expr_stmt><expr><name><name>al</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt>
  		}</block></then>
  	  <else>else
  	  <block>{
  		<while>while<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;</operator><name><name>a</name><index>[<expr><name><name>ta</name><index>[<expr><call><name><name>ta</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr>)</condition> <block>{<expr_stmt><expr><call><name><name>ta</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt><if>if<condition>(<expr><call><name><name>ta</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><break>break;</break></block></then></if>}</block></while>
  		 <if>if<condition>(<expr><call><name><name>ta</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
  		 <block>{
  		    <expr_stmt><expr><call><name><name>ta</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  			<expr_stmt><expr><name><name>al</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>	
  		 }</block></then>
  		 <else>else
  		 <block>{
  		 	<expr_stmt><expr><name><name>al</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>ta</name><index>[<expr><call><name><name>ta</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
  		 	<expr_stmt><expr><call><name><name>ta</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  		 }</block></else></if>
  	  }</block></else></if>
  	}</block> 
  	<return>return <expr><name>al</name></expr>;</return>
     }</block></function>
    <function><type><name>v32</name></type> <name>min_left_border_with_equality</name><parameter_list>()</parameter_list>
     <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>n</name><init>=<expr><call><name><name>a</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>v32</name></type> <name>ta</name></decl>,<decl><type ref="prev"/><name>al</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
	<macro><name>f</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro>
    <block>{
  	  <if>if<condition>(<expr><call><name><name>ta</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
  		<block>{
  			<expr_stmt><expr><call><name><name>ta</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  			<expr_stmt><expr><name><name>al</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt>
  		}</block></then>
  	  <else>else
  	  <block>{
  		<while>while<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;=</operator><name><name>a</name><index>[<expr><name><name>ta</name><index>[<expr><call><name><name>ta</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr>)</condition> <block>{<expr_stmt><expr><call><name><name>ta</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt><if>if<condition>(<expr><call><name><name>ta</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><break>break;</break></block></then></if>}</block></while>
  		 <if>if<condition>(<expr><call><name><name>ta</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
  		 <block>{
  		    <expr_stmt><expr><call><name><name>ta</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  			<expr_stmt><expr><name><name>al</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>	
  		 }</block></then>
  		 <else>else
  		 <block>{
  		 	<expr_stmt><expr><name><name>al</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>ta</name><index>[<expr><call><name><name>ta</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
  		 	<expr_stmt><expr><call><name><name>ta</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  		 }</block></else></if>
  	  }</block></else></if>
  	}</block> 
  	<return>return <expr><name>al</name></expr>;</return>
     }</block></function>
    <function><type><name>v32</name></type> <name>max_right_border_without_equality</name><parameter_list>()</parameter_list>
     <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>n</name><init>=<expr><call><name><name>a</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>reverse</name><argument_list>(<argument><expr><call><name><name>a</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>a</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>v32</name></type> <name>ans</name><init>=<expr><call><name>max_left_border_without_equality</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>reverse</name><argument_list>(<argument><expr><call><name><name>ans</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>ans</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>f</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro><expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>n</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>reverse</name><argument_list>(<argument><expr><call><name><name>a</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>a</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>ans</name></expr>;</return>
     }</block></function>
    <function><type><name>v32</name></type> <name>max_right_border_with_equality</name><parameter_list>()</parameter_list>
     <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>n</name><init>=<expr><call><name><name>a</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>reverse</name><argument_list>(<argument><expr><call><name><name>a</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>a</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>v32</name></type> <name>ans</name><init>=<expr><call><name>max_left_border_with_equality</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>reverse</name><argument_list>(<argument><expr><call><name><name>ans</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>ans</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>f</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro><expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>n</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>reverse</name><argument_list>(<argument><expr><call><name><name>a</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>a</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>ans</name></expr>;</return>
     }</block></function> 
    <function><type><name>v32</name></type> <name>min_right_border_without_equality</name><parameter_list>()</parameter_list>
     <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>n</name><init>=<expr><call><name><name>a</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>reverse</name><argument_list>(<argument><expr><call><name><name>a</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>a</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>v32</name></type> <name>ans</name><init>=<expr><call><name>min_left_border_without_equality</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>reverse</name><argument_list>(<argument><expr><call><name><name>ans</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>ans</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>f</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro><expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>n</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>reverse</name><argument_list>(<argument><expr><call><name><name>a</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>a</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>ans</name></expr>;</return>
     }</block></function>
     <function><type><name>v32</name></type> <name>min_right_border_with_equality</name><parameter_list>()</parameter_list>
     <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>n</name><init>=<expr><call><name><name>a</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>reverse</name><argument_list>(<argument><expr><call><name><name>a</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>a</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>v32</name></type> <name>ans</name><init>=<expr><call><name>min_left_border_with_equality</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>reverse</name><argument_list>(<argument><expr><call><name><name>ans</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>ans</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>f</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro><expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>n</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>reverse</name><argument_list>(<argument><expr><call><name><name>a</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>a</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>ans</name></expr>;</return>
     }</block></function>

</public>}</block>;</class>
<class>class <name>merge_sort_tree</name>
<block>{<private type="default">
  </private><public>public:
	<function><type><name>lli</name></type> <name>cnt</name><parameter_list>(<parameter><decl><type><name>lli</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>arr</name></decl></parameter>)</parameter_list>
    <block>{
     <decl_stmt><decl><type><name>lli</name></type> <name>n</name><init>=<expr><call><name><name>arr</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></name></type> <name>low</name></decl>,<decl><type ref="prev"/><name>high</name></decl>;</decl_stmt>
     <expr_stmt><expr><name>low</name> <operator>=</operator> <call><name>lower_bound</name><argument_list>(<argument><expr><call><name><name>arr</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>arr</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <if>if <condition>(<expr><name>low</name> <operator>==</operator> <operator>(</operator><call><name><name>arr</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>||</operator> <operator>*</operator><name>low</name> <operator>!=</operator> <name>x</name></expr>)</condition><then>
     <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
     <expr_stmt><expr><name>high</name> <operator>=</operator> <call><name>upper_bound</name><argument_list>(<argument><expr><name>low</name></expr></argument>, <argument><expr><call><name><name>arr</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <return>return <expr><name>high</name> <operator>-</operator> <name>low</name></expr>;</return>
    }</block></function>
    <function><type><name>lli</name></type> <name>get_last_smaller</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>
    <block>{
     <decl_stmt><decl><type><name>lli</name></type> <name>first</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>last</name> <init>= <expr><call><name><name>v</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
     <while>while <condition>(<expr><name>first</name> <operator>&lt;=</operator> <name>last</name></expr>)</condition>
     <block>{
       <decl_stmt><decl><type><name>lli</name></type> <name>mid</name> <init>= <expr><operator>(</operator><name>first</name> <operator>+</operator> <name>last</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
       <if>if <condition>(<expr><name><name>v</name><index>[<expr><name>mid</name></expr>]</index></name> <operator>&gt;=</operator> <name>x</name></expr>)</condition><then>
       <block type="pseudo"><expr_stmt><expr><name>last</name> <operator>=</operator> <name>mid</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then>
       <else>else
       <block type="pseudo"><expr_stmt><expr><name>first</name> <operator>=</operator> <name>mid</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
     }</block></while>
  <return>return <expr><ternary><condition><expr><name>first</name> <operator>-</operator> <literal type="number">1</literal> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>first</name> <operator>-</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</return>
    }</block></function>
	<struct>struct <name>node</name>
    <block>{<public type="default">
      <decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>,<decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>arr</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>v32</name></type> <name>arr2</name></decl>;</decl_stmt>
    </public>}</block>;</struct>
	<decl_stmt><decl><type><name>v32</name></type> <name>a</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vt</name> <argument_list type="generic">&lt;<argument><expr><name>node</name></expr></argument>&gt;</argument_list></name></type> <name>st</name></decl>;</decl_stmt> 
	
    <constructor><name>merge_sort_tree</name><parameter_list>(<parameter><decl><type><name>v32</name></type> <name>b</name></decl></parameter>)</parameter_list>
    <block>{
      <expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">4</literal><operator>*</operator><call><name><name>b</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>a</name><operator>=</operator><name>b</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>build</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><call><name><name>b</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
     <function><type><name>void</name></type> <name>build</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>k</name><init>=<expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list>
      <block>{
        <expr_stmt><expr><name><name>st</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>l</name><operator>=</operator><name>l</name></expr><operator>,</operator><expr><name><name>st</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>r</name><operator>=</operator><name>r</name></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>l</name></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>r</name><operator>+</operator><literal type="number">1</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name><name>st</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><call><name><name>arr</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>,<expr><name>i</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
        <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>st</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><call><name><name>arr</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>st</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><call><name><name>arr</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>f</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>st[k].arr.size()</argument>)</argument_list></macro><expr_stmt><expr><name><name>st</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><call><name><name>arr2</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name><name>st</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>l</name><operator>==</operator><name>r</name></expr>)</condition><then>
        <block type="pseudo"><return>return;</return></block></then></if>
        <expr_stmt><expr><call><name>build</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><operator>(</operator><name>l</name><operator>+</operator><name>r</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">2</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>build</name><argument_list>(<argument><expr><operator>(</operator><name>l</name><operator>+</operator><name>r</name><operator>)</operator><operator>/</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><literal type="number">2</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></function>
    <function><type><name>bool</name></type> <name>intersection</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>ll</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>rr</name></decl></parameter>)</parameter_list>
    <block>{
	  <if>if<condition>(<expr><name>ll</name><operator>&gt;</operator><name>r</name> <operator>||</operator> <name>l</name><operator>&gt;</operator><name>rr</name></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
	  <return>return <expr><literal type="number">1</literal></expr>;</return>
    }</block></function>
    <function><type><name>lli</name></type> <name>count_val_in_range</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>t</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>k</name><init>=<expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list>
    <block>{
     <if>if<condition>(<expr><name>l</name><operator>&gt;</operator><name>r</name></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
     <decl_stmt><decl><type><name>int</name></type> <name>ll</name><init>=<expr><name><name>st</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>l</name></expr></init></decl>,<decl><type ref="prev"/><name>rr</name><init>=<expr><name><name>st</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>r</name></expr></init></decl>,<decl><type ref="prev"/><name>mid</name><init>=<expr><operator>(</operator><name>ll</name><operator>+</operator><name>rr</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
     <if>if<condition>(<expr><name>ll</name><operator>&gt;=</operator><name>l</name> <operator>&amp;&amp;</operator> <name>rr</name><operator>&lt;=</operator><name>r</name></expr>)</condition><then>
     <block type="pseudo"><return>return <expr><call><name>cnt</name><argument_list>(<argument><expr><name>t</name></expr></argument>,<argument><expr><name><name>st</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>arr2</name></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
     <decl_stmt><decl><type><name>lli</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
     <if>if<condition>(<expr><call><name>intersection</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>mid</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
     <block type="pseudo"><expr_stmt><expr><name>ans</name><operator>+=</operator><call><name>count_val_in_range</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><name>t</name></expr></argument>,<argument><expr><literal type="number">2</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
     <if>if<condition>(<expr><call><name>intersection</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><name>mid</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>rr</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
     <block type="pseudo"><expr_stmt><expr><name>ans</name><operator>+=</operator><call><name>count_val_in_range</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><name>t</name></expr></argument>,<argument><expr><literal type="number">2</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
     <return>return <expr><name>ans</name></expr>;</return>
    }</block></function>
    <function><type><name>lli</name></type> <name>count_vals_less_than_given_val</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>t</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>,<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>node</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>st</name></decl></parameter>)</parameter_list>
    <block>{
     <if>if<condition>(<expr><name>l</name><operator>&gt;</operator><name>r</name></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
     <decl_stmt><decl><type><name>int</name></type> <name>ll</name><init>=<expr><name><name>st</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>l</name></expr></init></decl>,<decl><type ref="prev"/><name>rr</name><init>=<expr><name><name>st</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>r</name></expr></init></decl>,<decl><type ref="prev"/><name>mid</name><init>=<expr><operator>(</operator><name>ll</name><operator>+</operator><name>rr</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
     <if>if<condition>(<expr><name>ll</name><operator>&gt;=</operator><name>l</name> <operator>&amp;&amp;</operator> <name>rr</name><operator>&lt;=</operator><name>r</name></expr>)</condition><then>
     <block type="pseudo"><return>return <expr><call><name>get_last_smaller</name><argument_list>(<argument><expr><name><name>st</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>arr2</name></expr></argument>,<argument><expr><name>t</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr>;</return></block></then></if>
     <decl_stmt><decl><type><name>lli</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
     <if>if<condition>(<expr><call><name>intersection</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>mid</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
     <block type="pseudo"><expr_stmt><expr><name>ans</name><operator>+=</operator><call><name>count_vals_less_than_given_val</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><name>t</name></expr></argument>,<argument><expr><literal type="number">2</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
     <if>if<condition>(<expr><call><name>intersection</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><name>mid</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>rr</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
     <block type="pseudo"><expr_stmt><expr><name>ans</name><operator>+=</operator><call><name>count_vals_less_than_given_val</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><name>t</name></expr></argument>,<argument><expr><literal type="number">2</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
     <return>return <expr><name>ans</name></expr>;</return>
    }</block></function>	
    <function><type><name>int</name></type> <name>find</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>k</name><init>=<expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list>
    <block>{
     <if>if<condition>(<expr><name>l</name><operator>&gt;</operator><name>r</name></expr>)</condition><then><block type="pseudo"><return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block></then></if>
     <decl_stmt><decl><type><name>int</name></type> <name>ll</name><init>=<expr><name><name>st</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>l</name></expr></init></decl>,<decl><type ref="prev"/><name>rr</name><init>=<expr><name><name>st</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>r</name></expr></init></decl>,<decl><type ref="prev"/><name>mid</name><init>=<expr><operator>(</operator><name>ll</name><operator>+</operator><name>rr</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
     <if>if<condition>(<expr><name>ll</name><operator>&gt;=</operator><name>l</name> <operator>&amp;&amp;</operator> <name>rr</name><operator>&lt;=</operator><name>r</name></expr>)</condition><then>
       <block>{ 
         <decl_stmt><decl><type><name>int</name></type> <name>p</name><init>=<expr><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>st</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><call><name><name>arr2</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>st</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><call><name><name>arr2</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>-</operator><name><name>st</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><call><name><name>arr2</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
         <if>if<condition>(<expr><name>p</name><operator>==</operator><name><name>st</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><call><name><name>arr2</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block type="pseudo"><return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block></then></if>
         <if>if<condition>(<expr><name><name>st</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name><name>arr2</name><index>[<expr><name>p</name></expr>]</index></name><operator>==</operator><name>x</name></expr>)</condition><then><block type="pseudo"><return>return <expr><name><name>st</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name><name>arr</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>second</name></expr>;</return></block></then></if>
         <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
       }</block></then></if>
       <decl_stmt><decl><type><name>int</name></type> <name>ans</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
     <if>if<condition>(<expr><call><name>intersection</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>mid</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
     <block type="pseudo"><expr_stmt><expr><name>ans</name><operator>=</operator><call><name>find</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><literal type="number">2</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
     <if>if<condition>(<expr><name>ans</name><operator>==</operator><operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>intersection</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><name>mid</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>rr</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
     <block type="pseudo"><expr_stmt><expr><name>ans</name><operator>=</operator><call><name>find</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><literal type="number">2</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
     <return>return <expr><name>ans</name></expr>;</return>
    }</block></function>
</public>}</block>;</class>
<function><type><name>lli</name></type> <name>tmod</name><parameter_list>(<parameter><decl><type><name>lli</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>lli</name></type> <name>m</name></decl></parameter>)</parameter_list><block>{<return>return <expr><operator>(</operator><name>x</name><operator>%</operator><name>m</name><operator>+</operator><name>m</name><operator>)</operator><operator>%</operator><name>m</name></expr>;</return>}</block></function><comment type="line">//USE AT YOUR OWN RISK</comment>
<function><type><name>lli</name></type> <name>power</name><parameter_list>(<parameter><decl><type><name>lli</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>lli</name></type> <name>y</name></decl></parameter>)</parameter_list> 
<block>{
    <decl_stmt><decl><type><name>lli</name></type> <name>res</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>  
   
    <while>while <condition>(<expr><name>y</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> 
    <block>{ 
        <if>if <condition>(<expr><name>y</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then> 
            <block type="pseudo"><expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>res</name><operator>*</operator><name>x</name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt></block></then></if> 
        <expr_stmt><expr><name>y</name> <operator>=</operator> <name>y</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</expr_stmt> 
        <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name><operator>*</operator><name>x</name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt>  
    }</block></while>
    <if>if<condition>(<expr><name>res</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then>
       <block type="pseudo"><expr_stmt><expr><name>res</name><operator>+=</operator><name>mod</name></expr>;</expr_stmt></block></then></if> 
    <return>return <expr><name>res</name></expr>;</return> 
}</block></function>
<function><type><name>lli</name></type> <name>modInverse</name><parameter_list>(<parameter><decl><type><name>lli</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>lli</name></type> <name>m</name></decl></parameter>)</parameter_list> 
<block>{
    <decl_stmt><decl><type><name>lli</name></type> <name>m0</name> <init>= <expr><name>m</name></expr></init></decl>;</decl_stmt> 
    <decl_stmt><decl><type><name>lli</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>x</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 
    <if>if <condition>(<expr><name>m</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> 
      <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if> 
  
    <while>while <condition>(<expr><name>a</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> 
    <block>{  
        <decl_stmt><decl><type><name>lli</name></type> <name>q</name> <init>= <expr><name>a</name> <operator>/</operator> <name>m</name></expr></init></decl>;</decl_stmt> 
        <decl_stmt><decl><type><name>lli</name></type> <name>t</name> <init>= <expr><name>m</name></expr></init></decl>;</decl_stmt> 
        <expr_stmt><expr><name>m</name> <operator>=</operator> <name>a</name> <operator>%</operator> <name>m</name></expr><operator>,</operator> <expr><name>a</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt> 
        <expr_stmt><expr><name>t</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt> 
        <expr_stmt><expr><name>y</name> <operator>=</operator> <name>x</name> <operator>-</operator> <name>q</name> <operator>*</operator> <name>y</name></expr>;</expr_stmt> 
        <expr_stmt><expr><name>x</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt> 
    }</block></while>  
    <if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> 
       <block type="pseudo"><expr_stmt><expr><name>x</name> <operator>+=</operator> <name>m0</name></expr>;</expr_stmt></block></then></if> 
    <return>return <expr><name>x</name></expr>;</return> 
}</block></function> 
<class>class <name>matrix</name>
<block>{<private type="default">
</private><public>public:
  <decl_stmt><decl><type><name>v4096</name></type> <name>m</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>v4096</name></type> <name>I</name></decl>;</decl_stmt>
  <constructor><name>matrix</name><parameter_list>(<parameter><decl><type><name>v4096</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{
    <expr_stmt><expr><name>m</name><operator>=</operator><name>x</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>I</name><operator>=</operator><name>x</name></expr>;</expr_stmt>
    <macro><name>f</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>m.size()</argument>)</argument_list></macro><expr_stmt><expr><name><name>I</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <macro><name>f</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>x.size()</argument>)</argument_list></macro><macro><name>f</name><argument_list>(<argument>j</argument>,<argument><literal type="number">0</literal></argument>,<argument>x.size()</argument>)</argument_list></macro><if>if<condition>(<expr><name>i</name><operator>!=</operator><name>j</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name><name>I</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
  }</block></constructor><empty_stmt>;</empty_stmt>
  <function><type><name>v4096</name></type> <name>multiply</name><parameter_list>(<parameter><decl><type><name>v4096</name></type> <name>m1</name></decl></parameter>,<parameter><decl><type><name>v4096</name></type> <name>m2</name></decl></parameter>)</parameter_list>
  <block>{
    <decl_stmt><decl><type><name>v4096</name></type> <name>m3</name><init>=<expr><name>m1</name></expr></init></decl>;</decl_stmt>
    <macro><name>f</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>m2.size()</argument>)</argument_list></macro>
      <block>{
          <macro><name>f</name><argument_list>(<argument>j</argument>,<argument><literal type="number">0</literal></argument>,<argument>m2[<literal type="number">0</literal>].size()</argument>)</argument_list></macro>
          <block>{    
            <expr_stmt><expr><name><name>m3</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
            <macro><name>f</name><argument_list>(<argument>k</argument>,<argument><literal type="number">0</literal></argument>,<argument>m1[<literal type="number">0</literal>].size()</argument>)</argument_list></macro> <expr_stmt><expr><name><name>m3</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><operator>(</operator><name><name>m3</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>+</operator><name><name>m1</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name><operator>*</operator><name><name>m2</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt>
          }</block>
      }</block>
      <return>return <expr><name>m3</name></expr>;</return>
  }</block></function>
  <function><type><name>v4096</name></type> <name>exp</name><parameter_list>(<parameter><decl><type><name>lli</name></type> <name>p</name></decl></parameter>)</parameter_list>
   <block>{
    <decl_stmt><decl><type><name>v4096</name></type> <name>res</name></decl>;</decl_stmt>
   <if>if<condition>(<expr><name>p</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
      <block type="pseudo"><return>return <expr><name>m</name></expr>;</return></block></then></if>
   <if>if<condition>(<expr><name>p</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>I</name></expr>;</return></block></then></if>
      <if>if<condition>(<expr><name>p</name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
      <block>{
          <expr_stmt><expr><name>res</name><operator>=</operator><call><name>exp</name><argument_list>(<argument><expr><name>p</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>res</name><operator>=</operator><call><name>multiply</name><argument_list>(<argument><expr><name>res</name></expr></argument>,<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then>
      <else>else
      <block>{
          <expr_stmt><expr><name>res</name><operator>=</operator><call><name>exp</name><argument_list>(<argument><expr><name>p</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>res</name><operator>=</operator><call><name>multiply</name><argument_list>(<argument><expr><name>res</name></expr></argument>,<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>res</name><operator>=</operator><call><name>multiply</name><argument_list>(<argument><expr><name>res</name></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></else></if>
   <return>return <expr><name>res</name></expr>;</return>
   }</block></function>
</public>}</block>;</class>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> 
<block>{ 
  <expr_stmt><expr><name>fastio</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
  <while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition><block>{
    <decl_stmt><decl><type><name>lli</name></type> <name>n</name></decl>;</decl_stmt><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>lli</name></type> <name><name>p</name><index>[<expr><name>n</name></expr>]</index></name></decl>;</decl_stmt><macro><name>f</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>lli</name></type> <name>m</name></decl>;</decl_stmt><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>m</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>lli</name></type> <name><name>q</name><index>[<expr><name>m</name></expr>]</index></name></decl>;</decl_stmt><macro><name>f</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>m</argument>)</argument_list></macro><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>q</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>lli</name></type> <name>c1</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>c2</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <macro><name>f</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro><if>if<condition>(<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>c1</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
    <macro><name>f</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>m</argument>)</argument_list></macro><if>if<condition>(<expr><name><name>q</name><index>[<expr><name>i</name></expr>]</index></name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>c2</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>c1</name><operator>*</operator><name>c2</name><operator>+</operator><operator>(</operator><name>n</name><operator>-</operator><name>c1</name><operator>)</operator><operator>*</operator><operator>(</operator><name>m</name><operator>-</operator><name>c2</name><operator>)</operator><operator>&lt;&lt;</operator><literal type="string">"\n"</literal></expr>;</expr_stmt>
  }</block></while>
  <return>return <expr><literal type="number">0</literal></expr>;</return> 	
}</block></function></unit>
