<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29151535_63007593.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iomanip&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdlib&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pi</name></cpp:macro> <cpp:value>3.14159265</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x.begin(),x.end()</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>mod</name> <init>= <expr><literal type="number">1000000000</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>kd</name> <init>= <expr><literal type="number">1.41421356237</literal></expr></init></decl>;</decl_stmt>


<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <comment type="line">//freopen("ladder.in ","r",stdin);</comment>
    <comment type="line">//freopen("ladder.out","w",stdout);</comment>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name><name>a</name><index>[<expr><literal type="number">505</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name><name>o</name><index>[<expr><literal type="number">505</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>z</name><index>[<expr><literal type="number">505</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name>an</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>l</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>r</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <decl_stmt><decl><type><name>char</name></type> <name>qq</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>qq</name></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>qq</name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
        <expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></for>
    <if>if<condition>(<expr><name>sum</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="number">0</literal><operator>&lt;&lt;</operator><literal type="char">'\n'</literal><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="char">' '</literal><operator>&lt;&lt;</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><name>i</name></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>sumo</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>sumz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>oo</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>zz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <for>for<control>(<init><decl><type><name>int</name></type> <name>k</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>k</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
            <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>pos1</name> <init>= <expr><name>k</name></expr></init></decl>, <decl><type ref="prev"/><name>pos2</name> <init>= <expr><name>n</name><operator>-</operator><name>k</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>ch1</name> <init>= <expr><name><name>a</name><index>[<expr><name>pos1</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>ch2</name> <init>= <expr><name><name>a</name><index>[<expr><name>pos2</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <if>if<condition>(<expr><name>pos1</name> <operator>==</operator> <name>i</name></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name>ch1</name> <operator>=</operator> <name><name>a</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block></then></if>
                <if>if<condition>(<expr><name>pos1</name> <operator>==</operator> <name>j</name></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name>ch1</name> <operator>=</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></then></if>
                <if>if<condition>(<expr><name>pos2</name> <operator>==</operator> <name>i</name></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name>ch2</name> <operator>=</operator> <name><name>a</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block></then></if>
                <if>if<condition>(<expr><name>pos2</name> <operator>==</operator> <name>j</name></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name>ch2</name> <operator>=</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></then></if>
                <expr_stmt><expr><name>sumo</name> <operator>+=</operator> <name>ch1</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>sumz</name> <operator>+=</operator> <name>ch2</name></expr>;</expr_stmt>
                <if>if<condition>(<expr><name>sumo</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name>sumo</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
                <if>if<condition>(<expr><name>sumz</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name>sumz</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
                <if>if<condition>(<expr><name>ch1</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name><name>o</name><index>[<expr><name>pos1</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></then>
                <else>else
                <block>{
                    <if>if<condition>(<expr><name>sumo</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
                        <block type="pseudo"><expr_stmt><expr><name><name>o</name><index>[<expr><name>pos1</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then>
                    <else>else <block type="pseudo"><expr_stmt><expr><name><name>o</name><index>[<expr><name>pos1</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></else></if>
                }</block></else></if>
                <if>if<condition>(<expr><name>ch2</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name><name>z</name><index>[<expr><name>pos2</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></then>
                <else>else
                <block>{
                    <if>if<condition>(<expr><name>sumz</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
                        <block type="pseudo"><expr_stmt><expr><name><name>z</name><index>[<expr><name>pos2</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then>
                    <else>else <block type="pseudo"><expr_stmt><expr><name><name>z</name><index>[<expr><name>pos2</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></else></if>
                }</block></else></if>
            }</block></for>
            <decl_stmt><decl><type><name>int</name></type> <name>kk</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block>{
                <if>if<condition>(<expr><name><name>o</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>z</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name>kk</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
            }</block></for>
            <if>if<condition>(<expr><name><name>o</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>kk</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
            <if>if<condition>(<expr><name>kk</name> <operator>&gt;</operator> <name>an</name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>an</name> <operator>=</operator> <name>kk</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>l</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>r</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
    }</block></for>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>an</name><operator>&lt;&lt;</operator><literal type="char">'\n'</literal><operator>&lt;&lt;</operator><name>l</name><operator>+</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="char">' '</literal><operator>&lt;&lt;</operator><name>r</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
}</block></function>

</unit>
