<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29180178_63003287.cpp"><comment type="block" format="doxygen">/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author /dev/null
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ext/pb_ds/tree_policy.hpp&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ext/pb_ds/assoc_container.hpp&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<using>using <namespace>namespace <name>__gnu_pbds</name>;</namespace></using>

<using><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> using <name>Tree</name> <init>= <type><name><name>tree</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name>null_type</name></expr></argument>, <argument><expr><name><name>less</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>rb_tree_tag</name></expr></argument>, <argument><expr><name>tree_order_statistics_node_update</name></expr></argument>&gt;</argument_list></name></type></init>;</using>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>pll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>double</name></expr></argument>, <argument><expr><name>double</name></expr></argument>&gt;</argument_list></name></type> <name>pdd</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>                      <cpp:value>(x).begin(),(x).end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Sort</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>                     <cpp:value>sort(all((x)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X</name></cpp:macro>                           <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Y</name></cpp:macro>                           <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Mp</name></cpp:macro>                          <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sep</name></cpp:macro>                         <cpp:value>' '</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro>                        <cpp:value>'\n'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>                    <cpp:value>cerr &lt;&lt; #x &lt;&lt; " = " &lt;&lt; x &lt;&lt; endl</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SZ</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>                       <cpp:value>ll(x.size())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fast_io</name></cpp:macro>                     <cpp:value>ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>set_random</name></cpp:macro>                  <cpp:value>mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());</cpp:value></cpp:define>

<function><type><name>ll</name></type> <name>poww</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>md</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><operator>(</operator><ternary><condition><expr><operator>!</operator><name>b</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><name>b</name> <operator>&amp;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>a</name> <operator>*</operator> <call><name>poww</name><argument_list>(<argument><expr><name>a</name> <operator>*</operator> <name>a</name> <operator>%</operator> <name>md</name></expr></argument>, <argument><expr><name>b</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>md</name></expr></argument>)</argument_list></call> <operator>%</operator> <name>md</name></expr> </then><else>: <expr><call><name>poww</name><argument_list>(<argument><expr><name>a</name> <operator>*</operator> <name>a</name> <operator>%</operator> <name>md</name></expr></argument>, <argument><expr><name>b</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>md</name></expr></argument>)</argument_list></call> <operator>%</operator> <name>md</name></expr></else></ternary><operator>)</operator></expr></else></ternary><operator>)</operator></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>MAXN</name> <init>= <expr><literal type="number">2e5</literal> <operator>+</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>INF</name> <init>= <expr><literal type="number">8e18</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>MOD</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt> <comment type="line">// 998244353; // 1e9 + 9;</comment>

<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>p</name></decl> , <decl><type ref="prev"/><name>T</name></decl> , <decl><type ref="prev"/><name><name>t</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>E</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl> , <decl><type ref="prev"/><name><name>seg</name><index>[<expr><name>MAXN</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>queue</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>q</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>st</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>update</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ind</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>l</name> <operator>==</operator> <name>r</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>seg</name><index>[<expr><name>id</name></expr>]</index></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
        <return>return;</return>
    }</block></then></if>
    <decl_stmt><decl><type><name>int</name></type> <name>mid</name> <init>= <expr><operator>(</operator><name>l</name> <operator>+</operator> <name>r</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>ind</name> <operator>&lt;=</operator> <name>mid</name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name>id</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>mid</name></expr></argument>, <argument><expr><name>ind</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
    <else>else
        <block type="pseudo"><expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name>id</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>mid</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>ind</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
    <expr_stmt><expr><name><name>seg</name><index>[<expr><name>id</name></expr>]</index></name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>seg</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>id</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>seg</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>id</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>ll</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ql</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>qr</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>ql</name> <operator>&lt;=</operator> <name>l</name> <operator>&amp;&amp;</operator> <name>r</name> <operator>&lt;=</operator> <name>qr</name></expr>)</condition><then> <block>{
        <return>return <expr><name><name>seg</name><index>[<expr><name>id</name></expr>]</index></name></expr>;</return>
    }</block></then></if>
    <if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <name>ql</name> <operator>||</operator> <name>qr</name> <operator>&lt;</operator> <name>l</name></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><name>INF</name></expr>;</return></block></then></if>
    <decl_stmt><decl><type><name>int</name></type> <name>mid</name> <init>= <expr><operator>(</operator><name>l</name> <operator>+</operator> <name>r</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name>min</name><argument_list>(<argument><expr><call><name>get</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name>id</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>mid</name></expr></argument>, <argument><expr><name>ql</name></expr></argument>, <argument><expr><name>qr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>get</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name>id</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>mid</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>ql</name></expr></argument>, <argument><expr><name>qr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>ll</name></type> <name>BS</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>j</name></decl></parameter>)</parameter_list><block>{
    <if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block></then></if>
    <if>if<condition>(<expr><call><name>get</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument> , <argument><expr><name>n</name> <operator>+</operator> <literal type="number">10</literal></expr></argument> , <argument><expr><literal type="number">1</literal></expr></argument> , <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>j</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block></then></if>
    <decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> , <decl><type ref="prev"/><name>r</name> <init>= <expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>r</name> <operator>-</operator> <name>l</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>mid</name> <init>= <expr><operator>(</operator><name>l</name> <operator>+</operator> <name>r</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><call><name>get</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument> , <argument><expr><name>n</name> <operator>+</operator> <literal type="number">10</literal></expr></argument> , <argument><expr><literal type="number">1</literal></expr></argument> , <argument><expr><name>mid</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>j</name></expr>)</condition><then>  <block type="pseudo"><expr_stmt><expr><name>r</name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt></block></then>
        <else>else    <block type="pseudo"><expr_stmt><expr><name>l</name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt></block></else></if>
    }</block></while>
    <return>return <expr><name>r</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>insert</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{
    <expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument> , <argument><expr><name>n</name> <operator>+</operator> <literal type="number">10</literal></expr></argument> , <argument><expr><name>x</name></expr></argument> , <argument><expr><name>INF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>t</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>INF</name></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><name>fast_io</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fill</name><argument_list>(<argument><expr><name>seg</name></expr></argument> , <argument><expr><name>seg</name> <operator>+</operator> <name>MAXN</name> <operator>*</operator> <literal type="number">4</literal></expr></argument> , <argument><expr><name>INF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>p</name></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>n</name> <operator>+</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>*</operator> <name>n</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <if>if<condition>(<expr><call><name><name>q</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
            <if>if<condition>(<expr><call><name>get</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument> , <argument><expr><name>n</name> <operator>+</operator> <literal type="number">10</literal></expr></argument> , <argument><expr><literal type="number">1</literal></expr></argument> , <argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">2e18</literal></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
            <decl_stmt><decl><type><name>ll</name></type> <name>x</name> <init>= <expr><call><name>BS</name><argument_list>(<argument><expr><name>n</name></expr></argument> , <argument><expr><name>T</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name>x</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block>{
                <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>BS</name><argument_list>(<argument><expr><name>n</name></expr></argument> , <argument><expr><call><name>get</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument> , <argument><expr><name>n</name> <operator>+</operator> <literal type="number">10</literal></expr></argument> , <argument><expr><literal type="number">1</literal></expr></argument> , <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><name>T</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>T</name></expr></argument> , <argument><expr><name><name>t</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>insert</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        }</block></then></if>
        <decl_stmt><decl><type><name>ll</name></type> <name>A</name> <init>= <expr><call><name><name>q</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name><name>E</name><index>[<expr><name>A</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>   <block type="pseudo"><expr_stmt><expr><name><name>E</name><index>[<expr><name>A</name></expr>]</index></name> <operator>=</operator> <name>T</name> <operator>+</operator> <name>p</name></expr>;</expr_stmt></block></then></if>
        <decl_stmt><decl><type><name>ll</name></type> <name>R</name> <init>= <expr><operator>(</operator><operator>*</operator><call><name><name>st</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ll</name></type> <name>x</name> <init>= <expr><call><name>BS</name><argument_list>(<argument><expr><name>R</name></expr></argument>, <argument><expr><name>T</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>x</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>R</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name>T</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>T</name></expr></argument> , <argument><expr><name><name>E</name><index>[<expr><call><name><name>q</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>q</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        }</block></then></if>
        <if>if<condition>(<expr><name>x</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block>{
            <decl_stmt><decl><type><name>ll</name></type> <name>mn</name> <init>= <expr><call><name>get</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument> , <argument><expr><name>n</name> <operator>+</operator> <literal type="number">10</literal></expr></argument> , <argument><expr><literal type="number">1</literal></expr></argument> , <argument><expr><name>R</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name>mn</name> <operator>&gt;=</operator> <name><name>E</name><index>[<expr><call><name><name>q</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr>)</condition><then><block>{
                <expr_stmt><expr><name>T</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>T</name></expr></argument> , <argument><expr><name><name>E</name><index>[<expr><call><name><name>q</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>q</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <continue>continue;</continue>
            }</block></then></if>
            <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>BS</name><argument_list>(<argument><expr><name>R</name></expr></argument> , <argument><expr><call><name>get</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument> , <argument><expr><name>n</name> <operator>+</operator> <literal type="number">10</literal></expr></argument> , <argument><expr><literal type="number">1</literal></expr></argument> , <argument><expr><name>R</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name>T</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>T</name></expr></argument> , <argument><expr><name><name>t</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>insert</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>    <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>E</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>sep</name></expr>;</expr_stmt></block></for>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
