<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29173222_62979388.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
 
<using>using <namespace>namespace <name>std</name>;</namespace></using>
 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PB</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>                                
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL</name></cpp:macro> <cpp:value>long long int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = a ; i &lt; b ; i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RFOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(long long int i = a ; i &gt;= b ; i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FI</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SE</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>   
 
<decl_stmt><decl><type><specifier>const</specifier> <name>LL</name></type> <name>MOD</name> <init>= <expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>long</name> <name>double</name></type> <name>PI</name> <init>= <expr><literal type="number">3.14159265359</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>LL</name></type> <name>INF</name> <init>= <expr><literal type="number">1e14</literal></expr></init></decl>;</decl_stmt>
 
<decl_stmt><decl><type><name>char</name></type> <name><name>salpha</name><index>[<expr><literal type="number">26</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="char">'a'</literal></expr>,<expr><literal type="char">'b'</literal></expr>,<expr><literal type="char">'c'</literal></expr>,<expr><literal type="char">'d'</literal></expr>,<expr><literal type="char">'e'</literal></expr>,<expr><literal type="char">'f'</literal></expr>,<expr><literal type="char">'g'</literal></expr>,<expr><literal type="char">'h'</literal></expr>,<expr><literal type="char">'i'</literal></expr>,<expr><literal type="char">'j'</literal></expr>,<expr><literal type="char">'k'</literal></expr>,<expr><literal type="char">'l'</literal></expr>,<expr><literal type="char">'m'</literal></expr>,<expr><literal type="char">'n'</literal></expr>,<expr><literal type="char">'o'</literal></expr>,<expr><literal type="char">'p'</literal></expr>,<expr><literal type="char">'q'</literal></expr>,<expr><literal type="char">'r'</literal></expr>,<expr><literal type="char">'s'</literal></expr>,<expr><literal type="char">'t'</literal></expr>,<expr><literal type="char">'u'</literal></expr>,<expr><literal type="char">'v'</literal></expr>,<expr><literal type="char">'w'</literal></expr>,<expr><literal type="char">'x'</literal></expr>,<expr><literal type="char">'y'</literal></expr>,<expr><literal type="char">'z'</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>calpha</name><index>[<expr><literal type="number">26</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="char">'A'</literal></expr>,<expr><literal type="char">'B'</literal></expr>,<expr><literal type="char">'C'</literal></expr>,<expr><literal type="char">'D'</literal></expr>,<expr><literal type="char">'E'</literal></expr>,<expr><literal type="char">'F'</literal></expr>,<expr><literal type="char">'G'</literal></expr>,<expr><literal type="char">'H'</literal></expr>,<expr><literal type="char">'I'</literal></expr>,<expr><literal type="char">'J'</literal></expr>,<expr><literal type="char">'K'</literal></expr>,<expr><literal type="char">'L'</literal></expr>,<expr><literal type="char">'M'</literal></expr>,<expr><literal type="char">'N'</literal></expr>,<expr><literal type="char">'O'</literal></expr>,<expr><literal type="char">'P'</literal></expr>,<expr><literal type="char">'Q'</literal></expr>,<expr><literal type="char">'R'</literal></expr>,<expr><literal type="char">'S'</literal></expr>,<expr><literal type="char">'T'</literal></expr>,<expr><literal type="char">'U'</literal></expr>,<expr><literal type="char">'V'</literal></expr>,<expr><literal type="char">'W'</literal></expr>,<expr><literal type="char">'X'</literal></expr>,<expr><literal type="char">'Y'</literal></expr>,<expr><literal type="char">'Z'</literal></expr>}</block></expr></init></decl>;</decl_stmt>
 
<function><type><name>LL</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>LL</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>LL</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<if>if<condition>(<expr><name>a</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{<return>return <expr><name>b</name></expr>;</return>}</block></then></if><return>return <expr><call><name>gcd</name><argument_list>(<argument><expr><name>b</name><operator>%</operator><name>a</name></expr></argument>,<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</return>}</block></function>
<function><type><name>LL</name></type> <name>exp</name><parameter_list>(<parameter><decl><type><name>LL</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>LL</name></type> <name>p</name></decl></parameter>)</parameter_list><block>{<if>if<condition>(<expr><name>p</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{<return>return <expr><literal type="number">1</literal></expr>;</return>}</block></then><elseif>else <if>if<condition>(<expr><name>p</name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{<return>return <expr><call><name>exp</name><argument_list>(<argument><expr><name>b</name><operator>*</operator><name>b</name></expr></argument>,<argument><expr><name>p</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return>}</block></then></if></elseif><else>else<block>{<return>return <expr><name>b</name><operator>*</operator><call><name>exp</name><argument_list>(<argument><expr><name>b</name><operator>*</operator><name>b</name></expr></argument>,<argument><expr><operator>(</operator><name>p</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return>}</block></else></if>}</block></function>
<function><type><name>LL</name></type> <name>mexp</name><parameter_list>(<parameter><decl><type><name>LL</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>LL</name></type> <name>p</name></decl></parameter>)</parameter_list><block>{<if>if<condition>(<expr><name>p</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{<return>return <expr><literal type="number">1</literal></expr>;</return>}</block></then><elseif>else <if>if<condition>(<expr><name>p</name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{<return>return <expr><call><name>mexp</name><argument_list>(<argument><expr><operator>(</operator><name>b</name><operator>*</operator><name>b</name><operator>)</operator><operator>%</operator><name>MOD</name></expr></argument>,<argument><expr><name>p</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>%</operator><name>MOD</name></expr>;</return>}</block></then></if></elseif><else>else<block>{<return>return <expr><operator>(</operator><name>b</name><operator>*</operator><call><name>mexp</name><argument_list>(<argument><expr><operator>(</operator><name>b</name><operator>*</operator><name>b</name><operator>)</operator><operator>%</operator><name>MOD</name></expr></argument>,<argument><expr><operator>(</operator><name>p</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>%</operator><name>MOD</name></expr>;</return>}</block></else></if>}</block></function>
<function><type><name>LL</name></type> <name>minv</name><parameter_list>(<parameter><decl><type><name>LL</name></type> <name>a</name></decl></parameter>)</parameter_list><block>{<return>return <expr><call><name>mexp</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>MOD</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return>}</block></function>
<function><type><name>int</name></type> <name>isprime</name><parameter_list>(<parameter><decl><type><name>LL</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{<for>for<control>(<init><decl><type><name>LL</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl> ;</init> <condition><expr><name>i</name><operator>*</operator><name>i</name><operator>&lt;=</operator><name>n</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<if>if<condition>(<expr><name>n</name><operator>%</operator><name>i</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{<return>return <expr><literal type="number">0</literal></expr>;</return>}</block></then></if>}</block></for><return>return <expr><literal type="number">1</literal></expr>;</return>}</block></function>
 
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
    <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ONLINE_JUDGE</name></cpp:ifndef>
    <comment type="line">// for getting input from input.txt</comment>
    <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"input.txt"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// for writing output to output.txt</comment>
    <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"output.txt"</literal></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>LL</name></type> <name>h</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name><name>in</name><index>[<expr><name>n</name></expr>]</index></name></decl>;</decl_stmt>
    <macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro>
    <block>{
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>in</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    }</block>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>in</name></expr></argument>,<argument><expr><name>in</name><operator>+</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro>
    <block>{
        <if>if<condition>(<expr><name>i</name> <operator>&lt;</operator> <name>n</name><operator>/</operator><literal type="number">2</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>h</name> <operator>+=</operator> <name><name>in</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></then>
        <else>else
        <block>{
            <expr_stmt><expr><name>v</name> <operator>+=</operator> <name><name>in</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></else></if>
    }</block>

    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>h</name><operator>*</operator><name>h</name> <operator>+</operator> <name>v</name><operator>*</operator><name>v</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
 
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
