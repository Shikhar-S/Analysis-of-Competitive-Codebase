<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29180965_63001544.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>i</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%lld",&amp;a)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(long long a=b;a&lt;c;a++)</cpp:value></cpp:define>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<struct>struct <name>mat</name> <block>{<public type="default">
	<decl_stmt><decl><type><name>ll</name></type> <name>a</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>b</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>c</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>d</name></decl>;</decl_stmt>
</public>}</block>;</struct>
<decl_stmt><decl><type><name>ll</name></type> <name>p</name> <init>= <expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
<function><type><name>mat</name></type> <name>p2</name><parameter_list>(<parameter><decl><type><name>mat</name></type> <name>mt</name></decl></parameter>)</parameter_list> <block>{
	<decl_stmt><decl><type><name>ll</name></type> <name>a</name> <init>= <expr><name><name>mt</name><operator>.</operator><name>a</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>b</name> <init>= <expr><name><name>mt</name><operator>.</operator><name>b</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>c</name> <init>= <expr><name><name>mt</name><operator>.</operator><name>c</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>d</name> <init>= <expr><name><name>mt</name><operator>.</operator><name>d</name></name></expr></init></decl>;</decl_stmt>
	<return>return <expr><block>{<expr><operator>(</operator><name>a</name><operator>*</operator><name>a</name><operator>+</operator><name>b</name><operator>*</operator><name>c</name><operator>)</operator><operator>%</operator><name>p</name></expr>,<expr><operator>(</operator><name>a</name><operator>*</operator><name>b</name><operator>+</operator><name>b</name><operator>*</operator><name>d</name><operator>)</operator><operator>%</operator><name>p</name></expr>,<expr><operator>(</operator><name>c</name><operator>*</operator><name>a</name><operator>+</operator><name>d</name><operator>*</operator><name>c</name><operator>)</operator><operator>%</operator><name>p</name></expr>,<expr><operator>(</operator><name>c</name><operator>*</operator><name>b</name><operator>+</operator><name>d</name><operator>*</operator><name>d</name><operator>)</operator><operator>%</operator><name>p</name></expr>}</block></expr>;</return>
}</block></function>
<function><type><name>mat</name></type> <name>mul1</name><parameter_list>(<parameter><decl><type><name>mat</name></type> <name>mt</name></decl></parameter>)</parameter_list> <block>{
	<decl_stmt><decl><type><name>ll</name></type> <name>a</name> <init>= <expr><name><name>mt</name><operator>.</operator><name>a</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>b</name> <init>= <expr><name><name>mt</name><operator>.</operator><name>b</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>c</name> <init>= <expr><name><name>mt</name><operator>.</operator><name>c</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>d</name> <init>= <expr><name><name>mt</name><operator>.</operator><name>d</name></name></expr></init></decl>;</decl_stmt>
	<return>return <expr><block>{ <expr><operator>(</operator><name>a</name> <operator>+</operator> <name>b</name><operator>)</operator> <operator>%</operator> <name>p</name></expr>,<expr><name>a</name></expr>,<expr><name>a</name></expr>,<expr><name>b</name></expr> }</block></expr>;</return>
}</block></function>
<function><type><name>ll</name></type> <name>f</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
	<decl_stmt><decl><type><name>mat</name></type> <name>res</name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>first</name><init>=<expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">17</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{
		<if>if <condition>(<expr><name>x</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator></expr>)</condition><then> <block>{
			<if>if <condition>(<expr><name>first</name></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
			}</block></then>
			<else>else <block>{
				<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>p2</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>mul1</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
		}</block></then>
		<else>else <block>{
			<if>if <condition>(<expr><operator>!</operator><name>first</name></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>p2</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></else></if>
	}</block></for>
	<return>return <expr><name><name>res</name><operator>.</operator><name>a</name></name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><call><name>i</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>i</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><call><name>f</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>f</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function></unit>
