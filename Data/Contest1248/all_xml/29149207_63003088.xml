<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29149207_63003088.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>LL</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ULL</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pr</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>LL</name></expr></argument>, <argument><expr><name>LL</name></expr></argument>&gt;</argument_list></name></type> <name>lpr</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>double</name></expr></argument>, <argument><expr><name>double</name></expr></argument>&gt;</argument_list></name></type> <name>dpr</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>double</name></expr></argument>, <argument><expr><name>long</name> <name>double</name></expr></argument>&gt;</argument_list></name></type> <name>ldpr</name>;</typedef>
<comment type="line">//typedef complex&lt;double&gt; cp;</comment>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>next_x</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>next_y</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>inf</name> <init>= <expr><literal type="number">2147483647</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>LL</name></type> <name>linf</name> <init>= <expr><literal type="number">1e18</literal> <operator>+</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>PI</name> <init>= <expr><call><name>acos</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<comment type="line">// #define DEBUG 1  //è°è¯å¼å³</comment>
<struct>struct <name>IO</name>
<block>{<public type="default">
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXSIZE</name></cpp:macro> <cpp:value>(1 &lt;&lt; 20)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>isdigit</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x &gt;= '0' &amp;&amp; x &lt;= '9')</cpp:value></cpp:define>
    <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>MAXSIZE</name></expr>]</index></name></decl>, <modifier>*</modifier><decl><type ref="prev"/><name>p1</name></decl>, <modifier>*</modifier><decl><type ref="prev"/><name>p2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>pbuf</name><index>[<expr><name>MAXSIZE</name></expr>]</index></name></decl>, <modifier>*</modifier><decl><type ref="prev"/><name>pp</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DEBUG</name></expr></cpp:if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <constructor><name>IO</name><parameter_list>()</parameter_list> <member_init_list>: <call><name>p1</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call>, <call><name>p2</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call>, <call><name>pp</name><argument_list>(<argument><expr><name>pbuf</name></expr></argument>)</argument_list></call>
    </member_init_list><block>{
    }</block></constructor>
    <destructor><name>~<name>IO</name></name><parameter_list>()</parameter_list> <block>{ <expr_stmt><expr><call><name>fwrite</name><argument_list>(<argument><expr><name>pbuf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>pp</name> <operator>-</operator> <name>pbuf</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></destructor>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <function><specifier>inline</specifier> <type><name>char</name></type> <name>gc</name><parameter_list>()</parameter_list>
    <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DEBUG</name></expr></cpp:if> <comment type="line">//è°è¯ï¼å¯æ¾ç¤ºå­ç¬¦</comment>
        <return>return <expr><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <if>if <condition>(<expr><name>p1</name> <operator>==</operator> <name>p2</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>p2</name> <operator>=</operator> <operator>(</operator><name>p1</name> <operator>=</operator> <name>buf</name><operator>)</operator> <operator>+</operator> <call><name>fread</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>MAXSIZE</name></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <return>return <expr><ternary><condition><expr><name>p1</name> <operator>==</operator> <name>p2</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><operator>*</operator><name>p1</name><operator>++</operator></expr></else></ternary></expr>;</return>
    }</block></function>
    <function><specifier>inline</specifier> <type><name>bool</name></type> <name>blank</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>ch</name></decl></parameter>)</parameter_list>
    <block>{
        <return>return <expr><name>ch</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="char">'\t'</literal></expr>;</return>
    }</block></function>
    <function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
    <specifier>inline</specifier> <type><name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><specifier>register</specifier> <name>double</name></type> <name>tmp</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>register</specifier> <name>bool</name></type> <name>sign</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>register</specifier> <name>char</name></type> <name>ch</name> <init>= <expr><call><name>gc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init>;</init> <condition><expr><operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>ch</name> <operator>=</operator> <call><name>gc</name><argument_list>()</argument_list></call></expr></incr>)</control>
            <block type="pseudo"><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>sign</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if></block></for>
        <for>for <control>(<init>;</init> <condition><expr><call><name>isdigit</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>ch</name> <operator>=</operator> <call><name>gc</name><argument_list>()</argument_list></call></expr></incr>)</control>
            <block type="pseudo"><expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <operator>(</operator><name>ch</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt></block></for>
        <if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><then>
            <block type="pseudo"><for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <call><name>gc</name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><call><name>isdigit</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>ch</name> <operator>=</operator> <call><name>gc</name><argument_list>()</argument_list></call></expr></incr>)</control>
                <block type="pseudo"><expr_stmt><expr><name>tmp</name> <operator>/=</operator> <literal type="number">10.0</literal></expr><operator>,</operator> <expr><name>x</name> <operator>+=</operator> <name>tmp</name> <operator>*</operator> <operator>(</operator><name>ch</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt></block></for></block></then></if>
        <if>if <condition>(<expr><name>sign</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>x</name> <operator>=</operator> <operator>-</operator><name>x</name></expr>;</expr_stmt></block></then></if>
    }</block></function>
    <function><specifier>inline</specifier> <type><name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><specifier>register</specifier> <name>char</name></type> <name>ch</name> <init>= <expr><call><name>gc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init>;</init> <condition><expr><call><name>blank</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>ch</name> <operator>=</operator> <call><name>gc</name><argument_list>()</argument_list></call></expr></incr>)</control>
            <block type="pseudo"><empty_stmt>;</empty_stmt></block></for>
        <for>for <control>(<init>;</init> <condition><expr><operator>!</operator><call><name>blank</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>ch</name> <operator>=</operator> <call><name>gc</name><argument_list>()</argument_list></call></expr></incr>)</control>
            <block type="pseudo"><expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>=</operator> <name>ch</name></expr>;</expr_stmt></block></for>
        <expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    }</block></function>
    <function><specifier>inline</specifier> <type><name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>&amp;</modifier></type><name>c</name></decl></parameter>)</parameter_list>
    <block>{
        <for>for <control>(<init><expr><name>c</name> <operator>=</operator> <call><name>gc</name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><call><name>blank</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>c</name> <operator>=</operator> <call><name>gc</name><argument_list>()</argument_list></call></expr></incr>)</control>
            <block type="pseudo"><empty_stmt>;</empty_stmt></block></for>
    }</block></function>
    <function><specifier>inline</specifier> <type><name>void</name></type> <name>push</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>&amp;</modifier></type><name>c</name></decl></parameter>)</parameter_list>
    <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DEBUG</name></expr></cpp:if> <comment type="line">//è°è¯ï¼å¯æ¾ç¤ºå­ç¬¦</comment>
        <expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <if>if <condition>(<expr><name>pp</name> <operator>-</operator> <name>pbuf</name> <operator>==</operator> <name>MAXSIZE</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name>fwrite</name><argument_list>(<argument><expr><name>pbuf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>MAXSIZE</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name>pp</name> <operator>=</operator> <name>pbuf</name></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><operator>*</operator><name>pp</name><operator>++</operator> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    }</block></function>
    <function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
    <specifier>inline</specifier> <type><name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>x</name></decl></parameter>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>x</name> <operator>=</operator> <operator>-</operator><name>x</name></expr><operator>,</operator> <expr><call><name>push</name><argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if> <comment type="line">// è´æ°è¾åº</comment>
        <decl_stmt><decl><specifier>static</specifier> <type><name>T</name></type> <name><name>sta</name><index>[<expr><literal type="number">35</literal></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>T</name></type> <name>top</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <do>do
        <block>{
            <expr_stmt><expr><name><name>sta</name><index>[<expr><name>top</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>x</name> <operator>%</operator> <literal type="number">10</literal></expr><operator>,</operator> <expr><name>x</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
        }</block> while <condition>(<expr><name>x</name></expr>)</condition>;</do>
        <while>while <condition>(<expr><name>top</name></expr>)</condition>
            <block type="pseudo"><expr_stmt><expr><call><name>push</name><argument_list>(<argument><expr><name><name>sta</name><index>[<expr><operator>--</operator><name>top</name></expr>]</index></name> <operator>+</operator> <literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></while>
    }</block></function>
    <function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
    <specifier>inline</specifier> <type><name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>lastChar</name></decl></parameter>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>push</name><argument_list>(<argument><expr><name>lastChar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
</public>}</block> <decl><name>io</name></decl>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dbgs</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>#x &lt;&lt; " = " &lt;&lt; x</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dbgs2</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dbgs(x) &lt;&lt; ", " &lt;&lt; dbgs(y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dbgs3</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dbgs2(x, y) &lt;&lt; ", " &lt;&lt; dbgs(z)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dbgs4</name><parameter_list>(<parameter><type><name>w</name></type></parameter>, <parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dbgs3(w, x, y) &lt;&lt; ", " &lt;&lt; dbgs(z)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>heap</name></cpp:macro> <cpp:value>priority_queue</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mst</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(s, x, sizeof(s))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mid</name></cpp:macro> <cpp:value>((l + r) &gt;&gt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pf</name></cpp:macro> <cpp:value>push_front</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ppb</name></cpp:macro> <cpp:value>pop_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ppf</name></cpp:macro> <cpp:value>pop_front</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x.begin(), x.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>unq</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x.erase(unique(x.begin(), x.end()), x.end())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rg</name></cpp:macro> <cpp:value>register</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fp</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (rg int i = (a), I = (b) + 1; i &lt; I; ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fd</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (rg int i = (a), I = (b)-1; i &gt; I; --i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>go</name><parameter_list>(<parameter><type><name>u</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (rg int i = pre[u], v = e[i].v; i; i = e[i].next, v = e[i].v)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gow</name><parameter_list>(<parameter><type><name>u</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (rg int i = pre[u], v = e[i].v, w = e[i].w; i; i = e[i].next, v = e[i].v, w = e[i].w)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dbga</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro>                       \
    <cpp:value>{                                      \
        cout &lt;&lt; #a &lt;&lt; ": ";                \
        fp(i, 1, len) cout &lt;&lt; a[i] &lt;&lt; " "; \
        cout &lt;&lt; endl;                      \
    }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ub</name></cpp:macro> <cpp:value>upper_bound</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lb</name></cpp:macro> <cpp:value>lower_bound</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>eps</name> <init>= <expr><literal type="number">1e-6</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAXN</name> <init>= <expr><literal type="number">505</literal> <operator>+</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">200</literal> <operator>+</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt>

<comment type="block">/*----------head----------*/</comment>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ans</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pr</name></type> <name>temp</name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr><name>MAXN</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>in</name><parameter_list>(<parameter><decl><type><name><name>deque</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>q</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{
    <while>while<condition>(<expr><operator>!</operator><call><name><name>q</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call><operator>&amp;&amp;</operator><name>val</name><operator>&lt;</operator><call><name><name>q</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr>)</condition> <block type="pseudo"><expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>ppb</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
    <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type> <name>calc</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>cnt</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <macro><name>fp</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro>
    <block>{
        <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'('</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
        <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">')'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cnt</name><operator>--</operator></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>cnt</name></expr>;</expr_stmt>
    }</block>
    
    <expr_stmt><expr><name>cnt</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>deque</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>q</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>add</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <macro><name>fp</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro> <expr_stmt><expr><call><name>in</name><argument_list>(<argument><expr><name>q</name></expr></argument>,<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <macro><name>fp</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro>
    <block>{
 <comment type="block">/*       
        cout &lt;&lt; dbgs(i) &lt;&lt; endl;
        for(auto x:q) printf("%d ",x+add);printf("\n");
*/</comment>
        <if>if<condition>(<expr><call><name><name>q</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>+</operator><name>add</name><operator>==</operator><literal type="number">0</literal><operator>&amp;&amp;</operator><call><name><name>q</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call><operator>+</operator><name>add</name><operator>&gt;=</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
        <if>if<condition>(<expr><name>i</name><operator>==</operator><name>n</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
        <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'('</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>add</name><operator>--</operator></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>val</name><init>=<expr><call><name><name>q</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>+</operator><name>add</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>in</name><argument_list>(<argument><expr><name>q</name></expr></argument>,<argument><expr><name>val</name><operator>-</operator><name>add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else
        <block>{
            <expr_stmt><expr><name>add</name><operator>++</operator></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>val</name><init>=<expr><call><name><name>q</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>+</operator><name>add</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>in</name><argument_list>(<argument><expr><name>q</name></expr></argument>,<argument><expr><name>val</name><operator>-</operator><name>add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block>
    <comment type="line">//printf("%s %d\n",s+1,cnt);</comment>
    <return>return <expr><name>cnt</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>work</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>,<argument><expr><name>s</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><name>ans</name><operator>=</operator><call><name>calc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>temp</name><operator>=</operator><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>;</expr_stmt>

    <macro><name>fp</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro><macro><name>fp</name><argument_list>(<argument>j</argument>,<argument>i</argument>,<argument>n</argument>)</argument_list></macro>
    <block>{
        <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
        <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>t</name><init>=<expr><call><name>calc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>t</name><operator>&gt;</operator><name>ans</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ans</name><operator>=</operator><name>t</name></expr><operator>,</operator><expr><name>temp</name><operator>=</operator><block>{<expr><name>i</name></expr>,<expr><name>j</name></expr>}</block></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>,<argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d\n"</literal></expr></argument>,<argument><expr><name><name>temp</name><operator>.</operator><name>fi</name></name></expr></argument>,<argument><expr><name><name>temp</name><operator>.</operator><name>se</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

<comment type="line">// vector+lower_boundå¸¸æ° &lt; map/set</comment>
<comment type="line">// map.findä¸ä¼åå»ºæ°åç´  map[]ä¼ æ³¨æç©ºé´</comment>
<comment type="line">// å«å¯¹æéç¨memset</comment>
<comment type="line">// ç¨ä½è¿ç®è¡¨ç¤º2^næ³¨æå LL  1LL&lt;&lt;20</comment>
<comment type="line">// æ³¨æéå½çæ </comment>
<comment type="line">// æ³¨æè¾¹ç</comment>
<comment type="line">// æ³¨æmemset å¤ç»æ ·ä¾ä¼T</comment>

<comment type="line">//#define ONLINE_JUDGE</comment>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <comment type="line">//ios::sync_with_stdio(false);</comment>
    <comment type="line">//cin.tie(0);</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ONLINE_JUDGE</name></cpp:ifdef>
    <comment type="line">//freopen("invazia.in", "r",stdin );</comment>
    <comment type="line">//freopen("invazia.out","w",stdout);</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// ONLINE_JUDGE</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ONLINE_JUDGE</name></cpp:ifndef>
    <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"input.txt"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">//freopen("output.txt", "w", stdout);</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>work</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ONLINE_JUDGE</name></cpp:ifndef>
    <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"CON"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>system</name><argument_list>(<argument><expr><literal type="string">"pause"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
