<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29141938_62994350.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdlib&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAXN</name> <init>= <expr><literal type="number">505</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name><name>prel</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>prer</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>minpre</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>minsuf</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>get</name><parameter_list>()</parameter_list>
<block>{
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
        <expr_stmt><expr><name><name>prel</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>prel</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><operator>(</operator><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'('</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>prer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>prer</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><operator>(</operator><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">')'</literal><operator>)</operator></expr>;</expr_stmt>
	}</block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name><name>minpre</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>minpre</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>prel</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>prer</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>n</name></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><name><name>minsuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>minsuf</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>prel</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>prer</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <comment type="line">// cout &lt;&lt; "test1 " &lt;&lt; i &lt;&lt; " " &lt;&lt; minsuf[i] &lt;&lt; endl;</comment>
	}</block></for>    
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><name><name>minsuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-=</operator> <name><name>prel</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>prer</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
       <comment type="line">// cout &lt;&lt; "test " &lt;&lt; i &lt;&lt; " " &lt;&lt; minsuf[i] &lt;&lt; endl;</comment>
	}</block></for>    
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
	<decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ansx</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>ansy</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if>if<condition>(<expr><name><name>prel</name><index>[<expr><name>n</name></expr>]</index></name><operator>!=</operator><name><name>prer</name><index>[<expr><name>n</name></expr>]</index></name></expr>)</condition><then>
	<block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="number">0</literal> <operator>&lt;&lt;</operator> <name>endl</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><if>if<condition>(<expr><name><name>minsuf</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>&gt;=</operator><literal type="number">0</literal><operator>&amp;&amp;</operator><name><name>prel</name><index>[<expr><name>n</name></expr>]</index></name><operator>-</operator><name><name>prel</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>prer</name><index>[<expr><name>n</name></expr>]</index></name><operator>+</operator><name><name>prer</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>minpre</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;=</operator><literal type="number">0</literal></expr>)</condition><then>
        <block>{
		    <expr_stmt><expr><name>ans</name><operator>++</operator></expr>;</expr_stmt>
            <comment type="line">//cout &lt;&lt; i &lt;&lt; endl;</comment>
        }</block></then></if></block></for>  
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>str</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
			<for>for<control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
                <block type="pseudo"><if>if<condition>(<expr><name><name>minsuf</name><index>[<expr><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>&gt;=</operator><literal type="number">0</literal><operator>&amp;&amp;</operator><name><name>prel</name><index>[<expr><name>n</name></expr>]</index></name><operator>-</operator><name><name>prel</name><index>[<expr><name>k</name></expr>]</index></name><operator>-</operator><name><name>prer</name><index>[<expr><name>n</name></expr>]</index></name><operator>+</operator><name><name>prer</name><index>[<expr><name>k</name></expr>]</index></name><operator>+</operator><name><name>minpre</name><index>[<expr><name>k</name></expr>]</index></name><operator>&gt;=</operator><literal type="number">0</literal></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name>res</name><operator>++</operator></expr>;</expr_stmt></block></then></if></block></for>
            <if>if<condition>(<expr><name>res</name><operator>&gt;</operator><name>ans</name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>ans</name> <operator>=</operator> <name>res</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>ansx</name> <operator>=</operator> <name>i</name></expr><operator>,</operator> <expr><name>ansy</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>str</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    }</block></for></block></for>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <name>endl</name> <operator>&lt;&lt;</operator> <name>ansx</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name>ansy</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>  
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
