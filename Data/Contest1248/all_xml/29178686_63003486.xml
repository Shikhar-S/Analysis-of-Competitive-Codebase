<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29178686_63003486.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>LL</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>LL</name></type> <name>maxn</name><init>=<expr><literal type="number">1e6</literal><operator>+</operator><literal type="number">9</literal></expr></init></decl>,<decl><type ref="prev"/><name>mod</name><init>=<expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>LL</name></type> <name><name>dx</name><index>[]</index></name><init>=<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr></init></decl>,<decl><type ref="prev"/><name><name>dy</name><index>[]</index></name><init>=<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<function><specifier>inline</specifier> <type><name>LL</name></type> <name>Read</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>LL</name></type> <name>x</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>,<decl><type ref="prev"/><name>f</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt> <decl_stmt><decl><type><name>char</name></type> <name>c</name><init>=<expr><call><name>getchar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name><name>c</name><argument_list type="generic">&lt;<argument><expr><literal type="char">'0'</literal> <operator>||</operator> <name>c</name></expr></argument>&gt;</argument_list></name><literal type="char">'9'</literal></expr>)</condition><block>{
		<if>if<condition>(<expr><name>c</name><operator>==</operator><literal type="char">'-'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>f</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if> <expr_stmt><expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></while>
	<while>while<condition>(<expr><name>c</name><operator>&gt;=</operator><literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name><operator>&lt;=</operator><literal type="char">'9'</literal></expr>)</condition><block>{
		<expr_stmt><expr><name>x</name><operator>=</operator><operator>(</operator><name>x</name><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator><operator>+</operator><operator>(</operator><name>x</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><name>c</name><operator>-</operator><literal type="char">'0'</literal></expr>;</expr_stmt> <expr_stmt><expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></while><return>return <expr><name>x</name><operator>*</operator><name>f</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name>LL</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>ans</name></decl>,<decl><type ref="prev"/><name>nw</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LL</name></type> <name><name>sum</name><index>[<expr><literal type="number">100</literal></expr>]</index><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>a</name><index>[<expr><literal type="number">100</literal></expr>]</index><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>A</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<function><specifier>inline</specifier> <type><name>bool</name></type> <name>Check</name><parameter_list>(<parameter><decl><type><name>LL</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>LL</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{
	<return>return <expr><name>x</name><operator>&gt;=</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>x</name><operator>&lt;=</operator><name>n</name> <operator>&amp;&amp;</operator> <name>y</name><operator>&gt;=</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>y</name><operator>&lt;=</operator><name>m</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>Dfs</name><parameter_list>(<parameter><decl><type><name>LL</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>LL</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{
<comment type="line">//	printf("(%d,%d)\n",x,y);</comment>
	<if>if<condition>(<expr><name>y</name><operator>==</operator><name>m</name><operator>+</operator><literal type="number">1</literal></expr>)</condition><then><block>{
		<expr_stmt><expr><name>ans</name><operator>++</operator></expr>;</expr_stmt> <return>return;</return>
	}</block></then></if>
	<if>if<condition>(<expr><name>x</name><operator>==</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr>)</condition><then><block>{
		<expr_stmt><expr><call><name>Dfs</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>y</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return;</return>
	}</block></then></if>
<comment type="line">//	a[x][y]=0;</comment>
    <decl_stmt><decl><type><name>LL</name></type> <name>xx</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></decl>,<decl><type ref="prev"/><name>yy</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <block>{
    	<expr_stmt><expr><name><name>a</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>LL</name></type> <name>fl</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> <decl_stmt><decl><type><name>LL</name></type> <name>cnt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>LL</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">2</literal></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
        	<decl_stmt><decl><type><name>LL</name></type> <name>xx</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><name><name>dx</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></decl>,<decl><type ref="prev"/><name>yy</name><argument_list>(<argument><expr><name>y</name><operator>+</operator><name><name>dy</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></decl>;</decl_stmt>
        	<if>if<condition>(<expr><operator>!</operator><call><name>Check</name><argument_list>(<argument><expr><name>xx</name></expr></argument>,<argument><expr><name>yy</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
        	<if>if<condition>(<expr><operator>!</operator><name><name>a</name><index>[<expr><name>xx</name></expr>]</index><index>[<expr><name>yy</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><operator>++</operator><name>cnt</name></expr>;</expr_stmt></block></then></if>
        	<if>if<condition>(<expr><operator>!</operator><name><name>a</name><index>[<expr><name>xx</name></expr>]</index><index>[<expr><name>yy</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>sum</name><index>[<expr><name>xx</name></expr>]</index><index>[<expr><name>yy</name></expr>]</index></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>fl</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
		}</block></for>
		<if>if<condition>(<expr><name>cnt</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>fl</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
		<if>if<condition>(<expr><name>fl</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
			<for>for<control>(<init><decl><type><name>LL</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">2</literal></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
        	<decl_stmt><decl><type><name>LL</name></type> <name>xx</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><name><name>dx</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></decl>,<decl><type ref="prev"/><name>yy</name><argument_list>(<argument><expr><name>y</name><operator>+</operator><name><name>dy</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></decl>;</decl_stmt>
        	    <if>if<condition>(<expr><operator>!</operator><call><name>Check</name><argument_list>(<argument><expr><name>xx</name></expr></argument>,<argument><expr><name>yy</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
        	    <if>if<condition>(<expr><operator>!</operator><name><name>a</name><index>[<expr><name>xx</name></expr>]</index><index>[<expr><name>yy</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><operator>++</operator><name><name>sum</name><index>[<expr><name>xx</name></expr>]</index><index>[<expr><name>yy</name></expr>]</index></name></expr><operator>,</operator><expr><operator>++</operator><name><name>sum</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name></expr>;</expr_stmt></block></then></if>
		    }</block></for>
		    <expr_stmt><expr><call><name>Dfs</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <for>for<control>(<init><decl><type><name>LL</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">2</literal></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
        	<decl_stmt><decl><type><name>LL</name></type> <name>xx</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><name><name>dx</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></decl>,<decl><type ref="prev"/><name>yy</name><argument_list>(<argument><expr><name>y</name><operator>+</operator><name><name>dy</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></decl>;</decl_stmt>
        	    <if>if<condition>(<expr><operator>!</operator><call><name>Check</name><argument_list>(<argument><expr><name>xx</name></expr></argument>,<argument><expr><name>yy</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
        	    <if>if<condition>(<expr><operator>!</operator><name><name>a</name><index>[<expr><name>xx</name></expr>]</index><index>[<expr><name>yy</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>sum</name><index>[<expr><name>xx</name></expr>]</index><index>[<expr><name>yy</name></expr>]</index></name><operator>--</operator></expr><operator>,</operator><expr><operator>--</operator><name><name>sum</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name></expr>;</expr_stmt></block></then></if>
		    }</block></for>
		}</block></then></if>
	}</block>
	<block>{
    	<expr_stmt><expr><name><name>a</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
<comment type="line">//        xx=x-1; yy=y;</comment>
        <decl_stmt><decl><type><name>LL</name></type> <name>fl</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> <decl_stmt><decl><type><name>LL</name></type> <name>cnt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>LL</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">2</literal></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
        	<decl_stmt><decl><type><name>LL</name></type> <name>xx</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><name><name>dx</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></decl>,<decl><type ref="prev"/><name>yy</name><argument_list>(<argument><expr><name>y</name><operator>+</operator><name><name>dy</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></decl>;</decl_stmt>
        	<if>if<condition>(<expr><operator>!</operator><call><name>Check</name><argument_list>(<argument><expr><name>xx</name></expr></argument>,<argument><expr><name>yy</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
        	<if>if<condition>(<expr><name><name>a</name><index>[<expr><name>xx</name></expr>]</index><index>[<expr><name>yy</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><operator>++</operator><name>cnt</name></expr>;</expr_stmt></block></then></if>
        	<if>if<condition>(<expr><name><name>a</name><index>[<expr><name>xx</name></expr>]</index><index>[<expr><name>yy</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>sum</name><index>[<expr><name>xx</name></expr>]</index><index>[<expr><name>yy</name></expr>]</index></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>fl</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
		}</block></for>
		<if>if<condition>(<expr><name>cnt</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>fl</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
		<if>if<condition>(<expr><name>fl</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
			<for>for<control>(<init><decl><type><name>LL</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">2</literal></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
        	<decl_stmt><decl><type><name>LL</name></type> <name>xx</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><name><name>dx</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></decl>,<decl><type ref="prev"/><name>yy</name><argument_list>(<argument><expr><name>y</name><operator>+</operator><name><name>dy</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></decl>;</decl_stmt>
        	    <if>if<condition>(<expr><operator>!</operator><call><name>Check</name><argument_list>(<argument><expr><name>xx</name></expr></argument>,<argument><expr><name>yy</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
        	    <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>xx</name></expr>]</index><index>[<expr><name>yy</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><operator>++</operator><name><name>sum</name><index>[<expr><name>xx</name></expr>]</index><index>[<expr><name>yy</name></expr>]</index></name></expr><operator>,</operator><expr><operator>++</operator><name><name>sum</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name></expr>;</expr_stmt></block></then></if>
		    }</block></for>
		    <expr_stmt><expr><call><name>Dfs</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <for>for<control>(<init><decl><type><name>LL</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">2</literal></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
        	<decl_stmt><decl><type><name>LL</name></type> <name>xx</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><name><name>dx</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></decl>,<decl><type ref="prev"/><name>yy</name><argument_list>(<argument><expr><name>y</name><operator>+</operator><name><name>dy</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></decl>;</decl_stmt>
        	    <if>if<condition>(<expr><operator>!</operator><call><name>Check</name><argument_list>(<argument><expr><name>xx</name></expr></argument>,<argument><expr><name>yy</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
        	    <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>xx</name></expr>]</index><index>[<expr><name>yy</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>sum</name><index>[<expr><name>xx</name></expr>]</index><index>[<expr><name>yy</name></expr>]</index></name><operator>--</operator></expr><operator>,</operator><expr><operator>--</operator><name><name>sum</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name></expr>;</expr_stmt></block></then></if>
		    }</block></for>
		}</block></then></if>
	}</block>
}</block></function>
<function><specifier>inline</specifier> <type><name>bool</name></type> <name>CC</name><parameter_list>()</parameter_list><block>{
	<for>for<control>(<init><decl><type><name>LL</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
		<for>for<control>(<init><decl><type><name>LL</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>m</name></expr>;</condition><incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block>{
			<decl_stmt><decl><type><name>LL</name></type> <name>cnt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
			<for>for<control>(<init><decl><type><name>LL</name></type> <name>k</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>k</name><operator>&lt;=</operator><literal type="number">4</literal></expr>;</condition><incr><expr><operator>++</operator><name>k</name></expr></incr>)</control><block>{
				<decl_stmt><decl><type><name>LL</name></type> <name>x</name><argument_list>(<argument><expr><name>i</name><operator>+</operator><name><name>dx</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></decl>,<decl><type ref="prev"/><name>y</name><argument_list>(<argument><expr><name>j</name><operator>+</operator><name><name>dy</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></decl>;</decl_stmt>
				<if>if<condition>(<expr><name><name>a</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name><operator>==</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><operator>++</operator><name>cnt</name></expr>;</expr_stmt></block></then></if>
			}</block></for>
			<if>if<condition>(<expr><name>cnt</name><operator>&gt;=</operator><literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
		}</block></for>
	}</block></for>
	<return>return <expr><literal type="boolean">true</literal></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>Dfs2</name><parameter_list>(<parameter><decl><type><name>LL</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>LL</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{
	<if>if<condition>(<expr><name>y</name><operator>==</operator><name>m</name><operator>+</operator><literal type="number">1</literal></expr>)</condition><then><block>{
		<expr_stmt><expr><name>ans</name><operator>+=</operator><call><name>CC</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <return>return;</return>
	}</block></then></if>
	<if>if<condition>(<expr><name>x</name><operator>==</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr>)</condition><then><block>{
		<expr_stmt><expr><call><name>Dfs2</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>y</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return;</return>
	}</block></then></if>
	<expr_stmt><expr><name><name>a</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Dfs2</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>a</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Dfs2</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
<comment type="line">//	T=10000;</comment>
<comment type="line">//	while(true){</comment>
<comment type="line">//	memset(a,-1,sizeof(a));</comment>
	<expr_stmt><expr><name>n</name><operator>=</operator><call><name>Read</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>m</name><operator>=</operator><call><name>Read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ans</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	<if>if<condition>(<expr><name>n</name><operator>&lt;=</operator><literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>m</name><operator>&lt;=</operator><literal type="number">2</literal></expr>)</condition><then><block>{
		<expr_stmt><expr><call><name>Dfs</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">//		Dfs2(1,1);</comment>
	    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>,<argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></then></if>
	<if>if<condition>(<expr><name>n</name><operator>==</operator><literal type="number">1</literal> <operator>||</operator> <name>m</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
<comment type="line">//		Dfs(1,1);</comment>
        <if>if<condition>(<expr><name>n</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>swap</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name>ans</name><operator>=</operator><operator>(</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>LL</name></type> <name>P1</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>,<decl><type ref="prev"/><name>P2</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>LL</name></type> <name>i</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
<comment type="line">//        	printf("(%lld,%lld:%lld)\n",P1,P2,ans);</comment>
        	<expr_stmt><expr><operator>(</operator><name>ans</name><operator>+=</operator><name>P2</name><operator>)</operator><operator>%=</operator><name>mod</name></expr>;</expr_stmt> <decl_stmt><decl><type><name>LL</name></type> <name>K</name><argument_list>(<argument><expr><name>P1</name></expr></argument>)</argument_list></decl>;</decl_stmt> <expr_stmt><expr><name>P1</name><operator>=</operator><name>P2</name></expr>;</expr_stmt> <expr_stmt><expr><name>P2</name><operator>=</operator><operator>(</operator><name>K</name><operator>+</operator><name>P2</name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt>
		}</block></for>
<comment type="line">//		Dfs2(1,1);</comment>
	    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>,<argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></then></if>
<comment type="line">//	puts("233");</comment>
<comment type="line">//	return 0;</comment>

	<expr_stmt><expr><name><name>A</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>A</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>=</operator><literal type="number">4</literal></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>LL</name></type> <name>i</name><init>=<expr><literal type="number">4</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">100000</literal></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><operator>(</operator><name><name>A</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>A</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><name>nw</name><operator>=</operator><literal type="number">6</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>LL</name></type> <name>i</name><init>=<expr><literal type="number">3</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
    	<expr_stmt><expr><name>nw</name><operator>=</operator><operator>(</operator><name>nw</name><operator>+</operator><name><name>A</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt>
	}</block></for>
	<for>for<control>(<init><decl><type><name>LL</name></type> <name>i</name><init>=<expr><literal type="number">3</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>m</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>nw</name><operator>=</operator><operator>(</operator><name>nw</name><operator>+</operator><name><name>A</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>,<argument><expr><name>nw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">//    }</comment>
}</block></function></unit>
