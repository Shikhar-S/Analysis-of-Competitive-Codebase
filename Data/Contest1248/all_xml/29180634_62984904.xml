<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29180634_62984904.cpp">                <comment type="line">// never give up :))))</comment>
                <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f1</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f2</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;int ,int&gt;</cpp:value></cpp:define>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ios</name></cpp:macro>  <cpp:value>ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);</cpp:value></cpp:define>
                <using>using <namespace>namespace <name>std</name>;</namespace></using>
                <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mox</name><init>=<expr><literal type="number">1e5</literal><operator>+</operator><literal type="number">9</literal></expr></init></decl>;</decl_stmt>
                <function><name>main</name><parameter_list>()</parameter_list>
                <block>{
                  <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
                  <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
                  <for>for<control>(<init><decl><type><name>int</name></type> <name>ii</name><init>=<expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>ii</name><operator>&lt;</operator><name>t</name></expr> ;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
                  <block>{
                      <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
                      <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
                      <decl_stmt><decl><type><name>int</name></type> <name>x</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>y</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                      <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
                      <block>{
                          <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>;</decl_stmt>
                          <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>a</name></expr>;</expr_stmt>
                          <if>if<condition>(<expr><name>a</name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
                            <block type="pseudo"><expr_stmt><expr><name>x</name><operator>+=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then>
                          <else>else
                            <block type="pseudo"><expr_stmt><expr><name>y</name><operator>+=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
                      }</block></for>
                         <decl_stmt><decl><type><name>int</name></type> <name>x1</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>y1</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                         <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>m</name></expr>;</expr_stmt>
                      <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>m</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
                      <block>{
                          <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>;</decl_stmt>
                          <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>a</name></expr>;</expr_stmt>
                          <if>if<condition>(<expr><name>a</name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
                            <block type="pseudo"><expr_stmt><expr><name>x1</name><operator>+=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then>
                          <else>else
                            <block type="pseudo"><expr_stmt><expr><name>y1</name><operator>+=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
                      }</block></for>
                      <decl_stmt><decl><type><name>int</name></type> <name>ans</name><init>=<expr><operator>(</operator><name>x</name><operator>*</operator><name>x1</name><operator>)</operator><operator>+</operator><operator>(</operator><name>y1</name><operator>*</operator><name>y</name><operator>)</operator></expr></init></decl>;</decl_stmt>
                      <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt>

                  }</block></for>
                }</block></function>
</unit>
