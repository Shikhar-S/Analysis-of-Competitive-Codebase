<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29171422_62991802.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define> 
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>int</name></type> <name><name>dir</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>A</name><index>[<expr><literal type="number">1010</literal></expr>]</index><index>[<expr><literal type="number">1010</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>fib</name><index>[<expr><literal type="number">1000010</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>fib2</name><index>[<expr><literal type="number">1000100</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>brute</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>m</name></decl></parameter>)</parameter_list><block>{
	<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>=  <expr><name>n</name> <operator>*</operator> <name>m</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>mk</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>mk</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>x</name><operator>)</operator></expr>;</condition> <incr><expr><name>mk</name><operator>++</operator></expr></incr>)</control><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>ctr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
			<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
				<if>if<condition>(<expr><name>mk</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>ctr</name><operator>)</operator></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><name><name>A</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then>
				<else>else <block type="pseudo"><expr_stmt><expr><name><name>A</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></else></if>
				<expr_stmt><expr><name>ctr</name><operator>++</operator></expr>;</expr_stmt>
			}</block></for>
		}</block></for>
		<decl_stmt><decl><type><name>int</name></type> <name>mkr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
			<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
				<decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
				<for>for<control>(<init><decl><type><name>int</name></type> <name>k</name> <init>=<expr><literal type="number">0</literal></expr></init></decl> ;</init><condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block>{
					<decl_stmt><decl><type><name>int</name></type> <name>p</name> <init>= <expr><name>i</name> <operator>+</operator> <name><name>dir</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>int</name></type> <name>q</name> <init>= <expr><name>j</name> <operator>+</operator> <name><name>dir</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
					<if>if<condition>(<expr><name>p</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>p</name> <operator>&lt;</operator> <name>n</name> <operator>&amp;&amp;</operator> <name>q</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>q</name> <operator>&lt;</operator> <name>m</name> <operator>&amp;&amp;</operator> <name><name>A</name><index>[<expr><name>p</name></expr>]</index><index>[<expr><name>q</name></expr>]</index></name> <operator>==</operator> <name><name>A</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then>
						<block type="pseudo"><expr_stmt><expr><name>ans</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
				}</block></for>
				<if>if<condition>(<expr><name>ans</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><name>mkr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
			}</block></for>
		}</block></for>
		<if>if<condition>(<expr><operator>!</operator><name>mkr</name></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>ans</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
	}</block></for>
	<comment type="line">//cout &lt;&lt; ans &lt;&lt; '\n';</comment>
	<return>return <expr><name>ans</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name></expr>;</expr_stmt>
	<comment type="line">//cout &lt;&lt; brute(n, m) &lt;&lt; '\n';</comment>
	<expr_stmt><expr><name><name>fib</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fib</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">100010</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><name><name>fib</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>fib</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>fib</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>%</operator> <name>MOD</name></expr>;</expr_stmt>
	}</block></for>
	<if>if<condition>(<expr><name>m</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then><block>{
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>fib</name><index>[<expr><name>n</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
	}</block></then>
	<elseif>else <if>if<condition>(<expr><name>m</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then><block>{
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>fib</name><index>[<expr><name>n</name></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>%</operator> <name>MOD</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
	}</block></then></if></elseif>
	<elseif>else <if>if<condition>(<expr><name>m</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><then><block>{
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>fib</name><index>[<expr><name>n</name></expr>]</index></name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>%</operator> <name>MOD</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
	}</block></then></if></elseif>
	<else>else<block>{
		<expr_stmt><expr><name>m</name><operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fib2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fib2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>m</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
			<expr_stmt><expr><name><name>fib2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>fib2</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>fib2</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>%</operator> <name>MOD</name></expr>;</expr_stmt>
		}</block></for>
		
		<comment type="line">//cout &lt;&lt; fib2[m] &lt;&lt; '\n';</comment>
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>fib</name><index>[<expr><name>n</name></expr>]</index></name> <operator>+</operator> <name><name>fib2</name><index>[<expr><name>m</name></expr>]</index></name><operator>)</operator> <operator>%</operator> <name>MOD</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
	}</block></else></if>


}</block></function></unit>
