<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29172558_63003897.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>,<decl><type ref="prev"/><name>r</name></decl>,<decl><type ref="prev"/><name><name>a</name><index>[<expr><literal type="number">400000</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name>kq</name></decl>,<decl><type ref="prev"/><name>cd</name></decl>,<decl><type ref="prev"/><name><name>mn</name><index>[<expr><literal type="number">400000</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>check</name><parameter_list>()</parameter_list>
<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> , <decl><type ref="prev"/><name>got</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> , <decl><type ref="prev"/><name>s</name><init>=  <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>cd</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{
				<expr_stmt><expr><name><name>mn</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1e9</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>s</name> <operator>+=</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
				<if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
				<block>{
						<expr_stmt><expr><name><name>mn</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
				}</block></then>
				<else>else
				<block>{
						<expr_stmt><expr><name><name>mn</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>s</name></expr></argument> , <argument><expr><name><name>mn</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
		}</block></for>
		<decl_stmt><decl><type><name>int</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>cd</name></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr> ;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
		<block>{
				<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
				<if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>cd</name></expr>)</condition><then>
				<block>{
						<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>a</name><index>[<expr><name>cd</name></expr>]</index></name></expr>;</expr_stmt>
				}</block></then>
				<else>else
				<block>{
						<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>t</name> <operator>+</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> , <argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
				<if>if <condition>(<expr><name>t</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
				<if>if <condition>(<expr><name>sum</name> <operator>+</operator> <name><name>mn</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><then>
				<block>{
						<expr_stmt><expr><name>got</name><operator>++</operator></expr>;</expr_stmt>
				}</block></then></if>
		}</block></for>
		<if>if <condition>(<expr><name>sum</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then>
		<block>{
				<return>return <expr><literal type="number">0</literal></expr>;</return>
		}</block></then></if>
		<return>return <expr><name>got</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>cd</name></expr>;</expr_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>cd</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{
				<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
				<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>c</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
				<if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition><then>
				<block>{
						<expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				}</block></then></if>
		}</block></for>
		<expr_stmt><expr><name>kq</name> <operator>=</operator> <call><name>check</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>l</name> <operator>=</operator> <literal type="number">1</literal></expr> <operator>,</operator> <expr><name>r</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>cd</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{
				<for>for <control>(<init><decl><type><name>int</name></type> <name>e</name> <init>= <expr><name>i</name></expr></init></decl> ;</init> <condition><expr><name>e</name> <operator>&lt;=</operator> <name>cd</name></expr> ;</condition> <incr><expr><name>e</name><operator>++</operator></expr></incr>)</control>
				<block>{		
						<comment type="block">/*swap(a[i] , a[i]);
						int have = check();
						if (have &gt;= kq)
						{
								kq = have;
								l = i;
								r = i;
						}*/</comment>

						<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> , <argument><expr><name><name>a</name><index>[<expr><name>e</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name>int</name></type> <name>have</name> <init>= <expr><call><name>check</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
						<if>if <condition>(<expr><name>have</name> <operator>&gt;=</operator> <name>kq</name></expr>)</condition><then>
						<block>{
								<expr_stmt><expr><name>kq</name> <operator>=</operator> <name>have</name></expr>;</expr_stmt>
								<expr_stmt><expr><name>l</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
								<expr_stmt><expr><name>r</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
						}</block></then></if>
						<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> , <argument><expr><name><name>a</name><index>[<expr><name>e</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></for>
		}</block></for>
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>kq</name><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator><name>l</name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name>r</name></expr>;</expr_stmt>
}</block></function>
</unit>
