<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29153017_63000710.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=a;i&lt;=b;++i)</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>_</name><init>=<expr><literal type="number">520</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>res</name></decl>,<decl><type ref="prev"/><name>ans</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name><name>id</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>S</name><index>[<expr><name>_</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>tmp</name><index>[<expr><name>_</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%s"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><name>S</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    <macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro> <macro><name>FOR</name><argument_list>(<argument>j</argument>,<argument>i</argument>,<argument>n</argument>)</argument_list></macro> <block>{
        <macro><name>FOR</name><argument_list>(<argument>t</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro> <expr_stmt><expr><name><name>tmp</name><index>[<expr><name>t</name></expr>]</index></name> <operator>=</operator> <name><name>S</name><index>[<expr><name>t</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>tmp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>tmp</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>poi</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>lim</name><init>=<expr><name>n</name></expr></init></decl>,<decl><type ref="prev"/><name>top</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>FOR</name><argument_list>(<argument><expr><name>nb</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while<condition>(<expr><name>poi</name><operator>&lt;=</operator><name>lim</name></expr>)</condition><block>{
            <if>if<condition>(<expr><name><name>tmp</name><index>[<expr><name>poi</name></expr>]</index></name> <operator>==</operator> <literal type="char">')'</literal></expr>)</condition><then><block>{
                <if>if<condition>(<expr><name>top</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><operator>--</operator><name>top</name></expr>;</expr_stmt></block></then>
                <else>else <block>{
                    <expr_stmt><expr><operator>--</operator><name>top</name></expr><operator>,</operator><expr><name>res</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
                    <while>while<condition>(<expr><name>poi</name><operator>&lt;=</operator><name>lim</name><operator>&amp;&amp;</operator><name>top</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><block>{
                        <if>if<condition>(<expr><name><name>tmp</name><index>[<expr><name>lim</name></expr>]</index></name><operator>==</operator><literal type="char">')'</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><operator>--</operator><name>top</name></expr>;</expr_stmt></block></then>
                        <else>else <block type="pseudo"><expr_stmt><expr><operator>++</operator><name>top</name></expr>;</expr_stmt></block></else></if>
                        <expr_stmt><expr><operator>--</operator><name>lim</name></expr>;</expr_stmt>
                    }</block></while>
                }</block></else></if>
            }</block></then> <else>else <block type="pseudo"><expr_stmt><expr><operator>++</operator><name>top</name></expr>;</expr_stmt></block></else></if>
            <expr_stmt><expr><operator>++</operator><name>poi</name></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>top</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><operator>++</operator><name>res</name></expr>;</expr_stmt></block></then></if>
        }</block></while>
        <if>if<condition>(<expr><name>top</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>res</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
        <if>if<condition>(<expr><name>res</name><operator>&gt;</operator><name>ans</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>id</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name>i</name></expr><operator>,</operator><expr><name><name>id</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name>j</name></expr><operator>,</operator><expr><name>ans</name><operator>=</operator><name>res</name></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name>res</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
    }</block>
     <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n%d %d\n"</literal></expr></argument>,<argument><expr><name>ans</name></expr></argument>,<argument><expr><name><name>id</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>id</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
