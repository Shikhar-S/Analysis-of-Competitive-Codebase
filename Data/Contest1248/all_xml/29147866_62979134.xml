<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29147866_62979134.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>"bits/stdc++.h"</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<comment type="block">/*
#pragma GCC target ("avx2")
#pragma GCC optimization ("O3")
#pragma GCC optimization ("unroll-loops")
*/</comment>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
  <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>tc</name></decl>,<decl><type ref="prev"/><name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>p</name></decl>,<decl><type ref="prev"/><name>q</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>oddn</name></decl>,<decl><type ref="prev"/><name>evenn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>oddm</name></decl>,<decl><type ref="prev"/><name>evenm</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>tc</name></expr>;</expr_stmt>
  <while>while<condition>(<expr><name>tc</name><operator>--</operator></expr>)</condition><block>{
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>oddn</name><operator>=</operator><name>oddm</name><operator>=</operator><name>evenn</name><operator>=</operator><name>evenm</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>x</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>x</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block>{
      <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>p</name></expr>;</expr_stmt>
      <if>if<condition>(<expr><operator>(</operator><name>p</name><operator>%</operator><literal type="number">2</literal><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
        <expr_stmt><expr><name>evenn</name><operator>++</operator></expr>;</expr_stmt>
      }</block></then><else>else <block type="pseudo"><expr_stmt><expr><name>oddn</name><operator>++</operator></expr>;</expr_stmt></block></else></if>
    }</block></for>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>m</name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>x</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>x</name><operator>&lt;</operator><name>m</name></expr>;</condition><incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block>{
      <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>q</name></expr>;</expr_stmt>
      <if>if<condition>(<expr><operator>(</operator><name>q</name><operator>%</operator><literal type="number">2</literal><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
        <expr_stmt><expr><name>evenm</name><operator>++</operator></expr>;</expr_stmt>
      }</block></then><else>else <block type="pseudo"><expr_stmt><expr><name>oddm</name><operator>++</operator></expr>;</expr_stmt></block></else></if>
    }</block></for>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>(</operator><name>oddn</name><operator>*</operator><name>oddm</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>evenn</name><operator>*</operator><name>evenm</name><operator>)</operator><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt>
  }</block></while>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
