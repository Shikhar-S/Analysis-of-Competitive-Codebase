<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29146353_62991077.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x.begin(), x.end()</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name> ;</typedef> 
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name> ;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument> , <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>pll</name> ;</typedef>

<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>N</name> <init>= <expr><literal type="number">2e5</literal> <operator>+</operator> <literal type="number">30</literal></expr></init></decl> , <decl><type ref="prev"/><name>Mod</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>SQ</name> <init>= <expr><literal type="number">330</literal></expr></init></decl> ;</decl_stmt>

<decl_stmt><decl><type><name>ll</name></type> <name><name>f</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>N</name></expr>]</index></name></decl> ;</decl_stmt>
<function><type><name>ll</name></type> <name>sum</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter> , <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
	<return>return <expr><operator>(</operator><name>a</name> <operator>+</operator> <name>b</name><operator>)</operator> <operator>%</operator> <name>Mod</name></expr> ;</return>
}</block></function>
<function><type><name>ll</name></type> <name>sub</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter> , <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
	<return>return <expr><operator>(</operator><name>a</name> <operator>-</operator> <name>b</name> <operator>+</operator> <name>Mod</name><operator>)</operator> <operator>%</operator> <name>Mod</name></expr> ;</return>
}</block></function>
<comment type="line">// 0 white </comment>
<decl_stmt><decl><type><name>ll</name></type> <name><name>dp</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>N</name></expr>]</index></name></decl> ;</decl_stmt>
<comment type="line">// 0 good </comment>
<function><type><name>int</name></type> <name>main</name> <parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr> ;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</init>  <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr> ;</condition><incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{
    	<expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>sum</name><argument_list>(<argument><expr><name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument> , <argument><expr><name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    	<expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>sum</name><argument_list>(<argument><expr><name><name>f</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument> , <argument><expr><name><name>f</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
	}</block></for>
	<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl> ,<decl><type ref="prev"/><name>m</name></decl> ;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name></expr> ;</expr_stmt>
	<if>if <condition>(<expr><name>m</name> <operator>&lt;</operator> <name>n</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>n</name></expr></argument> , <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block></then></if>
	<decl_stmt><decl><type><name>ll</name></type> <name>k</name> <init>= <expr><call><name>sum</name><argument_list>(<argument><expr><name><name>f</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>m</name></expr>]</index></name></expr></argument> , <argument><expr><name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>m</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>bad</name> <init>= <expr><call><name>sub</name><argument_list>(<argument><expr><name>k</name></expr></argument> , <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>good</name> <init>= <expr><literal type="number">2</literal></expr></init></decl> ;</decl_stmt>
	<expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr> ;</expr_stmt>
	<expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>bad</name></expr> ;</expr_stmt>
	<comment type="line">//cout &lt;&lt; bad &lt;&lt; endl;</comment>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr> ;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{
		<expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <literal type="number">2</literal> <operator>)</operator> <operator>%</operator> <name>Mod</name></expr> ;</expr_stmt>
		<expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>dp</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr> ;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>sum</name><argument_list>(<argument><expr><call><name>sum</name><argument_list>(<argument><expr><name><name>f</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>n</name></expr> ]</index></name></expr></argument> , <argument><expr><name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument> , <argument><expr><name><name>dp</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr> ;</return>
}</block></function>
</unit>
