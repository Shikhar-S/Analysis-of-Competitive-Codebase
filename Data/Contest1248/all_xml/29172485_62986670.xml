<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29172485_62986670.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REP</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = 0;i &lt; (int)(n);i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RREP</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = (int)n-1;i &gt;= 0;i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>s</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = s;i &lt; (int)n;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RFOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>s</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = (int)n-1;i &gt;= s;i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALL</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a.begin(),a.end()</cpp:value></cpp:define>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template><specifier>inline</specifier> <type><name>bool</name></type> <name>CHMAX</name><parameter_list>(<parameter><decl><type><name>T</name><modifier>&amp;</modifier></type><name>a</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<if>if<condition>(<expr><name>a</name><operator>&lt;</operator><name>b</name></expr>)</condition><then><block>{<expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt><return>return <expr><literal type="boolean">true</literal></expr>;</return>}</block></then></if><return>return <expr><literal type="boolean">false</literal></expr>;</return>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template><specifier>inline</specifier> <type><name>bool</name></type> <name>CHMIN</name><parameter_list>(<parameter><decl><type><name>T</name><modifier>&amp;</modifier></type><name>a</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<if>if<condition>(<expr><name>a</name><operator>&gt;</operator><name>b</name></expr>)</condition><then><block>{<expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt><return>return <expr><literal type="boolean">true</literal></expr>;</return>}</block></then></if><return>return <expr><literal type="boolean">false</literal></expr>;</return>}</block></function>
<decl_stmt><decl><specifier>constexpr</specifier> <type><name>long</name> <name>long</name></type> <name>INF</name> <init>= <expr><literal type="number">1e18</literal></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>'\n'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOS</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>ios_base::sync_with_stdio(0);cin.tie(0)</cpp:value></cpp:define>

<decl_stmt><decl><specifier>constexpr</specifier> <type><name>long</name> <name>long</name></type> <name>MOD</name> <init>= <expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>
<comment type="line">//constexpr long long MOD = 998244353;</comment>
<struct><template>template<parameter_list>&lt;<parameter><type><name>int</name></type> <name>MOD</name></parameter>&gt;</parameter_list></template> struct <name>Fp</name> <block>{<public type="default">
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>val</name></decl>;</decl_stmt>
	<constructor><specifier>constexpr</specifier> <name>Fp</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list> <noexcept>noexcept</noexcept></constructor> : <macro><name>val</name><argument_list>(<argument>v % MOD</argument>)</argument_list></macro> <block>{
		<if>if <condition>(<expr><name>val</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>v</name> <operator>+=</operator> <name>MOD</name></expr>;</expr_stmt></block></then></if>
	}</block>
	<function><specifier>constexpr</specifier> <type><name>int</name></type> <name>getmod</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><name>MOD</name></expr>;</return> }</block></function>
	<function type="operator"><specifier>constexpr</specifier> <type><name>Fp</name></type> <name>operator <name>-</name></name> <parameter_list>()</parameter_list> <specifier>const</specifier> <noexcept>noexcept</noexcept> <block>{
		<return>return <expr><ternary><condition><expr><name>val</name></expr> ?</condition><then> <expr><name>MOD</name> <operator>-</operator> <name>val</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
	}</block></function>
	<function type="operator"><specifier>constexpr</specifier> <type><name>Fp</name></type> <name>operator <name>+</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Fp</name><modifier>&amp;</modifier></type> <name>r</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <noexcept>noexcept</noexcept> <block>{ <return>return <expr><call><name>Fp</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call> <operator>+=</operator> <name>r</name></expr>;</return> }</block></function>
	<function type="operator"><specifier>constexpr</specifier> <type><name>Fp</name></type> <name>operator <name>-</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Fp</name><modifier>&amp;</modifier></type> <name>r</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <noexcept>noexcept</noexcept> <block>{ <return>return <expr><call><name>Fp</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call> <operator>-=</operator> <name>r</name></expr>;</return> }</block></function>
	<function type="operator"><specifier>constexpr</specifier> <type><name>Fp</name></type> <name>operator <name>*</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Fp</name><modifier>&amp;</modifier></type> <name>r</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <noexcept>noexcept</noexcept> <block>{ <return>return <expr><call><name>Fp</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call> <operator>*=</operator> <name>r</name></expr>;</return> }</block></function>
	<function type="operator"><specifier>constexpr</specifier> <type><name>Fp</name></type> <name>operator <name>/</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Fp</name><modifier>&amp;</modifier></type> <name>r</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <noexcept>noexcept</noexcept> <block>{ <return>return <expr><call><name>Fp</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call> <operator>/=</operator> <name>r</name></expr>;</return> }</block></function>
	<function type="operator"><specifier>constexpr</specifier> <type><name>Fp</name><modifier>&amp;</modifier></type> <name>operator <name>+=</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Fp</name><modifier>&amp;</modifier></type> <name>r</name></decl></parameter>)</parameter_list> <noexcept>noexcept</noexcept> <block>{
		<expr_stmt><expr><name>val</name> <operator>+=</operator> <name><name>r</name><operator>.</operator><name>val</name></name></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>val</name> <operator>&gt;=</operator> <name>MOD</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>val</name> <operator>-=</operator> <name>MOD</name></expr>;</expr_stmt></block></then></if>
		<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
	}</block></function>
	<function type="operator"><specifier>constexpr</specifier> <type><name>Fp</name><modifier>&amp;</modifier></type> <name>operator <name>-=</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Fp</name><modifier>&amp;</modifier></type> <name>r</name></decl></parameter>)</parameter_list> <noexcept>noexcept</noexcept> <block>{
		<expr_stmt><expr><name>val</name> <operator>-=</operator> <name><name>r</name><operator>.</operator><name>val</name></name></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>val</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>val</name> <operator>+=</operator> <name>MOD</name></expr>;</expr_stmt></block></then></if>
		<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
	}</block></function>
	<function type="operator"><specifier>constexpr</specifier> <type><name>Fp</name><modifier>&amp;</modifier></type> <name>operator <name>*=</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Fp</name><modifier>&amp;</modifier></type> <name>r</name></decl></parameter>)</parameter_list> <noexcept>noexcept</noexcept> <block>{
		<expr_stmt><expr><name>val</name> <operator>=</operator> <name>val</name> <operator>*</operator> <name><name>r</name><operator>.</operator><name>val</name></name> <operator>%</operator> <name>MOD</name></expr>;</expr_stmt>
		<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
	}</block></function>
	<function type="operator"><specifier>constexpr</specifier> <type><name>Fp</name><modifier>&amp;</modifier></type> <name>operator <name>/=</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Fp</name><modifier>&amp;</modifier></type> <name>r</name></decl></parameter>)</parameter_list> <noexcept>noexcept</noexcept> <block>{
		<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>a</name> <init>= <expr><name><name>r</name><operator>.</operator><name>val</name></name></expr></init></decl>, <decl><type ref="prev"/><name>b</name> <init>= <expr><name>MOD</name></expr></init></decl>, <decl><type ref="prev"/><name>u</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<while>while <condition>(<expr><name>b</name></expr>)</condition> <block>{
			<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>t</name> <init>= <expr><name>a</name> <operator>/</operator> <name>b</name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>a</name> <operator>-=</operator> <name>t</name> <operator>*</operator> <name>b</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>u</name> <operator>-=</operator> <name>t</name> <operator>*</operator> <name>v</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></while>
		<expr_stmt><expr><name>val</name> <operator>=</operator> <name>val</name> <operator>*</operator> <name>u</name> <operator>%</operator> <name>MOD</name></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>val</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>val</name> <operator>+=</operator> <name>MOD</name></expr>;</expr_stmt></block></then></if>
		<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
	}</block></function>
	<function type="operator"><specifier>constexpr</specifier> <type><name>bool</name></type> <name>operator <name>==</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Fp</name><modifier>&amp;</modifier></type> <name>r</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <noexcept>noexcept</noexcept> <block>{
		<return>return <expr><name><name>this</name><operator>-&gt;</operator><name>val</name></name> <operator>==</operator> <name><name>r</name><operator>.</operator><name>val</name></name></expr>;</return>
	}</block></function>
	<function type="operator"><specifier>constexpr</specifier> <type><name>bool</name></type> <name>operator <name>!=</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Fp</name><modifier>&amp;</modifier></type> <name>r</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <noexcept>noexcept</noexcept> <block>{
		<return>return <expr><name><name>this</name><operator>-&gt;</operator><name>val</name></name> <operator>!=</operator> <name><name>r</name><operator>.</operator><name>val</name></name></expr>;</return>
	}</block></function>
	<friend>friend <function type="operator"><specifier>constexpr</specifier> <type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator <name>&lt;&lt;</name></name> <parameter_list>(<parameter><decl><type><name>ostream</name> <modifier>&amp;</modifier></type><name>os</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>Fp</name><argument_list type="generic">&lt;<argument><expr><name>MOD</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>x</name></decl></parameter>)</parameter_list> <noexcept>noexcept</noexcept> <block>{
		<return>return <expr><name>os</name> <operator>&lt;&lt;</operator> <name><name>x</name><operator>.</operator><name>val</name></name></expr>;</return>
	}</block></function></friend>
	<friend>friend <function type="operator"><specifier>constexpr</specifier> <type><name>istream</name><modifier>&amp;</modifier></type> <name>operator <name>&gt;&gt;</name></name> <parameter_list>(<parameter><decl><type><name>istream</name> <modifier>&amp;</modifier></type><name>is</name></decl></parameter>, <parameter><decl><type><name><name>Fp</name><argument_list type="generic">&lt;<argument><expr><name>MOD</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>x</name></decl></parameter>)</parameter_list> <noexcept>noexcept</noexcept> <block>{
		<return>return <expr><name>is</name> <operator>&gt;&gt;</operator> <name><name>x</name><operator>.</operator><name>val</name></name></expr>;</return>
	}</block></function></friend>
	<friend>friend <function><specifier>constexpr</specifier> <type><name><name>Fp</name><argument_list type="generic">&lt;<argument><expr><name>MOD</name></expr></argument>&gt;</argument_list></name></type> <name>modpow</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>Fp</name><argument_list type="generic">&lt;<argument><expr><name>MOD</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl></parameter>)</parameter_list> <noexcept>noexcept</noexcept> <block>{
		<if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
		<decl_stmt><decl><type><name>auto</name></type> <name>t</name> <init>= <expr><call><name>modpow</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>n</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<name>t</name> <expr_stmt><expr><operator>=</operator> <name>t</name> <operator>*</operator> <name>t</name></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>n</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><name>t</name> <expr_stmt><expr><operator>=</operator> <name>t</name> <operator>*</operator> <name>a</name></expr>;</expr_stmt></block></then></if>
		<return>return <expr><name>t</name></expr>;</return>
	}</block></function></friend>
</public>}</block>;</struct>
<comment type="line">// äºé ä¿æ°ã©ã¤ãã©ãª</comment>
<struct><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> struct <name>BiCoef</name> <block>{<public type="default">
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>fact_</name></decl>, <decl><type ref="prev"/><name>inv_</name></decl>, <decl><type ref="prev"/><name>finv_</name></decl>;</decl_stmt>
	<constructor><specifier>constexpr</specifier> <name>BiCoef</name><parameter_list>()</parameter_list> <block>{}</block></constructor>
	<constructor><specifier>constexpr</specifier> <name>BiCoef</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <noexcept>noexcept</noexcept></constructor> : <macro><name>fact_</name><argument_list>(<argument>n</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro><operator>,</operator> <macro><name>inv_</name><argument_list>(<argument>n</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro><operator>,</operator> <macro><name>finv_</name><argument_list>(<argument>n</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro> <block>{
		<expr_stmt><expr><call><name>init</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block>
	<function><specifier>constexpr</specifier> <type><name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <noexcept>noexcept</noexcept> <block>{
		<expr_stmt><expr><call><name><name>fact_</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name><name>inv_</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name><name>finv_</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>MOD</name> <init>= <expr><name><name>fact_</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>getmod</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
			<expr_stmt><expr><name><name>fact_</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>fact_</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>i</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>inv_</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><name><name>inv_</name><index>[<expr><name>MOD</name><operator>%</operator><name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>MOD</name><operator>/</operator><name>i</name><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>finv_</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>finv_</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>inv_</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		}</block></for>
	}</block></function>
	<function><specifier>constexpr</specifier> <type><name>T</name></type> <name>com</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <noexcept>noexcept</noexcept> <block>{
		<if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <name>k</name> <operator>||</operator> <name>n</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>k</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
		<return>return <expr><name><name>fact_</name><index>[<expr><name>n</name></expr>]</index></name> <operator>*</operator> <name><name>finv_</name><index>[<expr><name>k</name></expr>]</index></name> <operator>*</operator> <name><name>finv_</name><index>[<expr><name>n</name><operator>-</operator><name>k</name></expr>]</index></name></expr>;</return>
	}</block></function>
	<function><specifier>constexpr</specifier> <type><name>T</name></type> <name>fact</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <noexcept>noexcept</noexcept> <block>{
		<if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
		<return>return <expr><name><name>fact_</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</return>
	}</block></function>
	<function><specifier>constexpr</specifier> <type><name>T</name></type> <name>inv</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <noexcept>noexcept</noexcept> <block>{
		<if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
		<return>return <expr><name><name>inv_</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</return>
	}</block></function>
	<function><specifier>constexpr</specifier> <type><name>T</name></type> <name>finv</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <noexcept>noexcept</noexcept> <block>{
		<if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
		<return>return <expr><name><name>finv_</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</return>
	}</block></function>
</public>}</block>;</struct>
<using>using <name>mint</name> <init>= <type><name><name>Fp</name><argument_list type="generic">&lt;<argument><expr><name>MOD</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<decl_stmt><decl><type><name><name>BiCoef</name><argument_list type="generic">&lt;<argument><expr><name>mint</name></expr></argument>&gt;</argument_list></name></type> <name>bc</name></decl>;</decl_stmt><comment type="line">//bc.init(500050)</comment>

<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name>IOS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>bc</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><literal type="number">500050</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>N</name></decl>,<decl><type ref="prev"/><name>M</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>N</name><operator>&gt;&gt;</operator><name>M</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>mint</name></type> <name>ans</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>N/<literal type="number">2</literal>+<literal type="number">1</literal></argument>)</argument_list></macro><block>{ <comment type="line">//ç¸¦ç½®ã</comment>
		<decl_stmt><decl><type><name>int</name></type> <name>two</name><init>=<expr><name>i</name></expr></init></decl>,<decl><type ref="prev"/><name>one</name><init>=<expr><name>N</name><operator>-</operator><name>i</name><operator>*</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>ans</name><operator>+=</operator><call><name><name>bc</name><operator>.</operator><name>com</name></name><argument_list>(<argument><expr><name>two</name><operator>+</operator><name>one</name></expr></argument>,<argument><expr><name>two</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block>
	<macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>M/<literal type="number">2</literal>+<literal type="number">1</literal></argument>)</argument_list></macro><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>two</name><init>=<expr><name>i</name></expr></init></decl>,<decl><type ref="prev"/><name>one</name><init>=<expr><name>M</name><operator>-</operator><name>i</name><operator>*</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>ans</name><operator>+=</operator><call><name><name>bc</name><operator>.</operator><name>com</name></name><argument_list>(<argument><expr><name>two</name><operator>+</operator><name>one</name></expr></argument>,<argument><expr><name>two</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>*</operator><literal type="number">2</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
}</block></function></unit>
