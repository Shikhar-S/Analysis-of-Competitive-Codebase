<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29141938_63007696.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdlib&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAXN</name> <init>= <expr><literal type="number">1000005</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
<struct>struct <name>Node</name>
<block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>u</name></decl>,<decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
</public>}</block><decl><modifier>*</modifier><name><name>h</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>pool</name><index>[<expr><name>MAXN</name><operator>&lt;&lt;</operator><literal type="number">1</literal></expr>]</index></name></decl>;</struct>
<decl_stmt><decl><type><name>int</name></type> <name>tot</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>addEdge</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>pool</name><index>[<expr><operator>++</operator><name>tot</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>v</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>h</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>h</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
}</block></function>
<decl_stmt><decl><type><name>int</name></type> <name><name>dfn</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>low</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>scc</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>size</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>stack</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name>top</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name><name>vis</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><name><name>stack</name><index>[<expr><operator>++</operator><name>top</name></expr>]</index></name> <operator>=</operator> <name>u</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>vis</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dfn</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <name><name>low</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <operator>++</operator><name>cnt</name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>Node</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>h</name><index>[<expr><name>u</name></expr>]</index></name></expr></init></decl>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>=</operator><name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
    <block>{
        <if>if<condition>(<expr><operator>!</operator><name><name>dfn</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>v</name></name></expr>]</index></name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>v</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>low</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>low</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>low</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>v</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<elseif>else <if>if<condition>(<expr><name><name>vis</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>v</name></name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>low</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>low</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>dfn</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>v</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif></if>
	}</block></for>
	<if>if<condition>(<expr><name><name>low</name><index>[<expr><name>u</name></expr>]</index></name><operator>==</operator><name><name>dfn</name><index>[<expr><name>u</name></expr>]</index></name></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><name><name>size</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition>
        <block>{
            <expr_stmt><expr><name><name>scc</name><index>[<expr><name><name>stack</name><index>[<expr><name>top</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>u</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>size</name><index>[<expr><name>u</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>vis</name><index>[<expr><name><name>stack</name><index>[<expr><name>top</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
            <if>if<condition>(<expr><name><name>stack</name><index>[<expr><name>top</name><operator>--</operator></expr>]</index></name><operator>==</operator><name>u</name></expr>)</condition><then>
			    <block type="pseudo"><break>break;</break></block></then></if>
			<expr_stmt><expr><name><name>size</name><index>[<expr><name><name>stack</name><index>[<expr><name>top</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		}</block></while>
    }</block></then></if>
}</block></function>
<decl_stmt><decl><type><name>int</name></type> <name><name>du</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>init</name><parameter_list>()</parameter_list>
<block>{
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
	    <expr_stmt><expr><name><name>h</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>vis</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dfn</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>low</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>size</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name><name>scc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>du</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	}</block></for>    
	<expr_stmt><expr><name>tot</name> <operator>=</operator> <name>cnt</name> <operator>=</operator> <name>top</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>T</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>T</name></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>T</name><operator>--</operator></expr>)</condition>
    <block>{
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>u</name></decl>,<decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>m</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>u</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>addEdge</name><argument_list>(<argument><expr><name>u</name></expr></argument>,<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
		}</block></for>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		    <block type="pseudo"><if>if<condition>(<expr><operator>!</operator><name><name>dfn</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
		        <block type="pseudo"><expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></block></for>
		<decl_stmt><decl><type><name>bool</name></type> <name>flag</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		    <block type="pseudo"><if>if<condition>(<expr><name><name>scc</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name><name>scc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><then>
		        <block type="pseudo"><expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt></block></then></if></block></for>
	    <if>if<condition>(<expr><operator>!</operator><name>flag</name></expr>)</condition><then>
	    <block>{
	        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"No\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        <continue>continue;</continue>
		}</block></then></if>    
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		    <block type="pseudo"><for>for<control>(<init><decl><type><name>Node</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>h</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>=</operator><name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
		        <block type="pseudo"><if>if<condition>(<expr><name><name>scc</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name><name>scc</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>v</name></name></expr>]</index></name></expr>)</condition><then>
		            <block type="pseudo"><expr_stmt><expr><name><name>du</name><index>[<expr><name><name>scc</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block></then></if></block></for></block></for>
		<decl_stmt><decl><type><name>int</name></type> <name>num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		    <block type="pseudo"><if>if<condition>(<expr><name>i</name><operator>==</operator><name><name>scc</name><index>[<expr><name>i</name></expr>]</index></name><operator>&amp;&amp;</operator><operator>!</operator><name><name>du</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
	            <block type="pseudo"><expr_stmt><expr><name>num</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block></then></if></block></for>
	    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Yes\n%d %d\n"</literal></expr></argument>,<argument><expr><name><name>size</name><index>[<expr><name>num</name></expr>]</index></name></expr></argument>,<argument><expr><name>n</name><operator>-</operator><name><name>size</name><index>[<expr><name>num</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	        <block type="pseudo"><if>if<condition>(<expr><name><name>scc</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name>num</name></expr>)</condition><then>
	            <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d "</literal></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></block></for>
	    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	        <block type="pseudo"><if>if<condition>(<expr><name><name>scc</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name>num</name></expr>)</condition><then>
	            <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d "</literal></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></block></for>
	    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
