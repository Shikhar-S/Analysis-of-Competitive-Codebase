<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29172947_62990289.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;list&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctime&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bitset&gt;</cpp:file></cpp:include>
<comment type="line">//#include &lt;utility&gt;</comment>
<comment type="line">//#include &lt;complex&gt;</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<comment type="line">//#include &lt;limits.h&gt;</comment>
<comment type="line">//#include &lt;iomanip&gt;</comment>
<comment type="line">//#include &lt;unordered_map&gt;</comment>
<comment type="line">//#include &lt;unordered_set&gt;</comment>
<comment type="line">//#include &lt;bits/stdc++.h&gt;</comment>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rank</name></cpp:macro> <cpp:value>rankk</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>eb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<comment type="line">//#define eb emplace_back</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xo</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((b)&amp;1?(a):0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tm</name></cpp:macro> <cpp:value>tmp</cpp:value></cpp:define>
<comment type="line">//#define LL ll</comment>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ull</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>ui</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pli</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type><name>pil</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>pll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>double</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pdi</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>INF</name><init>=<expr><literal type="number">0x3f3f3f3f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>INFF</name><init>=<expr><literal type="number">1e16</literal></expr></init></decl>;</decl_stmt>
<comment type="line">//const ll INFF=0x3f3f3f3f3f3f3f3fll;</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAX</name><init>=<expr><literal type="number">5e5</literal><operator>+</operator><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MOD</name><init>=<expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<comment type="line">//const ll MOD=(ll)998244353;</comment>
<function><type><name>ll</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<return>return <expr><ternary><condition><expr><name>b</name></expr>?</condition><then><expr><call><name>gcd</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>a</name><operator>%</operator><name>b</name></expr></argument>)</argument_list></call></expr></then><else>:<expr><name>a</name></expr></else></ternary></expr>;</return>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template><specifier>inline</specifier> <type><name>T</name></type> <name>abs</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<return>return <expr><ternary><condition><expr><name>a</name><operator>&gt;</operator><literal type="number">0</literal></expr>?</condition><then><expr><name>a</name></expr></then><else>:<expr><operator>-</operator><name>a</name></expr></else></ternary></expr>;</return>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier>
<type><name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>T</name><modifier>&amp;</modifier></type> <name>num</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>bool</name></type> <name>start</name><init>=<expr><literal type="boolean">false</literal></expr></init></decl>,<decl><type ref="prev"/><name>neg</name><init>=<expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>num</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
    <while>while<condition>(<expr><operator>(</operator><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call><operator>)</operator><operator>!=</operator><name>EOF</name></expr>)</condition> <block>{
        <if>if<condition>(<expr><name>c</name><operator>==</operator><literal type="char">'-'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>start</name><operator>=</operator><name>neg</name><operator>=</operator><literal type="boolean">true</literal></expr>;</expr_stmt></block></then>
        <elseif>else <if>if<condition>(<expr><name>c</name><operator>&gt;=</operator><literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name><operator>&lt;=</operator><literal type="char">'9'</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>start</name><operator>=</operator><literal type="boolean">true</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>num</name><operator>=</operator><name>num</name><operator>*</operator><literal type="number">10</literal><operator>+</operator><name>c</name><operator>-</operator><literal type="char">'0'</literal></expr>;</expr_stmt>
        }</block></then></if></elseif> <elseif>else <if>if<condition>(<expr><name>start</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if></elseif></if>
    }</block></while>
    <if>if<condition>(<expr><name>neg</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>num</name><operator>=</operator><operator>-</operator><name>num</name></expr>;</expr_stmt></block></then></if>
}</block></function>
<function><specifier>inline</specifier> <type><name>ll</name></type> <name>powMM</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>M</name></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>ret</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>a</name><operator>%=</operator><name>M</name></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>b</name></expr>)</condition><block>{
        <if>if <condition>(<expr><name>b</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ret</name><operator>=</operator><literal type="number">1LL</literal><operator>*</operator><name>ret</name><operator>*</operator><name>a</name><operator>%</operator><name>M</name></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name>b</name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>a</name><operator>=</operator><literal type="number">1LL</literal><operator>*</operator><name>a</name><operator>*</operator><name>a</name><operator>%</operator><name>M</name></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><name>ret</name></expr>;</return>
}</block></function>
<namespace>namespace<block>{
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>int</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name>x</name><operator>+=</operator><name>y</name></expr>;</expr_stmt><if>if<condition>(<expr><name>x</name><operator>&gt;=</operator><name>MOD</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>x</name><operator>-=</operator><name>MOD</name></expr>;</expr_stmt></block></then></if><return>return <expr><name>x</name></expr>;</return>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>void</name></type> <name>addi</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name>x</name><operator>+=</operator><name>y</name></expr>;</expr_stmt><if>if<condition>(<expr><name>x</name><operator>&gt;=</operator><name>MOD</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>x</name><operator>-=</operator><name>MOD</name></expr>;</expr_stmt></block></then></if>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>int</name></type> <name>mul</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{<return>return <expr><literal type="number">1LL</literal><operator>*</operator><name>x</name><operator>*</operator><name>y</name><operator>%</operator><name>MOD</name></expr>;</return>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>void</name></type> <name>muli</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name>x</name><operator>=</operator><literal type="number">1LL</literal><operator>*</operator><name>x</name><operator>*</operator><name>y</name><operator>%</operator><name>MOD</name></expr>;</expr_stmt>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>int</name></type> <name>sub</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name>int</name></type> <name>res</name><init>=<expr><name>x</name><operator>-</operator><name>y</name></expr></init></decl>;</decl_stmt><if>if<condition>(<expr><name>res</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>res</name><operator>+=</operator><name>MOD</name></expr>;</expr_stmt></block></then></if><return>return <expr><name>res</name></expr>;</return>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>void</name></type> <name>subi</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name>x</name><operator>-=</operator><name>y</name></expr>;</expr_stmt><if>if<condition>(<expr><name>x</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>x</name><operator>+=</operator><name>MOD</name></expr>;</expr_stmt></block></then></if><expr_stmt><expr><name>x</name><operator>%=</operator><name>MOD</name></expr>;</expr_stmt>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>int</name></type> <name>half</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{<return>return <expr><ternary><condition><expr><name>x</name><operator>&amp;</operator><literal type="number">1</literal></expr>?</condition><then><expr><operator>(</operator><name>x</name><operator>+</operator><name>MOD</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></then><else>:<expr><name>x</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>}</block></function>
<comment type="line">//ll mul(ll a , ll b,ll Q){</comment>
<comment type="line">//    return (a * b - (ll) ((long double)a * b / Q) * Q) % Q;</comment>
<comment type="line">//}</comment>
}</block></namespace>
<comment type="line">//#define debug</comment>
<comment type="line">//clock_t t1 = clock();</comment>
<comment type="line">//fprintf(stderr, "%ld ms\n", clock() - t1);</comment>


<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>dp</name><index>[<expr><name>MAX</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>lim</name><init>=<expr><literal type="number">100000</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name><name>dp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>lim</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><call><name>add</name><argument_list>(<argument><expr><name><name>dp</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>dp</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
<comment type="line">//        addi(dp[i+2],dp[i]);</comment>
<comment type="line">//        addi(dp[i+3],dp[i]);//011 001</comment>
<comment type="line">//        addi(dp[i+3],dp[i]);</comment>
<comment type="line">//        addi(dp[i+4],dp[i]);</comment>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>lim</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><call><name>subi</name><argument_list>(<argument><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
<comment type="line">//    for(int i=1;i&lt;=10;i++)</comment>
<comment type="line">//        printf("%d ",dp[i]);</comment>
<comment type="line">//    printf("~\n");</comment>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>,<argument><expr><call><name>add</name><argument_list>(<argument><expr><call><name>mul</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><call><name>add</name><argument_list>(<argument><expr><name><name>dp</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>dp</name><index>[<expr><name>m</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<comment type="line">//    for(int i=1;i&lt;)</comment>
<comment type="line">//    printf("%d\n",sub(mul(2,add( dp[n],dp[m] )) ,2));</comment>
<comment type="line">//    for(int i=1;i&lt;=lim;i++){</comment>
<comment type="line">//        dp[i]=dp[i-2]+dp[i-2];</comment>
<comment type="line">//    }</comment>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
<comment type="block">/*
3
7
3 1 6 6 3 1 1
8
1 1 4 4 4 7 8 8
7
4 2 5 2 6 2 7




*/</comment>
</unit>
