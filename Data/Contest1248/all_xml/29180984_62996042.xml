<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29180984_62996042.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>,<decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>fast_fib</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>n</name></decl></parameter>,<parameter><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name><name>ans</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name><name>ans</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ans</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <return>return;</return>
    }</block></then></if>
    <expr_stmt><expr><call><name>fast_fib</name><argument_list>(<argument><expr><operator>(</operator><name>n</name><operator>/</operator><literal type="number">2</literal><operator>)</operator></expr></argument>,<argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>ans</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>             <comment type="block">/* F(n) */</comment>
    <expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>ans</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>             <comment type="block">/* F(n+1) */</comment>
    <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">2</literal><operator>*</operator><name>b</name> <operator>-</operator> <name>a</name></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>c</name> <operator>+=</operator> <name>MOD</name></expr>;</expr_stmt></block></then></if>
    <expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>a</name> <operator>*</operator> <name>c</name><operator>)</operator> <operator>%</operator> <name>MOD</name></expr>;</expr_stmt>      <comment type="block">/* F(2n) */</comment>
    <expr_stmt><expr><name>d</name> <operator>=</operator> <operator>(</operator><name>a</name><operator>*</operator><name>a</name> <operator>+</operator> <name>b</name><operator>*</operator><name>b</name><operator>)</operator> <operator>%</operator> <name>MOD</name></expr>;</expr_stmt>  <comment type="block">/* F(2n + 1) */</comment>
    <if>if<condition>(<expr><name>n</name><operator>%</operator><literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name><name>ans</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ans</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
    }</block></then>
    <else>else
    <block>{
        <expr_stmt><expr><name><name>ans</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ans</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>c</name><operator>+</operator><name>d</name></expr>;</expr_stmt>
    }</block></else></if>
}</block></function>
<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>m</name></expr>;</expr_stmt> 
        <decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name><name>ans</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><init>=<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name><name>bans</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><init>=<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>fast_fib</name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>fast_fib</name><argument_list>(<argument><expr><name>m</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>bans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>sum</name><init>=<expr><name><name>ans</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>+</operator><name><name>bans</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>sum</name><operator>%=</operator><name>MOD</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>sum</name><operator>*=</operator><literal type="number">2</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>sum</name><operator>%=</operator><name>MOD</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>sum</name></expr>;</expr_stmt>    
    
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

</unit>
