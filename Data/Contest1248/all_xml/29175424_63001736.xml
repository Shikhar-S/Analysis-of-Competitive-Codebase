<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29175424_63001736.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<struct>struct <name>action</name> <block>{<public type="default">
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>time</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>, <decl><type ref="prev"/><name>val</name></decl>;</decl_stmt>

    <constructor><name>action</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>time</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>type</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>val</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
    }</block></constructor>
</public>}</block>;</struct>

<function type="operator"><type><name>bool</name></type> <name>operator<name>&lt;</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>action</name> <modifier>&amp;</modifier></type><name>fir</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>action</name> <modifier>&amp;</modifier></type><name>sec</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name><name>fir</name><operator>.</operator><name>time</name></name> <operator>==</operator> <name><name>sec</name><operator>.</operator><name>time</name></name> <operator>&amp;&amp;</operator> <name><name>fir</name><operator>.</operator><name>type</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>sec</name><operator>.</operator><name>type</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><name><name>fir</name><operator>.</operator><name>val</name></name> <operator>&lt;</operator> <name><name>sec</name><operator>.</operator><name>val</name></name></expr>;</return></block></then></if>
    <if>if <condition>(<expr><name><name>fir</name><operator>.</operator><name>time</name></name> <operator>==</operator> <name><name>sec</name><operator>.</operator><name>time</name></name> <operator>&amp;&amp;</operator> <name><name>fir</name><operator>.</operator><name>type</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>sec</name><operator>.</operator><name>type</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>
    <if>if <condition>(<expr><name><name>fir</name><operator>.</operator><name>time</name></name> <operator>==</operator> <name><name>sec</name><operator>.</operator><name>time</name></name> <operator>&amp;&amp;</operator> <name><name>fir</name><operator>.</operator><name>type</name></name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>sec</name><operator>.</operator><name>type</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
    <return>return <expr><name><name>fir</name><operator>.</operator><name>time</name></name> <operator>&lt;</operator> <name><name>sec</name><operator>.</operator><name>time</name></name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>p</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>p</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>action</name></expr></argument>&gt;</argument_list></name></type> <name>actions</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>time</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>time</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>actions</name><operator>.</operator><name>emplace</name></name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></type> <name>used</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></type> <name>ans</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>deque</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>realqueue_ordered</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>priority_queue</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>greater</name><argument_list type="generic">&lt;&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>realqueue</name></decl>, <decl><type ref="prev"/><name>virtqueue</name></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><specifier>const</specifier> <name>action</name><modifier>&amp;</modifier></type> <name>act</name> <range>: <expr><name>actions</name></expr></range></decl></init>)</control> <block>{
        <if>if <condition>(<expr><name><name>act</name><operator>.</operator><name>type</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>used</name><index>[<expr><name><name>realqueue_ordered</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ans</name><index>[<expr><name><name>realqueue_ordered</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name><name>act</name><operator>.</operator><name>time</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>realqueue_ordered</name><operator>.</operator><name>pop_front</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <while>while <condition>(<expr><operator>!</operator><call><name><name>realqueue</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name><name>used</name><index>[<expr><call><name><name>realqueue</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr>)</condition>
                <block type="pseudo"><expr_stmt><expr><call><name><name>realqueue</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
            <if>if <condition>(<expr><operator>(</operator><operator>!</operator><call><name><name>virtqueue</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>realqueue</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>realqueue</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <call><name><name>virtqueue</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>||</operator>
            <operator>(</operator><call><name><name>realqueue</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>virtqueue</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>realqueue</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><call><name><name>virtqueue</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>realqueue_ordered</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name><name>virtqueue</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>virtqueue</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><operator>!</operator><call><name><name>realqueue</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><call><name><name>actions</name><operator>.</operator><name>emplace</name></name><argument_list>(<argument><expr><name><name>act</name><operator>.</operator><name>time</name></name> <operator>+</operator> <name>p</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        }</block></then> <else>else <block>{
            <if>if <condition>(<expr><call><name><name>realqueue</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>actions</name><operator>.</operator><name>emplace</name></name><argument_list>(<argument><expr><name><name>act</name><operator>.</operator><name>time</name></name> <operator>+</operator> <name>p</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <while>while <condition>(<expr><operator>!</operator><call><name><name>realqueue</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name><name>used</name><index>[<expr><call><name><name>realqueue</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr>)</condition>
                <block type="pseudo"><expr_stmt><expr><call><name><name>realqueue</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
            <if>if <condition>(<expr><operator>(</operator><operator>!</operator><call><name><name>realqueue</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>realqueue</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name><name>act</name><operator>.</operator><name>val</name></name><operator>)</operator> <operator>||</operator> <call><name><name>realqueue</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>realqueue</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name><name>act</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>realqueue_ordered</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>act</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>virtqueue</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name><name>act</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></else></if>
    }</block></for>

    <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>i</name> <range>: <expr><name>ans</name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>i</name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
