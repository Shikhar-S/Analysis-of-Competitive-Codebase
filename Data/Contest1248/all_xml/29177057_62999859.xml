<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29177057_62999859.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;ext/pb_ds/assoc_container.hpp&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;ext/pb_ds/tree_policy.hpp&gt;</cpp:file></cpp:include>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><cpp:literal>"-O3"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><cpp:literal>"Ofast"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><cpp:literal>"unroll-loops"</cpp:literal><name>)</name></cpp:pragma>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>p_b</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pll</name></cpp:macro> <cpp:value>pair&lt;ll,ll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;int,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>m_p</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x.begin(),x.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sset</name></cpp:macro> <cpp:value>ordered_set</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sqr</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x)*(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pw</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(1ll &lt;&lt; x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(int)x.size()</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<using>using <namespace>namespace <name>__gnu_pbds</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>MAXN</name> <init>= <expr><literal type="number">1123456</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>N</name> <init>= <expr><literal type="number">2e5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>inf</name> <init>= <expr><literal type="number">3e18</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mt19937_64</name></type> <name>rnd</name><argument_list>(<argument><expr><call><name><name>chrono</name><operator>::</operator><name>system_clock</name><operator>::</operator><name>now</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>time_since_epoch</name><argument_list>()</argument_list></call><operator>.</operator><call><name>count</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<using><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
using <name>ordered_set</name> <init>= <type><name><name>tree</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name>null_type</name></expr></argument>, <argument><expr><name><name>less</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>rb_tree_tag</name></expr></argument>, <argument><expr><name>tree_order_statistics_node_update</name></expr></argument>&gt;</argument_list></name></type></init>;</using>

<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>vout</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>s</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>s</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt><expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name><name>ios_base</name> <operator>::</operator> <name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>p</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>p</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>t</name><argument_list>(<argument><expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>ans</name><argument_list>(<argument><expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>

    <decl_stmt><decl><type><name><name>set</name> <argument_list type="generic">&lt;<argument><expr><name>pll</name></expr></argument>&gt;</argument_list></name></type> <name>d</name></decl>;</decl_stmt>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><block>{<expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr>, <expr><name>i</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>

    <decl_stmt><decl><type><name>ll</name></type> <name>time</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>kol</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>set</name> <argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>in_q</name></decl>, <decl><type ref="prev"/><name>free</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>queue</name> <argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>stack_in_q</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>ll</name></type> <name>last</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <while>while<condition>(<expr><name>kol</name> <operator>&lt;</operator> <name>n</name></expr>)</condition><block>{

        <while>while<condition>(<expr><operator>!</operator><call><name><name>d</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><call><name><name>d</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><name>fi</name> <operator>&lt;</operator> <name>time</name></expr>)</condition><block>{
            <decl_stmt><decl><type><name>pll</name></type> <name>xe</name> <init>= <expr><operator>*</operator><call><name><name>d</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>d</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if<condition>(<expr><call><name><name>in_q</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>last</name> <operator>&gt;</operator> <name><name>xe</name><operator>.</operator><name>se</name></name></expr>)</condition><then><block>{
                <expr_stmt><expr><call><name><name>in_q</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name><name>xe</name><operator>.</operator><name>se</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>stack_in_q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name><name>xe</name><operator>.</operator><name>se</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then><else>else<block>{
                <if>if<condition>(<expr><call><name>sz</name><argument_list>(<argument><expr><name>in_q</name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
                    <if>if<condition>(<expr><call><name>min</name><argument_list>(<argument><expr><operator>*</operator><call><name><name>in_q</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>last</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name><name>xe</name><operator>.</operator><name>se</name></name></expr>)</condition><then><block>{
                        <expr_stmt><expr><call><name><name>in_q</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name><name>xe</name><operator>.</operator><name>se</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>stack_in_q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name><name>xe</name><operator>.</operator><name>se</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then><else>else <block type="pseudo"><expr_stmt><expr><call><name><name>free</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name><name>xe</name><operator>.</operator><name>se</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
                }</block></then>
                <else>else <block type="pseudo"><expr_stmt><expr><call><name><name>free</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name><name>xe</name><operator>.</operator><name>se</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
            }</block></else></if>
        }</block></while>

        <while>while<condition>(<expr><operator>!</operator><call><name><name>d</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><call><name><name>d</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><name>fi</name> <operator>&lt;=</operator> <name>time</name></expr>)</condition><block>{
            <decl_stmt><decl><type><name>pll</name></type> <name>xe</name> <init>= <expr><operator>*</operator><call><name><name>d</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>d</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>free</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name><name>xe</name><operator>.</operator><name>se</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>

        <if>if<condition>(<expr><call><name>sz</name><argument_list>(<argument><expr><name>free</name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
            <decl_stmt><decl><type><name>ll</name></type> <name>Mx</name> <init>= <expr><name>inf</name></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><call><name>sz</name><argument_list>(<argument><expr><name>in_q</name></expr></argument>)</argument_list></call></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>Mx</name> <operator>=</operator> <operator>*</operator><call><name><name>in_q</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
            <decl_stmt><decl><type><name>ll</name></type> <name>pos</name> <init>= <expr><operator>*</operator><call><name><name>free</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name>pos</name> <operator>&lt;</operator> <name>Mx</name></expr>)</condition><then><block>{
                <expr_stmt><expr><call><name><name>free</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>free</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>in_q</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>stack_in_q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>

        <if>if<condition>(<expr><call><name>sz</name><argument_list>(<argument><expr><name>in_q</name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
            <decl_stmt><decl><type><name>ll</name></type> <name>pos</name> <init>= <expr><call><name><name>stack_in_q</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>stack_in_q</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>in_q</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>time</name> <operator>+=</operator> <name>p</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ans</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <name>time</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>kol</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>last</name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
        }</block></then><else>else<block>{
            <expr_stmt><expr><name>time</name> <operator>=</operator> <operator>(</operator><operator>*</operator><call><name><name>d</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><name>fi</name></expr>;</expr_stmt>
            <continue>continue;</continue>
        }</block></else></if>

    }</block></while>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
