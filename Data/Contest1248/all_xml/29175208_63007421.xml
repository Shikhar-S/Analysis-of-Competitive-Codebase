<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29175208_63007421.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>SIZE</name> <init>= <expr><literal type="number">1e6</literal> <operator>+</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>num</name></decl>,<decl><type ref="prev"/><name>cnt</name></decl>,<decl><type ref="prev"/><name>dfu</name></decl>,<decl><type ref="prev"/><name>siz</name></decl>,<decl><type ref="prev"/><name><name>to</name><index>[<expr><name>SIZE</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>ne</name><index>[<expr><name>SIZE</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>first</name><index>[<expr><name>SIZE</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>dfn</name><index>[<expr><name>SIZE</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>low</name><index>[<expr><name>SIZE</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>bel</name><index>[<expr><name>SIZE</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>s</name><index>[<expr><name>SIZE</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>deg</name><index>[<expr><name>SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name><name>ins</name><index>[<expr><name>SIZE</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>fail</name><index>[<expr><name>SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>addE</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
	<expr_stmt><expr><name><name>to</name><index>[<expr><operator>++</operator><name>num</name></expr>]</index></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ne</name><index>[<expr><name>num</name></expr>]</index></name> <operator>=</operator> <name><name>first</name><index>[<expr><name>a</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>first</name><index>[<expr><name>a</name></expr>]</index></name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type> <name>tarjan</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{
	<expr_stmt><expr><name><name>ins</name><index>[<expr><name><name>s</name><index>[<expr><operator>++</operator><name>siz</name></expr>]</index></name> <operator>=</operator> <name>x</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>low</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>dfn</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <operator>++</operator><name>dfu</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>first</name><index>[<expr><name>x</name></expr>]</index></name></expr></init></decl>;</init><condition><expr><name>i</name></expr>;</condition><incr><expr><name>i</name> <operator>=</operator> <name><name>ne</name><index>[<expr><name>i</name></expr>]</index></name></expr></incr>)</control>
		<block type="pseudo"><if>if<condition>(<expr><operator>!</operator><name><name>dfn</name><index>[<expr><name><name>to</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><call><name>tarjan</name><argument_list>(<argument><expr><name><name>to</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>low</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>low</name><index>[<expr><name><name>to</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>,<argument><expr><name><name>low</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<elseif>else <if>if<condition>(<expr><name><name>ins</name><index>[<expr><name><name>to</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name><name>low</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>low</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>dfn</name><index>[<expr><name><name>to</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif></if></block></for>
	<if>if<condition>(<expr><name><name>dfn</name><index>[<expr><name>x</name></expr>]</index></name> <operator>==</operator> <name><name>low</name><index>[<expr><name>x</name></expr>]</index></name></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><operator>++</operator><name>cnt</name></expr>;</expr_stmt>
		<while>while<condition>(<expr><literal type="boolean">true</literal></expr>)</condition>
		<block>{
			<expr_stmt><expr><name><name>bel</name><index>[<expr><name><name>s</name><index>[<expr><name>siz</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>cnt</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>ins</name><index>[<expr><name><name>s</name><index>[<expr><name>siz</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
			<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>siz</name><operator>--</operator></expr>]</index></name> <operator>==</operator> <name>x</name></expr>)</condition><then>
				<block type="pseudo"><break>break;</break></block></then></if>
		}</block></while>
	}</block></then></if>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
	<for>for<control>(<init><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</init><condition><expr><name>t</name><operator>--</operator></expr>;</condition><incr/>)</control>
	<block>{
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>u</name></decl>,<decl><type ref="prev"/><name>v</name></decl>,<decl><type ref="prev"/><name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;=</operator> <name>m</name> <operator>&amp;&amp;</operator> <name>cin</name> <operator>&gt;&gt;</operator> <name>u</name> <operator>&gt;&gt;</operator> <name>v</name></expr>;</condition><incr><expr><call><name>addE</name><argument_list>(<argument><expr><name>u</name></expr></argument>,<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><empty_stmt>;</empty_stmt></block></for>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block type="pseudo"><if>if<condition>(<expr><operator>!</operator><name><name>dfn</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><call><name>tarjan</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></block></for>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name><name>first</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</init><condition><expr><name>j</name></expr>;</condition><incr><expr><name>j</name> <operator>=</operator> <name><name>ne</name><index>[<expr><name>j</name></expr>]</index></name></expr></incr>)</control>
				<block type="pseudo"><expr_stmt><expr><name><name>deg</name><index>[<expr><name><name>bel</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>+=</operator> <name><name>bel</name><index>[<expr><name><name>to</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name> <operator>!=</operator> <name><name>bel</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for></block></for>
		<if>if<condition>(<expr><name>cnt</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><then>
		<block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;=</operator> <name>cnt</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block type="pseudo"><if>if<condition>(<expr><name><name>deg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
			<block>{
				<decl_stmt><decl><type><name>int</name></type> <name>ccnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
				<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
					<block type="pseudo"><if>if<condition>(<expr><name><name>bel</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>i</name></expr>)</condition><then>
						<block type="pseudo"><expr_stmt><expr><name>ccnt</name><operator>++</operator></expr>;</expr_stmt></block></then></if></block></for>
				<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Yes\n"</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ccnt</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name>n</name> <operator>-</operator> <name>ccnt</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
				<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
					<block type="pseudo"><if>if<condition>(<expr><name><name>bel</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>i</name></expr>)</condition><then>
						<block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>j</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt></block></then></if></block></for>
				<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
				<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
					<block type="pseudo"><if>if<condition>(<expr><name><name>bel</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <name>i</name></expr>)</condition><then>
						<block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>j</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt></block></then></if></block></for>
				<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>dfn</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">998244353</literal></expr>;</expr_stmt>
				<break>break;</break>
			}</block></then></if></block></for></block></then></if>
		<if>if<condition>(<expr><name><name>dfn</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;=</operator> <name>n</name></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></then></if>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block type="pseudo"><expr_stmt><expr><name><name>dfn</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>low</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>first</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>bel</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></for>
		<expr_stmt><expr><name>num</name> <operator>=</operator> <name>siz</name> <operator>=</operator> <name>dfu</name> <operator>=</operator> <name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	}</block></for>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
