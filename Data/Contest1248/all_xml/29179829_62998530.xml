<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29179829_62998530.cpp"><comment type="block">/*
 * Author: apikdech
 * Time: 16:22:18 20-10-2019
**/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MOD</name> <init>= <expr><literal type="number">1000000007</literal></expr></init></decl>, <decl><type ref="prev"/><name>N</name> <init>= <expr><literal type="number">1e5</literal> <operator>+</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>fact</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>ifact</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>ll</name></type> <name>powmod</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>m</name> <init>= <expr><name>MOD</name></expr></init></decl></parameter>)</parameter_list> <block>{<decl_stmt><decl><type><name>ll</name></type> <name>res</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>b</name><operator>&gt;=</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <for>for<control>(<init>;</init><condition><expr><name>b</name></expr>;</condition><incr><expr><name>b</name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr></incr>)</control><block>{<if>if<condition>(<expr><name>b</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>res</name><operator>=</operator><operator>(</operator><name>res</name><operator>*</operator><name>a</name><operator>)</operator><operator>%</operator><name>m</name></expr>;</expr_stmt></block></then></if><expr_stmt><expr><name>a</name><operator>=</operator><operator>(</operator><name>a</name><operator>*</operator><name>a</name><operator>)</operator><operator>%</operator><name>m</name></expr>;</expr_stmt>}</block></for><return>return <expr><name>res</name><operator>%</operator><name>m</name></expr>;</return>}</block></function>

<function><type><name>ll</name></type> <name>inv</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{
	<return>return <expr><call><name>powmod</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>MOD</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>ll</name></type> <name>ncr</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{
	<if>if <condition>(<expr><name>y</name> <operator>&gt;</operator> <name>x</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
	<decl_stmt><decl><type><name>ll</name></type> <name>res</name> <init>= <expr><name><name>fact</name><index>[<expr><name>x</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <name>res</name> <operator>*</operator> <name><name>ifact</name><index>[<expr><name>y</name></expr>]</index></name> <operator>%</operator> <name>MOD</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <name>res</name> <operator>*</operator> <name><name>ifact</name><index>[<expr><name>x</name><operator>-</operator><name>y</name></expr>]</index></name> <operator>%</operator> <name>MOD</name></expr>;</expr_stmt>
	<return>return <expr><name>res</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>pre</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><name><name>fact</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>fact</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ifact</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>ifact</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<expr_stmt><expr><name><name>fact</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>fact</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>i</name><operator>)</operator> <operator>%</operator> <name>MOD</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ifact</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>inv</name><argument_list>(<argument><expr><name><name>fact</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><call><name>pre</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>satu</name></decl>, <decl><type ref="prev"/><name>dua</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <name>m</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
	<if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>m</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"2\n"</literal></expr><operator>,</operator> <expr><literal type="number">0</literal></expr>;</return></block></then></if>
	<for>for <control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<expr_stmt><expr><name>satu</name> <operator>=</operator> <name>n</name><operator>-</operator><name>i</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>dua</name> <operator>=</operator> <operator>(</operator><name>n</name> <operator>-</operator> <name>satu</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>satu</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>dua</name> <operator>!=</operator> <name>n</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
		<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>+</operator> <call><name>ncr</name><argument_list>(<argument><expr><name>satu</name> <operator>+</operator> <name>dua</name></expr></argument>, <argument><expr><name>dua</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>%</operator> <name>MOD</name></expr>;</expr_stmt>
	}</block></for>
	<for>for <control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>m</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<expr_stmt><expr><name>satu</name> <operator>=</operator> <name>m</name><operator>-</operator><name>i</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>dua</name> <operator>=</operator> <operator>(</operator><name>m</name> <operator>-</operator> <name>satu</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>satu</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>dua</name> <operator>!=</operator> <name>m</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
		<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><name>y</name> <operator>+</operator> <call><name>ncr</name><argument_list>(<argument><expr><name>satu</name> <operator>+</operator> <name>dua</name></expr></argument>, <argument><expr><name>dua</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>%</operator> <name>MOD</name></expr>;</expr_stmt>
	}</block></for>
	<comment type="line">// cout &lt;&lt; x &lt;&lt; " " &lt;&lt; y &lt;&lt; "\n";</comment>
	<comment type="line">// if (x == 0) cout &lt;&lt; x &lt;&lt; "\n";</comment>
	<comment type="line">// else if (y == 0) cout &lt;&lt; y &lt;&lt; "\n";</comment>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>(</operator><operator>(</operator><operator>(</operator><literal type="number">2LL</literal> <operator>*</operator> <name>x</name> <operator>%</operator> <name>MOD</name> <operator>+</operator> <literal type="number">2LL</literal> <operator>*</operator> <name>y</name> <operator>%</operator> <name>MOD</name><operator>)</operator> <operator>%</operator> <name>MOD</name><operator>)</operator> <operator>+</operator> <literal type="number">2LL</literal><operator>)</operator> <operator>%</operator> <name>MOD</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
