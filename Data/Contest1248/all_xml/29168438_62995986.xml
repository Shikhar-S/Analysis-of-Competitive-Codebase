<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29168438_62995986.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>asp</name></cpp:macro> <cpp:value>""</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>aps</name></cpp:macro> <cpp:value>''</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>one</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>two</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dif</name></cpp:macro> <cpp:value>!=</cpp:value></cpp:define>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>mod</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name> <init>= <expr><literal type="number">100005</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>dp</name><index>[<expr><name>maxn</name></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>ll</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list><block>{

	<if>if<condition>(<expr><name><name>dp</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><name>val</name></expr>]</index></name> <name>dif</name> <operator>-</operator><name>one</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name><name>dp</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><name>val</name></expr>]</index></name></expr>;</return></block></then></if>
	<if>if<condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>one</name></expr>;</return></block></then></if>
	<decl_stmt><decl><type><name>ll</name></type> <name>ret</name>  <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<if>if<condition>(<expr><name>val</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><then><block>{
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dfs</name><argument_list>(<argument><expr><name>n</name><operator>-</operator><name>one</name></expr></argument>,<argument><expr><name>one</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ret</name> <operator>%=</operator> <name>mod</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>dp</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><name>val</name></expr>]</index></name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>
		<return>return <expr><name>ret</name></expr>;</return>
	}</block></then>
	<else>else<block>{
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dfs</name><argument_list>(<argument><expr><name>n</name><operator>-</operator><name>one</name></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ret</name> <operator>%=</operator> <name>mod</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>ret</name> <operator>+=</operator> <call><name>dfs</name><argument_list>(<argument><expr><name>n</name><operator>-</operator><name>one</name></expr></argument>,<argument><expr><name>one</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ret</name> <operator>%=</operator> <name>mod</name></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>dp</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><name>val</name></expr>]</index></name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>

		<return>return <expr><name>ret</name></expr>;</return>
	}</block></else></if>
}</block></function>

<function><type><name>ll</name></type> <name>solve</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>m</name></decl></parameter>)</parameter_list><block>{

	<decl_stmt><decl><type><name>ll</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>sum</name> <operator>+=</operator> <call><name>dfs</name><argument_list>(<argument><expr><name>n</name><operator>-</operator><name>one</name></expr></argument>,<argument><expr><name>one</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">//cout &lt;&lt;sum&lt;&lt;endl;</comment>
	<expr_stmt><expr><name>sum</name> <operator>%=</operator> <name>mod</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>sum</name> <operator>+=</operator> <call><name>dfs</name><argument_list>(<argument><expr><name>m</name><operator>-</operator><name>one</name></expr></argument>,<argument><expr><name>one</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">//cout &lt;&lt;sum&lt;&lt;endl;</comment>
	<expr_stmt><expr><name>sum</name> <operator>%=</operator> <name>mod</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>sum</name><operator>--</operator></expr>;</expr_stmt>
	<if>if<condition>(<expr><name>sum</name>  <operator>&lt;</operator> <name>mod</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>sum</name> <operator>+=</operator> <name>mod</name></expr>;</expr_stmt></block></then></if>

	<expr_stmt><expr><name>sum</name> <operator>%=</operator> <name>mod</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>sum</name> <operator>*=</operator> <name>two</name></expr>;</expr_stmt>


	<expr_stmt><expr><name>sum</name> <operator>%=</operator> <name>mod</name></expr>;</expr_stmt>
	<return>return <expr><name>sum</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>init</name><parameter_list>()</parameter_list><block>{

	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>maxn</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
			<expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><name>one</name></expr>;</expr_stmt>
		}</block></for>
	}</block></for>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{

	<expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>solve</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
}</block></function></unit>
