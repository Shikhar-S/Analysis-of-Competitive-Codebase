<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29177927_62992761.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>int</name></type> <name><name>dx</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><init>=<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>dy</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><init>=<expr><block>{<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><name>long</name> <name>long</name></type> <name>bruteforce</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>, <parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name> <modifier>&amp;</modifier></type><name>current</name></decl></parameter>)</parameter_list> <block>{
    <if>if<condition>(<expr><name>i</name> <operator>&gt;=</operator> <call><name><name>current</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <for>for<control>(<init><decl><type><name>int</name></type> <name>c</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>c</name><operator>&lt;</operator><call><name><name>current</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{
            <for>for<control>(<init><decl><type><name>int</name></type> <name>c2</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>c2</name><operator>&lt;</operator><name><name>current</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>c2</name><operator>++</operator></expr></incr>)</control> <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>neigh</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                <for>for<control>(<init><decl><type><name>int</name></type> <name>d</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>d</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition><incr><expr><name>d</name><operator>++</operator></expr></incr>)</control> <block>{
                    <decl_stmt><decl><type><name>int</name></type> <name>x2</name> <init>= <expr><name>c</name> <operator>+</operator> <name><name>dx</name><index>[<expr><name>d</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>y2</name> <init>= <expr><name>c2</name> <operator>+</operator> <name><name>dy</name><index>[<expr><name>d</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                    <if>if<condition>(<expr><name>x2</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>y2</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>x2</name> <operator>&gt;=</operator> <call><name><name>current</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>||</operator> <name>y2</name> <operator>&gt;=</operator> <name><name>current</name><index>[<expr><name>x2</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                        <continue>continue;</continue>
                    }</block></then></if>
                    <if>if<condition>(<expr><name><name>current</name><index>[<expr><name>x2</name></expr>]</index><index>[<expr><name>y2</name></expr>]</index></name> <operator>==</operator> <name><name>current</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>c2</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>neigh</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
                }</block></for>
                <if>if<condition>(<expr><name>neigh</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
            }</block></for>
        }</block></for>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>val</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>val</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>val</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><name><name>current</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>res</name> <operator>+=</operator> <call><name>bruteforce</name><argument_list>(<argument><expr><name>i</name><operator>+</operator><operator>(</operator><name>j</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><name><name>current</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>j</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><name><name>current</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <return>return <expr><name>res</name></expr>;</return>
}</block></function>


<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>m</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>m</name></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>n</name> <operator>&lt;</operator> <name>m</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>dp</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><macro><name>vector</name></macro><operator>&lt;</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name> <operator>&gt;</operator> <operator>(</operator><literal type="number">2</literal><operator>,</operator><call><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></type> <name>res</name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>mod</name> <init>= <expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>c</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>c</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dp</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>c</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>dp</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>c</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>c</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>c</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>c</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <name><name>dp</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>c</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>res</name><index>[<expr><name>c</name></expr>]</index></name> <operator>+=</operator> <name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>c</name></expr>]</index></name> <operator>+</operator> <name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>c</name></expr>]</index></name> <operator>+</operator> <name><name>dp</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>c</name></expr>]</index></name> <operator>+</operator> <name><name>dp</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>res</name><index>[<expr><name>c</name></expr>]</index></name> <operator>%=</operator> <name>mod</name></expr>;</expr_stmt>
    }</block></for>
 <comment type="line">//   vector&lt;vector&lt;int&gt; &gt; current(n,vector&lt;int&gt;(m,0));</comment>
  <comment type="block">/*  for(int c=1;c&lt;=5;c++) {
        for(int c2=1;c2&lt;=5;c2++) {
            vector&lt;vector&lt;int&gt; &gt; v(c,vector&lt;int&gt;(c2,0));
            cout&lt;&lt;c&lt;&lt;" "&lt;&lt;c2&lt;&lt;" "&lt;&lt;bruteforce(0,0,v)&lt;&lt;" "&lt;&lt;(res[c2-1]+res[c-1]-2+mod)%mod&lt;&lt;endl;
        }
    }
*/</comment>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>(</operator><name><name>res</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>res</name><index>[<expr><name>m</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><literal type="number">2</literal><operator>+</operator><name>mod</name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt>

}</block></function>
</unit>
