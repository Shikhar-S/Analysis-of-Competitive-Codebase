<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29178434_62997920.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>try1</name><parameter_list>(<parameter><type><name>edge</name></type></parameter>,<parameter><type><name>idx</name></type></parameter>)</parameter_list></cpp:macro> \
<cpp:value>std::memset(chs + 1,0,n);\
for (Q.push(1),chs[1] = 1;Q.size();)\
{\
	int cur = Q.front(); Q.pop();\
	for (int i = idx[cur];i;i = edge[i].second)\
		if (int to = edge[i].first;! chs[to])\
			Q.push(to),chs[to] = 1;\
}</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">1E7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>pair</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></name></type> <name><name>edgea</name><index>[<expr><name>N</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name><name>idxa</name><index>[<expr><name>N</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>pair</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></name></type> <name><name>edgeb</name><index>[<expr><name>N</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name><name>idxb</name><index>[<expr><name>N</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>queue</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></name></type> <name>Q</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>bool</name></type> <name><name>chs</name><index>[<expr><name>N</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt> <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cin</name></name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>memset</name></name><argument_list>(<argument><expr><name>idxa</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>n</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><call><name><name>std</name><operator>::</operator><name>memset</name></name><argument_list>(<argument><expr><name>idxb</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>n</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>m</name> <operator>--</operator></expr>;</condition><incr/>)</control>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>ai</name></decl>,<decl><type ref="prev"/><name>bi</name></decl>;</decl_stmt> <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cin</name></name> <operator>&gt;&gt;</operator> <name>ai</name> <operator>&gt;&gt;</operator> <name>bi</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>edgea</name><index>[<expr><operator>++</operator> <name>cnt</name></expr>]</index></name> <operator>=</operator> <block>{<expr><name>bi</name></expr>,<expr><name><name>idxa</name><index>[<expr><name>ai</name></expr>]</index></name></expr>}</block></expr><operator>,</operator><expr><name><name>idxa</name><index>[<expr><name>ai</name></expr>]</index></name> <operator>=</operator> <name>cnt</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>edgeb</name><index>[<expr><operator>++</operator> <name>cnt</name></expr>]</index></name> <operator>=</operator> <block>{<expr><name>ai</name></expr>,<expr><name><name>idxb</name><index>[<expr><name>bi</name></expr>]</index></name></expr>}</block></expr><operator>,</operator><expr><name><name>idxb</name><index>[<expr><name>bi</name></expr>]</index></name> <operator>=</operator> <name>cnt</name></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><call><name>try1</name><argument_list>(<argument><expr><name>edgea</name></expr></argument>,<argument><expr><name>idxa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<decl><type><name>int</name></type> <name>j</name> <init>= <expr><call><name><name>std</name><operator>::</operator><name>count</name></name><argument_list>(<argument><expr><name>chs</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,<argument><expr><name>chs</name> <operator>+</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</condition></if><expr_stmt><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr></expr_stmt>)</block>
	<block>{
		<expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <literal type="string">"Yes\n"</literal> <operator>&lt;&lt;</operator> <name>j</name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal> <operator>&lt;&lt;</operator> <name>n</name> <operator>-</operator> <name>j</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition><incr><expr><operator>++</operator> <name>i</name></expr></incr>)</control>
			<block type="pseudo"><if>if <condition>(<expr><name><name>chs</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <name>i</name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block></then></if></block></for>
		<expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition><incr><expr><operator>++</operator> <name>i</name></expr></incr>)</control>
			<block type="pseudo"><if>if <condition>(<expr><operator>!</operator> <name><name>chs</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <name>i</name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block></then></if></block></for>
		<expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
		<return>return;</return>
	}</block></function>
	<expr_stmt><expr><call><name>try1</name><argument_list>(<argument><expr><name>edgeb</name></expr></argument>,<argument><expr><name>idxb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<decl><type><name>int</name></type> <name>j</name> <init>= <expr><call><name><name>std</name><operator>::</operator><name>count</name></name><argument_list>(<argument><expr><name>chs</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,<argument><expr><name>chs</name> <operator>+</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</condition></if><expr_stmt><expr><name>j</name></expr></expr_stmt>)
	<block>{
		<expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <literal type="string">"Yes\n"</literal> <operator>&lt;&lt;</operator> <name>j</name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal> <operator>&lt;&lt;</operator> <name>n</name> <operator>-</operator> <name>j</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition><incr><expr><operator>++</operator> <name>i</name></expr></incr>)</control>
			<block type="pseudo"><if>if <condition>(<expr><operator>!</operator> <name><name>chs</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <name>i</name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block></then></if></block></for>
		<expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition><incr><expr><operator>++</operator> <name>i</name></expr></incr>)</control>
			<block type="pseudo"><if>if <condition>(<expr><name><name>chs</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <name>i</name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block></then></if></block></for>
		<expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
		<return>return;</return>
	}</block>
	<expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <literal type="string">"No\n"</literal></expr>;</expr_stmt>
}
main<expr_stmt><expr><operator>(</operator><operator>)</operator>
<block>{
	<expr><call><name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,<expr><call><name><name>std</name><operator>::</operator><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;
	<expr><name>int</name> <name>t</name></expr>; <for>for <control>(<init><expr><name><name>std</name><operator>::</operator><name>cin</name></name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</init><condition><expr><name>t</name> <operator>--</operator></expr>;</condition><incr/>)</control> <block type="pseudo"><expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></for>
}</block></expr></expr_stmt></unit>
