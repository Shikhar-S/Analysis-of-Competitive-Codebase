<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29168997_62999671.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name><init>=<expr><literal type="number">505</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>prer</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>preu</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>sufr</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>sufu</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<struct>struct <name>X</name>
<block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>v</name></decl>,<decl><type ref="prev"/><name>l</name></decl>,<decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
	<function type="operator"><type><name>bool</name></type> <name>operator<name>&gt;</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>X</name></type> <name>x</name></decl></parameter>)</parameter_list><specifier>const</specifier>
	<block>{
		<return>return <expr><name>v</name><operator>&gt;</operator><name><name>x</name><operator>.</operator><name>v</name></name></expr>;</return>
	}</block></function>
</public>}</block><decl><name>as</name></decl>,<decl><type ref="prev"/><name>now</name></decl>;</struct>
<function><type><name>int</name></type> <name>check</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>,<decl><type ref="prev"/><name>un</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>res</name><operator>=</operator><name>un</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'('</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>res</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
		<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">')'</literal></expr>)</condition><then>
		<block>{
			<if>if<condition>(<expr><name>res</name></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><name>res</name><operator>--</operator></expr>;</expr_stmt></block></then>
			<else>else
				<block type="pseudo"><expr_stmt><expr><name>un</name><operator>++</operator></expr>;</expr_stmt></block></else></if>
		}</block></then></if>
		<expr_stmt><expr><name><name>prer</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>res</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>preu</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>un</name></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><name>res</name><operator>=</operator><name>un</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>n</name></expr></init></decl>;</init><condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">1</literal></expr>;</condition><incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
	<block>{
		<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">')'</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>res</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
		<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'('</literal></expr>)</condition><then>
		<block>{
			<if>if<condition>(<expr><name>res</name></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><name>res</name><operator>--</operator></expr>;</expr_stmt></block></then>
			<else>else
				<block type="pseudo"><expr_stmt><expr><name>un</name><operator>++</operator></expr>;</expr_stmt></block></else></if>
		}</block></then></if>
		<expr_stmt><expr><name><name>sufr</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>res</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sufu</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>un</name></expr>;</expr_stmt>
	}</block></for>
	<decl_stmt><decl><type><name>int</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<if>if<condition>(<expr><name><name>prer</name><index>[<expr><name>n</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal><operator>&amp;&amp;</operator><name><name>preu</name><index>[<expr><name>n</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
		<block type="pseudo"><expr_stmt><expr><name>ans</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<if>if<condition>(<expr><name><name>prer</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then>
			<block type="pseudo"><continue>continue;</continue></block></then></if>
		<if>if<condition>(<expr><name><name>sufr</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then>
			<block type="pseudo"><continue>continue;</continue></block></then></if>
		<if>if<condition>(<expr><name><name>preu</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><name><name>sufu</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>ans</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
	}</block></for> 
	<return>return <expr><name>ans</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%s"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><name>s</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>as</name><operator>.</operator><name>v</name></name><operator>=</operator><call><name>check</name><argument_list>()</argument_list></call></expr><operator>,</operator><expr><name><name>as</name><operator>.</operator><name>l</name></name><operator>=</operator><name><name>as</name><operator>.</operator><name>r</name></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>l</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>l</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>l</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<for>for<control>(<init><decl><type><name>int</name></type> <name>r</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>r</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>r</name><operator>++</operator></expr></incr>)</control>
		<block>{
			<expr_stmt><expr><name><name>now</name><operator>.</operator><name>l</name></name><operator>=</operator><name>l</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>now</name><operator>.</operator><name>r</name></name><operator>=</operator><name>r</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>l</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>s</name><index>[<expr><name>r</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>now</name><operator>.</operator><name>v</name></name><operator>=</operator><call><name>check</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<if>if<condition>(<expr><name>now</name><operator>&gt;</operator><name>as</name></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><name>as</name><operator>=</operator><name>now</name></expr>;</expr_stmt></block></then></if>
			<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>l</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>s</name><index>[<expr><name>r</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
	}</block></for>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n%d %d\n"</literal></expr></argument>,<argument><expr><name><name>as</name><operator>.</operator><name>v</name></name></expr></argument>,<argument><expr><name><name>as</name><operator>.</operator><name>l</name></name></expr></argument>,<argument><expr><name><name>as</name><operator>.</operator><name>r</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
