<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29178183_63002892.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FI</name><parameter_list>(<parameter><type><name>_n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = 0; i &lt; (_n); ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FJ</name><parameter_list>(<parameter><type><name>_n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int j = 0; j &lt; (_n); ++j)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>'\n'</cpp:value></cpp:define>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<struct>struct <name>Cmp</name>
<block>{<public type="default">
    <function type="operator"><type><name>bool</name></type> <name>operator <name>()</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ll</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ll</name><modifier>&amp;</modifier></type> <name>b</name></decl></parameter>)</parameter_list>
    <block>{
        <return>return <expr><name>a</name> <operator>&gt;</operator> <name>b</name></expr>;</return>
    }</block></function>
</public>}</block>;</struct>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">//    ifstream cin("input.txt");</comment>
<comment type="line">//    ofstream cout("output.txt");</comment>

    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>p</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>p</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>a</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>ans</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <macro><name>FI</name><argument_list>(<argument>n</argument>)</argument_list></macro>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>multiset</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>ev1</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>multiset</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>ev2</name></decl>;</decl_stmt>
    <macro><name>FI</name><argument_list>(<argument>n</argument>)</argument_list></macro>
        <expr_stmt><expr><call><name><name>ev1</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ev2</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>Cmp</name></expr></argument>&gt;</argument_list></name></type> <name>free_pos</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>wait</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>queue</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>q</name></decl>;</decl_stmt>
    <while>while <condition>(<expr><call><name><name>ev1</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>ev2</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{
        <decl_stmt><decl><type><name>bool</name></type> <name>doEv1</name> <init>= <expr><call><name><name>ev1</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name><name>ev2</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>ev1</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>first</name> <operator>&lt;=</operator> <operator>*</operator><call><name><name>ev2</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>doEv2</name> <init>= <expr><call><name><name>ev2</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name><name>ev1</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>||</operator> <operator>*</operator><call><name><name>ev2</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call> <operator>&lt;=</operator> <call><name><name>ev1</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>first</name><operator>)</operator></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>bool</name></type> <name>doSkip</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>doEv2</name></expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name>ll</name></type> <name>ctime</name> <init>= <expr><operator>*</operator><call><name><name>ev2</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>ev2</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>ev2</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name><name>q</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><call><name><name>q</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call><operator>.</operator><name>first</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>ll</name></type> <name>time</name> <init>= <expr><call><name><name>q</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call><operator>.</operator><name>second</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>free_pos</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>ans</name><index>[<expr><name>id</name></expr>]</index></name> <operator>=</operator> <name>time</name></expr>;</expr_stmt>
<comment type="line">//                cerr &lt;&lt; id &lt;&lt; ' ' &lt;&lt; time &lt;&lt; endl;</comment>
                <if>if <condition>(<expr><call><name><name>ev1</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>ev1</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>first</name> <operator>&lt;=</operator> <name>ctime</name>
                    <operator>&amp;&amp;</operator> <call><name><name>free_pos</name><operator>.</operator><name>upper_bound</name></name><argument_list>(<argument><expr><call><name><name>ev1</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>second</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name><name>free_pos</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name><name>wait</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>ev1</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>second</name> <operator>&lt;</operator> <operator>*</operator><call><name><name>wait</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name>doSkip</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>id</name> <operator>=</operator> <call><name><name>ev1</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>second</name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>ev1</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>ev1</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>ll</name></type> <name>exitTime</name> <init>= <expr><name>ctime</name> <operator>+</operator> <name>p</name> <operator>*</operator> <operator>(</operator><call><name><name>q</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>exitTime</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>ev2</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>exitTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>free_pos</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <elseif>else <if>if <condition>(<expr><call><name><name>wait</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <block>{
                    <decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><operator>*</operator><call><name><name>wait</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><call><name><name>free_pos</name><operator>.</operator><name>upper_bound</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name><name>free_pos</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                    <block>{
                        <decl_stmt><decl><type><name>ll</name></type> <name>exitTime</name> <init>= <expr><name>ctime</name> <operator>+</operator> <name>p</name> <operator>*</operator> <operator>(</operator><call><name><name>q</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>exitTime</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>ev2</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>exitTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>free_pos</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>wait</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>wait</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then></if></elseif></if>
            }</block></then></if>
        }</block></then></if>

        <if>if <condition>(<expr><name>doEv1</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>doSkip</name></expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name>ll</name></type> <name>ctime</name> <init>= <expr><call><name><name>ev1</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>first</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><call><name><name>ev1</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>second</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>ev1</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>ev1</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name><name>free_pos</name><operator>.</operator><name>upper_bound</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name><name>free_pos</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block>{
                <decl_stmt><decl><type><name>ll</name></type> <name>exitTime</name> <init>= <expr><name>ctime</name> <operator>+</operator> <name>p</name></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name><name>q</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name>exitTime</name> <operator>=</operator> <call><name><name>q</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>second</name> <operator>+</operator> <name>p</name></expr>;</expr_stmt></block></then></if>
                <expr_stmt><expr><call><name><name>ev2</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>exitTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>exitTime</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>free_pos</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else
                <block type="pseudo"><expr_stmt><expr><call><name><name>wait</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
        }</block></then></if>
    }</block></while>
    <for>for <control>(<init><decl><type><name>auto</name></type> <name>it</name> <range>: <expr><name>ans</name></expr></range></decl></init>)</control>
        <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>it</name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block></for>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
