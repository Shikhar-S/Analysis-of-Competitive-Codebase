<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29178919_62996845.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ld</name></cpp:macro> <cpp:value>long double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>ll</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>'\n'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIME</name></cpp:macro> <cpp:value>1.0*clock()/CLOCKS_PER_SEC</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>mt19937</name></type> <name>gen</name><argument_list>(<argument><expr><call><name><name>chrono</name><operator>::</operator><name>system_clock</name><operator>::</operator><name>now</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>time_since_epoch</name><argument_list>()</argument_list></call><operator>.</operator><call><name>count</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">3e5</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>M</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>FFTM</name> <init>= <expr><literal type="number">998244353</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name><name>t</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>res</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>

<function><name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LOCAL</name></cpp:ifdef>
    <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"input.txt"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"output.txt"</literal></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<comment type="line">//    freopen("drone.in", "r", stdin);</comment>
<comment type="line">//    freopen("drone.out", "w", stdout);</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>p</name></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
    <decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>q</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>q2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>all</name></decl>;</decl_stmt><expr_stmt><expr><call><name><name>all</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>cur</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>insert</name></name><argument_list>( <argument><expr><block>{<expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>i</name></expr>}</block></expr>}</block></expr></argument> )</argument_list></call></expr>;</expr_stmt></block></for>
    <while>while <condition>(<expr><operator>!</operator><call><name><name>q</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>tp</name> <init>= <expr><call><name><name>q</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name><name>S</name><operator>.</operator><name>F</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ll</name></type> <name>T</name> <init>= <expr><call><name><name>q</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>F</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><call><name><name>q</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name><name>S</name><operator>.</operator><name>S</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>q</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">//        cerr &lt;&lt; tp &lt;&lt; ' ' &lt;&lt; T &lt;&lt; ' ' &lt;&lt; j &lt;&lt; ' ' &lt;&lt; q2.size() &lt;&lt; endl;</comment>
        <if>if <condition>(<expr><name>tp</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><call><name><name>all</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <while>while <condition>(<expr><operator>!</operator><call><name><name>q2</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{
                <decl_stmt><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><call><name><name>q2</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>F</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>ll</name></type> <name>tm</name> <init>= <expr><call><name><name>q2</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>S</name></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><operator>!</operator><call><name><name>all</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><call><name><name>all</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>&lt;</operator> <name>i</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
                <expr_stmt><expr><name>cur</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>p</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>insert</name></name><argument_list>( <argument><expr><block>{<expr><name>cur</name></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><name>i</name></expr>}</block></expr>}</block></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>q2</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>q2</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>all</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>res</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>
            }</block></while>
        }</block></then>
        <elseif>else <if>if <condition>(<expr><name>tp</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
            <if>if <condition>(<expr><call><name><name>all</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>||</operator> <operator>(</operator><operator>*</operator><call><name><name>all</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>&gt;</operator> <name>j</name></expr>)</condition><then><block>{
                <expr_stmt><expr><name>cur</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>T</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>p</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>all</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>res</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>insert</name></name><argument_list>( <argument><expr><block>{<expr><name>cur</name></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><name>j</name></expr>}</block></expr>}</block></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <block type="pseudo"><expr_stmt><expr><call><name><name>q2</name><operator>.</operator><name>insert</name></name><argument_list>( <argument><expr><block>{<expr><name>j</name></expr>, <expr><name>T</name></expr>}</block></expr></argument> )</argument_list></call></expr>;</expr_stmt></block></else></if>
        }</block></then></if></elseif></if>
    }</block></while>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>res</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block></for>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
