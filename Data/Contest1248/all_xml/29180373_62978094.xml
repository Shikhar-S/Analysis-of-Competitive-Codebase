<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29180373_62978094.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>void</name></type> <name>__print</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <name>x</name></expr>;</expr_stmt>}</block></function>
<function><type><name>void</name></type> <name>__print</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <name>x</name></expr>;</expr_stmt>}</block></function>
<function><type><name>void</name></type> <name>__print</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <name>x</name></expr>;</expr_stmt>}</block></function>
<function><type><name>void</name></type> <name>__print</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <name>x</name></expr>;</expr_stmt>}</block></function>
<function><type><name>void</name></type> <name>__print</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <name>x</name></expr>;</expr_stmt>}</block></function>
<function><type><name>void</name></type> <name>__print</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <name>x</name></expr>;</expr_stmt>}</block></function>
<function><type><name>void</name></type> <name>__print</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <name>x</name></expr>;</expr_stmt>}</block></function>
<function><type><name>void</name></type> <name>__print</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <name>x</name></expr>;</expr_stmt>}</block></function>
<function><type><name>void</name></type> <name>__print</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <name>x</name></expr>;</expr_stmt>}</block></function>
<function><type><name>void</name></type> <name>__print</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <literal type="char">'\''</literal> <operator>&lt;&lt;</operator> <name>x</name> <operator>&lt;&lt;</operator> <literal type="char">'\''</literal></expr>;</expr_stmt>}</block></function>
<function><type><name>void</name></type> <name>__print</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{<expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <literal type="char">'\"'</literal> <operator>&lt;&lt;</operator> <name>x</name> <operator>&lt;&lt;</operator> <literal type="char">'\"'</literal></expr>;</expr_stmt>}</block></function>
<function><type><name>void</name></type> <name>__print</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>string</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{<expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <literal type="char">'\"'</literal> <operator>&lt;&lt;</operator> <name>x</name> <operator>&lt;&lt;</operator> <literal type="char">'\"'</literal></expr>;</expr_stmt>}</block></function>
<function><type><name>void</name></type> <name>__print</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <operator>(</operator><ternary><condition><expr><name>x</name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>}</block></function>

<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>, <parameter><type><name>typename</name></type> <name>V</name></parameter>&gt;</parameter_list></template>
<type><name>void</name></type> <name>__print</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name>V</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{<expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <literal type="char">'{'</literal></expr>;</expr_stmt> <expr_stmt><expr><call><name>__print</name><argument_list>(<argument><expr><name><name>x</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <literal type="char">','</literal></expr>;</expr_stmt> <expr_stmt><expr><call><name>__print</name><argument_list>(<argument><expr><name><name>x</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <literal type="char">'}'</literal></expr>;</expr_stmt>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name>void</name></type> <name>__print</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{<decl_stmt><decl><type><name>int</name></type> <name>f</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <literal type="char">'{'</literal></expr>;</expr_stmt> <for>for <control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>i</name><operator>:</operator> <name>x</name></expr></init>)</control> <block type="pseudo"><expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <operator>(</operator><ternary><condition><expr><name>f</name><operator>++</operator></expr> ?</condition><then> <expr><literal type="string">","</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr><operator>,</operator> <expr><call><name>__print</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for> <expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <literal type="string">"}"</literal></expr>;</expr_stmt>}</block></function>
<function><type><name>void</name></type> <name>_print</name><parameter_list>()</parameter_list> <block>{<expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <literal type="string">"]\n"</literal></expr>;</expr_stmt>}</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>, <parameter><type><name>typename</name><modifier>...</modifier></type> <name>V</name></parameter>&gt;</parameter_list></template>
<type><name>void</name></type> <name>_print</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>V</name><modifier>...</modifier></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<expr_stmt><expr><call><name>__print</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <if>if <condition>(<expr><sizeof type="pack">sizeof...<argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></sizeof></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal></expr>;</expr_stmt></block></then></if> <expr_stmt><expr><call><name>_print</name><argument_list>(<argument><expr><name>v</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ONLINE_JUDGE</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><name>x</name><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cerr &lt;&lt; "[" &lt;&lt; #x &lt;&lt; "] = ["; _print(x)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><name>x</name><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REP</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = 0; i &lt; (n); i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = (a); i &lt;= (b); i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FORD</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = (a); i &gt;= (b); i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>

<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>ii</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ii</name></expr></argument>&gt;</argument_list></name></type> <name>vii</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>

<function><type><name>int</name></type> <name>mulmd</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>ret</name> <init>= <expr><operator>(</operator><name>a</name> <operator>*</operator> <name>b</name><operator>)</operator> <operator>%</operator> <name>MOD</name></expr></init></decl>;</decl_stmt>
    <return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>ret</name></expr>;</return>
}</block></function>

<function><specifier>inline</specifier> <type><name>int</name></type> <name>power</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>res</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>%</operator> <name>p</name></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>y</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{
        <if>if <condition>(<expr><name>y</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>mulmd</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name>y</name> <operator>=</operator> <name>y</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>mulmd</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>res</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>submd</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>ret</name> <init>= <expr><name>a</name> <operator>-</operator> <name>b</name></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
        <expr_stmt><expr><name>ret</name> <operator>+=</operator> <name>MOD</name></expr>;</expr_stmt>
    }</block></then></if>
    <return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>ret</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>addmd</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>ret</name> <init>= <expr><operator>(</operator><name>a</name> <operator>+</operator> <name>b</name><operator>)</operator> <operator>%</operator> <name>MOD</name></expr></init></decl>;</decl_stmt>
    <return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>ret</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>invPow</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>)</parameter_list><block>{
    <return>return <expr><call><name>power</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>MOD</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>MOD</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">1e5</literal> <operator>+</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>b</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>od1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ev1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>od2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ev2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <macro><name>REP</name><argument_list>(<argument>i</argument>, <argument>n</argument>)</argument_list></macro> <block>{
            <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ev1</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then>
            <else>else <block type="pseudo"><expr_stmt><expr><name>od1</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
        }</block>
        <decl_stmt><decl><type><name>int</name></type> <name>n2</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n2</name></expr>;</expr_stmt>
        <macro><name>REP</name><argument_list>(<argument>i</argument>, <argument>n2</argument>)</argument_list></macro> <block>{
            <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            <if>if<condition>(<expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ev2</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then>
            <else>else <block type="pseudo"><expr_stmt><expr><name>od2</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
        }</block>
        <decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><operator>(</operator><name>ll</name><operator>)</operator><name>ev1</name> <operator>*</operator> <name>ev2</name> <operator>+</operator> <operator>(</operator><name>ll</name><operator>)</operator><name>od1</name> <operator>*</operator> <name>od2</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>

    }</block></while>

}</block></function>

<comment type="block" format="doxygen">/**
    Check out for boundary cases, (n = 1 or n = 0)
    check for integer overflow

**/</comment>

</unit>
