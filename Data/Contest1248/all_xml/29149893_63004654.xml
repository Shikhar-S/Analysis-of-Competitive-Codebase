<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29149893_63004654.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INF</name></cpp:macro> <cpp:value>1000000000000000001LL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inf</name></cpp:macro> <cpp:value>1000000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;int,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pis</name></cpp:macro> <cpp:value>pair&lt;int,string&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pil</name></cpp:macro> <cpp:value>pair&lt;int,ll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>psi</name></cpp:macro> <cpp:value>pair&lt;string,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pll</name></cpp:macro> <cpp:value>pair&lt;ll,ll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pdd</name></cpp:macro> <cpp:value>pair&lt;double,double&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pdb</name></cpp:macro> <cpp:value>pair&lt;double,bool&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pdi</name></cpp:macro> <cpp:value>pair&lt;double,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pid</name></cpp:macro> <cpp:value>pair&lt;int,double&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pidd</name></cpp:macro> <cpp:value>pair&lt;int,pdd&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pddi</name></cpp:macro> <cpp:value>pair&lt;pdd,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pli</name></cpp:macro> <cpp:value>pair&lt;ll,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pdbi</name></cpp:macro> <cpp:value>pair&lt;pdb,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>piii</name></cpp:macro> <cpp:value>pair&lt;int,pii&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro> <cpp:value>1000000007LL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>start</name></cpp:macro> <cpp:value>(1&lt;&lt;20)</cpp:value></cpp:define>
 
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ans</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ans1</name></decl>,<decl><type ref="prev"/><name>ans2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>k</name><index>[<expr><literal type="number">311111</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mink</name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>f</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>,<parameter><decl><type><name>bool</name></type> <name>flag</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>output</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
 
 	<if>if<condition>(<expr><name>flag</name></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><name><name>s</name><index>[<expr><name>x</name></expr>]</index></name> <operator>^=</operator> <name><name>s</name><index>[<expr><name>y</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>s</name><index>[<expr><name>y</name></expr>]</index></name> <operator>^=</operator> <name><name>s</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>s</name><index>[<expr><name>x</name></expr>]</index></name> <operator>^=</operator> <name><name>s</name><index>[<expr><name>y</name></expr>]</index></name></expr>;</expr_stmt>
	}</block></then></if>
 
	<decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>mink</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>  ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>a</name><operator>++</operator></expr>;</expr_stmt>
		}</block></then>
		<else>else
		<block>{
			<expr_stmt><expr><name>a</name><operator>--</operator></expr>;</expr_stmt>
		}</block></else></if>
		<expr_stmt><expr><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
		<if>if<condition>(<expr><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name>mink</name></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>mink</name> <operator>=</operator> <name><name>k</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>output</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		}</block></then>
		<elseif>else <if>if<condition>(<expr><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>mink</name></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>output</name><operator>++</operator></expr>;</expr_stmt>
		}</block></then></if></elseif></if>
	}</block></for>
 
 	<if>if<condition>(<expr><name>flag</name></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><name><name>s</name><index>[<expr><name>x</name></expr>]</index></name> <operator>^=</operator> <name><name>s</name><index>[<expr><name>y</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>s</name><index>[<expr><name>y</name></expr>]</index></name> <operator>^=</operator> <name><name>s</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>s</name><index>[<expr><name>x</name></expr>]</index></name> <operator>^=</operator> <name><name>s</name><index>[<expr><name>y</name></expr>]</index></name></expr>;</expr_stmt>
	}</block></then></if>
 
	<if>if<condition>( <expr><name>output</name> <operator>&gt;</operator> <name>ans</name></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><name>ans</name> <operator>=</operator> <name>output</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>ans1</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>ans2</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<comment type="line">//ios_base::sync_with_stdio(false); cout.tie(NULL);cin.tie(NULL);</comment>
	<comment type="line">//scanf("%d",&amp;T);</comment>
	<comment type="line">//cin&gt;&gt;T;</comment>
	<comment type="line">//while(T--)</comment>
	<comment type="line">//{</comment>
	<comment type="line">//}</comment>
	<comment type="line">//FILE *ifp;</comment>
  	<comment type="line">//ifp = fopen("output.txt","w");</comment>
  	<comment type="line">//ifp = stdin;</comment>
  	<comment type="line">//fscanf(ifp,"%d",&amp;T);</comment>
	<comment type="line">//fclose(ifp);</comment>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>s</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init>  <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>a</name><operator>++</operator></expr>;</expr_stmt></block></then>
		<else>else
			<block type="pseudo"><expr_stmt><expr><name>b</name><operator>++</operator></expr>;</expr_stmt></block></else></if>
	}</block></for>
	<if>if<condition>(<expr><name>a</name><operator>!=</operator><name>b</name></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"0\n1 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></then></if>
	<if>if<condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"1\n1 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></then></if>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr> ;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
		<block>{
			<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then>
				<block type="pseudo"><continue>continue;</continue></block></then>
			<else>else
			<block>{
				<expr_stmt><expr><call><name>f</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
		}</block></for>
	}</block></for>
	<expr_stmt><expr><call><name>f</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n%d %d"</literal></expr></argument>,<argument><expr><name>ans</name></expr></argument>,<argument><expr><name>ans1</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>ans2</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
