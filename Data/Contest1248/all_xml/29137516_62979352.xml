<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29137516_62979352.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
    <using>using <namespace>namespace <name>std</name>;</namespace></using>

    <comment type="block">/*
                      __       ____      __  __      __  _____   __      __       __ __         __         
                     /  \     |    \    |  ||  |    |  ||  __ \ |  |    |  |     /  \  \      /  /                  
                    /    \    |     \   |  ||  |    |  || |_/  ||  |    |  |    /    \  \    /  /                   
                   /  /\  \   |  |\  \  |  ||  |    |  ||  _  / |  |____|  |   /  /\  \  \  /  /                   
                  /  /__\  \  |  | \  \ |  ||  |    |  || | \ \ |   ____   |  /  /__\  \  \/  /                      
                 /  ______  \ |  |  \  \|  | \  \__/  / | |_/  ||  |    |  | /  ______  \    /                       
                /__/      \__\|__|   \_____|  \______/  |_____/ |__|    |__|/__/      \__\__/
                                                         
    */</comment>



    <typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
    <typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>
    <typedef>typedef <type><name>string</name></type> <name>str</name>;</typedef>
    <typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>
    <typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></type> <name>vll</name>;</typedef>
    <typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>str</name></expr></argument>&gt;</argument_list></name></type> <name>vs</name>;</typedef>
    <typedef>typedef <type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>,<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></type> <name>mll</name>;</typedef>
    <typedef>typedef <type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>mii</name>;</typedef>
    <typedef>typedef <type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>msi</name>;</typedef>
    <typedef>typedef <type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>mci</name>;</typedef>
    <typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
    <typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>,<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></type> <name>pll</name>;</typedef>
    

    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro>                 <cpp:value>push_back</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro>                 <cpp:value>make_pair</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro>                 <cpp:value>first</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name></cpp:macro>                 <cpp:value>second</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>forn</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>         <cpp:value>for(ll i = 0; i &lt; n; i++)</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fori</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>        <cpp:value>for(ll i = a; i &lt; b; i++)</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ford</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>        <cpp:value>for(ll i = a; i &gt;=b; i--)</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>input</name><parameter_list>(<parameter><type><name>vec</name></type></parameter>)</parameter_list></cpp:macro>         <cpp:value>for(ll i=0;i&lt;vec.size();cin&gt;&gt;vec[i++]);</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>output</name><parameter_list>(<parameter><type><name>vec</name></type></parameter>)</parameter_list></cpp:macro>        <cpp:value>for(ll i=0;i&lt;vec.size();cout&lt;&lt;vec[i++]);cout&lt;&lt;endl;</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sort</name><parameter_list>(<parameter><type><name>vec</name></type></parameter>)</parameter_list></cpp:macro>       <cpp:value>sort(vec.begin(),vec.end());</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>vec</name></type></parameter>)</parameter_list></cpp:macro>         <cpp:value>vec.size();</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ln</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro>           <cpp:value>s.length();</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mx</name><parameter_list>(<parameter><type><name>vec</name></type></parameter>)</parameter_list></cpp:macro>         <cpp:value>*max(vec.begin(),vec.end())</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mn</name><parameter_list>(<parameter><type><name>vec</name></type></parameter>)</parameter_list></cpp:macro>         <cpp:value>*min(vec.begin(),vec.end())</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sm</name><parameter_list>(<parameter><type><name>vec</name></type></parameter>,<parameter><type><name>k</name></type></parameter>)</parameter_list></cpp:macro>         <cpp:value>accumulate(vec.begin(),vec.end(),k)</cpp:value></cpp:define>

    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mem</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>          <cpp:value>memset(x,0,sizeof(x));</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>test</name></cpp:macro> <cpp:value>int t;     cin &gt;&gt; t; while(t--)</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>        <cpp:value>cout &lt;&lt; "--&gt;" &lt;&lt; #x &lt;&lt; ':' &lt;&lt; x &lt;&lt; "&lt;--"&lt;&lt;endl;</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>deathnote</name><parameter_list>()</parameter_list></cpp:macro>     <cpp:value>ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>maxx</name></cpp:macro>            <cpp:value>1000007</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro>             <cpp:value>1000000007</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod1</name></cpp:macro>            <cpp:value>998244353</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PI</name></cpp:macro>              <cpp:value>3.1415926535897932384626433832795l</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sp</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>           <cpp:value>cout&lt;&lt;fixed&lt;&lt;setprecision(n);</cpp:value></cpp:define>

    
    <function><type><name>ll</name></type> <name>power</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>p</name></decl></parameter>)</parameter_list><block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>res</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>%</operator> <name>p</name></expr>;</expr_stmt>
        <while>while <condition>(<expr><name>y</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block>{
            <if>if <condition>(<expr><name>y</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>res</name><operator>*</operator><name>x</name><operator>)</operator> <operator>%</operator> <name>p</name></expr>;</expr_stmt></block></then></if>
            <expr_stmt><expr><name>y</name> <operator>=</operator> <name>y</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name><operator>*</operator><name>x</name><operator>)</operator> <operator>%</operator> <name>p</name></expr>;</expr_stmt>
        }</block></while>
        <return>return <expr><name>res</name></expr>;</return>
    }</block></function>

    <function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
        <expr_stmt><expr><call><name>deathnote</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ll</name></type> <name>t</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
        <while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition><block>{
            <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>;</decl_stmt>
            <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>vll</name></type> <name>p</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>input</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>ll</name></type> <name>m</name></decl>;</decl_stmt>
            <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>m</name></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>vll</name></type> <name>q</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>input</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>ll</name></type> <name>x1</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>x2</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>y1</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>y2</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
                <comment type="line">// cout&lt;&lt;p[i]&lt;&lt;" ";</comment>
                <if>if<condition>(<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>%</operator><literal type="number">2</literal></expr>)</condition><then><block>{
                    <expr_stmt><expr><name>y1</name><operator>++</operator></expr>;</expr_stmt>
                }</block></then>
                <else>else<block>{
                    <expr_stmt><expr><name>x1</name><operator>++</operator></expr>;</expr_stmt>
                }</block></else></if>
            }</block></for>
            <comment type="line">// cout&lt;&lt;endl;</comment>
            <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>m</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
                <comment type="line">// cout&lt;&lt;q[i]&lt;&lt;" ";</comment>
                <if>if<condition>(<expr><name><name>q</name><index>[<expr><name>i</name></expr>]</index></name><operator>%</operator><literal type="number">2</literal></expr>)</condition><then><block>{
                    <expr_stmt><expr><name>y2</name><operator>++</operator></expr>;</expr_stmt>
                }</block></then>
                <else>else<block>{
                    <expr_stmt><expr><name>x2</name><operator>++</operator></expr>;</expr_stmt>
                }</block></else></if>
            }</block></for>
            <comment type="line">// cout&lt;&lt;endl;</comment>
            <comment type="line">// cout&lt;&lt;x1&lt;&lt;" "&lt;&lt;x2&lt;&lt;" "&lt;&lt;y1&lt;&lt;" "&lt;&lt;y2&lt;&lt;" ";</comment>
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>x1</name><operator>*</operator><name>x2</name><operator>+</operator><name>y1</name><operator>*</operator><name>y2</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
        }</block></while>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></function></unit>
