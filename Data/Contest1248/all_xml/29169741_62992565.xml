<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29169741_62992565.cpp"><comment type="line">// Author: Tyler Wang</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;array&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bitset&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cctype&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;chrono&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdlib&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;deque&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;functional&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;initializer_list&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iomanip&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iterator&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;numeric&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;optional&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;random&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string_view&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tuple&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;type_traits&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type> <name>os</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name><name>optional</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></name><modifier>&amp;</modifier></type> <name>opt</name></decl></parameter>)</parameter_list> <block>{
  <return>return <expr><ternary><condition><expr><name>opt</name></expr> ?</condition><then> <expr><name>os</name> <operator>&lt;&lt;</operator> <operator>*</operator><name>opt</name></expr> </then><else>: <expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">"nullopt"</literal></expr></else></ternary></expr>;</return>
}</block></function>

<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T1</name></parameter>, <parameter><type><name>typename</name></type> <name>T2</name></parameter>&gt;</parameter_list></template>
<type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type> <name>os</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>T1</name></expr></argument>, <argument><expr><name>T2</name></expr></argument>&gt;</argument_list></name></name><modifier>&amp;</modifier></type> <name>p</name></decl></parameter>)</parameter_list> <block>{
  <return>return <expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="char">'{'</literal> <operator>&lt;&lt;</operator> <name><name>p</name><operator>.</operator><name>first</name></name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal> <operator>&lt;&lt;</operator> <name><name>p</name><operator>.</operator><name>second</name></name> <operator>&lt;&lt;</operator> <literal type="char">'}'</literal></expr>;</return>
}</block></function>

<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>Container</name></parameter>,
          <parameter><type><name><name>std</name><operator>::</operator><name><name>enable_if_t</name><argument_list type="generic">&lt;<argument><expr><operator>!</operator><name><name>std</name><operator>::</operator><name><name>is_convertible_v</name><argument_list type="generic">&lt;<argument><expr><name>Container</name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>string_view</name></name></expr></argument>&gt;</argument_list></name></name></expr></argument>,
                           <argument><expr><name>typename</name> <name><name>Container</name><operator>::</operator><name>const_iterator</name></name></expr></argument>&gt;</argument_list></name></name></type><parameter><type><modifier>*</modifier></type> <init>= <expr><literal type="null">nullptr</literal></expr></init></parameter></parameter>&gt;</parameter_list></template>
<type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type> <name>os</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Container</name><modifier>&amp;</modifier></type> <name>c</name></decl></parameter>)</parameter_list> <block>{
  <expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="char">'{'</literal></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><call><name><name>c</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>it</name> <operator>!=</operator> <call><name><name>c</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>it</name></expr></incr>)</control> <block>{
    <if>if <condition>(<expr><name>it</name> <operator>!=</operator> <call><name><name>c</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <operator>*</operator><name>it</name></expr>;</expr_stmt>
  }</block></for>
  <return>return <expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="char">'}'</literal></expr>;</return>
}</block></function>

<namespace>namespace <name>detail</name> <block>{

<function><template>template <parameter_list>&lt;<parameter><type><name>int</name></type> <name>I</name></parameter>, <parameter><type><name>typename</name><modifier>...</modifier></type> <name>Ts</name></parameter>&gt;</parameter_list></template>
<type><name>void</name></type> <name>print_tuple</name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type> <name>os</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>Ts</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name></name><modifier>&amp;</modifier></type> <name>t</name></decl></parameter>)</parameter_list> <block>{
  <assert type="static">static_assert<argument_list>(<argument><expr><literal type="number">0</literal> <operator>&lt;=</operator> <name>I</name> <operator>&amp;&amp;</operator> <name>I</name> <operator>&lt;=</operator> <sizeof type="pack">sizeof...<argument_list>(<argument><expr><name>Ts</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list>;</assert>
  <if>if constexpr <condition>(<expr><name>I</name> <operator>!=</operator> <sizeof type="pack">sizeof...<argument_list>(<argument><expr><name>Ts</name></expr></argument>)</argument_list></sizeof></expr>)</condition><then> <block>{
    <if>if constexpr <condition>(<expr><name>I</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <call><name><name>std</name><operator>::</operator><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>I</name></expr></argument>&gt;</argument_list></name></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>print_tuple</name><argument_list type="generic">&lt;<argument><expr><name>I</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>os</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
}</block></function>

}</block></namespace>  <comment type="line">// namespace detail</comment>

<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>typename</name><modifier>...</modifier></type> <name>Ts</name></parameter>&gt;</parameter_list></template>
<type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type> <name>os</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>Ts</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name></name><modifier>&amp;</modifier></type> <name>t</name></decl></parameter>)</parameter_list> <block>{
  <expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="char">'{'</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>detail</name><operator>::</operator><name><name>print_tuple</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name></name><argument_list>(<argument><expr><name>os</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="char">'}'</literal></expr>;</return>
}</block></function>

<namespace>namespace <name>detail</name> <block>{

<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name>void</name></type> <name>print</name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>string_view</name></name></type> <name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T</name><modifier>&amp;</modifier></type> <name>val</name></decl></parameter>)</parameter_list> <block>{
  <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cerr</name></name> <operator>&lt;&lt;</operator> <name>name</name> <operator>&lt;&lt;</operator> <literal type="string">" = "</literal> <operator>&lt;&lt;</operator> <name>val</name> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt>
}</block></function>

<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T1</name></parameter>, <parameter><type><name>typename</name><modifier>...</modifier></type> <name>Ts</name></parameter>&gt;</parameter_list></template>
<type><name>void</name></type> <name>print</name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>string_view</name></name></type> <name>names</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T1</name><modifier>&amp;</modifier></type> <name>val1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Ts</name><modifier>&amp;</modifier><modifier>...</modifier></type> <name>vals</name></decl></parameter>)</parameter_list> <block>{
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>paren</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name><name>names</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
    <if>if <condition>(<expr><name><name>names</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'('</literal> <operator>||</operator> <name><name>names</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'{'</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><operator>++</operator><name>paren</name></expr>;</expr_stmt>
    }</block></then> <elseif>else <if>if <condition>(<expr><name><name>names</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">')'</literal> <operator>||</operator> <name><name>names</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'}'</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><operator>--</operator><name>paren</name></expr>;</expr_stmt>
    }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name><name>names</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">','</literal> <operator>&amp;&amp;</operator> <name>paren</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cerr</name></name> <operator>&lt;&lt;</operator> <call><name><name>names</name><operator>.</operator><name>substr</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">" = "</literal> <operator>&lt;&lt;</operator> <name>val1</name> <operator>&lt;&lt;</operator> <literal type="char">','</literal></expr>;</expr_stmt>
      <return>return <expr><call><name>print</name><argument_list>(<argument><expr><call><name><name>names</name><operator>.</operator><name>substr</name></name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>vals</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if></elseif></if>
  }</block></for>
}</block></function>

<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name><modifier>...</modifier></type> <name>Ts</name></parameter>&gt;</parameter_list></template>
<type><name>void</name></type> <name>print</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>string_view</name></name></type> <name>names</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Ts</name><modifier>&amp;</modifier><modifier>...</modifier></type> <name>vals</name></decl></parameter>)</parameter_list> <block>{
  <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cerr</name></name> <operator>&lt;&lt;</operator> <literal type="string">"  "</literal> <operator>&lt;&lt;</operator> <name>line</name> <operator>&lt;&lt;</operator> <literal type="string">" | "</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><name>names</name></expr></argument>, <argument><expr><name>vals</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

}</block></namespace>  <comment type="line">// namespace detail</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TYLER</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>detail::print(__LINE__, #__VA_ARGS__, __VA_ARGS__)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void)0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<template>template <parameter_list>&lt;<parameter><type><name>int</name></type> <name>Mod</name> <init>= <expr><literal type="number">1</literal><literal type="char">'000'</literal><literal type="number">000</literal><literal type="char">'007&gt;
class mod_int {
  static_assert(Mod &gt; 0);

 public:
  constexpr mod_int() : data_(0) {}

  template &lt;typename T&gt;
  constexpr mod_int(T val) : data_((int)(val % Mod)) {
    static_assert(std::is_integral_v&lt;T&gt;);
    if (data_ &lt; 0) {
      data_ += Mod;
    }
  }

  static constexpr int modulus() { return Mod; }

  template &lt;typename T&gt;
  constexpr explicit operator T() const {
    return (T)data_;
  }

  constexpr mod_int&amp; operator++() {
    if (++data_ == Mod) {
      data_ = 0;
    }
    return *this;
  }

  constexpr mod_int operator++(int) {
    mod_int t = *this;
    ++*this;
    return t;
  }

  constexpr mod_int&amp; operator--() {
    if (data_ == 0) {
      data_ = Mod;
    }
    --data_;
    return *this;
  }

  constexpr mod_int operator--(int) {
    mod_int t = *this;
    --*this;
    return t;
  }

  constexpr mod_int operator+=(mod_int other) {
    if ((data_ += other.data_) &gt;= Mod) {
      data_ -= Mod;
    }
    return *this;
  }

  constexpr mod_int operator-=(mod_int other) {
    if ((data_ -= other.data_) &lt; 0) {
      data_ += Mod;
    }
    return *this;
  }

  constexpr mod_int operator*=(mod_int other) {
    data_ = (int)((long long)data_ * other.data_ % Mod);
    return *this;
  }

  constexpr mod_int operator/=(mod_int other) { return *this *= inv(other); }

  friend constexpr mod_int operator-(mod_int mi) {
    if (mi.data_ != 0) {
      mi.data_ = Mod - mi.data_;
    }
    return mi;
  }

  friend constexpr mod_int operator+(mod_int lhs, mod_int rhs) {
    return lhs += rhs;
  }

  friend constexpr mod_int operator-(mod_int lhs, mod_int rhs) {
    return lhs -= rhs;
  }

  friend constexpr mod_int operator*(mod_int lhs, mod_int rhs) {
    return lhs *= rhs;
  }

  friend constexpr mod_int operator/(mod_int lhs, mod_int rhs) {
    return lhs /= rhs;
  }

  friend constexpr bool operator==(mod_int lhs, mod_int rhs) {
    return lhs.data_ == rhs.data_;
  }

  friend constexpr bool operator!=(mod_int lhs, mod_int rhs) {
    return lhs.data_ != rhs.data_;
  }

  friend constexpr bool operator&lt;(mod_int lhs, mod_int rhs) {
    return lhs.data_ &lt; rhs.data_;
  }

  friend constexpr bool operator&lt;=(mod_int lhs, mod_int rhs) {
    return lhs.data_ &lt;= rhs.data_;
  }

  friend constexpr bool operator&gt;(mod_int lhs, mod_int rhs) {
    return lhs.data_ &gt; rhs.data_;
  }

  friend constexpr bool operator&gt;=(mod_int lhs, mod_int rhs) {
    return lhs.data_ &gt;= rhs.data_;
  }

  friend std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, mod_int mi) {
    return os &lt;&lt; mi.data_;
  }

  friend std::istream&amp; operator&gt;&gt;(std::istream&amp; is, mod_int&amp; mi) {
    long long val;
    is &gt;&gt; val;
    mi = mod_int(val);
    return is;
  }

  friend constexpr mod_int inv(mod_int mi) {
    int a = mi.data_, b = Mod;
    int x = 0, xx = 1;
    while (a != 0) {
      int q = b / a;
      int t = a;
      a = b - q * a;
      b = t;
      t = xx;
      xx = x - q * xx;
      x = t;
    }
    return mod_int(x);
  }

  template &lt;typename T&gt;
  friend constexpr mod_int pow(mod_int base, T expo) {
    static_assert(std::is_integral_v&lt;T&gt;);
    if (expo &lt; 0) {
      base = inv(base);
      expo = -expo;
    }
    mod_int power = 1;
    for (; expo != 0; expo &gt;&gt;= 1) {
      if (expo &amp; 1) {
        power *= base;
      }
      base *= base;
    }
    return power;
  }

 private:
  int data_;
};

int main() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(nullptr);
  std::cout.precision(12);
  std::cerr.precision(12);
  std::mt19937 rng((std::uint_fast32_t)std::chrono::high_resolution_clock::now()
                       .time_since_epoch()
                       .count());
  int n, m;
  cin &gt;&gt; n &gt;&gt; m;
  if (n &lt; m) {
    swap(n, m);
  }
  vector&lt;vector&lt;mod_int&lt;&gt;&gt;&gt; dp(n, vector&lt;mod_int&lt;&gt;&gt;(2));
  dp[0][0] = 2;
  for (int i = 1; i &lt; n; ++i) {
    dp[i][0] = dp[i - 1][0] + dp[i - 1][1];
    dp[i][1] = dp[i - 1][0];
  }
  debug(dp);
  mod_int&lt;&gt; ans =
      (dp[n - 1][0] + dp[n - 1][1]) + (dp[m - 1][0] + dp[m - 1][1]) - 2;
  cout &lt;&lt; ans &lt;&lt; '</literal><operator>\</operator><name>n</name><literal type="char">'</literal></expr></init></parameter></parameter_list></template>;
  return 0;
}
</unit>
