<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29170209_63000506.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>INF</name> <init>= <expr><literal type="number">0x3f3f3f3f3f3f3f3fll</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name> <init>= <expr><literal type="number">6e5</literal><operator>+</operator><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>mod</name> <init>= <expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<struct>struct <name>Tree</name><block>{<public type="default">
    <decl_stmt><decl><type><name>int</name></type> <name>mi</name></decl>, <decl><type ref="prev"/><name>lz</name></decl>, <decl><type ref="prev"/><name>pos</name></decl>, <decl><type ref="prev"/><name>cnt</name></decl>;</decl_stmt>
</public>}</block><decl><name><name>T</name><index>[<expr><name>maxn</name><operator>&lt;&lt;</operator><literal type="number">2</literal></expr>]</index></name></decl>;</struct>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mid</name></cpp:macro> <cpp:value>((l+r)&gt;&gt;1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ls</name></cpp:macro> <cpp:value>(u&lt;&lt;1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rs</name></cpp:macro> <cpp:value>(u&lt;&lt;1|1)</cpp:value></cpp:define>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>build</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list><block>{
    <expr_stmt><expr><name><name>T</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>lz</name> <operator>=</operator> <name><name>T</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>mi</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>T</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>pos</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>T</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>cnt</name> <operator>=</operator> <name>r</name><operator>-</operator><name>l</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>l</name> <operator>==</operator> <name>r</name></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then></if>
    <expr_stmt><expr><call><name>build</name><argument_list>(<argument><expr><name>ls</name></expr></argument>,<argument><expr><name>l</name></expr></argument>,<argument><expr><name>mid</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>build</name><argument_list>(<argument><expr><name>rs</name></expr></argument>,<argument><expr><name>mid</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>pushup</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><name><name>T</name><index>[<expr><name>ls</name></expr>]</index></name><operator>.</operator><name>mi</name> <operator>==</operator> <name><name>T</name><index>[<expr><name>rs</name></expr>]</index></name><operator>.</operator><name>mi</name></expr>)</condition><then><block>{
        <expr_stmt><expr><name><name>T</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>mi</name> <operator>=</operator> <name><name>T</name><index>[<expr><name>ls</name></expr>]</index></name><operator>.</operator><name>mi</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>T</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>cnt</name> <operator>=</operator> <name><name>T</name><index>[<expr><name>ls</name></expr>]</index></name><operator>.</operator><name>cnt</name> <operator>+</operator> <name><name>T</name><index>[<expr><name>rs</name></expr>]</index></name><operator>.</operator><name>cnt</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>T</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>pos</name> <operator>=</operator> <name><name>T</name><index>[<expr><name>rs</name></expr>]</index></name><operator>.</operator><name>pos</name></expr>;</expr_stmt>
    }</block></then><else>else<block>{
        <decl_stmt><decl><type><name>int</name></type> <name>lz</name> <init>= <expr><name><name>T</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>lz</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>T</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>T</name><index>[<expr><name>ls</name></expr>]</index></name><operator>.</operator><name>mi</name> <operator>&gt;</operator> <name><name>T</name><index>[<expr><name>rs</name></expr>]</index></name><operator>.</operator><name>mi</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>T</name><index>[<expr><name>rs</name></expr>]</index></name></expr> </then><else>: <expr><name><name>T</name><index>[<expr><name>ls</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>T</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>lz</name> <operator>=</operator> <name>lz</name></expr>;</expr_stmt>
    }</block></else></if>
}</block></function>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>pushdown</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><name><name>T</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>lz</name></expr>)</condition><then><block>{
        <expr_stmt><expr><name><name>T</name><index>[<expr><name>ls</name></expr>]</index></name><operator>.</operator><name>lz</name> <operator>+=</operator> <name><name>T</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>lz</name></expr><operator>,</operator> <expr><name><name>T</name><index>[<expr><name>ls</name></expr>]</index></name><operator>.</operator><name>mi</name> <operator>+=</operator> <name><name>T</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>lz</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>T</name><index>[<expr><name>rs</name></expr>]</index></name><operator>.</operator><name>lz</name> <operator>+=</operator> <name><name>T</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>lz</name></expr><operator>,</operator> <expr><name><name>T</name><index>[<expr><name>rs</name></expr>]</index></name><operator>.</operator><name>mi</name> <operator>+=</operator> <name><name>T</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>lz</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>T</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>lz</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>change</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>L</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>R</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><name>L</name><operator>&lt;=</operator><name>l</name><operator>&amp;&amp;</operator><name>r</name><operator>&lt;=</operator><name>R</name></expr>)</condition><then><block>{
        <expr_stmt><expr><name><name>T</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>lz</name> <operator>+=</operator> <name>v</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>T</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>mi</name> <operator>+=</operator> <name>v</name></expr>;</expr_stmt>
        <return>return;</return>
    }</block></then></if>
    <expr_stmt><expr><call><name>pushdown</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>L</name><operator>&lt;=</operator><name>mid</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>change</name><argument_list>(<argument><expr><name>ls</name></expr></argument>,<argument><expr><name>l</name></expr></argument>,<argument><expr><name>mid</name></expr></argument>,<argument><expr><name>L</name></expr></argument>,<argument><expr><name>R</name></expr></argument>,<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    <if>if<condition>(<expr><name>R</name><operator>&gt;</operator><name>mid</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>change</name><argument_list>(<argument><expr><name>rs</name></expr></argument>,<argument><expr><name>mid</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><name>L</name></expr></argument>,<argument><expr><name>R</name></expr></argument>,<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    <expr_stmt><expr><call><name>pushup</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<decl_stmt><decl><type><name>Tree</name></type> <name>nod</name></decl>;</decl_stmt>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>query</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>L</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>R</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><name>L</name><operator>&lt;=</operator><name>l</name><operator>&amp;&amp;</operator><name>r</name><operator>&lt;=</operator><name>R</name></expr>)</condition><then><block>{
        <if>if<condition>(<expr><name><name>T</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>mi</name> <operator>&lt;</operator> <name><name>nod</name><operator>.</operator><name>mi</name></name></expr>)</condition><then><block>{
            <expr_stmt><expr><name>nod</name> <operator>=</operator> <name><name>T</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></then><elseif>else <if>if<condition>(<expr><name><name>T</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>mi</name> <operator>==</operator> <name><name>nod</name><operator>.</operator><name>mi</name></name></expr>)</condition><then><block>{
            <expr_stmt><expr><name><name>nod</name><operator>.</operator><name>pos</name></name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name><name>nod</name><operator>.</operator><name>pos</name></name></expr></argument>, <argument><expr><name><name>T</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>nod</name><operator>.</operator><name>cnt</name></name> <operator>+=</operator> <name><name>T</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>cnt</name></expr>;</expr_stmt>
        }</block></then></if></elseif></if>
        <return>return;</return>
    }</block></then></if>
    <expr_stmt><expr><call><name>pushdown</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>L</name><operator>&lt;=</operator><name>mid</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>query</name><argument_list>(<argument><expr><name>ls</name></expr></argument>,<argument><expr><name>l</name></expr></argument>,<argument><expr><name>mid</name></expr></argument>,<argument><expr><name>L</name></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    <if>if<condition>(<expr><name>R</name><operator>&gt;</operator><name>mid</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>query</name><argument_list>(<argument><expr><name>rs</name></expr></argument>,<argument><expr><name>mid</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><name>L</name></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    <expr_stmt><expr><call><name>pushup</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>N</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>S</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>

<function><specifier>inline</specifier> <type><name>Tree</name></type> <name>query</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>R</name></decl></parameter>)</parameter_list><block>{
    <expr_stmt><expr><name><name>nod</name><operator>.</operator><name>mi</name></name> <operator>=</operator> <name>INF</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>query</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>N</name></expr></argument>,<argument><expr><name>L</name></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>nod</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>dbg</name><parameter_list>()</parameter_list><block>{
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d "</literal></expr></argument>, <argument><expr><call><name>query</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>mi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>s</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>N</name> <operator>=</operator> <literal type="number">2</literal><operator>*</operator><name>n</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>build</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>N</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><name><name>S</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>S</name><index>[<expr><name>i</name><operator>+</operator><name>n</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'('</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>change</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>N</name></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><name>N</name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>change</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>N</name></expr></argument>,<argument><expr><name>i</name><operator>+</operator><name>n</name></expr></argument>,<argument><expr><name>N</name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr><name>i</name><operator>+</operator><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">//        printf("%d ", query(i,i).mi);</comment>
    }</block></for>
    <if>if<condition>(<expr><call><name>query</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call><operator>.</operator><name>mi</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
        <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"0\n1 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>
    <decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rl</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>rr</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <decl_stmt><decl><type><name>Tree</name></type> <name>tmp</name> <init>= <expr><call><name>query</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>i</name><operator>+</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name><name>S</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then><block>{
            <if>if<condition>(<expr><name><name>tmp</name><operator>.</operator><name>mi</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                <if>if<condition>(<expr><name><name>tmp</name><operator>.</operator><name>cnt</name></name> <operator>&gt;</operator> <name>ans</name></expr>)</condition><then><block>{
                    <expr_stmt><expr><name>ans</name> <operator>=</operator> <name><name>tmp</name><operator>.</operator><name>cnt</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>rl</name> <operator>=</operator> <name>rr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
        }</block></then><else>else<block>{
            <if>if<condition>(<expr><name><name>tmp</name><operator>.</operator><name>mi</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block>{
                <expr_stmt><expr><call><name>change</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>N</name></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><name><name>tmp</name><operator>.</operator><name>pos</name></name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>Tree</name></type> <name>tmp2</name> <init>= <expr><call><name>query</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>i</name><operator>+</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>tmp2</name><operator>.</operator><name>mi</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if<condition>(<expr><name><name>tmp2</name><operator>.</operator><name>cnt</name></name> <operator>&gt;</operator> <name>ans</name></expr>)</condition><then><block>{
                    <expr_stmt><expr><name>ans</name> <operator>=</operator> <name><name>tmp2</name><operator>.</operator><name>cnt</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>rl</name> <operator>=</operator> <name>i</name></expr><operator>,</operator> <expr><name>rr</name> <operator>=</operator> <name><name>tmp</name><operator>.</operator><name>pos</name></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><call><name>change</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>N</name></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><name><name>tmp</name><operator>.</operator><name>pos</name></name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then><elseif>else <if>if<condition>(<expr><name><name>tmp</name><operator>.</operator><name>mi</name></name> <operator>==</operator> <operator>-</operator><literal type="number">2</literal></expr>)</condition><then><block>{
                <expr_stmt><expr><call><name>change</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>N</name></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><name><name>tmp</name><operator>.</operator><name>pos</name></name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>Tree</name></type> <name>tmp2</name> <init>= <expr><call><name>query</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>i</name><operator>+</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>tmp2</name><operator>.</operator><name>mi</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>change</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>N</name></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><name><name>tmp2</name><operator>.</operator><name>pos</name></name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if<condition>(<expr><name><name>tmp</name><operator>.</operator><name>pos</name></name> <operator>&lt;</operator> <name><name>tmp2</name><operator>.</operator><name>pos</name></name></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><call><name>change</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>N</name></expr></argument>,<argument><expr><name><name>tmp</name><operator>.</operator><name>pos</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name><name>tmp2</name><operator>.</operator><name>pos</name></name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
                <decl_stmt><decl><type><name>Tree</name></type> <name>tmp3</name> <init>= <expr><call><name>query</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>i</name><operator>+</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>tmp3</name><operator>.</operator><name>mi</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if<condition>(<expr><name><name>tmp3</name><operator>.</operator><name>cnt</name></name> <operator>&gt;</operator> <name>ans</name></expr>)</condition><then><block>{
                    <expr_stmt><expr><name>ans</name> <operator>=</operator> <name><name>tmp3</name><operator>.</operator><name>cnt</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>rl</name> <operator>=</operator> <name>i</name></expr><operator>,</operator> <expr><name>rr</name> <operator>=</operator> <name><name>tmp2</name><operator>.</operator><name>pos</name></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><call><name>change</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>N</name></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><name><name>tmp2</name><operator>.</operator><name>pos</name></name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></elseif></if>
        }</block></else></if>
        <expr_stmt><expr><call><name>change</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>N</name></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><name>N</name></expr></argument>,<argument><expr><operator>-</operator><name><name>S</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <if>if<condition>(<expr><name>rl</name> <operator>&gt;</operator> <name>n</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>rl</name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt></block></then></if>
    <if>if<condition>(<expr><name>rr</name> <operator>&gt;</operator> <name>n</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>rr</name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt></block></then></if>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n%d %d\n"</literal></expr></argument>, <argument><expr><name>ans</name></expr></argument>, <argument><expr><name>rl</name></expr></argument>, <argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
