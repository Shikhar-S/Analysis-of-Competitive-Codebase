<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29141044_62995594.cpp"><comment type="line">//#include&lt;cstdio&gt;</comment>
<comment type="line">//#include&lt;cstring&gt;</comment>
<comment type="line">//#include&lt;algorithm&gt;</comment>
<comment type="line">//#include&lt;iostream&gt;</comment>
<comment type="line">//#include&lt;queue&gt;</comment>
<comment type="line">//#include&lt;cmath&gt;</comment>
<comment type="line">//#include&lt;map&gt;</comment>
<comment type="line">//#include&lt;stack&gt;</comment>
<comment type="line">//#include&lt;set&gt;</comment>
<comment type="line">//#include&lt;bitset&gt;</comment>
<comment type="line">//</comment>
<comment type="line">//using namespace std;</comment>
<comment type="line">//typedef long long ll;</comment>
<comment type="line">//typedef unsigned long long ull;</comment>
<comment type="line">//typedef pair&lt;int, int&gt; pii;</comment>
<comment type="line">//#define pb(x) push_back(x)</comment>
<comment type="line">//#define cls(x, val) memset(x, val, sizeof(x))</comment>
<comment type="line">//#define fi first</comment>
<comment type="line">//#define se second</comment>
<comment type="line">//#define mp(x, y) make_pair(x, y)</comment>
<comment type="line">//#define inc(i, l, r) for(int i=l; i&lt;=r; i++)</comment>
<comment type="line">//const int inf = 0x3f3f3f3f;</comment>
<comment type="line">//const int maxn = 2000+10;</comment>
<comment type="line">//int n, m;</comment>
<comment type="line">//int table[maxn][maxn];</comment>
<comment type="line">//int tot = 0;</comment>
<comment type="line">//int dx[4] = {0, -1, 0, 1};</comment>
<comment type="line">//int dy[4] = {-1, 0, 1, 0};</comment>
<comment type="line">//</comment>
<comment type="line">//bool check(int x, int y){</comment>
<comment type="line">//    if(x&lt;=0||x&gt;n||y&lt;=0||y&gt;m) return false;</comment>
<comment type="line">//    return true;</comment>
<comment type="line">//}</comment>
<comment type="line">//</comment>
<comment type="line">//</comment>
<comment type="line">//void dfs(int id){</comment>
<comment type="line">//    if(id == n*m+1){</comment>
<comment type="line">//        int b = 0, w = 0;</comment>
<comment type="line">//        for(int i=1; i&lt;=n; i++){</comment>
<comment type="line">//            for(int j=1; j&lt;=m; j++){</comment>
<comment type="line">//                b = w = 0;</comment>
<comment type="line">//                for(int k=0; k&lt;4; k++){</comment>
<comment type="line">//                    int nx = dx[k]+i;</comment>
<comment type="line">//                    int ny = dy[k]+j;</comment>
<comment type="line">//                    if(check(nx, ny)){</comment>
<comment type="line">//                        if(table[nx][ny] == 1) b++;</comment>
<comment type="line">//                        else w++;</comment>
<comment type="line">//                    }</comment>
<comment type="line">//                }</comment>
<comment type="line">//                if(table[i][j]==1&amp;&amp;b&gt;=2) return;</comment>
<comment type="line">//                if(table[i][j]==2&amp;&amp;w&gt;=2) return;</comment>
<comment type="line">//            }</comment>
<comment type="line">//        }</comment>
<comment type="line">//        tot += 1;</comment>
<comment type="line">//        return ;</comment>
<comment type="line">//    }</comment>
<comment type="line">//    int row, col;</comment>
<comment type="line">//    if(id%m == 0){</comment>
<comment type="line">//        row = id/m;</comment>
<comment type="line">//        col = m;</comment>
<comment type="line">//    }</comment>
<comment type="line">//    else {</comment>
<comment type="line">//        row = id/m+1;</comment>
<comment type="line">//        col = id%m;</comment>
<comment type="line">//    }</comment>
<comment type="line">//    int black = 0, white = 0;</comment>
<comment type="line">//    for(int i=0; i&lt;2; i++){</comment>
<comment type="line">//        int nx = dx[i]+row;</comment>
<comment type="line">//        int ny = dy[i]+col;</comment>
<comment type="line">//        if(check(nx, ny)){</comment>
<comment type="line">//            if(table[nx][ny] == 1){</comment>
<comment type="line">//                black++;</comment>
<comment type="line">//            }</comment>
<comment type="line">//            else if(table[nx][ny] == 2)white++;</comment>
<comment type="line">//        }</comment>
<comment type="line">//    }</comment>
<comment type="line">//</comment>
<comment type="line">//    if(white&lt;=1&amp;&amp;black&lt;=1){</comment>
<comment type="line">//        table[row][col] = 1;</comment>
<comment type="line">//        dfs(id+1);</comment>
<comment type="line">//        table[row][col] = 2;</comment>
<comment type="line">//        dfs(id+1);</comment>
<comment type="line">//    }</comment>
<comment type="line">//    else if(black&gt;=2){</comment>
<comment type="line">//        table[row][col] = 2;</comment>
<comment type="line">//        dfs(id+1);</comment>
<comment type="line">//    }</comment>
<comment type="line">//    else if(white &gt;=2){</comment>
<comment type="line">//        table[row][col] = 1;</comment>
<comment type="line">//        dfs(id+1);</comment>
<comment type="line">//    }</comment>
<comment type="line">//}</comment>
<comment type="line">//</comment>
<comment type="line">//</comment>
<comment type="line">//int main(){</comment>
<comment type="line">//    ios::sync_with_stdio(false);</comment>
<comment type="line">//    cin&gt;&gt;n&gt;&gt;m;</comment>
<comment type="line">//    cls(table, -1);</comment>
<comment type="line">//    dfs(1);</comment>
<comment type="line">//    cout&lt;&lt;tot&lt;&lt;endl;</comment>
<comment type="line">//</comment>
<comment type="line">//    return 0;</comment>
<comment type="line">//}</comment>
<comment type="line">//</comment>
<comment type="line">//</comment>


<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bitset&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ull</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>push_back(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cls</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(x, val, sizeof(x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>make_pair(x, y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inc</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>l</name></type></parameter>, <parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=l; i&lt;=r; i++)</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>inf</name> <init>= <expr><literal type="number">0x3f3f3f3f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name> <init>= <expr><literal type="number">2e5</literal><operator>+</operator><literal type="number">30</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mod</name> <init>= <expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>a</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>b</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>


<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">3</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">100000</literal><operator>+</operator><literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>a</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>a</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr><operator>,</operator> <expr><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">3</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">200000</literal><operator>+</operator><literal type="number">20</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>b</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>b</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt>
    }</block></for>
    <decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>m</name></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>n</name><operator>&gt;</operator><name>m</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    <expr_stmt><expr><name>ans</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><name>ans</name> <operator>=</operator> <operator>(</operator><name>ans</name><operator>+</operator><name><name>a</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt>
    }</block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>m</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><name>ans</name> <operator>=</operator> <operator>(</operator><name>ans</name><operator>+</operator><name><name>b</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>


</unit>
