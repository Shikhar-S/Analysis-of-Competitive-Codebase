<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29179459_63005509.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;functional&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;deque&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nmax_def</name></cpp:macro> <cpp:value>110000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Cmax_def</name></cpp:macro> <cpp:value>2200</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int (i)=0;(i)&lt;(n);(i)++)</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>pll</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>vl</name>;</typedef>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>N</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>N</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>string</name></type> <name>S</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>S</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>brackets_min</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>vi</name></type> <name>brackets</name><argument_list>(<argument><expr><name>N</name></expr></argument>)</argument_list></decl>;</decl_stmt>
	<if>if <condition>(<expr><name><name>S</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition><then>
		<block type="pseudo"><expr_stmt><expr><name><name>brackets</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then>
	<else>else
		<block type="pseudo"><expr_stmt><expr><name><name>brackets</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
	<macro><name>rep</name><argument_list>(<argument>i</argument>, <argument>N - <literal type="number">1</literal></argument>)</argument_list></macro> <block>{
		<expr_stmt><expr><name><name>brackets</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>brackets</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<if>if <condition>(<expr><name><name>S</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name><name>brackets</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block></then>
		<else>else
			<block type="pseudo"><expr_stmt><expr><name><name>brackets</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>--</operator></expr>;</expr_stmt></block></else></if>
		<expr_stmt><expr><name>brackets_min</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>brackets_min</name></expr></argument>, <argument><expr><name><name>brackets</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vi</name></expr></argument>&gt;</argument_list></name></type> <name>min_num</name><argument_list>(<argument><expr><name>N</name></expr></argument>)</argument_list></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>vi</name></type> <name>min_num_tmp</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name>min_num</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>min_num_tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>rep</name><argument_list>(<argument>i</argument>, <argument>N - <literal type="number">1</literal></argument>)</argument_list></macro> <block>{
		<expr_stmt><expr><name>min_num_tmp</name> <operator>=</operator> <name><name>min_num</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<if>if <condition>(<expr><name><name>brackets</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>brackets_min</name></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name><name>min_num_tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block></then>
		<elseif>else <if>if <condition>(<expr><name><name>brackets</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>brackets_min</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name><name>min_num_tmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block></then></if></elseif>
		<elseif>else <if>if <condition>(<expr><name><name>brackets</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>brackets_min</name> <operator>+</operator> <literal type="number">2</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name><name>min_num_tmp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block></then></if></elseif></if>
		<expr_stmt><expr><call><name><name>min_num</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>min_num_tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block>
	<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>bmin</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
	<if>if <condition>(<expr><name><name>brackets</name><index>[<expr><name>N</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
		<macro><name>rep</name><argument_list>(<argument>i</argument>, <argument>N</argument>)</argument_list></macro> <block>{
			<macro><name>rep</name><argument_list>(<argument>j</argument>, <argument>N</argument>)</argument_list></macro> <block>{
				<if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>j</name></expr>)</condition><then>
					<block type="pseudo"><continue>continue;</continue></block></then></if>
				<if>if <condition>(<expr><name><name>S</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>S</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then>
					<block type="pseudo"><continue>continue;</continue></block></then></if>
				<if>if <condition>(<expr><name><name>S</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition><then> <block>{
					<decl_stmt><decl><type><name>int</name></type> <name>bmin</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
					<macro><name>rep</name><argument_list>(<argument>k</argument>, <argument>N</argument>)</argument_list></macro> <block>{
						<decl_stmt><decl><type><name>int</name></type> <name>btmp</name> <init>= <expr><name><name>brackets</name><index>[<expr><name>k</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
						<if>if <condition>(<expr><name>i</name> <operator>&lt;=</operator> <name>k</name> <operator>&amp;&amp;</operator> <name>k</name> <operator>&lt;</operator> <name>j</name></expr>)</condition><then>
							<block type="pseudo"><expr_stmt><expr><name>btmp</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block></then></if>
						<expr_stmt><expr><name>bmin</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>bmin</name></expr></argument>, <argument><expr><name>btmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block>
					<decl_stmt><decl><type><name>int</name></type> <name>anstmp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
					<macro><name>rep</name><argument_list>(<argument>k</argument>, <argument>N</argument>)</argument_list></macro> <block>{
						<decl_stmt><decl><type><name>int</name></type> <name>btmp</name> <init>= <expr><name><name>brackets</name><index>[<expr><name>k</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
						<if>if <condition>(<expr><name>i</name> <operator>&lt;=</operator> <name>k</name> <operator>&amp;&amp;</operator> <name>k</name> <operator>&lt;</operator> <name>j</name></expr>)</condition><then>
							<block type="pseudo"><expr_stmt><expr><name>btmp</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block></then></if>
						<if>if <condition>(<expr><name>bmin</name> <operator>==</operator> <name>btmp</name></expr>)</condition><then>
							<block type="pseudo"><expr_stmt><expr><name>anstmp</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
					}</block>
					<if>if <condition>(<expr><name>ans</name> <operator>&lt;</operator> <name>anstmp</name></expr>)</condition><then> <block>{
						<expr_stmt><expr><name>ans</name> <operator>=</operator> <name>anstmp</name></expr>;</expr_stmt>
						<expr_stmt><expr><name>l</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
						<expr_stmt><expr><name>r</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
					}</block></then></if>
				}</block></then>
				<else>else <block>{
					<decl_stmt><decl><type><name>int</name></type> <name>bmin</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
					<macro><name>rep</name><argument_list>(<argument>k</argument>, <argument>N</argument>)</argument_list></macro> <block>{
						<decl_stmt><decl><type><name>int</name></type> <name>btmp</name> <init>= <expr><name><name>brackets</name><index>[<expr><name>k</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
						<if>if <condition>(<expr><name>i</name> <operator>&lt;=</operator> <name>k</name> <operator>&amp;&amp;</operator> <name>k</name> <operator>&lt;</operator> <name>j</name></expr>)</condition><then>
							<block type="pseudo"><expr_stmt><expr><name>btmp</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block></then></if>
						<expr_stmt><expr><name>bmin</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>bmin</name></expr></argument>, <argument><expr><name>btmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block>
					<decl_stmt><decl><type><name>int</name></type> <name>anstmp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
					<macro><name>rep</name><argument_list>(<argument>k</argument>, <argument>N</argument>)</argument_list></macro> <block>{
						<decl_stmt><decl><type><name>int</name></type> <name>btmp</name> <init>= <expr><name><name>brackets</name><index>[<expr><name>k</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
						<if>if <condition>(<expr><name>i</name> <operator>&lt;=</operator> <name>k</name> <operator>&amp;&amp;</operator> <name>k</name> <operator>&lt;</operator> <name>j</name></expr>)</condition><then>
							<block type="pseudo"><expr_stmt><expr><name>btmp</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block></then></if>
						<if>if <condition>(<expr><name>bmin</name> <operator>==</operator> <name>btmp</name></expr>)</condition><then>
							<block type="pseudo"><expr_stmt><expr><name>anstmp</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
					}</block>
					<if>if <condition>(<expr><name>ans</name> <operator>&lt;</operator> <name>anstmp</name></expr>)</condition><then> <block>{
						<expr_stmt><expr><name>ans</name> <operator>=</operator> <name>anstmp</name></expr>;</expr_stmt>
						<expr_stmt><expr><name>l</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
						<expr_stmt><expr><name>r</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
					}</block></then></if>
				}</block></else></if>
			}</block>
		}</block>

		<macro><name>rep</name><argument_list>(<argument>k</argument>, <argument>N</argument>)</argument_list></macro> <block>{
			<decl_stmt><decl><type><name>int</name></type> <name>btmp</name> <init>= <expr><name><name>brackets</name><index>[<expr><name>k</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>bmin</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>bmin</name></expr></argument>, <argument><expr><name>btmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block>
		<decl_stmt><decl><type><name>int</name></type> <name>anstmp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<macro><name>rep</name><argument_list>(<argument>k</argument>, <argument>N</argument>)</argument_list></macro> <block>{
			<decl_stmt><decl><type><name>int</name></type> <name>btmp</name> <init>= <expr><name><name>brackets</name><index>[<expr><name>k</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>bmin</name> <operator>==</operator> <name>btmp</name></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><name>anstmp</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
		}</block>
		<if>if <condition>(<expr><name>ans</name> <operator>&lt;</operator> <name>anstmp</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>ans</name> <operator>=</operator> <name>anstmp</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>l</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		}</block></then></if>
	}</block></then></if>
	<expr_stmt><expr><name>l</name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>r</name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>l</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name>r</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
