<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29168833_63005451.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>lint</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name><init>=<expr><literal type="number">600</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>l</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>r</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name>la</name></decl>,<decl><type ref="prev"/><name>ra</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>s</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>pmi</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>smi</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>ans</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>work</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sl</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>sr</name></decl></parameter>)</parameter_list>
<block>{
	<expr_stmt><expr><name><name>pmi</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name><name>smi</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">114514</literal></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>s</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr><operator>,</operator><expr><name><name>pmi</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name><name>pmi</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>n</name></expr></init></decl>;</init><condition><expr><name>i</name></expr>;</condition><incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>smi</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name><name>smi</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<if>if<condition>(<expr><name><name>pmi</name><index>[<expr><name>n</name></expr>]</index></name><operator>&gt;=</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ret</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><if>if<condition>(<expr><name><name>pmi</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>s</name><index>[<expr><name>n</name></expr>]</index></name><operator>-</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;=</operator><literal type="number">0</literal><operator>&amp;&amp;</operator><name><name>smi</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;=</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ret</name><operator>++</operator></expr>;</expr_stmt></block></then></if></block></for>
	<if>if<condition>(<expr><name>ret</name><operator>&gt;</operator><name><name>ans</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>ans</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name>ret</name></expr><operator>,</operator><expr><name><name>ans</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name>sl</name></expr><operator>,</operator><expr><name><name>ans</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><name>sr</name></expr>;</expr_stmt></block></then></if>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><name><name>ans</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%s"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><name>str</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<if>if<condition>(<expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'('</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name><name>l</name><index>[<expr><operator>++</operator><name>la</name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name><name>r</name><index>[<expr><operator>++</operator><name>ra</name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></else></if>
	}</block></for>
	<if>if<condition>(<expr><name>la</name><operator>!=</operator><name>ra</name></expr>)</condition><then><block>{<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"1 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><literal type="number">0</literal></expr>;</return>}</block></then></if>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>li</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>li</name><operator>&lt;=</operator><name>la</name></expr>;</condition><incr><expr><name>li</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<for>for<control>(<init><decl><type><name>int</name></type> <name>ri</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>ri</name><operator>&lt;=</operator><name>ra</name></expr>;</condition><incr><expr><name>ri</name><operator>++</operator></expr></incr>)</control>
		<block>{
				<expr_stmt><expr><name><name>a</name><index>[<expr><name><name>r</name><index>[<expr><name>ri</name></expr>]</index></name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name><name>a</name><index>[<expr><name><name>l</name><index>[<expr><name>li</name></expr>]</index></name></expr>]</index></name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>work</name><argument_list>(<argument><expr><name><name>l</name><index>[<expr><name>li</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>r</name><index>[<expr><name>ri</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>a</name><index>[<expr><name><name>r</name><index>[<expr><name>ri</name></expr>]</index></name></expr>]</index></name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name><name>a</name><index>[<expr><name><name>l</name><index>[<expr><name>li</name></expr>]</index></name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
		}</block></for>
	}</block></for>
	<expr_stmt><expr><call><name>work</name><argument_list>(<argument><expr><name><name>l</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>l</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n%d %d\n"</literal></expr></argument>,<argument><expr><name><name>ans</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>ans</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>ans</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
