<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29136575_62991846.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using> 

<comment type="line">// #pragma GCC optimize("Ofast")</comment>
<comment type="line">// #pragma GCC optimize ("unroll-loops")</comment>
<comment type="line">// #pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")</comment>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef> 
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>prarr</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cerr&lt;&lt;#a&lt;&lt;" : ";for(ll i=0;i&lt;n;i++) cerr&lt;&lt;a[i]&lt;&lt;" "; cerr&lt;&lt;endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>prmat</name><parameter_list>(<parameter><type><name>mat</name></type></parameter>,<parameter><type><name>row</name></type></parameter>,<parameter><type><name>col</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cerr&lt;&lt;#mat&lt;&lt;" :\n";for(ll i=0;i&lt;row;i++) {for(ll j=0;j&lt;col;j++) cerr&lt;&lt;mat[i][j]&lt;&lt;"\t";cerr&lt;&lt;endl;}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pr</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dbs(#__VA_ARGS__, __VA_ARGS__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a.begin(),a.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)x.size())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>'\n'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fast_io</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(NULL); cin.tie(NULL)</cpp:value></cpp:define>
<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>dbs</name><parameter_list>(<parameter><decl><type><name>string</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>t</name></decl></parameter>)</parameter_list> <block>{<expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <name>str</name> <operator>&lt;&lt;</operator> <literal type="string">" : "</literal> <operator>&lt;&lt;</operator> <name>t</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>}</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>, <parameter><type><name>class</name><modifier>...</modifier></type> <name>S</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>dbs</name><parameter_list>(<parameter><decl><type><name>string</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>S</name><modifier>...</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<decl_stmt><decl><type><name>ll</name></type> <name>idx</name> <init>= <expr><call><name><name>str</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <call><name><name>str</name><operator>.</operator><name>substr</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">" : "</literal> <operator>&lt;&lt;</operator> <name>t</name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal></expr>;</expr_stmt> <expr_stmt><expr><call><name>dbs</name><argument_list>(<argument><expr><call><name><name>str</name><operator>.</operator><name>substr</name></name><argument_list>(<argument><expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>s</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>prc</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <literal type="string">"["</literal></expr>;</expr_stmt> <for>for <control>(<init><decl><type><name>T</name></type> <name>i</name> <init>= <expr><name>a</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>!=</operator> <name>b</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>a</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal></expr>;</expr_stmt></block></then></if> <expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <operator>*</operator><name>i</name></expr>;</expr_stmt>}</block></for> <expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <literal type="string">"]\n"</literal></expr>;</expr_stmt>}</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>prall</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name>prc</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>inf</name><init>=<expr><literal type="number">1000</literal><operator>*</operator><literal type="number">1000</literal><operator>*</operator><literal type="number">1000</literal><operator>+</operator><literal type="number">9</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>infl</name><init>=<expr><literal type="number">1ll</literal><operator>*</operator><name>inf</name><operator>*</operator><name>inf</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mod</name><init>=<expr><literal type="number">1000</literal><operator>*</operator><literal type="number">1000</literal><operator>*</operator><literal type="number">1000</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>  

<comment type="line">// ----------------------------------------------------------------------------	-------------- </comment>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nax</name><init>=<expr><literal type="number">1e5</literal><operator>+</operator><literal type="number">5</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ll</name></type> <name><name>dp</name><index>[<expr><name>nax</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>exp</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>M</name></decl></parameter>)</parameter_list><block>{
	<decl_stmt><decl><type><name>ll</name></type> <name>ret</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 
	<while>while<condition>(<expr><name>b</name></expr>)</condition><block>{
		<if>if<condition>(<expr><name>b</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name>ret</name><operator>*=</operator><name>a</name></expr>;</expr_stmt> 
			<expr_stmt><expr><name>ret</name><operator>%=</operator><name>M</name></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><name>b</name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr>;</expr_stmt> 
		<expr_stmt><expr><name>a</name><operator>=</operator><literal type="number">1ll</literal><operator>*</operator><name>a</name><operator>*</operator><name>a</name><operator>%</operator><name>M</name></expr>;</expr_stmt> 
	}</block></while>
	<return>return <expr><name>ret</name></expr>;</return> 
}</block></function>
<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>m</name></expr>;</expr_stmt> 
	<expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt> 
	<if>if<condition>(<expr><name>n</name><operator>&gt;</operator><name>m</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if> 
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>m</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><operator>(</operator><name><name>dp</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>+</operator><operator>(</operator><ternary><condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">2</literal></expr>?</condition><then> <expr><name><name>dp</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></then><else>:<expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt> 
		<expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><operator>(</operator><name><name>dp</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>+</operator><operator>(</operator><ternary><condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">2</literal></expr>?</condition><then> <expr><name><name>dp</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></then><else>:<expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt> 
	}</block></for>
	<decl_stmt><decl><type><name>ll</name></type> <name>tot</name><init>=<expr><operator>(</operator><name><name>dp</name><index>[<expr><name>m</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>+</operator><name><name>dp</name><index>[<expr><name>m</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>%</operator><name>mod</name></expr></init></decl>;</decl_stmt> 
	<expr_stmt><expr><name>tot</name><operator>-=</operator><literal type="number">2</literal></expr>;</expr_stmt> 
	<expr_stmt><expr><name>tot</name><operator>+=</operator><operator>(</operator><name><name>dp</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>+</operator><name><name>dp</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt> 
	<expr_stmt><expr><name>tot</name><operator>%=</operator><name>mod</name></expr>;</expr_stmt> 
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>tot</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt> 
}</block></function>


<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<comment type="line">// clock_t beg=clock(); </comment>
	<expr_stmt><expr><name>fast_io</name></expr>;</expr_stmt> 
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>fixed</name> <operator>&lt;&lt;</operator> <call><name>setprecision</name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
	<expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 	
	<comment type="line">// clock_t end=clock(); </comment>
	<comment type="line">// fprintf(stderr, "%lf\n", (double)(end-beg)/(CLOCKS_PER_SEC));</comment>
}</block></function></unit>
