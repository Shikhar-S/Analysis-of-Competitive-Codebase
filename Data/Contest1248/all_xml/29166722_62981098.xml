<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29166722_62981098.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ONLINE_JUDGE</name></cpp:ifndef>
	<expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"E:\\Gokul\\atomic_gpp"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"E:\\Gokul\\atomic_gpp"</literal></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>qo</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>qe</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>po</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>pe</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></type><name>p</name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{
			<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
			<if>if<condition>(<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>%</operator><literal type="number">2</literal></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><name>po</name><operator>++</operator></expr>;</expr_stmt></block></then>
			<else>else
				<block type="pseudo"><expr_stmt><expr><name>pe</name><operator>++</operator></expr>;</expr_stmt></block></else></if>
		}</block></for>
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>m</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></type><name>q</name><argument_list>(<argument><expr><name>m</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>m</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{
			<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>q</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
			<if>if<condition>(<expr><name><name>q</name><index>[<expr><name>i</name></expr>]</index></name><operator>%</operator><literal type="number">2</literal></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><name>qo</name><operator>++</operator></expr>;</expr_stmt></block></then>
			<else>else
				<block type="pseudo"><expr_stmt><expr><name>qe</name><operator>++</operator></expr>;</expr_stmt></block></else></if>
		}</block></for>
		<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>ans</name><init>=<expr><name>qo</name><operator>*</operator><literal type="number">1ll</literal><operator>*</operator><name>po</name><operator>+</operator><name>qe</name><operator>*</operator><literal type="number">1ll</literal><operator>*</operator><name>pe</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><literal type="string">"\n"</literal></expr>;</expr_stmt>
	}</block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
