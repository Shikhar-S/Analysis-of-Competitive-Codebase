<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29179020_62991105.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>long</name> <name>long</name></type> <name>mod</name><init>=<expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<comment type="line">// your code goes here</comment>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>i</name></decl>,<decl><type ref="prev"/><name>memo</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>memo1</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>memo2</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name><name>f</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name></expr>;</expr_stmt>
	<if>if<condition>(<expr><name>n</name><operator>==</operator><literal type="number">1</literal><operator>&amp;&amp;</operator><name>m</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"2"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></then></if>
	<expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>=</operator><literal type="number">3</literal></expr>;</expr_stmt>
	<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">4</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">100000</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><operator>(</operator><name><name>f</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>f</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt></block></for>
	<if>if<condition>(<expr><name>n</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>*</operator><name><name>f</name><index>[<expr><name>m</name></expr>]</index></name><operator>%</operator><name>mod</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></then></if>
	<if>if<condition>(<expr><name>m</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>*</operator><name><name>f</name><index>[<expr><name>n</name></expr>]</index></name><operator>%</operator><name>mod</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></then></if>
	<expr_stmt><expr><name>memo1</name> <operator>=</operator> <name><name>f</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>memo2</name> <operator>=</operator> <name><name>f</name><index>[<expr><name>m</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>memo1</name><operator>+</operator><name>memo2</name><operator>)</operator><operator>%</operator><name>mod</name><operator>)</operator><operator>*</operator><literal type="number">2</literal><operator>%</operator><name>mod</name><operator>+</operator><name>mod</name><operator>-</operator><literal type="number">2</literal><operator>)</operator><operator>%</operator><name>mod</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
