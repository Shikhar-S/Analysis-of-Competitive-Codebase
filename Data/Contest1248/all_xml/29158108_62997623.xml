<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29158108_62997623.cpp"><comment type="block">/*
   we will use dp , our state will be the current number and the state of the previous two numbers .
   state ---&gt; if we changed them or no .
   we need only to check if we can change the current number with the the previous two numbers and
   the next number .
   if it hold the all condition then all contiguous subsequence will also hold .
*/</comment>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><cpp:literal>"O3"</cpp:literal><name>)</name></cpp:pragma>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;complex&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdlib&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>


<comment type="block">/*
#define x real()
#define y imag()
#define angle(a)                (atan2((a).imag(), (a).real()))
#define vec(a,b)                ((b)-(a))
#define same(p1,p2)             (dp(vec(p1,p2),vec(p1,p2)) &lt; EPS)
#define dp(a,b)                 ( (conj(a)*(b)).real() )	// a*b cos(T), if zero -&gt; prep
#define cp(a,b)                 ( (conj(a)*(b)).imag() )	// a*b sin(T), if zero -&gt; parllel
#define length(a)               (hypot((a).imag(), (a).real()))
#define normalize(a)            (a)/length(a)
//#define polar(r,ang)            ((r)*exp(point(0,ang)))  ==&gt; Already added in c++11
#define rotateO(p,ang)          ((p)*exp(point(0,ang)))
#define rotateA(p,ang,about)  (rotateO(vec(about,p),ang)+about)
#define reflectO(v,m)  (conj((v)/(m))*(m))
*/</comment>

<comment type="line">//#define pi 3.141592654</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>forr</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=a;i&lt;=b;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>input</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(0);cin.tie(0);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(1^x)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>PI</name>  <init>= <expr><call><name>acos</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>double</name></expr></argument>,<argument><expr><name>double</name></expr></argument>&gt;</argument_list></name></type><name>pdd</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>long</name></type>  <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type><name>pii</name>;</typedef>
<typedef>typedef <type><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>double</name></expr></argument>&gt;</argument_list></name></type> <name>point</name>;</typedef>

<comment type="line">//int x[8]={1,0,0,-1,-1,-1,1,1};</comment>
<comment type="line">//int y[8]={0,1,-1,0,-1,1,-1,1};</comment>
<comment type="line">//const int N=500009,M=1000000;</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>EPS</name><init>= <expr><literal type="number">1e-9</literal></expr></init></decl>,<decl><type ref="prev"/><name>eps</name><init>=<expr><operator>-</operator><literal type="number">1e9</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>=<expr><literal type="number">100005</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>mod</name><init>=<expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>,<decl><type ref="prev"/><name><name>mem</name><index>[<expr><name>N</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>mem2</name><index>[<expr><name>N</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>ll</name></type> <name>dp</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>p1</name><init>=<expr><literal type="number">2</literal></expr></init></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>p2</name><init>=<expr><literal type="number">2</literal></expr></init></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><name>i</name><operator>&gt;</operator><name>n</name></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
    <decl_stmt><decl><type><name>ll</name><modifier>&amp;</modifier></type><name>ret</name><init>=<expr><name><name>mem</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>p1</name></expr>]</index><index>[<expr><name>p2</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><operator>~</operator><name>ret</name></expr>)</condition><then><block type="pseudo"><return>return <expr><name>ret</name></expr>;</return></block></then></if>
    <expr_stmt><expr><name>ret</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>p1</name><operator>==</operator><literal type="number">0</literal><operator>&amp;&amp;</operator><name>p2</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>ret</name><operator>+=</operator><call><name>dp</name><argument_list>(<argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>p1</name></expr></argument>)</argument_list></call><operator>%</operator><name>mod</name></expr><operator>,</operator><expr><name>ret</name><operator>%=</operator><name>mod</name></expr>;</expr_stmt></block></then>
    <elseif>else <if>if<condition>(<expr><name>p1</name><operator>==</operator><literal type="number">1</literal><operator>&amp;&amp;</operator><name>p2</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>ret</name><operator>+=</operator><call><name>dp</name><argument_list>(<argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>p1</name></expr></argument>)</argument_list></call><operator>%</operator><name>mod</name></expr><operator>,</operator><expr><name>ret</name><operator>%=</operator><name>mod</name></expr>;</expr_stmt></block></then></if></elseif>
    <else>else
    <block>{
        <expr_stmt><expr><name>ret</name><operator>+=</operator><call><name>dp</name><argument_list>(<argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>p1</name></expr></argument>)</argument_list></call><operator>%</operator><name>mod</name></expr><operator>,</operator><expr><name>ret</name><operator>%=</operator><name>mod</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ret</name><operator>+=</operator><call><name>dp</name><argument_list>(<argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>p1</name></expr></argument>)</argument_list></call><operator>%</operator><name>mod</name></expr><operator>,</operator><expr><name>ret</name><operator>%=</operator><name>mod</name></expr>;</expr_stmt>
    }</block></else></if>
    <return>return <expr><name>ret</name></expr>;</return>
}</block></function>


<function><type><name>ll</name></type> <name>dp2</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>p1</name><init>=<expr><literal type="number">2</literal></expr></init></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>p2</name><init>=<expr><literal type="number">2</literal></expr></init></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><name>i</name><operator>&gt;</operator><name>m</name></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
    <decl_stmt><decl><type><name>ll</name><modifier>&amp;</modifier></type><name>ret</name><init>=<expr><name><name>mem2</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>p1</name></expr>]</index><index>[<expr><name>p2</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><operator>~</operator><name>ret</name></expr>)</condition><then><block type="pseudo"><return>return <expr><name>ret</name></expr>;</return></block></then></if>
    <expr_stmt><expr><name>ret</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>p1</name><operator>==</operator><literal type="number">0</literal><operator>&amp;&amp;</operator><name>p2</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>ret</name><operator>+=</operator><call><name>dp2</name><argument_list>(<argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>p1</name></expr></argument>)</argument_list></call><operator>%</operator><name>mod</name></expr><operator>,</operator><expr><name>ret</name><operator>%=</operator><name>mod</name></expr>;</expr_stmt></block></then>
    <elseif>else <if>if<condition>(<expr><name>p1</name><operator>==</operator><literal type="number">1</literal><operator>&amp;&amp;</operator><name>p2</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>ret</name><operator>+=</operator><call><name>dp2</name><argument_list>(<argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>p1</name></expr></argument>)</argument_list></call><operator>%</operator><name>mod</name></expr><operator>,</operator><expr><name>ret</name><operator>%=</operator><name>mod</name></expr>;</expr_stmt></block></then></if></elseif>
    <else>else
    <block>{
        <expr_stmt><expr><name>ret</name><operator>+=</operator><call><name>dp2</name><argument_list>(<argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>p1</name></expr></argument>)</argument_list></call><operator>%</operator><name>mod</name></expr><operator>,</operator><expr><name>ret</name><operator>%=</operator><name>mod</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ret</name><operator>+=</operator><call><name>dp2</name><argument_list>(<argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>p1</name></expr></argument>)</argument_list></call><operator>%</operator><name>mod</name></expr><operator>,</operator><expr><name>ret</name><operator>%=</operator><name>mod</name></expr>;</expr_stmt>
    }</block></else></if>
    <return>return <expr><name>ret</name></expr>;</return>
}</block></function>
 <function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
<comment type="line">//freopen("travel.in","r",stdin);</comment>
<comment type="line">//freopen("travel.out","w",stdout);</comment>
<comment type="line">//__builtin_popcount()</comment>
<expr_stmt><expr><name>input</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>m</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>mem</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof <name>mem</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>mem2</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof <name>mem2</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>ans</name><init>=<expr><operator>(</operator><call><name>dp</name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">2</literal><operator>+</operator><call><name>dp2</name><argument_list>()</argument_list></call><operator>)</operator><operator>%</operator><name>mod</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>(</operator><name>ans</name><operator>+</operator><name>mod</name><operator>+</operator><name>mod</name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt>







<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
