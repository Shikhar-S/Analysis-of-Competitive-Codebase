<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29178196_63003529.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>'\n'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>inf</name> <init>= <expr><literal type="number">1000000000</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name><name>mem</name><index>[<expr><literal type="number">100009</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>add</name><index>[<expr><literal type="number">100009</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>ll</name></type> <name>solve</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{
  <if>if<condition>(<expr><name>i</name> <operator>==</operator> <name>m</name></expr>)</condition><then>
    <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
  <if>if<condition>(<expr><name><name>mem</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
    <block type="pseudo"><return>return <expr><name><name>mem</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return></block></then></if>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>solve</name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if<condition>(<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal> <operator>&lt;=</operator> <name>m</name></expr>)</condition><then>
    <block type="pseudo"><expr_stmt><expr><name>ret</name> <operator>+=</operator> <call><name>solve</name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr><operator>,</operator>
    <expr><name>ret</name> <operator>%=</operator> <name>mod</name></expr>;</expr_stmt></block></then></if>
  <expr_stmt><expr><name>ret</name> <operator>%=</operator> <name>mod</name></expr>;</expr_stmt>
  <return>return <expr><name><name>mem</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>ret</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
  <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>mem</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>ll</name></type> <name>init</name> <init>= <expr><call><name>solve</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2ll</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>init</name> <operator>%=</operator> <name>mod</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>add</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>add</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
  <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">100009</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control>
    <block type="pseudo"><expr_stmt><expr><name><name>add</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>add</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>add</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr><operator>,</operator>
    <expr><name><name>add</name><index>[<expr><name>i</name></expr>]</index></name> <operator>%=</operator> <name>mod</name></expr>;</expr_stmt></block></for>

  <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init><condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">100009</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control>
    <block type="pseudo"><expr_stmt><expr><name><name>add</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>add</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr><operator>,</operator>
    <expr><name><name>add</name><index>[<expr><name>i</name></expr>]</index></name> <operator>%=</operator> <name>mod</name></expr>;</expr_stmt></block></for>

  <expr_stmt><expr><name>init</name> <operator>+=</operator> <operator>(</operator><ternary><condition><expr><name>n</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>add</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name>init</name> <operator>%=</operator> <name>mod</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>init</name></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
