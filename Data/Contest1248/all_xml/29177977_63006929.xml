<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29177977_63006929.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name><init>=<expr><literal type="number">5e2</literal><operator>+</operator><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>sum</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>mxl</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>mxr</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>print</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list><block>{
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;&lt;</operator><literal type="string">" "</literal></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
}</block></function>
<function><type><name>int</name></type> <name>f</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{
	<if>if<condition>(<expr><name>x</name><operator>==</operator><literal type="char">'('</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name>int</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>x</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>y</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>get</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><name><name>sum</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><call><name>f</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><name><name>sum</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>sum</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><call><name>f</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<if>if<condition>(<expr><name><name>sum</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
	<expr_stmt><expr><name><name>mxr</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name><name>sum</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mxl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name><name>sum</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>n</name><operator>-</operator><literal type="number">2</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition><incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><name><name>mxr</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name><name>mxr</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>sum</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>mxl</name><index>[<expr><name>n</name><operator>-</operator><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name><name>mxl</name><index>[<expr><name>n</name><operator>-</operator><name>i</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>sum</name><index>[<expr><name>n</name><operator>-</operator><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<decl_stmt><decl><type><name>int</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<if>if<condition>(<expr><name><name>sum</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;=</operator><name><name>mxr</name><index>[<expr><name>i</name></expr>]</index></name><operator>&amp;&amp;</operator><name><name>sum</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;=</operator><name><name>mxl</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>ans</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
	}</block></for>
<comment type="block">/*/	print(sum);
	print(mxl);
	print(mxr);*/</comment>
	<return>return <expr><name>ans</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>swap</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{
	<decl_stmt><decl><type><name>char</name></type> <name>t</name><init>=<expr><name><name>s</name><index>[<expr><name>x</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>s</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><name><name>s</name><index>[<expr><name>y</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>s</name><index>[<expr><name>y</name></expr>]</index></name><operator>=</operator><name>t</name></expr>;</expr_stmt>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>s</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><name>i</name></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
			<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="line">//cout&lt;&lt;i&lt;&lt;" "&lt;&lt;j&lt;&lt;endl;</comment>
			<decl_stmt><decl><type><name>int</name></type> <name>aa</name><init>=<expr><call><name>get</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if<condition>(<expr><name>aa</name><operator>&gt;</operator><name>ans</name></expr>)</condition><then><block>{
				<expr_stmt><expr><name>ans</name><operator>=</operator><name>aa</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>x</name><operator>=</operator><name>i</name></expr>;</expr_stmt><expr_stmt><expr><name>y</name><operator>=</operator><name>j</name></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
	}</block></for>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>x</name><operator>++</operator></expr>;</expr_stmt><expr_stmt><expr><name>y</name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>x</name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name>y</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
}</block></function>
<comment type="line">//-3 -15 0 1 12 -15 19</comment>
<comment type="line">//</comment></unit>
