<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29179532_63002459.cpp"><comment type="line">//Code of C#oder Born_Clear</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>loop</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=0;i&lt;n;++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FORD</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=a;i&gt;=b;--i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x.begin(),x.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>s</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%d", &amp;x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sd</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%lf", &amp;x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sl</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%lld", &amp;x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>p</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>printf("%d",x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pl</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>printf("%lld", x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pd</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>printf("%lf", x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pn</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>printf("\n")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vi</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vector&lt;int&gt;v</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vl</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vector&lt;long long int&gt;v</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;int,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pll</name></cpp:macro> <cpp:value>pair&lt;long long int,long long int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>len</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>s.length()</cpp:value></cpp:define>
<function><type><name>void</name></type> <name>input</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name><name>a</name><index>[]</index></name></decl></parameter>)</parameter_list><block>{<macro><name>loop</name><argument_list>(<argument>n</argument>)</argument_list></macro><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>}</block></function>
<function><type><name>ll</name></type> <name>bin_expo</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>B</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>M</name></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name>ll</name></type> <name>res</name> <init>= <expr><literal type="number">1LL</literal></expr></init></decl>;</decl_stmt><while>while <condition>(<expr><name>B</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<if>if<condition>(<expr><name>B</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then><block>{<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>res</name> <operator>*</operator> <name>A</name><operator>)</operator> <operator>%</operator> <name>M</name></expr>;</expr_stmt>}</block></then></if><expr_stmt><expr><name>A</name> <operator>=</operator> <operator>(</operator><name>A</name> <operator>*</operator> <name>A</name><operator>)</operator> <operator>%</operator> <name>M</name></expr>;</expr_stmt> <expr_stmt><expr><name>B</name> <operator>=</operator> <name>B</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>}</block></while><return>return <expr><name>res</name></expr>;</return>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>s</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>string</name></type> <name>t</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>l</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>r</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><name>i</name></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
		<block>{
			<expr_stmt><expr><name>t</name><operator>=</operator><name>s</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>t</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>mini</name><init>=<expr><name>INT_MAX</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>cc</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
			<for>for<control>(<init><decl><type><name>int</name></type> <name>k</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>k</name><operator>&lt;</operator><call><name><name>t</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
			<block>{
				<if>if<condition>(<expr><name><name>t</name><index>[<expr><name>k</name></expr>]</index></name><operator>==</operator><literal type="char">'('</literal></expr>)</condition><then>
				<block>{
					<expr_stmt><expr><name>cc</name><operator>++</operator></expr>;</expr_stmt>
				}</block></then></if>
				<if>if<condition>(<expr><name><name>t</name><index>[<expr><name>k</name></expr>]</index></name><operator>==</operator><literal type="char">')'</literal></expr>)</condition><then>
				<block>{
					<expr_stmt><expr><name>cc</name><operator>--</operator></expr>;</expr_stmt>
					<expr_stmt><expr><name>mini</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>mini</name></expr></argument>,<argument><expr><name>cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
			}</block></for>
			<if>if<condition>(<expr><name>cc</name><operator>!=</operator><literal type="number">0</literal></expr>)</condition><then>
				<block type="pseudo"><continue>continue;</continue></block></then></if>
			<decl_stmt><decl><type><name>int</name></type> <name>tmp</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
			<for>for<control>(<init><decl><type><name>int</name></type> <name>k</name><init>=<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>k</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition><incr><expr><name>k</name><operator>--</operator></expr></incr>)</control>
			<block>{	
				<if>if<condition>(<expr><name><name>t</name><index>[<expr><name>k</name></expr>]</index></name><operator>==</operator><literal type="char">')'</literal></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><name>mini</name><operator>--</operator></expr>;</expr_stmt></block></then>
				<else>else
				<block>{
					<expr_stmt><expr><name>mini</name><operator>++</operator></expr>;</expr_stmt>
					<if>if<condition>(<expr><name>mini</name><operator>&gt;=</operator><literal type="number">0</literal></expr>)</condition><then>
						<block type="pseudo"><expr_stmt><expr><name>tmp</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
				}</block></else></if>
			}</block></for>
			<comment type="line">// cout&lt;&lt;i&lt;&lt;" "&lt;&lt;j&lt;&lt;endl;</comment>
			<comment type="line">// cout&lt;&lt;tmp&lt;&lt;endl;</comment>
			<if>if<condition>(<expr><name>tmp</name><operator>&gt;</operator><name>ans</name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name>ans</name><operator>=</operator><name>tmp</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>l</name><operator>=</operator><name>i</name></expr><operator>,</operator><expr><name>r</name><operator>=</operator><name>j</name></expr>;</expr_stmt>
			}</block></then></if>
			
		}</block></for>
	}</block></for>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>l</name><operator>+</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name>r</name><operator>+</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
