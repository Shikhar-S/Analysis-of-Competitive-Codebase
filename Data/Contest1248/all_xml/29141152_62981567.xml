<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29141152_62981567.cpp"><comment type="line">//#pragma GCC optimize(3)</comment>
<comment type="line">//#pragma comment(linker, "/STACK:102400000,102400000")</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int i=a;i&lt;n;++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>per</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int i=n-1;i&gt;=a;--i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>d1</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cerr&lt;&lt;#x&lt;&lt;" = "&lt;&lt;(x)&lt;&lt;endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>d2</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cerr&lt;&lt;#x&lt;&lt;" = "&lt;&lt;(x)&lt;&lt;"  "&lt;&lt;#y&lt;&lt;" = "&lt;&lt;(y)&lt;&lt;endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>d3</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cerr&lt;&lt;#x&lt;&lt;" = "&lt;&lt;(x)&lt;&lt;"  "&lt;&lt;#y&lt;&lt;" = "&lt;&lt;(y)&lt;&lt;"  "&lt;&lt;#z&lt;&lt;" = "&lt;&lt;(z)&lt;&lt;endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x).begin(),(x).end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>me</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(a,b,sizeof(a))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INF</name></cpp:macro> <cpp:value>0x3f3f3f3f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INFLL</name></cpp:macro> <cpp:value>0x3f3f3f3f3f3f3f3fLL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Rint</name></cpp:macro> <cpp:value>register int</cpp:value></cpp:define>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>piir</name>;</typedef><typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>pilr</name>;</typedef><typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>pllr</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>PI</name><init>=<expr><call><name>acos</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>chmin</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>T</name> <modifier>&amp;</modifier></type><name>y</name></decl></parameter>)</parameter_list><block>{    <if>if<condition>(<expr><name>x</name><operator>&gt;</operator><name>y</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>x</name><operator>=</operator><name>y</name></expr>;</expr_stmt></block></then></if>    }</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>chmax</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>T</name> <modifier>&amp;</modifier></type><name>y</name></decl></parameter>)</parameter_list><block>{    <if>if<condition>(<expr><name>x</name><operator>&lt;</operator><name>y</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>x</name><operator>=</operator><name>y</name></expr>;</expr_stmt></block></then></if>    }</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>T</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{<return>return <expr><ternary><condition><expr><name>y</name></expr>?</condition><then><expr><call><name>gcd</name><argument_list>(<argument><expr><name>y</name></expr></argument>,<argument><expr><name>x</name><operator>%</operator><name>y</name></expr></argument>)</argument_list></call></expr></then><else>:<expr><name>x</name></expr></else></ternary></expr>;</return>}</block></function><comment type="line">//Â¹Â«ÃÂ¼ÃÃ½</comment>
<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>bool</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>T</name><modifier>&amp;</modifier></type><name>ret</name></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name>char</name></type> <name>c</name><init>=<expr><call><name>getchar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>sgn</name></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>c</name><operator>==</operator><name>EOF</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
    <while>while <condition>(<expr><name>c</name><operator>!=</operator><literal type="char">'-'</literal><operator>&amp;&amp;</operator><operator>(</operator><name><name>c</name><argument_list type="generic">&lt;<argument><expr><literal type="char">'0'</literal><operator>||</operator><name>c</name></expr></argument>&gt;</argument_list></name><literal type="char">'9'</literal><operator>)</operator></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
    <expr_stmt><expr><name>sgn</name><operator>=</operator><ternary><condition><expr><operator>(</operator><name>c</name><operator>==</operator><literal type="char">'-'</literal><operator>)</operator></expr>?</condition><then><expr><operator>-</operator><literal type="number">1</literal></expr></then><else>:<expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt> <expr_stmt><expr><name>ret</name><operator>=</operator><ternary><condition><expr><operator>(</operator><name>c</name><operator>==</operator><literal type="char">'-'</literal><operator>)</operator></expr>?</condition><then><expr><literal type="number">0</literal></expr></then><else>:<expr><operator>(</operator><name>c</name><operator>-</operator><literal type="char">'0'</literal><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
    <while>while<condition>(<expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>void</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></cast></expr><operator>,</operator><expr><name>c</name><operator>&gt;=</operator><literal type="char">'0'</literal><operator>&amp;&amp;</operator><name>c</name><operator>&lt;=</operator><literal type="char">'9'</literal></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>ret</name><operator>=</operator><name>ret</name><operator>*</operator><literal type="number">10</literal><operator>+</operator><operator>(</operator><name>c</name><operator>-</operator><literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt></block></while>
    <expr_stmt><expr><name>ret</name><operator>*=</operator><name>sgn</name></expr>;</expr_stmt> <return>return <expr><literal type="number">1</literal></expr>;</return>
}</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template><specifier>inline</specifier> <type><name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><name>x</name><operator>&gt;</operator><literal type="number">9</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>out</name><argument_list>(<argument><expr><name>x</name><operator>/</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if> <expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><name>x</name><operator>%</operator><literal type="number">10</literal><operator>+</operator><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<comment type="block" format="doxygen">/*********************start here**********************************/</comment>
 
<comment type="line">//const double eps=1e-9;</comment>
<comment type="line">//const int mod=1e9;</comment>
<comment type="line">//template &lt;typename T&gt; void Mod(T &amp;x){   while(x&gt;=mod) x-=mod;    }</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name><init>=<expr><literal type="number">2e3</literal><operator>+</operator><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<comment type="line">//const int M=5e4+5;</comment>


<function><type><name>void</name></type> <name>solve</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>times</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>jn</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>on</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>jm</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>om</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>n</name><operator>--</operator></expr>)</condition> <block>{
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>t</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>jn</name><operator>++</operator></expr>;</expr_stmt></block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><name>on</name><operator>++</operator></expr>;</expr_stmt></block></else></if>
    }</block></while>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>m</name></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>m</name><operator>--</operator></expr>)</condition> <block>{
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>t</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>jm</name><operator>++</operator></expr>;</expr_stmt></block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><name>om</name><operator>++</operator></expr>;</expr_stmt></block></else></if>
    }</block></while>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>jn</name><operator>*</operator><name>jm</name><operator>+</operator><name>on</name><operator>*</operator><name>om</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    
}</block></function>
 
<function><type><name>void</name></type> <name>Init</name><parameter_list>()</parameter_list>
<block>{
}</block></function>
 
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LOCAL_USER</name></cpp:ifdef>
    <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"in.txt"</literal></expr></argument>,<argument><expr><literal type="string">"r"</literal></expr></argument>,<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">//freopen("out2.txt","w",stdout);</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
 
    <decl_stmt><decl><type><name>int</name></type> <name>times</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <comment type="line">//int T;read(T);for(;T--;)</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>T</name></decl>;</decl_stmt><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>T</name></expr>;</expr_stmt><for>for<control>(<init>;</init><condition><expr><name>T</name><operator>--</operator></expr>;</condition><incr/>)</control>
    <comment type="line">//for(;;)</comment>
    <block>{
        <expr_stmt><expr><call><name>solve</name><argument_list>(<argument><expr><name>times</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>Init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
