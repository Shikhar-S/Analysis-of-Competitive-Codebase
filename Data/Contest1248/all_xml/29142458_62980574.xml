<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29142458_62980574.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAXN</name> <init>= <expr><literal type="number">1e5</literal><operator>+</operator><literal type="number">20</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>_</name></decl>;</decl_stmt><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>_</name></expr>;</expr_stmt>
  <while>while<condition>(<expr><name>_</name><operator>--</operator></expr>)</condition><block>{
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>odd</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>even</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>cur</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>cur</name></expr>;</expr_stmt>
      <if>if<condition>(<expr><name>cur</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>odd</name><operator>++</operator></expr>;</expr_stmt></block></then>
      <else>else <block type="pseudo"><expr_stmt><expr><name>even</name><operator>++</operator></expr>;</expr_stmt></block></else></if>
    }</block></for>
    <decl_stmt><decl><type><name>ll</name></type> <name>odd2</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>even2</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>cur</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>cur</name></expr>;</expr_stmt>
      <if>if<condition>(<expr><name>cur</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>odd2</name><operator>++</operator></expr>;</expr_stmt></block></then>
      <else>else <block type="pseudo"><expr_stmt><expr><name>even2</name><operator>++</operator></expr>;</expr_stmt></block></else></if>
    }</block></for>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>odd2</name><operator>*</operator><name>odd</name> <operator>+</operator> <name>even</name><operator>*</operator><name>even2</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
  }</block></while>


}</block></function></unit>
