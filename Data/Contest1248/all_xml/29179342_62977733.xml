<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29179342_62977733.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>int</name></type> <name>main</name> <parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>int</name></type> <name>Q</name></decl>, <decl><type ref="prev"/><name>q</name></decl>, <decl><type ref="prev"/><name>p1</name></decl>, <decl><type ref="prev"/><name>p2</name></decl>, <decl><type ref="prev"/><name>imp1</name></decl>, <decl><type ref="prev"/><name>imp2</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>nr</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>Q</name></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>q</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>q</name><operator>&lt;=</operator><name>Q</name></expr>;</condition> <incr><expr><name>q</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>p1</name> <operator>=</operator> <name>p2</name> <operator>=</operator> <name>imp1</name> <operator>=</operator> <name>imp2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
            <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>nr</name></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>nr</name> <operator>%</operator>  <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>p1</name> <operator>++</operator></expr> ;</expr_stmt></block></then>
            <else>else <block type="pseudo"><expr_stmt><expr><name>imp1</name> <operator>++</operator></expr>;</expr_stmt></block></else></if>
        }</block></for>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
            <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>nr</name></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>nr</name> <operator>%</operator>  <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>p2</name> <operator>++</operator></expr> ;</expr_stmt></block></then>
            <else>else <block type="pseudo"><expr_stmt><expr><name>imp2</name> <operator>++</operator></expr>;</expr_stmt></block></else></if>
        }</block></for>
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call>(<name>long</name> <name>long</name>)<argument_list>(<argument><expr><name>p1</name></expr></argument>)</argument_list></call><operator>*</operator><name>p2</name> <operator>+</operator> <call>(<name>long</name> <name>long</name>)<argument_list>(<argument><expr><name>imp1</name></expr></argument>)</argument_list></call><operator>*</operator><name>imp2</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
	}</block></for>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
