<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29140100_63002203.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=(a);i&lt;=(b);++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=(a);i&gt;=(b);--i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name><init>=<expr><operator>(</operator><name>int</name><operator>)</operator><literal type="number">2e5</literal><operator>+</operator><literal type="number">100</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mod</name><init>=<expr><operator>(</operator><name>int</name><operator>)</operator><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>l</name></decl>,<decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>fun</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name><name>c</name><index>[<expr><literal type="number">550</literal></expr>]</index></name><init>=<expr><block>{<expr><literal type="number">0</literal></expr>,}</block></expr></init></decl>,<decl><type ref="prev"/><name><name>pre</name><index>[<expr><literal type="number">550</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>sub</name><index>[<expr><literal type="number">550</literal></expr>]</index></name></decl>;</decl_stmt>
    <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro><block>{
        <expr_stmt><expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>c</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
        <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'('</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name><operator>--</operator></expr>;</expr_stmt></block></else></if> 
    }</block>
    <expr_stmt><expr><name><name>pre</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">2</literal></argument>,<argument>n</argument>)</argument_list></macro> <expr_stmt><expr><name><name>pre</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name><name>pre</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sub</name><index>[<expr><name>n</name></expr>]</index></name><operator>=</operator><name><name>c</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
    <macro><name>dep</name><argument_list>(<argument>i</argument>,<argument>n-<literal type="number">1</literal></argument>,<argument><literal type="number">1</literal></argument>)</argument_list></macro> <expr_stmt><expr><name><name>sub</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name><name>sub</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n-<literal type="number">1</literal></argument>)</argument_list></macro> <if>if<condition>(<expr><operator>(</operator><name><name>sub</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;=</operator><literal type="number">0</literal><operator>)</operator><operator>&amp;&amp;</operator><operator>(</operator><name><name>pre</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>c</name><index>[<expr><name>n</name></expr>]</index></name><operator>-</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;=</operator><literal type="number">0</literal><operator>)</operator></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ans</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
    <return>return <expr><name>ans</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%s"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><name>s</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>l</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>r</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro><block>{
        <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'('</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>l</name><operator>++</operator></expr>;</expr_stmt></block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><name>r</name><operator>++</operator></expr>;</expr_stmt></block></else></if> 
    }</block>
    <if>if<condition>(<expr><name>l</name><operator>!=</operator><name>r</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"0\n1 1\n"</literal></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><literal type="number">0</literal></expr>;</return></block></then></if>
    <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro> <macro><name>rep</name><argument_list>(<argument>j</argument>,<argument>i</argument>,<argument>n</argument>)</argument_list></macro><block>{
        <decl_stmt><decl><type><name>char</name></type> <name>t1</name><init>=<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>,<decl><type ref="prev"/><name>t2</name><init>=<expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>t2</name></expr>;</expr_stmt><expr_stmt><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><name>t1</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>tmp</name><init>=<expr><call><name>fun</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>tmp</name><operator>&gt;</operator><name>ans</name></expr>)</condition><then><block>{
            <expr_stmt><expr><name>ans</name><operator>=</operator><name>tmp</name></expr>;</expr_stmt><expr_stmt><expr><name>l</name><operator>=</operator><name>i</name></expr>;</expr_stmt><expr_stmt><expr><name>r</name><operator>=</operator><name>j</name></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>t1</name></expr>;</expr_stmt><expr_stmt><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><name>t2</name></expr>;</expr_stmt>
    }</block>
    <if>if<condition>(<expr><name>ans</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"0\n1 1\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
    <else>else <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n%d %d\n"</literal></expr></argument>,<argument><expr><name>ans</name></expr></argument>,<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
}</block></function></unit>
