<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29138519_63001126.cpp"><comment type="line">// Lets go to the next level </comment>
<comment type="line">// AIM CM at CF *__* asap </comment>
<comment type="line">// Hit A,B,C and D faster and reach Candidate Master</comment>
<comment type="line">// template taken from Striver_79  </comment>
<comment type="line">// Remember you were also a novice when you started, </comment>
<comment type="line">// hence never be rude to anyone who wants to learn something</comment>
<comment type="line">// Never open a ranklist untill and unless you are done with solving problems, wastes 3/4 minuts </comment>
<comment type="line">// Donot treat CP as a placement thing, love it and enjoy it, you will succeed for sure.  </comment>
<comment type="line">// Any doubts or want to have a talk, contact https://www.facebook.com/raj.striver </comment>
 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_set&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro> <cpp:value>(int) 1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD</name></cpp:macro> <cpp:value>(int) 1e9+7</cpp:value></cpp:define>
<comment type="line">// Big two primes </comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X</name></cpp:macro> <cpp:value>1001100011100001111ll</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a.begin(),a.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>for0</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int i = 0; i &lt; n; i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>for1</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int i = 1; i &lt;= n; i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>loop</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int i = a; i &lt; b; i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bloop</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int i = a ; i&gt;=b;i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tc</name><parameter_list>(<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>int t; cin &gt;&gt; t; while (t--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>emplace_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fio</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(false), cin.tie(NULL), cout.tie(NULL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>in</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%d", &amp;x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rr</name></cpp:macro> <cpp:value>return 0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>prec</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>fixed&lt;&lt;setprecision(n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>maxpq</name></cpp:macro> <cpp:value>priority_queue&lt;int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>minpq</name></cpp:macro> <cpp:value>priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt; &gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inf</name></cpp:macro> <cpp:value>(int)(1e18)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ini</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(a, i, sizeof(a))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vi</name></cpp:macro> <cpp:value>vector&lt;int&gt;</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kitna</name></cpp:macro> <cpp:value>se</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>"\n"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pi</name></cpp:macro> <cpp:value>pair&lt;int, int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vii</name></cpp:macro> <cpp:value>vector&lt;pi&gt;</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAXN</name> <init>= <expr><call>(<name>int</name>)<argument_list>(<argument><expr><operator>(</operator><literal type="number">1e5</literal><operator>)</operator> <operator>+</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <if>if <condition>(<expr><name>a</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>b</name></expr>;</return></block></then></if> <return>return <expr><call><name>gcd</name><argument_list>(<argument><expr><name>b</name><operator>%</operator><name>a</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</return>}</block></function>
<function><type><name>int</name></type> <name>max</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<if>if<condition>(<expr><name>a</name><operator>&gt;</operator><name>b</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>a</name></expr>;</return></block></then> <else>else <block type="pseudo"><return>return <expr><name>b</name></expr>;</return></block></else></if>}</block></function>
<function><type><name>int</name></type> <name>min</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<if>if<condition>(<expr><name>a</name><operator>&lt;</operator><name>b</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>a</name></expr>;</return></block></then> <else>else <block type="pseudo"><return>return <expr><name>b</name></expr>;</return></block></else></if>}</block></function>
<function><type><name>void</name></type> <name>pr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>x</name></expr>;</expr_stmt>}</block></function>
<function><type><name>void</name></type> <name>prl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>x</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>}</block></function>  
<comment type="line">//bool isPrime(int N){ for(int i=2;i*i&lt;=N;++i){if(N%i==0) return false;}return true;}</comment>
<function><type><name>int</name></type> <name>cbrt</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{ <decl_stmt><decl><type><name>int</name></type> <name>lo</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>hi</name><init>=<expr><call><name>min</name><argument_list>(<argument><expr><literal type="number">2000000ll</literal></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><while>while<condition>(<expr><name>hi</name><operator>-</operator><name>lo</name><operator>&gt;</operator><literal type="number">1</literal></expr>)</condition><block>{<decl_stmt><decl><type><name>int</name></type> <name>mid</name><init>=<expr><operator>(</operator><name>lo</name><operator>+</operator><name>hi</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt><if>if<condition>(<expr><name>mid</name><operator>*</operator><name>mid</name><operator>*</operator><name>mid</name><operator>&lt;</operator><name>x</name></expr>)</condition><then><block>{<expr_stmt><expr><name>lo</name><operator>=</operator><name>mid</name></expr>;</expr_stmt>}</block></then><else>else <block type="pseudo"><expr_stmt><expr><name>hi</name><operator>=</operator><name>mid</name></expr>;</expr_stmt></block></else></if>}</block></while><if>if<condition>(<expr><name>hi</name><operator>*</operator><name>hi</name><operator>*</operator><name>hi</name><operator>&lt;=</operator><name>x</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>hi</name></expr>;</return></block></then><else>else <block type="pseudo"><return>return <expr><name>lo</name></expr>;</return></block></else></if>}</block></function> 
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>dx</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>dy</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>XX</name><index>[]</index></name> <init>= <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name><name>YY</name><index>[]</index></name> <init>= <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>=  <expr><call>(<name>int</name>)<argument_list>(<argument><expr><literal type="number">1e5</literal><operator>+</operator><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 

<comment type="line">//vector&lt;int&gt;vec[nax];  </comment>
 
<comment type="line">// int spf[N+5];</comment>
 
<comment type="line">// void SOF()</comment>
<comment type="line">// {</comment>
<comment type="line">//     spf[1] = 1; </comment>
<comment type="line">//     for (int i=2; i&lt;N; i++) </comment>
  
<comment type="line">//         // marking smallest prime factor for every </comment>
<comment type="line">//         // number to be itself. </comment>
<comment type="line">//         spf[i] = i; </comment>
  
<comment type="line">//     // separately marking spf for every even </comment>
<comment type="line">//     // number as 2 </comment>
<comment type="line">//     for (int i=4; i&lt;N; i+=2) </comment>
<comment type="line">//         spf[i] = 2; </comment>
  
<comment type="line">//     for (int i=3; i*i&lt;N; i++) </comment>
<comment type="line">//     { </comment>
<comment type="line">//         // checking if i is prime </comment>
<comment type="line">//         if (spf[i] == i) </comment>
<comment type="line">//         { </comment>
<comment type="line">//             // marking SPF for all numbers divisitedible by i </comment>
<comment type="line">//             for (int j=i*i; j&lt;N; j+=i) </comment>
  
<comment type="line">//                 // marking spf[j] if it is not  </comment>
<comment type="line">//                 // previously marked </comment>
<comment type="line">//                 if (spf[j]==j) </comment>
<comment type="line">//                     spf[j] = i; </comment>
<comment type="line">//         } </comment>
<comment type="line">//     } </comment>
<comment type="line">// }</comment>
 
<comment type="line">// int C[10005][10005]; </comment>
<comment type="line">// int binomialCoeff(int n, int k) </comment>
<comment type="line">// { </comment>
<comment type="line">//     // int C[n + 1][k + 1]; </comment>
<comment type="line">//     int i, j; </comment>
  
<comment type="line">//     // Caculate value of Binomial Coefficient </comment>
<comment type="line">//     // in bottom up manner </comment>
<comment type="line">//     for (i = 0; i &lt;= n; i++) </comment>
<comment type="line">//     { </comment>
<comment type="line">//         for (j = 0; j &lt;= min(i, k); j++) </comment>
<comment type="line">//         { </comment>
<comment type="line">//             // Base Cases </comment>
<comment type="line">//             if (j == 0 || j == i) </comment>
<comment type="line">//                 C[i][j] = 1; </comment>
  
<comment type="line">//             // Calculate value using previosly </comment>
<comment type="line">//             // stored values </comment>
<comment type="line">//             else</comment>
<comment type="line">//                 C[i][j] = C[i - 1][j - 1] + </comment>
<comment type="line">//                           C[i - 1][j]; </comment>
<comment type="line">//         } </comment>
<comment type="line">//     } </comment>
  
<comment type="line">//     return C[n][k]; </comment>
<comment type="line">// } </comment>
<function><type><name>bool</name></type> <name>isPowerOfTwo</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> 
<block>{ 
  <comment type="block">/* First x in the below expression is for the case when x is 0 */</comment>
  <return>return <expr><name>x</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><operator>(</operator><name>x</name><operator>&amp;</operator><operator>(</operator><name>x</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</return> 
}</block></function>
<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
  <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ONLINE_JUDGE</name></cpp:ifndef>
  <comment type="line">// for getting input from input.txt</comment>
  <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"input.txt"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// for writing output to output.txt</comment>
  <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"output.txt"</literal></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
 
<comment type="line">//SOF(); </comment>
<expr_stmt><expr><name>fio</name></expr>;</expr_stmt>


<comment type="line">//srand(time(NULL)); </comment>
<decl_stmt><decl><type><name>int</name></type> <name>T</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<comment type="line">//cin &gt;&gt; T;</comment>

<while>while<condition>(<expr><name>T</name><operator>--</operator></expr>)</condition><block>{
  <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name><name>dp</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt> 
  <expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>dp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><call><name>max</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>j</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block type="pseudo"><expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dp</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>dp</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt></block></for> 
  
  <decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><operator>(</operator><operator>(</operator><operator>(</operator><literal type="number">2</literal><operator>*</operator><name><name>dp</name><index>[<expr><name>n</name></expr>]</index></name><operator>)</operator><operator>%</operator><name>mod</name> <operator>+</operator> <operator>(</operator><literal type="number">2</literal><operator>*</operator><name><name>dp</name><index>[<expr><name>m</name></expr>]</index></name><operator>)</operator><operator>%</operator><name>mod</name><operator>)</operator><operator>%</operator><name>mod</name> <operator>+</operator> <name>mod</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator><operator>%</operator><name>mod</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name></expr>;</expr_stmt>
  

}</block></while>
}</block></function>
</unit>
