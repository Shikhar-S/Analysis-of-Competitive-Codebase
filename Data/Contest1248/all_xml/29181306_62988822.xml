<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29181306_62988822.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>maxn</name></cpp:macro> <cpp:value>100005</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<function><specifier>inline</specifier> <type><name>char</name></type> <name>get</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><specifier>static</specifier> <type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">30000</literal></expr>]</index></name></decl>,<modifier>*</modifier><decl><type ref="prev"/><name>p1</name><init>=<expr><name>buf</name></expr></init></decl>,<modifier>*</modifier><decl><type ref="prev"/><name>p2</name><init>=<expr><name>buf</name></expr></init></decl>;</decl_stmt>
	<return>return <expr><ternary><condition><expr><name>p1</name><operator>==</operator><name>p2</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>p2</name><operator>=</operator><operator>(</operator><name>p1</name><operator>=</operator><name>buf</name><operator>)</operator><operator>+</operator><call><name>fread</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">30000</literal></expr></argument>,<argument><expr><name>stdin</name></expr></argument>)</argument_list></call><operator>,</operator><name>p1</name><operator>==</operator><name>p2</name><operator>)</operator></expr>?</condition><then><expr><name>EOF</name></expr></then><else>:<expr><operator>*</operator><name>p1</name><operator>++</operator></expr></else></ternary></expr>;</return>
}</block></function>
<function><specifier>inline</specifier> <type><name>int</name></type> <name>read</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><specifier>register</specifier> <name>char</name></type> <name>c</name><init>=<expr><call><name>get</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>f</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>_</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>c</name><operator>&gt;</operator><literal type="char">'9'</literal> <operator>||</operator> <name>c</name><operator>&lt;</operator><literal type="char">'0'</literal></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>f</name><operator>=</operator><ternary><condition><expr><operator>(</operator><name>c</name><operator>==</operator><literal type="char">'-'</literal><operator>)</operator></expr>?</condition><then><expr><operator>-</operator><literal type="number">1</literal></expr></then><else>:<expr><literal type="number">1</literal></expr></else></ternary></expr><operator>,</operator><expr><name>c</name><operator>=</operator><call><name>get</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
	<while>while<condition>(<expr><name>c</name><operator>&lt;=</operator><literal type="char">'9'</literal> <operator>&amp;&amp;</operator> <name>c</name><operator>&gt;=</operator><literal type="char">'0'</literal></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>_</name><operator>=</operator><operator>(</operator><name>_</name><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator><operator>+</operator><operator>(</operator><name>_</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><operator>(</operator><name>c</name><operator>^</operator><literal type="number">48</literal><operator>)</operator></expr><operator>,</operator><expr><name>c</name><operator>=</operator><call><name>get</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
	<return>return <expr><name>_</name><operator>*</operator><name>f</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>a_j</name></decl>,<decl><type ref="prev"/><name>a_o</name></decl>;</decl_stmt><comment type="line">//å¥æ°åå¶æ° </comment>
<decl_stmt><decl><type><name>int</name></type> <name>b_j</name></decl>,<decl><type ref="prev"/><name>b_o</name></decl>;</decl_stmt>
<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<comment type="line">//freopen("1.txt","r",stdin);</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>t</name><init>=<expr><call><name>read</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition><block>{
		<expr_stmt><expr><name>a_j</name><operator>=</operator><name>a_o</name><operator>=</operator><name>b_j</name><operator>=</operator><name>b_o</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>n</name><operator>=</operator><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><specifier>register</specifier> <name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
			<decl_stmt><decl><type><name>int</name></type> <name>cas</name><init>=<expr><call><name>abs</name><argument_list>(<argument><expr><call><name>read</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<comment type="line">//cout&lt;&lt;cas&lt;&lt;"&lt;---"&lt;&lt;t&lt;&lt;endl;</comment>
			<if>if<condition>(<expr><name>cas</name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>a_o</name><operator>++</operator></expr>;</expr_stmt></block></then>
			<else>else <block type="pseudo"><expr_stmt><expr><name>a_j</name><operator>++</operator></expr>;</expr_stmt></block></else></if>
		}</block></for>
		<expr_stmt><expr><name>m</name><operator>=</operator><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><specifier>register</specifier> <name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>m</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
			<decl_stmt><decl><type><name>int</name></type> <name>cas</name><init>=<expr><call><name>abs</name><argument_list>(<argument><expr><call><name>read</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if<condition>(<expr><name>cas</name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>b_o</name><operator>++</operator></expr>;</expr_stmt></block></then>
			<else>else <block type="pseudo"><expr_stmt><expr><name>b_j</name><operator>++</operator></expr>;</expr_stmt></block></else></if>
		}</block></for>
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>a_j</name><operator>*</operator><name>b_j</name><operator>+</operator><name>a_o</name><operator>*</operator><name>b_o</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	}</block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
