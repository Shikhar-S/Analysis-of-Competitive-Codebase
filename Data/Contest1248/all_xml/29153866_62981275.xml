<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29153866_62981275.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout &lt;&lt; #x &lt;&lt; ": " &lt;&lt; x &lt;&lt; endl</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>LL</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name> <init>= <expr><literal type="number">3e5</literal> <operator>+</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>inf</name> <init>= <expr><literal type="number">0x3f3f3f3f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>LL</name></type> <name>INF</name> <init>= <expr><literal type="number">0x3f3f3f3f3f3f3f3f</literal></expr></init></decl>;</decl_stmt>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>LL</name></type> <name>t</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>t</name><operator>--</operator></expr>)</condition> <block>{
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>LL</name></type> <name>a</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>b</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>d</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>
		<while>while <condition>(<expr><name>n</name><operator>--</operator></expr>)</condition> <block>{
			<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>x</name></expr>;</expr_stmt>
			<if>if <condition>(<expr><name>x</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><operator>++</operator><name>a</name></expr>;</expr_stmt></block></then>
			<else>else
				<block type="pseudo"><expr_stmt><expr><operator>++</operator><name>b</name></expr>;</expr_stmt></block></else></if>
		}</block></while>
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>m</name></expr>;</expr_stmt>
		<while>while <condition>(<expr><name>m</name><operator>--</operator></expr>)</condition> <block>{
			<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>x</name></expr>;</expr_stmt>
			<if>if <condition>(<expr><name>x</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><operator>++</operator><name>c</name></expr>;</expr_stmt></block></then>
			<else>else
				<block type="pseudo"><expr_stmt><expr><operator>++</operator><name>d</name></expr>;</expr_stmt></block></else></if>
		}</block></while>
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>a</name> <operator>*</operator> <name>c</name> <operator>+</operator> <name>b</name> <operator>*</operator> <name>d</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
	}</block></while>
}</block></function></unit>
