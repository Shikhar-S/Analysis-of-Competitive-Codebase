<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29156386_63003925.cpp"><comment type="block">/*
....................
....................
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>here</name></cpp:macro> <cpp:value>cout&lt;&lt;"here\n"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>si</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%d",&amp;x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sl</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%lld",&amp;x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pf</name></cpp:macro> <cpp:value>printf</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pfi</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>printf("%d\n",x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pfl</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>printf("%lld\n",x)</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>m</name> <init>= <expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAX</name> <init>= <expr><literal type="number">100005</literal></expr></init></decl>;</decl_stmt>

<function_decl><type><name>ll</name></type> <name>gcdExtended</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>ll</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>ll</name> <modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list>;</function_decl> 
  
<comment type="line">// Function to find modulo inverse of b. It returns </comment>
<comment type="line">// -1 when inverse doesn't </comment>
<function><type><name>ll</name></type> <name>modInverse</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>m</name></decl></parameter>)</parameter_list> 
<block>{ 
    <decl_stmt><decl><type><name>ll</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt> <comment type="line">// used in extended GCD algorithm </comment>
    <decl_stmt><decl><type><name>ll</name></type> <name>g</name> <init>= <expr><call><name>gcdExtended</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
  
    <comment type="line">// Return -1 if b and m are not co-prime </comment>
   
  
    <comment type="line">// m is added to handle negative x </comment>
    <return>return <expr><operator>(</operator><name>x</name><operator>%</operator><name>m</name> <operator>+</operator> <name>m</name><operator>)</operator> <operator>%</operator> <name>m</name></expr>;</return> 
}</block></function> 
  
<comment type="line">// Function to compute a/b under modlo m </comment>
<function><type><name>ll</name></type> <name>modDivide</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>m</name></decl></parameter>)</parameter_list> 
<block>{ 
    <expr_stmt><expr><name>a</name> <operator>=</operator> <name>a</name> <operator>%</operator> <name>m</name></expr>;</expr_stmt> 
    <decl_stmt><decl><type><name>ll</name></type> <name>inv</name> <init>= <expr><call><name>modInverse</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
    <return>return <expr><operator>(</operator><operator>(</operator><name>inv</name> <operator>*</operator> <name>a</name><operator>)</operator> <operator>%</operator> <name>m</name><operator>)</operator></expr>;</return> 
}</block></function> 
  
<comment type="line">// C function for extended Euclidean Algorithm (used to </comment>
<comment type="line">// find modular inverse. </comment>
<function><type><name>ll</name></type> <name>gcdExtended</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>ll</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>ll</name> <modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list> 
<block>{ 
    <comment type="line">// Base Case </comment>
    <if>if <condition>(<expr><name>a</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> 
    <block>{ 
        <expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><operator>*</operator><name>y</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
        <return>return <expr><name>b</name></expr>;</return> 
    }</block></then></if> 
  
    <decl_stmt><decl><type><name>ll</name></type> <name>x1</name></decl>, <decl><type ref="prev"/><name>y1</name></decl>;</decl_stmt> <comment type="line">// To store results of recursive call </comment>
    <decl_stmt><decl><type><name>ll</name></type> <name>gcd</name> <init>= <expr><call><name>gcdExtended</name><argument_list>(<argument><expr><name>b</name><operator>%</operator><name>a</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
  
    <comment type="line">// Update x and y using results of recursive </comment>
    <comment type="line">// call </comment>
    <expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <name>y1</name> <operator>-</operator> <operator>(</operator><name>b</name><operator>/</operator><name>a</name><operator>)</operator> <operator>*</operator> <name>x1</name></expr>;</expr_stmt> 
    <expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <name>x1</name></expr>;</expr_stmt> 
  
    <return>return <expr><name>gcd</name></expr>;</return> 
}</block></function> 

<function><type><name>ll</name></type> <name>modFact</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>p</name></decl></parameter>)</parameter_list> 
<block>{ 
    <if>if <condition>(<expr><name>n</name> <operator>&gt;=</operator> <name>p</name></expr>)</condition><then> 
        <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if> 
  
    <decl_stmt><decl><type><name>ll</name></type> <name>result</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 
    <for>for <control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> 
        <block type="pseudo"><expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>result</name> <operator>*</operator> <name>i</name><operator>)</operator> <operator>%</operator> <name>p</name></expr>;</expr_stmt></block></for> 
  
    <return>return <expr><name>result</name></expr>;</return> 
}</block></function> 

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ONLINE_JUDGE</name></cpp:ifndef>
        <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"input.txt"</literal></expr></argument>,<argument><expr><literal type="string">"r"</literal></expr></argument>,<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"output.txt"</literal></expr></argument>,<argument><expr><literal type="string">"w"</literal></expr></argument>,<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name><name>A</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name><init>=<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>k</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">100005</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>A</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>*</operator><name>i</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name><operator>%=</operator><name>m</name></expr>;</expr_stmt>
    }</block></for>
    <decl_stmt><decl><type><name>ll</name></type> <name>sum</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>lo</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>mo</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>mo</name></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name><operator>/</operator><literal type="number">2</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><name>k</name><operator>=</operator><name>n</name><operator>-</operator><name>i</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>j</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>lo</name><operator>=</operator><name><name>A</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>lo</name><operator>=</operator><call><name>modDivide</name><argument_list>(<argument><expr><name>lo</name></expr></argument>,<argument><expr><name><name>A</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>lo</name><operator>=</operator><call><name>modDivide</name><argument_list>(<argument><expr><name>lo</name></expr></argument>,<argument><expr><name><name>A</name><index>[<expr><name>k</name><operator>-</operator><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <comment type="line">// cout&lt;&lt;lo&lt;&lt;endl;</comment>
        <expr_stmt><expr><name>sum</name><operator>+=</operator><literal type="number">2</literal><operator>*</operator><name>lo</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>sum</name><operator>%=</operator><name>m</name></expr>;</expr_stmt>


    }</block></for>
   <comment type="line">// cout&lt;&lt;sum&lt;&lt;endl;</comment>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>mo</name><operator>/</operator><literal type="number">2</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><name>k</name><operator>=</operator><name>mo</name><operator>-</operator><name>i</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>j</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>lo</name><operator>=</operator><name><name>A</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>lo</name><operator>=</operator><call><name>modDivide</name><argument_list>(<argument><expr><name>lo</name></expr></argument>,<argument><expr><name><name>A</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>lo</name><operator>=</operator><call><name>modDivide</name><argument_list>(<argument><expr><name>lo</name></expr></argument>,<argument><expr><name><name>A</name><index>[<expr><name>k</name><operator>-</operator><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="line">//  cout&lt;&lt;lo&lt;&lt;endl;</comment>
        <expr_stmt><expr><name>sum</name><operator>+=</operator><literal type="number">2</literal><operator>*</operator><name>lo</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>sum</name><operator>%=</operator><name>m</name></expr>;</expr_stmt>

    }</block></for>

    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>sum</name><operator>%</operator><name>m</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
