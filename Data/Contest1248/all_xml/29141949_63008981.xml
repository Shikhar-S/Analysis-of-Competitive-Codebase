<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29141949_63008981.cpp"><comment type="line">// Author: Kamil Nizinski</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ONLINE_JUDGE</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cerr</name></cpp:macro> <cpp:value>if (false) cerr</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lcl</name></cpp:macro> <cpp:value>if (false)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"debug.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cerr &lt;&lt; "[" &lt;&lt; #__VA_ARGS__ &lt;&lt; "]:", debug_out(__VA_ARGS__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lcl</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ft</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sd</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>psb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static_cast&lt;int&gt;(a.size())</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>int64_t</name></type> <name>LL</name>;</typedef>
<typedef>typedef <type><name>uint64_t</name></type> <name>LLU</name>;</typedef>
<typedef>typedef <type><name>double</name></type> <name>DD</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>PII</name>;</typedef>
<function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>visited</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>graph</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>u</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list> <block>{
  <expr_stmt><expr><name><name>visited</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>auto</name></type> <name>v</name> <range>: <expr><name><name>graph</name><index>[<expr><name>u</name></expr>]</index></name></expr></range></decl></init>)</control> <block type="pseudo"><if>if<condition>(<expr><operator>!</operator><name><name>visited</name><index>[<expr><name>v</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>visited</name></expr></argument>, <argument><expr><name>graph</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></block></for>
}</block></function>
<function><type><name>void</name></type> <name>output</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>visited</name></decl></parameter>)</parameter_list> <block>{
  <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Yes\n"</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><call><name>sz</name><argument_list>(<argument><expr><name>visited</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>u</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>u</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><if>if<condition>(<expr><name><name>visited</name><index>[<expr><name>u</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt></block></then>
  <else>else <block type="pseudo"><expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block></else></if></block></for>
  <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>j</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name>p</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>u</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>u</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><if>if<condition>(<expr><name><name>visited</name><index>[<expr><name>u</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>u</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt></block></then></if></block></for>
  <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>u</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>u</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><if>if<condition>(<expr><operator>!</operator><name><name>visited</name><index>[<expr><name>u</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>u</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt></block></then></if></block></for>
  <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
}</block></function>
  
<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name></expr>;</expr_stmt>
  <decl_stmt><decl><specifier>static</specifier> <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name><name>graph</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>static</specifier> <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></type> <name><name>visited</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
    <expr_stmt><expr><name><name>graph</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>graph</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>resize</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>visited</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>visited</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>resize</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>
  <while>while <condition>(<expr><name>m</name><operator>--</operator></expr>)</condition> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>u</name> <operator>&gt;&gt;</operator> <name>v</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>u</name><operator>--</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>v</name><operator>--</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>graph</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>psb</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>graph</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>psb</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></while>
  <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name><name>visited</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>graph</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>u</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>u</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><if>if<condition>(<expr><operator>!</operator><name><name>visited</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>u</name></expr>]</index></name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>output</name><argument_list>(<argument><expr><name><name>visited</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  }</block></then></if></block></for>
  <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name><name>visited</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>graph</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>u</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>u</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><if>if<condition>(<expr><operator>!</operator><name><name>visited</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>u</name></expr>]</index></name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name><name>visited</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>visited</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>resize</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name><name>visited</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>graph</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>output</name><argument_list>(<argument><expr><name><name>visited</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  }</block></then></if></block></for>
  <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No\n"</literal></expr>;</expr_stmt>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
  <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>t</name><operator>--</operator></expr>)</condition> <block type="pseudo"><expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
