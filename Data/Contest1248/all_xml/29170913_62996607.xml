<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29170913_62996607.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name> <init>= <expr><literal type="number">100008</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>mod</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>num</name></decl>;</decl_stmt>

<function><type><name>ll</name></type> <name>fibonacciIteratively</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>ll</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>nextItem</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{
		<decl_stmt><decl><type><name>ll</name></type> <name>tmp</name> <init>= <expr><name>nextItem</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>nextItem</name> <operator>+=</operator> <name>result</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>result</name> <operator>%=</operator> <name>mod</name></expr>;</expr_stmt>
	}</block></for>

	<return>return <expr><name>result</name><operator>%</operator><name>mod</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>ans</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>ans</name> <operator>=</operator> <call><name>fibonacciIteratively</name><argument_list>(<argument><expr><name>m</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <call><name>fibonacciIteratively</name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>, <argument><expr><name>ans</name><operator>%</operator><name>mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function></unit>
