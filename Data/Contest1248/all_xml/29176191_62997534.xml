<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29176191_62997534.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff</name></cpp:macro> <cpp:value>fi.fi</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fs</name></cpp:macro> <cpp:value>fi.se</cpp:value></cpp:define>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>

<comment type="line">//const ll mod=1e9+7;</comment>

<decl_stmt><decl><type><name>ll</name></type> <name><name>fact</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>ll</name></type> <name>power</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>p</name></decl></parameter>)</parameter_list> 
<block>{ 
    <decl_stmt><decl><type><name>ll</name></type> <name>res</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>      
  
    <expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>%</operator> <name>p</name></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>y</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> 
    <block>{ 
        
        <if>if <condition>(<expr><name>y</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then> 
            <block type="pseudo"><expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>res</name><operator>*</operator><name>x</name><operator>)</operator> <operator>%</operator> <name>p</name></expr>;</expr_stmt></block></then></if> 
  
        <expr_stmt><expr><name>y</name> <operator>=</operator> <name>y</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</expr_stmt> 
        <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name><operator>*</operator><name>x</name><operator>)</operator> <operator>%</operator> <name>p</name></expr>;</expr_stmt> 
    }</block></while> 
    <return>return <expr><name>res</name></expr>;</return> 
}</block></function> 
  
<function><type><name>ll</name></type> <name>modInverse</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>p</name></decl></parameter>)</parameter_list> 
<block>{ 
    <return>return <expr><call><name>power</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>p</name><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return> 
}</block></function> 
  

<function><type><name>ll</name></type> <name>nCr</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>p</name></decl></parameter>)</parameter_list> 
<block>{ 
   <comment type="line">// Base case </comment>
   <if>if <condition>(<expr><name>r</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> 
      <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if> 
    
  
    <return>return <expr><operator>(</operator><name><name>fact</name><index>[<expr><name>n</name></expr>]</index></name><operator>*</operator> <call><name>modInverse</name><argument_list>(<argument><expr><name><name>fact</name><index>[<expr><name>r</name></expr>]</index></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>%</operator> <name>p</name> <operator>*</operator> 
            <call><name>modInverse</name><argument_list>(<argument><expr><name><name>fact</name><index>[<expr><name>n</name><operator>-</operator><name>r</name></expr>]</index></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>%</operator> <name>p</name><operator>)</operator> <operator>%</operator> <name>p</name></expr>;</return> 
}</block></function> 
  

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	

	<decl_stmt><decl><type><name>ll</name></type> <name>mod</name><init>=<expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>fact</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
    <for>for <control>(<init><decl><type><name>ll</name></type> <name>q</name><init>=<expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>q</name><operator>&lt;=</operator><literal type="number">100000</literal></expr>;</condition> <incr><expr><name>q</name><operator>++</operator></expr></incr>)</control> 
        <block type="pseudo"><expr_stmt><expr><name><name>fact</name><index>[<expr><name>q</name></expr>]</index></name> <operator>=</operator> <name><name>fact</name><index>[<expr><name>q</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>*</operator><name>q</name><operator>%</operator><name>mod</name></expr>;</expr_stmt></block></for> 
	
	<decl_stmt><decl><type><name>ll</name></type> <name>z</name></decl>,<decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>z</name><operator>&gt;&gt;</operator><name>x</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>ll</name></type> <name>q</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>q</name><operator>&lt;=</operator><literal type="number">100000</literal></expr>;</condition><incr><expr><name>q</name><operator>++</operator></expr></incr>)</control><block>{
		<if>if<condition>(<expr><name>q</name><operator>*</operator><literal type="number">2</literal><operator>&lt;=</operator><name>z</name></expr>)</condition><then><block>{
			<decl_stmt><decl><type><name>ll</name></type> <name>n</name><init>=<expr><name>z</name><operator>-</operator><operator>(</operator><name>q</name><operator>*</operator><literal type="number">2</literal><operator>)</operator><operator>+</operator><name>q</name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>ans</name><operator>=</operator><operator>(</operator><operator>(</operator><name>ans</name><operator>%</operator><name>mod</name><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><call><name>nCr</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><name>q</name></expr></argument>,<argument><expr><name>mod</name></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">2LL</literal><operator>)</operator><operator>%</operator><name>mod</name><operator>)</operator><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt>
<comment type="line">//			cout&lt;&lt;"yo  "&lt;&lt;q&lt;&lt;" "&lt;&lt;nCr(n,q,mod)&lt;&lt;endl;</comment>
		}</block></then>
		<else>else<block>{
			<break>break;</break>
		}</block></else></if>
	}</block></for>
	<for>for<control>(<init><decl><type><name>ll</name></type> <name>q</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>q</name><operator>&lt;=</operator><literal type="number">100000</literal></expr>;</condition><incr><expr><name>q</name><operator>++</operator></expr></incr>)</control><block>{
		<if>if<condition>(<expr><name>q</name><operator>*</operator><literal type="number">2</literal><operator>&lt;=</operator><name>x</name></expr>)</condition><then><block>{
			<decl_stmt><decl><type><name>ll</name></type> <name>n</name><init>=<expr><name>x</name><operator>-</operator><operator>(</operator><name>q</name><operator>*</operator><literal type="number">2</literal><operator>)</operator><operator>+</operator><name>q</name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>ans</name><operator>=</operator><operator>(</operator><operator>(</operator><name>ans</name><operator>%</operator><name>mod</name><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><call><name>nCr</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><name>q</name></expr></argument>,<argument><expr><name>mod</name></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">2LL</literal><operator>)</operator><operator>%</operator><name>mod</name><operator>)</operator><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt>
<comment type="line">//			cout&lt;&lt;"yo1  "&lt;&lt;q&lt;&lt;" "&lt;&lt;nCr(n,,mod)&lt;&lt;endl;</comment>
		}</block></then>
		<else>else<block>{
			<break>break;</break>
		}</block></else></if>
	}</block></for>
	<expr_stmt><expr><name>ans</name><operator>-=</operator><literal type="number">2LL</literal></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>ans</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>ans</name><operator>+=</operator><name>mod</name></expr>;</expr_stmt></block></while>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
}</block></function></unit>
