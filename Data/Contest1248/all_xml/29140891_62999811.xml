<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29140891_62999811.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ull</name></cpp:macro> <cpp:value>unsigned long long int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ld</name></cpp:macro> <cpp:value>long double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pf</name></cpp:macro> <cpp:value>pop_front</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fio</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(false);cin.tie(NULL);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mat</name></cpp:macro> <cpp:value>vector&lt;vector&lt;int&gt;&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x.begin(),x.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fo</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=0;i&lt;n;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inp</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>int a;cin&gt;&gt;a;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inpa</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>vector&lt;int&gt; a(n);fo(i,n)cin&gt;&gt;a[i];</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>printclock</name></cpp:macro> <cpp:value>cerr&lt;&lt;"Time : "&lt;&lt;1000*(ld)clock()/(ld)CLOCKS_PER_SEC&lt;&lt;"ms\n";</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>ll</cpp:value></cpp:define>


<function><type><name>auto</name></type> <name>max</name><parameter_list>(<parameter><decl><type><name>auto</name></type> <name>a</name></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name>auto</name></type> <name>ans</name><init>=<expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt><for>for<control>(<init><decl><type><name>auto</name></type> <name>i</name><range>:<expr><name>a</name></expr></range></decl></init>)</control><block type="pseudo"><if>if<condition>(<expr><name>i</name><operator>&gt;</operator><name>ans</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>ans</name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></then></if></block></for><return>return <expr><name>ans</name></expr>;</return>}</block></function>
<function><type><name>auto</name></type> <name>min</name><parameter_list>(<parameter><decl><type><name>auto</name></type> <name>a</name></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name>auto</name></type> <name>ans</name><init>=<expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt><for>for<control>(<init><decl><type><name>auto</name></type> <name>i</name><range>:<expr><name>a</name></expr></range></decl></init>)</control><block type="pseudo"><if>if<condition>(<expr><name>i</name><operator>&lt;</operator><name>ans</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>ans</name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></then></if></block></for><return>return <expr><name>ans</name></expr>;</return>}</block></function>
<function><type><name>void</name></type> <name>print</name><parameter_list>(<parameter><decl><type><name>auto</name></type> <name>a</name></decl></parameter>)</parameter_list><block>{<for>for<control>(<init><decl><type><name>auto</name></type> <name>i</name><range>:<expr><name>a</name></expr></range></decl></init>)</control><block type="pseudo"><expr_stmt><expr><name>cerr</name><operator>&lt;&lt;</operator><name>i</name><operator>&lt;&lt;</operator><literal type="char">' '</literal></expr>;</expr_stmt></block></for><expr_stmt><expr><name>cerr</name><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt>}</block></function>



<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>fio</name></type>
	<name>inp</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list>
	<name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name> <name>temp</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
	<macro><name>fo</name><argument_list>(<argument>i</argument>,<argument>n</argument>)</argument_list></macro>
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>temp</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ans1</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>ans2</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<macro><name>fo</name><argument_list>(<argument>ind1</argument>,<argument>n</argument>)</argument_list></macro>
	<block>{
		<for>for<control>(<init><decl><type><name>int</name></type> <name>ind2</name><init>=<expr><name>ind1</name></expr></init></decl>;</init><condition><expr><name>ind2</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>ind2</name><operator>++</operator></expr></incr>)</control>
		<block>{
			<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name></type> <name>s</name><init>=<expr><name>temp</name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>ind1</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>s</name><index>[<expr><name>ind2</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>count</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>ct</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name><name>p1</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
			<expr_stmt><expr><name><name>p1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>mi</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
			<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block>{
				<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">'('</literal></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><name><name>p1</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>p1</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then>
				<else>else
					<block type="pseudo"><expr_stmt><expr><name><name>p1</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>p1</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
				<expr_stmt><expr><name>mi</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>mi</name></expr></argument>,<argument><expr><name><name>p1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></for>
			<if>if<condition>(<expr><name><name>p1</name><index>[<expr><name>n</name></expr>]</index></name><operator>!=</operator><literal type="number">0</literal></expr>)</condition><then>
				<block type="pseudo"><continue>continue;</continue></block></then></if>
			<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition><incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
			<block>{
				<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'('</literal></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><name>ct</name><operator>++</operator></expr>;</expr_stmt></block></then>
				<else>else
					<block type="pseudo"><expr_stmt><expr><name>ct</name><operator>--</operator></expr>;</expr_stmt></block></else></if>
				<if>if<condition>(<expr><name>ct</name><operator>+</operator><name>mi</name><operator>&gt;=</operator><literal type="number">0</literal></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
			}</block></for>
			<if>if<condition>(<expr><name>count</name><operator>&gt;</operator><name>ans</name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name>ans</name><operator>=</operator><name>count</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>ans1</name><operator>=</operator><name>ind1</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>ans2</name><operator>=</operator><name>ind2</name></expr>;</expr_stmt>
			}</block></then></if>
		}</block></for>
	}</block>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><literal type="char">'\n'</literal><operator>&lt;&lt;</operator><name>ans1</name><operator>+</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="char">' '</literal><operator>&lt;&lt;</operator><name>ans2</name><operator>+</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>printclock</name></expr>;</expr_stmt>
}</block></function></unit>
