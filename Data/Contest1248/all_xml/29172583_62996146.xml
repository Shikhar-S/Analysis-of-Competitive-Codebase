<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29172583_62996146.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ha</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ui</name></cpp:macro> <cpp:value>unsigned int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;int,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pid</name></cpp:macro> <cpp:value>pair&lt;int,double&gt;</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><specifier>inline</specifier> <type><name>int</name></type> <name>read</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><name>x</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>ansds</name></decl>,<decl><type ref="prev"/><name>l</name></decl>,<decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>ssss</name><index>[<expr><literal type="number">505</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>kkk</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>int</name></type> <name>ww</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>ww</name><operator>++</operator></expr>;</expr_stmt><expr_stmt><expr><name>ww</name><operator>--</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>ww</name><operator>++</operator></expr>;</expr_stmt><expr_stmt><expr><name>ww</name><operator>--</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>ww</name><operator>++</operator></expr>;</expr_stmt><expr_stmt><expr><name>ww</name><operator>--</operator></expr>;</expr_stmt><expr_stmt><expr><name>ww</name><operator>++</operator></expr>;</expr_stmt><expr_stmt><expr><name>ww</name><operator>--</operator></expr>;</expr_stmt><expr_stmt><expr><name>ww</name><operator>++</operator></expr>;</expr_stmt><expr_stmt><expr><name>ww</name><operator>--</operator></expr>;</expr_stmt><expr_stmt><expr><name>ww</name><operator>++</operator></expr>;</expr_stmt><expr_stmt><expr><name>ww</name><operator>--</operator></expr>;</expr_stmt><expr_stmt><expr><name>ww</name><operator>++</operator></expr>;</expr_stmt><expr_stmt><expr><name>ww</name><operator>--</operator></expr>;</expr_stmt><expr_stmt><expr><name>ww</name><operator>++</operator></expr>;</expr_stmt><expr_stmt><expr><name>ww</name><operator>--</operator></expr>;</expr_stmt><expr_stmt><expr><name>ww</name><operator>++</operator></expr>;</expr_stmt><expr_stmt><expr><name>ww</name><operator>--</operator></expr>;</expr_stmt><expr_stmt><expr><name>ww</name><operator>++</operator></expr>;</expr_stmt><expr_stmt><expr><name>ww</name><operator>--</operator></expr>;</expr_stmt><expr_stmt><expr><name>ww</name><operator>++</operator></expr>;</expr_stmt><expr_stmt><expr><name>ww</name><operator>--</operator></expr>;</expr_stmt><expr_stmt><expr><name>ww</name><operator>++</operator></expr>;</expr_stmt><expr_stmt><expr><name>ww</name><operator>--</operator></expr>;</expr_stmt><expr_stmt><expr><name>ww</name><operator>++</operator></expr>;</expr_stmt><expr_stmt><expr><name>ww</name><operator>--</operator></expr>;</expr_stmt><expr_stmt><expr><name>ww</name><operator>++</operator></expr>;</expr_stmt><expr_stmt><expr><name>ww</name><operator>--</operator></expr>;</expr_stmt><expr_stmt><expr><name>ww</name><operator>++</operator></expr>;</expr_stmt><expr_stmt><expr><name>ww</name><operator>--</operator></expr>;</expr_stmt><expr_stmt><expr><name>ww</name><operator>++</operator></expr>;</expr_stmt><expr_stmt><expr><name>ww</name><operator>--</operator></expr>;</expr_stmt><expr_stmt><expr><name>ww</name><operator>++</operator></expr>;</expr_stmt><expr_stmt><expr><name>ww</name><operator>--</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>ww</name><operator>++</operator></expr>;</expr_stmt><expr_stmt><expr><name>ww</name><operator>--</operator></expr>;</expr_stmt><expr_stmt><expr><name>ww</name><operator>++</operator></expr>;</expr_stmt><expr_stmt><expr><name>ww</name><operator>--</operator></expr>;</expr_stmt><expr_stmt><expr><name>ww</name><operator>++</operator></expr>;</expr_stmt><expr_stmt><expr><name>ww</name><operator>--</operator></expr>;</expr_stmt><expr_stmt><expr><name>ww</name><operator>++</operator></expr>;</expr_stmt><expr_stmt><expr><name>ww</name><operator>--</operator></expr>;</expr_stmt><expr_stmt><expr><name>ww</name><operator>++</operator></expr>;</expr_stmt><expr_stmt><expr><name>ww</name><operator>--</operator></expr>;</expr_stmt><expr_stmt><expr><name>ww</name><operator>++</operator></expr>;</expr_stmt><expr_stmt><expr><name>ww</name><operator>--</operator></expr>;</expr_stmt><expr_stmt><expr><name>ww</name><operator>++</operator></expr>;</expr_stmt><expr_stmt><expr><name>ww</name><operator>--</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>ww</name><operator>++</operator></expr>;</expr_stmt><expr_stmt><expr><name>ww</name><operator>--</operator></expr>;</expr_stmt><expr_stmt><expr><name>ww</name><operator>++</operator></expr>;</expr_stmt><expr_stmt><expr><name>ww</name><operator>--</operator></expr>;</expr_stmt><expr_stmt><expr><name>ww</name><operator>++</operator></expr>;</expr_stmt><expr_stmt><expr><name>ww</name><operator>--</operator></expr>;</expr_stmt><expr_stmt><expr><name>ww</name><operator>++</operator></expr>;</expr_stmt><expr_stmt><expr><name>ww</name><operator>--</operator></expr>;</expr_stmt><expr_stmt><expr><name>ww</name><operator>++</operator></expr>;</expr_stmt><expr_stmt><expr><name>ww</name><operator>--</operator></expr>;</expr_stmt><expr_stmt><expr><name>ww</name><operator>++</operator></expr>;</expr_stmt><expr_stmt><expr><name>ww</name><operator>--</operator></expr>;</expr_stmt><expr_stmt><expr><name>ww</name><operator>++</operator></expr>;</expr_stmt><expr_stmt><expr><name>ww</name><operator>--</operator></expr>;</expr_stmt><expr_stmt><expr><name>ww</name><operator>++</operator></expr>;</expr_stmt><expr_stmt><expr><name>ww</name><operator>--</operator></expr>;</expr_stmt><expr_stmt><expr><name>ww</name><operator>++</operator></expr>;</expr_stmt><expr_stmt><expr><name>ww</name><operator>--</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>ww</name><operator>++</operator></expr>;</expr_stmt><expr_stmt><expr><name>ww</name><operator>--</operator></expr>;</expr_stmt><expr_stmt><expr><name>ww</name><operator>++</operator></expr>;</expr_stmt><expr_stmt><expr><name>ww</name><operator>--</operator></expr>;</expr_stmt><expr_stmt><expr><name>ww</name><operator>++</operator></expr>;</expr_stmt><expr_stmt><expr><name>ww</name><operator>--</operator></expr>;</expr_stmt><expr_stmt><expr><name>ww</name><operator>++</operator></expr>;</expr_stmt><expr_stmt><expr><name>ww</name><operator>--</operator></expr>;</expr_stmt><expr_stmt><expr><name>ww</name><operator>++</operator></expr>;</expr_stmt><expr_stmt><expr><name>ww</name><operator>--</operator></expr>;</expr_stmt><expr_stmt><expr><name>ww</name><operator>++</operator></expr>;</expr_stmt><expr_stmt><expr><name>ww</name><operator>--</operator></expr>;</expr_stmt><expr_stmt><expr><name>ww</name><operator>++</operator></expr>;</expr_stmt><expr_stmt><expr><name>ww</name><operator>--</operator></expr>;</expr_stmt><expr_stmt><expr><name>ww</name><operator>++</operator></expr>;</expr_stmt><expr_stmt><expr><name>ww</name><operator>--</operator></expr>;</expr_stmt><expr_stmt><expr><name>ww</name><operator>++</operator></expr>;</expr_stmt><expr_stmt><expr><name>ww</name><operator>--</operator></expr>;</expr_stmt><expr_stmt><expr><name>ww</name><operator>++</operator></expr>;</expr_stmt><expr_stmt><expr><name>ww</name><operator>--</operator></expr>;</expr_stmt><expr_stmt><expr><name>ww</name><operator>++</operator></expr>;</expr_stmt><expr_stmt><expr><name>ww</name><operator>--</operator></expr>;</expr_stmt>
}</block></function>
<function><type><name>int</name></type> <name>work</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>mn</name><init>=<expr><name>n</name></expr></init></decl>,<decl><type ref="prev"/><name>mni</name></decl>,<decl><type ref="prev"/><name>ccccccccc</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><specifier>register</specifier> <name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <if>if <condition>(<expr><name><name>ssss</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'('</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ccccccccc</name><operator>++</operator></expr>;</expr_stmt></block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><name>ccccccccc</name><operator>--</operator></expr>;</expr_stmt></block></else></if>
        <if>if <condition>(<expr><name><name>ssss</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">')'</literal></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
        <if>if <condition>(<expr><name>ccccccccc</name><operator>&lt;</operator><name>mn</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>mn</name><operator>=</operator><name>ccccccccc</name></expr><operator>,</operator><expr><name>mni</name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></then></if>
    }</block></for>
    <expr_stmt><expr><name>ccccccccc</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt> <decl_stmt><decl><type><name>int</name></type> <name>res</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><specifier>register</specifier> <name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>j</name><init>=<expr><name>mni</name></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator><expr><name>j</name><operator>=</operator><ternary><condition><expr><name>j</name><operator>==</operator><name>n</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr></else></ternary></expr></incr>)</control><block>{
        <if>if <condition>(<expr><name><name>ssss</name><index>[<expr><name>j</name></expr>]</index></name><operator>==</operator><literal type="char">'('</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ccccccccc</name><operator>++</operator></expr>;</expr_stmt></block></then>
        <else>else
        <block>{
            <expr_stmt><expr><name>ccccccccc</name><operator>--</operator></expr>;</expr_stmt>
            <if>if <condition>(<expr><operator>!</operator><name>ccccccccc</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>res</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
        }</block></else></if>
    }</block></for>
    <return>return <expr><name>res</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name>kkk</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name><operator>=</operator><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%ssss"</literal></expr></argument>,<argument><expr><name>ssss</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ccccccccc</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><specifier>register</specifier> <name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <if>if <condition>(<expr><name><name>ssss</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">')'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ccccccccc</name><operator>--</operator></expr>;</expr_stmt></block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><name>ccccccccc</name><operator>++</operator></expr>;</expr_stmt></block></else></if>
    }</block></for>
    <if>if <condition>(<expr><name>ccccccccc</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><operator>!</operator><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"0\n1 1"</literal></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
    <expr_stmt><expr><name>ansds</name><operator>=</operator><call><name>work</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>l</name><operator>=</operator><name>r</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><specifier>register</specifier> <name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
    	<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt><expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>ssss</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>ssss</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>res</name><init>=<expr><call><name>work</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name>res</name><operator>&gt;</operator><name>ansds</name></expr>)</condition><then><block>{
                <expr_stmt><expr><name>ansds</name><operator>=</operator><name>res</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>l</name><operator>=</operator><name>i</name></expr><operator>,</operator><expr><name>r</name><operator>=</operator><name>j</name></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>ssss</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>ssss</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></for>
    <return>return <expr><operator>!</operator><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n%d %d"</literal></expr></argument>,<argument><expr><name>ansds</name></expr></argument>,<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function></unit>
