<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29171516_63006625.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name> ;</namespace></using>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name> <init>= <expr><literal type="number">1e6</literal><operator>+</operator><literal type="number">10</literal></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name><name>mark</name><index>[<expr><name>maxn</name></expr>]</index></name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>adj</name><index>[<expr><name>maxn</name></expr>]</index></name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>adj2</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lol</name></decl> ;</decl_stmt>

<function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>)</parameter_list><block>{

  <expr_stmt><expr><name>lol</name><operator>++</operator></expr> ;</expr_stmt>
  <expr_stmt><expr><name><name>mark</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
  <for>for<control>(<init><decl><type><name>auto</name></type> <name>v</name><range>: <expr><name><name>adj</name><index>[<expr><name>u</name></expr>]</index></name></expr></range></decl></init>)</control><block>{

    <if>if<condition>(<expr><operator>!</operator><name><name>mark</name><index>[<expr><name>v</name></expr>]</index></name></expr>)</condition><then>
      <block type="pseudo"><expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block></then></if>

  }</block></for>

}</block></function>

<function><type><name>void</name></type> <name>dfs2</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>)</parameter_list><block>{

  <expr_stmt><expr><name>lol</name><operator>++</operator></expr> ;</expr_stmt>
  <expr_stmt><expr><name><name>mark</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
  <for>for<control>(<init><decl><type><name>auto</name></type> <name>v</name><range>: <expr><name><name>adj2</name><index>[<expr><name>u</name></expr>]</index></name></expr></range></decl></init>)</control><block>{

    <if>if<condition>(<expr><name><name>mark</name><index>[<expr><name>v</name></expr>]</index></name></expr>)</condition><then>
      <block type="pseudo"><expr_stmt><expr><call><name>dfs2</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block></then></if>

  }</block></for>

}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{

  <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
  <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>T</name></decl> ;</decl_stmt>
  <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>T</name></expr> ;</expr_stmt>
  <for>for<control>(<init><decl><type><name>int</name></type> <name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>t</name> <operator>&lt;</operator> <name>T</name></expr>;</condition> <incr><expr><name>t</name><operator>++</operator></expr></incr>)</control><block>{

    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl> ;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name></expr> ;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
      <expr_stmt><expr><name><name>adj</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>clear</name><argument_list>()</argument_list></call></expr> ;</expr_stmt>
      <expr_stmt><expr><name><name>adj2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>mark</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    }</block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{

      <decl_stmt><decl><type><name>int</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>v</name></decl> ;</decl_stmt>
      <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>u</name> <operator>&gt;&gt;</operator> <name>v</name></expr> ;</expr_stmt>
      <expr_stmt><expr><name>u</name><operator>--</operator></expr> ;</expr_stmt>
      <expr_stmt><expr><name>v</name><operator>--</operator></expr> ;</expr_stmt>
      <expr_stmt><expr><name><name>adj</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
      <expr_stmt><expr><name><name>adj2</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></for>
    <expr_stmt><expr><name>lol</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <if>if<condition>(<expr><name>lol</name> <operator>==</operator> <name>n</name></expr>)</condition><then><block>{

      <expr_stmt><expr><name>lol</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
      <expr_stmt><expr><call><name>dfs2</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
      <if>if<condition>(<expr><name>lol</name> <operator>==</operator> <name>n</name></expr>)</condition><then><block>{

        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"NO\n"</literal></expr> ;</expr_stmt>
        <continue>continue ;</continue>

      }</block></then></if>
      <expr_stmt><expr><name>lol</name> <operator>=</operator> <name>n</name><operator>-</operator><name>lol</name></expr> ;</expr_stmt>

    }</block></then></if>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator><literal type="string">"YES\n"</literal><operator>&lt;&lt;</operator> <name>n</name><operator>-</operator><name>lol</name> <operator>&lt;&lt;</operator><literal type="char">' '</literal><operator>&lt;&lt;</operator> <name>lol</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr> ;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{

      <if>if<condition>(<expr><operator>!</operator><name><name>mark</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>i</name><operator>+</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="char">' '</literal></expr> ;</expr_stmt></block></then></if>

    }</block></for>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr> ;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{

      <if>if<condition>(<expr><name><name>mark</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>i</name><operator>+</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="char">' '</literal></expr> ;</expr_stmt></block></then></if>

    }</block></for>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr> ;</expr_stmt>

  }</block></for>

}</block></function>
</unit>
