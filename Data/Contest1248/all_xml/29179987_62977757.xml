<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29179987_62977757.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>llint</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fir</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sec</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>len</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(int)(v).size()</cpp:value></cpp:define>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LOCAL</name></cpp:ifdef>
<function_decl><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name>string</name></type> <name>DSTR</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl><function><type><name>string</name></type> <name>to_string</name><parameter_list>(<parameter><decl><type><name>string</name></type> <name>v</name></decl></parameter>)</parameter_list><block>{<return>return<expr><literal type="string">"\""</literal><operator>+</operator><name>v</name><operator>+</operator><literal type="string">"\""</literal></expr>;</return>}</block></function><function><type><name>string</name></type> <name>to_string</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>v</name></decl></parameter>)</parameter_list><block>{<return>return<expr><literal type="string">"\'"</literal><operator>+</operator><call><name>string</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>v</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="string">"\'"</literal></expr>;</return>}</block></function><function><type><name>string</name></type> <name>to_string</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>v</name></decl></parameter>)</parameter_list><block>{<return>return<expr><operator>(</operator><ternary><condition><expr><name>v</name></expr>?</condition><then><expr><literal type="string">"true"</literal></expr></then><else>:<expr><literal type="string">"false"</literal></expr></else></ternary><operator>)</operator></expr>;</return>}</block></function><function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name>string</name></type> <name>to_string</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>v</name></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name>bool</name></type> <name>f</name><init>=<expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt><decl_stmt><decl><type><name>string</name></type> <name>res</name><init>=<expr><literal type="string">"{"</literal></expr></init></decl>;</decl_stmt><for>for<control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type><name>i</name><range>:<expr><name>v</name></expr></range></decl></init>)</control><block>{<if>if<condition>(<expr><operator>!</operator><name>f</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>res</name><operator>+=</operator><literal type="string">", "</literal></expr>;</expr_stmt></block></then></if><expr_stmt><expr><name>f</name><operator>=</operator><literal type="boolean">false</literal></expr>;</expr_stmt><expr_stmt><expr><name>res</name><operator>+=</operator><call><name>DSTR</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></for><expr_stmt><expr><name>res</name><operator>+=</operator><literal type="string">"}"</literal></expr>;</expr_stmt><return>return <expr><name>res</name></expr>;</return>}</block></function><function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>A</name></parameter>,<parameter><type><name>class</name></type> <name>B</name></parameter>&gt;</parameter_list></template><type><name>string</name></type> <name>to_string</name><parameter_list>(<parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>A</name></expr></argument>,<argument><expr><name>B</name></expr></argument>&gt;</argument_list></name></type><name>v</name></decl></parameter>)</parameter_list><block>{<return>return<expr><literal type="string">"("</literal><operator>+</operator><call><name>DSTR</name><argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call><operator>+</operator><literal type="string">", "</literal><operator>+</operator><call><name>DSTR</name><argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call><operator>+</operator><literal type="string">")"</literal></expr>;</return>}</block></function><function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name>string</name></type> <name>DSTR</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>v</name></decl></parameter>)</parameter_list><block>{<return>return <expr><call><name>to_string</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>watch</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cerr&lt;&lt;"["&lt;&lt; __func__&lt;&lt;":"&lt;&lt;__LINE__&lt;&lt;"]: "#v" = "&lt;&lt;DSTR(v)&lt;&lt;"\n"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>watchsl</name><parameter_list>(<parameter><type><name>v</name></type></parameter>,<parameter><type><name>f</name></type></parameter>,<parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cerr&lt;&lt;"["&lt;&lt; __func__&lt;&lt;":"&lt;&lt;__LINE__&lt;&lt;"]: "#v"["&lt;&lt;DSTR(f)&lt;&lt;".."&lt;&lt;DSTR(l)&lt;&lt;"] = {";for(auto ITE=f;ITE&lt;l;ITE++)cerr&lt;&lt;DSTR(v[ITE])&lt;&lt;", ";cerr&lt;&lt;to_string(v[l])&lt;&lt;"}\n"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEP</name></cpp:macro> <cpp:value>cerr&lt;&lt;"-----------------------------------\n\n"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEP2</name></cpp:macro> <cpp:value>cerr&lt;&lt;"===================================\n\n"</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>watch</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>watchsl</name><parameter_list>(<parameter><type><name>v</name></type></parameter>,<parameter><type><name>f</name></type></parameter>,<parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEP</name></cpp:macro> <cpp:value>;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEP2</name></cpp:macro> <cpp:value>;</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="line">//	const int LEN = (int);</comment>



<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LOCAL</name></cpp:ifdef>
	<expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"input.txt"</literal></expr></argument>, <argument><expr><literal type="string">"rt"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"output.txt"</literal></expr></argument>, <argument><expr><literal type="string">"wt"</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>t</name><operator>--</operator></expr>)</condition>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>cntp1</name></decl>, <decl><type ref="prev"/><name>cntp0</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cntp1</name> <operator>=</operator> <name>cntp0</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{
			<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
			<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>x</name></expr>;</expr_stmt>
			<expr_stmt><expr><operator>(</operator><ternary><condition><expr><name>x</name> <operator>&amp;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>cntp1</name></expr> </then><else>: <expr><name>cntp0</name></expr></else></ternary><operator>)</operator> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		}</block></for>

		<decl_stmt><decl><type><name>int</name></type> <name>cntq1</name></decl>, <decl><type ref="prev"/><name>cntq0</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cntq1</name> <operator>=</operator> <name>cntq0</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{
			<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
			<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>x</name></expr>;</expr_stmt>
			<expr_stmt><expr><operator>(</operator><ternary><condition><expr><name>x</name> <operator>&amp;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>cntq1</name></expr> </then><else>: <expr><name>cntq0</name></expr></else></ternary><operator>)</operator> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		}</block></for>

		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="number">1LL</literal> <operator>*</operator> <name>cntq1</name> <operator>*</operator> <name>cntp1</name> <operator>+</operator> <literal type="number">1LL</literal> <operator>*</operator> <name>cntq0</name> <operator>*</operator> <name>cntp0</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
	}</block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
