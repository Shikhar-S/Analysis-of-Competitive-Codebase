<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29178813_62991741.cpp"><comment type="line">// template version 1.13</comment>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<comment type="line">// varibable settings</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>infile</name></cpp:macro> <cpp:value>"../test/sample-1.in"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define> <comment type="line">//{{{</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>INF</name><init>=<expr><literal type="number">1e18</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MOD</name><init>=<expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt> <comment type="line">//}}}</comment>

<comment type="line">// define basic macro {{{</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_overload3</name><parameter_list>(<parameter><type><name>_1</name></type></parameter>,<parameter><type><name>_2</name></type></parameter>,<parameter><type><name>_3</name></type></parameter>,<parameter><type><name>name</name></type></parameter>,<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>name</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>repi(i,0,n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>repi</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=(int)(a);i&lt;(int)(b);++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_overload3(__VA_ARGS__,repi,_rep,)(__VA_ARGS__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_rrep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rrepi(i,0,n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rrepi</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=(int)((b)-1);i&gt;=(int)(a);--i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rrep</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_overload3(__VA_ARGS__,rrepi,_rrep,)(__VA_ARGS__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>each</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (auto&amp;&amp; i : a)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x).begin(),(x).end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)(x).size())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>push_back(a)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>make_pair(a, b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ceil</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a)+(b)-1)/(b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>is_in</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a)&lt;=(x) &amp;&amp; (x)&lt;(b))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>uni</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>sort(all(x));x.erase(unique(all(x)),x.end())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ub</name></cpp:macro> <cpp:value>upper_bound</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lb</name></cpp:macro> <cpp:value>lower_bound</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>posl</name><parameter_list>(<parameter><type><name>A</name></type></parameter>, <parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(lower_bound(all(A), x)-A.begin())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>posu</name><parameter_list>(<parameter><type><name>A</name></type></parameter>, <parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(upper_bound(all(A),x)-A.begin())</cpp:value></cpp:define>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>void</name></type> <name>chmax</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{ <if>if<condition>(<expr><operator>(</operator><name>a</name><operator>)</operator> <operator>&lt;</operator> <operator>(</operator><name>b</name><operator>)</operator></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><operator>(</operator><name>a</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>b</name><operator>)</operator></expr>;</expr_stmt></block></then></if> }</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>void</name></type> <name>chmin</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{ <if>if<condition>(<expr><operator>(</operator><name>a</name><operator>)</operator> <operator>&gt;</operator> <operator>(</operator><name>b</name><operator>)</operator></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><operator>(</operator><name>a</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>b</name><operator>)</operator></expr>;</expr_stmt></block></then></if> }</block></function>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vi</name></expr></argument>&gt;</argument_list></name></type> <name>vvi</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<typedef>typedef <type><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>iii</name>;</typedef>

<using><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> using <name>PQ</name> <init>= <type><name><name>priority_queue</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>greater</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<struct>struct <name>Fast</name> <block>{<public type="default"> <constructor><name>Fast</name><parameter_list>()</parameter_list><block>{ <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></constructor> </public>}</block> <decl><name>fast</name></decl>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PCM</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>LOCAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib/dump.hpp"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dump</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>42</cpp:value></cpp:define>
  <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dump_1d</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>42</cpp:value></cpp:define>
  <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dump_2d</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>42</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="line">//}}}</comment>

<decl_stmt><decl><type><name>int</name></type> <name>mod</name> <init>= <expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<struct>struct <name>mint</name> <block>{<public type="default"> <comment type="line">//{{{</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
  <constructor><name>mint</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name><init>=<expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list><member_init_list>:<call><name>x</name><argument_list>(<argument><expr><operator>(</operator><name>x</name><operator>%</operator><name>mod</name><operator>+</operator><name>mod</name><operator>)</operator><operator>%</operator><name>mod</name></expr></argument>)</argument_list></call></member_init_list><block>{}</block></constructor>

  <comment type="line">// ?= operator</comment>
  <function type="operator"><type><name>mint</name><modifier>&amp;</modifier></type> <name>operator<name>+=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>mint</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><operator>(</operator><name>x</name> <operator>+=</operator> <name><name>a</name><operator>.</operator><name>x</name></name><operator>)</operator> <operator>%=</operator> <name>mod</name></expr>;</expr_stmt> <return>return <expr><operator>*</operator><name>this</name></expr>;</return> }</block></function>
  <function type="operator"><type><name>mint</name><modifier>&amp;</modifier></type> <name>operator<name>-=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>mint</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><operator>(</operator><name>x</name> <operator>+=</operator> <name>mod</name><operator>-</operator><name><name>a</name><operator>.</operator><name>x</name></name><operator>)</operator> <operator>%=</operator> <name>mod</name></expr>;</expr_stmt> <return>return <expr><operator>*</operator><name>this</name></expr>;</return> }</block></function>
  <function type="operator"><type><name>mint</name><modifier>&amp;</modifier></type> <name>operator<name>*=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>mint</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><operator>(</operator><name>x</name> <operator>*=</operator> <name><name>a</name><operator>.</operator><name>x</name></name><operator>)</operator> <operator>%=</operator> <name>mod</name></expr>;</expr_stmt> <return>return <expr><operator>*</operator><name>this</name></expr>;</return> }</block></function>
  <function type="operator"><type><name>mint</name><modifier>&amp;</modifier></type><name>operator<name>/=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>mint</name><modifier>&amp;</modifier></type><name>rhs</name></decl></parameter>)</parameter_list><block>{<return>return <expr><operator>*</operator><name>this</name><operator>*=</operator><call><name><name>rhs</name><operator>.</operator><name>inv</name></name><argument_list>()</argument_list></call></expr>;</return>}</block></function>

  <function type="operator"><type><name>mint</name></type> <name>operator<name>+</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>mint</name></type> <name>a</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{ <decl_stmt><decl><type><name>mint</name></type> <name>res</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></decl>;</decl_stmt> <return>return <expr><name>res</name><operator>+=</operator><name>a</name></expr>;</return> }</block></function>
  <function type="operator"><type><name>mint</name></type> <name>operator<name>-</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>mint</name></type> <name>a</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{ <decl_stmt><decl><type><name>mint</name></type> <name>res</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></decl>;</decl_stmt> <return>return <expr><name>res</name><operator>-=</operator><name>a</name></expr>;</return> }</block></function>
  <function type="operator"><type><name>mint</name></type> <name>operator<name>*</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>mint</name></type> <name>a</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{ <decl_stmt><decl><type><name>mint</name></type> <name>res</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></decl>;</decl_stmt> <return>return <expr><name>res</name><operator>*=</operator><name>a</name></expr>;</return> }</block></function>
  <function type="operator"><type><name>mint</name></type> <name>operator<name>/</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>mint</name><modifier>&amp;</modifier></type><name>rhs</name></decl></parameter>)</parameter_list><specifier>const</specifier><block>{<return>return <expr><call><name>mint</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call><operator>/=</operator><name>rhs</name></expr>;</return>}</block></function>

  <function><type><name>mint</name></type> <name>pow</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list><specifier>const</specifier><block>{
    <decl_stmt><decl><type><name>mint</name></type> <name>res</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></decl>,<decl><type ref="prev"/><name>x</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>n</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then><block>{
      <expr_stmt><expr><name>n</name> <operator>=</operator> <operator>-</operator><name>n</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>x</name> <operator>=</operator><call><name><operator>(</operator><operator>*</operator><name>this</name><operator>)</operator><operator>.</operator><name>inv</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <while>while<condition>(<expr><name>n</name></expr>)</condition><block>{
      <if>if<condition>(<expr><name>n</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>res</name><operator>*=</operator><name>x</name></expr>;</expr_stmt></block></then></if>
      <expr_stmt><expr><name>x</name><operator>*=</operator><name>x</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>n</name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><name>res</name></expr>;</return>
  }</block></function>
  <function><type><name>mint</name></type> <name>inv</name><parameter_list>()</parameter_list><specifier>const</specifier><block>{<return>return <expr><call><name>pow</name><argument_list>(<argument><expr><name>mod</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return>}</block></function>
  <comment type="block">/*mint inv()const{
    int x,y;
    int g=extgcd(v,mod,x,y);
    assert(g==1);
    if(x&lt;0)x+=mod;
    return mint(x);
    }*/</comment>
  <friend>friend <function type="operator"><type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type><name>os</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>mint</name><modifier>&amp;</modifier></type><name>m</name></decl></parameter>)</parameter_list><block>{
    <return>return <expr><name>os</name><operator>&lt;&lt;</operator><name><name>m</name><operator>.</operator><name>x</name></name></expr>;</return>
  }</block></function></friend>
  <function type="operator"><type><name>bool</name></type> <name>operator<name>&lt;</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>mint</name><modifier>&amp;</modifier></type><name>r</name></decl></parameter>)</parameter_list><specifier>const</specifier><block>{<return>return <expr><name>x</name><operator>&lt;</operator><name><name>r</name><operator>.</operator><name>x</name></name></expr>;</return>}</block></function>
  <function type="operator"><type><name>bool</name></type> <name>operator<name>==</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>mint</name><modifier>&amp;</modifier></type><name>r</name></decl></parameter>)</parameter_list><specifier>const</specifier><block>{<return>return <expr><name>x</name><operator>==</operator><name><name>r</name><operator>.</operator><name>x</name></name></expr>;</return>}</block></function>
</public>}</block>;</struct>
<comment type="line">//}}}</comment>

<function><type><name>int</name></type> <name>solve</name><parameter_list>()</parameter_list><block>{
  <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>m</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>z</name> <init>= <expr><call><name>max</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>mint</name></expr></argument>&gt;</argument_list></name></type> <name>dpw1</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>mint</name></expr></argument>&gt;</argument_list></name></type> <name>dpw2</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>mint</name></expr></argument>&gt;</argument_list></name></type> <name>dpb1</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>mint</name></expr></argument>&gt;</argument_list></name></type> <name>dpb2</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>dpw1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dpb1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <macro><name>rep</name><argument_list>(<argument>i</argument>, <argument><literal type="number">1</literal></argument>, <argument>z</argument>)</argument_list></macro><block>{
    <expr_stmt><expr><name><name>dpw2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>dpw1</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dpb2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>dpb1</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>dpw1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>dpb1</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dpw1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>dpb2</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>dpb1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>dpw1</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dpb1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>dpw2</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
  }</block>
  <expr_stmt><expr><call><name>dump</name><argument_list>(<argument><expr><name>dpw1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dump</name><argument_list>(<argument><expr><name>dpw2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dump</name><argument_list>(<argument><expr><name>dpb1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dump</name><argument_list>(<argument><expr><name>dpb2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>mint</name></type> <name>x</name> <init>= <expr><name><name>dpw1</name><index>[<expr><name>m</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>dpw2</name><index>[<expr><name>m</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>dpb1</name><index>[<expr><name>m</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>dpb2</name><index>[<expr><name>m</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>mint</name></type> <name>y</name> <init>= <expr><name><name>dpw1</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>dpw2</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>dpb1</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>dpb2</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>dump</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>(</operator><name>x</name><operator>-</operator><literal type="number">2</literal><operator>)</operator> <operator>+</operator> <name>y</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{ <comment type="line">//{{{</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>INPUT_FROM_FILE</name></cpp:ifdef>
  <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>ifstream</name></name></type> <name>in</name><argument_list>(<argument><expr><name>infile</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>cin</name><operator>.</operator><name>rdbuf</name></name><argument_list>(<argument><expr><call><name><name>in</name><operator>.</operator><name>rdbuf</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function> <comment type="line">//}}}</comment>
</unit>
