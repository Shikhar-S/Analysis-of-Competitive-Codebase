<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29181075_63007898.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bitset&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sstream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<comment type="line">// #include &lt;unordered_map&gt;</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SZ</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)(a.size()))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=a;i&lt;n;++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>per</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=(n)-1;i&gt;=a;--i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>foredge</name><parameter_list>(<parameter><type><name>u</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=head[u];~i;i=l[i].nxt)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mem</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(a,x,sizeof(a))</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LOCAL</name></cpp:ifdef>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name>void</name></type> <name>print_array</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>*</modifier></type><name>a</name></decl></parameter>,<parameter><decl><type><name>T</name> <modifier>*</modifier></type><name>end</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"#["</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><for>for<control>(<init>;</init><condition><expr><name>a</name><operator>&lt;</operator><name>end</name></expr>;</condition><incr><expr><operator>++</operator><name>a</name></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>(</operator><operator>*</operator><name>a</name><operator>)</operator><operator>&lt;&lt;</operator><literal type="char">','</literal></expr>;</expr_stmt></block></for><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"\b]\n"</literal></expr>;</expr_stmt>}</block></function><empty_stmt>;</empty_stmt>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name>ostream</name> <modifier>&amp;</modifier></type><name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type><name>os</name></decl></parameter>,<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type><name>V</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name>os</name><operator>&lt;&lt;</operator><literal type="string">"["</literal></expr>;</expr_stmt><for>for<control>(<init><decl><type><name>auto</name></type> <name>vv</name><range>:<expr><name>V</name></expr></range></decl></init>)</control><block type="pseudo"><expr_stmt><expr><name>os</name><operator>&lt;&lt;</operator><name>vv</name><operator>&lt;&lt;</operator><literal type="string">","</literal></expr>;</expr_stmt></block></for><return>return <expr><name>os</name><operator>&lt;&lt;</operator><literal type="string">"\b]"</literal></expr>;</return>}</block></function>
<function><type><name>void</name></type> <name>dbg</name><parameter_list>()</parameter_list><block>{<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"\b \n"</literal></expr>;</expr_stmt>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>,<parameter><type><name>typename</name><modifier>...</modifier></type><name>A</name></parameter>&gt;</parameter_list></template><type><name>void</name></type> <name>dbg</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>A</name><modifier>...</modifier></type><name>x</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>(</operator><name>a</name><operator>)</operator><operator>&lt;&lt;</operator><literal type="char">','</literal></expr>;</expr_stmt><expr_stmt><expr><call><name>dbg</name><argument_list>(<argument><expr><name>x</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOG</name><parameter_list>(<parameter><type><name>x</name><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{cout&lt;&lt;'#';dbg(x);}</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>print_array</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOG</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>vec</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vec</name></expr></argument>&gt;</argument_list></name></type> <name>mat</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>PI</name><init>=<expr><call><name>acos</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>EPS</name><init>=<expr><literal type="number">1e-8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>INF</name><init>=<expr><literal type="number">0x3f3f3f3f3f3f3f3f</literal></expr></init></decl>;</decl_stmt>
<function><specifier>inline</specifier> <type><name>ll</name></type> <name>readll</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>ll</name></type> <name>x</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>,<decl><type ref="prev"/><name>op</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt><decl_stmt><decl><type><name>char</name></type> <name>ch</name><init>=<expr><call><name>getchar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name><name>ch</name><argument_list type="generic">&lt;<argument><expr><literal type="char">'0'</literal><operator>||</operator><name>ch</name></expr></argument>&gt;</argument_list></name><literal type="char">'9'</literal></expr>)</condition><block>{<if>if<condition>(<expr><name>ch</name><operator>==</operator><literal type="char">'-'</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>op</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if><expr_stmt><expr><name>ch</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>}</block></while>
	<while>while<condition>(<expr><name>ch</name><operator>&gt;=</operator><literal type="char">'0'</literal><operator>&amp;&amp;</operator><name>ch</name><operator>&lt;=</operator><literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>x</name><operator>=</operator><name>x</name><operator>*</operator><literal type="number">10</literal><operator>+</operator><name>ch</name><operator>-</operator><literal type="char">'0'</literal></expr><operator>,</operator><expr><name>ch</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
	<return>return <expr><name>x</name><operator>*</operator><name>op</name></expr>;</return>
}</block></function>
<comment type="line">//const int sz=;</comment>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>sz_n</name><init>=<expr><literal type="number">1000015</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>sz_m</name><init>=<expr><literal type="number">5000015</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>stack</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>s</name></decl>;</decl_stmt>
<struct>struct <name>edge</name><block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>f</name></decl>,<decl><type ref="prev"/><name>t</name></decl>,<decl><type ref="prev"/><name>nxt</name></decl>;</decl_stmt>
</public>}</block> <decl><name><name>l</name><index>[<expr><name>sz_m</name></expr>]</index></name></decl>;</struct>
<decl_stmt><decl><type><name>int</name></type> <name><name>head</name><index>[<expr><name>sz_n</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name>tot</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>build</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>f</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>t</name></decl></parameter>)</parameter_list><block>{
	<expr_stmt><expr><name><name>l</name><index>[<expr><name>tot</name></expr>]</index></name><operator>.</operator><name>f</name><operator>=</operator><name>f</name></expr><operator>,</operator><expr><name><name>l</name><index>[<expr><name>tot</name></expr>]</index></name><operator>.</operator><name>t</name><operator>=</operator><name>t</name></expr><operator>,</operator><expr><name><name>l</name><index>[<expr><name>tot</name></expr>]</index></name><operator>.</operator><name>nxt</name><operator>=</operator><name><name>head</name><index>[<expr><name>f</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>head</name><index>[<expr><name>f</name></expr>]</index></name><operator>=</operator><name>tot</name><operator>++</operator></expr>;</expr_stmt>
}</block></function>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dfs_clock</name></decl>,<decl><type ref="prev"/><name><name>low</name><index>[<expr><name>sz_n</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>dfn</name><index>[<expr><name>sz_n</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>scc</name><index>[<expr><name>sz_n</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name>scc_num</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>tarjan</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>)</parameter_list><block>{
	<expr_stmt><expr><name><name>low</name><index>[<expr><name>u</name></expr>]</index></name><operator>=</operator><name><name>dfn</name><index>[<expr><name>u</name></expr>]</index></name><operator>=</operator><operator>++</operator><name>dfs_clock</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<macro><name>foredge</name><argument_list>(<argument>u</argument>,<argument>i</argument>)</argument_list></macro><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>v</name><init>=<expr><name><name>l</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>t</name></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><operator>!</operator><name><name>dfn</name><index>[<expr><name>v</name></expr>]</index></name></expr>)</condition><then><block>{
			<expr_stmt><expr><name><name>low</name><index>[<expr><name>v</name></expr>]</index></name><operator>=</operator><call><name>tarjan</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>low</name><index>[<expr><name>u</name></expr>]</index></name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name><name>low</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>low</name><index>[<expr><name>v</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then><elseif>else <if>if<condition>(<expr><operator>!</operator><name><name>scc</name><index>[<expr><name>v</name></expr>]</index></name></expr>)</condition><then><block>{
			<expr_stmt><expr><name><name>low</name><index>[<expr><name>u</name></expr>]</index></name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name><name>low</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>dfn</name><index>[<expr><name>v</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if></elseif></if>
	}</block>
	<if>if<condition>(<expr><name><name>dfn</name><index>[<expr><name>u</name></expr>]</index></name><operator>==</operator><name><name>low</name><index>[<expr><name>u</name></expr>]</index></name></expr>)</condition><then><block>{
		<expr_stmt><expr><name>scc_num</name><operator>++</operator></expr>;</expr_stmt>
		<while>while<condition>(<expr><literal type="boolean">true</literal></expr>)</condition><block>{
			<decl_stmt><decl><type><name>int</name></type> <name>f</name><init>=<expr><call><name><name>s</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>scc</name><index>[<expr><name>f</name></expr>]</index></name><operator>=</operator><name>scc_num</name></expr>;</expr_stmt>
			<if>if<condition>(<expr><name>f</name><operator>==</operator><name>u</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
		}</block></while>
	}</block></then></if>
	<return>return <expr><name><name>low</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{
	<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n+<literal type="number">5</literal></argument>)</argument_list></macro> <expr_stmt><expr><name><name>head</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name><name>low</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>dfn</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>scc</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	<comment type="line">// mem(head,-1);</comment>
	<comment type="line">// // mem(l,0);</comment>
	<comment type="line">// mem(low,0);</comment>
	<comment type="line">// mem(dfn,0);</comment>
	<comment type="line">// mem(scc,0);</comment>
	<while>while<condition>(<expr><operator>!</operator><call><name><name>s</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block type="pseudo"><expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
	<expr_stmt><expr><name>tot</name><operator>=</operator><name>dfs_clock</name><operator>=</operator><name>scc_num</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
}</block></function>
<decl_stmt><decl><type><name>int</name></type> <name><name>c</name><index>[<expr><name>sz_n</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>in1</name><index>[<expr><name>sz_m</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>in2</name><index>[<expr><name>sz_m</name></expr>]</index></name></decl>;</decl_stmt><comment type="line">//ç¦»çº¿çæ°æ®</comment>

<function><type><name>int</name></type> <name>getd0</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>int</name></type> <name>cnt</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>scc_num+<literal type="number">1</literal></argument>)</argument_list></macro><block>{
		<if>if<condition>(<expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>i</name></expr>;</return></block></then></if>
	}</block>
	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name>vec</name></type> <name>jv</name></decl>,<decl><type ref="prev"/><name>cv</name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list><block>{
	<comment type="line">//å»ºåå¾</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
	<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>m</argument>)</argument_list></macro><block>{
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>in1</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>a</name></expr><operator>,</operator><expr><name><name>in2</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>b</name></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>a</name><operator>==</operator><name>b</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
		<expr_stmt><expr><call><name>build</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block>
	<comment type="line">//æ±scc</comment>
	<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n+<literal type="number">1</literal></argument>)</argument_list></macro><block>{
		<if>if<condition>(<expr><operator>!</operator><name><name>scc</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>tarjan</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
	}</block>
	<comment type="line">//ç¼©ç¹å»ºå¾</comment>
	<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n+<literal type="number">5</literal></argument>)</argument_list></macro> <expr_stmt><expr><name><name>head</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<comment type="line">// mem(head,-1);</comment>
	<comment type="line">// mem(l,0);</comment>
	<expr_stmt><expr><name>tot</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	<comment type="line">// LOG("scc_num",scc_num);</comment>
	<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>m</argument>)</argument_list></macro><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>a</name><init>=<expr><name><name>in1</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>,<decl><type ref="prev"/><name>b</name><init>=<expr><name><name>in2</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>a</name><operator>=</operator><name><name>scc</name><index>[<expr><name>a</name></expr>]</index></name></expr><operator>,</operator><expr><name>b</name><operator>=</operator><name><name>scc</name><index>[<expr><name>b</name></expr>]</index></name></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>a</name><operator>==</operator><name>b</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
		<expr_stmt><expr><call><name>build</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// LOG("insert",a,b);</comment>
	}</block>
	<comment type="line">//æ±å¥åº¦</comment>
	<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n+<literal type="number">5</literal></argument>)</argument_list></macro> <expr_stmt><expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt> 
	<comment type="line">// mem(c,0);</comment>
	<macro><name>rep</name><argument_list>(<argument>u</argument>,<argument><literal type="number">1</literal></argument>,<argument>scc_num+<literal type="number">1</literal></argument>)</argument_list></macro><block>{
		<macro><name>foredge</name><argument_list>(<argument>u</argument>,<argument>i</argument>)</argument_list></macro><block>{
			<expr_stmt><expr><name><name>c</name><index>[<expr><name><name>l</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>f</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
		}</block>
	}</block>
	<comment type="line">//ç»è®¡å¥åº¦ä¸º0çç¹</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>jscc</name><init>=<expr><call><name>getd0</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name>jv</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>cv</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n+<literal type="number">1</literal></argument>)</argument_list></macro><block>{
		<if>if<condition>(<expr><name><name>scc</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name>jscc</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>jv</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><call><name><name>cv</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
	}</block>
	<if>if<condition>(<expr><call><name>SZ</name><argument_list>(<argument><expr><name>jv</name></expr></argument>)</argument_list></call><operator>&gt;</operator><literal type="number">0</literal><operator>&amp;&amp;</operator><call><name>SZ</name><argument_list>(<argument><expr><name>jv</name></expr></argument>)</argument_list></call><operator>&lt;</operator><name>n</name></expr>)</condition><then><block>{
		<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"YES"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d\n"</literal></expr></argument>,<argument><expr><call><name>SZ</name><argument_list>(<argument><expr><name>jv</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>SZ</name><argument_list>(<argument><expr><name>cv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>SZ(jv)</argument>)</argument_list></macro><block>{
			<if>if<condition>(<expr><name>i</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><name><name>jv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block>
			<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>SZ(cv)</argument>)</argument_list></macro><block>{
			<if>if<condition>(<expr><name>i</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><name><name>cv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block>
			<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then><else>else<block>{
		<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"NO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>
	<comment type="line">// LOG("j",jv);</comment>
	<comment type="line">// LOG("c",cv);</comment>
	<comment type="line">// LOG("cnt",cnt);</comment>
	<comment type="line">// return cnt;</comment>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>int</name></type> <name>_</name><init>=<expr><call><name>readll</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>_</name><operator>--</operator></expr>)</condition><block>{
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>init</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// printf("%d\n",solve());</comment>
	}</block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
