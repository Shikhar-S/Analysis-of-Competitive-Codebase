<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29150463_62979229.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name><name>std</name><operator>::</operator><name>string</name></name></type>                         <name>str</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>long</name> <name>int</name></type>                       <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></name></type>                  <name>pii</name>;</typedef>
<typedef>typedef <type><name><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>double</name></expr></argument>,<argument><expr><name>double</name></expr></argument>&gt;</argument_list></name></name></type>            <name>pdd</name>;</typedef>
<typedef>typedef <type><name><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>str</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></name></type>                  <name>psi</name>;</typedef>
<typedef>typedef <type><name><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>str</name></expr></argument>,<argument><expr><name>str</name></expr></argument>&gt;</argument_list></name></name></type>                  <name>pss</name>;</typedef>
<typedef>typedef <type><name><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></name></expr></argument> &gt;</argument_list></name></name></type>    <name>pivi</name>;</typedef>
<typedef>typedef <type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></name></type>                    <name>vi</name>;</typedef>
<typedef>typedef <type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>double</name></expr></argument>&gt;</argument_list></name></name></type>                 <name>vd</name>;</typedef>
<typedef>typedef <type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name> <name>int</name></expr></argument>&gt;</argument_list></name></name></type>          <name>vll</name>;</typedef>
<typedef>typedef <type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name></name></type>            <name>vs</name>;</typedef>
<typedef>typedef <type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name></name></type>                   <name>vc</name>;</typedef>
<typedef>typedef <type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></name></type>                   <name>vb</name>;</typedef>
<typedef>typedef <type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pii</name></expr></argument> &gt;</argument_list></name></name></type>                   <name>vpii</name>;</typedef>
<typedef>typedef <type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pdd</name></expr></argument> &gt;</argument_list></name></name></type>                   <name>vpdd</name>;</typedef>
<typedef>typedef <type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>psi</name></expr></argument> &gt;</argument_list></name></name></type>                   <name>vpsi</name>;</typedef>
<typedef>typedef <type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></name></expr></argument> &gt;</argument_list></name></name></type>      <name>vvi</name>;</typedef>
<typedef>typedef <type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></name></expr></argument> &gt;</argument_list></name></name></type>       <name>vvll</name>;</typedef>
<typedef>typedef <type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name></name></expr></argument> &gt;</argument_list></name></name></type>     <name>vvc</name>;</typedef>
<typedef>typedef <type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pii</name></expr></argument>&gt;</argument_list></name></name></expr></argument> &gt;</argument_list></name></name></type>      <name>vvpii</name>;</typedef>
<typedef>typedef <type><name><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name></name></type>                      <name>sc</name>;</typedef>
<typedef>typedef <type><name><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></name></type>                       <name>si</name>;</typedef>
<typedef>typedef <type><name><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>long</name></expr></argument>&gt;</argument_list></name></name></type>                      <name>sl</name>;</typedef>
<typedef>typedef <type><name><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>pii</name></expr></argument>&gt;</argument_list></name></name></type>                       <name>spii</name>;</typedef>
<typedef>typedef <type><name><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name></name></type>               <name>ss</name>;</typedef>
<typedef>typedef <type><name><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></name></type>                  <name>mii</name>;</typedef>
<typedef>typedef <type><name><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>char</name></expr></argument>&gt;</argument_list></name></name></type>                 <name>mic</name>;</typedef>
<typedef>typedef <type><name><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></name></type>                    <name>mll</name>;</typedef>
<typedef>typedef <type><name><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></name></type>                <name>mcb</name>;</typedef>
<typedef>typedef <type><name><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>, <argument><expr><name>char</name></expr></argument>&gt;</argument_list></name></name></type>                <name>mcc</name>;</typedef>
<typedef>typedef <type><name><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></name></type>                 <name>mci</name>;</typedef>
<typedef>typedef <type><name><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>vi</name></expr></argument>&gt;</argument_list></name></name></type>                   <name>mivi</name>;</typedef>
<typedef>typedef <type><name><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>si</name></expr></argument>&gt;</argument_list></name></name></type>                   <name>misi</name>;</typedef>
<typedef>typedef <type><name><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>pii</name></expr></argument>&gt;</argument_list></name></name></type>                  <name>mipii</name>;</typedef>
<typedef>typedef <type><name><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></name></type>         <name>msb</name>;</typedef>
<typedef>typedef <type><name><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></name></type>          <name>msi</name>;</typedef>
<typedef>typedef <type><name><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name></name></type>  <name>mss</name>;</typedef>
<typedef>typedef <type><name><name>std</name><operator>::</operator><name><name>deque</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></name></type>                     <name>di</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fastio</name></cpp:macro>              <cpp:value>ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>incontainer</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro>      <cpp:value>for(size_t iai=0; iai&lt;v.size(); iai++){std::cin &gt;&gt; v[iai];}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inmatrix</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro>         <cpp:value>for(size_t iai=0; iai&lt;v.size(); iai++){for (size_t jaj = 0; jaj &lt; v[iai].size() ; jaj++){std::cin &gt;&gt; v[iai][jaj];}}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>outcontainer</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro>     <cpp:value>for(auto it : v){std::cout &lt;&lt; it &lt;&lt; ' ';}std::cout &lt;&lt; std::endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>outmatrix</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro>         <cpp:value>for(size_t iai=0; iai&lt;v.size(); iai++){for (size_t jaj = 0; jaj &lt;v[iai].size() ; jaj++){std::cout &lt;&lt; v[iai][jaj] &lt;&lt; ' ';} std::cout &lt;&lt; std::endl;}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>srt</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro>              <cpp:value>std::sort(a.begin(),a.end())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rev</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro>              <cpp:value>std::reverse(a.begin(),a.end())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bitcount</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro>         <cpp:value>__builtin_popcount(i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gcdi</name><parameter_list>(<parameter><type><name>m</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>           <cpp:value>__gcd(m,n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>forstl</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro>         <cpp:value>for(auto &amp;i:v)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>forn</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>           <cpp:value>for(int i=0;i&lt;n;++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>forsn</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>e</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>        <cpp:value>for(int i=e;i&lt;n;++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rforn</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro>          <cpp:value>for(int i=e;i&gt;=0;--i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rforsn</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>e</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>       <cpp:value>for(int i=e;i&gt;=n;--i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nl</name></cpp:macro>                  <cpp:value>std::endl</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>out</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>              <cpp:value>std::cout &lt;&lt; x &lt;&lt; std::flush</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>out2</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>           <cpp:value>std::cout &lt;&lt; a &lt;&lt; ' ' &lt;&lt; b &lt;&lt; std::flush</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>out3</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro>         <cpp:value>std::cout &lt;&lt; a &lt;&lt; ' ' &lt;&lt; b &lt;&lt; ' ' &lt;&lt; c &lt;&lt; std::flush</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>out4</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro>       <cpp:value>std::cout &lt;&lt; a &lt;&lt; ' ' &lt;&lt; b &lt;&lt; ' ' &lt;&lt; c &lt;&lt; ' ' &lt;&lt; d &lt;&lt; std::flush</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>out5</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro>     <cpp:value>std::cout &lt;&lt; a &lt;&lt; ' ' &lt;&lt; b &lt;&lt; ' ' &lt;&lt; c &lt;&lt; ' ' &lt;&lt; d &lt;&lt; ' ' &lt;&lt; e &lt;&lt; std::flush</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>out6</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>e</name></type></parameter>,<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>std::cout &lt;&lt; a &lt;&lt; ' ' &lt;&lt; b &lt;&lt; ' ' &lt;&lt; c &lt;&lt; ' ' &lt;&lt; d &lt;&lt; ' ' &lt;&lt; e &lt;&lt; ' ' &lt;&lt; f &lt;&lt; std::flush</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>outn</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>             <cpp:value>std::cout &lt;&lt; x &lt;&lt; nl</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>outs</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>             <cpp:value>std::cout &lt;&lt; x &lt;&lt; ' ' &lt;&lt; std::flush</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>in</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>               <cpp:value>std::cin &gt;&gt; x</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>in2</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro>            <cpp:value>std::cin &gt;&gt; x &gt;&gt; y</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>in3</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro>          <cpp:value>std::cin &gt;&gt; x &gt;&gt; y &gt;&gt; z</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>in4</name><parameter_list>(<parameter><type><name>w</name></type></parameter>,<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro>        <cpp:value>std::cin &gt;&gt; w &gt;&gt; x &gt;&gt; y &gt;&gt; z</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>in5</name><parameter_list>(<parameter><type><name>v</name></type></parameter>,<parameter><type><name>w</name></type></parameter>,<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro>      <cpp:value>std::cin &gt;&gt; v &gt;&gt; w &gt;&gt; x &gt;&gt; y &gt;&gt; z</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>in6</name><parameter_list>(<parameter><type><name>u</name></type></parameter>,<parameter><type><name>v</name></type></parameter>,<parameter><type><name>w</name></type></parameter>,<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>std::cin &gt;&gt; u &gt;&gt; v &gt;&gt; w &gt;&gt; x &gt;&gt; y &gt;&gt; z</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>big_prime</name></cpp:macro>           <cpp:value>1000000007</cpp:value></cpp:define>
<comment type="block">/*
void fastinput(int &amp;x)
{
  bool neg = false;
  register int c;
  c = getchar();
  x = 0;
  if(c=='-')
  {
    neg = true;
    c= getchar();
  }
  for (; (c&gt;47 &amp;&amp; c&lt;58); c = getchar())
  {
    x = (x&lt;&lt;1) + (x&lt;&lt;3) + c - 48;
  }
  if(neg)
  {
    x *= -1;
  }
}
*/</comment>
<comment type="block">/*
vb primes(9000000,true);
void ps()
{
  for(int i = 2; i &lt; sqrt(9000000) + 10 ; i++)
  {
    if(primes[i] == false)
    {
      continue;
    }
    for(int j = (2*i); j &lt; 9000000; j+=i)
    {
      primes[j] = false;
    }
  }
}
void prime_setter()
{
  primes[0] = false;
  primes[1] = false;
  ps();
}
bool is_prime(ll n)
{
  if (n &lt;= 1)
  {
    return false;
  }
  if (n &lt;= 3)
  {
    return true;
  }
  if (n%2 == 0 || n%3 == 0)
  {
    return false;
  }
  for (ll i=5; i*i&lt;=n; i=i+6)
  {
    if (n%i == 0 || n%(i+2) == 0)
    {
      return false;
    }
  }
  return true;
}
*/</comment>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
  <decl_stmt><decl><type><name>int</name></type> <name>T</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>in</name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while<condition>(<expr><name>T</name><operator>--</operator></expr>)</condition>
  <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>in</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>vi</name></type> <name>p</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>incontainer</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>m</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>m</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>vi</name></type> <name>q</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>incontainer</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>o1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>o2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <macro><name>forn</name><argument_list>(<argument>i</argument>,<argument>n</argument>)</argument_list></macro>
    <block>{
      <if>if<condition>(<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then>
      <block>{
        <expr_stmt><expr><name>o1</name><operator>++</operator></expr>;</expr_stmt>
      }</block></then></if>
    }</block>
    <macro><name>forn</name><argument_list>(<argument>i</argument>,<argument>m</argument>)</argument_list></macro>
    <block>{
      <if>if<condition>(<expr><name><name>q</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then>
      <block>{
        <expr_stmt><expr><name>o2</name><operator>++</operator></expr>;</expr_stmt>
      }</block></then></if>
    }</block>
    <decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>ans</name> <init>= <expr><name>o1</name> <operator>*</operator> <name>o2</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>ans</name> <operator>+=</operator> <operator>(</operator><name>n</name> <operator>-</operator> <name>o1</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>m</name> <operator>-</operator> <name>o2</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
  }</block></while>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
