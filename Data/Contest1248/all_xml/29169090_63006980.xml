<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29169090_63006980.cpp"><cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><name>2</name><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><name>3</name><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><cpp:literal>"Ofast"</cpp:literal><name>)</name></cpp:pragma>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">1000005</literal></expr></init></decl>;</decl_stmt>
<struct>struct <name>Edge</name> <block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>to</name></decl>, <decl><type ref="prev"/><name>nxt</name></decl>;</decl_stmt>
	<constructor><name>Edge</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><name>nxt</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	}</block></constructor>
</public>}</block>;</struct>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>pnt</name></decl>, <decl><type ref="prev"/><name><name>hd</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>dfn</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>low</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name>_time</name></decl>, <decl><type ref="prev"/><name><name>sccId</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name>sccCnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>outDgr</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Edge</name></type> <name><name>e</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>set</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>scc</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>stack</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>stk</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>AddEdge</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
	<expr_stmt><expr><name><name>e</name><index>[<expr><operator>++</operator><name>pnt</name></expr>]</index></name><operator>.</operator><name>to</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>e</name><index>[<expr><name>pnt</name></expr>]</index></name><operator>.</operator><name>nxt</name> <operator>=</operator> <name><name>hd</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hd</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <name>pnt</name></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name>Read</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;=</operator> <name>m</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>u</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>u</name> <operator>==</operator> <name>v</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
		<expr_stmt><expr><call><name>AddEdge</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">//AddEdge(v, u);</comment>
	}</block></for>
}</block></function>

<function><type><name>void</name></type> <name>Dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>)</parameter_list> <block>{
	<expr_stmt><expr><name><name>dfn</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <name><name>low</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <operator>++</operator><name>_time</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>stk</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>hd</name><index>[<expr><name>u</name></expr>]</index></name></expr></init></decl>;</init><condition><expr><name>i</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</condition><incr><expr><name>i</name> <operator>=</operator> <name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nxt</name></expr></incr>)</control> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>to</name></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><operator>!</operator><name><name>dfn</name><index>[<expr><name>v</name></expr>]</index></name></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>Dfs</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>low</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>low</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>low</name><index>[<expr><name>v</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <elseif>else <if>if <condition>(<expr><operator>!</operator><name><name>sccId</name><index>[<expr><name>v</name></expr>]</index></name></expr>)</condition><then> <block>{
			<expr_stmt><expr><name><name>low</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>low</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>dfn</name><index>[<expr><name>v</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if></elseif></if>
	}</block></for>
	<if>if <condition>(<expr><name><name>dfn</name><index>[<expr><name>u</name></expr>]</index></name> <operator>==</operator> <name><name>low</name><index>[<expr><name>u</name></expr>]</index></name></expr>)</condition><then> <block>{
		<expr_stmt><expr><name>sccCnt</name><operator>++</operator></expr>;</expr_stmt>
		<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{
			<decl_stmt><decl><type><name>int</name></type> <name>cur</name> <init>= <expr><call><name><name>stk</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>stk</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>scc</name><index>[<expr><name>sccCnt</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>sccId</name><index>[<expr><name>cur</name></expr>]</index></name> <operator>=</operator> <name>sccCnt</name></expr>;</expr_stmt>
			<if>if <condition>(<expr><name>cur</name> <operator>==</operator> <name>u</name></expr>)</condition><then> <block>{
				<break>break;</break>
			}</block></then></if>
		}</block></while>
	}</block></then></if>
}</block></function>

<function><type><name>void</name></type> <name>Solve</name><parameter_list>()</parameter_list> <block>{
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<if>if <condition>(<expr><operator>!</operator><name><name>dfn</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>Dfs</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
	<if>if <condition>(<expr><name>sccCnt</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"No"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	}</block></then></if>
<comment type="line">//	for (int i = 1;i &lt;= n;i++) {</comment>
<comment type="line">//		printf("%d ", sccId[i]);</comment>
<comment type="line">//	}</comment>
<comment type="line">//	printf("\n");</comment>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name><name>hd</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</init><condition><expr><name>j</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</condition><incr><expr><name>j</name> <operator>=</operator> <name><name>e</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>nxt</name></expr></incr>)</control> <block>{
			<if>if <condition>(<expr><name><name>sccId</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>sccId</name><index>[<expr><name><name>e</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>to</name></expr>]</index></name></expr>)</condition><then> <block>{
				<expr_stmt><expr><name><name>outDgr</name><index>[<expr><name><name>sccId</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
			}</block></then></if>
		}</block></for>
	}</block></for>
	<decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;=</operator> <name>sccCnt</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<if>if <condition>(<expr><name><name>outDgr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>scc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name><name>scc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>n</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>ans</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
			<break>break;</break>
		}</block></then></if>
	}</block></for>
	<if>if <condition>(<expr><name>ans</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"No\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	}</block></then> <else>else <block>{
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Yes\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d\n"</literal></expr></argument>, <argument><expr><name><name>scc</name><index>[<expr><name>ans</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>n</name> <operator>-</operator> <name><name>scc</name><index>[<expr><name>ans</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<if>if <condition>(<expr><name><name>sccId</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>ans</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d "</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
		}</block></for>
		<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<if>if <condition>(<expr><name><name>sccId</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>ans</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d "</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
		}</block></for>
		<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>
}</block></function>

<function><type><name>void</name></type> <name>Init</name><parameter_list>()</parameter_list> <block>{
	<while>while <condition>(<expr><operator>!</operator><call><name><name>stk</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block type="pseudo"><expr_stmt><expr><call><name><name>stk</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<expr_stmt><expr><name><name>hd</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>scc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>dfn</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>low</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>sccId</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>outDgr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><name>sccCnt</name> <operator>=</operator> <name>pnt</name> <operator>=</operator> <name>_time</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>hd</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>t</name><operator>--</operator></expr>)</condition> <block>{
		<expr_stmt><expr><call><name>Read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
