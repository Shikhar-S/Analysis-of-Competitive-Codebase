<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29153487_62996638.cpp"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_CRT_SECURE_NO_WARNINGS</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bitset&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>sc</name><index>[<expr><literal type="number">333333</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>sm</name><index>[<expr><literal type="number">666666</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>stree</name><index>[<expr><literal type="number">6666666</literal><operator>*</operator><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>build</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name>l</name> <operator>==</operator> <name>r</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name><name>stree</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <name><name>sm</name><index>[<expr><name>l</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></then>
    <else>else
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><operator>(</operator><name>l</name> <operator>+</operator> <name>r</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>build</name><argument_list>(<argument><expr><name>v</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>build</name><argument_list>(<argument><expr><name>v</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>m</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>stree</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>stree</name><index>[<expr><name>v</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>stree</name><index>[<expr><name>v</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
}</block></function>

<function><type><name>int</name></type> <name>smin</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tr</name></decl></parameter>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name>tl</name> <operator>&gt;</operator> <name>tr</name></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><name>INT_MAX</name></expr>;</return></block></then></if>
    <if>if <condition>(<expr><name>l</name> <operator>==</operator> <name>tl</name> <operator>&amp;&amp;</operator> <name>r</name> <operator>==</operator> <name>tr</name></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><name><name>stree</name><index>[<expr><name>v</name></expr>]</index></name></expr>;</return></block></then></if>
    <decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><operator>(</operator><name>l</name> <operator>+</operator> <name>r</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name>min</name><argument_list>(<argument><expr><call><name>smin</name><argument_list>(<argument><expr><name>v</name><operator>*</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>tl</name></expr></argument>, <argument><expr><call><name>min</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>tr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>smin</name><argument_list>(<argument><expr><name>v</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>m</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>max</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>tl</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%i"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>mv</name> <init>= <expr><name>INT_MAX</name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>p</name> <init>= <expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>sm</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>sm</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>p</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name><name>sc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'('</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>sm</name><index>[<expr><name>i</name> <operator>+</operator> <name>n</name></expr>]</index></name> <operator>=</operator> <name><name>sm</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>sm</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name>mv</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>mv</name> <operator>=</operator> <name><name>sm</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></then></if>
    }</block></for>
    <if>if <condition>(<expr><name><name>sm</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"0\n1 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name>int</name></type> <name>bl</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>br</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>sc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>sc</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>mv</name> <operator>=</operator> <name>INT_MAX</name></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>p</name> <init>= <expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>sm</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>sm</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>p</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name><name>sc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'('</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>sm</name><index>[<expr><name>i</name> <operator>+</operator> <name>n</name></expr>]</index></name> <operator>=</operator> <name><name>sm</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
                <if>if <condition>(<expr><name><name>sm</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name>mv</name></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name>mv</name> <operator>=</operator> <name><name>sm</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></then></if>
            }</block></for>

            <decl_stmt><decl><type><name>int</name></type> <name>mvs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block>{
                <if>if <condition>(<expr><name><name>sm</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>mv</name></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name>mvs</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
            }</block></for>

            <if>if <condition>(<expr><name>mvs</name> <operator>&gt;</operator> <name>b</name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>b</name> <operator>=</operator> <name>mvs</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>bl</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>br</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>sc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>sc</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></for>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%i\n%i %i"</literal></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>bl</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>br</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
