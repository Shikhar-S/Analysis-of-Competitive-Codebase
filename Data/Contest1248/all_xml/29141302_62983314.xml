<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29141302_62983314.cpp"><comment type="line" format="doxygen">///+----------------------------------------+\\\</comment>
<comment type="line" format="doxygen">///|   ___  __  __  ____  ____  ____  _  _  |\\\</comment>
<comment type="line" format="doxygen">///|  / __)(  )(  )(_  _)( ___)(_  _)( \( ) |\\\</comment>
<comment type="line" format="doxygen">///| ( (__  )(__)(   )(   )__)   )(   )  (  |\\\</comment>
<comment type="line" format="doxygen">///|  \___)(______) (__) (____) (__) (_)\_) |\\\</comment>
<comment type="line" format="doxygen">///|                                        |\\\</comment>
<comment type="line" format="doxygen">///+-----------------------QUáº¢N-TIáº¾N-NGHÄ¨A--+\\\</comment>

<comment type="line" format="doxygen">/// Háº¡nh ÄÃ¡ng iu</comment>
<comment type="line" format="doxygen">/// Háº¡nh dá» thÆ°n</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<comment type="line" format="doxygen">/// OPTIMIZE SOMETHING I DONT EVEN UNDERSTAND</comment>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>comment</name><name>(</name><name>linker</name><name>,</name> <cpp:literal>"/stack:200000000"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><cpp:literal>"Ofast"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>target</name><name>(</name><cpp:literal>"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native"</cpp:literal><name>)</name></cpp:pragma>

<comment type="line" format="doxygen">/// USEFUL MACROS</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>'\n'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ss</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>is</name></cpp:macro> <cpp:value>==</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>getMod</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x)%= modulo</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>szOf</name><parameter_list>(<parameter><type><name>container_</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)container_.size())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>elif</name></cpp:macro> <cpp:value>else if</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RunTestCases</name></cpp:macro> <cpp:value>int numberOfCases; read(numberOfCases); while(numberOfCases--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>forEach</name><parameter_list>(<parameter><type><name>element_</name></type></parameter>, <parameter><type><name>container_</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(auto&amp;element_: container_)</cpp:value></cpp:define>
    <comment type="line">//forEach can not be used for static array</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>forUp</name><parameter_list>(<parameter><type><name>iterator_</name></type></parameter>, <parameter><type><name>rangeL_</name></type></parameter>, <parameter><type><name>rangeR_</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(ll iterator_ = rangeL_; iterator_ &lt;= rangeR_; iterator_++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>forDown</name><parameter_list>(<parameter><type><name>iterator_</name></type></parameter>, <parameter><type><name>rangeR_</name></type></parameter>, <parameter><type><name>rangeL_</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(ll iterator_ = rangeR_; iterator_ &gt;= rangeL_; iterator_--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>forTimes</name><parameter_list>(<parameter><type><name>times_</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(ll iterator_ = 1; iterator_ &lt;= times_; iterator_++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>readNew</name><parameter_list>(<parameter><type><name>varName</name></type></parameter>, <parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>type varName; read(varName)</cpp:value></cpp:define>


<comment type="line" format="doxygen">/// FREQUENTLY USED TYPES</comment>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>pll</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>

<comment type="line" format="doxygen">/// FREQUENTLY USED CONSTS</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>modulo</name> <init>= <expr><call><name>ll</name><argument_list>(<argument><expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>oo</name> <init>= <expr><operator>(</operator><name>ll</name><operator>)</operator><literal type="number">1e18</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>eps</name> <init>= <expr><literal type="number">1e-6</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>pi</name> <init>= <expr><operator>(</operator><call><name>atan</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">4</literal><operator>)</operator></expr></init></decl>;</decl_stmt>


<comment type="line" format="doxygen">/// FAST IO</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>ELEMENT_SEPARATOR</name> <init>= <expr><literal type="string">" "</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>POSITION_AFTER_DECIMAL</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>print</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>)</parameter_list>        <block>{ <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>  , <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
<function><type><name>void</name></type> <name>print</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>a</name></decl></parameter>)</parameter_list>  <block>{ <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
<function><type><name>void</name></type> <name>print</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>a</name></decl></parameter>)</parameter_list>       <block>{ <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>  , <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
<function><type><name>void</name></type> <name>print</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>       <block>{ <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>  , <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
<function><type><name>void</name></type> <name>print</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>  , <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
<function><type><name>void</name></type> <name>print</name><parameter_list>(<parameter><decl><type><name>string</name></type> <name>a</name></decl></parameter>)</parameter_list>     <block>{ <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>  , <argument><expr><call><name><name>a</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
<function><type><name>void</name></type> <name>print</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>a</name></decl></parameter>)</parameter_list>      <block>{ <decl_stmt><decl><type><name>string</name></type> <name>format</name> <init>= <expr><literal type="string">"%."</literal> <operator>+</operator> <call><name>to_string</name><argument_list>(<argument><expr><name>POSITION_AFTER_DECIMAL</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"f"</literal></expr></init></decl>;</decl_stmt> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name><name>format</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument> , <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
<function><type><name>void</name></type> <name>print</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>a</name></decl></parameter>)</parameter_list>     <block>{ <decl_stmt><decl><type><name>string</name></type> <name>format</name> <init>= <expr><literal type="string">"%."</literal> <operator>+</operator> <call><name>to_string</name><argument_list>(<argument><expr><name>POSITION_AFTER_DECIMAL</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"f"</literal></expr></init></decl>;</decl_stmt> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name><name>format</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument> , <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
<function><type><name>void</name></type> <name>print</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><specifier>auto</specifier></expr></argument>&gt;</argument_list></name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{
    <macro><name>forEach</name><argument_list>(<argument>element</argument>,<argument>a</argument>)</argument_list></macro>
    <block>{
        <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><name>element</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><name>ELEMENT_SEPARATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>
}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>Type</name></parameter>, <parameter><type><name>typename</name><modifier>...</modifier></type> <name>Args</name></parameter>&gt;</parameter_list></template>
<type><name>void</name></type> <name>print</name><parameter_list>(<parameter><decl><type><name>Type</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>Args</name><modifier>...</modifier></type> <name>args</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><name>ELEMENT_SEPARATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><name>args</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>int</name><modifier>&amp;</modifier></type><name>a</name></decl></parameter>)</parameter_list>        <block>{ <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>   , <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
<function><type><name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name><modifier>&amp;</modifier></type><name>a</name></decl></parameter>)</parameter_list>  <block>{ <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument> , <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
<function><type><name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>float</name><modifier>&amp;</modifier></type><name>a</name></decl></parameter>)</parameter_list>      <block>{ <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%f"</literal></expr></argument>   , <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
<function><type><name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>double</name><modifier>&amp;</modifier></type><name>a</name></decl></parameter>)</parameter_list>     <block>{ <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lf"</literal></expr></argument>  , <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
<function><type><name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>&amp;</modifier></type><name>a</name></decl></parameter>)</parameter_list>       <block>{ <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>   , <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
<function><type><name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>       <block>{ <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>   , <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
<function><type><name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>string</name><modifier>&amp;</modifier></type><name>a</name></decl></parameter>)</parameter_list>     <block>{ <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>   , <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
<function><type><name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><specifier>auto</specifier></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{
    <macro><name>forEach</name><argument_list>(<argument>element</argument>, <argument>a</argument>)</argument_list></macro>
        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>element</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>Type</name></parameter>, <parameter><type><name>typename</name><modifier>...</modifier></type> <name>Args</name></parameter>&gt;</parameter_list></template>
<type><name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>Type</name><modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>Args</name><modifier>&amp;</modifier><modifier>...</modifier></type> <name>args</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>args</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>


<comment type="line" format="doxygen">/// INITIALIZE</comment>
<function><type><name>void</name></type> <name>onStartMain</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>


<comment type="line" format="doxygen">///~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\\</comment>
<comment type="line" format="doxygen">/// ALGORITHM TEMPLATE ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\\</comment>
<comment type="line" format="doxygen">///~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\\</comment>


<comment type="line" format="doxygen">///~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\\</comment>
<comment type="line" format="doxygen">/// SOLUTION ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\\</comment>
<comment type="line" format="doxygen">///~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\\</comment>

<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>a</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name>onStartMain</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>readNew</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>a</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>a</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>a</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>ll</name></type> <name>s1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>s2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <macro><name>forUp</name><argument_list>(<argument>i</argument>, <argument><literal type="number">0</literal></argument>, <argument>(n-<literal type="number">2</literal>)/<literal type="number">2</literal></argument>)</argument_list></macro>
    <block>{
        <expr_stmt><expr><name>s1</name><operator>+=</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    }</block>
    <macro><name>forUp</name><argument_list>(<argument>i</argument>, <argument>(n-<literal type="number">2</literal>)/<literal type="number">2</literal>+<literal type="number">1</literal></argument>, <argument>n-<literal type="number">1</literal></argument>)</argument_list></macro>
    <block>{
        <expr_stmt><expr><name>s2</name><operator>+=</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    }</block>

    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><name>s1</name><operator>*</operator><name>s1</name> <operator>+</operator> <name>s2</name><operator>*</operator><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

<comment type="line" format="doxygen">/// Háº¡nh ÄÃ¡ng iu</comment>
<comment type="line" format="doxygen">/// Háº¡nh dá» thÆ°n</comment>
</unit>
