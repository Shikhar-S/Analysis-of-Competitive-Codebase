<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29174880_63003344.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MN</name><init>=<expr><literal type="number">555</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr><name>MN</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>s</name><index>[<expr><name>MN</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name>st</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>cnt</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>ans</name></decl>,<decl><type ref="prev"/><name>di</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>dj</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<struct>struct <name>No</name><block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>,<decl><type ref="prev"/><name>zh</name></decl>;</decl_stmt>
</public>}</block><decl><name><name>q</name><index>[<expr><literal type="number">2020</literal></expr>]</index></name></decl>;</struct>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<decl_stmt><decl><type><name>char</name></type> <name>x</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>x</name></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>x</name><operator>==</operator><literal type="char">'('</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then>
		<else>else
			<block type="pseudo"><expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
		<expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name><operator>+</operator><name>n</name></expr>]</index></name><operator>=</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	}</block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>s</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
	<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>n</name></expr>]</index></name><operator>!=</operator><literal type="number">0</literal></expr>)</condition><then>
		<block type="pseudo"><goto>goto <name>zlxx</name>;</goto></block></then></if>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><name>i</name></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
			<block type="pseudo"><if>if<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name><operator>||</operator><name>i</name><operator>==</operator><name>j</name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name>cnt</name><operator>=</operator><literal type="number">0</literal></expr><operator>,</operator><expr><name>st</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>int</name></type> <name>nans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name><operator>+</operator><name>n</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>a</name><index>[<expr><name>j</name><operator>+</operator><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<for>for<control>(<init><decl><type><name>int</name></type> <name>k</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>k</name><operator>&lt;=</operator><literal type="number">2</literal><operator>*</operator><name>n</name></expr>;</condition><incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
					<block type="pseudo"><expr_stmt><expr><name><name>s</name><index>[<expr><name>k</name></expr>]</index></name><operator>=</operator><name><name>s</name><index>[<expr><name>k</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>a</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt></block></for>
				<for>for<control>(<init><decl><type><name>int</name></type> <name>k</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>k</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
				<block>{
					<while>while<condition>(<expr><name>st</name><operator>&lt;=</operator><name>cnt</name><operator>&amp;&amp;</operator><name><name>q</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>.</operator><name>zh</name><operator>&gt;=</operator><name><name>s</name><index>[<expr><name>k</name></expr>]</index></name></expr>)</condition>
						<block type="pseudo"><expr_stmt><expr><name>cnt</name><operator>--</operator></expr>;</expr_stmt></block></while>
					<expr_stmt><expr><name><name>q</name><index>[<expr><operator>++</operator><name>cnt</name></expr>]</index></name><operator>.</operator><name>pos</name><operator>=</operator><name>k</name></expr><operator>,</operator><expr><name><name>q</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>.</operator><name>zh</name><operator>=</operator><name><name>s</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
				}</block></for>
				<for>for<control>(<init><decl><type><name>int</name></type> <name>k</name><init>=<expr><name>n</name></expr></init></decl>;</init><condition><expr><name>k</name><operator>&lt;</operator><literal type="number">2</literal><operator>*</operator><name>n</name></expr>;</condition><incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
				<block>{
					<while>while<condition>(<expr><name>st</name><operator>&lt;=</operator><name>cnt</name><operator>&amp;&amp;</operator><name><name>q</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>.</operator><name>zh</name><operator>&gt;=</operator><name><name>s</name><index>[<expr><name>k</name></expr>]</index></name></expr>)</condition>
						<block type="pseudo"><expr_stmt><expr><name>cnt</name><operator>--</operator></expr>;</expr_stmt></block></while>
					<while>while<condition>(<expr><name>st</name><operator>&lt;=</operator><name>cnt</name><operator>&amp;&amp;</operator><name>k</name><operator>-</operator><name><name>q</name><index>[<expr><name>st</name></expr>]</index></name><operator>.</operator><name>pos</name><operator>&gt;=</operator><name>n</name></expr>)</condition>
						<block type="pseudo"><expr_stmt><expr><name>st</name><operator>++</operator></expr>;</expr_stmt></block></while>
					<expr_stmt><expr><name><name>q</name><index>[<expr><operator>++</operator><name>cnt</name></expr>]</index></name><operator>.</operator><name>pos</name><operator>=</operator><name>k</name></expr><operator>,</operator><expr><name><name>q</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>.</operator><name>zh</name><operator>=</operator><name><name>s</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
					<if>if<condition>(<expr><name><name>q</name><index>[<expr><name>st</name></expr>]</index></name><operator>.</operator><name>zh</name><operator>-</operator><name><name>s</name><index>[<expr><name>k</name><operator>-</operator><name>n</name></expr>]</index></name><operator>&gt;=</operator><literal type="number">0</literal></expr>)</condition><then>
						<block type="pseudo"><expr_stmt><expr><name>nans</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
				}</block></for>
				
				<if>if<condition>(<expr><name>nans</name><operator>&gt;</operator><name>ans</name></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><name>ans</name><operator>=</operator><name>nans</name></expr><operator>,</operator><expr><name>di</name><operator>=</operator><name>i</name></expr><operator>,</operator><expr><name>dj</name><operator>=</operator><name>j</name></expr>;</expr_stmt></block></then></if>
				<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name><operator>+</operator><name>n</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>a</name><index>[<expr><name>j</name><operator>+</operator><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if></block></for>
	}</block></for>
<comment type="line">//	if(ans==0)</comment>
	<label><name>zlxx</name>:</label><empty_stmt>;</empty_stmt>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><name>endl</name><operator>&lt;&lt;</operator><name>di</name><operator>&lt;&lt;</operator><literal type="char">' '</literal><operator>&lt;&lt;</operator><name>dj</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
}</block></function></unit>
