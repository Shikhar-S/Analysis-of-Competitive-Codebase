<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29170583_63000510.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name><init>=<expr><literal type="number">105</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>s1</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>,<argument><expr><name>s</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>s1</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>s2</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'('</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>s1</name><operator>++</operator></expr>;</expr_stmt></block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><name>s2</name><operator>++</operator></expr>;</expr_stmt></block></else></if>
    }</block></for>
    <if>if<condition>(<expr><name>s1</name><operator>!=</operator><name>s2</name></expr>)</condition><then><block>{
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"0\n1 1\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>
    <decl_stmt><decl><type><name>int</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>pi</name></decl>,<decl><type ref="prev"/><name>pj</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>p</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>ss</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>maxs</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>l</name><init>=<expr><name>n</name></expr></init></decl>;</init><condition><expr><name>l</name><operator>&gt;=</operator><literal type="number">1</literal></expr>;</condition><incr><expr><name>l</name><operator>--</operator></expr></incr>)</control><block>{
        <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>l</name></expr>]</index></name><operator>==</operator><literal type="char">'('</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ss</name><operator>++</operator></expr>;</expr_stmt></block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><name>ss</name><operator>--</operator></expr>;</expr_stmt></block></else></if>
        <if>if<condition>(<expr><name>ss</name><operator>&gt;</operator><name>maxs</name></expr>)</condition><then><block>{
            <expr_stmt><expr><name>p</name><operator>=</operator><name>l</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>maxs</name><operator>=</operator><name>ss</name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>temp</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>cnt</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>l</name><init>=<expr><name>p</name></expr></init></decl>;</init><condition><expr><name>l</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>l</name><operator>++</operator></expr></incr>)</control><block>{
        <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>l</name></expr>]</index></name><operator>==</operator><literal type="char">'('</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>temp</name><operator>++</operator></expr>;</expr_stmt></block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><name>temp</name><operator>--</operator></expr>;</expr_stmt></block></else></if>
        <if>if<condition>(<expr><name>temp</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
    }</block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>l</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>l</name><operator>&lt;=</operator><name>p</name><operator>-</operator><literal type="number">1</literal></expr>;</condition><incr><expr><name>l</name><operator>++</operator></expr></incr>)</control><block>{
        <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>l</name></expr>]</index></name><operator>==</operator><literal type="char">'('</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>temp</name><operator>++</operator></expr>;</expr_stmt></block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><name>temp</name><operator>--</operator></expr>;</expr_stmt></block></else></if>
        <if>if<condition>(<expr><name>temp</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
    }</block></for>
    <if>if<condition>(<expr><name>cnt</name><operator>&gt;</operator><name>ans</name></expr>)</condition><then><block>{
        <expr_stmt><expr><name>pi</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt><expr_stmt><expr><name>pj</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>ans</name><operator>=</operator><name>cnt</name></expr>;</expr_stmt>
    }</block></then></if>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
            <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>p</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>ss</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>maxs</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                <for>for<control>(<init><decl><type><name>int</name></type> <name>l</name><init>=<expr><name>n</name></expr></init></decl>;</init><condition><expr><name>l</name><operator>&gt;=</operator><literal type="number">1</literal></expr>;</condition><incr><expr><name>l</name><operator>--</operator></expr></incr>)</control><block>{
                    <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>l</name></expr>]</index></name><operator>==</operator><literal type="char">'('</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ss</name><operator>++</operator></expr>;</expr_stmt></block></then>
                    <else>else <block type="pseudo"><expr_stmt><expr><name>ss</name><operator>--</operator></expr>;</expr_stmt></block></else></if>
                    <if>if<condition>(<expr><name>ss</name><operator>&gt;</operator><name>maxs</name></expr>)</condition><then><block>{
                        <expr_stmt><expr><name>p</name><operator>=</operator><name>l</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>maxs</name><operator>=</operator><name>ss</name></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></for>
                <decl_stmt><decl><type><name>int</name></type> <name>temp</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>cnt</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                <for>for<control>(<init><decl><type><name>int</name></type> <name>l</name><init>=<expr><name>p</name></expr></init></decl>;</init><condition><expr><name>l</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>l</name><operator>++</operator></expr></incr>)</control><block>{
                    <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>l</name></expr>]</index></name><operator>==</operator><literal type="char">'('</literal></expr>)</condition><then>
                        <block type="pseudo"><expr_stmt><expr><name>temp</name><operator>++</operator></expr>;</expr_stmt></block></then>
                    <else>else <block type="pseudo"><expr_stmt><expr><name>temp</name><operator>--</operator></expr>;</expr_stmt></block></else></if>
                    <if>if<condition>(<expr><name>temp</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
                }</block></for>
                <for>for<control>(<init><decl><type><name>int</name></type> <name>l</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>l</name><operator>&lt;=</operator><name>p</name><operator>-</operator><literal type="number">1</literal></expr>;</condition><incr><expr><name>l</name><operator>++</operator></expr></incr>)</control><block>{
                    <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>l</name></expr>]</index></name><operator>==</operator><literal type="char">'('</literal></expr>)</condition><then>
                        <block type="pseudo"><expr_stmt><expr><name>temp</name><operator>++</operator></expr>;</expr_stmt></block></then>
                    <else>else <block type="pseudo"><expr_stmt><expr><name>temp</name><operator>--</operator></expr>;</expr_stmt></block></else></if>
                    <if>if<condition>(<expr><name>temp</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
                }</block></for>
<comment type="line">//                printf("%d %d:p=%d cnt=%d\n",i,j,p,cnt);</comment>
                <if>if<condition>(<expr><name>cnt</name><operator>&gt;</operator><name>ans</name></expr>)</condition><then><block>{
                    <expr_stmt><expr><name>pi</name><operator>=</operator><name>i</name></expr>;</expr_stmt><expr_stmt><expr><name>pj</name><operator>=</operator><name>j</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>ans</name><operator>=</operator><name>cnt</name></expr>;</expr_stmt>
                }</block></then></if>
            <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></for>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n%d %d\n"</literal></expr></argument>,<argument><expr><name>ans</name></expr></argument>,<argument><expr><name>pi</name></expr></argument>,<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>





</unit>
