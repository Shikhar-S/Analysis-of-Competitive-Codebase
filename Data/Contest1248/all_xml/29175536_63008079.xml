<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29175536_63008079.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>LL</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>LL</name></type> <name>MOD</name><init>=<expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<function><type><name>LL</name></type> <name>poww</name><parameter_list>(<parameter><decl><type><name>LL</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>LL</name></type> <name>n</name></decl></parameter>)</parameter_list><comment type="line" format="doxygen">///å¿«éå¹</comment>
<block>{
    <decl_stmt><decl><type><name>LL</name></type> <name>res</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>n</name></expr>)</condition>
    <block>{
        <if>if<condition>(<expr><name>n</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>res</name> <operator>=</operator><name>res</name><operator>*</operator><name>x</name><operator>%</operator><name>MOD</name></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>*</operator> <name>x</name> <operator>%</operator> <name>MOD</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>n</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><name>res</name></expr>;</return>
}</block></function>
<comment type="line" format="doxygen">///ç»åæ°æ¨¡æ¿</comment>
<decl_stmt><decl><type><name>LL</name></type> <name><name>p</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>f</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>;</decl_stmt><comment type="line" format="doxygen">///pä¸ºé¶ä¹æ°ç»ï¼fä¸ºé¶ä¹çéå</comment>
<function><type><name>void</name></type> <name>init</name><parameter_list>()</parameter_list><comment type="line" format="doxygen">///é¢å¤ç</comment>
<block>{
    <expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">100001</literal></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><comment type="line" format="doxygen">///è®¡ç®é¶ä¹</comment>
        <block type="pseudo"><expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>p</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>*</operator><name>i</name><operator>%</operator><name>MOD</name></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">100001</literal></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><comment type="line" format="doxygen">///è®¡ç®éå</comment>
        <block type="pseudo"><expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><call><name>poww</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name>MOD</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    <return>return ;</return>
}</block></function>
<function><type><name>LL</name></type> <name>comb</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>m</name></decl></parameter>)</parameter_list><comment type="line" format="doxygen">///è®¡ç®ç»åæ°</comment>
<block>{
    <return>return <expr><operator>(</operator><name><name>f</name><index>[<expr><name>m</name></expr>]</index></name><operator>*</operator><name><name>f</name><index>[<expr><name>n</name><operator>-</operator><name>m</name></expr>]</index></name><operator>)</operator><operator>%</operator><name>MOD</name><operator>*</operator><name><name>p</name><index>[<expr><name>n</name></expr>]</index></name><operator>%</operator><name>MOD</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name>LL</name></type> <name>ans</name></decl>,<decl><type ref="prev"/><name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>m</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<if>if<condition>(<expr><name>n</name><operator>-</operator><name>i</name><operator>&gt;=</operator><name>i</name></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>ans</name><operator>+=</operator><operator>(</operator> <call><name>comb</name><argument_list>(<argument><expr><name>n</name><operator>-</operator><name>i</name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>)</operator></expr>;</expr_stmt></block></then>
		<else>else
			<block type="pseudo"><empty_stmt>;</empty_stmt></block></else></if>
		<expr_stmt><expr><name>ans</name><operator>%=</operator><name>MOD</name></expr>;</expr_stmt>
	}</block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>m</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<if>if<condition>(<expr><name>m</name><operator>-</operator><name>i</name><operator>&gt;=</operator><name>i</name></expr>)</condition><then>
		<block type="pseudo"><expr_stmt><expr><name>ans</name><operator>+=</operator><operator>(</operator><call><name>comb</name><argument_list>(<argument><expr><name>m</name><operator>-</operator><name>i</name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt></block></then>
		<else>else
			<block type="pseudo"><empty_stmt>;</empty_stmt></block></else></if>
		<expr_stmt><expr><name>ans</name><operator>%=</operator><name>MOD</name></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>(</operator><operator>(</operator><literal type="number">2ll</literal><operator>*</operator><name>ans</name><operator>)</operator><operator>+</operator><literal type="number">2ll</literal><operator>)</operator><operator>%</operator><name>MOD</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>	
}</block></function></unit>
