<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29180603_63003876.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>int</name></type> <name><name>head</name><index>[<expr><literal type="number">4000005</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>nex</name><index>[<expr><literal type="number">4000005</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>vet</name><index>[<expr><literal type="number">4000005</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name>tim</name></decl>,<decl><type ref="prev"/><name>edgenum</name></decl>,<decl><type ref="prev"/><name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>dfn</name><index>[<expr><literal type="number">4000005</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>low</name><index>[<expr><literal type="number">4000005</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>st</name><index>[<expr><literal type="number">4000005</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name>top</name></decl>,<decl><type ref="prev"/><name>numid</name></decl>,<decl><type ref="prev"/><name><name>id</name><index>[<expr><literal type="number">4000005</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name><name>vis</name><index>[<expr><literal type="number">4000005</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len1</name></decl>,<decl><type ref="prev"/><name>len2</name></decl>,<decl><type ref="prev"/><name><name>k1</name><index>[<expr><literal type="number">4000005</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>k2</name><index>[<expr><literal type="number">4000005</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>du</name><index>[<expr><literal type="number">4000005</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>addedge</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{
	<expr_stmt><expr><name>edgenum</name><operator>++</operator></expr><operator>,</operator><expr><name><name>vet</name><index>[<expr><name>edgenum</name></expr>]</index></name><operator>=</operator><name>y</name></expr><operator>,</operator><expr><name><name>nex</name><index>[<expr><name>edgenum</name></expr>]</index></name><operator>=</operator><name><name>head</name><index>[<expr><name>x</name></expr>]</index></name></expr><operator>,</operator><expr><name><name>head</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><name>edgenum</name></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type> <name>tarjan</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>)</parameter_list>
<block>{
	<expr_stmt><expr><name><name>dfn</name><index>[<expr><name>u</name></expr>]</index></name><operator>=</operator><name><name>low</name><index>[<expr><name>u</name></expr>]</index></name><operator>=</operator><operator>++</operator><name>tim</name></expr><operator>,</operator><expr><name><name>vis</name><index>[<expr><name>u</name></expr>]</index></name><operator>=</operator><literal type="boolean">true</literal></expr><operator>,</operator><expr><name><name>st</name><index>[<expr><operator>++</operator><name>top</name></expr>]</index></name><operator>=</operator><name>u</name></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>e</name><init>=<expr><name><name>head</name><index>[<expr><name>u</name></expr>]</index></name></expr></init></decl>;</init><condition><expr><name>e</name><operator>!=</operator><literal type="number">0</literal></expr>;</condition><incr><expr><name>e</name><operator>=</operator><name><name>nex</name><index>[<expr><name>e</name></expr>]</index></name></expr></incr>)</control>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>v</name><init>=<expr><name><name>vet</name><index>[<expr><name>e</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><operator>!</operator><name><name>dfn</name><index>[<expr><name>v</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>tarjan</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><name><name>low</name><index>[<expr><name>u</name></expr>]</index></name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name><name>low</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>low</name><index>[<expr><name>v</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
		<elseif>else <if>if <condition>(<expr><name><name>vis</name><index>[<expr><name>v</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name><name>low</name><index>[<expr><name>u</name></expr>]</index></name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name><name>low</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>dfn</name><index>[<expr><name>v</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif></if>
	}</block></for>
	<if>if <condition>(<expr><name><name>low</name><index>[<expr><name>u</name></expr>]</index></name><operator>==</operator><name><name>dfn</name><index>[<expr><name>u</name></expr>]</index></name></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><name>numid</name><operator>++</operator></expr>;</expr_stmt>
		<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition>
		<block>{
			<expr_stmt><expr><name><name>vis</name><index>[<expr><name><name>st</name><index>[<expr><name>top</name></expr>]</index></name></expr>]</index></name><operator>=</operator><literal type="boolean">false</literal></expr><operator>,</operator><expr><name><name>id</name><index>[<expr><name><name>st</name><index>[<expr><name>top</name></expr>]</index></name></expr>]</index></name><operator>=</operator><name>numid</name></expr>;</expr_stmt>
			<if>if <condition>(<expr><name><name>st</name><index>[<expr><name>top</name><operator>--</operator></expr>]</index></name><operator>==</operator><name>u</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
		}</block></while>
	}</block></then></if>
}</block></function>

<function><type><name>void</name></type> <name>print</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{
	<if>if <condition>(<expr><name>numid</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block>{<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"No\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return;</return>}</block></then></if>
	<expr_stmt><expr><name>len1</name><operator>=</operator><name>len2</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><if>if <condition>(<expr><name><name>id</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name>x</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>k1</name><index>[<expr><operator>++</operator><name>len1</name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><name><name>k2</name><index>[<expr><operator>++</operator><name>len2</name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></else></if></block></for>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Yes\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d\n"</literal></expr></argument>,<argument><expr><name>len1</name></expr></argument>,<argument><expr><name>len2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>len1</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d "</literal></expr></argument>,<argument><expr><name><name>k1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>len2</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d "</literal></expr></argument>,<argument><expr><name><name>k2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><name>numid</name><operator>=</operator><name>top</name><operator>=</operator><name>edgenum</name><operator>=</operator><name>tim</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name><operator>+</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><name><name>dfn</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>low</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>head</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>st</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>id</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>du</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>vis</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>m</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><call><name>addedge</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><if>if <condition>(<expr><operator>!</operator><name><name>dfn</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>tarjan</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></block></for>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><for>for <control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><name><name>head</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</init><condition><expr><name>j</name><operator>!=</operator><literal type="number">0</literal></expr>;</condition><incr><expr><name>j</name><operator>=</operator><name><name>nex</name><index>[<expr><name>j</name></expr>]</index></name></expr></incr>)</control>
			<block type="pseudo"><if>if <condition>(<expr><name><name>id</name><index>[<expr><name><name>vet</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name><operator>!=</operator><name><name>id</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>du</name><index>[<expr><name><name>id</name><index>[<expr><name><name>vet</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block></then></if></block></for></block></for>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>numid</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><if>if <condition>(<expr><name><name>du</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block>{<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><break>break;</break>}</block></then></if></block></for>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>cas</name></decl>;</decl_stmt><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>cas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>cas</name><operator>--</operator></expr>)</condition> <block type="pseudo"><expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
