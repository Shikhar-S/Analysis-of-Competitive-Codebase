<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29174949_63002339.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name><name>pk</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>pi</name><index>[<expr><literal type="number">2333</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>huan</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>char</name></type> <name>a</name><init>=<expr><name><name>pi</name><index>[<expr><name>x</name></expr>]</index></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><name><name>pi</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><name><name>pi</name><index>[<expr><name>y</name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>pi</name><index>[<expr><name>y</name></expr>]</index></name><operator>=</operator><name>a</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ss</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>p</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>s</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><if>if<condition>(<expr><name><name>pi</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'('</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block></then>
	<else>else
	<block>{
		<expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt> <if>if<condition>(<expr><name>p</name><operator>==</operator><name>s</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ss</name><operator>++</operator></expr>;</expr_stmt></block></then>
		<elseif>else <if>if<condition>(<expr><name>p</name><operator>&lt;</operator><name>s</name></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>s</name><operator>=</operator><name>p</name></expr>;</expr_stmt> <expr_stmt><expr><name>ss</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
		}</block></then></if></elseif></if>
	}</block></else></if></block></for>
	<expr_stmt><expr><name>a</name><operator>=</operator><name><name>pi</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>pi</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><name><name>pi</name><index>[<expr><name>y</name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>pi</name><index>[<expr><name>y</name></expr>]</index></name><operator>=</operator><name>a</name></expr>;</expr_stmt>
	<return>return <expr><name>ss</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>p</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>sum</name></decl>;</decl_stmt> <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>,<argument><expr><name>pi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><if>if<condition>(<expr><name><name>pi</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'('</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block></then>
	<else>else <block type="pseudo"><expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt></block></else></if></block></for>
	<if>if<condition>(<expr><name>p</name><operator>!=</operator><literal type="number">0</literal></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"0\n1 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></then></if>
	<expr_stmt><expr><name>sum</name><operator>=</operator><call><name>huan</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>pk</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>pk</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><if>if<condition>(<expr><name><name>pi</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name><name>pi</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>ss</name><init>=<expr><call><name>huan</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <if>if<condition>(<expr><name>ss</name><operator>&gt;</operator><name>sum</name></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>sum</name><operator>=</operator><name>ss</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>pk</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>pk</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name>j</name></expr>;</expr_stmt>
		}</block></then></if>
	}</block></then></if></block></for></block></for>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n%d %d"</literal></expr></argument>,<argument><expr><name>sum</name></expr></argument>,<argument><expr><name><name>pk</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name><name>pk</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
