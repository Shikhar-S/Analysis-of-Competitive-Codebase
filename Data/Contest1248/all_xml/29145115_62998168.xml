<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29145115_62998168.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>mod</name><init>=<expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>m</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>e11</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>e00</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>e01</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>e10</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">3</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
                <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>ne11</name><init>=<expr><name>e01</name></expr></init></decl>, <decl><type ref="prev"/><name>ne00</name><init>=<expr><name>e10</name></expr></init></decl>, <decl><type ref="prev"/><name>ne01</name><init>=<expr><operator>(</operator><name>e10</name><operator>+</operator><name>e00</name><operator>)</operator><operator>%</operator><name>mod</name></expr></init></decl>, <decl><type ref="prev"/><name>ne10</name><init>=<expr><operator>(</operator><name>e01</name><operator>+</operator><name>e11</name><operator>)</operator><operator>%</operator><name>mod</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>e11</name><operator>=</operator><name>ne11</name></expr>;</expr_stmt><expr_stmt><expr><name>e00</name><operator>=</operator><name>ne00</name></expr>;</expr_stmt><expr_stmt><expr><name>e01</name><operator>=</operator><name>ne01</name></expr>;</expr_stmt><expr_stmt><expr><name>e10</name><operator>=</operator><name>ne10</name></expr>;</expr_stmt>
        }</block></for>
        <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>str</name><init>=<expr><operator>(</operator><name>e11</name><operator>+</operator><name>e00</name><operator>+</operator><name>e01</name><operator>+</operator><name>e10</name><operator>)</operator><operator>%</operator><name>mod</name></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>n</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>str</name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name>e11</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt><expr_stmt><expr><name>e00</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt><expr_stmt><expr><name>e01</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt><expr_stmt><expr><name>e10</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">3</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>m</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
                <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>ne11</name><init>=<expr><name>e01</name></expr></init></decl>, <decl><type ref="prev"/><name>ne00</name><init>=<expr><name>e10</name></expr></init></decl>, <decl><type ref="prev"/><name>ne01</name><init>=<expr><operator>(</operator><name>e10</name><operator>+</operator><name>e00</name><operator>)</operator><operator>%</operator><name>mod</name></expr></init></decl>, <decl><type ref="prev"/><name>ne10</name><init>=<expr><operator>(</operator><name>e01</name><operator>+</operator><name>e11</name><operator>)</operator><operator>%</operator><name>mod</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>e11</name><operator>=</operator><name>ne11</name></expr>;</expr_stmt><expr_stmt><expr><name>e00</name><operator>=</operator><name>ne00</name></expr>;</expr_stmt><expr_stmt><expr><name>e01</name><operator>=</operator><name>ne01</name></expr>;</expr_stmt><expr_stmt><expr><name>e10</name><operator>=</operator><name>ne10</name></expr>;</expr_stmt>
        }</block></for>
        <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>str2</name><init>=<expr><operator>(</operator><name>e11</name><operator>+</operator><name>e00</name><operator>+</operator><name>e01</name><operator>+</operator><name>e10</name><operator>)</operator><operator>%</operator><name>mod</name></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>m</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>str2</name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>(</operator><name>str</name><operator>+</operator><name>str2</name><operator>-</operator><literal type="number">2</literal><operator>+</operator><name>mod</name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt>
}</block></function>
</unit>
