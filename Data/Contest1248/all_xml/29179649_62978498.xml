<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29179649_62978498.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>t</name></decl> , <decl><type ref="prev"/><name>n</name></decl> , <decl><type ref="prev"/><name>i</name></decl> , <decl><type ref="prev"/><name>odd1</name></decl> , <decl><type ref="prev"/><name>odd2</name></decl> , <decl><type ref="prev"/><name>even2</name></decl> , <decl><type ref="prev"/><name>even1</name></decl> , <decl><type ref="prev"/><name>ans</name></decl> , <decl><type ref="prev"/><name>x</name></decl> , <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition><block>{
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>odd2</name> <operator>=</operator> <name>odd1</name> <operator>=</operator> <name>even1</name> <operator>=</operator> <name>even2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>ans</name>  <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
            <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>x</name></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>x</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then><block>{
                <expr_stmt><expr><name>odd1</name><operator>++</operator></expr>;</expr_stmt>
            }</block></then>
            <else>else<block>{
                <expr_stmt><expr><name>even1</name><operator>++</operator></expr>;</expr_stmt>
            }</block></else></if>
        }</block></for>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>m</name></expr> ;</expr_stmt>
        <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>m</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
            <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>x</name></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>x</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then><block>{
                <expr_stmt><expr><name>odd2</name><operator>++</operator></expr>;</expr_stmt>
            }</block></then>
            <else>else<block>{
                <expr_stmt><expr><name>even2</name><operator>++</operator></expr>;</expr_stmt>
            }</block></else></if>
        }</block></for>
        <expr_stmt><expr><name>ans</name> <operator>=</operator> <name>odd2</name> <operator>*</operator> <name>odd1</name> <operator>+</operator> <name>even2</name> <operator>*</operator> <name>even1</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
