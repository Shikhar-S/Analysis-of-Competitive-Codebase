<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29149312_62992555.cpp"><comment type="block">/*
 _     _    ___  ___  __ __ 
| |   | |  |__ \|__ \/_ /_ |
| |__ | |__   ) |  ) || || |
| '_ \| '_ \ / /  / / | || |
| |_) | |_) / /_ / /_ | || |
|_.__/|_.__/____|____||_||_|

*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro>          <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro>          <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INF</name></cpp:macro>         <cpp:value>9223372036854775807</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>    <cpp:macro><name>endl</name></cpp:macro>        <cpp:value>'\n'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro>         <cpp:value>pair&lt;ll int,ll int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vi</name></cpp:macro>          <cpp:value>vector&lt;ll int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro>      <cpp:value>(a).begin(),(a).end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro>           <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name></cpp:macro>           <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>       <cpp:value>(ll int)x.size()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hell</name></cpp:macro>        <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>for(ll int i=a;i&lt;b;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lbnd</name></cpp:macro>        <cpp:value>lower_bound</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ubnd</name></cpp:macro>        <cpp:value>upper_bound</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bs</name></cpp:macro>          <cpp:value>binary_search</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro>          <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lower</name><parameter_list>(<parameter><type><name>u</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>transform(u.begin(), u.end(), u.begin(), ::tolower);</cpp:value></cpp:define><comment type="line">//convert string u to lowercase;</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>upper</name><parameter_list>(<parameter><type><name>u</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>transform(u.begin(), u.end(), u.begin(), ::toupper);</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N</name></cpp:macro>  <cpp:value>100005</cpp:value></cpp:define>
<function><type><name>ll</name></type> <name>expo</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>base</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>exponent</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>mod</name></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>ans</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>exponent</name><operator>!=</operator><literal type="number">0</literal></expr>)</condition><block>{
        <if>if<condition>(<expr><name>exponent</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ans</name><operator>=</operator><operator>(</operator><name>ans</name><operator>*</operator><name>base</name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name>base</name><operator>=</operator><operator>(</operator><name>base</name><operator>*</operator><name>base</name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>exponent</name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><name>ans</name><operator>%</operator><name>mod</name></expr>;</return>
}</block></function>
<function><type><name>ll</name></type> <name>modInverse</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>p</name></decl></parameter>)</parameter_list> 
<block>{ 
    <return>return <expr><call><name>expo</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>p</name><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return> 
}</block></function> 
  
<decl_stmt><decl><type><name>ll</name></type> <name><name>fac</name><index>[<expr><name>N</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt> 
<comment type="line">// Returns nCr % p using Fermat's little </comment>
<comment type="line">// theorem. </comment>
<function><type><name>ll</name></type> <name>nCrModPFermat</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>p</name></decl></parameter>)</parameter_list> 
<block>{ 
   <comment type="line">// Base case </comment>
   <if>if <condition>(<expr><name>r</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> 
      <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if> 
  
    <comment type="line">// Fill factorial array so that we </comment>
    <comment type="line">// can find all factorial of r, n </comment>
    <comment type="line">// and n-r </comment>
    
    
    <return>return <expr><operator>(</operator><name><name>fac</name><index>[<expr><name>n</name></expr>]</index></name><operator>*</operator> <call><name>modInverse</name><argument_list>(<argument><expr><name><name>fac</name><index>[<expr><name>r</name></expr>]</index></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>%</operator> <name>p</name> <operator>*</operator> 
            <call><name>modInverse</name><argument_list>(<argument><expr><name><name>fac</name><index>[<expr><name>n</name><operator>-</operator><name>r</name></expr>]</index></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>%</operator> <name>p</name><operator>)</operator> <operator>%</operator> <name>p</name></expr>;</return> 
}</block></function> 
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>TESTS</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<comment type="line">//    cin&gt;&gt;TESTS;</comment>
    <while>while<condition>(<expr><name>TESTS</name><operator>--</operator></expr>)</condition>
    <block>{
        <expr_stmt><expr><name><name>fac</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> 
        <block type="pseudo"><expr_stmt><expr><name><name>fac</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>fac</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>*</operator><name>i</name><operator>%</operator><name>hell</name></expr>;</expr_stmt></block></for> 
  
        <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>m</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ll</name></type> <name>dn</name><init>=<expr><name>n</name></expr></init></decl>,<decl><type ref="prev"/><name>c2</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ll</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n/<literal type="number">2</literal>+<literal type="number">1</literal></argument>)</argument_list></macro>
        <block>{
            <expr_stmt><expr><name>dn</name><operator>=</operator><name>n</name><operator>-</operator><name>i</name></expr>;</expr_stmt>
            <comment type="line">// cout&lt;&lt;nCrModPFermat(dn,i,hell)&lt;&lt;endl;</comment>
            <expr_stmt><expr><name>ans</name><operator>+=</operator><operator>(</operator><operator>(</operator><literal type="number">2</literal><operator>*</operator><call><name>nCrModPFermat</name><argument_list>(<argument><expr><name>dn</name></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><name>hell</name></expr></argument>)</argument_list></call><operator>)</operator><operator>%</operator><name>hell</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>ans</name><operator>%=</operator><name>hell</name></expr>;</expr_stmt>
        }</block>
        <comment type="line">// cout&lt;&lt;ans&lt;&lt;endl;</comment>
        <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>m/<literal type="number">2</literal>+<literal type="number">1</literal></argument>)</argument_list></macro>
        <block>{
            <expr_stmt><expr><name>dn</name><operator>=</operator><name>m</name><operator>-</operator><name>i</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>ans</name><operator>+=</operator><operator>(</operator><operator>(</operator><literal type="number">2</literal><operator>*</operator><call><name>nCrModPFermat</name><argument_list>(<argument><expr><name>dn</name></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><name>hell</name></expr></argument>)</argument_list></call><operator>)</operator><operator>%</operator><name>hell</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>ans</name><operator>%=</operator><name>hell</name></expr>;</expr_stmt>
        }</block>
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
