<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29175572_63003353.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>LL</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">2e6</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <comment type="line">// freopen("in.txt", "r",stdin);</comment>
    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>str</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>ans2</name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition><incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{
        <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name></expr></init></decl>;</init><condition><expr><name>j</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition><incr><expr><name>j</name> <operator>++</operator></expr></incr>)</control> <block>{
    <comment type="line">// for(int i = 1;i &lt;= 1;i ++) {</comment>
    <comment type="line">//     for(int j = i;j &lt;= 1;j ++) {</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>str</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>cot0</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>cot1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <comment type="line">// cot0 )  cot1 (</comment>
            <for>for<control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>k</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition><incr><expr><name>k</name> <operator>++</operator></expr></incr>)</control> <block>{
                <if>if<condition>(<expr><name><name>str</name><index>[<expr><name>k</name></expr>]</index></name> <operator>==</operator> <literal type="char">')'</literal></expr>)</condition><then> <block>{
                    <if>if<condition>(<expr><name>cot1</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cot1</name> <operator>--</operator></expr>;</expr_stmt></block></then>
                    <else>else <block type="pseudo"><expr_stmt><expr><name>cot0</name> <operator>++</operator></expr>;</expr_stmt></block></else></if>
                }</block></then>
                <else>else <block type="pseudo"><expr_stmt><expr><name>cot1</name> <operator>++</operator></expr>;</expr_stmt></block></else></if>
            }</block></for>
            <comment type="line">// updata</comment>
            <comment type="line">// cout &lt;&lt; i &lt;&lt; " " &lt;&lt; j &lt;&lt; " " &lt;&lt; cot0 &lt;&lt; " " &lt;&lt; cot1 &lt;&lt; endl;</comment>
            <if>if<condition>(<expr><name>cot0</name> <operator>||</operator> <name>cot1</name></expr>)</condition><then> <block>{
                <if>if<condition>(<expr><name>cot0</name> <operator>!=</operator> <name>cot1</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></then>
                <else>else <block>{
                    <decl_stmt><decl><type><name>int</name></type> <name>ss</name> <init>= <expr><name>cot0</name></expr></init></decl>, <decl><type ref="prev"/><name>tmp</name></decl>, <decl><type ref="prev"/><name>top</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                    <for>for<control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><name>n</name></expr></init></decl>;</init><condition><expr><name>k</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>;</condition><incr><expr><name>k</name> <operator>--</operator></expr></incr>)</control> <block>{
                        <if>if<condition>(<expr><name><name>str</name><index>[<expr><name>k</name></expr>]</index></name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ss</name> <operator>--</operator></expr>;</expr_stmt></block></then> <else>else <block type="pseudo"><expr_stmt><expr><name>ss</name> <operator>++</operator></expr>;</expr_stmt></block></else></if>

                        <if>if<condition>(<expr><name>ss</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                            <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
                            <break>break;</break>
                        }</block></then></if>
                    }</block></for>
                    <expr_stmt><expr><name>tmp</name> <operator>--</operator></expr>;</expr_stmt>
                    <comment type="line">// cout &lt;&lt; tmp &lt;&lt; endl;</comment>
                    <for>for<control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><name>tmp</name></expr></init></decl>;</init><condition><expr><name>k</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>;</condition><incr><expr><name>k</name> <operator>--</operator></expr></incr>)</control> <block>{
                        <if>if<condition>(<expr><name><name>str</name><index>[<expr><name>k</name></expr>]</index></name> <operator>==</operator> <literal type="char">')'</literal></expr>)</condition><then> <block>{
                            <if>if<condition>(<expr><operator>!</operator><name>top</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>res</name> <operator>++</operator></expr>;</expr_stmt></block></then></if>
                            <expr_stmt><expr><name>top</name> <operator>++</operator></expr>;</expr_stmt>
                        }</block></then>
                        <else>else <block type="pseudo"><expr_stmt><expr><name>top</name> <operator>--</operator></expr>;</expr_stmt></block></else></if>
                    }</block></for>
                }</block></else></if>
            }</block></then>
            <else>else <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>top</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                <for>for<control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>k</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition><incr><expr><name>k</name> <operator>++</operator></expr></incr>)</control> <block>{
                    <if>if<condition>(<expr><name><name>str</name><index>[<expr><name>k</name></expr>]</index></name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition><then> <block>{
                        <if>if<condition>(<expr><operator>!</operator><name>top</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>res</name> <operator>++</operator></expr>;</expr_stmt></block></then></if>
                        <expr_stmt><expr><name>top</name> <operator>++</operator></expr>;</expr_stmt>
                    }</block></then>
                    <else>else <block type="pseudo"><expr_stmt><expr><name>top</name> <operator>--</operator></expr>;</expr_stmt></block></else></if>
                }</block></for>
            }</block></else></if>
            <if>if<condition>(<expr><name>res</name> <operator>&gt;</operator> <name>ans</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>ans</name> <operator>=</operator> <name>res</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>ans2</name> <operator>=</operator> <block>{<expr><name>i</name></expr>, <expr><name>j</name></expr>}</block></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>str</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></for>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>ans2</name><operator>.</operator><name>first</name></name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name><name>ans2</name><operator>.</operator><name>second</name></name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
