<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29176593_62992408.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sstream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cctype&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;list&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;functional&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG</name><parameter_list>(<parameter><type><name>numx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout &lt;&lt; '&gt;' &lt;&lt; #numx &lt;&lt; ':' &lt;&lt; numx &lt;&lt; endl;</cpp:value></cpp:define>
<function><specifier>inline</specifier> <type><name>bool</name></type> <name>EQ</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>num1</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>bin</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>fabs</name><argument_list>(<argument><expr><name>num1</name><operator>-</operator><name>bin</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1e-9</literal></expr>;</return> }</block></function>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>INF</name> <init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">29</literal></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SZ</name><parameter_list>(<parameter><type><name>num1</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(int)(num1.ss1())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET</name><parameter_list>(<parameter><type><name>num1</name></type></parameter>,<parameter><type><name>bin</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(num1,bin,sizeof(num1))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LET</name><parameter_list>(<parameter><type><name>numx</name></type></parameter>,<parameter><type><name>num1</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__typeof(num1) numx(num1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TR</name><parameter_list>(<parameter><type><name>vecc</name></type></parameter>,<parameter><type><name>iter</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for( LET(iter,vecc.begin()) ; iter != vecc.ss2() ; iter++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>repi</name><parameter_list>(<parameter><type><name>idx1</name></type></parameter>,<parameter><type><name>num1</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int idx1=0; idx1&lt;(int)num1;idx1++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>si</name><parameter_list>(<parameter><type><name>num1</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%depth",&amp;num1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRT</name><parameter_list>()</parameter_list></cpp:macro>  <cpp:value>int test; cin&gt;&gt;test; while(test--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>io</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(false);cin.tie(NULL);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>trace1</name><parameter_list>(<parameter><type><name>numx</name></type></parameter>)</parameter_list></cpp:macro>                <cpp:value>cerr &lt;&lt; #numx &lt;&lt; ": " &lt;&lt; numx &lt;&lt; endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>trace2</name><parameter_list>(<parameter><type><name>numx</name></type></parameter>, <parameter><type><name>to</name></type></parameter>)</parameter_list></cpp:macro>             <cpp:value>cerr &lt;&lt; #numx &lt;&lt; ": " &lt;&lt; numx &lt;&lt; " | " &lt;&lt; #to &lt;&lt; ": " &lt;&lt; to &lt;&lt; endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>trace3</name><parameter_list>(<parameter><type><name>numx</name></type></parameter>, <parameter><type><name>to</name></type></parameter>, <parameter><type><name>nn3</name></type></parameter>)</parameter_list></cpp:macro>          <cpp:value>cerr &lt;&lt; #numx &lt;&lt; ": " &lt;&lt; numx &lt;&lt; " | " &lt;&lt; #to &lt;&lt; ": " &lt;&lt; to &lt;&lt; " | " &lt;&lt; #nn3 &lt;&lt; ": " &lt;&lt; nn3 &lt;&lt; endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>trace4</name><parameter_list>(<parameter><type><name>num1</name></type></parameter>, <parameter><type><name>bin</name></type></parameter>, <parameter><type><name>ch</name></type></parameter>, <parameter><type><name>depth</name></type></parameter>)</parameter_list></cpp:macro>       <cpp:value>cerr &lt;&lt; #num1 &lt;&lt; ": " &lt;&lt; num1 &lt;&lt; " | " &lt;&lt; #bin &lt;&lt; ": " &lt;&lt; bin &lt;&lt; " | " &lt;&lt; #ch &lt;&lt; ": " &lt;&lt; ch &lt;&lt; " | " &lt;&lt; #depth &lt;&lt; ": " &lt;&lt; depth &lt;&lt; endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>trace5</name><parameter_list>(<parameter><type><name>num1</name></type></parameter>, <parameter><type><name>bin</name></type></parameter>, <parameter><type><name>ch</name></type></parameter>, <parameter><type><name>depth</name></type></parameter>, <parameter><type><name>make_pair1</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>cerr &lt;&lt; #num1 &lt;&lt; ": " &lt;&lt; num1 &lt;&lt; " | " &lt;&lt; #bin &lt;&lt; ": " &lt;&lt; bin &lt;&lt; " | " &lt;&lt; #ch &lt;&lt; ": " &lt;&lt; ch &lt;&lt; " | " &lt;&lt; #depth &lt;&lt; ": " &lt;&lt; depth &lt;&lt; " | " &lt;&lt; #make_pair1 &lt;&lt; ": " &lt;&lt; make_pair1 &lt;&lt; endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>trace6</name><parameter_list>(<parameter><type><name>num1</name></type></parameter>, <parameter><type><name>bin</name></type></parameter>, <parameter><type><name>ch</name></type></parameter>, <parameter><type><name>depth</name></type></parameter>, <parameter><type><name>make_pair1</name></type></parameter>, <parameter><type><name>det</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cerr &lt;&lt; #num1 &lt;&lt; ": " &lt;&lt; num1 &lt;&lt; " | " &lt;&lt; #bin &lt;&lt; ": " &lt;&lt; bin &lt;&lt; " | " &lt;&lt; #ch &lt;&lt; ": " &lt;&lt; ch &lt;&lt; " | " &lt;&lt; #depth &lt;&lt; ": " &lt;&lt; depth &lt;&lt; " | " &lt;&lt; #make_pair1 &lt;&lt; ": " &lt;&lt; make_pair1 &lt;&lt; " | " &lt;&lt; #det &lt;&lt; ": " &lt;&lt; det &lt;&lt; endl;</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>forn</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>          <cpp:value>for(int i=0;i&lt;n;++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=0 ; i&lt;n ; i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rrep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>ctb2</name></type></parameter>, <parameter><type><name>ctb1</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(ll i = ctb2; i &gt;= ctb1; i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VI</name></cpp:macro> <cpp:value>vector&lt;int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>maps1</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>flgVal1</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>strr</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<using>using <name>ll</name> <init>= <type><name>long</name> <name>long</name></type></init>;</using>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>

<decl_stmt><decl><type><name>ll</name></type> <name><name>invFact</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>resultFunc</name><parameter_list>()</parameter_list> <block>{
	<decl_stmt><decl><type><name>string</name></type> <name>S</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>S</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>a</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>b</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>    
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>S</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
        <if>if <condition>(<expr><name><name>S</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'o'</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>b</name> <operator>+=</operator> <name>a</name></expr>;</expr_stmt>
        }</block></then> <elseif>else <if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>S</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'v'</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>a</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>c</name> <operator>+=</operator> <name>b</name></expr>;</expr_stmt>
        }</block></then></if></elseif></if>
    }</block></for>
    <return>return <expr><name>c</name></expr>;</return>
}</block></function>
<function><type><name>ll</name></type> <name>power</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
	<if>if<condition>(<expr><name>a</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
		<block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
	<if>if<condition>(<expr><name>a</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then>
		<block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
	<if>if<condition>(<expr><name>b</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
		<return>return <expr><call><name>power</name><argument_list>(<argument><expr><name>a</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal><operator>-</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></then> <else>else <block>{
		<return>return <expr><operator>(</operator><call><name>power</name><argument_list>(<argument><expr><name>a</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal><operator>-</operator><name>b</name></expr></argument>)</argument_list></call><operator>+</operator><call><name>power</name><argument_list>(<argument><expr><name>a</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>)</operator><operator>%</operator><name>mod</name></expr>;</return>
	}</block></else></if>
}</block></function>
<function><type><name>void</name></type> <name>pre</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><name><name>invFact</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>invFact</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">100000</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><name><name>invFact</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>invFact</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>invFact</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>%</operator> <name>mod</name></expr>;</expr_stmt></block></for>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<comment type="line">// your code goes here</comment>
	<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>sum0</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>sum1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>sum2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name></expr>;</expr_stmt>
	<if>if<condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>m</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then><block>{
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"2"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></then></if>
	<expr_stmt><expr><call><name>pre</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if>if<condition>(<expr><name>m</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name><name>invFact</name><index>[<expr><name>n</name></expr>]</index></name> <operator>%</operator> <name>mod</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></then></if>
	
	<if>if<condition>(<expr><name>n</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>invFact</name><index>[<expr><name>m</name></expr>]</index></name> <operator>%</operator> <name>mod</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></then></if>
	
	<expr_stmt><expr><name>sum1</name> <operator>=</operator> <name><name>invFact</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>sum2</name> <operator>=</operator> <name><name>invFact</name><index>[<expr><name>m</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>sum1</name> <operator>+</operator> <name>sum2</name><operator>)</operator> <operator>%</operator> <name>mod</name><operator>)</operator> <operator>*</operator> <literal type="number">2</literal> <operator>%</operator> <name>mod</name> <operator>+</operator> <name>mod</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>%</operator> <name>mod</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
