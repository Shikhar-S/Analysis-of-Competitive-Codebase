<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29180666_63004824.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=a;i&lt;b;++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fr</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=a;i&gt;b;--i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=a;i&lt;=b;++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=a;i&gt;=b;--i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rc</name><parameter_list>(<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>char t;cin&gt;&gt;t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rs</name><parameter_list>(<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>string t;cin&gt;&gt;t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ri</name><parameter_list>(<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>int t;cin&gt;&gt;t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rl</name><parameter_list>(<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>long t;cin&gt;&gt;t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb</name><parameter_list>(<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>bool t;cin&gt;&gt;t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rll</name><parameter_list>(<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>long long t;cin&gt;&gt;t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>make_pair((x),(y))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a.begin(),a.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>push_back(a)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOS</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>set_bits</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_popcount(a)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inf</name></cpp:macro> <cpp:value>INT_MAX</cpp:value></cpp:define>


<using>using <namespace>namespace <name>std</name> ;</namespace></using>


<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></type> <name>vb</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>&gt;</argument_list></name></type> <name>vs</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></type> <name>vll</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt; <argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>vvi</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>vpii</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>vpli</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>, <argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>vpll</name>;</typedef>
<typedef>typedef <type><name><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></name></type> <name>ii</name>;</typedef>
<typedef>typedef <type><name><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vi</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></name></type> <name>ivi</name>;</typedef>
<typedef>typedef <type><name><name>unordered_map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>umapii</name>;</typedef>
<typedef>typedef <type><name><name>unordered_map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></type> <name>umapib</name>;</typedef>
<typedef>typedef <type><name><name>unordered_map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>string</name></expr></argument>&gt;</argument_list></name></type> <name>umapis</name>;</typedef>
<typedef>typedef <type><name><name>unordered_map</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>umapsi</name>;</typedef>
<typedef>typedef <type><name><name>unordered_map</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>, <argument><expr><name>string</name></expr></argument>&gt;</argument_list></name></type> <name>umapss</name>;</typedef>
<typedef>typedef <type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>mapii</name>;</typedef>
<typedef>typedef <type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>mapsi</name>;</typedef>
<typedef>typedef <type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>string</name></expr></argument>&gt;</argument_list></name></type> <name>mapis</name>;</typedef>
<typedef>typedef <type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>mappiii</name>;</typedef>
<typedef>typedef <type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>mapipii</name>;</typedef>
<typedef>typedef <type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></type> <name>mapib</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>, <argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></type> <name>pll</name>;</typedef>
<typedef>typedef <type><name><name>unordered_set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>useti</name>;</typedef>
<typedef>typedef <type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>seti</name>;</typedef>
<typedef>typedef <type><name><name>priority_queue</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>mxpq</name>;</typedef>
<typedef>typedef <type><name><name>priority_queue</name><argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument>, <argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>greater</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>mnpq</name>;</typedef>


<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name> <init>= <expr><literal type="number">2e5</literal> <operator>+</operator> <literal type="number">17</literal></expr></init></decl>, <decl><type ref="prev"/><name>maxv</name> <init>= <expr><literal type="number">1e6</literal> <operator>+</operator> <literal type="number">17</literal></expr></init></decl>, <decl><type ref="prev"/><name>M</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>


<function><specifier>inline</specifier> <type><name>ll</name></type> <name>mod</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name><init>=<expr><name>M</name></expr></init></decl></parameter>)</parameter_list><block>{
	<expr_stmt><expr><name>a</name> <operator>%=</operator> <name>b</name></expr> ;</expr_stmt>
	<if>if<condition>(<expr><name>a</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>a</name> <operator>+=</operator> <name>b</name></expr> ;</expr_stmt></block></then></if>
	<return>return <expr><name>a</name></expr> ;</return>
}</block></function>

<comment type="line" format="doxygen">///////////////////////////////////////////////////////////////////////////////</comment>




<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	
	<expr_stmt><expr><name>IOS</name></expr> ;</expr_stmt>

	<expr_stmt><expr><call><name>rll</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
	<expr_stmt><expr><call><name>rs</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

	<decl_stmt><decl><type><name>ll</name></type> <name>lf</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>rt</name><init>=<expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
	<macro><name>ff</name> <argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>l</argument>)</argument_list></macro> <block>{
		<if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>lf</name><operator>++</operator></expr> ;</expr_stmt></block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><name>rt</name><operator>++</operator></expr> ;</expr_stmt></block></else></if>
	}</block>

	<if>if <condition>(<expr><name>lf</name> <operator>!=</operator> <name>rt</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="number">0</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr> ;</expr_stmt>
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr> ;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr> ;</return>
	}</block></then></if>

	<decl_stmt><decl><type><name>ll</name></type> <name>A</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>i_</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>j_</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
	<macro><name>ff</name> <argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>l</argument>)</argument_list></macro> <block>{
		<macro><name>ff</name> <argument_list>(<argument>j</argument>,<argument>i</argument>,<argument>l</argument>)</argument_list></macro> <block>{
			<expr_stmt><expr><call><name>swap</name> <argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
			<comment type="line">// cout &lt;&lt; i &lt;&lt; " " &lt;&lt; j &lt;&lt; endl ;</comment>
			<comment type="line">// cout &lt;&lt; s &lt;&lt; endl ;</comment>
			<decl_stmt><decl><type><name>ll</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
			<decl_stmt><decl><type><name>ll</name></type> <name>m</name> <init>= <expr><name>inf</name></expr></init></decl> ;</decl_stmt>
			<decl_stmt><decl><type><name>ll</name></type> <name>ind</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
			<macro><name>ff</name> <argument_list>(<argument>k</argument>,<argument><literal type="number">0</literal></argument>,<argument>l</argument>)</argument_list></macro> <block>{
				<if>if <condition>(<expr><name><name>s</name><index>[<expr><name>k</name></expr>]</index></name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>c</name><operator>++</operator></expr> ;</expr_stmt></block></then>
				<else>else <block type="pseudo"><expr_stmt><expr><name>c</name><operator>--</operator></expr> ;</expr_stmt></block></else></if>
				<comment type="line">// cout &lt;&lt; c &lt;&lt; " " ;</comment>
				<if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <name>m</name></expr>)</condition><then> <block>{
					<expr_stmt><expr><name>ind</name> <operator>=</operator> <name>k</name></expr> ;</expr_stmt>
					<expr_stmt><expr><name>m</name> <operator>=</operator> <name>c</name></expr> ;</expr_stmt>
				}</block></then></if>
			}</block>
			<comment type="line">// cout &lt;&lt; endl;</comment>
			<comment type="line">// cout &lt;&lt; m &lt;&lt; " " &lt;&lt; ind &lt;&lt; endl ;</comment>
			<decl_stmt><decl><type><name>string</name></type> <name>s1</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>substr</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>ind</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
			<decl_stmt><decl><type><name>string</name></type> <name>s2</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>substr</name></name><argument_list>(<argument><expr><name>ind</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

			<decl_stmt><decl><type><name>string</name></type> <name>s_</name> <init>= <expr><name>s2</name><operator>+</operator><name>s1</name></expr></init></decl> ;</decl_stmt>
			<comment type="line">// cout &lt;&lt; s_ &lt;&lt; endl ;</comment>
			<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
			<decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
			<macro><name>ff</name> <argument_list>(<argument>k</argument>,<argument><literal type="number">0</literal></argument>,<argument>l</argument>)</argument_list></macro> <block>{
				<if>if <condition>(<expr><name><name>s_</name><index>[<expr><name>k</name></expr>]</index></name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>c</name><operator>++</operator></expr> ;</expr_stmt></block></then>
				<else>else <block type="pseudo"><expr_stmt><expr><name>c</name><operator>--</operator></expr> ;</expr_stmt></block></else></if>
				<if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ans</name><operator>++</operator></expr> ;</expr_stmt></block></then></if>
			}</block>
			<comment type="line">// cout &lt;&lt; ans &lt;&lt; endl &lt;&lt; endl ;</comment>

			<if>if <condition>(<expr><name>A</name><operator>&lt;</operator><name>ans</name></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>A</name> <operator>=</operator> <name>ans</name></expr> ;</expr_stmt>
				<expr_stmt><expr><name>i_</name> <operator>=</operator> <name>i</name></expr> ;</expr_stmt>
				<expr_stmt><expr><name>j_</name> <operator>=</operator> <name>j</name></expr> ;</expr_stmt>
			}</block></then></if>

			<expr_stmt><expr><call><name>swap</name> <argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
		}</block>
	}</block>

	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>A</name> <operator>&lt;&lt;</operator> <name>endl</name></expr> ;</expr_stmt>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>i_</name><operator>+</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name>j_</name><operator>+</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr> ;</expr_stmt>
	
}</block></function></unit>
