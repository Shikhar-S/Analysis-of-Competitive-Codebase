<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29177813_63006479.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr><literal type="number">1005</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>qzh</name><index>[<expr><literal type="number">1005</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>q</name><index>[<expr><literal type="number">2005</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name>head</name></decl>,<decl><type ref="prev"/><name>tail</name></decl>,<decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<function><specifier>inline</specifier> <type><name>int</name></type> <name>cal</name><parameter_list>()</parameter_list>
<block>{
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name><operator>*</operator><literal type="number">2</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><name><name>qzh</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>qzh</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><name>head</name><operator>=</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name>tail</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rtn</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<while>while<condition>(<expr><name>head</name><operator>&lt;=</operator><name>tail</name><operator>&amp;&amp;</operator><name><name>qzh</name><index>[<expr><name><name>q</name><index>[<expr><name>tail</name></expr>]</index></name></expr>]</index></name><operator>&gt;</operator><name><name>qzh</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block type="pseudo"><expr_stmt><expr><operator>--</operator><name>tail</name></expr>;</expr_stmt></block></while>
		<expr_stmt><expr><name><name>q</name><index>[<expr><operator>++</operator><name>tail</name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt>
	}</block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name><operator>*</operator><literal type="number">2</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<while>while<condition>(<expr><name>head</name><operator>&lt;=</operator><name>tail</name><operator>&amp;&amp;</operator><name><name>qzh</name><index>[<expr><name><name>q</name><index>[<expr><name>tail</name></expr>]</index></name></expr>]</index></name><operator>&gt;</operator><name><name>qzh</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block type="pseudo"><expr_stmt><expr><operator>--</operator><name>tail</name></expr>;</expr_stmt></block></while>
		<while>while<condition>(<expr><name>head</name><operator>&lt;=</operator><name>tail</name><operator>&amp;&amp;</operator><name><name>q</name><index>[<expr><name>head</name></expr>]</index></name><operator>&lt;=</operator><name>i</name><operator>-</operator><name>n</name></expr>)</condition> <block type="pseudo"><expr_stmt><expr><operator>++</operator><name>head</name></expr>;</expr_stmt></block></while>
		<expr_stmt><expr><name><name>q</name><index>[<expr><operator>++</operator><name>tail</name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>head</name><operator>&lt;=</operator><name>tail</name><operator>&amp;&amp;</operator><name><name>qzh</name><index>[<expr><name><name>q</name><index>[<expr><name>head</name></expr>]</index></name></expr>]</index></name><operator>-</operator><name><name>qzh</name><index>[<expr><name>i</name><operator>-</operator><name>n</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal><operator>&amp;&amp;</operator><name><name>qzh</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>qzh</name><index>[<expr><name>i</name><operator>-</operator><name>n</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><operator>++</operator><name>rtn</name></expr>;</expr_stmt></block></then></if>
	}</block></for>
	<return>return <expr><name>rtn</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>argv</name></decl></parameter>)</parameter_list> <block>{
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<decl_stmt><decl><type><name>char</name></type> <name>x</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>x</name></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>x</name><operator>==</operator><literal type="char">'('</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then>
		<else>else
			<block type="pseudo"><expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
	}</block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name><operator>*</operator><literal type="number">2</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>a</name><index>[<expr><name>i</name><operator>-</operator><name>n</name></expr>]</index></name></expr>;</expr_stmt></block></for>
	<decl_stmt><decl><type><name>int</name></type> <name>ans</name><init>=<expr><call><name>cal</name><argument_list>()</argument_list></call></expr></init></decl>,<decl><type ref="prev"/><name>l</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>r</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
		<block>{
			<if>if<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then>
				<block type="pseudo"><continue>continue;</continue></block></then></if>
			<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name><operator>+</operator><name>n</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>a</name><index>[<expr><name>j</name><operator>+</operator><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>t</name><init>=<expr><call><name>cal</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if<condition>(<expr><name>t</name><operator>&gt;</operator><name>ans</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ans</name><operator>=</operator><name>t</name></expr><operator>,</operator><expr><name>l</name><operator>=</operator><name>i</name></expr><operator>,</operator><expr><name>r</name><operator>=</operator><name>j</name></expr>;</expr_stmt></block></then></if>
			<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name><operator>+</operator><name>n</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>a</name><index>[<expr><name>j</name><operator>+</operator><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
	}</block></for>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name>l</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name>r</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
