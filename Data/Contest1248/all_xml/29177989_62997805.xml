<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29177989_62997805.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<struct>struct <name>_</name> <block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
</public>}</block> <decl><name><name>a</name><index>[<expr><literal type="number">100010</literal></expr>]</index></name></decl>;</struct>
<struct>struct <name>cmp</name> <block>{<public type="default">
	<function type="operator"><type><name>bool</name></type> <name>operator<name>()</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>_</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>_</name><modifier>&amp;</modifier></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><name><name>a</name><operator>.</operator><name>k</name></name> <operator>&lt;</operator> <name><name>b</name><operator>.</operator><name>k</name></name></expr>;</return>
	}</block></function>
</public>}</block>;</struct>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>ans</name><index>[<expr><literal type="number">100010</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>cur</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>queue</name> <argument_list type="generic">&lt; <argument><expr><name>_</name></expr></argument> &gt;</argument_list></name></name></type> <name>q</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>set</name> <argument_list type="generic">&lt; <argument><expr><name>_</name></expr></argument>, <argument><expr><name>cmp</name></expr></argument> &gt;</argument_list></name></name></type> <name>s1</name></decl>, <decl><type ref="prev"/><name>s2</name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>pop</name><parameter_list>()</parameter_list> <block>{
	<decl_stmt><decl><type><name>_</name></type> <name>u</name> <init>= <expr><call><name><name>q</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<comment type="line">// printf("pop %d\n", u.k);</comment>
	<expr_stmt><expr><call><name><name>s1</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>ans</name><index>[<expr><name><name>u</name><operator>.</operator><name>k</name></name></expr>]</index></name></expr>;</expr_stmt>
	<if>if <condition>(<expr><operator>!</operator><call><name><name>q</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>ans</name><index>[<expr><call><name><name>q</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call><operator>.</operator><name>k</name></expr>]</index></name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name><name>max</name> <argument_list type="generic">&lt; <argument><expr><name>ll</name></expr></argument> &gt;</argument_list></name></name> <argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><call><name><name>q</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call><operator>.</operator><name>t</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>p</name></expr>;</expr_stmt></block></then></if>
}</block></function>
<function><type><name>void</name></type> <name>push</name><parameter_list>()</parameter_list> <block>{
	<while>while <condition>(<expr><operator>!</operator><call><name><name>s2</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>s1</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>s2</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>k</name> <operator>&lt;</operator> <call><name><name>s1</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>k</name><operator>)</operator></expr>)</condition> <block>{
		<comment type="line">// printf("push : %d\n", s2.begin()-&gt;k);</comment>
		<if>if <condition>(<expr><call><name><name>q</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>ans</name><index>[<expr><call><name><name>s2</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>k</name></expr>]</index></name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name><name>max</name> <argument_list type="generic">&lt; <argument><expr><name>ll</name></expr></argument> &gt;</argument_list></name></name> <argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><call><name><name>s2</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>t</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>p</name></expr>;</expr_stmt></block></then></if>
		<expr_stmt><expr><call><name><name>s1</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><operator>*</operator><call><name><name>s2</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name><name>q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><operator>*</operator><call><name><name>s2</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name><name>s2</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>s2</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></while>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>std</name><operator>::</operator><name>cin</name></name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>p</name></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
		<expr_stmt><expr><name><name>std</name><operator>::</operator><name>cin</name></name> <operator>&gt;&gt;</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>t</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>k</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>sort</name></name><argument_list>(<argument><expr><name>a</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>a</name> <operator>+</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>_</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>_</name><modifier>&amp;</modifier></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><name><name>a</name><operator>.</operator><name>t</name></name> <operator>&lt;</operator> <name><name>b</name><operator>.</operator><name>t</name></name> <operator>||</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>t</name></name> <operator>==</operator> <name><name>b</name><operator>.</operator><name>t</name></name> <operator>&amp;&amp;</operator> <name><name>a</name><operator>.</operator><name>k</name></name> <operator>&lt;</operator> <name><name>b</name><operator>.</operator><name>k</name></name><operator>)</operator></expr>;</return>
	}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
		<comment type="line">// printf("considering #%d\n", a[i].k);</comment>
		<while>while <condition>(<expr><operator>!</operator><call><name><name>q</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>t</name> <operator>&gt;</operator> <name><name>ans</name><index>[<expr><call><name><name>q</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call><operator>.</operator><name>k</name></expr>]</index></name></expr>)</condition> <block>{
			<expr_stmt><expr><call><name>pop</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>push</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></while>
		<expr_stmt><expr><call><name><name>s2</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>push</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<while>while <condition>(<expr><operator>!</operator><call><name><name>q</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><call><name><name>s2</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block type="pseudo"><expr_stmt><expr><call><name>push</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name>pop</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="string">"\n "</literal><index>[<expr><name>i</name> <operator>!=</operator> <name>n</name></expr>]</index></expr>;</expr_stmt></block></for>
}</block></function></unit>
