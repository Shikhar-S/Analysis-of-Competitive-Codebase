<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29149457_63008045.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<function_decl><type><name>ll</name></type> <name>gcdd</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>ll</name> <modifier>*</modifier></type><name>fi</name></decl></parameter>, <parameter><decl><type><name>ll</name> <modifier>*</modifier></type><name>si</name></decl></parameter>)</parameter_list>;</function_decl> 
<function><type><name>ll</name></type> <name>inverse</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>m</name></decl></parameter>)</parameter_list> 
<block>{ 
    <decl_stmt><decl><type><name>ll</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>g</name> <init>= <expr><call><name>gcdd</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
    <return>return <expr><operator>(</operator><name>x</name><operator>%</operator><name>m</name> <operator>+</operator> <name>m</name><operator>)</operator> <operator>%</operator> <name>m</name></expr>;</return> 
}</block></function> 
<function><type><name>ll</name></type> <name>div</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>m</name></decl></parameter>)</parameter_list> 
<block>{ 
    <expr_stmt><expr><name>a</name> <operator>=</operator> <name>a</name> <operator>%</operator> <name>m</name></expr>;</expr_stmt> 
    <decl_stmt><decl><type><name>ll</name></type> <name>inv</name> <init>= <expr><call><name>inverse</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
    <return>return <expr><operator>(</operator><operator>(</operator><name>inv</name> <operator>*</operator> <name>a</name><operator>)</operator> <operator>%</operator> <name>m</name><operator>)</operator></expr>;</return> 
}</block></function> 
<function><type><name>ll</name></type> <name>gcdd</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>ll</name> <modifier>*</modifier></type><name>fi</name></decl></parameter>, <parameter><decl><type><name>ll</name> <modifier>*</modifier></type><name>si</name></decl></parameter>)</parameter_list> 
<block>{
    <if>if <condition>(<expr><name>f</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> 
    <block>{ 
        <expr_stmt><expr><operator>*</operator><name>fi</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><operator>*</operator><name>si</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
        <return>return <expr><name>s</name></expr>;</return> 
    }</block></then></if> 
  
    <decl_stmt><decl><type><name>ll</name></type> <name>xx</name></decl>, <decl><type ref="prev"/><name>yy</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>g</name> <init>= <expr><call><name>gcdd</name><argument_list>(<argument><expr><name>s</name><operator>%</operator><name>f</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>yy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
    <expr_stmt><expr><operator>*</operator><name>fi</name> <operator>=</operator> <name>yy</name> <operator>-</operator> <operator>(</operator><name>s</name><operator>/</operator><name>f</name><operator>)</operator> <operator>*</operator> <name>xx</name></expr>;</expr_stmt> 
    <expr_stmt><expr><operator>*</operator><name>si</name> <operator>=</operator> <name>xx</name></expr>;</expr_stmt> 
    <return>return <expr><name>g</name></expr>;</return> 
}</block></function> 

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>arr</name><argument_list>(<argument><expr><literal type="number">100005</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    
    <expr_stmt><expr><name><name>arr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">100005</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>arr</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>*</operator><name>i</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>%=</operator><name>mod</name></expr>;</expr_stmt>
    }</block></for>
    <decl_stmt><decl><type><name>ll</name></type> <name>sol</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>l</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>m</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>kk</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name><operator>/</operator><literal type="number">2</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><name>kk</name><operator>=</operator><name>n</name><operator>-</operator><name>i</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>j</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>l</name><operator>=</operator><name><name>arr</name><index>[<expr><name>kk</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>l</name><operator>=</operator><call><name>div</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name><name>arr</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>l</name><operator>=</operator><call><name>div</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name><name>arr</name><index>[<expr><name>kk</name><operator>-</operator><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>sol</name><operator>+=</operator><literal type="number">2</literal><operator>*</operator><name>l</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>sol</name><operator>%=</operator><name>mod</name></expr>;</expr_stmt>

    }</block></for>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>m</name><operator>/</operator><literal type="number">2</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><name>kk</name><operator>=</operator><name>m</name><operator>-</operator><name>i</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>j</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>l</name><operator>=</operator><name><name>arr</name><index>[<expr><name>kk</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>l</name><operator>=</operator><call><name>div</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name><name>arr</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>l</name><operator>=</operator><call><name>div</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name><name>arr</name><index>[<expr><name>kk</name><operator>-</operator><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>sol</name><operator>+=</operator><literal type="number">2</literal><operator>*</operator><name>l</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>sol</name><operator>%=</operator><name>mod</name></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><name>sol</name><operator>%=</operator><name>mod</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>sol</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
