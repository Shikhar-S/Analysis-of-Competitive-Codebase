<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29178800_63007834.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>int</name></type> <name><name>b</name><index>[<expr><literal type="number">501</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>s</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>s</name><operator>=</operator><literal type="char">'@'</literal><operator>+</operator><name>s</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name>p</name><init>=<expr><call><name>make_pair</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <for>for<control>(<init><expr><name>j</name><operator>=</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>c</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>d</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>string</name></type> <name>r</name><init>=<expr><name>s</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>r</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>r</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name>stack</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name>st</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
            <for>for<control>(<init><expr><name>k</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>k</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
            <block>{
                <if>if<condition>(<expr><name><name>r</name><index>[<expr><name>k</name></expr>]</index></name><operator>==</operator><literal type="char">')'</literal></expr>)</condition><then>
                <block>{
                    <if>if<condition>(<expr><call><name><name>st</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                    <block>{
                        <expr_stmt><expr><name>d</name><operator>++</operator></expr>;</expr_stmt>
                        <expr_stmt><expr><name>c</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
                    }</block></then>
                    <else>else
                    <block>{
                        <expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <if>if<condition>(<expr><call><name><name>st</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                        <block>{
                            <expr_stmt><expr><name>c</name><operator>++</operator></expr>;</expr_stmt>
                        }</block></then></if>
                    }</block></else></if>
                }</block></then>
                <else>else
                <block>{
                    <expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
                <expr_stmt><expr><name><name>b</name><index>[<expr><name>k</name></expr>]</index></name><operator>=</operator><name>c</name></expr>;</expr_stmt>
            }</block></for>
            <decl_stmt><decl><type><name>int</name></type> <name>g</name><init>=<expr><call><name><name>st</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>anss</name><init>=<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>e</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <while>while<condition>(<expr><operator>!</operator><call><name><name>st</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{
                <expr_stmt><expr><name>e</name><operator>++</operator></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>g</name><init>=<expr><call><name><name>st</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>anss</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>anss</name></expr></argument>,<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></while>
            <expr_stmt><expr><name>c</name><operator>=</operator><name><name>b</name><index>[<expr><name>anss</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>e</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>c</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
            <if>if<condition>(<expr><name>g</name><operator>==</operator><name>d</name></expr>)</condition><then>
            <block>{
                <if>if<condition>(<expr><name>ans</name><operator>&lt;</operator><name>c</name></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name>ans</name><operator>=</operator><name>c</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>p</name><operator>=</operator><call><name>make_pair</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
        }</block></for>
    }</block></for>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>p</name><operator>.</operator><name>first</name></name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name><name>p</name><operator>.</operator><name>second</name></name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
}</block></function>
</unit>
