<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29176712_63004851.cpp"><cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_MSC_VER</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_CRT_SECURE_NO_WARNINGS</name></cpp:macro></cpp:define>
<cpp:include>#  <cpp:directive>include</cpp:directive> <cpp:file>&lt;intrin.h&gt;</cpp:file></cpp:include>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>__builtin_popcount</name></cpp:macro> <cpp:value>__popcnt</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_USE_MATH_DEFINES</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;list&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;functional&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WISHES</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BACK</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<struct>struct <name>Ev</name>
<block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>person</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>

	<function type="operator"><type><name>bool</name></type> <name>operator <name>&lt;</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Ev</name><modifier>&amp;</modifier></type> <name>other</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
	<block>{
		<return>return <expr><call><name><name>std</name><operator>::</operator><name>tie</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>person</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name><name>std</name><operator>::</operator><name>tie</name></name><argument_list>(<argument><expr><name><name>other</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>other</name><operator>.</operator><name>person</name></name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
</public>}</block>;</struct>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if> 
	<expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"input.txt"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"output.txt"</literal></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>p</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>p</name></expr>;</expr_stmt>


	<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>, <argument><expr><name>Ev</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>events</name></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>t</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>Ev</name></type> <name>v</name></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>v</name><operator>.</operator><name>person</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>v</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>WISHES</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>events</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><block>{ <expr><name>t</name></expr>, <expr><name>v</name></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>

	<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>queue</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>wishing</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></type> <name>ans</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>free_from</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<while>while <condition>(<expr><call><name><name>events</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{
		<decl_stmt><decl><type><name>auto</name></type> <name>v</name> <init>= <expr><operator>*</operator><call><name><name>events</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>events</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>auto</name></type> <name>ev</name> <init>= <expr><name><name>v</name><operator>.</operator><name>second</name></name></expr></init></decl>;</decl_stmt>

		<if>if <condition>(<expr><name><name>ev</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>WISHES</name></expr>)</condition><then>
		<block>{

			<if>if <condition>(<expr><call><name><name>queue</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><operator>*</operator><call><name><name>queue</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>&gt;</operator> <name><name>ev</name><operator>.</operator><name>person</name></name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><call><name><name>queue</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name><name>ev</name><operator>.</operator><name>person</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>time_start</name> <init>= <expr><call><name>max</name><argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>first</name></name></expr></argument>, <argument><expr><name>free_from</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>time_end</name> <init>= <expr><name>time_start</name> <operator>+</operator> <name>p</name></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name>free_from</name> <operator>=</operator> <name>time_end</name></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>Ev</name></type> <name>evv</name></decl>;</decl_stmt>
				<expr_stmt><expr><name><name>evv</name><operator>.</operator><name>person</name></name> <operator>=</operator> <name><name>ev</name><operator>.</operator><name>person</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>evv</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>BACK</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>events</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><block>{ <expr><name>time_end</name></expr>, <expr><name>evv</name></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then>
			<else>else
			<block>{
				<expr_stmt><expr><call><name><name>wishing</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name><name>ev</name><operator>.</operator><name>person</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>

		}</block></then>
		<else>else
		<block>{
			<comment type="line">// back</comment>
			<expr_stmt><expr><name><name>ans</name><index>[<expr><name><name>ev</name><operator>.</operator><name>person</name></name></expr>]</index></name> <operator>=</operator> <name><name>v</name><operator>.</operator><name>first</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>queue</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name><name>ev</name><operator>.</operator><name>person</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if>if <condition>(<expr><call><name><name>wishing</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
				<block type="pseudo"><continue>continue;</continue></block></then></if>
			<comment type="line">// push one wishing</comment>
			<if>if <condition>(<expr><call><name><name>queue</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><operator>*</operator><call><name><name>wishing</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>&lt;</operator> <operator>*</operator><call><name><name>queue</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
			<block>{
				<decl_stmt><decl><type><name>int</name></type> <name>person</name> <init>= <expr><operator>*</operator><call><name><name>wishing</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>wishing</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>person</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>queue</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>person</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>time_start</name> <init>= <expr><call><name>max</name><argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>first</name></name></expr></argument>, <argument><expr><name>free_from</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>time_end</name> <init>= <expr><name>time_start</name> <operator>+</operator> <name>p</name></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name>free_from</name> <operator>=</operator> <name>time_end</name></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>Ev</name></type> <name>evv</name></decl>;</decl_stmt>
				<expr_stmt><expr><name><name>evv</name><operator>.</operator><name>person</name></name> <operator>=</operator> <name>person</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>evv</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>BACK</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>events</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><block>{ <expr><name>time_end</name></expr>, <expr><name>evv</name></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></else></if>

	}</block></while>

	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>ans</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt>
	}</block></for>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
