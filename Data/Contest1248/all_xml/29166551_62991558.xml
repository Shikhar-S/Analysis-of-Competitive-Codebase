<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29166551_62991558.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bits/stdc++.h"</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<using>using <name>lli</name> <init>= <type><name>long</name> <name>long</name> <name>int</name></type></init>;</using>
<using>using <name>vb</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>vc</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>vd</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>double</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>vi</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type></init>;</using> <using>using <name>vvi</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vi</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>vlli</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>lli</name></expr></argument>&gt;</argument_list></name></type></init>;</using> <using>using <name>vvlli</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vlli</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>pi</name> <init>= <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type></init>;</using> <using>using <name>plli</name> <init>= <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>lli</name></expr></argument>, <argument><expr><name>lli</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fori</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = 0; i &lt; x; ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>forj</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int j = 0; j &lt; x; ++j)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fork</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(lli k = 0; k &lt; x; ++k)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>forl</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(lli l = 0; l &lt; x; ++l)</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>readc</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>&amp;</modifier></type><name>q</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function> <function><type><name>char</name></type> <name>readc</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>char</name></type> <name>q</name></decl>;</decl_stmt> <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>q</name></expr>;</return> }</block></function>
<function><type><name>void</name></type> <name>readint</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>&amp;</modifier></type><name>q</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function> <function><type><name>int</name></type> <name>readint</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>q</name></decl>;</decl_stmt> <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>q</name></expr>;</return> }</block></function>
<function><type><name>void</name></type> <name>readlong</name><parameter_list>(<parameter><decl><type><name>lli</name> <modifier>&amp;</modifier></type><name>q</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function> <function><type><name>lli</name></type> <name>readlong</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>lli</name></type> <name>q</name></decl>;</decl_stmt> <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>q</name></expr>;</return> }</block></function>
<function><type><name>void</name></type> <name>readdbl</name><parameter_list>(<parameter><decl><type><name>double</name> <modifier>&amp;</modifier></type><name>q</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lf"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function> <function><type><name>double</name></type> <name>readdbl</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>double</name></type> <name>q</name></decl>;</decl_stmt> <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lf"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>q</name></expr>;</return> }</block></function>
<function><type><name>void</name></type> <name>printint</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>q</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function> <function><type><name>void</name></type> <name>printlong</name><parameter_list>(<parameter><decl><type><name>lli</name></type> <name>q</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
<function><type><name>void</name></type> <name>printdbl</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>q</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p</name> <init>= <expr><literal type="number">6</literal></expr></init></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%.*lf"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
<function><type><name>void</name></type> <name>readln</name><parameter_list>()</parameter_list> <block>{ <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function> <function><type><name>void</name></type> <name>println</name><parameter_list>()</parameter_list> <block>{ <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function> <function><type><name>void</name></type> <name>printsp</name><parameter_list>()</parameter_list> <block>{ <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
<function><type><name>void</name></type> <name>print</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>q</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name>printint</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function> <function><type><name>void</name></type> <name>print</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>q</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name>printlong</name><argument_list>(<argument><expr><operator>(</operator><name>lli</name><operator>)</operator><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function> <function><type><name>void</name></type> <name>print</name><parameter_list>(<parameter><decl><type><name>lli</name></type> <name>q</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name>printlong</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
<function><type><name>void</name></type> <name>print</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>q</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name>printdbl</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function><function><type><name>void</name></type> <name>print</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
<function><type><name>void</name></type> <name>print</name><parameter_list>(<parameter><decl><type><name>pi</name></type> <name>q</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><name><name>q</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>printsp</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><name><name>q</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function> <function><type><name>void</name></type> <name>print</name><parameter_list>(<parameter><decl><type><name>vi</name></type> <name>q</name></decl></parameter>)</parameter_list> <block>{ <macro><name>fori</name><argument_list>(<argument>q.size()</argument>)</argument_list></macro> <block>{ <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><name><name>q</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>printsp</name><argument_list>()</argument_list></call></expr>;</expr_stmt> }</block> }</block></function>
<function><type><name>void</name></type> <name>print</name><parameter_list>(<parameter><decl><type><name>vlli</name></type> <name>q</name></decl></parameter>)</parameter_list> <block>{ <macro><name>fori</name><argument_list>(<argument>q.size()</argument>)</argument_list></macro> <block>{ <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><name><name>q</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>printsp</name><argument_list>()</argument_list></call></expr>;</expr_stmt> }</block> }</block></function> <function><type><name>void</name></type> <name>print</name><parameter_list>(<parameter><decl><type><name>vd</name></type> <name>q</name></decl></parameter>)</parameter_list> <block>{ <macro><name>fori</name><argument_list>(<argument>q.size()</argument>)</argument_list></macro> <block>{ <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><name><name>q</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>printsp</name><argument_list>()</argument_list></call></expr>;</expr_stmt> }</block> }</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>println</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>q</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>println</name><argument_list>()</argument_list></call></expr>;</expr_stmt> }</block></function>

<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>T</name></type> <name>maxim</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>first</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>second</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><ternary><condition><expr><operator>(</operator><name>first</name> <operator>&gt;</operator> <name>second</name><operator>)</operator></expr> ?</condition><then> <expr><name>first</name></expr> </then><else>: <expr><name>second</name></expr></else></ternary></expr>;</return> }</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>T</name></type> <name>maxim</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>first</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>second</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>third</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>mndlim</name><argument_list>(<argument><expr><call><name>maxim</name><argument_list>(<argument><expr><name>first</name></expr></argument>, <argument><expr><name>second</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>third</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>T</name></type> <name>minim</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>first</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>second</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><ternary><condition><expr><operator>(</operator><name>first</name> <operator>&lt;</operator> <name>second</name><operator>)</operator></expr> ?</condition><then> <expr><name>first</name></expr> </then><else>: <expr><name>second</name></expr></else></ternary></expr>;</return> }</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>T</name></type> <name>minim</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>first</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>second</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>third</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>minim</name><argument_list>(<argument><expr><call><name>minim</name><argument_list>(<argument><expr><name>first</name></expr></argument>, <argument><expr><name>second</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>third</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>T</name></type> <name>middle</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>first</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>second</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>third</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name>first</name> <operator>+</operator> <name>second</name> <operator>+</operator> <name>third</name> <operator>-</operator> <call><name>maxim</name><argument_list>(<argument><expr><name>first</name></expr></argument>, <argument><expr><name>second</name></expr></argument>, <argument><expr><name>third</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>minim</name><argument_list>(<argument><expr><name>first</name></expr></argument>, <argument><expr><name>second</name></expr></argument>, <argument><expr><name>third</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>T</name></type> <name>abs</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>arg</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><ternary><condition><expr><name>arg</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><name>arg</name></expr> </then><else>: <expr><name>arg</name></expr></else></ternary></expr>;</return> }</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>lli</name></type> <name>modulo</name> <init>= <expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lli</name></type> <name><name>phi</name><index>[<expr><literal type="number">100010</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lli</name></type> <name><name>sum</name><index>[<expr><literal type="number">100010</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>readint</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><call><name>readint</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>phi</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>phi</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sum</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <call><name>maxim</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
    <expr_stmt><expr><name><name>phi</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>phi</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>phi</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name><name>phi</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <name>modulo</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>phi</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-=</operator> <name>modulo</name></expr>;</expr_stmt></block></then></if>
    <expr_stmt><expr><name><name>sum</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>sum</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>phi</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name><name>sum</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&gt;=</operator> <name>modulo</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>sum</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-=</operator> <name>modulo</name></expr>;</expr_stmt></block></then></if>
  }</block></for>

  <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>phi</name><index>[<expr><name>m</name></expr>]</index></name> <operator>+</operator> <name><name>sum</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>%</operator> <name>modulo</name><operator>)</operator> <operator>*</operator> <literal type="number">2</literal><operator>)</operator> <operator>%</operator> <name>modulo</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
