<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29143461_62987679.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>

<function><specifier>inline</specifier> <type><name>int</name></type> <name>read</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>int</name></type> <name>x</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>f</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name>p</name><init>=<expr><call><name>getchar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block>{
		<if>if<condition>(<expr><name>p</name><operator>==</operator><literal type="char">'-'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>f</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
		<expr_stmt><expr><name>p</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></while> 
	<while>while<condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>x</name><operator>=</operator><operator>(</operator><name>x</name><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator><operator>+</operator><operator>(</operator><name>x</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><operator>(</operator><name>p</name><operator>^</operator><literal type="number">48</literal><operator>)</operator></expr><operator>,</operator><expr><name>p</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
	<return>return <expr><name>x</name><operator>*</operator><name>f</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name><init>=<expr><literal type="number">1e5</literal><operator>+</operator><literal type="number">5</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name><name>a</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name>ans1</name></decl>,<decl><type ref="prev"/><name>ans2</name></decl>,<decl><type ref="prev"/><name>ans</name></decl>;</decl_stmt>

<function><specifier>inline</specifier> <type><name>bool</name></type> <name>cmp</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
	<return>return <expr><name>a</name><operator>&gt;</operator><name>b</name></expr>;</return>
}</block></function>

<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><name>n</name><operator>=</operator><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>a</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>a</name><operator>+</operator><literal type="number">1</literal><operator>+</operator><name>n</name></expr></argument>,<argument><expr><name>cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if<condition>(<expr><name>n</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then><block>{
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><operator>(</operator><name>n</name><operator>/</operator><literal type="number">2</literal><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>ans1</name><operator>+=</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><operator>(</operator><name>n</name><operator>/</operator><literal type="number">2</literal><operator>)</operator><operator>+</operator><literal type="number">2</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>ans2</name><operator>+=</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
	}</block></then>
	<else>else<block>{
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><operator>(</operator><name>n</name><operator>/</operator><literal type="number">2</literal><operator>)</operator></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>ans1</name><operator>+=</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><operator>(</operator><name>n</name><operator>/</operator><literal type="number">2</literal><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>ans2</name><operator>+=</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
	}</block></else></if>
	<expr_stmt><expr><name>ans</name><operator>=</operator><name>ans1</name><operator>*</operator><name>ans1</name><operator>+</operator><name>ans2</name><operator>*</operator><name>ans2</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
