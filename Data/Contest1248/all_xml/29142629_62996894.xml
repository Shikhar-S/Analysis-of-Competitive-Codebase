<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29142629_62996894.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAXN</name><init>=<expr><literal type="number">100000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>long</name> <name>long</name></type> <name>ONE</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MOD</name><init>=<expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>N</name></decl>,<decl><type ref="prev"/><name>M</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>f</name><index>[<expr><name>MAXN</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>e</name><index>[<expr><name>MAXN</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>long</name> <name>long</name></type> <name>C</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{
	<if>if<condition>(<expr><name>x</name><operator>&lt;</operator><name>y</name><operator>||</operator><name>y</name><operator>&lt;</operator><literal type="number">0</literal><operator>||</operator><name>x</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
	<return>return <expr><operator>(</operator><name><name>f</name><index>[<expr><name>x</name></expr>]</index></name><operator>*</operator><operator>(</operator><operator>(</operator><name><name>e</name><index>[<expr><name>y</name></expr>]</index></name><operator>*</operator><name><name>e</name><index>[<expr><name>x</name><operator>-</operator><name>y</name></expr>]</index></name><operator>)</operator><operator>%</operator><name>MOD</name><operator>)</operator><operator>)</operator><operator>%</operator><name>MOD</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>Ans</name></decl>;</decl_stmt>
<function><type><name>LL</name></type> <name>quick_Pow</name><parameter_list>(<parameter><decl><type><name>LL</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>LL</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{
	<if>if<condition>(<expr><name>y</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
	<if>if<condition>(<expr><name>y</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><name>x</name></expr>;</return></block></then></if>
	<if>if<condition>(<expr><name>y</name><operator>%</operator><literal type="number">2</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><operator>(</operator><name>x</name><operator>*</operator><call><name>quick_Pow</name><argument_list>(<argument><expr><operator>(</operator><name>x</name><operator>*</operator><name>x</name><operator>)</operator><operator>%</operator><name>MOD</name></expr></argument>,<argument><expr><name>y</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>%</operator><name>MOD</name></expr>;</return></block></then></if>
	<return>return <expr><call><name>quick_Pow</name><argument_list>(<argument><expr><operator>(</operator><name>x</name><operator>*</operator><name>x</name><operator>)</operator><operator>%</operator><name>MOD</name></expr></argument>,<argument><expr><name>y</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>Prepare</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name><name>e</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>MAXN</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><operator>(</operator><name><name>f</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>*</operator><name>i</name><operator>)</operator><operator>%</operator><name>MOD</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><call><name>quick_Pow</name><argument_list>(<argument><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name>MOD</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
}</block></function>
<function><type><name>void</name></type> <name>Solve</name><parameter_list>()</parameter_list><block>{
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>M</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<comment type="block">/*i==x==y*/</comment>
		<expr_stmt><expr><name>Ans</name><operator>=</operator><operator>(</operator><name>Ans</name><operator>+</operator><literal type="number">2</literal><operator>*</operator><call><name>C</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name>i</name></expr></argument>,<argument><expr><name>M</name><operator>-</operator><literal type="number">2</literal><operator>*</operator><name>i</name></expr></argument>)</argument_list></call><operator>)</operator><operator>%</operator><name>MOD</name></expr>;</expr_stmt>
		<comment type="block">/*i==x==y-1*/</comment>
		<expr_stmt><expr><name>Ans</name><operator>=</operator><operator>(</operator><name>Ans</name><operator>+</operator><call><name>C</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>M</name><operator>-</operator><literal type="number">2</literal><operator>*</operator><name>i</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>%</operator><name>MOD</name></expr>;</expr_stmt>
		<comment type="block">/*i==x==y+1*/</comment>
		<expr_stmt><expr><name>Ans</name><operator>=</operator><operator>(</operator><name>Ans</name><operator>+</operator><call><name>C</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name>i</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>M</name><operator>-</operator><literal type="number">2</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>%</operator><name>MOD</name></expr>;</expr_stmt>
	}</block></for>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name>Prepare</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>N</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>N</name></expr></argument>,<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>Solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>,<argument><expr><operator>(</operator><name>Ans</name><operator>-</operator><literal type="number">2</literal><operator>+</operator><name>MOD</name><operator>)</operator><operator>%</operator><name>MOD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function></unit>
