<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29141134_62987004.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pet</name></cpp:macro> <cpp:value>pair&lt;int,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>one</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>two</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">1000001</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ll</name></type> <name><name>factorialNumInverse</name><index>[<expr><name>N</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt> 
  
<comment type="line">// array to precompute inverse of 1! to N! </comment>
<decl_stmt><decl><type><name>ll</name></type> <name><name>naturalNumInverse</name><index>[<expr><name>N</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt> 
  
<comment type="line">// array to store factorial of first N numbers </comment>
<decl_stmt><decl><type><name>ll</name></type> <name><name>fact</name><index>[<expr><name>N</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt> 
  
<comment type="line">// Function to precompute inverse of numbers </comment>
<function><type><name>void</name></type> <name>InverseofNumber</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>p</name></decl></parameter>)</parameter_list> 
<block>{ 
    <expr_stmt><expr><name><name>naturalNumInverse</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>naturalNumInverse</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> 
        <block type="pseudo"><expr_stmt><expr><name><name>naturalNumInverse</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>naturalNumInverse</name><index>[<expr><name>p</name> <operator>%</operator> <name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>p</name> <operator>-</operator> <name>p</name> <operator>/</operator> <name>i</name><operator>)</operator> <operator>%</operator> <name>p</name></expr>;</expr_stmt></block></for> 
}</block></function> 
<comment type="line">// Function to precompute inverse of factorials </comment>
<function><type><name>void</name></type> <name>InverseofFactorial</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>p</name></decl></parameter>)</parameter_list> 
<block>{ 
    <expr_stmt><expr><name><name>factorialNumInverse</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>factorialNumInverse</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
  
    <comment type="line">// precompute inverse of natural numbers </comment>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> 
        <block type="pseudo"><expr_stmt><expr><name><name>factorialNumInverse</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>naturalNumInverse</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>factorialNumInverse</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>%</operator> <name>p</name></expr>;</expr_stmt></block></for> 
}</block></function> 
  
<comment type="line">// Function to calculate factorial of 1 to N </comment>
<function><type><name>void</name></type> <name>factorial</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>p</name></decl></parameter>)</parameter_list> 
<block>{ 
    <expr_stmt><expr><name><name>fact</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
  
    <comment type="line">// precompute factorials </comment>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{ 
        <expr_stmt><expr><name><name>fact</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>fact</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>i</name><operator>)</operator> <operator>%</operator> <name>p</name></expr>;</expr_stmt> 
    }</block></for> 
}</block></function> 
  
<comment type="line">// Function to return nCr % p in O(1) time </comment>
<function><type><name>ll</name></type> <name>Binomial</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>N</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>R</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>p</name></decl></parameter>)</parameter_list> 
<block>{ 
    <comment type="line">// n C r = n!*inverse(r!)*inverse((n-r)!) </comment>
    <decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>fact</name><index>[<expr><name>N</name></expr>]</index></name> <operator>*</operator> <name><name>factorialNumInverse</name><index>[<expr><name>R</name></expr>]</index></name><operator>)</operator> 
              <operator>%</operator> <name>p</name> <operator>*</operator> <name><name>factorialNumInverse</name><index>[<expr><name>N</name> <operator>-</operator> <name>R</name></expr>]</index></name><operator>)</operator> 
             <operator>%</operator> <name>p</name></expr></init></decl>;</decl_stmt> 
    <return>return <expr><name>ans</name></expr>;</return> 
}</block></function> 


<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>ll</name></type> <name>p</name><init>=<expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name></expr>;</expr_stmt>
	
	<decl_stmt><decl><type><name>int</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>n</name><operator>-</operator><name>i</name><operator>&gt;=</operator><name>i</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<expr_stmt><expr><name>ans</name><operator>=</operator><name>ans</name><operator>+</operator><call><name>Binomial</name><argument_list>(<argument><expr><name>n</name><operator>-</operator><name>i</name></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ans</name><operator>=</operator><name>ans</name><operator>%</operator><name>p</name></expr>;</expr_stmt>
	}</block></for>
	
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>m</name><operator>-</operator><name>i</name><operator>&gt;=</operator><name>i</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<expr_stmt><expr><name>ans</name><operator>=</operator><name>ans</name><operator>+</operator><call><name>Binomial</name><argument_list>(<argument><expr><name>m</name><operator>-</operator><name>i</name></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ans</name><operator>=</operator><name>ans</name><operator>%</operator><name>p</name></expr>;</expr_stmt>
	}</block></for>
	
	<expr_stmt><expr><name>ans</name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>ans</name><operator>=</operator><literal type="number">2</literal><operator>*</operator><name>ans</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ans</name><operator>=</operator><name>ans</name><operator>%</operator><name>p</name></expr>;</expr_stmt>
	
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
}</block></function>

<function><name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>p</name> <init>= <expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt> 
    <expr_stmt><expr><call><name>InverseofNumber</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    <expr_stmt><expr><call><name>InverseofFactorial</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    <expr_stmt><expr><call><name>factorial</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    
	<decl_stmt><decl><type><name>int</name></type> <name>t</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<comment type="line">//cin &gt;&gt; t;</comment>
	
	<while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition>
	<block type="pseudo"><expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
}</block></function>

</unit>
