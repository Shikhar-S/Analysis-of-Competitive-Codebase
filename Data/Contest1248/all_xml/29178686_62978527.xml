<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29178686_62978527.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>LL</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>LL</name></type> <name>maxn</name><init>=<expr><literal type="number">1e6</literal><operator>+</operator><literal type="number">9</literal></expr></init></decl>;</decl_stmt>
<function><specifier>inline</specifier> <type><name>LL</name></type> <name>Read</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>LL</name></type> <name>x</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>,<decl><type ref="prev"/><name>f</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt> <decl_stmt><decl><type><name>char</name></type> <name>c</name><init>=<expr><call><name>getchar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name><name>c</name><argument_list type="generic">&lt;<argument><expr><literal type="char">'0'</literal> <operator>||</operator> <name>c</name></expr></argument>&gt;</argument_list></name><literal type="char">'9'</literal></expr>)</condition><block>{
		<if>if<condition>(<expr><name>c</name><operator>==</operator><literal type="char">'-'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>f</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if> <expr_stmt><expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></while>
	<while>while<condition>(<expr><name>c</name><operator>&gt;=</operator><literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name><operator>&lt;=</operator><literal type="char">'9'</literal></expr>)</condition><block>{
		<expr_stmt><expr><name>x</name><operator>=</operator><operator>(</operator><name>x</name><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator><operator>+</operator><operator>(</operator><name>x</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><name>c</name><operator>-</operator><literal type="char">'0'</literal></expr>;</expr_stmt> <expr_stmt><expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></while><return>return <expr><name>x</name><operator>*</operator><name>f</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name>LL</name></type> <name>T</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LL</name></type> <name><name>cnt1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>cnt2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><name>T</name><operator>=</operator><call><name>Read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>T</name><operator>--</operator></expr>)</condition><block>{
		<decl_stmt><decl><type><name>LL</name></type> <name>n</name><argument_list>(<argument><expr><call><name>Read</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>cnt1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name><name>cnt1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name><name>cnt2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name><name>cnt2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>LL</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
			<decl_stmt><decl><type><name>LL</name></type> <name>x</name><argument_list>(<argument><expr><call><name>Read</name><argument_list>()</argument_list></call><operator>%</operator><literal type="number">2</literal></expr></argument>)</argument_list></decl>;</decl_stmt> <expr_stmt><expr><name><name>cnt1</name><index>[<expr><name>x</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
		}</block></for>
		<expr_stmt><expr><name>m</name><operator>=</operator><call><name>Read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>LL</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>m</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
			<decl_stmt><decl><type><name>LL</name></type> <name>x</name><argument_list>(<argument><expr><call><name>Read</name><argument_list>()</argument_list></call><operator>%</operator><literal type="number">2</literal></expr></argument>)</argument_list></decl>;</decl_stmt> <expr_stmt><expr><name><name>cnt2</name><index>[<expr><name>x</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
		}</block></for>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>,<argument><expr><name><name>cnt1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><name><name>cnt2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>+</operator><name><name>cnt1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>*</operator><name><name>cnt2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
