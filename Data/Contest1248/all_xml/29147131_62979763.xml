<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29147131_62979763.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<decl_stmt><decl><type><name>int</name></type> <name>wkfmklwemfklwmlkfwklmf34324lklwk</name> <init>= <expr><literal type="number">436</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LL</name></type> <name>T</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>LL</name></type> <name>n</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>LL</name></type> <name>ji1</name></decl> , <decl><type ref="prev"/><name>ou1</name></decl> , <decl><type ref="prev"/><name>ji2</name></decl> , <decl><type ref="prev"/><name>ou2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>LL</name></type> <name>now</name></decl> ;</decl_stmt>

<function><type><name>int</name></type> <name>main</name> <parameter_list>()</parameter_list>
<block>{<decl_stmt><decl><type><name>int</name></type> <name>wkfmklwemf23423klwmlkfwklmflklwk</name> <init>= <expr><literal type="number">436</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>wkfmklwemfk242lwmlkfwklmflklwk</name> <init>= <expr><literal type="number">436</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>wkfmklwemfklwmlk234fwklmflklwk</name> <init>= <expr><literal type="number">436</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>scanf</name> <argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument> , <argument><expr><operator>&amp;</operator><name>T</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <while>while <condition>(<expr><name>T</name><operator>--</operator></expr>)</condition>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>wkfmklwe23423mfklwmlkfwklmflklwk</name> <init>= <expr><literal type="number">436</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>ji1</name> <operator>=</operator> <name>ou1</name> <operator>=</operator> <name>ji2</name> <operator>=</operator> <name>ou2</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>wkfmklwemfklwmlkfwkl23dfr23mflklwk</name> <init>= <expr><literal type="number">436</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>wkfmklwfd23red23emfklwmlkfwklmflklwk</name> <init>= <expr><literal type="number">436</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>scanf</name> <argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument> , <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <for>for <control>(<init><decl><type><name>LL</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
        <block>{
            <expr_stmt><expr><call><name>scanf</name> <argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument> , <argument><expr><operator>&amp;</operator><name>now</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <if>if <condition>(<expr><name>now</name> <operator>%</operator> <literal type="number">2</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><operator>++</operator><name>ji1</name></expr> ;</expr_stmt></block></then>
            <else>else
                <block type="pseudo"><expr_stmt><expr><operator>++</operator><name>ou1</name></expr> ;</expr_stmt></block></else></if>
        }</block></for>
        <decl_stmt><decl><type><name>int</name></type> <name>wkfmklwewefwmfklwmlkfwklmflklwk</name> <init>= <expr><literal type="number">436</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>wkfmklwewefewfklwmlkfwklmflklwk</name> <init>= <expr><literal type="number">436</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>wkfmklwemfklwmlkwefwfwklmflklwk</name> <init>= <expr><literal type="number">436</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>scanf</name> <argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument> , <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <for>for <control>(<init><decl><type><name>LL</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
        <block>{
            <expr_stmt><expr><call><name>scanf</name> <argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument> , <argument><expr><operator>&amp;</operator><name>now</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <if>if <condition>(<expr><name>now</name> <operator>%</operator> <literal type="number">2</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><operator>++</operator><name>ji2</name></expr> ;</expr_stmt></block></then>
            <else>else
                <block type="pseudo"><expr_stmt><expr><operator>++</operator><name>ou2</name></expr> ;</expr_stmt></block></else></if>
        }</block></for>
        <decl_stmt><decl><type><name>LL</name></type> <name>res</name> <init>= <expr><name>ji1</name> <operator>*</operator> <name>ji2</name> <operator>+</operator> <name>ou1</name> <operator>*</operator> <name>ou2</name></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument> , <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    }</block></while>
    <decl_stmt><decl><type><name>int</name></type> <name>wkfmkweflwemfklwmlkfwklmflklwk</name> <init>= <expr><literal type="number">436</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>wkfmklwewefmfklwmlkfwklmflklwk</name> <init>= <expr><literal type="number">436</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>wkfmklwemfklwmlkfwklwefwemflklwk</name> <init>= <expr><literal type="number">436</literal></expr></init></decl>;</decl_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

<comment type="block">/*
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &lt;iostream&gt;
using namespace std;
struct node{
    int num;
    node* next[26];
    node()
    {
        num=0;
        memset(next,NULL,sizeof(next));
    }
};
node* root=new node();
node* rt;
int id,len;
void build(char str[30])
{
    rt=root;
    len=strlen(str);
    for(int i=0;i&lt;len;i++)
    {
        id=str[i]-'a';
        if(rt-&gt;next[id]==NULL)
            rt-&gt;next[id]=new node();
        rt=rt-&gt;next[id];
        rt-&gt;num++;
    }
}
int querry(char str[30])
{
    rt=root;
    len=strlen(str);
    for(int i=0;i&lt;len;i++)
    {
        id=str[i]-'a';
        if(rt-&gt;next[id]==NULL)
            return 0;
        rt=rt-&gt;next[id];
    }
    return rt-&gt;num;
}
int main()
{
    char str[30];
    while(gets(str)&amp;&amp;str[0])
    {
        build(str);
    }
    while(gets(str))
    {
        printf("%d\n",querry(str));
    }
    return 0;
}
*/</comment>
</unit>
