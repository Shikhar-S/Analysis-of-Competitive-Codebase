<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29179748_62993711.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>XN</name><init>=<expr><literal type="number">1e5</literal><operator>+</operator><literal type="number">11</literal></expr></init></decl>,<decl><type ref="prev"/><name>P</name><init>=<expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>M</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>x</name><operator>&gt;=</operator><name>P</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>x</name><operator>-=</operator><name>P</name><operator>)</operator><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>x</name><operator>&lt;</operator><literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>x</name><operator>+=</operator><name>P</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type> <name>Pow</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>base</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>res</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init>;</init><condition><expr><name>v</name></expr>;</condition><incr><expr><name>v</name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr><operator>,</operator><expr><operator>(</operator><name>base</name><operator>*=</operator><name>base</name><operator>)</operator><operator>%=</operator><name>P</name></expr></incr>)</control>
        <block type="pseudo"><if>if<condition>(<expr><name>v</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><operator>(</operator><name>res</name><operator>*=</operator><name>base</name><operator>)</operator><operator>%=</operator><name>P</name></expr>;</expr_stmt></block></then></if></block></for>
    <return>return <expr><name>res</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <comment type="line">//freopen("input","r",stdin);</comment>
	<expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><specifier>static</specifier> <type><name>int</name></type> <name><name>f</name><index>[<expr><name>XN</name></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt><expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><literal type="number">4</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">3</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>XN</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><call><name>M</name><argument_list>(<argument><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>f</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>+</operator><name><name>f</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt><expr_stmt><expr><name><name>std</name><operator>::</operator><name>cin</name></name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>m</name></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>n</name><operator>&gt;</operator><name>m</name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>swap</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    <if>if<condition>(<expr><name>n</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name><operator>&lt;&lt;</operator><name><name>f</name><index>[<expr><name>m</name></expr>]</index></name><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt></block></then>
    <else>else <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>Ans</name><init>=<expr><operator>(</operator><name><name>f</name><index>[<expr><name>m</name></expr>]</index></name><operator>+</operator><name><name>f</name><index>[<expr><name>n</name></expr>]</index></name><operator>-</operator><literal type="number">2</literal><operator>)</operator><operator>%</operator><name>P</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>M</name><argument_list>(<argument><expr><name>Ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name><operator>&lt;&lt;</operator><name>Ans</name><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt>
    }</block></else></if>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

</unit>
