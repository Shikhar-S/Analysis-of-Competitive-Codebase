<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29178423_63004451.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD1</name></cpp:macro> <cpp:value>998244353</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>"\n"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INF</name></cpp:macro> <cpp:value>1e+18</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INF1</name></cpp:macro> <cpp:value>1e+9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fastio</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(false);cin.tie(NULL);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<comment type="line">//#define mp make_pair</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debx</name></cpp:macro> <cpp:value>cout&lt;&lt;" X "&lt;&lt;endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>deby</name></cpp:macro> <cpp:value>cout&lt;&lt;" Y "&lt;&lt;endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debz</name></cpp:macro> <cpp:value>cout&lt;&lt;" Z "&lt;&lt;endl;</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>ll</name></type> <name>mpow</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><operator>!</operator><name>b</name></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
    <decl_stmt><decl><type><name>ll</name></type> <name>temp</name><init>=<expr><call><name>mpow</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>temp</name><operator>=</operator><operator>(</operator><name>temp</name><operator>*</operator><name>temp</name><operator>)</operator><operator>%</operator><name>MOD</name></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>b</name><operator>%</operator><literal type="number">2</literal></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><operator>(</operator><name>a</name><operator>*</operator><name>temp</name><operator>)</operator><operator>%</operator><name>MOD</name></expr>;</return></block></then></if>
    <return>return <expr><name>temp</name></expr>;</return>
}</block></function>

<function><type><name>ll</name></type> <name>mod_in</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{
    <return>return <expr><call><name>mpow</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><name>MOD</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>ll</name></type> <name>fn</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><name>a</name><operator>%</operator><name>b</name></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><literal type="number">1</literal><operator>+</operator><name>a</name><operator>/</operator><name>b</name></expr>;</return></block></then></if>
    <return>return <expr><name>a</name><operator>/</operator><name>b</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
   <comment type="line">//  fastio;</comment>
<comment type="line">//    ll t;cin&gt;&gt;t;while(t--){</comment>
    <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>m</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>maxx</name><init>=<expr><call><name>max</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name><name>fact</name><index>[<expr><name>maxx</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>fact</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>maxx</name><operator>+</operator><literal type="number">5</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><name><name>fact</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>fact</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>*</operator><name>i</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>fact</name><index>[<expr><name>i</name></expr>]</index></name><operator>%=</operator><name>MOD</name></expr>;</expr_stmt>
    }</block></for>
    <decl_stmt><decl><type><name>ll</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><literal type="number">2</literal><operator>*</operator><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <if>if<condition>(<expr><name>n</name><operator>-</operator><literal type="number">2</literal><operator>*</operator><name>i</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
            <if>if<condition>(<expr><name>i</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
                <expr_stmt><expr><name>ans</name><operator>++</operator></expr>;</expr_stmt>
                <continue>continue;</continue>
            }</block></then></if>
        }</block></then></if><comment type="block">/*
        if(n-2*i-1&gt;=i){
            ll temp1=fact[n-2*i-1];
            ll temp2=mod_in(fact[i]);
            ll temp3=mod_in(fact[n-3*i-1]);
            ans+=(((temp1*temp2)%MOD)*temp3)%MOD;
            ans%=MOD;
        }
        if(n-2*i-1&gt;=i-1 &amp;&amp; i&gt;=1){
            ll temp1=fact[n-2*i-1];
            ll temp2=mod_in(fact[i-1]);
            ll temp3=mod_in(fact[n-3*i]);
            ans+=2*((((temp1*temp2)%MOD)*temp3)%MOD);
            ans%=MOD;
        }
        if(n-2*i+1&gt;=i-2 &amp;&amp; i&gt;=2){
            ll temp1=fact[n-2*i-1];
            ll temp2=mod_in(fact[i-2]);
            ll temp3=mod_in(fact[n-3*i+1]);
            ans+=(((temp1*temp2)%MOD)*temp3)%MOD;
            ans%=MOD;
        }*/</comment>
        <if>if<condition>(<expr><name>n</name><operator>-</operator><name>i</name><operator>&gt;=</operator><name>i</name></expr>)</condition><then><block>{
            <decl_stmt><decl><type><name>ll</name></type> <name>temp1</name><init>=<expr><name><name>fact</name><index>[<expr><name>n</name><operator>-</operator><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ll</name></type> <name>temp2</name><init>=<expr><call><name>mod_in</name><argument_list>(<argument><expr><name><name>fact</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ll</name></type> <name>temp3</name><init>=<expr><call><name>mod_in</name><argument_list>(<argument><expr><name><name>fact</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">2</literal><operator>*</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>ans</name><operator>+=</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>temp1</name><operator>*</operator><name>temp2</name><operator>)</operator><operator>%</operator><name>MOD</name><operator>)</operator><operator>*</operator><name>temp3</name><operator>)</operator><operator>%</operator><name>MOD</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>ans</name><operator>%=</operator><name>MOD</name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></for>
   <comment type="line">// cout&lt;&lt;"  "&lt;&lt;ans&lt;&lt;endl;</comment>
    <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><literal type="number">2</literal><operator>*</operator><name>i</name><operator>&lt;=</operator><name>m</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
       <comment type="block">/* if(m-2*i==0 &amp;&amp; m==2){
            ans++;
            continue;
        }
        if(m-2*i-1&gt;=i){
            ll temp1=fact[m-2*i-1];
            ll temp2=mod_in(fact[i]);
            ll temp3=mod_in(fact[m-3*i-1]);
            ans+=(((temp1*temp2)%MOD)*temp3)%MOD;
            ans%=MOD;
        }
        if(m-2*i-1&gt;=i-1){
            ll temp1=fact[m-2*i-1];
            ll temp2=mod_in(fact[i-1]);
            ll temp3=mod_in(fact[m-3*i]);
            ans+=2*((((temp1*temp2)%MOD)*temp3)%MOD);
            ans%=MOD;
        }
        if(i&gt;1 &amp;&amp; m-2*i-1&gt;=i-2){
            ll temp1=fact[m-2*i-1];
            ll temp2=mod_in(fact[i-2]);
            ll temp3=mod_in(fact[m-3*i+1]);
            ans+=(((temp1*temp2)%MOD)*temp3)%MOD;
            ans%=MOD;
        } */</comment>
        <if>if<condition>(<expr><name>m</name><operator>-</operator><name>i</name><operator>&gt;=</operator><name>i</name></expr>)</condition><then><block>{
     <comment type="line">//       cout&lt;&lt;m-i+1&lt;&lt;" "&lt;&lt;fact[m+1-i]&lt;&lt;"   "&lt;&lt;i&lt;&lt;" "&lt;&lt;fact[i]&lt;&lt;"    "&lt;&lt;m-2*i+1&lt;&lt;" "&lt;&lt;fact[m-2*i+1]&lt;&lt;endl;</comment>
            <decl_stmt><decl><type><name>ll</name></type> <name>temp1</name><init>=<expr><name><name>fact</name><index>[<expr><name>m</name><operator>-</operator><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ll</name></type> <name>temp2</name><init>=<expr><call><name>mod_in</name><argument_list>(<argument><expr><name><name>fact</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ll</name></type> <name>temp3</name><init>=<expr><call><name>mod_in</name><argument_list>(<argument><expr><name><name>fact</name><index>[<expr><name>m</name><operator>-</operator><literal type="number">2</literal><operator>*</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>ans</name><operator>+=</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>temp1</name><operator>*</operator><name>temp2</name><operator>)</operator><operator>%</operator><name>MOD</name><operator>)</operator><operator>*</operator><name>temp3</name><operator>)</operator><operator>%</operator><name>MOD</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>ans</name><operator>%=</operator><name>MOD</name></expr>;</expr_stmt>
       <comment type="line">//     cout&lt;&lt;i&lt;&lt;"  "&lt;&lt;ans&lt;&lt;" "&lt;&lt;(temp1*temp2*temp3)%MOD&lt;&lt;endl;</comment>
        }</block></then></if>
    }</block></for>
   <comment type="line">// cout&lt;&lt;"  "&lt;&lt;ans&lt;&lt;endl;</comment>
    <expr_stmt><expr><name>ans</name><operator>*=</operator><literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>ans</name><operator>+=</operator><literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>ans</name><operator>%=</operator><name>MOD</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name></expr>;</expr_stmt>
}</block></function>

</unit>
