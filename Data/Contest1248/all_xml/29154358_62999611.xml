<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29154358_62999611.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name> <init>= <expr><literal type="number">1e6</literal> <operator>+</operator> <literal type="number">100</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>G</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>val</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name>ans1</name></decl>,<decl><type ref="prev"/><name>ans2</name></decl>,<decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>addedge</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>from</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>to</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name><name>G</name><index>[<expr><name>from</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function>
<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>,<decl><type ref="prev"/><name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name><name>dfn</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>low</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>instk</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>col</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>deg</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name>dfs_tot</name></decl>,<decl><type ref="prev"/><name>col_tot</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>stack</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>stk</name></decl>;</decl_stmt>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>clear</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name><name>ans1</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>ans2</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><name><name>G</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>clear</name><argument_list>()</argument_list></call></expr><operator>,</operator><expr><name><name>val</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>clear</name><argument_list>()</argument_list></call></expr><operator>,</operator><expr><name><name>deg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>dfn</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>low</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>instk</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>col</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><name>dfs_tot</name> <operator>=</operator> <name>col_tot</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
}</block></function>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>tarjan</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>)</parameter_list><block>{
	<expr_stmt><expr><name><name>dfn</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <name><name>low</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <operator>++</operator><name>dfs_tot</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>stk</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name><name>instk</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>v</name> <range>: <expr><name><name>G</name><index>[<expr><name>u</name></expr>]</index></name></expr></range></decl></init>)</control>
		<block type="pseudo"><if>if<condition>(<expr><operator>!</operator><name><name>dfn</name><index>[<expr><name>v</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>tarjan</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><name><name>low</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>low</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>low</name><index>[<expr><name>v</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
		<elseif>else <if>if<condition>(<expr><name><name>instk</name><index>[<expr><name>v</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name><name>low</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>low</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>dfn</name><index>[<expr><name>v</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif></if></block></for>
	<if>if<condition>(<expr><name><name>dfn</name><index>[<expr><name>u</name></expr>]</index></name> <operator>==</operator> <name><name>low</name><index>[<expr><name>u</name></expr>]</index></name></expr>)</condition><then><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>col_tot</name><operator>++</operator></expr>;</expr_stmt>
		<do>do<block>{
			<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name><name>stk</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>stk</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr><operator>,</operator><expr><name><name>instk</name><index>[<expr><name>t</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>col</name><index>[<expr><name>t</name></expr>]</index></name> <operator>=</operator> <name>col_tot</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>val</name><index>[<expr><name>col_tot</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block>while<condition>(<expr><name>t</name> <operator>!=</operator> <name>u</name></expr>)</condition>;</do>
	}</block></then></if>
}</block></function>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>u</name></decl>,<decl><type ref="prev"/><name>v</name></decl>,<decl><type ref="prev"/><name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;=</operator> <name>m</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>u</name> <operator>&gt;&gt;</operator> <name>v</name></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>u</name> <operator>!=</operator> <name>v</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>addedge</name><argument_list>(<argument><expr><name>u</name></expr></argument>,<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
	}</block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><if>if<condition>(<expr><operator>!</operator><name><name>dfn</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>tarjan</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>u</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>u</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition><incr><expr><name>u</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>v</name> <range>: <expr><name><name>G</name><index>[<expr><name>u</name></expr>]</index></name></expr></range></decl></init>)</control>
			<block type="pseudo"><if>if<condition>(<expr><name><name>col</name><index>[<expr><name>u</name></expr>]</index></name> <operator>!=</operator> <name><name>col</name><index>[<expr><name>v</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name><name>deg</name><index>[<expr><name><name>col</name><index>[<expr><name>u</name></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block></then></if></block></for></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;=</operator> <name>col_tot</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><if>if<condition>(<expr><operator>!</operator><name><name>deg</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name><name>ans1</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><call><name><name>ans2</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if></block></for>
	<if>if<condition>(<expr><call><name><name>ans1</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No"</literal> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
		<return>return;</return>
	}</block></then></if>
	<if>if<condition>(<expr><call><name><name>ans2</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name><name>ans2</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name><name>ans1</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><call><name><name>ans1</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
	<if>if<condition>(<expr><call><name><name>ans1</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No"</literal> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
		<return>return;</return>
	}</block></then></if>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Yes"</literal> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>tmp</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>auto</name></type> <name>x</name> <range>: <expr><name>ans1</name></expr></range></decl></init>)</control>
		<block type="pseudo"><for>for<control>(<init><decl><type><name>auto</name></type> <name>y</name> <range>: <expr><name><name>val</name><index>[<expr><name>x</name></expr>]</index></name></expr></range></decl></init>)</control>
			<block type="pseudo"><expr_stmt><expr><call><name><name>tmp</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for></block></for>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name><name>tmp</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt>
	
	<expr_stmt><expr><call><name><name>tmp</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>auto</name></type> <name>x</name> <range>: <expr><name>ans2</name></expr></range></decl></init>)</control>
		<block type="pseudo"><for>for<control>(<init><decl><type><name>auto</name></type> <name>y</name> <range>: <expr><name><name>val</name><index>[<expr><name>x</name></expr>]</index></name></expr></range></decl></init>)</control>
			<block type="pseudo"><expr_stmt><expr><call><name><name>tmp</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for></block></for>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name><name>tmp</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
	
	<expr_stmt><expr><call><name><name>tmp</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>auto</name></type> <name>x</name> <range>: <expr><name>ans1</name></expr></range></decl></init>)</control>
		<block type="pseudo"><for>for<control>(<init><decl><type><name>auto</name></type> <name>y</name> <range>: <expr><name><name>val</name><index>[<expr><name>x</name></expr>]</index></name></expr></range></decl></init>)</control>
			<block type="pseudo"><expr_stmt><expr><call><name><name>tmp</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for></block></for>
	<for>for<control>(<init><decl><type><name>auto</name></type> <name>x</name> <range>: <expr><name>tmp</name></expr></range></decl></init>)</control>
		<block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>x</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
	
	<expr_stmt><expr><call><name><name>tmp</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>auto</name></type> <name>x</name> <range>: <expr><name>ans2</name></expr></range></decl></init>)</control>
		<block type="pseudo"><for>for<control>(<init><decl><type><name>auto</name></type> <name>y</name> <range>: <expr><name><name>val</name><index>[<expr><name>x</name></expr>]</index></name></expr></range></decl></init>)</control>
			<block type="pseudo"><expr_stmt><expr><call><name><name>tmp</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for></block></for>
	<for>for<control>(<init><decl><type><name>auto</name></type> <name>x</name> <range>: <expr><name>tmp</name></expr></range></decl></init>)</control>
		<block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>x</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition><block type="pseudo"><expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

</unit>
