<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29141134_62977479.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pet</name></cpp:macro> <cpp:value>pair&lt;int,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>one</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>two</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
	
	<decl_stmt><decl><type><name>int</name></type> <name>eve1</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>eve2</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>odd1</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>odd2</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>n</name><operator>--</operator></expr>)</condition>
	<block>{
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>t</name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
		<block type="pseudo"><expr_stmt><expr><name>eve1</name><operator>++</operator></expr>;</expr_stmt></block></then>
		
		<else>else
		<block type="pseudo"><expr_stmt><expr><name>odd1</name><operator>++</operator></expr>;</expr_stmt></block></else></if>
	}</block></while>
	
	<decl_stmt><decl><type><name>int</name></type> <name>m</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>m</name></expr>;</expr_stmt>
	
	<while>while<condition>(<expr><name>m</name><operator>--</operator></expr>)</condition>
	<block>{
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>t</name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
		<block type="pseudo"><expr_stmt><expr><name>eve2</name><operator>++</operator></expr>;</expr_stmt></block></then>
		
		<else>else
		<block type="pseudo"><expr_stmt><expr><name>odd2</name><operator>++</operator></expr>;</expr_stmt></block></else></if>
	}</block></while>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>eve1</name><operator>*</operator><name>eve2</name><operator>+</operator><name>odd1</name><operator>*</operator><name>odd2</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
	
}</block></function>

<function><name>main</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
	
	<while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition>
	<block type="pseudo"><expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
}</block></function>

</unit>
