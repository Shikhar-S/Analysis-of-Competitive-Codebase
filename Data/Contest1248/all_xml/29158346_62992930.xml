<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29158346_62992930.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<namespace>namespace <name>IO</name><block>{
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUF_SIZE</name></cpp:macro> <cpp:value>100000</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OUT_SIZE</name></cpp:macro> <cpp:value>100000</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
    <comment type="line">//fread-&gt;read</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>IOerror</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <function><specifier>inline</specifier> <type><name>char</name></type> <name>nc</name><parameter_list>()</parameter_list><block>{
        <decl_stmt><decl><specifier>static</specifier> <type><name>char</name></type> <name><name>buf</name><index>[<expr><name>BUF_SIZE</name></expr>]</index></name></decl>,<modifier>*</modifier><decl><type ref="prev"/><name>p1</name><init>=<expr><name>buf</name><operator>+</operator><name>BUF_SIZE</name></expr></init></decl>,<modifier>*</modifier><decl><type ref="prev"/><name>pend</name><init>=<expr><name>buf</name><operator>+</operator><name>BUF_SIZE</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>p1</name><operator>==</operator><name>pend</name></expr>)</condition><then><block>{
            <expr_stmt><expr><name>p1</name><operator>=</operator><name>buf</name></expr>;</expr_stmt> <expr_stmt><expr><name>pend</name><operator>=</operator><name>buf</name><operator>+</operator><call><name>fread</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>BUF_SIZE</name></expr></argument>,<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>pend</name><operator>==</operator><name>p1</name></expr>)</condition><then><block>{<expr_stmt><expr><name>IOerror</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt><return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>}</block></then></if>
            <comment type="line">//{printf("IO error!\n");system("pause");for (;;);exit(0);}</comment>
        }</block></then></if>
        <return>return <expr><operator>*</operator><name>p1</name><operator>++</operator></expr>;</return>
    }</block></function>
    <function><specifier>inline</specifier> <type><name>bool</name></type> <name>blank</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>ch</name></decl></parameter>)</parameter_list><block>{<return>return <expr><name>ch</name><operator>==</operator><literal type="char">' '</literal><operator>||</operator><name>ch</name><operator>==</operator><literal type="char">'\n'</literal><operator>||</operator><name>ch</name><operator>==</operator><literal type="char">'\r'</literal><operator>||</operator><name>ch</name><operator>==</operator><literal type="char">'\t'</literal></expr>;</return>}</block></function>
    <function><specifier>inline</specifier> <type><name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list><block>{
        <decl_stmt><decl><type><name>bool</name></type> <name>sign</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <decl_stmt><decl><type><name>char</name></type> <name>ch</name><init>=<expr><call><name>nc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> <expr_stmt><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
        <for>for <control>(<init>;</init><condition><expr><call><name>blank</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</condition><incr><expr><name>ch</name><operator>=</operator><call><name>nc</name><argument_list>()</argument_list></call></expr></incr>)</control><block type="pseudo"><empty_stmt>;</empty_stmt></block></for>
        <if>if <condition>(<expr><name>IOerror</name></expr>)</condition><then><block type="pseudo"><return>return;</return></block></then></if>
        <if>if <condition>(<expr><name>ch</name><operator>==</operator><literal type="char">'-'</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>sign</name><operator>=</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name>ch</name><operator>=</operator><call><name>nc</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
        <for>for <control>(<init>;</init><condition><expr><name>ch</name><operator>&gt;=</operator><literal type="char">'0'</literal><operator>&amp;&amp;</operator><name>ch</name><operator>&lt;=</operator><literal type="char">'9'</literal></expr>;</condition><incr><expr><name>ch</name><operator>=</operator><call><name>nc</name><argument_list>()</argument_list></call></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name>x</name><operator>=</operator><name>x</name><operator>*</operator><literal type="number">10</literal><operator>+</operator><name>ch</name><operator>-</operator><literal type="char">'0'</literal></expr>;</expr_stmt></block></for>
        <if>if <condition>(<expr><name>sign</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>x</name><operator>=</operator><operator>-</operator><name>x</name></expr>;</expr_stmt></block></then></if>
    }</block></function>
    <function><specifier>inline</specifier> <type><name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>ll</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list><block>{
        <decl_stmt><decl><type><name>bool</name></type> <name>sign</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <decl_stmt><decl><type><name>char</name></type> <name>ch</name><init>=<expr><call><name>nc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> <expr_stmt><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
        <for>for <control>(<init>;</init><condition><expr><call><name>blank</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</condition><incr><expr><name>ch</name><operator>=</operator><call><name>nc</name><argument_list>()</argument_list></call></expr></incr>)</control><block type="pseudo"><empty_stmt>;</empty_stmt></block></for>
        <if>if <condition>(<expr><name>IOerror</name></expr>)</condition><then><block type="pseudo"><return>return;</return></block></then></if>
        <if>if <condition>(<expr><name>ch</name><operator>==</operator><literal type="char">'-'</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>sign</name><operator>=</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name>ch</name><operator>=</operator><call><name>nc</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
        <for>for <control>(<init>;</init><condition><expr><name>ch</name><operator>&gt;=</operator><literal type="char">'0'</literal><operator>&amp;&amp;</operator><name>ch</name><operator>&lt;=</operator><literal type="char">'9'</literal></expr>;</condition><incr><expr><name>ch</name><operator>=</operator><call><name>nc</name><argument_list>()</argument_list></call></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name>x</name><operator>=</operator><name>x</name><operator>*</operator><literal type="number">10</literal><operator>+</operator><name>ch</name><operator>-</operator><literal type="char">'0'</literal></expr>;</expr_stmt></block></for>
        <if>if <condition>(<expr><name>sign</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>x</name><operator>=</operator><operator>-</operator><name>x</name></expr>;</expr_stmt></block></then></if>
    }</block></function>
    <function><specifier>inline</specifier> <type><name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>double</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list><block>{
        <decl_stmt><decl><type><name>bool</name></type> <name>sign</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <decl_stmt><decl><type><name>char</name></type> <name>ch</name><init>=<expr><call><name>nc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> <expr_stmt><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
        <for>for <control>(<init>;</init><condition><expr><call><name>blank</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</condition><incr><expr><name>ch</name><operator>=</operator><call><name>nc</name><argument_list>()</argument_list></call></expr></incr>)</control><block type="pseudo"><empty_stmt>;</empty_stmt></block></for>
        <if>if <condition>(<expr><name>IOerror</name></expr>)</condition><then><block type="pseudo"><return>return;</return></block></then></if>
        <if>if <condition>(<expr><name>ch</name><operator>==</operator><literal type="char">'-'</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>sign</name><operator>=</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name>ch</name><operator>=</operator><call><name>nc</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
        <for>for <control>(<init>;</init><condition><expr><name>ch</name><operator>&gt;=</operator><literal type="char">'0'</literal><operator>&amp;&amp;</operator><name>ch</name><operator>&lt;=</operator><literal type="char">'9'</literal></expr>;</condition><incr><expr><name>ch</name><operator>=</operator><call><name>nc</name><argument_list>()</argument_list></call></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name>x</name><operator>=</operator><name>x</name><operator>*</operator><literal type="number">10</literal><operator>+</operator><name>ch</name><operator>-</operator><literal type="char">'0'</literal></expr>;</expr_stmt></block></for>
        <if>if <condition>(<expr><name>ch</name><operator>==</operator><literal type="char">'.'</literal></expr>)</condition><then><block>{
            <decl_stmt><decl><type><name>double</name></type> <name>tmp</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> <expr_stmt><expr><name>ch</name><operator>=</operator><call><name>nc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init>;</init><condition><expr><name>ch</name><operator>&gt;=</operator><literal type="char">'0'</literal><operator>&amp;&amp;</operator><name>ch</name><operator>&lt;=</operator><literal type="char">'9'</literal></expr>;</condition><incr><expr><name>ch</name><operator>=</operator><call><name>nc</name><argument_list>()</argument_list></call></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name>tmp</name><operator>/=</operator><literal type="number">10.0</literal></expr><operator>,</operator><expr><name>x</name><operator>+=</operator><name>tmp</name><operator>*</operator><operator>(</operator><name>ch</name><operator>-</operator><literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt></block></for>
        }</block></then></if>
        <if>if <condition>(<expr><name>sign</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>x</name><operator>=</operator><operator>-</operator><name>x</name></expr>;</expr_stmt></block></then></if>
    }</block></function>
    <function><specifier>inline</specifier> <type><name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list><block>{
        <decl_stmt><decl><type><name>char</name></type> <name>ch</name><init>=<expr><call><name>nc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init>;</init><condition><expr><call><name>blank</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</condition><incr><expr><name>ch</name><operator>=</operator><call><name>nc</name><argument_list>()</argument_list></call></expr></incr>)</control><block type="pseudo"><empty_stmt>;</empty_stmt></block></for>
        <if>if <condition>(<expr><name>IOerror</name></expr>)</condition><then><block type="pseudo"><return>return;</return></block></then></if>
        <for>for <control>(<init>;</init><condition><expr><operator>!</operator><call><name>blank</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call><operator>&amp;&amp;</operator><operator>!</operator><name>IOerror</name></expr>;</condition><incr><expr><name>ch</name><operator>=</operator><call><name>nc</name><argument_list>()</argument_list></call></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator><operator>=</operator><name>ch</name></expr>;</expr_stmt></block></for>
        <expr_stmt><expr><operator>*</operator><name>s</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
    }</block></function>
    <function><specifier>inline</specifier> <type><name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>&amp;</modifier></type><name>c</name></decl></parameter>)</parameter_list><block>{
        <for>for <control>(<init><expr><name>c</name><operator>=</operator><call><name>nc</name><argument_list>()</argument_list></call></expr>;</init><condition><expr><call><name>blank</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</condition><incr><expr><name>c</name><operator>=</operator><call><name>nc</name><argument_list>()</argument_list></call></expr></incr>)</control><block type="pseudo"><empty_stmt>;</empty_stmt></block></for>
        <if>if <condition>(<expr><name>IOerror</name></expr>)</condition><then><block>{<expr_stmt><expr><name>c</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt><return>return;</return>}</block></then></if>
    }</block></function>
    <struct>struct <name>Ostream_fwrite</name><block>{<public type="default">
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>,<modifier>*</modifier><decl><type ref="prev"/><name>p1</name></decl>,<modifier>*</modifier><decl><type ref="prev"/><name>pend</name></decl>;</decl_stmt>
        <constructor><name>Ostream_fwrite</name><parameter_list>()</parameter_list><block>{<expr_stmt><expr><name>buf</name><operator>=</operator><operator>new</operator> <name><name>char</name><index>[<expr><name>BUF_SIZE</name></expr>]</index></name></expr>;</expr_stmt><expr_stmt><expr><name>p1</name><operator>=</operator><name>buf</name></expr>;</expr_stmt><expr_stmt><expr><name>pend</name><operator>=</operator><name>buf</name><operator>+</operator><name>BUF_SIZE</name></expr>;</expr_stmt>}</block></constructor>
        <function><type><name>void</name></type> <name>out</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>ch</name></decl></parameter>)</parameter_list><block>{
            <if>if <condition>(<expr><name>p1</name><operator>==</operator><name>pend</name></expr>)</condition><then><block>{
                <expr_stmt><expr><call><name>fwrite</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>BUF_SIZE</name></expr></argument>,<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name>p1</name><operator>=</operator><name>buf</name></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><operator>*</operator><name>p1</name><operator>++</operator><operator>=</operator><name>ch</name></expr>;</expr_stmt>
        }</block></function>
        <function><type><name>void</name></type> <name>print</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{
            <decl_stmt><decl><specifier>static</specifier> <type><name>char</name></type> <name><name>s</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></decl>,<modifier>*</modifier><decl><type ref="prev"/><name>s1</name></decl>;</decl_stmt><expr_stmt><expr><name>s1</name><operator>=</operator><name>s</name></expr>;</expr_stmt>
            <if>if <condition>(<expr><operator>!</operator><name>x</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><operator>*</operator><name>s1</name><operator>++</operator><operator>=</operator><literal type="char">'0'</literal></expr>;</expr_stmt></block></then></if><if>if <condition>(<expr><name>x</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>out</name><argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><name>x</name><operator>=</operator><operator>-</operator><name>x</name></expr>;</expr_stmt></block></then></if>
            <while>while<condition>(<expr><name>x</name></expr>)</condition><block type="pseudo"><expr_stmt><expr><operator>*</operator><name>s1</name><operator>++</operator><operator>=</operator><name>x</name><operator>%</operator><literal type="number">10</literal><operator>+</operator><literal type="char">'0'</literal></expr><operator>,</operator><expr><name>x</name><operator>/=</operator><literal type="number">10</literal></expr>;</expr_stmt></block></while>
            <while>while<condition>(<expr><name>s1</name><operator>--</operator><operator>!=</operator><name>s</name></expr>)</condition><block type="pseudo"><expr_stmt><expr><call><name>out</name><argument_list>(<argument><expr><operator>*</operator><name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></while>
        }</block></function>
        <function><type><name>void</name></type> <name>println</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{
            <decl_stmt><decl><specifier>static</specifier> <type><name>char</name></type> <name><name>s</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></decl>,<modifier>*</modifier><decl><type ref="prev"/><name>s1</name></decl>;</decl_stmt><expr_stmt><expr><name>s1</name><operator>=</operator><name>s</name></expr>;</expr_stmt>
            <if>if <condition>(<expr><operator>!</operator><name>x</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><operator>*</operator><name>s1</name><operator>++</operator><operator>=</operator><literal type="char">'0'</literal></expr>;</expr_stmt></block></then></if><if>if <condition>(<expr><name>x</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>out</name><argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><name>x</name><operator>=</operator><operator>-</operator><name>x</name></expr>;</expr_stmt></block></then></if>
            <while>while<condition>(<expr><name>x</name></expr>)</condition><block type="pseudo"><expr_stmt><expr><operator>*</operator><name>s1</name><operator>++</operator><operator>=</operator><name>x</name><operator>%</operator><literal type="number">10</literal><operator>+</operator><literal type="char">'0'</literal></expr><operator>,</operator><expr><name>x</name><operator>/=</operator><literal type="number">10</literal></expr>;</expr_stmt></block></while>
            <while>while<condition>(<expr><name>s1</name><operator>--</operator><operator>!=</operator><name>s</name></expr>)</condition><block type="pseudo"><expr_stmt><expr><call><name>out</name><argument_list>(<argument><expr><operator>*</operator><name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></while> <expr_stmt><expr><call><name>out</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
        <function><type><name>void</name></type> <name>print</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{
            <decl_stmt><decl><specifier>static</specifier> <type><name>char</name></type> <name><name>s</name><index>[<expr><literal type="number">25</literal></expr>]</index></name></decl>,<modifier>*</modifier><decl><type ref="prev"/><name>s1</name></decl>;</decl_stmt><expr_stmt><expr><name>s1</name><operator>=</operator><name>s</name></expr>;</expr_stmt>
            <if>if <condition>(<expr><operator>!</operator><name>x</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><operator>*</operator><name>s1</name><operator>++</operator><operator>=</operator><literal type="char">'0'</literal></expr>;</expr_stmt></block></then></if><if>if <condition>(<expr><name>x</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>out</name><argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><name>x</name><operator>=</operator><operator>-</operator><name>x</name></expr>;</expr_stmt></block></then></if>
            <while>while<condition>(<expr><name>x</name></expr>)</condition><block type="pseudo"><expr_stmt><expr><operator>*</operator><name>s1</name><operator>++</operator><operator>=</operator><name>x</name><operator>%</operator><literal type="number">10</literal><operator>+</operator><literal type="char">'0'</literal></expr><operator>,</operator><expr><name>x</name><operator>/=</operator><literal type="number">10</literal></expr>;</expr_stmt></block></while>
            <while>while<condition>(<expr><name>s1</name><operator>--</operator><operator>!=</operator><name>s</name></expr>)</condition><block type="pseudo"><expr_stmt><expr><call><name>out</name><argument_list>(<argument><expr><operator>*</operator><name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></while>
        }</block></function>
        <function><type><name>void</name></type> <name>println</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{
            <decl_stmt><decl><specifier>static</specifier> <type><name>char</name></type> <name><name>s</name><index>[<expr><literal type="number">25</literal></expr>]</index></name></decl>,<modifier>*</modifier><decl><type ref="prev"/><name>s1</name></decl>;</decl_stmt><expr_stmt><expr><name>s1</name><operator>=</operator><name>s</name></expr>;</expr_stmt>
            <if>if <condition>(<expr><operator>!</operator><name>x</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><operator>*</operator><name>s1</name><operator>++</operator><operator>=</operator><literal type="char">'0'</literal></expr>;</expr_stmt></block></then></if><if>if <condition>(<expr><name>x</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>out</name><argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><name>x</name><operator>=</operator><operator>-</operator><name>x</name></expr>;</expr_stmt></block></then></if>
            <while>while<condition>(<expr><name>x</name></expr>)</condition><block type="pseudo"><expr_stmt><expr><operator>*</operator><name>s1</name><operator>++</operator><operator>=</operator><name>x</name><operator>%</operator><literal type="number">10</literal><operator>+</operator><literal type="char">'0'</literal></expr><operator>,</operator><expr><name>x</name><operator>/=</operator><literal type="number">10</literal></expr>;</expr_stmt></block></while>
            <while>while<condition>(<expr><name>s1</name><operator>--</operator><operator>!=</operator><name>s</name></expr>)</condition><block type="pseudo"><expr_stmt><expr><call><name>out</name><argument_list>(<argument><expr><operator>*</operator><name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></while> <expr_stmt><expr><call><name>out</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
        <function><type><name>void</name></type> <name>print</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{
            <decl_stmt><decl><specifier>static</specifier> <type><name>ll</name></type> <name><name>mul</name><index>[]</index></name><init>=<expr><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">100</literal></expr>,<expr><literal type="number">1000</literal></expr>,<expr><literal type="number">10000</literal></expr>,<expr><literal type="number">100000</literal></expr>,<expr><literal type="number">1000000</literal></expr>,<expr><literal type="number">10000000</literal></expr>,<expr><literal type="number">100000000</literal></expr>,
                <expr><literal type="number">1000000000</literal></expr>,<expr><literal type="number">10000000000LL</literal></expr>,<expr><literal type="number">100000000000LL</literal></expr>,<expr><literal type="number">1000000000000LL</literal></expr>,<expr><literal type="number">10000000000000LL</literal></expr>,
                <expr><literal type="number">100000000000000LL</literal></expr>,<expr><literal type="number">1000000000000000LL</literal></expr>,<expr><literal type="number">10000000000000000LL</literal></expr>,<expr><literal type="number">100000000000000000LL</literal></expr>}</block></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>x</name><operator>&lt;</operator><operator>-</operator><literal type="number">1e-12</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>out</name><argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><name>x</name><operator>=</operator><operator>-</operator><name>x</name></expr>;</expr_stmt></block></then></if><expr_stmt><expr><name>x</name><operator>*=</operator><name><name>mul</name><index>[<expr><name>y</name></expr>]</index></name></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>ll</name></type> <name>x1</name><init>=<expr><operator>(</operator><name>ll</name><operator>)</operator><call><name>floor</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <if>if <condition>(<expr><name>x</name><operator>-</operator><call><name>floor</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>&gt;=</operator><literal type="number">0.5</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><operator>++</operator><name>x1</name></expr>;</expr_stmt></block></then></if>
            <decl_stmt><decl><type><name>ll</name></type> <name>x2</name><init>=<expr><name>x1</name><operator>/</operator><name><name>mul</name><index>[<expr><name>y</name></expr>]</index></name></expr></init></decl>,<decl><type ref="prev"/><name>x3</name><init>=<expr><name>x1</name><operator>-</operator><name>x2</name><operator>*</operator><name><name>mul</name><index>[<expr><name>y</name></expr>]</index></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><name>x2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>y</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then><block>{<expr_stmt><expr><call><name>out</name><argument_list>(<argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>y</name><operator>&amp;&amp;</operator><name>x3</name><operator>*</operator><name><name>mul</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;</operator><name><name>mul</name><index>[<expr><name>y</name></expr>]</index></name></expr>;</condition><incr><expr><call><name>out</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><empty_stmt>;</empty_stmt></block></for> <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><name>x3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></then></if>
        }</block></function>
        <function><type><name>void</name></type> <name>println</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>out</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function>
        <function><type><name>void</name></type> <name>print</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list><block>{<while>while <condition>(<expr><operator>*</operator><name>s</name></expr>)</condition><block type="pseudo"><expr_stmt><expr><call><name>out</name><argument_list>(<argument><expr><operator>*</operator><name>s</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></while>}</block></function>
        <function><type><name>void</name></type> <name>println</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list><block>{<while>while <condition>(<expr><operator>*</operator><name>s</name></expr>)</condition><block type="pseudo"><expr_stmt><expr><call><name>out</name><argument_list>(<argument><expr><operator>*</operator><name>s</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></while><expr_stmt><expr><call><name>out</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function>
        <function><type><name>void</name></type> <name>flush</name><parameter_list>()</parameter_list><block>{<if>if <condition>(<expr><name>p1</name><operator>!=</operator><name>buf</name></expr>)</condition><then><block>{<expr_stmt><expr><call><name>fwrite</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>p1</name><operator>-</operator><name>buf</name></expr></argument>,<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name>p1</name><operator>=</operator><name>buf</name></expr>;</expr_stmt>}</block></then></if>}</block></function>
        <destructor><name>~<name>Ostream_fwrite</name></name><parameter_list>()</parameter_list><block>{<expr_stmt><expr><call><name>flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>}</block></destructor>
    </public>}</block><decl><name>Ostream</name></decl>;</struct>
    <function><specifier>inline</specifier> <type><name>void</name></type> <name>print</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><call><name><name>Ostream</name><operator>.</operator><name>print</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function>
    <function><specifier>inline</specifier> <type><name>void</name></type> <name>println</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><call><name><name>Ostream</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function>
    <function><specifier>inline</specifier> <type><name>void</name></type> <name>print</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><call><name><name>Ostream</name><operator>.</operator><name>out</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function>
    <function><specifier>inline</specifier> <type><name>void</name></type> <name>println</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><call><name><name>Ostream</name><operator>.</operator><name>out</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>Ostream</name><operator>.</operator><name>out</name></name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function>
    <function><specifier>inline</specifier> <type><name>void</name></type> <name>print</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><call><name><name>Ostream</name><operator>.</operator><name>print</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function>
    <function><specifier>inline</specifier> <type><name>void</name></type> <name>println</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><call><name><name>Ostream</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function>
    <function><specifier>inline</specifier> <type><name>void</name></type> <name>print</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><call><name><name>Ostream</name><operator>.</operator><name>print</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function>
    <function><specifier>inline</specifier> <type><name>void</name></type> <name>println</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><call><name><name>Ostream</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function>
    <function><specifier>inline</specifier> <type><name>void</name></type> <name>print</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><call><name><name>Ostream</name><operator>.</operator><name>print</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function>
    <function><specifier>inline</specifier> <type><name>void</name></type> <name>println</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><call><name><name>Ostream</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function>
    <function><specifier>inline</specifier> <type><name>void</name></type> <name>println</name><parameter_list>()</parameter_list><block>{<expr_stmt><expr><call><name><name>Ostream</name><operator>.</operator><name>out</name></name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function>
    <function><specifier>inline</specifier> <type><name>void</name></type> <name>flush</name><parameter_list>()</parameter_list><block>{<expr_stmt><expr><call><name><name>Ostream</name><operator>.</operator><name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>}</block></function>
    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ll</name></cpp:undef>
    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>OUT_SIZE</name></cpp:undef>
    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BUF_SIZE</name></cpp:undef>
}</block></namespace><empty_stmt>;</empty_stmt>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>l</name></type></parameter>,<parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=l;i&lt;=r;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ser</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>l</name></type></parameter>,<parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=l;i&lt;=r;i++)</cpp:value></cpp:define>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name><init>=<expr><literal type="number">100010</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mod</name><init>=<expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>a</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>b</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>c</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><literal type="number">4</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>=</operator><literal type="number">6</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">4</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">100000</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><operator>(</operator><name><name>b</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>b</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><operator>(</operator><name><name>a</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><call><name><name>IO</name><operator>::</operator><name>read</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><call><name><name>IO</name><operator>::</operator><name>read</name></name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name><name>a</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><name><name>a</name><index>[<expr><name>n</name></expr>]</index></name><operator>+</operator><literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>=</operator><name><name>a</name><index>[<expr><name>n</name></expr>]</index></name><operator>+</operator><literal type="number">4</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">4</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>m</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><operator>(</operator><name><name>c</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>,<argument><expr><name><name>c</name><index>[<expr><name>m</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
