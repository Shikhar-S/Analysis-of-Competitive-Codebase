<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29142029_62994374.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N</name></cpp:macro> <cpp:value>110000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name><name>f</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>s</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<comment type="line">//int n,m,x[10],y[10],a[100][100],ans; </comment>
<comment type="line">//inline int qpow(int n,ll w){</comment>
<comment type="line">//	int s[110],num=0;</comment>
<comment type="line">//	if(w==0) return 1;</comment>
<comment type="line">//	while(w&gt;0) s[++num]=w%2,w/=2;</comment>
<comment type="line">//	int t=n,ans=1;</comment>
<comment type="line">//	if(s[1]) ans=n;</comment>
<comment type="line">//	for(int i=2;i&lt;=num;++i){</comment>
<comment type="line">//		t=1ll*t*t%mod;</comment>
<comment type="line">//		if(s[i]) ans=1ll*ans*t%mod;</comment>
<comment type="line">//	}</comment>
<comment type="line">//	return ans;</comment>
<comment type="line">//}</comment>
<comment type="line">//inline bool check(int n,int m){</comment>
<comment type="line">//	for(int i=1;i&lt;=n;++i)</comment>
<comment type="line">//	for(int j=1;j&lt;=m;++j){</comment>
<comment type="line">//		int an=0;</comment>
<comment type="line">//		for(int k=1;k&lt;=4;++k){</comment>
<comment type="line">//			int x1=i+x[k],y1=j+y[k];</comment>
<comment type="line">//			if(0&lt;x1 and x1&lt;=n and 0&lt;y1 and y1&lt;=m){</comment>
<comment type="line">//				if(a[x1][y1]==a[i][j]) ++an;</comment>
<comment type="line">//			}</comment>
<comment type="line">//		}</comment>
<comment type="line">//		if(an&gt;1) return false;</comment>
<comment type="line">//	}</comment>
<comment type="line">//	return true;</comment>
<comment type="line">//}</comment>
<comment type="line">//void work(int i,int j,int n,int m){</comment>
<comment type="line">//	if(j&gt;m) ++i,j=1;</comment>
<comment type="line">//	if(i&gt;n){</comment>
<comment type="line">//		if(check(n,m)) ++ans;</comment>
<comment type="line">//		return ;</comment>
<comment type="line">//	}</comment>
<comment type="line">//	a[i][j]=1;</comment>
<comment type="line">//	work(i,j+1,n,m);</comment>
<comment type="line">//	a[i][j]=0;</comment>
<comment type="line">//	work(i,j+1,n,m);</comment>
<comment type="line">//}</comment>
<comment type="line">//inline void baoli(){</comment>
<comment type="line">//	for(int i=1;i&lt;=n;++i)</comment>
<comment type="line">//	for(int j=1;j&lt;=m;++j){</comment>
<comment type="line">//		ans=0;work(1,1,i,j);</comment>
<comment type="line">//		printf("%d %d:%d\n",i,j,ans);</comment>
<comment type="line">//	}</comment>
<comment type="line">//} </comment>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
<comment type="line">//	freopen("a.in","r",stdin);</comment>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><call><name>max</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><operator>(</operator><name><name>f</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>f</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><call><name>max</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><operator>(</operator><name><name>s</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt></block></for>
	<decl_stmt><decl><type><name>int</name></type> <name>yu</name><init>=<expr><operator>(</operator><literal type="number">1ll</literal><operator>*</operator><operator>(</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1ll</literal><operator>*</operator><name><name>s</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>*</operator><literal type="number">2</literal><operator>%</operator><name>mod</name><operator>)</operator><operator>%</operator><name>mod</name><operator>+</operator><literal type="number">1ll</literal><operator>*</operator><literal type="number">2</literal><operator>*</operator><name><name>s</name><index>[<expr><name>m</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>%</operator><name>mod</name><operator>)</operator><operator>%</operator><name>mod</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>,<argument><expr><name>yu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">//	printf("%d\n",qpow(n,m));</comment>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
