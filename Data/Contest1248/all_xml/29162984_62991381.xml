<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29162984_62991381.cpp"><comment type="block">/*

à¦ªà§à¦°à¦¶à§à¦¨ à¦à¦¾à¦à§ à¦à¦®à¦¾à¦° à¦à¦¦à§à¦¶à§à¦¯ à¦¦à§à§à¦¾à¦²à§
à¦à¦¾à¦¨à¦¾ à¦à¦à¦¾à¦¨à¦¾à¦° à¦à§à¦£à¦¿à¦¨ à¦¦à§à¦à§ à¦ªà¦°à¦¿à¦¶à§à¦·à§
à¦¸à§à¦®à§à¦¤à¦¿à¦° à¦ªà§à¦°à¦¤à¦¿à¦à§à¦à¦¬à¦¿ à¦¤à§à¦®à¦¿ à¦¸à¦à¦²
à¦à¦à§à¦¨à¦¾à¦° à¦°à§à¦ªà¦à¦¾à¦° à¦à¦²à§à§à¦¾ à¦à¦²à¦à¦à¦¾à¦°à§à¦°
à¦à¦¦à§à¦à¦¾ à¦¸à§à¦¬à¦°à§à¦¨à¦à¦¾à¦° à¦¸à§à¦¬à¦ªà§à¦¨à¦¦à§à¦¬
à¦¶à§à¦¨à§ à¦à¦ à¦¹à¦¾à¦¹à¦¾à¦à¦¾à¦°

-à¦¸à§à¦¬à¦ªà§à¦¨à¦¦à§à¦¬, VIBE

*/</comment>



<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sf</name></cpp:macro> <cpp:value>scanf</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pf</name></cpp:macro> <cpp:value>printf</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fr</name><parameter_list>(<parameter><type><name>I</name></type></parameter>,<parameter><type><name>M</name></type></parameter>,<parameter><type><name>N</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(I=M;I&lt;=N;I++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fr_</name><parameter_list>(<parameter><type><name>I</name></type></parameter>,<parameter><type><name>M</name></type></parameter>,<parameter><type><name>N</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(I=M;I&gt;=N;I--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>re</name></cpp:macro> <cpp:value>return</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sfn</name></cpp:macro> <cpp:value>cin&gt;&gt;n</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bal</name></cpp:macro> <cpp:value>pf("bal\n")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ins</name></cpp:macro> <cpp:value>insert</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>X.size()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xx</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yy</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>skip</name></cpp:macro> <cpp:value>continue</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>memo</name><parameter_list>(<parameter><type><name>X</name></type></parameter>,<parameter><type><name>N</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(X,N,sizeof(X))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>X.begin(),X.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pi</name></cpp:macro> <cpp:value>acos(-1)</cpp:value></cpp:define>


<comment type="block">/*
#define nMX 5000000
#define pMX 500000
int pr[pMX+1],prnum[nMX+1];

int sieve()
{
    int i,j;
    for(i=1;i&lt;=nMX;i++)
        prnum[i]=i+1;
    for(i=1;i&lt;=nMX;i++)
        if(prnum[i]!=-1)
            for(j=2*prnum[i]-1;j&lt;=nMX;j+=prnum[i])
                    prnum[j]=-1;
    j=0;
    for(i=1;i&lt;=nMX;i++)
        if(prnum[i]!=-1)
            pr[++j]=prnum[i];
    re j;
}*/</comment>

<comment type="block">/*ll m_ncr[10001][10001];
ll ncr(ll i,ll j)
{
    if(j==1) re i;
    if(i==j) re 1;
    if(m_ncr[i][j]!=-1) re m_ncr[i][j];
    re m_ncr[i][j]=ncr(i-1,j) + ncr(i-1,j-1);
}*/</comment>

<comment type="block">/*ll m_fact[21];
ll fact(ll i)
{
    if(i==1 || i==0) re 1;
    if(m_fact[i]!=-1) re m_fact[i];
    re m_fact[i]=i*fact(i-1);
}*/</comment>

<decl_stmt><decl><type><name>ll</name></type> <name>mod</name><init>=<expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ll</name></type> <name><name>mem</name><index>[<expr><literal type="number">100005</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>ll</name></type> <name>calc</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>td</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><name>i</name><operator>&gt;=</operator><name>n</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>re</name> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
    <if>if<condition>(<expr><name><name>mem</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>td</name></expr>]</index></name><operator>!=</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><decl_stmt><decl><type><name>re</name></type> <name><name>mem</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>td</name></expr>]</index></name></decl>;</decl_stmt></block></then></if>
    <decl_stmt><decl><type><name>ll</name></type> <name>rt</name></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>td</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name><name>mem</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>td</name></expr>]</index></name><operator>=</operator><operator>(</operator><call><name>calc</name><argument_list>(<argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>!</operator><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call><operator>%</operator><name>mod</name><operator>)</operator></expr>;</expr_stmt>
        <if>if<condition>(<expr><name><name>mem</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>td</name></expr>]</index></name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>mem</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>td</name></expr>]</index></name><operator>+=</operator><name>mod</name></expr>;</expr_stmt></block></then></if>
        <decl_stmt><decl><type><name>re</name></type> <name><name>mem</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>td</name></expr>]</index></name></decl>;</decl_stmt>
    }</block></then>
    <else>else
    <block>{
        <expr_stmt><expr><name>rt</name><operator>=</operator><call><name>calc</name><argument_list>(<argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>!</operator><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call><operator>%</operator><name>mod</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>rt</name><operator>+=</operator><operator>(</operator><call><name>calc</name><argument_list>(<argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call><operator>%</operator><name>mod</name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>rt</name><operator>%=</operator><name>mod</name></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>rt</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>rt</name><operator>+=</operator><name>mod</name></expr>;</expr_stmt></block></then></if>
        <decl_stmt><decl><type><name>re</name></type> <name><name>mem</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>td</name></expr>]</index></name><init>=<expr><name>rt</name></expr></init></decl>;</decl_stmt>
    }</block></else></if>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name> <name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>,<decl><type ref="prev"/><name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>cnt</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name>g</name></decl>,<decl><type ref="prev"/><name>flg</name></decl>,<decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>m</name></expr>;</expr_stmt>
    <macro><name>fr</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>m</argument>)</argument_list></macro>
    <block>{
        <macro><name>fr</name><argument_list>(<argument>j</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">3</literal></argument>)</argument_list></macro> <macro><name>fr</name><argument_list>(<argument>k</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">3</literal></argument>)</argument_list></macro> <expr_stmt><expr><name><name>mem</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    }</block>
    <expr_stmt><expr><name>x</name><operator>=</operator><operator>(</operator><call><name>calc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call><operator>+</operator><call><name>calc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt>
    <comment type="line">//cout&lt;&lt;m&lt;&lt;" "&lt;&lt;x&lt;&lt;endl;</comment>
    <expr_stmt><expr><name>x</name><operator>-=</operator><literal type="number">2</literal></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>x</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>x</name><operator>+=</operator><name>mod</name></expr>;</expr_stmt></block></then></if>
    <macro><name>fr</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro>
    <block>{
        <macro><name>fr</name><argument_list>(<argument>j</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">3</literal></argument>)</argument_list></macro> <macro><name>fr</name><argument_list>(<argument>k</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">3</literal></argument>)</argument_list></macro> <expr_stmt><expr><name><name>mem</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    }</block>
    <expr_stmt><expr><name>y</name><operator>=</operator><operator>(</operator><call><name>calc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call><operator>+</operator><call><name>calc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt>
    <comment type="line">//cout&lt;&lt;n&lt;&lt;" "&lt;&lt;y&lt;&lt;endl;</comment>
    <if>if<condition>(<expr><name>y</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>y</name><operator>+=</operator><name>mod</name></expr>;</expr_stmt></block></then></if>
    <expr_stmt><expr><name>x</name><operator>+=</operator><name>y</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>x</name><operator>%=</operator><name>mod</name></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>x</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>x</name><operator>+=</operator><name>mod</name></expr>;</expr_stmt></block></then></if>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>x</name></expr>;</expr_stmt>
}</block></function>
</unit>
