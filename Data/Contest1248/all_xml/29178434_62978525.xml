<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29178434_62978525.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name><name>cntp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt> <for>for <control>(<init><expr><name><name>std</name><operator>::</operator><name>cin</name></name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</init><condition><expr><name>n</name> <operator>--</operator></expr>;</condition><incr/>)</control>
	<block>{ <decl_stmt><decl><type><name>int</name></type> <name>pi</name></decl>;</decl_stmt> <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cin</name></name> <operator>&gt;&gt;</operator> <name>pi</name></expr><operator>,</operator><expr><operator>++</operator> <name><name>cntp</name><index>[<expr><name>pi</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> }</block></for>
	<decl_stmt><decl><type><name>int</name></type> <name><name>cntq</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>m</name></decl>;</decl_stmt> <for>for <control>(<init><expr><name><name>std</name><operator>::</operator><name>cin</name></name> <operator>&gt;&gt;</operator> <name>m</name></expr>;</init><condition><expr><name>m</name> <operator>--</operator></expr>;</condition><incr/>)</control>
	<block>{ <decl_stmt><decl><type><name>int</name></type> <name>qi</name></decl>;</decl_stmt> <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cin</name></name> <operator>&gt;&gt;</operator> <name>qi</name></expr><operator>,</operator><expr><operator>++</operator> <name><name>cntq</name><index>[<expr><name>qi</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> }</block></for>
	<expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <cast type="static">static_cast <argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name><name>cntp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></cast> <operator>*</operator> <name><name>cntq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <cast type="static">static_cast <argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name><name>cntp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></cast> <operator>*</operator> <name><name>cntq</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
}</block></function>
<function><name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><call><name><name>std</name><operator>::</operator><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt> <for>for <control>(<init><expr><name><name>std</name><operator>::</operator><name>cin</name></name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</init><condition><expr><name>t</name> <operator>--</operator></expr>;</condition><incr/>)</control> <block type="pseudo"><expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></for>
}</block></function></unit>
