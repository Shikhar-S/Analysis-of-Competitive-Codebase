<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29178896_63003924.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<comment type="line">// macros</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>overload_rep</name><parameter_list>(<parameter><type><name>_1</name></type></parameter>, <parameter><type><name>_2</name></type></parameter> ,<parameter><type><name>_3</name></type></parameter> ,<parameter><type><name>name</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>name</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>re_p</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = 0; i &lt; (n); ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>r_ep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = (x); i &lt;= (y); ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>overload_rep(__VA_ARGS__, r_ep, re_p)(__VA_ARGS__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a.begin(), a.end()</cpp:value></cpp:define>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>STOP_DEBUG</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro>\
    <cpp:value>do { cerr &lt;&lt; boolalpha &lt;&lt; "[" &lt;&lt; #__VA_ARGS__ &lt;&lt; "]:";\
    debug_cerr(__VA_ARGS__); cerr &lt;&lt; noboolalpha; } while (0)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="line">// functions</comment>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>bool</name></type> <name>chmax</name><parameter_list>(<parameter><decl><type><name>T</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <if>if <condition>(<expr><name>a</name> <operator>&lt;</operator> <name>b</name></expr>)</condition><then> <block>{ <expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt> <return>return <expr><literal type="number">1</literal></expr>;</return> }</block></then></if> <return>return <expr><literal type="number">0</literal></expr>;</return> }</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>bool</name></type> <name>chmin</name><parameter_list>(<parameter><decl><type><name>T</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <if>if <condition>(<expr><name>a</name> <operator>&gt;</operator> <name>b</name></expr>)</condition><then> <block>{ <expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt> <return>return <expr><literal type="number">1</literal></expr>;</return> }</block></then></if> <return>return <expr><literal type="number">0</literal></expr>;</return> }</block></function>
<function><type><name>void</name></type> <name>debug_cerr</name><parameter_list>()</parameter_list><block>{ <expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt> }</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>Head</name></parameter>, <parameter><type><name>class</name><modifier>...</modifier></type> <name>Tail</name></parameter>&gt;</parameter_list></template>
<type><name>void</name></type> <name>debug_cerr</name><parameter_list>(<parameter><decl><type><name>Head</name></type> <name>head</name></decl></parameter>, <parameter><decl><type><name>Tail</name><modifier>...</modifier></type> <name>tail</name></decl></parameter>)</parameter_list><block>{
    <expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal> <operator>&lt;&lt;</operator> <name>head</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>debug_cerr</name><argument_list>(<argument><expr><name>tail</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="line">// cin/cout setup</comment>
<struct>struct <name>IoSetup</name><block>{<public type="default">
    <constructor><name>IoSetup</name><parameter_list>()</parameter_list><block>{
        <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>fixed</name> <operator>&lt;&lt;</operator> <call><name>setprecision</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
</public>}</block> <decl><name>iosetup</name></decl>;</struct>

<comment type="line">// Codeforces Round #594 (Div. 2)</comment>

<struct><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>MeetSemiLattice</name></parameter>&gt;</parameter_list></template> 
struct <name>SparseTable</name><block>{<public type="default"> <comment type="line">// Sparse Table</comment>
</public><private>private:
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>MeetSemiLattice</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>dat</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>height</name></decl>;</decl_stmt>
</private><public>public:
    <constructor><name>SparseTable</name><parameter_list>()</parameter_list> <block>{}</block></constructor>
    <constructor><name>SparseTable</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>MeetSemiLattice</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>vec</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name>init</name><argument_list>(<argument><expr><name>vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></constructor>
    <function><type><name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>MeetSemiLattice</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>vec</name></decl></parameter>)</parameter_list> <block>{ <comment type="line">// initialization</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name><name>vec</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>h</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <while>while<condition>(<expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>h</name><operator>)</operator> <operator>&lt;=</operator> <name>n</name></expr>)</condition> <block type="pseudo"><expr_stmt><expr><operator>++</operator><name>h</name></expr>;</expr_stmt></block></while>
        <expr_stmt><expr><call><name><name>dat</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><call><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>MeetSemiLattice</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>h</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>height</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>height</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>height</name><index>[<expr><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></for>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>dat</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>vec</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
            <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{
                <expr_stmt><expr><name><name>dat</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name><name>min</name><argument_list type="generic">&lt;<argument><expr><name>MeetSemiLattice</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>dat</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>dat</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><call><name><name>min</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>j</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></for>
    }</block></function>
    <function><specifier>inline</specifier> <type><name>MeetSemiLattice</name></type> <name>get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <comment type="line">// get [l, r)</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><name><name>height</name><index>[<expr><name>b</name> <operator>-</operator> <name>a</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>min</name><argument_list type="generic">&lt;<argument><expr><name>MeetSemiLattice</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>dat</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name>a</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>dat</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name>b</name> <operator>-</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>t</name><operator>)</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return> 
    }</block></function>
</public>}</block>;</struct>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    
    <decl_stmt><decl><type><name>int</name></type> <name>N</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>N</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>s</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>counter</name><argument_list>(<argument><expr><name>N</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <macro><name>rep</name><argument_list>(<argument>i</argument>, <argument>N</argument>)</argument_list></macro><block>{
        <decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name><name>counter</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><name><name>counter</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>--</operator></expr>;</expr_stmt></block></else></if>
        <expr_stmt><expr><name><name>counter</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name><name>counter</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    }</block>

    <if>if<condition>(<expr><name><name>counter</name><index>[<expr><name>N</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"0\n1 1\n"</literal></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vec</name><argument_list>(<argument><expr><name>N</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <macro><name>rep</name><argument_list>(<argument>i</argument>, <argument>N</argument>)</argument_list></macro><expr_stmt><expr><name><name>vec</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>counter</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>mi</name> <init>= <expr><name>N</name></expr></init></decl>;</decl_stmt>
    <macro><name>rep</name><argument_list>(<argument>i</argument>, <argument>N</argument>)</argument_list></macro><expr_stmt><expr><call><name>chmin</name><argument_list>(<argument><expr><name>mi</name></expr></argument>, <argument><expr><name><name>vec</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>most</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <macro><name>rep</name><argument_list>(<argument>i</argument>, <argument>N</argument>)</argument_list></macro><if>if<condition>(<expr><name><name>vec</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>mi</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>most</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
    <decl_stmt><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>ans</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

    <macro><name>rep</name><argument_list>(<argument>j</argument>, <argument>N</argument>)</argument_list></macro><macro><name>rep</name><argument_list>(<argument>i</argument>, <argument>j</argument>)</argument_list></macro><block>{
        <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'('</literal> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <literal type="char">')'</literal></expr>)</condition><then><block>{
            <decl_stmt><decl><type><name>int</name></type> <name>tmi</name> <init>= <expr><name>N</name></expr></init></decl>;</decl_stmt>
            <macro><name>rep</name><argument_list>(<argument>k</argument>, <argument>i</argument>)</argument_list></macro><expr_stmt><expr><call><name>chmin</name><argument_list>(<argument><expr><name>tmi</name></expr></argument>, <argument><expr><name><name>vec</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <macro><name>rep</name><argument_list>(<argument>k</argument>, <argument>i</argument>, <argument>j - <literal type="number">1</literal></argument>)</argument_list></macro><expr_stmt><expr><call><name>chmin</name><argument_list>(<argument><expr><name>tmi</name></expr></argument>, <argument><expr><name><name>vec</name><index>[<expr><name>k</name></expr>]</index></name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <macro><name>rep</name><argument_list>(<argument>k</argument>, <argument>j</argument>, <argument>N - <literal type="number">1</literal></argument>)</argument_list></macro><expr_stmt><expr><call><name>chmin</name><argument_list>(<argument><expr><name>tmi</name></expr></argument>, <argument><expr><name><name>vec</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>tmp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <macro><name>rep</name><argument_list>(<argument>k</argument>, <argument>i</argument>)</argument_list></macro><if>if<condition>(<expr><name><name>vec</name><index>[<expr><name>k</name></expr>]</index></name> <operator>==</operator> <name>tmi</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>tmp</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
            <macro><name>rep</name><argument_list>(<argument>k</argument>, <argument>i</argument>, <argument>j - <literal type="number">1</literal></argument>)</argument_list></macro><if>if<condition>(<expr><name><name>vec</name><index>[<expr><name>k</name></expr>]</index></name> <operator>-</operator> <literal type="number">2</literal> <operator>==</operator> <name>tmi</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>tmp</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
            <macro><name>rep</name><argument_list>(<argument>k</argument>, <argument>j</argument>, <argument>N - <literal type="number">1</literal></argument>)</argument_list></macro><if>if<condition>(<expr><name><name>vec</name><index>[<expr><name>k</name></expr>]</index></name> <operator>==</operator> <name>tmi</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>tmp</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
            <if>if<condition>(<expr><call><name>chmax</name><argument_list>(<argument><expr><name>most</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>=</operator> <call><name>make_pair</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        }</block></then></if>
        <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">')'</literal> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition><then><block>{
            <decl_stmt><decl><type><name>int</name></type> <name>tmi</name> <init>= <expr><name>N</name></expr></init></decl>;</decl_stmt>
            <macro><name>rep</name><argument_list>(<argument>k</argument>, <argument>i</argument>)</argument_list></macro><expr_stmt><expr><call><name>chmin</name><argument_list>(<argument><expr><name>tmi</name></expr></argument>, <argument><expr><name><name>vec</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <macro><name>rep</name><argument_list>(<argument>k</argument>, <argument>i</argument>, <argument>j - <literal type="number">1</literal></argument>)</argument_list></macro><expr_stmt><expr><call><name>chmin</name><argument_list>(<argument><expr><name>tmi</name></expr></argument>, <argument><expr><name><name>vec</name><index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <macro><name>rep</name><argument_list>(<argument>k</argument>, <argument>j</argument>, <argument>N - <literal type="number">1</literal></argument>)</argument_list></macro><expr_stmt><expr><call><name>chmin</name><argument_list>(<argument><expr><name>tmi</name></expr></argument>, <argument><expr><name><name>vec</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>tmp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <macro><name>rep</name><argument_list>(<argument>k</argument>, <argument>i</argument>)</argument_list></macro><if>if<condition>(<expr><name><name>vec</name><index>[<expr><name>k</name></expr>]</index></name> <operator>==</operator> <name>tmi</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>tmp</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
            <macro><name>rep</name><argument_list>(<argument>k</argument>, <argument>i</argument>, <argument>j - <literal type="number">1</literal></argument>)</argument_list></macro><if>if<condition>(<expr><name><name>vec</name><index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal> <operator>==</operator> <name>tmi</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>tmp</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
            <macro><name>rep</name><argument_list>(<argument>k</argument>, <argument>j</argument>, <argument>N - <literal type="number">1</literal></argument>)</argument_list></macro><if>if<condition>(<expr><name><name>vec</name><index>[<expr><name>k</name></expr>]</index></name> <operator>==</operator> <name>tmi</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>tmp</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
            <if>if<condition>(<expr><call><name>chmax</name><argument_list>(<argument><expr><name>most</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>=</operator> <call><name>make_pair</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        }</block></then></if>
    }</block>

    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>most</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal> <operator>&lt;&lt;</operator> <name><name>ans</name><operator>.</operator><name>first</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="char">' '</literal> <operator>&lt;&lt;</operator> <name><name>ans</name><operator>.</operator><name>second</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>

}</block></function></unit>
