<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29174880_62985993.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>int</name></type> <name><name>lo</name><index>[<expr><literal type="number">101010</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lx</name></decl>,<decl><type ref="prev"/><name>ly</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>lo</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>lo</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>lo</name><operator>+</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">//	cout&lt;&lt;lo[n]&lt;&lt;endl;</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>pl</name><init>=<expr><name>n</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>dis</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<if>if<condition>(<expr><name>n</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="number">1ll</literal><operator>*</operator><name><name>lo</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>*</operator><name><name>lo</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></then></if>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<expr_stmt><expr><name>lx</name><operator>+=</operator><name><name>lo</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>ly</name><operator>+=</operator><name><name>lo</name><index>[<expr><name>pl</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>pl</name><operator>--</operator></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>i</name><operator>+</operator><literal type="number">1</literal><operator>==</operator><name>pl</name></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>ly</name><operator>+=</operator><name><name>lo</name><index>[<expr><name>pl</name></expr>]</index></name></expr>;</expr_stmt>
			<break>break;</break>
		}</block></then>
		<elseif>else <if>if<condition>(<expr><name>i</name><operator>+</operator><literal type="number">1</literal><operator>&gt;</operator><name>pl</name></expr>)</condition><then>
			<block type="pseudo"><break>break;</break></block></then></if></elseif></if>
	}</block></for>
	<expr_stmt><expr><name>dis</name><operator>=</operator><literal type="number">1ll</literal><operator>*</operator><name>lx</name><operator>*</operator><name>lx</name><operator>+</operator><literal type="number">1ll</literal><operator>*</operator><name>ly</name><operator>*</operator><name>ly</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>dis</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
