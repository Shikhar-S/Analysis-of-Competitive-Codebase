<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29178277_62978494.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int (i)=0; (i)&lt;(n); (i)++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR1</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int (i)=1; (i)&lt;=(n); (i)++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FORI</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int (i)=n-1; (i)&gt;=0; (i)--)</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>argv</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>setprecision</name><argument_list>(<argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">123456789</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"d:\\code\\cpp\\contests\\stdin"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">//freopen("d:\\code\\cpp\\contests\\stdout", "w", stdout);</comment>
    }</block></then></if>

    <decl_stmt><decl><type><name>int</name></type> <name>T</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>T</name></expr>;</expr_stmt>
    <macro><name>FOR</name><argument_list>(<argument>t</argument>, <argument>T</argument>)</argument_list></macro><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>p</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>pm</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
        <macro><name>FOR</name><argument_list>(<argument>i</argument>, <argument>n</argument>)</argument_list></macro> <block>{
            <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>pm</name><index>[<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>%</operator><literal type="number">2</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
        }</block>

        <decl_stmt><decl><type><name>int</name></type> <name>m</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>m</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>q</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>qm</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
        <macro><name>FOR</name><argument_list>(<argument>i</argument>, <argument>m</argument>)</argument_list></macro> <block>{
            <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>q</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>qm</name><index>[<expr><name><name>q</name><index>[<expr><name>i</name></expr>]</index></name><operator>%</operator><literal type="number">2</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
        }</block>

        <decl_stmt><decl><type><name>ll</name></type> <name>sol</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <macro><name>FOR</name><argument_list>(<argument>i</argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro><block>{
            <expr_stmt><expr><name>sol</name> <operator>+=</operator> <name><name>pm</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>qm</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        }</block>
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>sol</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    }</block>


    <if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">123456789</literal></expr>)</condition><then>        <block type="pseudo"><expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <call><name>clock</name><argument_list>()</argument_list></call><operator>*</operator><literal type="number">1.0</literal><operator>/</operator><name>CLOCKS_PER_SEC</name> <operator>&lt;&lt;</operator> <literal type="string">" sec\n"</literal></expr>;</expr_stmt></block></then></if>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
