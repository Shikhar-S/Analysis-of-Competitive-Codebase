<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29142458_63006948.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAXN</name> <init>= <expr><literal type="number">500</literal><operator>+</operator><literal type="number">20</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MOD</name> <init>= <expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name><name>num</name><index>[<expr><name>MAXN</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
  <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>s</name></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
    <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'('</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name><name>num</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>num</name><index>[<expr><name>i</name><operator>+</operator><name>n</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then>
    <else>else <block type="pseudo"><expr_stmt><expr><name><name>num</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>num</name><index>[<expr><name>i</name><operator>+</operator><name>n</name></expr>]</index></name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
  }</block></for>
  <decl_stmt><decl><type><name>int</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>li</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>ri</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
    <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{
      <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>num</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>num</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>num</name><index>[<expr><name>i</name><operator>+</operator><name>n</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>num</name><index>[<expr><name>j</name><operator>+</operator><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>int</name></type> <name>start</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>maxn</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>sum</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>k</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>n</name><operator>*</operator><literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>k</name> <operator>-</operator> <name>start</name> <operator>&lt;</operator> <name>n</name> <operator>&amp;&amp;</operator> <name>start</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{
        <expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>num</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
        <comment type="line">//if(i==2 &amp;&amp; j==3)cout &lt;&lt; " start " &lt;&lt; start &lt;&lt; endl;</comment>
        <if>if<condition>(<expr><name>sum</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
          <expr_stmt><expr><name>start</name> <operator>=</operator> <name>k</name><operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name>maxn</name><operator>=</operator><literal type="number">0</literal></expr><operator>,</operator><expr><name>sum</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
        }</block></then>
        <elseif>else <if>if<condition>(<expr><name>sum</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
          <expr_stmt><expr><name>maxn</name><operator>++</operator></expr>;</expr_stmt>
        }</block></then></if></elseif></if>
      }</block></for>
      <if>if<condition>(<expr><name>sum</name><operator>!=</operator><literal type="number">0</literal> <operator>||</operator> <name>k</name> <operator>-</operator> <name>start</name> <operator>!=</operator> <name>n</name></expr>)</condition><then><block>{<expr_stmt><expr><name>maxn</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>}</block></then></if>
      <if>if<condition>(<expr><name>ans</name> <operator>&lt;</operator> <name>maxn</name></expr>)</condition><then><block>{
        <expr_stmt><expr><name>li</name><operator>=</operator><name>i</name></expr><operator>,</operator><expr><name>ri</name><operator>=</operator><name>j</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ans</name><operator>=</operator><name>maxn</name></expr>;</expr_stmt>
      }</block></then></if>
      <expr_stmt><expr><name>ans</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>ans</name></expr></argument>,<argument><expr><name>maxn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>num</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>num</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>num</name><index>[<expr><name>i</name><operator>+</operator><name>n</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>num</name><index>[<expr><name>j</name><operator>+</operator><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
  }</block></for>
  <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>li</name><operator>+</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name>ri</name><operator>+</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
}</block></function></unit>
