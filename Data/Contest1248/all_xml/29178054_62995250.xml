<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29178054_62995250.cpp"><comment type="line">// Running Offline</comment>
<comment type="line">// g++ tester.cpp</comment>
<comment type="line">// ./a.out</comment>
<comment type="line">// #include "/Users/manasgupta/Desktop/stdc++.h"</comment>
 
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>compile</name> <cpp:literal>"03"</cpp:literal></cpp:pragma>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<comment type="line">// #define int long long int </comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>float</name></cpp:macro> <cpp:value>double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pi</name></cpp:macro> <cpp:value>pair&lt;int,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inf</name></cpp:macro> <cpp:value>1e9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EPS</name></cpp:macro> <cpp:value>1e-6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>'\n'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOS</name></cpp:macro> <cpp:value>ios::sync_with_stdio(0), cin.tie(0), cout.tie(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILEIO</name><parameter_list>(<parameter><type><name>name1</name></type></parameter>, <parameter><type><name>name2</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>freopen(name1".txt","r",stdin); \
    freopen(name2".txt","w",stdout);</cpp:value></cpp:define>
 
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name><init>=<expr><literal type="number">100005</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mod</name> <init>= <expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>
 
<function><type><name>int</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
	<if>if <condition>(<expr><name>b</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>a</name></expr>;</return></block></then></if>
	<return>return <expr><call><name>gcd</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name><operator>%</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
 
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ans</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>ind</name></decl>;</decl_stmt>

<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><name>IOS</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>s</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ans</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ind</name><operator>.</operator><name>fi</name></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ind</name><operator>.</operator><name>se</name></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>gg</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'('</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>gg</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
	}</block></for>
	<if>if <condition>(<expr><name>n</name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">1</literal> <operator>or</operator> <name>gg</name><operator>!=</operator><name>n</name><operator>/</operator><literal type="number">2</literal></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>ind</name><operator>.</operator><name>fi</name></name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name><name>ind</name><operator>.</operator><name>se</name></name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></then></if>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><name>i</name></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
		<block>{
			<decl_stmt><decl><type><name>string</name></type> <name>temp</name></decl>;</decl_stmt>
			<expr_stmt><expr><name>temp</name><operator>=</operator><name>s</name></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>char</name></type> <name>wow</name></decl>;</decl_stmt>
			<expr_stmt><expr><name>wow</name><operator>=</operator><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>temp</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><name><name>temp</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>temp</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>wow</name></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>damn</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>flag</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>t</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>lol</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
			<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block>{
				<if>if <condition>(<expr><name><name>temp</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'('</literal></expr>)</condition><then>
				<block>{
					<expr_stmt><expr><name>t</name><operator>++</operator></expr>;</expr_stmt>
				}</block></then>
				<else>else
				<block>{
					<expr_stmt><expr><name>t</name><operator>--</operator></expr>;</expr_stmt>
				}</block></else></if>
				<expr_stmt><expr><name>lol</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>lol</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></for>
			<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block>{
				<if>if <condition>(<expr><name><name>temp</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'('</literal></expr>)</condition><then>
				<block>{
					<expr_stmt><expr><name>t</name><operator>++</operator></expr>;</expr_stmt>
				}</block></then>
				<else>else
				<block>{
					<expr_stmt><expr><name>t</name><operator>--</operator></expr>;</expr_stmt>
				}</block></else></if>
				<if>if <condition>(<expr><name>t</name><operator>==</operator><name>lol</name></expr>)</condition><then>
				<block>{
					<expr_stmt><expr><name>damn</name><operator>++</operator></expr>;</expr_stmt>
				}</block></then></if>
			}</block></for>
			<comment type="line">// cout&lt;&lt;(i+1)&lt;&lt;" "&lt;&lt;(j+1)&lt;&lt;" "&lt;&lt;s&lt;&lt;" "&lt;&lt;damn&lt;&lt;" "&lt;&lt;lol&lt;&lt;endl;</comment>
			<if>if <condition>(<expr><name>flag</name> <operator>and</operator> <name>ans</name><operator>&lt;</operator><name>damn</name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name>ans</name><operator>=</operator><name>damn</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>ind</name><operator>.</operator><name>fi</name></name><operator>=</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>ind</name><operator>.</operator><name>se</name></name><operator>=</operator><name>j</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
			}</block></then></if>
		}</block></for>
	}</block></for>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>ind</name><operator>.</operator><name>fi</name></name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name><name>ind</name><operator>.</operator><name>se</name></name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
