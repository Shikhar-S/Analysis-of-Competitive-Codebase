<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29169175_63004123.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>maxn</name></cpp:macro> <cpp:value>2005</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>maxm</name></cpp:macro> <cpp:value>500005</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inf</name></cpp:macro> <cpp:value>0x7fffffff</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt> <decl_stmt><decl><type><name><name>stack</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>ok1</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>ok2</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<function><specifier>inline</specifier> <type><name>int</name></type> <name>read</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>x</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>f</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> <decl_stmt><decl><type><name>char</name></type> <name>c</name><init>=<expr><call><name>getchar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init>;</init><condition><expr><operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</condition><incr><expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr></incr>)</control> <block type="pseudo"><if>if<condition>(<expr><name>c</name><operator>==</operator><literal type="char">'-'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>f</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if></block></for>
	<for>for<control>(<init>;</init><condition><expr><call><name>isdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</condition><incr><expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>x</name><operator>=</operator><name>x</name><operator>*</operator><literal type="number">10</literal><operator>+</operator><name>c</name><operator>-</operator><literal type="char">'0'</literal></expr>;</expr_stmt></block></for>
	<return>return <expr><name>x</name><operator>*</operator><name>f</name></expr>;</return>
}</block></function>

<function><specifier>inline</specifier> <type><name>int</name></type> <name>calc</name><parameter_list>()</parameter_list><block>{
	<while>while<condition>(<expr><operator>!</operator><call><name><name>s</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block type="pseudo"><expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
	<decl_stmt><decl><type><name>int</name></type> <name>siz</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>num1</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<if>if<condition>(<expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'('</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><name>siz</name><operator>++</operator></expr><operator>,</operator><expr><name>num1</name><operator>++</operator></expr>;</expr_stmt></block></then>
		<elseif>else <if>if<condition>(<expr><operator>!</operator><call><name><name>s</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>s</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call><operator>==</operator><literal type="char">'('</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr><operator>,</operator><expr><name>siz</name><operator>--</operator></expr><operator>,</operator><expr><name>num1</name><operator>--</operator></expr>;</expr_stmt></block></then></if></elseif>
		<else>else <block type="pseudo"><expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><name>siz</name><operator>++</operator></expr>;</expr_stmt></block></else></if>
		<if>if<condition>(<expr><operator>!</operator><name>num1</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>ok1</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>siz</name></expr>;</expr_stmt></block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><name><name>ok1</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
	}</block></for>
	<while>while<condition>(<expr><operator>!</operator><call><name><name>s</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block type="pseudo"><expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
	<expr_stmt><expr><name>siz</name><operator>=</operator><literal type="number">0</literal></expr><operator>,</operator><expr><name>num1</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>n</name></expr></init></decl>;</init><condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">1</literal></expr>;</condition><incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block>{
		<if>if<condition>(<expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">')'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><name>siz</name><operator>++</operator></expr><operator>,</operator><expr><name>num1</name><operator>++</operator></expr>;</expr_stmt></block></then>
		<elseif>else <if>if<condition>(<expr><operator>!</operator><call><name><name>s</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>s</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call><operator>==</operator><literal type="char">')'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr><operator>,</operator><expr><name>siz</name><operator>--</operator></expr><operator>,</operator><expr><name>num1</name><operator>--</operator></expr>;</expr_stmt></block></then></if></elseif>
		<else>else <block type="pseudo"><expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><name>siz</name><operator>++</operator></expr>;</expr_stmt></block></else></if>
		<if>if<condition>(<expr><operator>!</operator><name>num1</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>ok2</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>siz</name></expr>;</expr_stmt></block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><name><name>ok2</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
		<comment type="line">//cout&lt;&lt;siz&lt;&lt;" "&lt;&lt;ok2[i]&lt;&lt;endl;</comment>
	}</block></for>
	<decl_stmt><decl><type><name>int</name></type> <name>res</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<if>if<condition>(<expr><name><name>ok1</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name><name>ok2</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>ok1</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>res</name><operator>++</operator></expr>;</expr_stmt></block></then></if>}</block></for>
	<return>return <expr><name>res</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><name>n</name><operator>=</operator><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>str</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>str</name><index>[<expr><name>i</name><operator>+</operator><name>n</name></expr>]</index></name><operator>=</operator><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
	<decl_stmt><decl><type><name>int</name></type> <name>num</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<if>if<condition>(<expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'('</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>num</name><operator>++</operator></expr>;</expr_stmt></block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><name>num</name><operator>--</operator></expr>;</expr_stmt></block></else></if>
	}</block></for>
	<decl_stmt><decl><type><name>int</name></type> <name>ans</name><init>=<expr><call><name>calc</name><argument_list>()</argument_list></call></expr></init></decl>,<decl><type ref="prev"/><name>pl</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>pr</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
			<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>str</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>str</name><index>[<expr><name>i</name><operator>+</operator><name>n</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>str</name><index>[<expr><name>j</name><operator>+</operator><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>t</name><init>=<expr><call><name>calc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> <if>if<condition>(<expr><name>t</name><operator>&gt;</operator><name>ans</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ans</name><operator>=</operator><name>t</name></expr><operator>,</operator><expr><name>pl</name><operator>=</operator><name>i</name></expr><operator>,</operator><expr><name>pr</name><operator>=</operator><name>j</name></expr>;</expr_stmt></block></then></if>
			<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>str</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>str</name><index>[<expr><name>i</name><operator>+</operator><name>n</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>str</name><index>[<expr><name>j</name><operator>+</operator><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for></block></for>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><name>endl</name><operator>&lt;&lt;</operator><name>pl</name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name>pr</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
