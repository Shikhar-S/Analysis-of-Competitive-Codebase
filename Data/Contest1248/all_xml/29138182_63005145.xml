<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29138182_63005145.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;ext/pb_ds/assoc_container.hpp&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;ext/pb_ds/tree_policy.hpp&gt;</cpp:file></cpp:include>
<comment type="line">// #include &lt;boost/multiprecision/cpp_int.hpp&gt; </comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gc</name></cpp:macro> <cpp:value>getchar</cpp:value></cpp:define><comment type="line">//_unlocked</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pc</name></cpp:macro> <cpp:value>putchar</cpp:value></cpp:define><comment type="line">//_unlocked</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ld</name></cpp:macro> <cpp:value>long double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pp</name></cpp:macro> <cpp:value>pair&lt;int,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ppl</name></cpp:macro> <cpp:value>pair&lt;ll,ll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bigint</name></cpp:macro> <cpp:value>boost::multiprecision::cpp_int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>finp</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(0);cin.tie(0);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bc</name></cpp:macro> <cpp:value>__builtin_popcountll</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>afor</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=a;i&lt;=b;++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bfor</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=a;i&gt;=b;--i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vi</name></cpp:macro> <cpp:value>vector&lt;int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vpp</name></cpp:macro> <cpp:value>vector&lt;pp&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vll</name></cpp:macro> <cpp:value>vector&lt;ll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fr</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<using>using <namespace>namespace <name>__gnu_pbds</name>;</namespace></using>

<decl_stmt><decl><type><name>char</name></type> <name><name>putnb</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>putn</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<if>if<condition>(<expr><operator>!</operator><name>n</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>pc</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if><if>if<condition>(<expr><name>n</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>pc</name><argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><name>n</name><operator>=</operator><literal type="number">0</literal><operator>-</operator><name>n</name></expr>;</expr_stmt></block></then></if><decl_stmt><decl><type><name>int</name></type> <name>pi</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt><while>while<condition>(<expr><name>n</name></expr>)</condition><block type="pseudo"><expr_stmt><expr><name><name>putnb</name><index>[<expr><name>pi</name><operator>++</operator></expr>]</index></name><operator>=</operator><operator>(</operator><name>n</name><operator>%</operator><literal type="number">10</literal><operator>)</operator><operator>+</operator><literal type="char">'0'</literal></expr><operator>,</operator><expr><name>n</name><operator>/=</operator><literal type="number">10</literal></expr>;</expr_stmt></block></while><while>while<condition>(<expr><name>pi</name></expr>)</condition><block type="pseudo"><expr_stmt><expr><call><name>pc</name><argument_list>(<argument><expr><name><name>putnb</name><index>[<expr><operator>--</operator><name>pi</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></while>}</block></function>
<function><type><name>void</name></type> <name>sci</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{<decl_stmt><decl><type><specifier>register</specifier> <name>char</name></type> <name>c</name> <init>= <expr><call><name>gc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt><for>for<control>(<init>;</init> <condition><expr><operator>(</operator><name>c</name><operator>&lt;</operator><literal type="number">48</literal><operator>)</operator><operator>||</operator><operator>(</operator><name>c</name><operator>&gt;</operator><literal type="number">57</literal><operator>)</operator></expr>;</condition><incr><expr><name>c</name> <operator>=</operator> <call><name>gc</name><argument_list>()</argument_list></call></expr></incr>)</control><block type="pseudo"><empty_stmt>;</empty_stmt></block></for><for>for<control>(<init>;</init> <condition><expr><operator>(</operator><name>c</name><operator>&gt;</operator><literal type="number">47</literal><operator>)</operator><operator>&amp;&amp;</operator><operator>(</operator><name>c</name><operator>&lt;</operator><literal type="number">58</literal><operator>)</operator></expr>;</condition><incr><expr><name>c</name> <operator>=</operator> <call><name>gc</name><argument_list>()</argument_list></call></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <call>(<name>int</name>)<argument_list>(<argument><expr><operator>(</operator><operator>(</operator><operator>(</operator><operator>*</operator><name>x</name><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>x</name><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <name>c</name> <operator>-</operator> <literal type="number">48</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>}</block></function>
<function><type><name>void</name></type> <name>scll</name><parameter_list>(<parameter><decl><type><name>ll</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>  <block>{<decl_stmt><decl><type><specifier>register</specifier> <name>char</name></type> <name>c</name> <init>= <expr><call><name>gc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt><for>for<control>(<init>;</init> <condition><expr><operator>(</operator><name>c</name><operator>&lt;</operator><literal type="number">48</literal><operator>)</operator><operator>||</operator><operator>(</operator><name>c</name><operator>&gt;</operator><literal type="number">57</literal><operator>)</operator></expr>;</condition><incr><expr><name>c</name> <operator>=</operator> <call><name>gc</name><argument_list>()</argument_list></call></expr></incr>)</control><block type="pseudo"><empty_stmt>;</empty_stmt></block></for><for>for<control>(<init>;</init> <condition><expr><operator>(</operator><name>c</name><operator>&gt;</operator><literal type="number">47</literal><operator>)</operator><operator>&amp;&amp;</operator><operator>(</operator><name>c</name><operator>&lt;</operator><literal type="number">58</literal><operator>)</operator></expr>;</condition><incr><expr><name>c</name> <operator>=</operator> <call><name>gc</name><argument_list>()</argument_list></call></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator>  <call>(<name>ll</name>)<argument_list>(<argument><expr><operator>(</operator><operator>(</operator><operator>(</operator><operator>*</operator><name>x</name><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>x</name><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <name>c</name> <operator>-</operator> <literal type="number">48</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>}</block></function>
<function><type><name>ll</name></type> <name>fp</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<if>if<condition>(<expr><name>b</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">1</literal><operator>%</operator><name>c</name></expr>;</return></block></then></if> <if>if<condition>(<expr><name>b</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><name>a</name><operator>%</operator><name>c</name></expr>;</return></block></then></if> <decl_stmt><decl><type><name>ll</name></type> <name>ret</name><init>=<expr><call><name>fp</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name><operator>/</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <expr_stmt><expr><name>ret</name><operator>=</operator><operator>(</operator><name>ret</name><operator>*</operator><name>ret</name><operator>)</operator><operator>%</operator><name>c</name></expr>;</expr_stmt> <if>if<condition>(<expr><name>b</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>ret</name><operator>=</operator><operator>(</operator><name>ret</name><operator>*</operator><name>a</name><operator>)</operator><operator>%</operator><name>c</name></expr>;</expr_stmt></block></then></if> <return>return <expr><name>ret</name></expr>;</return>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>mod</name><init>=<expr><literal type="number">1e9</literal> <operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>mod2</name><init>=<expr><literal type="number">1999999973</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>inf</name><init>=<expr><literal type="number">1e18</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>infs</name><init>=<expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name><init>=<expr><literal type="number">1000000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>long</name> <name>double</name></type> <name>PI</name> <init>= <expr><call><name>acos</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<using><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
using <name>ordered_set</name> <init>= <type><name><name>tree</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name>null_type</name></expr></argument>, <argument><expr><name><name>less</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>rb_tree_tag</name></expr></argument>, <argument><expr><name>tree_order_statistics_node_update</name></expr></argument>&gt;</argument_list></name></type></init>;</using>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
<comment type="line">//ll c[N + 5];</comment>
<comment type="line">//int a[N + 5];</comment>
<decl_stmt><decl><type><name>bool</name></type> <name><name>vis</name><index>[<expr><name>N</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vi</name></type> <name><name>adj</name><index>[<expr><name>N</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vi</name></type> <name><name>adj2</name><index>[<expr><name>N</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vi</name></type> <name>topo</name></decl>;</decl_stmt>
<comment type="line">//ll cst[N + 5];</comment>
<decl_stmt><decl><type><name>vi</name></type> <name><name>comps</name><index>[<expr><name>N</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>cid</name><index>[<expr><name>N</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>


<function><type><name>void</name></type> <name>dfs1</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>)</parameter_list>
<block>{
  <if>if<condition>(<expr><name><name>vis</name><index>[<expr><name>pos</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><return>return;</return></block></then></if>
  <expr_stmt><expr><name><name>vis</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
  <for>for<control>(<init><decl><type><name>auto</name></type> <name>i</name><range>:<expr><name><name>adj</name><index>[<expr><name>pos</name></expr>]</index></name></expr></range></decl></init>)</control>
  <block>{
    <expr_stmt><expr><call><name>dfs1</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>
  <expr_stmt><expr><call><name><name>topo</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>



<function><type><name>void</name></type> <name>dfs2</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>cmp</name></decl></parameter>)</parameter_list>
<block>{
  <if>if<condition>(<expr><name><name>vis</name><index>[<expr><name>pos</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><return>return;</return></block></then></if>
  <expr_stmt><expr><name><name>cid</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <name>cmp</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>comps</name><index>[<expr><name>cmp</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>vis</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
 <comment type="line">// cst[cmp] = min(cst[cmp] ,  c[pos]);</comment>
  <for>for<control>(<init><decl><type><name>auto</name></type> <name>i</name><range>:<expr><name><name>adj2</name><index>[<expr><name>pos</name></expr>]</index></name></expr></range></decl></init>)</control>
  <block>{
    <expr_stmt><expr><call><name>dfs2</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>
}</block></function>

<comment type="line">//set&lt;int&gt; adj3[N + 5];</comment>
<decl_stmt><decl><type><name>int</name></type> <name><name>in</name><index>[<expr><name>N</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
  <expr_stmt><expr><name>finp</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
  <while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition>
  <block>{
	   <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>m</name></expr>;</expr_stmt>
	  <macro><name>afor</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro><expr_stmt><expr><name><name>vis</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">false</literal></expr><operator>,</operator><expr><name><name>adj</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>clear</name><argument_list>()</argument_list></call></expr><operator>,</operator><expr><name><name>adj2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>clear</name><argument_list>()</argument_list></call></expr><operator>,</operator><expr><name><name>comps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	  <macro><name>afor</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>m</argument>)</argument_list></macro>
	  <block>{
	    <decl_stmt><decl><type><name>int</name></type> <name>u</name></decl>,<decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
	    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>u</name><operator>&gt;&gt;</operator><name>v</name></expr>;</expr_stmt>
	    <if>if<condition>(<expr><name>u</name> <operator>==</operator> <name>v</name></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
	    <expr_stmt><expr><name><name>adj</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>adj2</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  }</block>
	  
	  <macro><name>afor</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro>
	  <block>{
	    <expr_stmt><expr><call><name>dfs1</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  }</block>
	  <macro><name>afor</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro><expr_stmt><expr><name><name>vis</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>

	  <decl_stmt><decl><type><name>int</name></type> <name>nn</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	  <while>while<condition>(<expr><call><name><name>topo</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition>
	  <block>{
	    <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><call><name><name>topo</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	    <expr_stmt><expr><call><name><name>topo</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    <if>if<condition>(<expr><name><name>vis</name><index>[<expr><name>x</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
	    <expr_stmt><expr><operator>++</operator><name>nn</name></expr>;</expr_stmt>
	    <comment type="line">//cst[nn] = inf;</comment>
	    <expr_stmt><expr><call><name>dfs2</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>nn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  }</block></while>

	  <macro><name>afor</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>nn</argument>)</argument_list></macro><expr_stmt><expr><name><name>in</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	  <macro><name>afor</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro>
	  <block>{
	    <for>for<control>(<init><decl><type><name>auto</name></type> <name>j</name><range>:<expr><name><name>adj</name><index>[<expr><name>i</name></expr>]</index></name></expr></range></decl></init>)</control>
	    <block>{
	      <if>if<condition>(<expr><name><name>cid</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>cid</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then>
	      <block>{
	        <expr_stmt><expr><name><name>in</name><index>[<expr><name><name>cid</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
	      }</block></then></if>
	    }</block></for>
	  }</block>

	  <decl_stmt><decl><type><name>int</name></type> <name>cand</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	  <macro><name>afor</name><argument_list>(<argument>i</argument>, <argument><literal type="number">1</literal></argument>, <argument>nn</argument>)</argument_list></macro><if>if<condition>(<expr><name><name>in</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>cand</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block></then></if>



	  <if>if<condition>(<expr><name>nn</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No\n"</literal></expr>;</expr_stmt></block></then>
	  <else>else
	  <block>{
	  	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Yes\n"</literal></expr>;</expr_stmt>
	  	<decl_stmt><decl><type><name>vi</name></type> <name>jury</name></decl>, <decl><type ref="prev"/><name>part</name></decl>;</decl_stmt>
	  	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>cand</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  	<macro><name>afor</name><argument_list>(<argument>i</argument>, <argument><literal type="number">1</literal></argument>, <argument>nn</argument>)</argument_list></macro>
	  	<block>{
	  		<if>if<condition>(<expr><name>i</name> <operator>==</operator> <name>cand</name></expr>)</condition><then>
	  		<block>{
	  			<for>for<control>(<init><decl><type><name>auto</name></type> <name>j</name><range>:<expr><name><name>comps</name><index>[<expr><name>i</name></expr>]</index></name></expr></range></decl></init>)</control><block type="pseudo"><expr_stmt><expr><call><name><name>jury</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	  		}</block></then>
	  		<else>else
	  		<block>{
	  			<for>for<control>(<init><decl><type><name>auto</name></type> <name>j</name><range>:<expr><name><name>comps</name><index>[<expr><name>i</name></expr>]</index></name></expr></range></decl></init>)</control><block type="pseudo"><expr_stmt><expr><call><name><name>part</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	  		}</block></else></if>
	  	}</block>
	  	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name><name>jury</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><call><name><name>part</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&lt;&lt;</operator><literal type="string">"\n"</literal></expr>;</expr_stmt>
	  	<for>for<control>(<init><decl><type><name>auto</name></type> <name>i</name><range>:<expr><name>jury</name></expr></range></decl></init>)</control><block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>i</name><operator>&lt;&lt;</operator><literal type="string">" "</literal></expr>;</expr_stmt></block></for> <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"\n"</literal></expr>;</expr_stmt>
	  	<for>for<control>(<init><decl><type><name>auto</name></type> <name>i</name><range>:<expr><name>part</name></expr></range></decl></init>)</control><block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>i</name><operator>&lt;&lt;</operator><literal type="string">" "</literal></expr>;</expr_stmt></block></for> <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"\n"</literal></expr>;</expr_stmt>
	  }</block></else></if>
}</block></while>
  
<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
