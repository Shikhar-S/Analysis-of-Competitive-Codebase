<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29179674_62991494.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cctype&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>LL</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name><init>=<expr><literal type="number">1e5</literal><operator>+</operator><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>INF</name><init>=<expr><literal type="number">0x3f3f3f3f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>LL</name></type> <name>MOD</name><init>=<expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>Tp</name></parameter>&gt;</parameter_list></template>
<specifier>inline</specifier> <type><name>bool</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>Tp</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list><block>{
  <expr_stmt><expr><operator>*</operator><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt><decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt><decl_stmt><decl><type><name>bool</name></type> <name>f</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <while>while<condition>(<expr><operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block>{<if>if<condition>(<expr><operator>!</operator><operator>~</operator><name>c</name></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if><if>if<condition>(<expr><name>c</name><operator>==</operator><literal type="char">'-'</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>f</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>}</block></while>
  <while>while<condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><expr_stmt><expr><operator>*</operator><name>x</name><operator>=</operator><operator>*</operator><name>x</name><operator>*</operator><literal type="number">10</literal><operator>+</operator><name>c</name><operator>-</operator><literal type="char">'0'</literal></expr><operator>,</operator><expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
  <if>if<condition>(<expr><name>f</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><operator>*</operator><name>x</name><operator>=</operator><operator>-</operator><operator>*</operator><name>x</name></expr>;</expr_stmt></block></then></if><return>return <expr><literal type="number">1</literal></expr>;</return>
}</block></function>
<function><specifier>inline</specifier> <type><name>bool</name></type> <name>readstr</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list><block>{
  <decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt><while>while<condition>(<expr><operator>(</operator><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call><operator>)</operator><operator>&lt;=</operator><literal type="number">32</literal></expr>)</condition><block type="pseudo"><if>if<condition>(<expr><operator>!</operator><operator>~</operator><name>c</name></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if></block></while>
  <while>while<condition>(<expr><name>c</name><operator>&gt;</operator><literal type="number">32</literal></expr>)</condition><block type="pseudo"><expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator><operator>=</operator><name>c</name></expr><operator>,</operator><expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while><expr_stmt><expr><operator>*</operator><name>s</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt><return>return <expr><literal type="number">1</literal></expr>;</return>
}</block></function>

<decl_stmt><decl><type><name>LL</name></type> <name><name>f</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>g</name><index>[<expr><name>maxn</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
<function><type><name>LL</name></type> <name>powmod</name><parameter_list>(<parameter><decl><type><name>LL</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>LL</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>LL</name></type> <name>c</name></decl></parameter>)</parameter_list><block>{
  <decl_stmt><decl><type><name>LL</name></type> <name>ans</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <for>for<control>(<init><expr><name>a</name><operator>%=</operator><name>c</name></expr>;</init><condition><expr><name>b</name></expr>;</condition><incr><expr><name>b</name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name>a</name><operator>=</operator><name>a</name><operator>*</operator><name>a</name><operator>%</operator><name>c</name></expr></incr>)</control><block type="pseudo"><if>if<condition>(<expr><name>b</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>ans</name><operator>=</operator><name>ans</name><operator>*</operator><name>a</name><operator>%</operator><name>c</name></expr>;</expr_stmt></block></then></if></block></for>
  <return>return <expr><name>ans</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
  <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><call><name>read</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><operator>(</operator><name><name>f</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>f</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>)</operator><operator>%</operator><name>MOD</name></expr>;</expr_stmt></block></for>
  <expr_stmt><expr><name><name>g</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><operator>(</operator><name><name>f</name><index>[<expr><name>n</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal><operator>+</operator><name>MOD</name><operator>)</operator><operator>%</operator><name>MOD</name><operator>*</operator><literal type="number">2</literal><operator>%</operator><name>MOD</name></expr>;</expr_stmt>
  <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>m</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
    <expr_stmt><expr><name><name>g</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><operator>(</operator><name><name>g</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>+</operator><name><name>g</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator><operator>%</operator><name>MOD</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>g</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name><name>g</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>g</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name><name>g</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>g</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name><name>g</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
  }</block></for>
  <comment type="line">//for(int i=1;i&lt;=m;i++)printf("g[%d][0]=%lld, g[%d][1]=%lld\n",i,g[i][0],i,g[i][1]);</comment>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>,<argument><expr><operator>(</operator><name><name>g</name><index>[<expr><name>m</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>+</operator><name><name>g</name><index>[<expr><name>m</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>+</operator><name><name>g</name><index>[<expr><name>m</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>g</name><index>[<expr><name>m</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>%</operator><name>MOD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
