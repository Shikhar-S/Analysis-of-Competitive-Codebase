<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29142034_62978576.cpp"> <cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fr</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PI</name></cpp:macro> <cpp:value>3.1415926535</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mpr</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INF</name></cpp:macro> <cpp:value>1000000009</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a.begin(),a.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rall</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a.rbegin(),a.rend()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>senky_bansal</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(false);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IIIT_ALLAHABAD</name></cpp:macro>    <cpp:value>cin.tie(NULL);cout.tie(NULL);</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{   
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ONLINE_JUDGE</name></cpp:ifndef>
    <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"input.txt"</literal></expr></argument>,<argument><expr><literal type="string">"r"</literal></expr></argument>,<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"output.txt"</literal></expr></argument>,<argument><expr><literal type="string">"w"</literal></expr></argument>,<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      <decl_stmt><decl><type><name>senky_bansal</name>
      <name>IIIT_ALLAHABAD</name>

      <name>ll</name></type> <name>t</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
      <while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition>
      <block>{
          <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>;</decl_stmt>
          <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
          <decl_stmt><decl><type><name>ll</name></type> <name>co_odd</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>ll</name></type> <name>co_eve</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>ll</name></type> <name>eve</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>ll</name></type> <name>odd</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
          <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
          <block>{
              <decl_stmt><decl><type><name>ll</name></type> <name>p1</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>p1</name></expr>;</expr_stmt>
              <if>if<condition>(<expr><name>p1</name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>co_eve</name><operator>++</operator></expr>;</expr_stmt></block></then>
              <else>else <block type="pseudo"><expr_stmt><expr><name>co_odd</name><operator>++</operator></expr>;</expr_stmt></block></else></if>
          }</block></for>
          <decl_stmt><decl><type><name>ll</name></type> <name>m</name></decl>;</decl_stmt>
          <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>m</name></expr>;</expr_stmt>
          <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>m</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
          <block>{
              <decl_stmt><decl><type><name>ll</name></type> <name>p2</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>p2</name></expr>;</expr_stmt>
              <if>if<condition>(<expr><name>p2</name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>eve</name><operator>++</operator></expr>;</expr_stmt></block></then>
              <else>else <block type="pseudo"><expr_stmt><expr><name>odd</name><operator>++</operator></expr>;</expr_stmt></block></else></if>
          }</block></for>
          <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>eve</name><operator>*</operator><name>co_eve</name><operator>+</operator><name>odd</name><operator>*</operator><name>co_odd</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
      }</block></while>
      
      
      
}</block></function>








</unit>
