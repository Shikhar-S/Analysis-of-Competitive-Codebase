<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29180963_63005552.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>lnt</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>lnt</name></type> <name>mod</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>a</name><index>[<expr><literal type="number">300100</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>seg</name><index>[<expr><literal type="number">300100</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>tru</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{
	<decl_stmt><decl><type><name>int</name></type> <name>mn</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>tmp</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>rr</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>k</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>k</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block>{
		<if>if<condition>(<expr><name><name>a</name><index>[<expr><name>k</name></expr>]</index></name><operator>==</operator><literal type="char">')'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>tmp</name><operator>--</operator></expr>;</expr_stmt></block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><name>tmp</name><operator>++</operator></expr>;</expr_stmt></block></else></if>
		<if>if<condition>(<expr><name>tmp</name><operator>&lt;</operator><name>mn</name></expr>)</condition><then><block>{
			<expr_stmt><expr><name>mn</name><operator>=</operator><name>tmp</name></expr>;</expr_stmt><expr_stmt><expr><name>rr</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
		}</block></then></if>
		<if>if<condition>(<expr><name>tmp</name><operator>==</operator><name>mn</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>rr</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
	}</block></for>
	<return>return <expr><name>rr</name></expr>;</return>
}</block></function> 
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>le</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>ri</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>k</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>k</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block>{
		<if>if<condition>(<expr><name><name>a</name><index>[<expr><name>k</name></expr>]</index></name><operator>==</operator><literal type="char">'('</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>le</name><operator>++</operator></expr>;</expr_stmt></block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><name>ri</name><operator>++</operator></expr>;</expr_stmt></block></else></if>
	}</block></for>
	<if>if<condition>(<expr><name>le</name><operator>!=</operator><name>ri</name></expr>)</condition><then><block>{
		<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"0\n1 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></then></if>
	<decl_stmt><decl><type><name>int</name></type> <name>mn</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>tmp</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>rr</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>k</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>k</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block>{
		<if>if<condition>(<expr><name><name>a</name><index>[<expr><name>k</name></expr>]</index></name><operator>==</operator><literal type="char">')'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>tmp</name><operator>--</operator></expr>;</expr_stmt></block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><name>tmp</name><operator>++</operator></expr>;</expr_stmt></block></else></if>
		<if>if<condition>(<expr><name>tmp</name><operator>&lt;</operator><name>mn</name></expr>)</condition><then><block>{
			<expr_stmt><expr><name>mn</name><operator>=</operator><name>tmp</name></expr>;</expr_stmt><expr_stmt><expr><name>rr</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
		}</block></then></if>
		<if>if<condition>(<expr><name>tmp</name><operator>==</operator><name>mn</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>rr</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
		<expr_stmt><expr><name><name>seg</name><index>[<expr><name>k</name></expr>]</index></name><operator>=</operator><name>tmp</name></expr>;</expr_stmt>
	}</block></for>
	<decl_stmt><decl><type><name>int</name></type> <name>mx</name><init>=<expr><name>rr</name></expr></init></decl>, <decl><type ref="prev"/><name>i1</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i2</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<comment type="line">//Case mn -1 </comment>
	<decl_stmt><decl><type><name>int</name></type> <name>now</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>now</name><operator>&lt;</operator><name>n</name></expr>)</condition> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>t1</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>t2</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>to</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>k</name><init>=<expr><name>now</name></expr></init></decl>;</init><condition><expr><name>k</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block>{
			<if>if<condition>(<expr><name><name>a</name><index>[<expr><name>k</name></expr>]</index></name><operator>==</operator><literal type="char">'('</literal> <operator>&amp;&amp;</operator> <name>t1</name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block>{
				<expr_stmt><expr><name>t1</name><operator>=</operator><name>k</name></expr>;</expr_stmt>
			}</block></then></if>
			<if>if<condition>(<expr><name><name>a</name><index>[<expr><name>k</name></expr>]</index></name><operator>==</operator><literal type="char">')'</literal></expr>)</condition><then><block>{
				<expr_stmt><expr><name>t2</name><operator>=</operator><name>k</name></expr>;</expr_stmt>
			}</block></then></if>
			<if>if<condition>(<expr><name>t1</name><operator>!=</operator><operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>seg</name><index>[<expr><name>k</name></expr>]</index></name><operator>==</operator><name>mn</name><operator>+</operator><literal type="number">1</literal></expr>)</condition><then><block>{
				<expr_stmt><expr><name>to</name><operator>++</operator></expr>;</expr_stmt>
			}</block></then></if>
			<if>if<condition>(<expr><name><name>seg</name><index>[<expr><name>k</name></expr>]</index></name><operator>==</operator><name>mn</name> <operator>||</operator> <name>k</name><operator>==</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block>{
				<expr_stmt><expr><name>now</name><operator>=</operator><name>k</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
				<break>break;</break>
			}</block></then></if>
		}</block></for>
		<if>if<condition>(<expr><name><name>seg</name><index>[<expr><name>t2</name></expr>]</index></name><operator>==</operator><name>mn</name><operator>+</operator><literal type="number">1</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name>to</name><operator>--</operator></expr>;</expr_stmt>
		}</block></then></if>
		<if>if<condition>(<expr><name>t1</name><operator>!=</operator><operator>-</operator><literal type="number">1</literal><operator>&amp;&amp;</operator><name>t2</name><operator>!=</operator><operator>-</operator><literal type="number">1</literal><operator>&amp;&amp;</operator><name>t1</name><operator>&lt;</operator><name>t2</name></expr>)</condition><then><block>{
			<if>if<condition>(<expr><name>to</name><operator>&gt;</operator><name>mx</name></expr>)</condition><then><block>{
				<expr_stmt><expr><name>mx</name><operator>=</operator><name>to</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>i1</name><operator>=</operator><name>t1</name></expr>;</expr_stmt><expr_stmt><expr><name>i2</name><operator>=</operator><name>t2</name></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then></if>
	}</block></while>
	<comment type="line">//case mn</comment>
	<expr_stmt><expr><name>now</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>now</name><operator>&lt;</operator><name>n</name></expr>)</condition> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>t1</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>t2</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>to</name><init>=<expr><name>rr</name></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>k</name><init>=<expr><name>now</name></expr></init></decl>;</init><condition><expr><name>k</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block>{
			<if>if<condition>(<expr><name><name>a</name><index>[<expr><name>k</name></expr>]</index></name><operator>==</operator><literal type="char">'('</literal> <operator>&amp;&amp;</operator> <name>t1</name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block>{
				<expr_stmt><expr><name>t1</name><operator>=</operator><name>k</name></expr>;</expr_stmt>
			}</block></then></if>
			<if>if<condition>(<expr><name><name>a</name><index>[<expr><name>k</name></expr>]</index></name><operator>==</operator><literal type="char">')'</literal></expr>)</condition><then><block>{
				<expr_stmt><expr><name>t2</name><operator>=</operator><name>k</name></expr>;</expr_stmt>
			}</block></then></if>
			<if>if<condition>(<expr><name>t1</name><operator>!=</operator><operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>seg</name><index>[<expr><name>k</name></expr>]</index></name><operator>==</operator><name>mn</name><operator>+</operator><literal type="number">2</literal></expr>)</condition><then><block>{
				<expr_stmt><expr><name>to</name><operator>++</operator></expr>;</expr_stmt>
			}</block></then></if>
			<if>if<condition>(<expr><name><name>seg</name><index>[<expr><name>k</name></expr>]</index></name><operator>==</operator><name>mn</name> <operator>||</operator> <name><name>seg</name><index>[<expr><name>k</name></expr>]</index></name><operator>==</operator><name>mn</name> <operator>+</operator> <literal type="number">1</literal> <operator>||</operator> <name>k</name><operator>==</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block>{
				<expr_stmt><expr><name>now</name><operator>=</operator><name>k</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
				<break>break;</break>
			}</block></then></if>
		}</block></for>
		<if>if<condition>(<expr><name><name>seg</name><index>[<expr><name>t2</name></expr>]</index></name><operator>==</operator><name>mn</name></expr>)</condition><then><block>{
			<expr_stmt><expr><name>to</name><operator>--</operator></expr>;</expr_stmt>
		}</block></then></if>
		<if>if<condition>(<expr><name>t1</name><operator>!=</operator><operator>-</operator><literal type="number">1</literal><operator>&amp;&amp;</operator><name>t2</name><operator>!=</operator><operator>-</operator><literal type="number">1</literal><operator>&amp;&amp;</operator><name>t1</name><operator>&lt;</operator><name>t2</name></expr>)</condition><then><block>{
			<if>if<condition>(<expr><name>to</name><operator>&gt;</operator><name>mx</name></expr>)</condition><then><block>{
				<expr_stmt><expr><name>mx</name><operator>=</operator><name>to</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>i1</name><operator>=</operator><name>t1</name></expr>;</expr_stmt><expr_stmt><expr><name>i2</name><operator>=</operator><name>t2</name></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then></if>
	}</block></while>
	<comment type="line">//case mn + 1</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>x1</name></decl>,<decl><type ref="prev"/><name>x2</name></decl>,<decl><type ref="prev"/><name>qq</name></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>k</name><init>=<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>k</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition><incr><expr><name>k</name><operator>--</operator></expr></incr>)</control><block>{
		<if>if<condition>(<expr><name><name>seg</name><index>[<expr><name>k</name></expr>]</index></name><operator>==</operator><name>mn</name></expr>)</condition><then><block>{
			<expr_stmt><expr><name>x2</name><operator>=</operator><name>k</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt><break>break;</break>
		}</block></then></if>
	}</block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>k</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>k</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block>{
		<if>if<condition>(<expr><name><name>a</name><index>[<expr><name>k</name></expr>]</index></name><operator>==</operator><literal type="char">')'</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name>x1</name><operator>=</operator><name>k</name></expr>;</expr_stmt>
		}</block></then></if>
		<if>if<condition>(<expr><name><name>seg</name><index>[<expr><name>k</name></expr>]</index></name><operator>==</operator><name>mn</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
	}</block></for>
	<expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>swap</name></name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>x1</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>a</name><index>[<expr><name>x2</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>qq</name><operator>=</operator><call><name>tru</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>swap</name></name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>x1</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>a</name><index>[<expr><name>x2</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if<condition>(<expr><name>qq</name><operator>&gt;</operator><name>mx</name></expr>)</condition><then><block>{
		<expr_stmt><expr><name>mx</name><operator>=</operator><name>qq</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>i1</name><operator>=</operator><name>x1</name></expr><operator>,</operator><expr><name>i2</name><operator>=</operator><name>x2</name></expr>;</expr_stmt>
	}</block></then></if>
	<comment type="line">//case mn + 2</comment>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>k</name><init>=<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>k</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition><incr><expr><name>k</name><operator>--</operator></expr></incr>)</control><block>{
		<if>if<condition>(<expr><name><name>seg</name><index>[<expr><name>k</name></expr>]</index></name><operator>==</operator><name>mn</name><operator>+</operator><literal type="number">1</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name>x2</name><operator>=</operator><name>k</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt><break>break;</break>
		}</block></then></if>
	}</block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>k</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>k</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block>{
		<if>if<condition>(<expr><name><name>a</name><index>[<expr><name>k</name></expr>]</index></name><operator>==</operator><literal type="char">')'</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name>x1</name><operator>=</operator><name>k</name></expr>;</expr_stmt>
		}</block></then></if>
		<if>if<condition>(<expr><name><name>seg</name><index>[<expr><name>k</name></expr>]</index></name><operator>==</operator><name>mn</name><operator>+</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
	}</block></for>
	<expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>swap</name></name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>x1</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>a</name><index>[<expr><name>x2</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>qq</name><operator>=</operator><call><name>tru</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>swap</name></name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>x1</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>a</name><index>[<expr><name>x2</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if<condition>(<expr><name>qq</name><operator>&gt;</operator><name>mx</name></expr>)</condition><then><block>{
		<expr_stmt><expr><name>mx</name><operator>=</operator><name>qq</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>i1</name><operator>=</operator><name>x1</name></expr><operator>,</operator><expr><name>i2</name><operator>=</operator><name>x2</name></expr>;</expr_stmt>
	}</block></then></if>
	
	
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n%d %d\n"</literal></expr></argument>,<argument><expr><name>mx</name></expr></argument>,<argument><expr><name>i1</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>i2</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function></unit>
