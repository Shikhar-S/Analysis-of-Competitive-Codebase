<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29179914_63006981.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<using>using <name>ll</name> <init>= <type><name>long</name> <name>long</name></type></init>;</using>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEB</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D</name></cpp:macro> <cpp:value>if(1)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D</name></cpp:macro> <cpp:value>if(0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>NMAX</name> <init>= <expr><literal type="number">1123456</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MOD</name> <init>= <expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>out</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
	<block>{
		<decl_stmt><decl><type><name>ll</name></type> <name>stejna</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ll</name></type> <name>ruzna</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{
			<decl_stmt><decl><type><name>int</name></type> <name>old_stejna</name><init>=<expr><name>stejna</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>old_ruzna</name> <init>= <expr><name>ruzna</name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>ruzna</name><operator>=</operator><operator>(</operator><name>old_stejna</name><operator>+</operator><name>old_ruzna</name><operator>)</operator><operator>%</operator><name>MOD</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>stejna</name><operator>=</operator><operator>(</operator><name>old_ruzna</name><operator>)</operator><operator>%</operator><name>MOD</name></expr>;</expr_stmt>
		}</block></for>
		<expr_stmt><expr><name>out</name> <operator>+=</operator> <operator>(</operator><name>stejna</name><operator>+</operator><name>ruzna</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><literal type="number">2</literal></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>D</name></type> <name>printf</name><argument_list>(<argument><expr><literal type="string">"+= %lld"</literal></expr></argument>,<argument><expr><operator>(</operator><name>stejna</name><operator>+</operator><name>ruzna</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	}</block>
	<block>{
		<decl_stmt><decl><type><name>ll</name></type> <name>stejna</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ll</name></type> <name>ruzna</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>m</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{
			<decl_stmt><decl><type><name>int</name></type> <name>old_stejna</name><init>=<expr><name>stejna</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>old_ruzna</name> <init>= <expr><name>ruzna</name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>ruzna</name><operator>=</operator><operator>(</operator><name>old_stejna</name><operator>+</operator><name>old_ruzna</name><operator>)</operator><operator>%</operator><name>MOD</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>stejna</name><operator>=</operator><operator>(</operator><name>old_ruzna</name><operator>)</operator><operator>%</operator><name>MOD</name></expr>;</expr_stmt>
		}</block></for>
		<expr_stmt><expr><name>out</name> <operator>+=</operator> <operator>(</operator><name>stejna</name><operator>+</operator><name>ruzna</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><literal type="number">2</literal></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>D</name></type> <name>printf</name><argument_list>(<argument><expr><literal type="string">"+= %lld\n"</literal></expr></argument>,<argument><expr><operator>(</operator><name>stejna</name><operator>+</operator><name>ruzna</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	}</block>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>,<argument><expr><name>out</name><operator>%</operator><name>MOD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
