<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29177223_63004705.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;climits&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iomanip&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bitset&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;unordered_map&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REP</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(ll (i)=0;(i)&lt;(n);(i)++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>j</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(ll (i)=(j);(i)&lt;(n);(i)++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(decltype((c).begin())i=(c).begin();i!=(c).end();++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ull</name></cpp:macro> <cpp:value>unsigned long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>hoge</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(hoge).begin(),(hoge).end()</cpp:value></cpp:define>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>P</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>long</name> <name>long</name></type> <name>INF</name> <init>= <expr><literal type="number">1LL</literal> <operator>&lt;&lt;</operator> <literal type="number">60</literal></expr></init></decl>;</decl_stmt>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>Array</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Array</name></expr></argument>&gt;</argument_list></name></type> <name>Matrix</name>;</typedef>


<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>bool</name></type> <name>chmin</name><parameter_list>(<parameter><decl><type><name>T</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
	<if>if <condition>(<expr><name>a</name> <operator>&gt;</operator> <name>b</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
		<return>return <expr><literal type="boolean">true</literal></expr>;</return>
	}</block></then></if>
	<return>return <expr><literal type="boolean">false</literal></expr>;</return>
}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>bool</name></type> <name>chmax</name><parameter_list>(<parameter><decl><type><name>T</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
	<if>if <condition>(<expr><name>a</name> <operator>&lt;</operator> <name>b</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
		<return>return <expr><literal type="boolean">true</literal></expr>;</return>
	}</block></then></if>
	<return>return <expr><literal type="boolean">false</literal></expr>;</return>
}</block></function>

<comment type="line">//ã°ã©ãé¢é£</comment>
<struct>struct <name>Edge</name> <block>{<public type="default"><comment type="line">//ã°ã©ã</comment>
	<decl_stmt><decl><type><name>ll</name></type> <name>to</name></decl>, <decl><type ref="prev"/><name>cap</name></decl>, <decl><type ref="prev"/><name>rev</name></decl>;</decl_stmt>
	<constructor><name>Edge</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>_to</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>_cap</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>_rev</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name>to</name> <operator>=</operator> <name>_to</name></expr>;</expr_stmt> <expr_stmt><expr><name>cap</name> <operator>=</operator> <name>_cap</name></expr>;</expr_stmt> <expr_stmt><expr><name>rev</name> <operator>=</operator> <name>_rev</name></expr>;</expr_stmt>
	}</block></constructor>
</public>}</block>;</struct>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Edge</name></expr></argument>&gt;</argument_list></name></type> <name>Edges</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Edges</name></expr></argument>&gt;</argument_list></name></type> <name>Graph</name>;</typedef>

<function><type><name>void</name></type> <name>add_edge</name><parameter_list>(<parameter><decl><type><name>Graph</name><modifier>&amp;</modifier></type> <name>G</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>to</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>cap</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>revFlag</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>revCap</name></decl></parameter>)</parameter_list> <block>{
	<expr_stmt><expr><name><name>G</name><index>[<expr><name>from</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><call><name>Edge</name><argument_list>(<argument><expr><name>to</name></expr></argument>, <argument><expr><name>cap</name></expr></argument>, <argument><expr><operator>(</operator><name>ll</name><operator>)</operator><name><name>G</name><index>[<expr><name>to</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>revFlag</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name><name>G</name><index>[<expr><name>to</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><call><name>Edge</name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><name>revCap</name></expr></argument>, <argument><expr><operator>(</operator><name>ll</name><operator>)</operator><name><name>G</name><index>[<expr><name>from</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
}</block></function>

<class>class <name>Combination</name> <block>{<private type="default">
</private><public>public:
	<decl_stmt><decl><type><name>Array</name></type> <name>fact</name></decl>;</decl_stmt><comment type="line">//nï¼</comment>
	<decl_stmt><decl><type><name>Array</name></type> <name>inv</name></decl>;</decl_stmt><comment type="line">//n!ã®éå</comment>
	<decl_stmt><decl><type><name>ll</name></type> <name>mod</name></decl>;</decl_stmt>
	<constructor><name>Combination</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>_mod</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name>mod</name> <operator>=</operator> <name>_mod</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>fact</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fact</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<macro><name>REP</name><argument_list>(<argument>i</argument>, <argument>n</argument>)</argument_list></macro> <block>{
			<expr_stmt><expr><name><name>fact</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>fact</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1LL</literal><operator>)</operator><operator>)</operator> <operator>%</operator> <name>mod</name></expr>;</expr_stmt>
		}</block>
		<expr_stmt><expr><call><name><name>inv</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<macro><name>REP</name><argument_list>(<argument>i</argument>, <argument>n + <literal type="number">1</literal></argument>)</argument_list></macro> <block>{
			<expr_stmt><expr><name><name>inv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>mod_inv</name><argument_list>(<argument><expr><name><name>fact</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block>
	}</block></constructor>
	<comment type="line">//modã®éå</comment>
	<function><type><name>ll</name></type> <name>mod_inv</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>ll</name></type> <name>n</name> <init>= <expr><name>mod</name> <operator>-</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ll</name></type> <name>res</name> <init>= <expr><literal type="number">1LL</literal></expr></init></decl>;</decl_stmt>
		<while>while <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{
			<if>if <condition>(<expr><name>n</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>res</name> <operator>=</operator> <name>res</name> <operator>*</operator> <name>x</name> <operator>%</operator> <name>mod</name></expr>;</expr_stmt></block></then></if>
			<expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>*</operator> <name>x</name> <operator>%</operator> <name>mod</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>n</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		}</block></while>
		<return>return <expr><name>res</name></expr>;</return>
	}</block></function>
	<function><type><name>ll</name></type> <name>nCr</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>r</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><operator>(</operator><operator>(</operator><name><name>fact</name><index>[<expr><name>n</name></expr>]</index></name> <operator>*</operator> <name><name>inv</name><index>[<expr><name>r</name></expr>]</index></name> <operator>%</operator> <name>mod</name><operator>)</operator> <operator>*</operator> <name><name>inv</name><index>[<expr><name>n</name> <operator>-</operator> <name>r</name></expr>]</index></name><operator>)</operator> <operator>%</operator> <name>mod</name></expr>;</return>
	}</block></function>
	<function><type><name>ll</name></type> <name>nPr</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>r</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><operator>(</operator><name><name>fact</name><index>[<expr><name>n</name></expr>]</index></name> <operator>*</operator> <name><name>inv</name><index>[<expr><name>n</name> <operator>-</operator> <name>r</name></expr>]</index></name><operator>)</operator> <operator>%</operator> <name>mod</name></expr>;</return>
	}</block></function>
	<function><type><name>ll</name></type> <name>nHr</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>r</name></decl></parameter>)</parameter_list> <block>{
		<comment type="line">//éè¤çµã¿åããï¼nç¨®é¡ã®ãã®ããrååãåºãçµã¿åãã</comment>
		<return>return <expr><call><name>nCr</name><argument_list>(<argument><expr><name>r</name> <operator>+</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
</public>}</block>;</class>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


	<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name><operator>&gt;&gt;</operator><name>s</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>ans_i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>ans_j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<macro><name>REP</name><argument_list>(<argument>i</argument>, <argument>n</argument>)</argument_list></macro> <block>{
		<macro><name>REP</name><argument_list>(<argument>j</argument>, <argument>n</argument>)</argument_list></macro> <block>{
			<decl_stmt><decl><type><name>string</name></type> <name>t</name> <init>= <expr><name>s</name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>t</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>t</name> <operator>+=</operator> <name>t</name></expr>;</expr_stmt>
			<comment type="line">//cout &lt;&lt;i&lt;&lt;" "&lt;&lt;j&lt;&lt;" "&lt;&lt; t &lt;&lt; endl;</comment>

			<decl_stmt><decl><type><name>ll</name></type> <name>pre</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>ll</name></type> <name>con</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>ll</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>ll</name></type> <name>ss</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
			<macro><name>REP</name><argument_list>(<argument>k</argument>, <argument><literal type="number">2</literal>*n</argument>)</argument_list></macro> <block>{
				<comment type="line">//cout &lt;&lt; k&lt;&lt;":"&lt;&lt; t[k]&lt;&lt;" "&lt;&lt;')' &lt;&lt; endl;</comment>
				<if>if <condition>(<expr><name><name>t</name><index>[<expr><name>k</name></expr>]</index></name> <operator>==</operator> <literal type="char">')'</literal></expr>)</condition><then> <block>{
					
					<expr_stmt><expr><name>con</name><operator>--</operator></expr>;</expr_stmt>
					<comment type="line">//cout &lt;&lt; con &lt;&lt; endl;</comment>
					
					<if>if <condition>(<expr><name>con</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
						<expr_stmt><expr><name>sum</name><operator>++</operator></expr>;</expr_stmt>
						<if>if <condition>(<expr><name>k</name> <operator>-</operator> <name>ss</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
							<comment type="line">//cout &lt;&lt; i &lt;&lt; " " &lt;&lt; j &lt;&lt; " " &lt;&lt; sum &lt;&lt; endl;</comment>
							<if>if <condition>(<expr><name>ans</name> <operator>&lt;=</operator> <name>sum</name></expr>)</condition><then> <block>{
								<expr_stmt><expr><name>ans</name> <operator>=</operator> <name>sum</name></expr>;</expr_stmt>
								<expr_stmt><expr><name>ans_i</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
								<expr_stmt><expr><name>ans_j</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
							}</block></then></if>
							<break>break;</break>
						}</block></then></if>
					}</block></then></if>
					<if>if <condition>(<expr><name>con</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
						<expr_stmt><expr><name>con</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
						<expr_stmt><expr><name>sum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
						<expr_stmt><expr><name>ss</name> <operator>=</operator> <name>k</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
					}</block></then></if>
				}</block></then>
				<else>else <block>{
					<expr_stmt><expr><name>con</name><operator>++</operator></expr>;</expr_stmt>
				}</block></else></if>
				<comment type="line">//cout &lt;&lt; k &lt;&lt; ":" &lt;&lt; con &lt;&lt; " " &lt;&lt; sum&lt;&lt; " " &lt;&lt;ss &lt;&lt; endl;</comment>

			}</block>
		}</block>
	}</block>

	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans_i</name><operator>+</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator> <name>ans_j</name><operator>+</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
