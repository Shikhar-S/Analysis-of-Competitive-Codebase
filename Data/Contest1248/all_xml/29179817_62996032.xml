<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29179817_62996032.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro>   <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro>   <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f</name></cpp:macro>    <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>s</name></cpp:macro>    <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro>   <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vi</name></cpp:macro> <cpp:value>vector&lt; int &gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vl</name></cpp:macro> <cpp:value>vector&lt; ll &gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>j</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>for(int (i) = (j); i &lt; n; i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>     <cpp:value>((a) &gt; (b) ? (a) : (b))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>     <cpp:value>((a) &lt; (b) ? (a) : (b))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>v.begin(), v.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ cout &lt;&lt; #X &lt;&lt; " = " &lt;&lt; (X) &lt;&lt; endl; }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>int tt; cin&gt;&gt;tt; while(tt--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Max</name></cpp:macro>  <cpp:value>INT_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Min</name></cpp:macro>  <cpp:value>INT_MIN</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro>  <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N</name></cpp:macro> <cpp:value>1000099</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>ll</name></type> <name>power</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>exp</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>m</name></decl></parameter>)</parameter_list>   <comment type="line">//only for +ve values of b</comment>
<block>{<decl_stmt><decl><type><name>ll</name></type> <name>ans</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt><expr_stmt><expr><name>b</name><operator>%=</operator><name>m</name></expr>;</expr_stmt>
 <while>while<condition>(<expr><name>exp</name></expr>)</condition><block>{<if>if<condition>(<expr><name>exp</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ans</name><operator>=</operator><operator>(</operator><name>ans</name><operator>*</operator><name>b</name><operator>)</operator><operator>%</operator><name>m</name></expr>;</expr_stmt></block></then></if>
  <expr_stmt><expr><name>exp</name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr>;</expr_stmt><expr_stmt><expr><name>b</name><operator>=</operator><operator>(</operator><name>b</name><operator>*</operator><name>b</name><operator>)</operator><operator>%</operator><name>m</name></expr>;</expr_stmt>}</block></while>
 <return>return <expr><name>ans</name></expr>;</return>}</block></function>
<decl_stmt><decl><type><name>ll</name></type> <name><name>dp</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
<function><type><name>ll</name></type> <name>solve</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{
	<if>if<condition>(<expr><name>i</name><operator>==</operator><name>x</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1LL</literal></expr>;</return></block></then></if>
	<if>if<condition>(<expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return></block></then></if>
	<decl_stmt><decl><type><name>ll</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>ans</name> <operator>=</operator> <operator>(</operator><name>ans</name><operator>+</operator><call><name>solve</name><argument_list>(<argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt>
	<if>if<condition>(<expr><name>i</name><operator>+</operator><literal type="number">2</literal><operator>&lt;=</operator><name>x</name></expr>)</condition><then>  <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>=</operator> <operator>(</operator><name>ans</name><operator>+</operator><call><name>solve</name><argument_list>(<argument><expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt></block></then></if>
	<return>return <expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>ans</name><operator>%</operator><name>mod</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>m</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dp</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>ans</name><operator>=</operator><call><name>solve</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dp</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ans</name><operator>=</operator><operator>(</operator><name>ans</name><operator>+</operator><call><name>solve</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ans</name><operator>=</operator><operator>(</operator><name>ans</name><operator>-</operator><literal type="number">1LL</literal><operator>+</operator><name>mod</name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>ans</name> <operator>=</operator> <operator>(</operator><name>ans</name><operator>*</operator><literal type="number">2LL</literal><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>%</operator><name>mod</name><operator>&lt;&lt;</operator><literal type="string">"\n"</literal></expr>;</expr_stmt>
}</block></function>


</unit>
