<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29158235_62995031.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">1e5</literal></expr></init></decl>, <decl><type ref="prev"/><name>MOD</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>readInt</name> <parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>bool</name></type> <name>minus</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name>ch</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition>
    <block>{
        <if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
        <if>if <condition>(<expr><name>ch</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>ch</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
        <expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></while>
    <if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>minus</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt></block></then>
    <else>else <block type="pseudo"><expr_stmt><expr><name>result</name> <operator>=</operator> <name>ch</name><operator>-</operator><literal type="char">'0'</literal></expr>;</expr_stmt></block></else></if>
    <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition>
    <block>{
        <expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>ch</name> <argument_list type="generic">&lt; <argument><expr><literal type="char">'0'</literal> <operator>||</operator> <name>ch</name></expr></argument> &gt;</argument_list></name> <literal type="char">'9'</literal></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <name>result</name><operator>*</operator><literal type="number">10</literal> <operator>+</operator> <operator>(</operator><name>ch</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>
    }</block></while>
    <if>if <condition>(<expr><name>minus</name></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><operator>-</operator><name>result</name></expr>;</return></block></then>
    <else>else
        <block type="pseudo"><return>return <expr><name>result</name></expr>;</return></block></else></if>
}</block></function>
<decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr><literal type="number">555</literal></expr>]</index><index>[<expr><literal type="number">555</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>dx</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>dy</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>f</name><index>[<expr><name>N</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>dp</name><index>[<expr><name>N</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<function><name>main</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>readInt</name><argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>m</name> <init>= <expr><call><name>readInt</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <name>m</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>f</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>f</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name> <operator>%=</operator> <name>MOD</name></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>f</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>f</name><index>[<expr><name>n</name></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>f</name><index>[<expr><name>n</name></expr>]</index></name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>m</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>dp</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>dp</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name>MOD</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>%=</operator> <name>MOD</name></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>dp</name><index>[<expr><name>m</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
<comment type="line">//    int tot = n * m;</comment>
<comment type="line">//    int ans = 0;</comment>
<comment type="line">//    for (int i = 0; i &lt; (1 &lt;&lt; tot); i++) {</comment>
<comment type="line">//        int x = 1, y = 1;</comment>
<comment type="line">//        for (int j = 0; j &lt; tot; j++) {</comment>
<comment type="line">//            if ((i &amp; (1 &lt;&lt; j))) {</comment>
<comment type="line">//                a[x][y] = 1;</comment>
<comment type="line">//            } else {</comment>
<comment type="line">//                a[x][y] = 0;</comment>
<comment type="line">//            }</comment>
<comment type="line">//            y++;</comment>
<comment type="line">//            if (y &gt; m) {</comment>
<comment type="line">//                y = 1;</comment>
<comment type="line">//                x++;</comment>
<comment type="line">//            }</comment>
<comment type="line">//        }</comment>
<comment type="line">//        bool ok = true;</comment>
<comment type="line">//        for (int i2 = 1; i2 &lt;= n; i2++) {</comment>
<comment type="line">//            for (int j2 = 1; j2 &lt;= m; j2++) {</comment>
<comment type="line">//                int cnt = 0;</comment>
<comment type="line">//                for (int k = 1; k &lt;= 4; k++) {</comment>
<comment type="line">//                    int lx = i2 + dx[k];</comment>
<comment type="line">//                    int ly = j2 + dy[k];</comment>
<comment type="line">//                    if (lx &gt;= 1 &amp;&amp; lx &lt;= n &amp;&amp; ly &gt;= 1 &amp;&amp; ly &lt;= m &amp;&amp; a[i2][j2] == a[lx][ly]) {</comment>
<comment type="line">//                        ++cnt;</comment>
<comment type="line">//                    }</comment>
<comment type="line">//                }</comment>
<comment type="line">//                if (cnt &gt; 1) {</comment>
<comment type="line">//                    ok = false;</comment>
<comment type="line">//                }</comment>
<comment type="line">//            }</comment>
<comment type="line">//        }</comment>
<comment type="line">//        if (ok) {</comment>
<comment type="line">//            ++ans;</comment>
<comment type="line">//        }</comment>
<comment type="line">//    }</comment>
<comment type="line">//    cout &lt;&lt; ans;</comment>
}</block></function>
<comment type="line" format="doxygen">/// 2 4 6 10 16 26 42</comment>
<comment type="block" format="doxygen">/**
2
4 6 8 12 18 28 44 70 112
3
6 8 10 14 20
4
10 12 14 18
5
16 18 20
6
26
**/</comment>
</unit>
