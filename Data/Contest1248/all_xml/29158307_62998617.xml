<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29158307_62998617.cpp"><cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>comment</name><name>(</name><name>linker</name><name>,</name> <cpp:literal>"/STACK:33554432"</cpp:literal><name>)</name></cpp:pragma>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_CRT_SECURE_NO_WARNINGS</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iterator&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iomanip&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctime&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<function><type><name>void</name></type> <name>dout</name><parameter_list>()</parameter_list> <block>{ <expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt> }</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>Head</name></parameter>, <parameter><type><name>typename</name><modifier>...</modifier></type> <name>Tail</name></parameter>&gt;</parameter_list></template>
<type><name>void</name></type> <name>dout</name><parameter_list>(<parameter><decl><type><name>Head</name></type> <name>H</name></decl></parameter>, <parameter><decl><type><name>Tail</name><modifier>...</modifier></type> <name>T</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <name>H</name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>dout</name><argument_list>(<argument><expr><name>T</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<using>using <name>ll</name> <init>= <type><name>long</name> <name>long</name></type></init>;</using>
<using>using <name>pii</name> <init>= <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>ld</name> <init>= <type><name>long</name> <name>double</name></type></init>;</using>
<using>using <name>pll</name> <init>= <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>, <argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></type></init>;</using>

<function><type><name>void</name></type> <name>precalc</name><parameter_list>()</parameter_list>
<block>{
}</block></function>

<decl_stmt><decl><type><name>ll</name></type> <name>mod</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAXN</name> <init>= <expr><literal type="number">1e5</literal>  <operator>+</operator><literal type="number">20</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ll</name></type> <name><name>dp</name><index>[<expr><name>MAXN</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<comment type="line">//</comment>
<comment type="line">//ll n, m;</comment>
<comment type="line">//cin &gt;&gt; n &gt;&gt; m;</comment>
<comment type="line">//</comment>
<comment type="line">//dp[1][0] = 1;</comment>
<comment type="line">//</comment>
<comment type="line">//for (int i = 2; i &lt; MAXN; ++i) {</comment>
<comment type="line">//dp[i][0] = (dp[i - 1][0] + dp[i - 1][1]) % mod;</comment>
<comment type="line">//dp[i][1] = dp[i - 1][0];</comment>
<comment type="line">//}</comment>
<comment type="line">//</comment>
<comment type="line">//ll answr = dp[n][0] + dp[n][1] + dp[m][0] + dp[m][1] - 1;</comment>
<comment type="line">//answr %= mod;</comment>
<comment type="line">//answr += mod;</comment>
<comment type="line">//answr %= mod;</comment>
<comment type="line">//answr *= 2;</comment>
<comment type="line">//answr %= mod;</comment>
<comment type="line">//</comment>
<comment type="line">//cout &lt;&lt; answr;</comment>

<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>pref</name><index>[<expr><literal type="number">1000</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>check</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>sm</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pref</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>mn</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{

    <decl_stmt><decl><type><name>char</name></type> <name>ch</name> <init>= <expr><name><name>s</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal> <operator>==</operator> <name>l</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>ch</name> <operator>=</operator> <name><name>s</name><index>[<expr><name>r</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></then> <elseif>else <if>if <condition>(<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal> <operator>==</operator> <name>r</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>ch</name> <operator>=</operator> <name><name>s</name><index>[<expr><name>l</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></then></if></elseif></if>
    <expr_stmt><expr><name><name>pref</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>pref</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>ch</name> <operator>==</operator> <literal type="char">'('</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>mn</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>mn</name></expr></argument>, <argument><expr><name><name>pref</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>

  <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
    <if>if <condition>(<expr><name><name>pref</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>mn</name></expr>)</condition><then>
      <block type="pseudo"><expr_stmt><expr><name>ret</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
  }</block></for>

  <return>return <expr><name>ret</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list> <block>{

  <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>s</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>min_ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>answr</name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr> , <expr><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>all</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>auto</name></type> <name>el</name> <range>: <expr><name>s</name></expr></range></decl></init>)</control><block>{
    <if>if <condition>(<expr><name>el</name> <operator>==</operator> <literal type="char">')'</literal></expr>)</condition><then>
      <block type="pseudo"><expr_stmt><expr><name>all</name> <operator>--</operator></expr>;</expr_stmt></block></then>
    <else>else
      <block type="pseudo"><expr_stmt><expr><name>all</name><operator>++</operator></expr>;</expr_stmt></block></else></if>
  }</block></for>

  <if>if <condition>(<expr><name>all</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"0\n1 1\n"</literal></expr>;</expr_stmt>
    <return>return;</return>
  }</block></then></if>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator> <name>i</name></expr></incr>)</control><block>{
    <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal> <operator>+</operator> <name>i</name></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator> <name>j</name></expr></incr>)</control><block>{

      <decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><call><name>check</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>val</name> <operator>&gt;</operator> <name>min_ans</name></expr>)</condition><then><block>{
        <expr_stmt><expr><name>min_ans</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>answr</name> <operator>=</operator> <block>{<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>, <expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>}</block></expr>;</expr_stmt>
      }</block></then></if>
    }</block></for>
  }</block></for>


  <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>min_ans</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>

  <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>answr</name><operator>.</operator><name>first</name></name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name><name>answr</name><operator>.</operator><name>second</name></name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ONLINE_JUDGE</name></cpp:ifndef>
    <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"../input.in"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"../output.out"</literal></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>precalc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ONLINE_JUDGE</name></cpp:ifndef>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>double</name><operator>)</operator><call><name>clock</name><argument_list>()</argument_list></call> <operator>/</operator> <name>CLOCKS_PER_SEC</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></function></unit>
