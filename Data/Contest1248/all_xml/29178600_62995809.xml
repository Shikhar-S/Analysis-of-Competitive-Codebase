<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29178600_62995809.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cctype&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name> <init>= <expr><literal type="number">500</literal> <operator>+</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>res</name></decl>, <decl><type ref="prev"/><name>ans</name></decl>, <decl><type ref="prev"/><name><name>pos</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> <decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>tmp</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>str</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ans</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{
    <for>for<control>(<init><decl><type><name>int</name></type> <name>t</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>t</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>t</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>tmp</name><index>[<expr><name>t</name></expr>]</index></name> <operator>=</operator> <name><name>str</name><index>[<expr><name>t</name></expr>]</index></name></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>tmp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>tmp</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>poi</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>lim</name> <init>= <expr><name>n</name></expr></init></decl>, <decl><type ref="prev"/><name>top</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>( <expr><name>poi</name> <operator>&lt;=</operator> <name>lim</name></expr> )</condition> <block>{
      <if>if<condition>( <expr><name><name>tmp</name><index>[<expr><name>poi</name></expr>]</index></name> <operator>==</operator> <literal type="char">')'</literal></expr> )</condition><then> <block>{
        <if>if<condition>( <expr><name>top</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><then> <block type="pseudo"><expr_stmt><expr><operator>--</operator><name>top</name></expr>;</expr_stmt></block></then>
        <else>else <block>{
          <expr_stmt><expr><operator>--</operator><name>top</name></expr><operator>,</operator> <expr><name>res</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          <while>while<condition>( <expr><name>poi</name> <operator>&lt;=</operator> <name>lim</name> <operator>&amp;&amp;</operator> <name>top</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition> <block>{
            <if>if<condition>( <expr><name><name>tmp</name><index>[<expr><name>lim</name></expr>]</index></name> <operator>==</operator> <literal type="char">')'</literal></expr> )</condition><then> <block type="pseudo"><expr_stmt><expr><operator>--</operator><name>top</name></expr><operator>,</operator> <expr><operator>--</operator><name>lim</name></expr>;</expr_stmt></block></then>
            <else>else <block type="pseudo"><expr_stmt><expr><operator>++</operator><name>top</name></expr><operator>,</operator> <expr><operator>--</operator><name>lim</name></expr>;</expr_stmt></block></else></if>
          }</block></while>
        }</block></else></if>
      }</block></then>
      <else>else <block type="pseudo"><expr_stmt><expr><operator>++</operator><name>top</name></expr>;</expr_stmt></block></else></if>
      <expr_stmt><expr><operator>++</operator><name>poi</name></expr>;</expr_stmt>
      <if>if<condition>( <expr><name>top</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><then> <block type="pseudo"><expr_stmt><expr><operator>++</operator><name>res</name></expr>;</expr_stmt></block></then></if>
    }</block></while>
    <if>if<condition>( <expr><name>top</name></expr> )</condition><then> <block type="pseudo"><expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
    <if>if<condition>( <expr><name>res</name> <operator>&gt;</operator> <name>ans</name></expr> )</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>i</name></expr><operator>,</operator> <expr><name><name>pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>j</name></expr><operator>,</operator> <expr><name>ans</name> <operator>=</operator> <name>res</name></expr>;</expr_stmt></block></then></if>
    <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  }</block></for></block></for>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d\n"</literal></expr></argument>, <argument><expr><name><name>pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
