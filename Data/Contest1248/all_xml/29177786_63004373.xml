<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29177786_63004373.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name><name>qz</name><index>[<expr><literal type="number">501</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>c</name><parameter_list>()</parameter_list>
<block>{
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control>
    <block>{
        <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name><name>qz</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>qz</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then>
        <else>else
            <block type="pseudo"><expr_stmt><expr><name><name>qz</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>qz</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
     }</block></for>
}</block></function>
<decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>a1</name></decl>, <decl><type ref="prev"/><name>a2</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>ci</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>mini</name> <init>= <expr><literal type="number">9999</literal></expr></init></decl>, <decl><type ref="prev"/><name>an</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name>mini</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>mini</name></expr></argument>, <argument><expr><name><name>qz</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><if>if<condition>(<expr><name>mini</name> <operator>==</operator> <name><name>qz</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>an</name> <operator>++</operator></expr>;</expr_stmt></block></then></if></block></for>
    <if>if<condition>(<expr><name>mini</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
    <return>return <expr><name>an</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>s</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>c</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><call><name>ci</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><name><name>qz</name><index>[<expr><name>n</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="number">0</literal> <operator>&lt;&lt;</operator> <name>endl</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="char">' '</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>
    <if>if<condition>(<expr><name>ans</name> <operator>&lt;</operator> <name>y</name></expr>)</condition><then><block>{<expr_stmt><expr><name>ans</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt> <expr_stmt><expr><name>a1</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>a2</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>}</block></then></if>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>j</name> <operator>++</operator></expr></incr>)</control>
        <block>{
            <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>c</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><call><name>ci</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name>ans</name> <operator>&lt;</operator> <name>y</name></expr>)</condition><then><block>{<expr_stmt><expr><name>ans</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt> <expr_stmt><expr><name>a1</name> <operator>=</operator> <name>i</name></expr><operator>,</operator> <expr><name>a2</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>}</block></then></if>
            <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        }</block></for></block></for>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <name>endl</name> <operator>&lt;&lt;</operator> <name>a1</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name>a2</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
}</block></function></unit>
