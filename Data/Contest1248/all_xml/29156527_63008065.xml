<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29156527_63008065.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>LL</name>;</typedef>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxN</name> <init>= <expr><literal type="number">1e6</literal><operator>+</operator><literal type="number">10</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>p</name><index>[<expr><name>maxN</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>string</name></type> <name>t</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ui</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>uj</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{
        <if>if<condition>(<expr><name><name>t</name><index>[<expr><name>k</name></expr>]</index></name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
    }</block></for>
    <if>if<condition>(<expr><literal type="number">2</literal><operator>*</operator><name>cnt</name> <operator>!=</operator> <name>n</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="number">0</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator><literal type="string">" "</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{
            <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>t</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>tmp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>mmin</name> <init>= <expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>p</name></decl>;</decl_stmt>
            <for>for<control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{
                <if>if<condition>(<expr><name><name>t</name><index>[<expr><name>k</name></expr>]</index></name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>v</name><operator>++</operator></expr>;</expr_stmt></block></then>
                <else>else <block type="pseudo"><expr_stmt><expr><name>v</name><operator>--</operator></expr>;</expr_stmt></block></else></if>
                <if>if<condition>(<expr><name>mmin</name> <operator>&gt;</operator> <name>v</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>mmin</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>p</name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></for>
            <decl_stmt><decl><type><name>string</name></type> <name>tt</name> <init>= <expr><name>t</name></expr></init></decl>;</decl_stmt>
            <for>for<control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{
                <expr_stmt><expr><name><name>tt</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>t</name><index>[<expr><operator>(</operator><name>p</name><operator>+</operator><name>k</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><name>n</name></expr>]</index></name></expr>;</expr_stmt>
            }</block></for>
            <for>for<control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{
                <if>if<condition>(<expr><name><name>tt</name><index>[<expr><name>k</name></expr>]</index></name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>v</name><operator>++</operator></expr>;</expr_stmt></block></then>
                <else>else <block type="pseudo"><expr_stmt><expr><name>v</name><operator>--</operator></expr>;</expr_stmt></block></else></if>
                <if>if<condition>(<expr><name>v</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>tmp</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
            }</block></for>  
            <if>if<condition>(<expr><name>ans</name> <operator>&lt;</operator> <name>tmp</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>ans</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>ui</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt> <expr_stmt><expr><name>uj</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>t</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></for>
    <comment type="line">//swap(t[ui], t[uj]);</comment>
    <comment type="line">//cout &lt;&lt; "debug " &lt;&lt; t &lt;&lt; endl;</comment>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ui</name><operator>+</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name>uj</name><operator>+</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
