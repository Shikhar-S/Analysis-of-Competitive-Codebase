<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29177266_62978105.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fin</name> <init>= <expr><name>stdin</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fout</name> <init>= <expr><name>stdout</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>,<decl><type ref="prev"/><name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>x</name></decl>,<decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>p00</name></decl>,<decl><type ref="prev"/><name>p01</name></decl>,<decl><type ref="prev"/><name>p10</name></decl>,<decl><type ref="prev"/><name>p11</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>fscanf</name> <argument_list>(<argument><expr><name>fin</name></expr></argument>,<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init>;</init><condition><expr><name>t</name></expr>;</condition><incr><expr><name>t</name><operator>--</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><name>p00</name><operator>=</operator><name>p01</name><operator>=</operator><name>p10</name><operator>=</operator><name>p11</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fscanf</name> <argument_list>(<argument><expr><name>fin</name></expr></argument>,<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
            <expr_stmt><expr><call><name>fscanf</name> <argument_list>(<argument><expr><name>fin</name></expr></argument>,<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>x</name><operator>%</operator><literal type="number">2</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>p01</name><operator>++</operator></expr>;</expr_stmt></block></then>
            <else>else <block type="pseudo"><expr_stmt><expr><name>p00</name><operator>++</operator></expr>;</expr_stmt></block></else></if>
        }</block></for>
        <expr_stmt><expr><call><name>fscanf</name> <argument_list>(<argument><expr><name>fin</name></expr></argument>,<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>m</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
            <expr_stmt><expr><call><name>fscanf</name> <argument_list>(<argument><expr><name>fin</name></expr></argument>,<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>x</name><operator>%</operator><literal type="number">2</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>p11</name><operator>++</operator></expr>;</expr_stmt></block></then>
            <else>else <block type="pseudo"><expr_stmt><expr><name>p10</name><operator>++</operator></expr>;</expr_stmt></block></else></if>
        }</block></for>
        <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>fout</name></expr></argument>,<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>, <argument><expr><name>p11</name> <operator>*</operator> <name>p01</name> <operator>+</operator> <name>p00</name> <operator>*</operator> <name>p10</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
