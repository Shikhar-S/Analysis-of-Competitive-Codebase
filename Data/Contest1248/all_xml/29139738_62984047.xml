<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29139738_62984047.cpp"><cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>DEBUG</name></cpp:ifndef> 
	<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name> <name>(</name><cpp:literal>"Ofast"</cpp:literal><name>)</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<using>using <name>f64</name> <init>= <type><name>double</name></type></init>;</using><using>using <name>i64</name><init>=<type><name>long</name> <name>long</name></type></init>;</using><using>using <name>u64</name><init>=<type><name>unsigned</name> <name>long</name> <name>long</name></type></init>;</using>
<using><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> using <name>Arr</name><init>=<type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PQ</name></cpp:macro> <cpp:value>std::priority_queue</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hfor</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>s</name></type></parameter>, <parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int v=s; s&lt;=v &amp;&amp; v&lt;e; ++v)</cpp:value></cpp:define><comment type="line">//half-opened range</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hfori</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>s</name></type></parameter>, <parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int v=e-1; s&lt;=v &amp;&amp; v&lt;e; --v)</cpp:value></cpp:define><comment type="line">//inversion</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hforo</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>s</name></type></parameter>, <parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>int v=s; for(; s&lt;=v &amp;&amp; v&lt;e; ++v)</cpp:value></cpp:define><comment type="line">//out declaration</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hforoi</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>s</name></type></parameter>, <parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>int v=e-1; for(; s&lt;=v &amp;&amp; v&lt;e; --v)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cfor</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>s</name></type></parameter>, <parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>hfor(v, s, (e)+1)</cpp:value></cpp:define><comment type="line">//closed range</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cfori</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>s</name></type></parameter>, <parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>hfori(v, s, (e)+1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cforo</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>s</name></type></parameter>, <parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>hforo(v, s, (e)+1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cforoi</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>s</name></type></parameter>, <parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>hforoi(v, s, (e)+1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>v</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>hfor(v,0,x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x.begin(),x.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pushb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pushf</name></cpp:macro> <cpp:value>push_front</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>popb</name></cpp:macro> <cpp:value>pop_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>popf</name></cpp:macro> <cpp:value>pop_front</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>emplb</name></cpp:macro> <cpp:value>emplace_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>emplf</name></cpp:macro> <cpp:value>emplace_front</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>empl</name></cpp:macro> <cpp:value>emplace</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gcd</name></cpp:macro> <cpp:value>__gcd</cpp:value></cpp:define>

<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>constexpr</specifier> <type><name>T</name></type> <name>inf</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>max</name></name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">2</literal></expr>;</return> }</block></function>
<function><type><name>auto</name></type> <name>mri</name><parameter_list>(<parameter><decl><type><name>auto</name></type> <name>it</name></decl></parameter>)</parameter_list><block>{ <return>return <expr><call><name>make_reverse_iterator</name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function><comment type="line">//*mri(it) == *prev(it)</comment>
<decl_stmt><decl><type><name>auto</name></type> <name>rerase</name><argument_list>(<argument><expr><name>auto</name><operator>&amp;</operator> <name>c</name></expr></argument>, <argument><expr><name>auto</name> <name>ri</name></expr></argument>)</argument_list><argument_list>{ return <argument><expr><call><name>next</name><argument_list>(<argument><expr><call><name>mri</name><argument_list>(<argument><expr><call><name><name>c</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name>prev</name><argument_list>(<argument><expr><call><name><name>ri</name><operator>.</operator><name>base</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>; }</argument_list>
auto <name>fold</name><argument_list>(<argument><expr><name>auto</name> <name>a</name></expr></argument>, <argument><expr><name>auto</name> <name>b</name></expr></argument>, <argument><expr><name>auto</name> <name>c</name></expr></argument>, <argument><expr><name>auto</name> <name>f</name></expr></argument>)</argument_list><argument_list>{ return <argument><expr><call><name>accumulate</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>; }</argument_list>
auto <name>fold</name><argument_list>(<argument><expr><name>auto</name> <name>a</name></expr></argument>, <argument><expr><name>auto</name> <name>b</name></expr></argument>, <argument><expr><name>auto</name> <name>c</name></expr></argument>)</argument_list><argument_list>{ return <argument><expr><call><name>fold</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name>auto</name></type> <name>acc</name></decl></parameter>, <parameter><decl><type><name>auto</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{<return>return <expr><name>acc</name><operator>+</operator><name>x</name></expr>;</return><expr_stmt/>}</block></lambda></expr></argument>)</argument_list></call></expr></argument>; }</argument_list>
auto <name>mapf</name><argument_list>(<argument><expr><name>auto</name> <name>a</name></expr></argument>, <argument><expr><name>auto</name> <name>f</name></expr></argument>)</argument_list><argument_list>{for<argument><expr><operator>(</operator><name>auto</name><operator>&amp;</operator> <name>x</name><operator>:</operator><name>a</name><operator>)</operator><name>x</name><operator>=</operator><call><name>f</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>; return <argument><expr><name>a</name></expr></argument>;}</argument_list>
<name>int</name> <name>sz</name><argument_list>(<argument><expr><specifier>const</specifier> <name>auto</name><operator>&amp;</operator> <name>x</name></expr></argument>)</argument_list><argument_list>{ return <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name><name>x</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>; }</argument_list>
<name>int</name> <name>rd</name><argument_list>(<argument><expr><name>int</name> <name>lb</name></expr></argument>, <argument><expr><name>int</name> <name>ub</name></expr></argument>)</argument_list><argument_list>{<argument><expr><specifier>static</specifier> <name>mt19937</name> <call><name>rng</name><argument_list>(<argument><expr><call><name>time</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>^</operator><call><name>i64</name><argument_list>(<argument><expr><operator>new</operator> <name>int</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>; return <argument><expr><call><call><name><name>uniform_int_distribution</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>lb</name></expr></argument>, <argument><expr><name>ub</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>rng</name></expr></argument>)</argument_list></call></expr></argument>;}</argument_list>
<name>int</name> <name>rd</name><argument_list>(<argument><expr><name>int</name> <name>ub</name><operator>=</operator><call><name><name>inf</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list><argument_list>{return <argument><expr><call><name>rd</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>ub</name></expr></argument>)</argument_list></call></expr></argument>;}</argument_list>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>random</name></cpp:macro> <cpp:value>rd</cpp:value></cpp:define>

const <name>f64</name> <name>pi</name><init>=<expr><call><name>acos</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>eps</name><init>=<expr><literal type="number">1e-12</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>prime</name><init>=<expr><literal type="number">998244353</literal></expr></init></decl>;</decl_stmt><comment type="line">//1073741783 int(2e9+11) int(1e9+9)</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mod</name><init>=<expr><call><name>int</name><argument_list>(<argument><expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>DEBUG</name></cpp:ifndef>
	<decl_stmt><decl><type><name>auto</name></type> <name>__PRE_RUN__</name><init>=<expr><operator>(</operator><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>, <call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>, <call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>,<operator>(</operator><name>cout</name><operator>&lt;&lt;</operator><name>fixed</name><operator>&lt;&lt;</operator><call><name>setprecision</name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call><operator>)</operator>, <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>'\n'</cpp:value></cpp:define><comment type="line">//not interactive?</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>i64</cpp:value></cpp:define><comment type="line">//overflow?</comment>

<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr><name>n</name></expr>]</index></name></decl>;</decl_stmt>
	<macro><name>hfor</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro>
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>a</name><operator>+</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>y</name><init>=<expr><call><name>fold</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>a</name><operator>+</operator><name>n</name><operator>/</operator><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>x</name><init>=<expr><call><name>fold</name><argument_list>(<argument><expr><name>a</name><operator>+</operator><name>n</name><operator>/</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>a</name><operator>+</operator><name>n</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>y</name><operator>*</operator><name>y</name><operator>+</operator><name>x</name><operator>*</operator><name>x</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
