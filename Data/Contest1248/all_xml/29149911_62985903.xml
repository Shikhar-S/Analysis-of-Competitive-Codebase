<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29149911_62985903.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>


<decl_stmt><decl><type><name>int</name></type> <name><name>vis</name><index>[<expr><literal type="number">100</literal></expr>]</index><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>color</name><index>[<expr><literal type="number">100</literal></expr>]</index><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>bool</name></type> <name>chk</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
        <block type="pseudo"><for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>i</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cnt</name> <operator>+=</operator> <name><name>color</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name><name>color</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block></then></if>
            <if>if <condition>(<expr><name>j</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cnt</name> <operator>+=</operator> <name><name>color</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name><name>color</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block></then></if>
            <if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>n</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cnt</name> <operator>+=</operator> <name><name>color</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name><name>color</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block></then></if>
            <if>if <condition>(<expr><name>j</name> <operator>&lt;</operator> <name>m</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cnt</name> <operator>+=</operator> <name><name>color</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name><name>color</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block></then></if>
            <expr_stmt><expr><name>ans</name> <operator>&amp;=</operator> <name>cnt</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        }</block></for></block></for>
    <return>return <expr><name>ans</name></expr>;</return>
}</block></function>
<function><type><name>ll</name></type> <name>solve</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name>x</name> <operator>==</operator> <name>n</name> <operator>&amp;&amp;</operator> <name>y</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
    <block>{
        <return>return <expr><call><name>chk</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name><name>color</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>y</name> <operator>==</operator> <name>m</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>+=</operator> <call><name>solve</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
    <else>else <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>+=</operator> <call><name>solve</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
    <expr_stmt><expr><name><name>color</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>y</name> <operator>==</operator> <name>m</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>+=</operator> <call><name>solve</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
    <else>else <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>+=</operator> <call><name>solve</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
    <return>return <expr><name>ans</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><name>ll</name></type> <name><name>fib</name><index>[<expr><literal type="number">100100</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>fib2</name><index>[<expr><literal type="number">100100</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>md</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><name><name>fib</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>fib</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>fib2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>fib2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">3</literal></expr></init></decl> ;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">100100</literal></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><name><name>fib</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>fib</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>fib</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>fib</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;=</operator> <name>md</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name><name>fib</name><index>[<expr><name>j</name></expr>]</index></name> <operator>-=</operator> <name>md</name></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name><name>fib2</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>fib2</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>fib2</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>fib2</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;=</operator> <name>md</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name><name>fib2</name><index>[<expr><name>j</name></expr>]</index></name> <operator>-=</operator> <name>md</name></expr>;</expr_stmt></block></then></if>
    }</block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">100100</literal></expr> ;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><name><name>fib2</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+=</operator> <name><name>fib2</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>fib2</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;=</operator> <name>md</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name><name>fib2</name><index>[<expr><name>j</name></expr>]</index></name> <operator>-=</operator> <name>md</name></expr>;</expr_stmt></block></then></if>
    }</block></for>
    <while>while <condition>(<expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name></expr> )</condition>
    <block>{
        <if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <name>m</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>fib</name><index>[<expr><name>m</name></expr>]</index></name> <operator>+</operator> <name><name>fib2</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>%</operator><name>md</name>  <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr> ;</expr_stmt>
<comment type="line">//        for (int i = 1; i &lt;= 6; ++i)</comment>
<comment type="line">//            for (int j = 1; j &lt;= 6; ++j)</comment>
<comment type="line">//        {</comment>
<comment type="line">//        memset(vis, 0, sizeof vis);</comment>
<comment type="line">//            n = i; m = j;</comment>
<comment type="line">//            cout &lt;&lt; solve(0, 0) &lt;&lt; " \n"[j==6];</comment>
<comment type="line">//        }</comment>
<comment type="line">//        cout &lt;&lt; solve(0, 0) &lt;&lt; endl;</comment>
    }</block></while>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
