<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29170968_62995319.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fo</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=a;i&lt;=b;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fd</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=a;i&gt;=b;i--)</cpp:value></cpp:define>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name><name>f</name><index>[<expr><literal type="number">1100</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>q</name><index>[<expr><literal type="number">1100</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name>he</name></decl>,<decl><type ref="prev"/><name>ta</name></decl>,<decl><type ref="prev"/><name>te</name></decl>,<decl><type ref="prev"/><name>ans</name></decl>,<decl><type ref="prev"/><name>a1</name></decl>,<decl><type ref="prev"/><name>a2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><literal type="number">1100</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>a</name><index>[<expr><literal type="number">550</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%s"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><name>a</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>te</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	<macro><name>fo</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro> <expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	<macro><name>fo</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n-<literal type="number">1</literal></argument>)</argument_list></macro> <expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name><operator>+</operator><name>n</name></expr>]</index></name><operator>=</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	<macro><name>fo</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n+n-<literal type="number">1</literal></argument>)</argument_list></macro><block>{
		<expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>f</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		<if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'('</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block></then><else>else <block type="pseudo"><expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>--</operator></expr>;</expr_stmt></block></else></if>
	}</block>
	<expr_stmt><expr><name>he</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt><expr_stmt><expr><name>ta</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	<macro><name>fo</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n+n-<literal type="number">1</literal></argument>)</argument_list></macro><block>{
		<while>while <condition>(<expr><name>he</name><operator>&lt;=</operator><name>ta</name><operator>&amp;&amp;</operator><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;</operator><name><name>f</name><index>[<expr><name><name>q</name><index>[<expr><name>ta</name></expr>]</index></name></expr>]</index></name></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>ta</name><operator>--</operator></expr>;</expr_stmt></block></while>
		<expr_stmt><expr><name><name>q</name><index>[<expr><operator>++</operator><name>ta</name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>i</name><operator>&gt;=</operator><name>n</name></expr>)</condition><then><block>{
			<if>if <condition>(<expr><name><name>q</name><index>[<expr><name>he</name></expr>]</index></name><operator>&lt;</operator><name>i</name><operator>-</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>he</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
			<if>if <condition>(<expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name><name>f</name><index>[<expr><name>i</name><operator>-</operator><name>n</name></expr>]</index></name><operator>&amp;&amp;</operator><name><name>f</name><index>[<expr><name><name>q</name><index>[<expr><name>he</name></expr>]</index></name></expr>]</index></name><operator>&gt;=</operator><name><name>f</name><index>[<expr><name>i</name><operator>-</operator><name>n</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>te</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
		}</block></then></if>
	}</block>
	<expr_stmt><expr><name>ans</name><operator>=</operator><name>te</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>a1</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>a2</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<macro><name>fo</name><argument_list>(<argument>t1</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro>
		<macro><name>fo</name><argument_list>(<argument>t2</argument>,<argument>t1</argument>,<argument>n</argument>)</argument_list></macro>
			<if>if <condition>(<expr><name><name>a</name><index>[<expr><name>t1</name></expr>]</index></name><operator>!=</operator><name><name>a</name><index>[<expr><name>t2</name></expr>]</index></name></expr>)</condition><then><block>{
				<expr_stmt><expr><name>te</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
				<macro><name>fo</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro> <expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>s</name><index>[<expr><name>t1</name></expr>]</index></name><operator>=</operator><name><name>a</name><index>[<expr><name>t2</name></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>s</name><index>[<expr><name>t2</name></expr>]</index></name><operator>=</operator><name><name>a</name><index>[<expr><name>t1</name></expr>]</index></name></expr>;</expr_stmt>
				<macro><name>fo</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n-<literal type="number">1</literal></argument>)</argument_list></macro> <expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name><operator>+</operator><name>n</name></expr>]</index></name><operator>=</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
				<macro><name>fo</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n+n-<literal type="number">1</literal></argument>)</argument_list></macro><block>{
					<expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>f</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
					<if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'('</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block></then><else>else <block type="pseudo"><expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>--</operator></expr>;</expr_stmt></block></else></if>
				}</block>
				<expr_stmt><expr><name>he</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt><expr_stmt><expr><name>ta</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
				<macro><name>fo</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n+n-<literal type="number">1</literal></argument>)</argument_list></macro><block>{
					<while>while <condition>(<expr><name>he</name><operator>&lt;=</operator><name>ta</name><operator>&amp;&amp;</operator><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;</operator><name><name>f</name><index>[<expr><name><name>q</name><index>[<expr><name>ta</name></expr>]</index></name></expr>]</index></name></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>ta</name><operator>--</operator></expr>;</expr_stmt></block></while>
					<expr_stmt><expr><name><name>q</name><index>[<expr><operator>++</operator><name>ta</name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt>
					<if>if <condition>(<expr><name>i</name><operator>&gt;=</operator><name>n</name></expr>)</condition><then><block>{
						<if>if <condition>(<expr><name><name>q</name><index>[<expr><name>he</name></expr>]</index></name><operator>&lt;</operator><name>i</name><operator>-</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>he</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
						<if>if <condition>(<expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name><name>f</name><index>[<expr><name>i</name><operator>-</operator><name>n</name></expr>]</index></name><operator>&amp;&amp;</operator><name><name>f</name><index>[<expr><name><name>q</name><index>[<expr><name>he</name></expr>]</index></name></expr>]</index></name><operator>&gt;=</operator><name><name>f</name><index>[<expr><name>i</name><operator>-</operator><name>n</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>te</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
					}</block></then></if>
				}</block>
				<if>if <condition>(<expr><name>te</name><operator>&gt;</operator><name>ans</name></expr>)</condition><then><block>{
					<expr_stmt><expr><name>ans</name><operator>=</operator><name>te</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>a1</name><operator>=</operator><name>t1</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>a2</name><operator>=</operator><name>t2</name></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then></if>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n%d %d\n"</literal></expr></argument>,<argument><expr><name>ans</name></expr></argument>,<argument><expr><name>a1</name></expr></argument>,<argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
