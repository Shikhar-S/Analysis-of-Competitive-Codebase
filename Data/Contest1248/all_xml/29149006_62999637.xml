<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29149006_62999637.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ull</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>ui</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ss</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>eps</name> <init>= <expr><literal type="number">1e-6</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mod</name> <init>= <expr><literal type="number">45</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name> <init>= <expr><literal type="number">3e5</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<struct>struct <name>Node</name> <block>{<public type="default">
    <decl_stmt><decl><type><name>int</name></type> <name>bal</name></decl>, <decl><type ref="prev"/><name>minbal</name></decl>, <decl><type ref="prev"/><name>cnt</name></decl>;</decl_stmt>

    <constructor><name>Node</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>cnt</name> <operator>=</operator> <name>minbal</name> <operator>=</operator> <name>bal</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><name>Node</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>minbal</name> <operator>=</operator> <name>bal</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>cnt</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    }</block></constructor>
</public>}</block>;</struct>

<decl_stmt><decl><type><name>Node</name></type> <name><name>t</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>Node</name></type> <name>comp</name><parameter_list>(<parameter><decl><type><name>Node</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>Node</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>Node</name></type> <name>r</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>r</name><operator>.</operator><name>bal</name></name> <operator>=</operator> <name><name>x</name><operator>.</operator><name>bal</name></name> <operator>+</operator> <name><name>y</name><operator>.</operator><name>bal</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>.</operator><name>minbal</name></name> <operator>=</operator> <name><name>y</name><operator>.</operator><name>minbal</name></name> <operator>+</operator> <name><name>x</name><operator>.</operator><name>bal</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>.</operator><name>cnt</name></name> <operator>=</operator> <name><name>y</name><operator>.</operator><name>cnt</name></name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name><name>x</name><operator>.</operator><name>minbal</name></name> <operator>==</operator> <name><name>r</name><operator>.</operator><name>minbal</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>r</name><operator>.</operator><name>cnt</name></name> <operator>+=</operator> <name><name>x</name><operator>.</operator><name>cnt</name></name></expr>;</expr_stmt>
    }</block></then> <elseif>else <if>if <condition>(<expr><name><name>x</name><operator>.</operator><name>minbal</name></name> <operator>&lt;</operator> <name><name>r</name><operator>.</operator><name>minbal</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>r</name><operator>.</operator><name>minbal</name></name> <operator>=</operator> <name><name>x</name><operator>.</operator><name>minbal</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>r</name><operator>.</operator><name>cnt</name></name> <operator>=</operator> <name><name>x</name><operator>.</operator><name>cnt</name></name></expr>;</expr_stmt>
    }</block></then></if></elseif></if>
    <return>return <expr><name>r</name></expr>;</return>
}</block></function>


<function><type><name>void</name></type> <name>build</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tr</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>tl</name> <operator>==</operator> <name>tr</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>t</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <call><name>Node</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>tl</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>tm</name> <init>= <expr><operator>(</operator><name>tl</name> <operator>+</operator> <name>tr</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>build</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name>v</name></expr></argument>, <argument><expr><name>tl</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>build</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name>v</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>tm</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>tr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>t</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <call><name>comp</name><argument_list>(<argument><expr><name><name>t</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>v</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>t</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>v</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
}</block></function>

<function><type><name>void</name></type> <name>upd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>tl</name> <operator>==</operator> <name>tr</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>t</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <call><name>Node</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>tm</name> <init>= <expr><operator>(</operator><name>tl</name> <operator>+</operator> <name>tr</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>pos</name> <operator>&lt;=</operator> <name>tm</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>upd</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name>v</name></expr></argument>, <argument><expr><name>tl</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><call><name>upd</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name>v</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>tm</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>tr</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
        <expr_stmt><expr><name><name>t</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <call><name>comp</name><argument_list>(<argument><expr><name><name>t</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>v</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>t</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>v</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
}</block></function>

<function><type><name>Node</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>tl</name> <operator>==</operator> <name>l</name> <operator>&amp;&amp;</operator> <name>tr</name> <operator>==</operator> <name>r</name></expr>)</condition><then> <block>{
        <return>return <expr><name><name>t</name><index>[<expr><name>v</name></expr>]</index></name></expr>;</return>
    }</block></then> <else>else <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>tm</name> <init>= <expr><operator>(</operator><name>tl</name> <operator>+</operator> <name>tr</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>r</name> <operator>&lt;=</operator> <name>tm</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><call><name>get</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name>v</name></expr></argument>, <argument><expr><name>tl</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return></block></then>
        <elseif>else <if>if <condition>(<expr><name>l</name> <operator>&gt;</operator> <name>tm</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><call><name>get</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name>v</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>tm</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>tr</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return></block></then></if></elseif>
        <else>else <block type="pseudo"><expr_stmt><expr><call><name>comp</name><argument_list>(<argument><expr><call><name>get</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name>v</name></expr></argument>, <argument><expr><name>tl</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>get</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name>v</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>tm</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>tr</name></expr></argument>, <argument><expr><name>tm</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
    }</block></else></if>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JOPA</name></cpp:ifdef>
    <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"in.txt"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"out.txt"</literal></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>char</name></type> <name>ch</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>ch</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        }</block></else></if>
    }</block></for>

    <expr_stmt><expr><call><name>build</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>x</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>y</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{
            <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>upd</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>upd</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>ans</name> <operator>&lt;</operator> <name><name>t</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>cnt</name> <operator>&amp;&amp;</operator> <name><name>t</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>bal</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>ans</name> <operator>=</operator> <name><name>t</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>cnt</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>x</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>y</name> <operator>=</operator> <name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>upd</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>upd</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></for>

    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal> <operator>&lt;&lt;</operator> <name>x</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name>y</name></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
