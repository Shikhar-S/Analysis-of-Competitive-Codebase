<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29148982_62994128.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<function><type><name>void</name></type> <name>debug</name><parameter_list>()</parameter_list> <block>{ <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt> }</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>, <parameter><type><name>class</name> <modifier>...</modifier></type><name>R</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>debug</name> <parameter_list>(<parameter><decl><type><name>T</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>R</name> <modifier>...</modifier></type><name>r</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"["</literal> <operator>&lt;&lt;</operator> <name>f</name> <operator>&lt;&lt;</operator> <literal type="string">"]"</literal></expr>;</expr_stmt> <expr_stmt><expr><call><name>debug</name> <argument_list>(<argument><expr><name>r</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>T</name></type> <name>mmin</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>min</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>, <parameter><type><name>class</name> <modifier>...</modifier></type><name>R</name></parameter>&gt;</parameter_list></template> <type><name>T</name></type> <name>mmin</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>R</name><modifier>...</modifier></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>min</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><call><name>mmin</name><argument_list>(<argument><expr><name>b</name><operator>...</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>T</name></type> <name>mmax</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>max</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>, <parameter><type><name>class</name> <modifier>...</modifier></type><name>R</name></parameter>&gt;</parameter_list></template> <type><name>T</name></type> <name>mmax</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>R</name><modifier>...</modifier></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>max</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><call><name>mmax</name><argument_list>(<argument><expr><name>b</name><operator>...</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>T</name></type> <name>mgcd</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>__gcd</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>, <parameter><type><name>class</name> <modifier>...</modifier></type><name>R</name></parameter>&gt;</parameter_list></template> <type><name>T</name></type> <name>mgcd</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>R</name><modifier>...</modifier></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>__gcd</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><call><name>mgcd</name><argument_list>(<argument><expr><name>b</name><operator>...</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>

<function><type><name>void</name></type> <name>myin</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"1.in"</literal></expr></argument>,<argument><expr><literal type="string">"r"</literal></expr></argument>,<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"1.out"</literal></expr></argument>,<argument><expr><literal type="string">"w"</literal></expr></argument>,<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<namespace>namespace <name>IO</name>
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MX</name> <init>= <expr><literal type="number">4e7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>MX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>sz</name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>begin</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>sz</name> <operator>=</operator> <call><name>fread</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>MX</name></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><specifier>inline</specifier> <type><name>bool</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>&amp;</modifier></type><name>t</name></decl></parameter>)</parameter_list>
<block>{
    <while>while<condition>(<expr><name>c</name> <operator>&lt;</operator> <name>sz</name> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><name>c</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>buf</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&lt;</operator> <literal type="char">'0'</literal> <operator>||</operator> <name><name>buf</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&gt;</operator> <literal type="char">'9'</literal><operator>)</operator></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>c</name><operator>++</operator></expr>;</expr_stmt></block></while>
    <if>if<condition>(<expr><name>c</name> <operator>&gt;=</operator> <name>sz</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
    <decl_stmt><decl><type><name>bool</name></type> <name>flag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><name><name>buf</name><index>[<expr><name>c</name></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>c</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
    <for>for<control>(<init><expr><name>t</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>sz</name> <operator>&amp;&amp;</operator> <literal type="char">'0'</literal> <operator>&lt;=</operator> <name><name>buf</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>t</name> <operator>=</operator> <name>t</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <name><name>buf</name><index>[<expr><name>c</name></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block></for>
    <if>if<condition>(<expr><name>flag</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>t</name> <operator>=</operator> <operator>-</operator><name>t</name></expr>;</expr_stmt></block></then></if>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
}</block></function>
}</block></namespace>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_p</name></cpp:macro> <cpp:value>pair&lt;ll, ll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x.begin(), x.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lson</name></cpp:macro> <cpp:value>rt&lt;&lt;1,l,mid</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rson</name></cpp:macro> <cpp:value>rt&lt;&lt;1|1,mid+1,r</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>N</name> <init>= <expr><literal type="number">100005</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>M</name> <init>= <expr><literal type="number">1e5</literal><operator>+</operator><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>mod</name> <init>= <expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<comment type="line">// wb  12</comment>

<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><literal type="number">505</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>check</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>fq</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>minn</name> <init>= <expr><literal type="number">1e9</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
        <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><operator>++</operator><name>fq</name></expr>;</expr_stmt></block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><operator>--</operator><name>fq</name></expr>;</expr_stmt></block></else></if>
        <expr_stmt><expr><name>minn</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>minn</name></expr></argument>, <argument><expr><name>fq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <if>if<condition>(<expr><name>fq</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>

    <decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<comment type="line">//    if(minn &gt;= 0) cnt = 1;</comment>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
        <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><operator>--</operator><name>minn</name></expr>;</expr_stmt></block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><operator>++</operator><name>minn</name></expr>;</expr_stmt></block></else></if>
        <if>if<condition>(<expr><name>minn</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><operator>++</operator><name>cnt</name></expr>;</expr_stmt></block></then></if>
    }</block></for>
    <return>return <expr><name>cnt</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%s"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><name>s</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>al</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>ar</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
        <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{
            <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>tmp</name> <init>= <expr><call><name>check</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name>tmp</name> <operator>&gt;</operator> <name>ans</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>ans</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>al</name> <operator>=</operator> <name>i</name></expr><operator>,</operator> <expr><name>ar</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></for>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n%d %d\n"</literal></expr></argument>,<argument><expr><name>ans</name></expr></argument>,<argument><expr><name>al</name></expr></argument>,<argument><expr><name>ar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

<comment type="block">/*
)(()(()())()

)(())()()(()


))()((

*/</comment>














</unit>
