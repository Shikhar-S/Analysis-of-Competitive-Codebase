<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29180581_63004243.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<function><type><name>void</name></type> <name>pv</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>v</name></decl></parameter>)</parameter_list><block>{  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>v</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;&lt;</operator><literal type="string">" "</literal></expr>;</expr_stmt>}</block></for><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">""</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>}</block></function>
<function><type><name>void</name></type> <name>pa</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name><name>a</name><index>[]</index></name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>)</parameter_list><block>{<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>p</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name><operator>+</operator><name>p</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;&lt;</operator><literal type="string">" "</literal></expr>;</expr_stmt>}</block></for><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">""</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mem</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(a,0,sizeof(a))</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>pi</name><init>=<expr><literal type="number">3.141592653589793238</literal></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOS</name></cpp:macro> <cpp:value>ios :: sync_with_stdio(false); cin.tie(0); cout.tie(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>d</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout&lt;&lt;x&lt;&lt;endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fni</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=(int)x;i&gt;=(int)y;i-=(int)z)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fnj</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int j=(int)x;j&gt;=(int)y;j-=(int)z)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fpi</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=(int)x;i&lt;=(int)y;i+=(int)z)</cpp:value></cpp:define>  
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fpj</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int j=(int)x;j&lt;=(int)y;j+=(int)z)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fpk</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int k=(int)x;k&lt;=(int)y;k+=(int)z)</cpp:value></cpp:define>  
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fnk</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int k=(int)x;k&gt;=(int)y;k-=(int)z)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rev</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>reverse(a.begin(),a.end())</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>inf</name> <init>= <expr><literal type="number">1000000</literal></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>maxn</name></cpp:macro> <cpp:value>300005</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro> <cpp:value>(int)10e9+7</cpp:value></cpp:define>
<function><type><name>int</name></type> <name>find</name><parameter_list>(<parameter><decl><type><name>string</name></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>,<decl><type ref="prev"/><name>temp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>fn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name><name>dpf</name><index>[<expr><name>l</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>dpb</name><index>[<expr><name>l</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name>mx</name> <init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name><name>pos</name><index>[<expr><name>l</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name>mi</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <macro><name>fpi</name><argument_list>(<argument><literal type="number">0</literal></argument>,<argument>l-<literal type="number">1</literal></argument>,<argument><literal type="number">1</literal></argument>)</argument_list></macro> <expr_stmt><expr><name><name>dpb</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>INT_MAX</name></expr>;</expr_stmt>
    <macro><name>fpi</name><argument_list>(<argument><literal type="number">0</literal></argument>,<argument>l-<literal type="number">1</literal></argument>,<argument><literal type="number">1</literal></argument>)</argument_list></macro>
    <block>{
        <if>if<condition>(<expr><name>i</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
        <block>{
            <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'('</literal></expr>)</condition><then> <block>{<expr_stmt><expr><name><name>dpf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>}</block></then>
            <else>else <block>{<expr_stmt><expr><name><name>dpf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>}</block></else></if>
        }</block></then>
        <else>else
        <block>{
            <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'('</literal></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name><name>dpf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>dpf</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            }</block></then>
            <else>else
            <block>{
                <expr_stmt><expr><name><name>dpf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>dpf</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            }</block></else></if>
        }</block></else></if>
        <if>if<condition>(<expr><name><name>dpf</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;=</operator><name>mi</name></expr>)</condition><then> <block>{<expr_stmt><expr><name><name>pos</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt><expr_stmt><expr><name>mi</name> <operator>=</operator> <name><name>dpf</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>}</block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><name><name>pos</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></else></if>
        <comment type="line">//d(i&lt;&lt;" "&lt;&lt;dpf[i]&lt;&lt;" "&lt;&lt;pos[i])</comment>
    }</block>
    <macro><name>fni</name><argument_list>(<argument>l-<literal type="number">1</literal></argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">1</literal></argument>)</argument_list></macro>
    <block>{
        <if>if<condition>(<expr><name>i</name><operator>==</operator><name>l</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
        <block>{
            <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'('</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>dpb</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then>
            <else>else <block type="pseudo"><expr_stmt><expr><name><name>dpb</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
        }</block></then>
        <else>else
        <block>{
            <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'('</literal></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name><name>dpb</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>dpb</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            }</block></then>
            <else>else
            <block>{
                <expr_stmt><expr><name><name>dpb</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>dpb</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            }</block></else></if>
        }</block></else></if>
    }</block>
    <macro><name>fni</name><argument_list>(<argument>l-<literal type="number">1</literal></argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">1</literal></argument>)</argument_list></macro>
    <block>{
        <if>if<condition>(<expr><name>i</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
        <block>{
            <if>if<condition>(<expr><name><name>dpb</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;=</operator><name>mx</name> <operator>&amp;&amp;</operator> <name><name>dpb</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ans</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
        }</block></then>
        <else>else
        <block>{
            <if>if<condition>(<expr><name><name>dpb</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;=</operator><name>mx</name></expr>)</condition><then>
            <block>{
                <if>if<condition>(<expr><name><name>dpb</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>dpf</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pos</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name>ans</name><operator>++</operator></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><name>mx</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name><name>dpb</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name>mx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></else></if>
    }</block>
    <return>return <expr><name>ans</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>ans</name><init>=<expr><operator>-</operator><literal type="number">5</literal></expr></init></decl>,<decl><type ref="prev"/><name>r</name></decl>,<decl><type ref="prev"/><name>temp</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>s</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">//swap(s[7],s[6]);</comment>
    <macro><name>fpi</name><argument_list>(<argument><literal type="number">0</literal></argument>,<argument>n-<literal type="number">1</literal></argument>,<argument><literal type="number">1</literal></argument>)</argument_list></macro>
    <block>{
        <macro><name>fpj</name><argument_list>(<argument><literal type="number">0</literal></argument>,<argument>n-<literal type="number">1</literal></argument>,<argument><literal type="number">1</literal></argument>)</argument_list></macro>
        <block>{
            <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>find</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
            <if>if<condition>(<expr><name>temp</name><operator>&gt;</operator><name>ans</name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>l</name> <operator>=</operator> <name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>r</name> <operator>=</operator> <name>j</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>ans</name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
    }</block>
    <macro><name>d</name><argument_list>(<argument>ans</argument>)</argument_list></macro>
    <macro><name>d</name><argument_list>(<argument>l&lt;&lt;<literal type="string">" "</literal>&lt;&lt;r</argument>)</argument_list></macro>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><name>IOS</name></expr>;</expr_stmt>
    <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ONLINE_JUDGE</name></cpp:ifndef> 
    <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"input.txt"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"output.txt"</literal></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <decl_stmt><decl><type><name>int</name></type> <name>t</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <comment type="line">//cin&gt;&gt;t;</comment>
    <while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition> <block type="pseudo"><expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
    <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>LOCAL_DEFINE</name></cpp:ifndef>
    <expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <literal type="string">"Time elapsed: "</literal> <operator>&lt;&lt;</operator> <literal type="number">1.0</literal> <operator>*</operator> <call><name>clock</name><argument_list>()</argument_list></call> <operator>/</operator> <name>CLOCKS_PER_SEC</name> <operator>&lt;&lt;</operator> <literal type="string">" s.\n"</literal></expr>;</expr_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>
</unit>
