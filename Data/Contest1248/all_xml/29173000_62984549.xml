<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29173000_62984549.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bits/stdc++.h"</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>LL</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>uLL</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>P</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VNAME</name><parameter_list>(<parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(#value)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bug</name></cpp:macro> <cpp:value>printf("*********\n");</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout&lt;&lt;"["&lt;&lt;VNAME(x)&lt;&lt;" = "&lt;&lt;x&lt;&lt;"]"&lt;&lt;endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mid</name></cpp:macro> <cpp:value>((l + r) &gt;&gt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>chl</name></cpp:macro> <cpp:value>2 * k + 1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>chr</name></cpp:macro> <cpp:value>2 * k + 2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lson</name></cpp:macro> <cpp:value>l, mid, chl</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rson</name></cpp:macro> <cpp:value>mid + 1, r, chr</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>eb</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>emplace_back(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>emplace_back(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mem</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(a, b, sizeof(a));</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>LL</name></type> <name>mod</name> <init>= <expr><operator>(</operator><name>LL</name><operator>)</operator> <literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <literal type="number">1e6</literal> <operator>+</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>LL</name></type> <name>INF</name> <init>= <expr><literal type="number">0x7fffffff</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>LL</name></type> <name>inf</name> <init>= <expr><literal type="number">0x3f3f3f3f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>eps</name> <init>= <expr><literal type="number">1e-8</literal></expr></init></decl>;</decl_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ONLINE_JUDGE</name></cpp:ifndef>
<decl_stmt><decl><type><name>clock_t</name></type> <name>prostart</name> <init>= <expr><call><name>clock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>f</name><parameter_list>()</parameter_list> <block>{
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ONLINE_JUDGE</name></cpp:ifndef>
    <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"../data.in"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>

<comment type="line">//typedef __int128 LLL;</comment>

<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>w</name></decl></parameter>)</parameter_list> <block>{<comment type="line">//è¯»å¥</comment>
    <decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>k</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><name>c</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><expr_stmt><expr><ternary><condition><expr><name>c</name> <operator>==</operator> <literal type="char">'-'</literal></expr> ?</condition><then> <expr><name>k</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>k</name> <operator>=</operator> <name>k</name></expr></else></ternary></expr>;</expr_stmt></block></while>
    <expr_stmt><expr><name>w</name> <operator>=</operator> <name>c</name> <operator>&amp;</operator> <literal type="number">15</literal></expr>;</expr_stmt>
    <while>while <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><name>c</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
        <block type="pseudo"><expr_stmt><expr><name>w</name> <operator>=</operator> <name>w</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">15</literal><operator>)</operator></expr>;</expr_stmt></block></while>
    <expr_stmt><expr><name>w</name> <operator>*=</operator> <name>k</name></expr>;</expr_stmt>
}</block></function>

<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name>void</name></type> <name>output</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name>x</name> <operator>=</operator> <operator>-</operator><name>x</name></expr>;</expr_stmt></block></then></if>
    <decl_stmt><decl><type><name>int</name></type> <name><name>ss</name><index>[<expr><literal type="number">55</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>sp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <do>do
        <block type="pseudo"><expr_stmt><expr><name><name>ss</name><index>[<expr><operator>++</operator><name>sp</name></expr>]</index></name> <operator>=</operator> <name>x</name> <operator>%</operator> <literal type="number">10</literal></expr>;</expr_stmt></block>
    while <condition>(<expr><name>x</name> <operator>/=</operator> <literal type="number">10</literal></expr>)</condition>;</do>
    <while>while <condition>(<expr><name>sp</name></expr>)</condition>
        <block type="pseudo"><expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="number">48</literal> <operator>+</operator> <name><name>ss</name><index>[<expr><name>sp</name><operator>--</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></while>
}</block></function>

<decl_stmt><decl><type><name>int</name></type> <name><name>dp</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>f</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">1e5</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>LL</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>b</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>b</name> <operator>+=</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>a</name> <operator>+</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b</name> <operator>=</operator> <operator>-</operator><name>b</name></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <operator>(</operator><name>n</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>-</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><name>b</name> <operator>-=</operator> <name>c</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>, <argument><expr><name>c</name> <operator>*</operator> <name>c</name> <operator>+</operator> <name>b</name> <operator>*</operator> <name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ONLINE_JUDGE</name></cpp:ifndef>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"è¿è¡æ¶é´:"</literal> <operator>&lt;&lt;</operator> <literal type="number">1.0</literal> <operator>*</operator> <operator>(</operator><call><name>clock</name><argument_list>()</argument_list></call> <operator>-</operator> <name>prostart</name><operator>)</operator> <operator>/</operator> <name>CLOCKS_PER_SEC</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

</unit>
