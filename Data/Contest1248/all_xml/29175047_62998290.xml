<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29175047_62998290.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdlib&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctime&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>p</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<struct>struct <name>matrix</name> <block>{<public type="default">
	<decl_stmt><decl><type><name>ll</name></type> <name>a00</name></decl>, <decl><type ref="prev"/><name>a01</name></decl>, <decl><type ref="prev"/><name>a10</name></decl>, <decl><type ref="prev"/><name>a11</name></decl>;</decl_stmt>
</public>}</block>;</struct>

<function><type><name>matrix</name></type> <name>fib</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>matrix</name></type> <name>M</name></decl></parameter>)</parameter_list> <block>{
	<if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
		<return>return <expr><name>M</name></expr>;</return>
	}</block></then></if>
	<if>if <condition>(<expr><name>n</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
		<decl_stmt><decl><type><name>matrix</name></type> <name>m</name> <init>= <expr><call><name>fib</name><argument_list>(<argument><expr><name>n</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>matrix</name></type> <name>t</name></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>t</name><operator>.</operator><name>a00</name></name> <operator>=</operator> <operator>(</operator><name><name>m</name><operator>.</operator><name>a00</name></name> <operator>*</operator> <name><name>m</name><operator>.</operator><name>a00</name></name> <operator>+</operator> <name><name>m</name><operator>.</operator><name>a01</name></name> <operator>*</operator> <name><name>m</name><operator>.</operator><name>a10</name></name><operator>)</operator> <operator>%</operator> <name>p</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>t</name><operator>.</operator><name>a01</name></name> <operator>=</operator> <operator>(</operator><name><name>m</name><operator>.</operator><name>a00</name></name> <operator>*</operator> <name><name>m</name><operator>.</operator><name>a01</name></name> <operator>+</operator> <name><name>m</name><operator>.</operator><name>a01</name></name> <operator>*</operator> <name><name>m</name><operator>.</operator><name>a11</name></name><operator>)</operator> <operator>%</operator> <name>p</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>t</name><operator>.</operator><name>a10</name></name> <operator>=</operator> <operator>(</operator><name><name>m</name><operator>.</operator><name>a10</name></name> <operator>*</operator> <name><name>m</name><operator>.</operator><name>a00</name></name> <operator>+</operator> <name><name>m</name><operator>.</operator><name>a11</name></name> <operator>*</operator> <name><name>m</name><operator>.</operator><name>a10</name></name><operator>)</operator> <operator>%</operator> <name>p</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>t</name><operator>.</operator><name>a11</name></name> <operator>=</operator> <operator>(</operator><name><name>m</name><operator>.</operator><name>a10</name></name> <operator>*</operator> <name><name>m</name><operator>.</operator><name>a01</name></name> <operator>+</operator> <name><name>m</name><operator>.</operator><name>a11</name></name> <operator>*</operator> <name><name>m</name><operator>.</operator><name>a11</name></name><operator>)</operator> <operator>%</operator> <name>p</name></expr>;</expr_stmt>
		<return>return <expr><name>t</name></expr>;</return>
	}</block></then></if>
	<decl_stmt><decl><type><name>matrix</name></type> <name>t</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>matrix</name></type> <name>m</name> <init>= <expr><call><name>fib</name><argument_list>(<argument><expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>t</name><operator>.</operator><name>a00</name></name> <operator>=</operator> <operator>(</operator><name><name>M</name><operator>.</operator><name>a00</name></name> <operator>*</operator> <name><name>m</name><operator>.</operator><name>a00</name></name> <operator>+</operator> <name><name>M</name><operator>.</operator><name>a01</name></name> <operator>*</operator> <name><name>m</name><operator>.</operator><name>a10</name></name><operator>)</operator> <operator>%</operator> <name>p</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>t</name><operator>.</operator><name>a01</name></name> <operator>=</operator> <operator>(</operator><name><name>M</name><operator>.</operator><name>a00</name></name> <operator>*</operator> <name><name>m</name><operator>.</operator><name>a01</name></name> <operator>+</operator> <name><name>M</name><operator>.</operator><name>a01</name></name> <operator>*</operator> <name><name>m</name><operator>.</operator><name>a11</name></name><operator>)</operator> <operator>%</operator> <name>p</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>t</name><operator>.</operator><name>a10</name></name> <operator>=</operator> <operator>(</operator><name><name>M</name><operator>.</operator><name>a10</name></name> <operator>*</operator> <name><name>m</name><operator>.</operator><name>a00</name></name> <operator>+</operator> <name><name>M</name><operator>.</operator><name>a11</name></name> <operator>*</operator> <name><name>m</name><operator>.</operator><name>a10</name></name><operator>)</operator> <operator>%</operator> <name>p</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>t</name><operator>.</operator><name>a11</name></name> <operator>=</operator> <operator>(</operator><name><name>M</name><operator>.</operator><name>a10</name></name> <operator>*</operator> <name><name>m</name><operator>.</operator><name>a01</name></name> <operator>+</operator> <name><name>M</name><operator>.</operator><name>a11</name></name> <operator>*</operator> <name><name>m</name><operator>.</operator><name>a11</name></name><operator>)</operator> <operator>%</operator> <name>p</name></expr>;</expr_stmt>
	<return>return <expr><name>t</name></expr>;</return>
}</block></function>

<function><type><name>int32_t</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>N</name> <init>= <expr><call><name>max</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>matrix</name></type> <name>P</name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>P</name><operator>.</operator><name>a00</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>P</name><operator>.</operator><name>a01</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>P</name><operator>.</operator><name>a10</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>P</name><operator>.</operator><name>a11</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>Fn</name> <init>= <expr><call><name>fib</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>P</name></expr></argument>)</argument_list></call><operator>.</operator><name>a11</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>Fm</name> <init>= <expr><call><name>fib</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>P</name></expr></argument>)</argument_list></call><operator>.</operator><name>a11</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>Fn</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>Fm</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>%</operator> <name>p</name></expr>;</expr_stmt>
}</block></function></unit>
