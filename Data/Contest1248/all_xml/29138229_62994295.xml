<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29138229_62994295.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<using>using <name>Int</name> <init>= <type><name>long</name> <name>long</name></type></init>;</using>
<function><type><name>int</name></type> <name>f</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>string</name> <modifier>&amp;</modifier></type><name>S</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>auto</name></type> <name>c</name> <range>: <expr><name>S</name></expr></range></decl></init>)</control> <block type="pseudo"><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt></block></then></if></block></for>
    <if>if <condition>(<expr><name>cnt</name> <operator>+</operator> <name>cnt</name> <operator>!=</operator> <call><name><name>S</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>
    <decl_stmt><decl><type><name>int</name></type> <name>level</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>minlevel</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>auto</name></type> <name>c</name> <range>: <expr><name>S</name></expr></range></decl></init>)</control> <block>{
        <if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>level</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
        <if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">')'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>level</name><operator>--</operator></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name>minlevel</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>minlevel</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>auto</name></type> <name>c</name> <range>: <expr><name>S</name></expr></range></decl></init>)</control> <block>{
        <if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>level</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
        <if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">')'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>level</name><operator>--</operator></expr>;</expr_stmt></block></then></if>
        <if>if <condition>(<expr><name>level</name> <operator>==</operator> <name>minlevel</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ans</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
    }</block></for>
    <return>return <expr><name>ans</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>N</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>N</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>string</name></type> <name>S</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>S</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>l</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>r</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{
            <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>S</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>auto</name></type> <name>val</name> <init>= <expr><call><name>f</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>val</name> <operator>&gt;</operator> <name>ans</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>l</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>r</name> <operator>=</operator> <name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>ans</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>S</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></for>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>l</name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal> <operator>&lt;&lt;</operator> <name>r</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
