<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29179434_62989105.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;array&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MODP</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>

<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>cache</name></decl>;</decl_stmt>

<function><type><name>long</name> <name>long</name></type> <name>rp</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{
	<if>if<condition>(<expr><name>n</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
	<if>if<condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">2</literal></expr>;</return></block></then></if>

	<if>if<condition>(<expr><operator>!</operator><name><name>cache</name><index>[<expr><name>n</name></expr>]</index></name></expr>)</condition><then>
		<block type="pseudo"><expr_stmt><expr><name><name>cache</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><call><name>rp</name><argument_list>(<argument><expr><name>n</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>*</operator><call><name>rp</name><argument_list>(<argument><expr><operator>(</operator><name>n</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>rp</name><argument_list>(<argument><expr><operator>(</operator><name>n</name><operator>-</operator><literal type="number">2</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>*</operator><call><name>rp</name><argument_list>(<argument><expr><operator>(</operator><name>n</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>%</operator><name>MODP</name></expr>;</expr_stmt></block></then></if>

	<return>return <expr><name><name>cache</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cache</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">100001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">2</literal><operator>*</operator><operator>(</operator><call><name>rp</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call><operator>+</operator><call><name>rp</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>%</operator><name>MODP</name></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
