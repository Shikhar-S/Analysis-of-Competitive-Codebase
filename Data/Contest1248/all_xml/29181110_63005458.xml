<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29181110_63005458.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>m</name> <init>= <expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>
<function><type><name>long</name> <name>long</name> <name>int</name></type> <name>po</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> 
<block>{ 
    <if>if <condition>(<expr><name>y</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> 
        <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if> 
    <decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>p</name> <init>= <expr><call><name>po</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>%</operator> <name>m</name></expr></init></decl>;</decl_stmt> 
    <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>p</name> <operator>*</operator> <name>p</name><operator>)</operator> <operator>%</operator> <name>m</name></expr>;</expr_stmt> 
  
    <return>return <expr><ternary><condition><expr><operator>(</operator><name>y</name><operator>%</operator><literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then> <expr><name>p</name></expr> </then><else>: <expr><operator>(</operator><name>x</name> <operator>*</operator> <name>p</name><operator>)</operator> <operator>%</operator> <name>m</name></expr></else></ternary></expr>;</return> 
}</block></function> 
<function><type><name>long</name> <name>long</name> <name>int</name></type> <name>modInverse</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>a</name></decl></parameter>)</parameter_list> 
<block>{ 
    <decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>g</name> <init>= <expr><call><name>__gcd</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
    <decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>ans</name> <init>= <expr><call><name>po</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>m</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>ans</name></expr>;</return>
}</block></function> 
<function><type><name>long</name> <name>long</name> <name>int</name></type> <name>process</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>a</name></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>p</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <comment type="line">//cout&lt;&lt;p&lt;&lt;" ";</comment>
    <for>for<control>(<init><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>a</name><operator>/</operator><literal type="number">2</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><name>p</name><operator>*=</operator><operator>(</operator><name>a</name><operator>-</operator><literal type="number">2</literal><operator>*</operator><name>i</name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name><operator>%=</operator><name>m</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name><operator>*=</operator><operator>(</operator><name>a</name><operator>-</operator><literal type="number">2</literal><operator>*</operator><name>i</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name><operator>%=</operator><name>m</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name><operator>*=</operator><call><name>modInverse</name><argument_list>(<argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name><operator>%=</operator><name>m</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name><operator>*=</operator><call><name>modInverse</name><argument_list>(<argument><expr><name>a</name><operator>-</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name><operator>%=</operator><name>m</name></expr>;</expr_stmt>
        <comment type="line">//cout&lt;&lt;p&lt;&lt;" ";</comment>
        <expr_stmt><expr><name>ans</name><operator>+=</operator><name>p</name></expr>;</expr_stmt>
    }</block></for>
    <comment type="line">//cout&lt;&lt;endl;</comment>
    <return>return <expr><name>ans</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>a</name><operator>&gt;&gt;</operator><name>b</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>process</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>ans</name> <init>= <expr><literal type="number">2</literal><operator>*</operator><operator>(</operator><call><name>process</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call><operator>+</operator><call><name>process</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>)</operator><operator>+</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>ans</name><operator>%=</operator><name>m</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><literal type="string">"\n"</literal></expr>;</expr_stmt>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>num</name> <init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <comment type="line">//cin&gt;&gt;num;</comment>
    <for>for<control>(<init><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>num</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
       	<expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></for>   
}</block></function>
</unit>
