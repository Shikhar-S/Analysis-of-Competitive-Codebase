<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29181143_62992377.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><literal type="number">51100</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>N</name></decl>,<decl><type ref="prev"/><name><name>f1</name><index>[<expr><literal type="number">51100</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>f2</name><index>[<expr><literal type="number">51100</literal></expr>]</index></name></decl>;</decl_stmt>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>lqx</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>totl</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>totr</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><specifier>register</specifier> <name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>N</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{
        <if>if<condition>(<expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'('</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>totl</name><operator>++</operator></expr>;</expr_stmt></block></then>
        <elseif>else <if>if<condition>(<expr><name>totl</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>totr</name><operator>++</operator></expr>;</expr_stmt></block></then></if></elseif>
		<else>else <block type="pseudo"><expr_stmt><expr><name>totl</name><operator>--</operator></expr>;</expr_stmt></block></else></if>
        <if>if<condition>(<expr><name>totl</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>f1</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>totr</name></expr>;</expr_stmt></block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><name><name>f1</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
    }</block></for>
}</block></function>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>lqx1</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>totl</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>totr</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>N</name></expr></init></decl>;</init><condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">1</literal></expr>;</condition><incr><expr><operator>--</operator><name>i</name></expr></incr>)</control>
	<block>{
        <if>if<condition>(<expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">')'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>totr</name><operator>++</operator></expr>;</expr_stmt></block></then>
        <elseif>else <if>if<condition>(<expr><name>totr</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>totl</name><operator>++</operator></expr>;</expr_stmt></block></then></if></elseif>
		<else>else <block type="pseudo"><expr_stmt><expr><name>totr</name><operator>--</operator></expr>;</expr_stmt></block></else></if>
        <if>if<condition>(<expr><name>totr</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>f2</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>totl</name></expr>;</expr_stmt></block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><name><name>f2</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><operator>-</operator><literal type="number">2</literal></expr>;</expr_stmt></block></else></if>
    }</block></for>
}</block></function>
<decl_stmt><decl><type><name>int</name></type> <name>maxn</name></decl>,<decl><type ref="prev"/><name>ans</name></decl>,<decl><type ref="prev"/><name>L</name></decl>,<decl><type ref="prev"/><name>R</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>N</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>,<argument><expr><name>str</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>maxn</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>N</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{
        <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><name>i</name></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>N</name></expr>;</condition><incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
		<block>{
            <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>str</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>lqx</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>lqx1</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>ans</name><operator>=</operator><operator>(</operator><name><name>f1</name><index>[<expr><name>N</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
            <for>for<control>(<init><decl><type><name>int</name></type> <name>k</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>k</name><operator>&lt;</operator><name>N</name></expr>;</condition><incr><expr><operator>++</operator><name>k</name></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name>ans</name><operator>+=</operator><operator>(</operator><name><name>f1</name><index>[<expr><name>k</name></expr>]</index></name><operator>==</operator><name><name>f2</name><index>[<expr><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt></block></for>
            <if>if<condition>(<expr><name>maxn</name><operator>&lt;</operator><name>ans</name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name>maxn</name><operator>=</operator><name>ans</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>L</name><operator>=</operator><name>i</name></expr><operator>,</operator><expr><name>R</name><operator>=</operator><name>j</name></expr>;</expr_stmt>
			}</block></then></if>
            <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>str</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></for>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n%d %d\n"</literal></expr></argument>,<argument><expr><name>maxn</name></expr></argument>,<argument><expr><name>L</name></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
