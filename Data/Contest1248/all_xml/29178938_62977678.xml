<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29178938_62977678.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<comment type="line">//#pragma GCC optimize ("O3")</comment>
 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;int,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>point</name></cpp:macro> <cpp:value>pair&lt;double,double&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>segment</name></cpp:macro> <cpp:value>pair&lt;point,point&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>circle</name></cpp:macro> <cpp:value>pair&lt;point,double&gt;</cpp:value></cpp:define> <comment type="line">//titik pusat, radius</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>line</name></cpp:macro> <cpp:value>pair&lt;double,double&gt;</cpp:value></cpp:define> <comment type="line">//m,c</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ins</name></cpp:macro> <cpp:value>insert</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>er</name></cpp:macro> <cpp:value>erase</cpp:value></cpp:define>
 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FORU</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int a=b; a&lt;=c; a++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FORD</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int a=b; a&gt;=c; a--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int a=1; a&lt;=b; a++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FORA</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(auto (a) : (b))</cpp:value></cpp:define>
 
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>EPS</name> <init>= <expr><literal type="number">1e-9</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>PI</name> <init>= <expr><call><name>acos</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MOD</name> <init>= <expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yu</name></cpp:macro> <cpp:value>using</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>don</name></cpp:macro> <cpp:value>namespace</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sei</name></cpp:macro> <cpp:value>std</cpp:value></cpp:define>
 
<decl_stmt><decl><type><name>yu</name> <name>don</name></type> <name>sei</name></decl>;</decl_stmt>
 
<comment type="line">//const int nPrime=100000;</comment>
<comment type="line">//bool isprime[nPrime];</comment>
<comment type="line">//vector&lt;int&gt;prime;</comment>
<comment type="line">//</comment>
<comment type="line">//void pre()</comment>
<comment type="line">//{</comment>
<comment type="line">//  memset(isprime,1,sizeof(isprime));</comment>
<comment type="line">//  isprime[1]=0;</comment>
<comment type="line">//  for(int i=2;i*i&lt;=nPrime;i++)</comment>
<comment type="line">//  {</comment>
<comment type="line">//      for(int j=i*i;j&lt;nPrime;j+=i)</comment>
<comment type="line">//      {</comment>
<comment type="line">//          isprime[j]=0;</comment>
<comment type="line">//      }</comment>
<comment type="line">//  }</comment>
<comment type="line">//  for(int i=2;i&lt;nPrime;i++)</comment>
<comment type="line">//  {</comment>
<comment type="line">//      if(isprime[i])prime.pb(i);</comment>
<comment type="line">//  }</comment>
<comment type="line">//}</comment>
 
<comment type="line">// ll pwr(ll b,ll e)</comment>
<comment type="line">// {</comment>
<comment type="line">//  if(e==0)return 1;</comment>
<comment type="line">//  if(e==1)return b;</comment>
<comment type="line">//  ll temp=pwr(b,e/2);</comment>
<comment type="line">//  if(e%2==0)</comment>
<comment type="line">//  {</comment>
<comment type="line">//      return (temp*temp);</comment>
<comment type="line">//  }</comment>
<comment type="line">//  else</comment>
<comment type="line">//  {</comment>
<comment type="line">//      return (temp*temp*b);</comment>
<comment type="line">//  }</comment>
<comment type="line">// }</comment>
 
<comment type="line">// ll modpow(ll b,ll e)</comment>
<comment type="line">// {</comment>
<comment type="line">//  b%=MOD;</comment>
<comment type="line">//  if(e==0)return 1;</comment>
<comment type="line">//  if(e==1)return b%MOD;</comment>
<comment type="line">//  ll temp=modpow(b,e/2);</comment>
<comment type="line">//  if(e%2==0)</comment>
<comment type="line">//  {</comment>
<comment type="line">//      return (temp*temp) %MOD;</comment>
<comment type="line">//  }</comment>
<comment type="line">//  else</comment>
<comment type="line">//  {</comment>
<comment type="line">//      return ((temp*temp %MOD )*b)%MOD;</comment>
<comment type="line">//  }</comment>
<comment type="line">// }</comment>
 
<function><type><name>ll</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><name>b</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><name>a</name></expr>;</return></block></then></if>
    <return>return <expr><call><name>gcd</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>a</name><operator>%</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
 
<comment type="line">//int n,m;</comment>
 
<comment type="line">//bool valid(int x,int y)</comment>
<comment type="line">//{</comment>
<comment type="line">//  if(x&lt;0)return 0;</comment>
<comment type="line">//  if(y&lt;0)return 0;</comment>
<comment type="line">//  if(x&gt;=n)return 0;</comment>
<comment type="line">//  if(y&gt;=m)return 0;</comment>
<comment type="line">//  return 1;</comment>
<comment type="line">//}</comment>
 
<comment type="line">//int p[]={-1,0,1,0};</comment>
<comment type="line">//int q[]={0,1,0,-1};</comment>
 
<comment type="line">//int p[]={-1,-1,-1,0,0,1,1,1};</comment>
<comment type="line">//int q[]={-1,0,1,-1,1,-1,0,1};</comment>
 
<function><type><name>point</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>point</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>point</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
    <return>return <expr><block>{<expr><name><name>a</name><operator>.</operator><name>fi</name></name><operator>+</operator><name><name>b</name><operator>.</operator><name>fi</name></name></expr>,<expr><name><name>a</name><operator>.</operator><name>se</name></name><operator>+</operator><name><name>b</name><operator>.</operator><name>se</name></name></expr>}</block></expr>;</return>
}</block></function>
 
<function><type><name>point</name></type> <name>sub</name><parameter_list>(<parameter><decl><type><name>point</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>point</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
    <return>return <expr><block>{<expr><name><name>a</name><operator>.</operator><name>fi</name></name><operator>-</operator><name><name>b</name><operator>.</operator><name>fi</name></name></expr>,<expr><name><name>a</name><operator>.</operator><name>se</name></name><operator>-</operator><name><name>b</name><operator>.</operator><name>se</name></name></expr>}</block></expr>;</return>
}</block></function>
 
<comment type="line">//double dist(point a,point b)</comment>
<comment type="line">//{</comment>
<comment type="line">//    return ((a.fi-b.fi)*(a.fi-b.fi) + (a.se-b.se)*(a.se-b.se));</comment>
<comment type="line">//}</comment>
 
<function><type><name>double</name></type> <name>dist</name><parameter_list>(<parameter><decl><type><name>point</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>point</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
    <return>return <expr><call><name>sqrt</name><argument_list>(<argument><expr><operator>(</operator><name><name>a</name><operator>.</operator><name>fi</name></name><operator>-</operator><name><name>b</name><operator>.</operator><name>fi</name></name><operator>)</operator><operator>*</operator><operator>(</operator><name><name>a</name><operator>.</operator><name>fi</name></name><operator>-</operator><name><name>b</name><operator>.</operator><name>fi</name></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>se</name></name><operator>-</operator><name><name>b</name><operator>.</operator><name>se</name></name><operator>)</operator><operator>*</operator><operator>(</operator><name><name>a</name><operator>.</operator><name>se</name></name><operator>-</operator><name><name>b</name><operator>.</operator><name>se</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
 
<comment type="line">//double distPS(point a,segment b)//heron formula, extreemely prone to precison error</comment>
<comment type="line">//{</comment>
<comment type="line">//    double AB=rdist(a,b.fi);</comment>
<comment type="line">//    double AC=rdist(a,b.se);</comment>
<comment type="line">//    double BC=rdist(b.fi,b.se);</comment>
<comment type="line">//    double s=AB+AC+BC;</comment>
<comment type="line">//    s/=2.0;</comment>
<comment type="line">//    return 2*sqrt(s*(s-AB)*(s-BC)*(s-AC))/BC;</comment>
<comment type="line">//}</comment>
 
<function><type><name>double</name></type> <name>dabs</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><name>a</name><operator>+</operator><name>EPS</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><name>a</name></expr>;</return></block></then></if>
    <return>return <expr><operator>-</operator><name>a</name></expr>;</return>
}</block></function>
 
<function><type><name>double</name></type> <name>dotProduct</name><parameter_list>(<parameter><decl><type><name>point</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>point</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
    <return>return <expr><name><name>a</name><operator>.</operator><name>fi</name></name><operator>*</operator><name><name>b</name><operator>.</operator><name>fi</name></name> <operator>+</operator> <name><name>a</name><operator>.</operator><name>se</name></name><operator>*</operator><name><name>b</name><operator>.</operator><name>se</name></name></expr>;</return>
}</block></function>
 
<function><type><name>double</name></type> <name>crossProduct</name><parameter_list>(<parameter><decl><type><name>point</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>point</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
    <return>return <expr><name><name>a</name><operator>.</operator><name>fi</name></name><operator>*</operator><name><name>b</name><operator>.</operator><name>se</name></name> <operator>-</operator> <name><name>a</name><operator>.</operator><name>se</name></name><operator>*</operator><name><name>b</name><operator>.</operator><name>fi</name></name></expr>;</return>
}</block></function>
 
<function><type><name>int</name></type> <name>ccw</name><parameter_list>(<parameter><decl><type><name>point</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>point</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>point</name></type> <name>c</name></decl></parameter>)</parameter_list><comment type="line">// -1 CCW 0 COL 1 CW</comment>
<block>{
    <decl_stmt><decl><type><name>double</name></type> <name>tmp</name><init>=<expr><call><name>crossProduct</name><argument_list>(<argument><expr><call><name>sub</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>sub</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>tmp</name><operator>&gt;</operator><name>EPS</name></expr>)</condition><then>
    <block>{
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    }</block></then>
    <elseif>else <if>if<condition>(<expr><name>tmp</name><operator>&lt;</operator><operator>-</operator><name>EPS</name></expr>)</condition><then>
    <block>{
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    }</block></then></if></elseif>
    <else>else
    <block>{
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></else></if>
}</block></function>
 
<function><type><name>point</name></type> <name>intLiLi</name><parameter_list>(<parameter><decl><type><name>point</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>point</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>point</name></type> <name>c</name></decl></parameter>,<parameter><decl><type><name>point</name></type> <name>d</name></decl></parameter>)</parameter_list>
<block>{
    <return>return <expr><call><name>mp</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name><name>a</name><operator>.</operator><name>fi</name></name><operator>*</operator><name><name>b</name><operator>.</operator><name>se</name></name><operator>-</operator><name><name>b</name><operator>.</operator><name>fi</name></name><operator>*</operator><name><name>a</name><operator>.</operator><name>se</name></name><operator>)</operator><operator>*</operator><operator>(</operator><name><name>c</name><operator>.</operator><name>fi</name></name><operator>-</operator><name><name>d</name><operator>.</operator><name>fi</name></name><operator>)</operator> <operator>-</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>fi</name></name><operator>-</operator><name><name>b</name><operator>.</operator><name>fi</name></name><operator>)</operator><operator>*</operator><operator>(</operator><name><name>c</name><operator>.</operator><name>fi</name></name><operator>*</operator><name><name>d</name><operator>.</operator><name>se</name></name><operator>-</operator><name><name>d</name><operator>.</operator><name>fi</name></name><operator>*</operator><name><name>c</name><operator>.</operator><name>se</name></name><operator>)</operator><operator>)</operator><operator>/</operator><operator>(</operator><operator>(</operator><name><name>a</name><operator>.</operator><name>fi</name></name><operator>-</operator><name><name>b</name><operator>.</operator><name>fi</name></name><operator>)</operator><operator>*</operator><operator>(</operator><name><name>c</name><operator>.</operator><name>se</name></name><operator>-</operator><name><name>d</name><operator>.</operator><name>se</name></name><operator>)</operator> <operator>-</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>se</name></name><operator>-</operator><name><name>b</name><operator>.</operator><name>se</name></name><operator>)</operator><operator>*</operator><operator>(</operator><name><name>c</name><operator>.</operator><name>fi</name></name><operator>-</operator><name><name>d</name><operator>.</operator><name>fi</name></name><operator>)</operator> <operator>)</operator></expr></argument>,
            <argument><expr><operator>(</operator><operator>(</operator><name><name>a</name><operator>.</operator><name>fi</name></name><operator>*</operator><name><name>b</name><operator>.</operator><name>se</name></name><operator>-</operator><name><name>b</name><operator>.</operator><name>fi</name></name><operator>*</operator><name><name>a</name><operator>.</operator><name>se</name></name><operator>)</operator><operator>*</operator><operator>(</operator><name><name>c</name><operator>.</operator><name>se</name></name><operator>-</operator><name><name>d</name><operator>.</operator><name>se</name></name><operator>)</operator><operator>-</operator><operator>(</operator><name><name>a</name><operator>.</operator><name>se</name></name><operator>-</operator><name><name>b</name><operator>.</operator><name>se</name></name><operator>)</operator><operator>*</operator><operator>(</operator><name><name>c</name><operator>.</operator><name>fi</name></name><operator>*</operator><name><name>d</name><operator>.</operator><name>se</name></name><operator>-</operator><name><name>d</name><operator>.</operator><name>fi</name></name><operator>*</operator><name><name>c</name><operator>.</operator><name>se</name></name><operator>)</operator><operator>)</operator><operator>/</operator><operator>(</operator><operator>(</operator><name><name>a</name><operator>.</operator><name>fi</name></name><operator>-</operator><name><name>b</name><operator>.</operator><name>fi</name></name><operator>)</operator><operator>*</operator><operator>(</operator><name><name>c</name><operator>.</operator><name>se</name></name><operator>-</operator><name><name>d</name><operator>.</operator><name>se</name></name><operator>)</operator> <operator>-</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>se</name></name><operator>-</operator><name><name>b</name><operator>.</operator><name>se</name></name><operator>)</operator><operator>*</operator><operator>(</operator><name><name>c</name><operator>.</operator><name>fi</name></name><operator>-</operator><name><name>d</name><operator>.</operator><name>fi</name></name><operator>)</operator> <operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
 
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ll</name></type> <name>a</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>b</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>c</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>d</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>p</name></decl>;</decl_stmt>
            <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>p</name></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>p</name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>a</name><operator>++</operator></expr>;</expr_stmt></block></then>
            <else>else <block type="pseudo"><expr_stmt><expr><name>b</name><operator>++</operator></expr>;</expr_stmt></block></else></if>
        }</block></for>
        <decl_stmt><decl><type><name>int</name></type> <name>m</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>m</name></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>m</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>q</name></decl>;</decl_stmt>
            <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>q</name></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>q</name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>c</name><operator>++</operator></expr>;</expr_stmt></block></then>
            <else>else <block type="pseudo"><expr_stmt><expr><name>d</name><operator>++</operator></expr>;</expr_stmt></block></else></if>
        }</block></for>
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>a</name><operator>*</operator><name>c</name> <operator>+</operator> <name>b</name><operator>*</operator><name>d</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
