<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29168566_63001571.cpp"><cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><cpp:literal>"Ofast"</cpp:literal><name>)</name></cpp:pragma>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>double</name></type> <name>d</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>long</name> <name>int</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>pll</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INIT</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(false); cin.tie(0),cout.tie(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>'\n'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fr</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sc</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>eb</name></cpp:macro> <cpp:value>emplace_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lb</name></cpp:macro> <cpp:value>lower_bound</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ub</name></cpp:macro> <cpp:value>upper_bound</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ins</name></cpp:macro> <cpp:value>insert</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ers</name></cpp:macro> <cpp:value>erase</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)(c).size())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x).begin(),(x).end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>unique</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x).resize(unique(all(x))-(x).begin())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><name>_fmt</name></type></parameter>,<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>fprintf(stderr,"("#__VA_ARGS__ ") = (" _fmt")\n",__VA_ARGS__)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>d</name></type> <name>eps</name> <init>= <expr><literal type="number">1e-12</literal></expr></init></decl>;</decl_stmt>

<function><specifier>inline</specifier> <type><name>int</name></type> <name>sign</name><parameter_list>(<parameter><decl><type><name>d</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><ternary><condition><expr><name>x</name> <operator>&lt;</operator> <operator>-</operator><name>eps</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>x</name> <operator>&gt;</operator> <name>eps</name></expr></else></ternary></expr>;</return> }</block></function>
<function><specifier>inline</specifier> <type><name>int</name></type> <name>realcmp</name><parameter_list>(<parameter><decl><type><name>d</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>d</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>sign</name><argument_list>(<argument><expr><name>x</name><operator>-</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>na</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><for>for<control>(<init><decl><type><name>T</name><modifier>&amp;</modifier></type> <name>i</name><range>: <expr><name>a</name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>i</name></expr>;</expr_stmt></block></for>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>pv</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>)</parameter_list> <block>{ <for>for<control>(<init><decl><type><name>T</name><modifier>&amp;</modifier></type> <name>i</name><range>: <expr><name>a</name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>i</name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block></for> <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt> }</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>shrink</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>x</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>vals</name> <init>= <expr><name>x</name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name>vals</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>unique</name><argument_list>(<argument><expr><name>vals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <for>for<control>(<init><decl><type><name>T</name><modifier>&amp;</modifier></type> <name>i</name><range>: <expr><name>x</name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>ub</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name>vals</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name><name>vals</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></for> <return>return <expr><name>vals</name></expr>;</return> }</block></function>

<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>mat</name>;</typedef>

<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>mod</name> <init>= <expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mat</name></type> <name>base</name>
<argument_list>{
  <argument><expr><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr></argument>,
  <argument><expr><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr></argument>,
  <argument><expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr></argument>
}</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mat</name></type> <name>iden</name>
<argument_list>{
  <argument><expr><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr></argument>,
  <argument><expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr></argument>,
  <argument><expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr></argument>
}</argument_list></decl>;</decl_stmt>

<function><type><name>mat</name></type> <name>mul</name><parameter_list>(<parameter><decl><type><name>mat</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>mat</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name><name>a</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nn</name> <init>= <expr><call><name><name>b</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><call><name><name>b</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>mat</name></type> <name>res</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><call><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name> <argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
    <block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>m</name></expr>;</condition><incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
      <block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>k</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>k</name><operator>&lt;</operator><name>nn</name></expr>;</condition><incr><expr><operator>++</operator><name>k</name></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name><name>res</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>res</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>%</operator> <name>mod</name><operator>)</operator> <operator>%</operator> <name>mod</name></expr>;</expr_stmt></block></for></block></for></block></for>
  <return>return <expr><name>res</name></expr>;</return>
}</block></function>

<function><type><name>mat</name></type> <name>qpow</name><parameter_list>(<parameter><decl><type><name>mat</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>e</name></decl></parameter>)</parameter_list>
<block>{
  <if>if<condition>(<expr><name>e</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>iden</name></expr>;</return></block></then></if>
  <if>if<condition>(<expr><name>e</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>b</name></expr>;</return></block></then></if>
  <if>if<condition>(<expr><name>e</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><call><name>mul</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><call><name>qpow</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>e</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
  <decl_stmt><decl><type><name>auto</name></type> <name>tmp</name> <init>= <expr><call><name>qpow</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>e</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>mul</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>ll</name></type> <name>qpow</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>e</name></decl></parameter>)</parameter_list>
<block>{
  <if>if<condition>(<expr><name>e</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
  <if>if<condition>(<expr><name>e</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>b</name></expr>;</return></block></then></if>
  <if>if<condition>(<expr><name>e</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>b</name> <operator>*</operator> <call><name>qpow</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>e</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>%</operator> <name>mod</name></expr>;</return></block></then></if>
  <decl_stmt><decl><type><name>auto</name></type> <name>tmp</name> <init>= <expr><call><name>qpow</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>e</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><name>tmp</name><operator>*</operator><name>tmp</name><operator>%</operator><name>mod</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
  <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>OJUDGE</name></cpp:ifdef>
    <comment type="line">//freopen("in","r",stdin);</comment>
  <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><name>INIT</name></expr>;</expr_stmt>
  
  <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name></expr>;</expr_stmt>
  
  <decl_stmt><decl><type><name>auto</name></type> <name>a</name> <init>= <expr><call><name>mul</name><argument_list>(<argument><expr><call><name>qpow</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>mat</name><argument_list>(<argument><expr><block>{<expr><block>{<expr><literal type="number">4</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">2</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>auto</name></type> <name>b</name> <init>= <expr><call><name>mul</name><argument_list>(<argument><expr><call><name>qpow</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>mat</name><argument_list>(<argument><expr><block>{<expr><block>{<expr><literal type="number">6</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">4</literal></expr>}</block></expr>,<expr><block>{<expr><name>mod</name><operator>-</operator><literal type="number">2</literal></expr>}</block></expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>auto</name></type> <name>c</name> <init>= <expr><call><name>mul</name><argument_list>(<argument><expr><call><name>qpow</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>mat</name><argument_list>(<argument><expr><block>{<expr><block>{<expr><literal type="number">8</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">6</literal></expr>}</block></expr>,<expr><block>{<expr><name>mod</name><operator>-</operator><literal type="number">4</literal></expr>}</block></expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <literal type="string">"a = "</literal> <operator>&lt;&lt;</operator> <name>a</name> <operator>&lt;&lt;</operator> <literal type="string">" b = "</literal> <operator>&lt;&lt;</operator> <name>b</name> <operator>&lt;&lt;</operator> <literal type="string">" c = "</literal> <operator>&lt;&lt;</operator> <name>c</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
  
  <comment type="line">//~ if(n == 1)</comment>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>mul</name><argument_list>(<argument><expr><call><name>qpow</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>m</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>mat</name><argument_list>(<argument><expr><block>{<expr><block>{<expr><name>b</name></expr>}</block></expr>,<expr><block>{<expr><name>a</name></expr>}</block></expr>,<expr><block>{<expr><operator>(</operator><name>c</name> <operator>+</operator> <name>mod</name> <operator>-</operator> <operator>(</operator><name>a</name> <operator>+</operator> <name>b</name><operator>)</operator> <operator>%</operator> <name>mod</name><operator>)</operator><operator>%</operator><name>mod</name></expr>}</block></expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
  <comment type="line">//~ else</comment>
    <comment type="line">//~ cout &lt;&lt; mul(qpow(base, m-1), mat({{b},{a},{(mod-qpow(2ll, n-1))%mod}}))[1][0] &lt;&lt; endl;</comment>
  
  
  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

<cpp:warning>#<cpp:directive>warning</cpp:directive> you will remember this, overflow is there, though you might not see it ...</cpp:warning>

</unit>
