<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29137606_63001624.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;int, int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inc</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>l</name></type></parameter>, <parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int i = l; i &lt;= r; i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dec</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>l</name></type></parameter>, <parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int i = l; i &gt;= r; i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mes</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>k</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(x, k, sizeof(x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bug</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>printf("LINE: %d.\n", __LINE__)</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name> <init>= <expr><literal type="number">1e6</literal> <operator>+</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>, <decl><type ref="prev"/><name>top</name></decl>, <decl><type ref="prev"/><name>res</name></decl>, <decl><type ref="prev"/><name>maxb</name></decl>, <decl><type ref="prev"/><name>cnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>a</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>sta</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>deque</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name></type> <name>deq</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>l</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>inc</name><argument_list>(<argument>i</argument>, <argument><literal type="number">0</literal></argument>, <argument>l - <literal type="number">1</literal></argument>)</argument_list></macro> <expr_stmt><expr><name>cnt</name> <operator>+=</operator> <ternary><condition><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'('</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>cnt</name> <operator>*</operator> <literal type="number">2</literal> <operator>!=</operator> <name>l</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"0\n1 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>
    <macro><name>inc</name><argument_list>(<argument>i</argument>, <argument>l</argument>, <argument><literal type="number">2</literal> * l - <literal type="number">1</literal></argument>)</argument_list></macro> <expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><index>[<expr><name>i</name> <operator>-</operator> <name>l</name></expr>]</index></name></expr>;</expr_stmt>
    <macro><name>inc</name><argument_list>(<argument>i</argument>, <argument><literal type="number">0</literal></argument>, <argument>l - <literal type="number">1</literal></argument>)</argument_list></macro> <block>{
        <macro><name>inc</name><argument_list>(<argument>j</argument>, <argument>i</argument>, <argument>l - <literal type="number">1</literal></argument>)</argument_list></macro> <block>{
            <if>if <condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>a</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
            <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name> <operator>+</operator> <name>l</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><name>j</name> <operator>+</operator> <name>l</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>deq</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>beauty</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <macro><name>inc</name><argument_list>(<argument>I</argument>, <argument>l</argument>, <argument><literal type="number">2</literal> * l - <literal type="number">1</literal></argument>)</argument_list></macro> <block>{
                <if>if <condition>(<expr><call><name><name>deq</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name><name>deq</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="char">')'</literal> <operator>||</operator> <name><name>a</name><index>[<expr><name>I</name></expr>]</index></name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><call><name><name>deq</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>I</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
                <else>else
                    <block type="pseudo"><expr_stmt><expr><call><name><name>deq</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></else></if>
            }</block>
            <if>if <condition>(<expr><call><name><name>deq</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>beauty</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
            <macro><name>dec</name><argument_list>(<argument>k</argument>, <argument>l - <literal type="number">1</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro> <block>{
                <comment type="block">/*top = 0;
                inc(I, k, k + l - 1) {
                    if (top == 0 || sta[top - 1] == ')' || a[I] == '(')
                        sta[top++] = a[I];
                    else
                        top--;
                }
                if (top == 0) beauty++;*/</comment>
                <if>if <condition>(<expr><name><name>a</name><index>[<expr><name>k</name> <operator>+</operator> <name>l</name></expr>]</index></name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><call><name><name>deq</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then>
                <else>else
                    <block type="pseudo"><expr_stmt><expr><call><name><name>deq</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
                <if>if <condition>(<expr><call><name><name>deq</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name><name>deq</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="char">'('</literal> <operator>||</operator> <name><name>a</name><index>[<expr><name>k</name></expr>]</index></name> <operator>==</operator> <literal type="char">')'</literal></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><call><name><name>deq</name><operator>.</operator><name>push_front</name></name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
                <else>else
                    <block type="pseudo"><expr_stmt><expr><call><name><name>deq</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></else></if>
                <if>if <condition>(<expr><call><name><name>deq</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>beauty</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
            }</block>
            <if>if <condition>(<expr><name>beauty</name> <operator>&gt;=</operator> <name>maxb</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>maxb</name> <operator>=</operator> <name>beauty</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>res</name> <operator>=</operator> <name>i</name> <operator>*</operator> <name>l</name> <operator>+</operator> <name>j</name></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name> <operator>+</operator> <name>l</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><name>j</name> <operator>+</operator> <name>l</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
    }</block>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n%d %d"</literal></expr></argument>, <argument><expr><name>maxb</name></expr></argument>, <argument><expr><name>res</name> <operator>/</operator> <name>l</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>res</name> <operator>%</operator> <name>l</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function></unit>
