<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29181146_63004350.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ext/pb_ds/assoc_container.hpp&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ext/pb_ds/priority_queue.hpp&gt;</cpp:file></cpp:include>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>target</name><name>(</name><cpp:literal>"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx"</cpp:literal><name>)</name></cpp:pragma>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<using><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>, <parameter><type><name>class</name></type> <name>M</name></parameter>&gt;</parameter_list></template>
using <name>trtr</name> <init>= <type><name><name>__gnu_pbds</name><operator>::</operator><name><name>tree</name> <argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name><name>less</name> <argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>__gnu_pbds</name><operator>::</operator><name>rb_tree_tag</name></name></expr></argument>, <argument><expr><name><name>__gnu_pbds</name><operator>::</operator><name>tree_order_statistics_node_update</name></name></expr></argument>&gt;</argument_list></name></name></type></init>;</using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sp</name></cpp:macro> <cpp:value>' '</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>en</name></cpp:macro> <cpp:value>'\n'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>En</name></cpp:macro> <cpp:value>'\n'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>eN</name></cpp:macro> <cpp:value>'\n'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EN</name></cpp:macro> <cpp:value>'\n'</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_str</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>#x</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ww</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_str(x) &lt;&lt; " = " &lt;&lt; x &lt;&lt; sp</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wn</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_2d &lt;&lt; _str(x) &lt;&lt; " = " &lt;&lt; en &lt;&lt; x &lt;&lt; en</cpp:value></cpp:define>

<struct>struct <name>_flag_t</name> <block>{<public type="default"> <decl_stmt><decl><type><name>string</name></type> <name>val</name></decl>;</decl_stmt> </public>}</block> <decl><name>_1d</name><argument_list>{<argument><expr><literal type="string">", "</literal></expr></argument>}</argument_list></decl>, <decl><type ref="prev"/><name>_2d</name><argument_list>{<argument><expr><literal type="string">"\n  "</literal></expr></argument>}</argument_list></decl>;</struct>
<decl_stmt><decl><type><name>_flag_t</name></type> <name>_flag</name> <init>= <expr><name>_1d</name></expr></init></decl>;</decl_stmt>

<function type="operator"><type><name>ostream</name> <modifier>&amp;</modifier></type><name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name> <modifier>&amp;</modifier></type><name>os</name></decl></parameter>, <parameter><decl><type><name>_flag_t</name></type> <name>flag</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>_flag</name> <operator>=</operator> <name>flag</name></expr>;</expr_stmt> <return>return <expr><name>os</name></expr>;</return> }</block></function>

<function><template>template <parameter_list>&lt; <parameter><type><name>class</name></type> <name>Ch</name></parameter>, <parameter><type><name>class</name></type> <name>Tr</name></parameter>, <parameter><type><name>class</name></type> <name>It</name></parameter> &gt;</parameter_list></template>
<type><name><name>basic_ostream</name> <argument_list type="generic">&lt; <argument><expr><name>Ch</name></expr></argument>, <argument><expr><name>Tr</name></expr></argument> &gt;</argument_list></name> <modifier>&amp;</modifier></type>
<name>_out</name><parameter_list>(<parameter><decl><type><name><name>basic_ostream</name> <argument_list type="generic">&lt; <argument><expr><name>Ch</name></expr></argument>, <argument><expr><name>Tr</name></expr></argument> &gt;</argument_list></name> <modifier>&amp;</modifier></type><name>os</name></decl></parameter>, <parameter><decl><type><name>It</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>It</name></type> <name>l</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>f</name> <operator>==</operator> <name>l</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">"{}"</literal></expr>;</return></block></then></if>
    <decl_stmt><decl><type><name>auto</name></type> <name>cur_flag</name> <init>= <expr><name>_flag</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <name>_1d</name> <operator>&lt;&lt;</operator> <literal type="string">"{ "</literal> <operator>&lt;&lt;</operator> <operator>*</operator><name>f</name></expr>;</expr_stmt>
    <for>for <control>(<init>;</init> <condition><expr><operator>++</operator><name>f</name> <operator>!=</operator> <name>l</name></expr>;</condition> <incr><expr><name>os</name> <operator>&lt;&lt;</operator> <name><name>cur_flag</name><operator>.</operator><name>val</name></name> <operator>&lt;&lt;</operator> <operator>*</operator><name>f</name></expr></incr>)</control><block type="pseudo"><empty_stmt>;</empty_stmt></block></for>
    <return>return <expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">" }"</literal></expr>;</return>
}</block></function>

<function type="operator"><template>template <parameter_list>&lt; <parameter><type><name>class</name></type> <name>Ch</name></parameter>, <parameter><type><name>class</name></type> <name>Tr</name></parameter>, <parameter><type><name>class</name></type> <name>C</name></parameter> &gt;</parameter_list></template>
<type><name><name>basic_ostream</name> <argument_list type="generic">&lt; <argument><expr><name>Ch</name></expr></argument>, <argument><expr><name>Tr</name></expr></argument> &gt;</argument_list></name> <modifier>&amp;</modifier></type><name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name><name>basic_ostream</name> <argument_list type="generic">&lt; <argument><expr><name>Ch</name></expr></argument>, <argument><expr><name>Tr</name></expr></argument> &gt;</argument_list></name> <modifier>&amp;</modifier></type><name>os</name></decl></parameter>, <parameter><decl><type><name>C</name> <specifier>const</specifier> <modifier>&amp;</modifier></type><name>cont</name></decl></parameter>)</parameter_list>
<block>{ <return>return <expr><call><name>_out</name><argument_list>(<argument><expr><name>os</name></expr></argument>, <argument><expr><call><name>begin</name><argument_list>(<argument><expr><name>cont</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>end</name><argument_list>(<argument><expr><name>cont</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>

<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>X</name></parameter>, <parameter><type><name>class</name></type> <name>Y</name></parameter>&gt;</parameter_list></template>
<type><name>ostream</name> <modifier>&amp;</modifier></type><name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name> <modifier>&amp;</modifier></type><name>os</name></decl></parameter>, <parameter><decl><type><name><name>pair</name> <argument_list type="generic">&lt; <argument><expr><name>X</name></expr></argument>, <argument><expr><name>Y</name></expr></argument> &gt;</argument_list></name> <specifier>const</specifier> <modifier>&amp;</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">"["</literal> <operator>&lt;&lt;</operator> <name><name>p</name><operator>.</operator><name>first</name></name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal> <operator>&lt;&lt;</operator> <name><name>p</name><operator>.</operator><name>second</name></name> <operator>&lt;&lt;</operator> <literal type="string">"]"</literal></expr>;</return> }</block></function>
<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>X</name></parameter>, <parameter><type><name>class</name></type> <name>Y</name></parameter>, <parameter><type><name>class</name></type> <name>Z</name></parameter>&gt;</parameter_list></template>
<type><name>ostream</name> <modifier>&amp;</modifier></type><name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name> <modifier>&amp;</modifier></type><name>os</name></decl></parameter>, <parameter><decl><type><name><name>tuple</name> <argument_list type="generic">&lt; <argument><expr><name>X</name></expr></argument>, <argument><expr><name>Y</name></expr></argument>, <argument><expr><name>Z</name></expr></argument> &gt;</argument_list></name> <specifier>const</specifier> <modifier>&amp;</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{ <return>return <expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">"["</literal> <operator>&lt;&lt;</operator> <call><name><name>get</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal></expr></argument> &gt;</argument_list></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">", "</literal> <operator>&lt;&lt;</operator> <call><name><name>get</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal></expr></argument> &gt;</argument_list></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">", "</literal> <operator>&lt;&lt;</operator> <call><name><name>get</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">2</literal></expr></argument> &gt;</argument_list></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">"]"</literal></expr>;</return> }</block></function>

<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>X</name></parameter>&gt;</parameter_list></template> <type><name>X</name> <modifier>&amp;</modifier></type><name>maxi</name><parameter_list>(<parameter><decl><type><name>X</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>X</name> <specifier>const</specifier> <modifier>&amp;</modifier></type><name>y</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><ternary><condition><expr><name>x</name> <operator>&lt;</operator> <name>y</name></expr> ?</condition><then> <expr><name>x</name> <operator>=</operator> <name>y</name></expr> </then><else>: <expr><name>x</name></expr></else></ternary></expr>;</return> }</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>X</name></parameter>&gt;</parameter_list></template> <type><name>X</name> <modifier>&amp;</modifier></type><name>mini</name><parameter_list>(<parameter><decl><type><name>X</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>X</name> <specifier>const</specifier> <modifier>&amp;</modifier></type><name>y</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><ternary><condition><expr><name>x</name> <operator>&gt;</operator> <name>y</name></expr> ?</condition><then> <expr><name>x</name> <operator>=</operator> <name>y</name></expr> </then><else>: <expr><name>x</name></expr></else></ternary></expr>;</return> }</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>X</name></parameter>&gt;</parameter_list></template> <type><name>bool</name></type> <name>bmaxi</name><parameter_list>(<parameter><decl><type><name>X</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>X</name> <specifier>const</specifier> <modifier>&amp;</modifier></type><name>y</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><ternary><condition><expr><name>x</name> <operator>&lt;</operator> <name>y</name></expr> ?</condition><then> <expr><operator>(</operator><name>x</name> <operator>=</operator> <name>y</name><operator>,</operator> <literal type="boolean">true</literal><operator>)</operator></expr> </then><else>: <expr><literal type="boolean">false</literal></expr></else></ternary></expr>;</return> }</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>X</name></parameter>&gt;</parameter_list></template> <type><name>bool</name></type> <name>bmini</name><parameter_list>(<parameter><decl><type><name>X</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>X</name> <specifier>const</specifier> <modifier>&amp;</modifier></type><name>y</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><ternary><condition><expr><name>x</name> <operator>&gt;</operator> <name>y</name></expr> ?</condition><then> <expr><operator>(</operator><name>x</name> <operator>=</operator> <name>y</name><operator>,</operator> <literal type="boolean">true</literal><operator>)</operator></expr> </then><else>: <expr><literal type="boolean">false</literal></expr></else></ternary></expr>;</return> }</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>ll</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>qq</name></cpp:macro> <cpp:value>auto</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>qr</name></cpp:macro> <cpp:value>auto &amp;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>qrr</name></cpp:macro> <cpp:value>auto &amp;&amp;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>qc</name></cpp:macro> <cpp:value>auto const&amp;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>int( x.size() )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>make_pair( x, y )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ss</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>

<using>using <name>ll</name> <init>= <type><name>long</name> <name>long</name></type></init>;</using>
<using>using <name>ull</name> <init>= <type><name>unsigned</name> <name>long</name> <name>long</name></type></init>;</using>
<using>using <name>ld</name> <init>= <type><name>long</name> <name>double</name></type></init>;</using>
<using>using <name>pii</name> <init>= <type><name><name>pair</name> <argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></type></init>;</using>
<using>using <name>pll</name> <init>= <type><name><name>pair</name> <argument_list type="generic">&lt; <argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument> &gt;</argument_list></name></type></init>;</using>
<using>using <name>pdd</name> <init>= <type><name><name>pair</name> <argument_list type="generic">&lt; <argument><expr><name>double</name></expr></argument>, <argument><expr><name>double</name></expr></argument> &gt;</argument_list></name></type></init>;</using>
<using>using <name>bit32</name> <init>= <type><name><name>bitset</name> <argument_list type="generic">&lt;<argument><expr><literal type="number">32</literal></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>bit64</name> <init>= <type><name><name>bitset</name> <argument_list type="generic">&lt;<argument><expr><literal type="number">64</literal></expr></argument>&gt;</argument_list></name></type></init>;</using>

<using><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>K</name></parameter>, <parameter><type><name>class</name></type> <name>T</name></parameter>, <parameter><type><name>class</name> <modifier>...</modifier></type><name>A</name></parameter>&gt;</parameter_list></template>
using <name>hash_table</name> <init>= <type><name><name>__gnu_pbds</name><operator>::</operator><name><name>cc_hash_table</name> <argument_list type="generic">&lt;<argument><expr><name>K</name></expr></argument>, <argument><expr><name>T</name></expr></argument>, <argument><expr><name>A</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name></name></type></init>;</using>
<comment type="line">//using hash_table = unordered_map&lt;K, T&gt;;</comment>
<comment type="line">//using hash_table = map&lt;K, T&gt;;</comment>

<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>PI</name> <init>= <expr><call><name>acos</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>PIH</name> <init>= <expr><name>PI</name> <operator>*</operator> <literal type="number">0.5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>PID</name> <init>= <expr><name>PI</name> <operator>*</operator> <literal type="number">2.0</literal></expr></init></decl>;</decl_stmt>

<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name> <init>= <expr><name>ll</name></expr></init></parameter>&gt;</parameter_list></template>
<type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>make_mat</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>m</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>val</name> <init>= <expr><call><name>T</name><argument_list>()</argument_list></call></expr></init></decl></parameter>)</parameter_list>
<block>{ <return>return <expr><call><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><call><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>forr</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = 0; i &lt; (n); i ++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>forn</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = b; i &lt; (n); i ++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>begin(x), end(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rall</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rbegin(x), rend(x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>def</name><parameter_list>(<parameter><type><name>f</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>qq f = [&amp;] (qc f, __VA_ARGS__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>call</name><parameter_list>(<parameter><type><name>f</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>f(f, __VA_ARGS__)</cpp:value></cpp:define>

<function><type><name>int32_t</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>


    <decl_stmt><decl><type><name>auto</name></type> <name>slv</name> <init>= <expr><lambda><capture>[<argument><modifier>&amp;</modifier></argument>]</capture><parameter_list>(<parameter><decl><type><name>qc</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{

        <decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>st</name></decl>;</decl_stmt>
        <macro><name>forr</name><argument_list>(<argument>i</argument>, <argument>n</argument>)</argument_list></macro> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><ternary><condition><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'('</literal></expr> ?</condition><then> <expr><operator>+</operator><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <if>if<condition>( <expr><call><name><name>st</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><then> <block>{
                <expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>push_back</name></name><argument_list>( <argument><expr><name>x</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <elseif>else <if>if<condition>( <expr><call><name><name>st</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call> <operator>==</operator> <operator>-</operator><name>x</name> <operator>&amp;&amp;</operator> <name>x</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
            <else>else <block type="pseudo"><expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
        }</block>

        <decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><call><name>count</name><argument_list>( <argument><expr><call><name>all</name><argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>count</name><argument_list>( <argument><expr><call><name>all</name><argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>+</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>ans</name><block>{}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>L</name> <init>= <expr><name>l</name></expr></init></decl>, <decl><type ref="prev"/><name>R</name> <init>= <expr><name>r</name></expr></init></decl>;</decl_stmt>
        <macro><name>forr</name><argument_list>(<argument>i</argument>, <argument>n</argument>)</argument_list></macro> <block>{
            <if>if<condition>( <expr><name>L</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>R</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><then> <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>++</operator></expr>;</expr_stmt></block></then></if>
            <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><ternary><condition><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'('</literal></expr> ?</condition><then> <expr><operator>+</operator><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <if>if<condition>( <expr><name>x</name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition><then> <block>{
                <expr_stmt><expr><name>L</name> <operator>++</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>R</name> <operator>++</operator></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><name>L</name> <operator>--</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>R</name> <operator>--</operator></expr>;</expr_stmt>
            }</block></else></if>
        }</block>
        <return>return <expr><name>ans</name></expr>;</return>
    }</block></lambda></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>s</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>ans</name><argument_list>{}</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>y</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <macro><name>forr</name><argument_list>(<argument>i</argument>, <argument>n</argument>)</argument_list></macro> <block>{
        <macro><name>forn</name><argument_list>(<argument>j</argument>, <argument>i</argument>, <argument>n</argument>)</argument_list></macro> <block>{
            <expr_stmt><expr><call><name>swap</name><argument_list>( <argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <if>if<condition>( <expr><call><name>bmaxi</name><argument_list>( <argument><expr><name>ans</name></expr></argument>, <argument><expr><call><name>slv</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr> )</condition><then> <block>{
                <expr_stmt><expr><name>x</name> <operator>=</operator> <name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>y</name> <operator>=</operator> <name>j</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name>swap</name><argument_list>( <argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        }</block>
    }</block>

    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <name>en</name> <operator>&lt;&lt;</operator> <name>x</name> <operator>&lt;&lt;</operator> <name>sp</name> <operator>&lt;&lt;</operator> <name>y</name></expr>;</expr_stmt>
}</block></function>
<comment type="block">/*
10
()()())(()
10
()()()()()


*/</comment>
</unit>
