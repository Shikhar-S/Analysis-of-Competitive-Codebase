<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29178343_63001634.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>taskname</name></cpp:macro> <cpp:value>"1248D1"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>forinc</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int i = (a), _b = (b); i &lt;= _b; ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fordec</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int i = (a), _b = (b); i &gt;= _b; --i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>foreach</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (auto &amp;i : x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ms</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(x, n, sizeof(x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>int((x).size())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x).begin(), (x).end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>uni</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x).erase(unique(all(x)), (x).end())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pf</name></cpp:macro> <cpp:value>push_front</cpp:value></cpp:define>

<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>TH</name></parameter>&gt;</parameter_list></template>
<type><name>void</name></type> <name>_dbg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>sdbg</name></decl></parameter>, <parameter><decl><type><name>TH</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{
	<expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <name>sdbg</name> <operator>&lt;&lt;</operator> <literal type="string">" = "</literal> <operator>&lt;&lt;</operator> <name>h</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
}</block></function>

<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>TH</name></parameter>, <parameter><type><name>typename</name><modifier>...</modifier></type> <name>TA</name></parameter>&gt;</parameter_list></template>
<type><name>void</name></type> <name>_dbg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>sdbg</name></decl></parameter>, <parameter><decl><type><name>TH</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>TA</name><modifier>...</modifier></type> <name>t</name></decl></parameter>)</parameter_list>
<block>{
	<while>while <condition>(<expr><operator>*</operator><name>sdbg</name> <operator>!=</operator> <literal type="char">','</literal></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <operator>*</operator><name>sdbg</name><operator>++</operator></expr>;</expr_stmt></block></while>
	<expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <literal type="string">" = "</literal> <operator>&lt;&lt;</operator> <name>h</name> <operator>&lt;&lt;</operator> <literal type="string">","</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>_dbg</name><argument_list>(<argument><expr><name>sdbg</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>t</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>db</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_dbg(#__VA_ARGS__, __VA_ARGS__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>chkpt</name></cpp:macro> <cpp:value>cerr &lt;&lt; "--- Checkpoint here ---\n";</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name><init>=<expr><literal type="number">5e2</literal><operator>+</operator><literal type="number">2</literal></expr></init></decl>,<decl><type ref="prev"/><name>INF</name><init>=<expr><literal type="number">1e9</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name><name>a</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>s</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>minPref</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>minSuf</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>st</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>lz</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>N</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>Build</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><name>l</name><operator>==</operator><name>r</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name><name>st</name><index>[<expr><name>id</name></expr>]</index></name><operator>=</operator><name><name>s</name><index>[<expr><name>l</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>lz</name><index>[<expr><name>id</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
        <return>return;</return>
    }</block></then></if>
    <expr_stmt><expr><call><name>Build</name><argument_list>(<argument><expr><name>id</name><operator>*</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>l</name></expr></argument>,<argument><expr><operator>(</operator><name>l</name><operator>+</operator><name>r</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Build</name><argument_list>(<argument><expr><name>id</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>l</name><operator>+</operator><name>r</name><operator>)</operator><operator>/</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>st</name><index>[<expr><name>id</name></expr>]</index></name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name><name>st</name><index>[<expr><name>id</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>st</name><index>[<expr><name>id</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name>PushDown</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><name><name>lz</name><index>[<expr><name>id</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
    <block>{
        <return>return;</return>
    }</block></then></if>
    <expr_stmt><expr><name><name>st</name><index>[<expr><name>id</name></expr>]</index></name><operator>+=</operator><name><name>lz</name><index>[<expr><name>id</name></expr>]</index></name></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>l</name><operator>!=</operator><name>r</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name><name>lz</name><index>[<expr><name>id</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name><operator>+=</operator><name><name>lz</name><index>[<expr><name>id</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>lz</name><index>[<expr><name>id</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>+=</operator><name><name>lz</name><index>[<expr><name>id</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><name><name>lz</name><index>[<expr><name>id</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name>Increase</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>PushDown</name><argument_list>(<argument><expr><name>id</name></expr></argument>,<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if<condition>(<expr><name><name>r</name><argument_list type="generic">&lt;<argument><expr><name>i</name><operator>||</operator><name>l</name></expr></argument>&gt;</argument_list></name><name>j</name></expr>)</condition><then>
    <block>{
        <return>return;</return>
    }</block></then></if>
    <if>if<condition>(<expr><name>i</name><operator>&lt;=</operator><name>l</name><operator>&amp;&amp;</operator><name>r</name><operator>&lt;=</operator><name>j</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name><name>lz</name><index>[<expr><name>id</name></expr>]</index></name><operator>=</operator><name>val</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>PushDown</name><argument_list>(<argument><expr><name>id</name></expr></argument>,<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    }</block></then></if>
    <expr_stmt><expr><call><name>Increase</name><argument_list>(<argument><expr><name>id</name><operator>*</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>l</name></expr></argument>,<argument><expr><operator>(</operator><name>l</name><operator>+</operator><name>r</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>,<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Increase</name><argument_list>(<argument><expr><name>id</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>l</name><operator>+</operator><name>r</name><operator>)</operator><operator>/</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>,<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>st</name><index>[<expr><name>id</name></expr>]</index></name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name><name>st</name><index>[<expr><name>id</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>st</name><index>[<expr><name>id</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type> <name>Query</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>PushDown</name><argument_list>(<argument><expr><name>id</name></expr></argument>,<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if<condition>(<expr><name><name>r</name><argument_list type="generic">&lt;<argument><expr><name>i</name><operator>||</operator><name>l</name></expr></argument>&gt;</argument_list></name><name>j</name></expr>)</condition><then>
    <block>{
        <return>return <expr><name>INF</name></expr>;</return>
    }</block></then></if>
    <if>if<condition>(<expr><name>i</name><operator>&lt;=</operator><name>l</name><operator>&amp;&amp;</operator><name>r</name><operator>&lt;=</operator><name>j</name></expr>)</condition><then>
    <block>{
        <return>return <expr><name><name>st</name><index>[<expr><name>id</name></expr>]</index></name></expr>;</return>
    }</block></then></if>
    <return>return <expr><call><name>min</name><argument_list>(<argument><expr><call><name>Query</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name>id</name></expr></argument>,<argument><expr><name>l</name></expr></argument>,<argument><expr><operator>(</operator><name>l</name><operator>+</operator><name>r</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>Query</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name>id</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>l</name><operator>+</operator><name>r</name><operator>)</operator><operator>/</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>Calc</name><parameter_list>()</parameter_list>
<block>{
    <macro><name>forinc</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro>
    <block>{
        <expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>s</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    }</block>
    <macro><name>forinc</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro>
    <block>{
        <expr_stmt><expr><name><name>minPref</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name><name>minPref</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>
    <macro><name>fordec</name><argument_list>(<argument>i</argument>,<argument>n</argument>,<argument><literal type="number">1</literal></argument>)</argument_list></macro>
    <block>{
        <expr_stmt><expr><name><name>minSuf</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name><name>minSuf</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>
<comment type="line">//    Build(1,1,n);</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>res</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>l</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>r</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <macro><name>forinc</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro>
    <block>{
        <comment type="line">// [r..n] [1..l]</comment>
<comment type="line">//        Increase(1,1,n,r,n,-s[l]);</comment>
<comment type="line">//        int tmp1=Query(1,1,n,n,n);</comment>
<comment type="line">//        Increase(1,1,n,1,l,tmp1);</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>newMinSuf</name><init>=<expr><name><name>minSuf</name><index>[<expr><name>r</name></expr>]</index></name><operator>-</operator><name><name>s</name><index>[<expr><name>l</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>tmp</name><init>=<expr><name><name>s</name><index>[<expr><name>n</name></expr>]</index></name><operator>-</operator><name><name>s</name><index>[<expr><name>l</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>newMinPref</name><init>=<expr><name><name>minPref</name><index>[<expr><name>l</name></expr>]</index></name><operator>+</operator><name>tmp</name></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><call><name>min</name><argument_list>(<argument><expr><name>newMinSuf</name></expr></argument>,<argument><expr><name>newMinPref</name></expr></argument>)</argument_list></call><operator>&gt;=</operator><literal type="number">0</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>res</name><operator>++</operator></expr>;</expr_stmt>
        }</block></then></if>
<comment type="line">//        if(Query(1,1,n,1,n)&gt;=0)</comment>
<comment type="line">//        {</comment>
<comment type="line">//            res++;</comment>
<comment type="line">//        }</comment>
<comment type="line">//        Increase(1,1,n,r,n,s[l]);</comment>
<comment type="line">//        Increase(1,1,n,1,l,-tmp1);</comment>
        <expr_stmt><expr><name>l</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>r</name><operator>++</operator></expr>;</expr_stmt>
    }</block>
    <return>return <expr><name>res</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>Solve</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
    <macro><name>forinc</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro>
    <block>{
        <decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>c</name></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>c</name><operator>==</operator><literal type="char">'('</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
        }</block></then>
        <else>else
        <block>{
            <expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>s</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    }</block>
    <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>n</name></expr>]</index></name><operator>!=</operator><literal type="number">0</literal></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="number">0</literal><operator>&lt;&lt;</operator><literal type="char">'\n'</literal><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="char">' '</literal><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt>
        <return>return;</return>
    }</block></then></if>
<comment type="line">//    swap(a[7],a[8]);</comment>
<comment type="line">//    db(Calc());</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>maxVal</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>bestI</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>bestJ</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <macro><name>forinc</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro>
    <block>{
        <macro><name>forinc</name><argument_list>(<argument>j</argument>,<argument>i</argument>,<argument>n</argument>)</argument_list></macro>
        <block>{
            <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>tmp</name><init>=<expr><call><name>Calc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name>tmp</name><operator>&gt;</operator><name>maxVal</name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>maxVal</name><operator>=</operator><name>tmp</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>bestI</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>bestJ</name><operator>=</operator><name>j</name></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
    }</block>
<comment type="line">//    cout&lt;&lt;maxVal&lt;&lt;'\n';</comment>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>maxVal</name><operator>&lt;&lt;</operator><literal type="char">'\n'</literal><operator>&lt;&lt;</operator><name>bestI</name><operator>&lt;&lt;</operator><literal type="char">' '</literal><operator>&lt;&lt;</operator><name>bestJ</name><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ONLINE_JUDGE</name></cpp:ifndef>
	<expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><name>taskname</name><literal type="string">".INP"</literal></expr></argument>,<argument><expr><literal type="string">"r"</literal></expr></argument>,<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">//	freopen(taskname".OUT","w",stdout);</comment>
	<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// ONLINE_JUDGE</comment>
	<expr_stmt><expr><call><name>Solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
