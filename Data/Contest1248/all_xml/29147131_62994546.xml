<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29147131_62994546.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>N</name> <init>= <expr><literal type="number">1e6</literal><operator>+</operator><literal type="number">10</literal></expr></init></decl> ;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<decl_stmt><decl><type><name>int</name></type> <name>kwfmklwemklvervrfwemklfwklfmlkwe</name> <init>= <expr><literal type="number">234</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>PI</name> <init>= <expr><call><name>acos</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>eps</name> <init>= <expr><literal type="number">1e-8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>kwfmklwemklfw34f34emklfwklfmlkwe</name> <init>= <expr><literal type="number">234</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAXN</name> <init>= <expr><literal type="number">1e5</literal> <operator>+</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>kwfmklwemklf3f43wemklfwklfmlkwe</name> <init>= <expr><literal type="number">234</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>INF</name> <init>= <expr><literal type="number">0x3f3f3f3f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>kwfmklwemklfw34f43emklfwklfmlkwe</name> <init>= <expr><literal type="number">234</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>MOD</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>kwfmklwemklfwemklf3f43fwklfmlkwe</name> <init>= <expr><literal type="number">234</literal></expr></init></decl>;</decl_stmt>
<function><type><name>ll</name></type> <name>quickpow</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>kwfmklwemklfwem33f34klfwklfmlkwe</name> <init>= <expr><literal type="number">234</literal></expr></init></decl>;</decl_stmt>
	<if>if <condition>(<expr><name>b</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
	<decl_stmt><decl><type><name>ll</name></type> <name>ret</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>a</name> <operator>%=</operator> <name>MOD</name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>b</name></expr>)</condition> <block>{
		<if>if <condition>(<expr><name>b</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>ret</name> <operator>*</operator> <name>a</name><operator>)</operator> <operator>%</operator> <name>MOD</name></expr>;</expr_stmt></block></then></if>
		<expr_stmt><expr><name>b</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>a</name> <operator>*</operator> <name>a</name><operator>)</operator> <operator>%</operator> <name>MOD</name></expr>;</expr_stmt>
	}</block></while>
	<decl_stmt><decl><type><name>int</name></type> <name>kwfmklwemklfrf34fr34wemklfwklfmlkwe</name> <init>= <expr><literal type="number">234</literal></expr></init></decl>;</decl_stmt>
	<return>return <expr><name>ret</name> <operator>%</operator> <name>MOD</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name>ll</name></type> <name><name>dp</name><index>[<expr><literal type="number">100005</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>kwfmklwemk34f3flfwemklfwklfmlkwe</name> <init>= <expr><literal type="number">234</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>kwfmklwemklfwewefewfmklfwklfmlkwe</name> <init>= <expr><literal type="number">234</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>kwfmklwemkwefewlfwemklfwklfmlkwe</name> <init>= <expr><literal type="number">234</literal></expr></init></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>kwfmklwemklfwewefwemklfwklfmlkwe</name> <init>= <expr><literal type="number">234</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>kwfmklwemklfwemkwfwefewlfwklfmlkwe</name> <init>= <expr><literal type="number">234</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>kwfmkwefweflwemklfwemklfwklfmlkwe</name> <init>= <expr><literal type="number">234</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>m</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>kwfmklwemwefwefwklfwemklfwklfmlkwe</name> <init>= <expr><literal type="number">234</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>kwfmkfergfelwemklfwemklfwklfmlkwe</name> <init>= <expr><literal type="number">234</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>kwfmklwemklfwemklfr34r3443wklfmlkwe</name> <init>= <expr><literal type="number">234</literal></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>n</name><operator>&lt;</operator><name>m</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    <expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name><name>dp</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>kwfmklwemklf43r3r3wemklfwklfmlkwe</name> <init>= <expr><literal type="number">234</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>kwfmklwem34r34klfwemklfwklfmlkwe</name> <init>= <expr><literal type="number">234</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>kwfrf34rmklwemklfwemklfwklfmlkwe</name> <init>= <expr><literal type="number">234</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><operator>(</operator><name><name>dp</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>dp</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator><operator>%</operator><name>MOD</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><operator>(</operator><name><name>dp</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>+</operator><name><name>dp</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator><operator>%</operator><name>MOD</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><name><name>dp</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>=</operator><name><name>dp</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    }</block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>kwfmklwemklr34r43fwemklfwklfmlkwe</name> <init>= <expr><literal type="number">234</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>kwfmklwemke43rtwlfwemklfwklfmlkwe</name> <init>= <expr><literal type="number">234</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>kwfmklwemkwerwlfwemklfwklfmlkwe</name> <init>= <expr><literal type="number">234</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>(</operator><operator>(</operator><name><name>dp</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>dp</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator><operator>%</operator><name>MOD</name><operator>+</operator><operator>(</operator><name><name>dp</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>+</operator><name><name>dp</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator><operator>%</operator><name>MOD</name><operator>+</operator><operator>(</operator><name><name>dp</name><index>[<expr><name>m</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>dp</name><index>[<expr><name>m</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>+</operator><name><name>dp</name><index>[<expr><name>m</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>+</operator><name><name>dp</name><index>[<expr><name>m</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>-</operator><literal type="number">2</literal><operator>)</operator><operator>%</operator><name>MOD</name><operator>)</operator><operator>%</operator><name>MOD</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>kwfmklwemewrewklfwemklfwklfmlkwe</name> <init>= <expr><literal type="number">234</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>kwfmklwemklwerwefwemklfwklfmlkwe</name> <init>= <expr><literal type="number">234</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>kwfmklwemklfwerwewemklfwklfmlkwe</name> <init>= <expr><literal type="number">234</literal></expr></init></decl>;</decl_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

<comment type="block">/*
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &lt;iostream&gt;
using namespace std;
struct node{
    int num;
    node* next[26];
    node()
    {
        num=0;
        memset(next,NULL,sizeof(next));
    }
};
node* root=new node();
node* rt;
int id,len;
void build(char str[30])
{
    rt=root;
    len=strlen(str);
    for(int i=0;i&lt;len;i++)
    {
        id=str[i]-'a';
        if(rt-&gt;next[id]==NULL)
            rt-&gt;next[id]=new node();
        rt=rt-&gt;next[id];
        rt-&gt;num++;
    }
}
int querry(char str[30])
{
    rt=root;
    len=strlen(str);
    for(int i=0;i&lt;len;i++)
    {
        id=str[i]-'a';
        if(rt-&gt;next[id]==NULL)
            return 0;
        rt=rt-&gt;next[id];
    }
    return rt-&gt;num;
}
int main()
{
    char str[30];
    while(gets(str)&amp;&amp;str[0])
    {
        build(str);
    }
    while(gets(str))
    {
        printf("%d\n",querry(str));
    }
    return 0;
}
*/</comment>
</unit>
