<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29177266_62998179.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIMN</name></cpp:macro> <cpp:value>510</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>int</name></type> <name><name>v</name><index>[<expr><name>DIMN</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>w</name><index>[<expr><name>DIMN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>pair</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>prefix</name><index>[<expr><name>DIMN</name></expr>]</index></name></decl> , <decl><type ref="prev"/><name><name>suffix</name><index>[<expr><name>DIMN</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fin</name> <init>= <expr><name>stdin</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fout</name> <init>= <expr><name>stdout</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>sol</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>rot</name></decl>,<decl><type ref="prev"/><name>sx</name></decl>,<decl><type ref="prev"/><name>sy</name></decl>,<decl><type ref="prev"/><name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name>minpref</name></decl>,<decl><type ref="prev"/><name>pref</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>sx</name> <operator>=</operator> <name>sy</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fscanf</name> <argument_list>(<argument><expr><name>fin</name></expr></argument>,<argument><expr><literal type="string">"%d\n"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>fgetc</name><argument_list>(<argument><expr><name>fin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>c</name><operator>==</operator><literal type="char">'('</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
    }</block></for>

    <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <for>for <control>(<init><expr><name>j</name><operator>=</operator><name>i</name></expr>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{

            <for>for <control>(<init><expr><name>k</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>k</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
                <block type="pseudo"><expr_stmt><expr><name><name>w</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>v</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt></block></for>
            <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>w</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> , <argument><expr><name><name>w</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">//if (i == 7 &amp;&amp; j == 8)</comment>
              <comment type="line">//  printf ("%d ",rot);</comment>
            <expr_stmt><expr><name>minpref</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>pref</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <for>for <control>(<init><expr><name>k</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>k</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block>{
                <expr_stmt><expr><name>pref</name> <operator>+=</operator> <name><name>w</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>minpref</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>minpref</name></expr></argument> , <argument><expr><name>pref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>prefix</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <call><name>make_pair</name><argument_list>(<argument><expr><name>minpref</name></expr></argument> , <argument><expr><name>pref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>

            <expr_stmt><expr><name>minpref</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>pref</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <for>for <control>(<init><expr><name>k</name><operator>=</operator><name>n</name></expr>;</init><condition><expr><name>k</name></expr>;</condition><incr><expr><name>k</name><operator>--</operator></expr></incr>)</control><block>{
                <expr_stmt><expr><name>pref</name> <operator>+=</operator> <name><name>w</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>k</name> <operator>==</operator> <name>n</name></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name>minpref</name> <operator>=</operator> <name><name>w</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt></block></then>
                <else>else <block type="pseudo"><expr_stmt><expr><name>minpref</name> <operator>=</operator> <call><name>min</name> <argument_list>(<argument><expr><name>minpref</name> <operator>+</operator> <name><name>w</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument> , <argument><expr><name><name>w</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
                <expr_stmt><expr><name><name>suffix</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <call><name>make_pair</name><argument_list>(<argument><expr><name>minpref</name></expr></argument> , <argument><expr><name>pref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>

            <expr_stmt><expr><name>rot</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

            <if>if <condition>(<expr><name><name>prefix</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>second</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>prefix</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>&gt;=</operator><literal type="number">0</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>rot</name><operator>++</operator></expr>;</expr_stmt></block></then></if>

            <for>for <control>(<init><expr><name>k</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>k</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block>{
                <if>if <condition>(<expr><name><name>prefix</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>second</name> <operator>+</operator> <name><name>suffix</name><index>[<expr><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>second</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>suffix</name><index>[<expr><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>first</name><operator>&gt;=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>suffix</name><index>[<expr><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>second</name> <operator>+</operator> <name><name>prefix</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name>rot</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
            }</block></for>
            <if>if <condition>(<expr><name>rot</name> <operator>&gt;</operator> <name>sol</name></expr>)</condition><then><block>{
                <expr_stmt><expr><name>sol</name> <operator>=</operator> <name>rot</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>sx</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>sy</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
            }</block></then></if>

        }</block></for>
    }</block></for>
    <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>fout</name></expr></argument>,<argument><expr><literal type="string">"%d\n%d %d"</literal></expr></argument>,<argument><expr><name>sol</name></expr></argument>,<argument><expr><name>sx</name></expr></argument>,<argument><expr><name>sy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
