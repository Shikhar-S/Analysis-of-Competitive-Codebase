<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29181180_62985276.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(long long i=0; i&lt;m; i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>per</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(long long i=m-1; i&gt;=0; i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>,<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(long long i=n; i&lt;m; i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROF</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>,<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(long long i=m-1; i&gt;=n; i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SORT</name><parameter_list>(<parameter><type><name>v</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do{sort(v,v+n);reverse(v,v+n);}while(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x).begin(),(x).end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MT</name></cpp:macro> <cpp:value>make_tuple</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EPS</name></cpp:macro> <cpp:value>(1e-7)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INF</name></cpp:macro> <cpp:value>(1e18)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PI</name></cpp:macro> <cpp:value>(acos(-1))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dump</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>cerr &lt;&lt; #x &lt;&lt; " = " &lt;&lt; (x) &lt;&lt; endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cerr &lt;&lt; #x &lt;&lt; " = " &lt;&lt; (x) &lt;&lt; " (L" &lt;&lt; __LINE__ &lt;&lt; ")" &lt;&lt; " " &lt;&lt; __FILE__ &lt;&lt; endl;</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>MOD</name> <init>= <expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>P</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>LP</name>;</typedef>

 
<function><type><name>ll</name></type> <name>POW</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{
  <expr_stmt><expr><name>x</name><operator>%=</operator><name>MOD</name></expr>;</expr_stmt>
  <if>if<condition>(<expr><name>n</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
  <if>if<condition>(<expr><name>n</name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><call><name>POW</name><argument_list>(<argument><expr><name>x</name><operator>*</operator><name>x</name></expr></argument>,<argument><expr><name>n</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>%</operator><name>MOD</name></expr>;</return></block></then></if>
  <return>return <expr><name>x</name><operator>%</operator><name>MOD</name><operator>*</operator><call><name>POW</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>%</operator><name>MOD</name></expr>;</return>
}</block></function>
 
<function><type><name>ll</name></type> <name>POW2</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{
  <if>if<condition>(<expr><name>n</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
  <if>if<condition>(<expr><name>n</name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><call><name>POW2</name><argument_list>(<argument><expr><name>x</name><operator>*</operator><name>x</name></expr></argument>,<argument><expr><name>n</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
  <return>return <expr><name>x</name><operator>*</operator><call><name>POW2</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
 
<function><type><name>ll</name></type> <name>POW3</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>m</name></decl></parameter>)</parameter_list><block>{
  <expr_stmt><expr><name>x</name><operator>%=</operator><name>m</name></expr>;</expr_stmt>
  <if>if<condition>(<expr><name>n</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
  <if>if<condition>(<expr><name>n</name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><call><name>POW3</name><argument_list>(<argument><expr><name>x</name><operator>*</operator><name>x</name></expr></argument>,<argument><expr><name>n</name><operator>/</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call><operator>%</operator><name>m</name></expr>;</return></block></then></if>
  <return>return <expr><name>x</name><operator>*</operator><call><name>POW3</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call><operator>%</operator><name>m</name></expr>;</return>
}</block></function>
 
<function><type><name>ll</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>u</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
  <decl_stmt><decl><type><name>ll</name></type> <name>r</name></decl>;</decl_stmt>
  <while>while <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <name>v</name></expr>)</condition> <block>{
    <expr_stmt><expr><name>r</name> <operator>=</operator> <name>u</name> <operator>%</operator> <name>v</name></expr>;</expr_stmt> <expr_stmt><expr><name>u</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt> <expr_stmt><expr><name>v</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
  }</block></while>
  <return>return <expr><name>u</name></expr>;</return>
}</block></function>
 
<function><type><name>ll</name></type> <name>lcm</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>u</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
  <return>return <expr><name>u</name><operator>/</operator><call><name>gcd</name><argument_list>(<argument><expr><name>u</name></expr></argument>,<argument><expr><name>v</name></expr></argument>)</argument_list></call><operator>*</operator><name>v</name></expr>;</return>
}</block></function>
 
<function><type><name>ll</name></type> <name>KAI</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>m</name></decl></parameter>)</parameter_list>
<block>{
  <if>if<condition>(<expr><name>m</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
  <if>if<condition>(<expr><name>m</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
  <return>return <expr><name>m</name><operator>*</operator><call><name>KAI</name><argument_list>(<argument><expr><name>m</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>%</operator><name>MOD</name></expr>;</return>
}</block></function>
 
<function><type><name>ll</name></type> <name>KAI2</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>m</name></decl></parameter>)</parameter_list>
<block>{
  <if>if<condition>(<expr><name>m</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
  <if>if<condition>(<expr><name>m</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
  <return>return <expr><name>m</name><operator>*</operator><call><name>KAI2</name><argument_list>(<argument><expr><name>m</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
 
<function><type><name>ll</name></type> <name>extGCD</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>ll</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>ll</name> <modifier>&amp;</modifier></type><name>y</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>b</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <return>return <expr><name>a</name></expr>;</return>
    }</block></then></if>
    <decl_stmt><decl><type><name>ll</name></type> <name>d</name> <init>= <expr><call><name>extGCD</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name><operator>%</operator><name>b</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>y</name> <operator>-=</operator> <name>a</name> <operator>/</operator> <name>b</name> <operator>*</operator> <name>x</name></expr>;</expr_stmt>
    <return>return <expr><name>d</name></expr>;</return>
}</block></function>
 
<function><specifier>inline</specifier> <type><name>ll</name></type> <name>mod</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>m</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><operator>(</operator><name>a</name> <operator>%</operator> <name>m</name> <operator>+</operator> <name>m</name><operator>)</operator> <operator>%</operator> <name>m</name></expr>;</return>
}</block></function>
 
<function><type><name>ll</name></type> <name>modinv</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>extGCD</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>MOD</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>mod</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>MOD</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
 
<function><type><name>ll</name></type> <name>COM</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>m</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{
  <if>if<condition>(<expr><name>m</name><operator>&lt;</operator><name>n</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
  <if>if<condition>(<expr><name>n</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
  <if>if<condition>(<expr><name>n</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
  <if>if<condition>(<expr><name>m</name><operator>==</operator><name>n</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
  <return>return <expr><call><name>KAI</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call><operator>%</operator><name>MOD</name><operator>*</operator><call><name>modinv</name><argument_list>(<argument><expr><call><name>KAI</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call><operator>%</operator><name>MOD</name><operator>*</operator><call><name>KAI</name><argument_list>(<argument><expr><name>m</name><operator>-</operator><name>n</name></expr></argument>)</argument_list></call><operator>%</operator><name>MOD</name></expr></argument>)</argument_list></call><operator>%</operator><name>MOD</name></expr>;</return>
}</block></function>
 
<function><type><name>ll</name></type> <name>COM2</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>m</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{
  <if>if<condition>(<expr><name>m</name><operator>&lt;</operator><name>n</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
  <if>if<condition>(<expr><name>n</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
  <if>if<condition>(<expr><name>n</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
  <if>if<condition>(<expr><name>m</name><operator>==</operator><name>n</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
  <return>return <expr><call><name>KAI2</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call><operator>/</operator><call><name>KAI2</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call><operator>/</operator><call><name>KAI2</name><argument_list>(<argument><expr><name>m</name><operator>-</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
 
<function><type><name>ll</name></type> <name>DEC</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>m</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{
  <return>return <expr><name>x</name><operator>%</operator><call><name>POW2</name><argument_list>(<argument><expr><name>m</name></expr></argument>,<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>/</operator><call><name>POW2</name><argument_list>(<argument><expr><name>m</name></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
 
<function><type><name>ll</name></type> <name>keta</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{
  <if>if<condition>(<expr><name>x</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
  <return>return <expr><call><name>keta</name><argument_list>(<argument><expr><name>x</name><operator>/</operator><name>n</name></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr>;</return>
}</block></function>
 
<function><type><name>ll</name></type> <name>DIV</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{
  <if>if<condition>(<expr><name>x</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
  <return>return <expr><name>x</name><operator>/</operator><name>n</name><operator>+</operator><call><name>DIV</name><argument_list>(<argument><expr><name>x</name><operator>/</operator><name>n</name></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
 
<function><type><name>ll</name></type> <name>ORD</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{
  <if>if<condition>(<expr><name>x</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><name>INF</name></expr>;</return></block></then></if>
  <if>if<condition>(<expr><name>x</name><operator>%</operator><name>n</name><operator>!=</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
  <return>return <expr><literal type="number">1</literal><operator>+</operator><call><name>ORD</name><argument_list>(<argument><expr><name>x</name><operator>/</operator><name>n</name></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>ll</name></type> <name>SUP</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{
  <if>if<condition>(<expr><name>x</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
  <if>if<condition>(<expr><name>x</name><operator>%</operator><name>n</name><operator>!=</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><name>x</name></expr>;</return></block></then></if>
  <return>return <expr><call><name>SUP</name><argument_list>(<argument><expr><name>x</name><operator>/</operator><name>n</name></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
 
<function><type><name>ll</name></type> <name>SGS</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>m</name></decl></parameter>)</parameter_list>
<block>{
  <if>if<condition>(<expr><name>y</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
  <if>if<condition>(<expr><name>y</name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
    <return>return <expr><operator>(</operator><literal type="number">1</literal><operator>+</operator><call><name>POW3</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name><operator>/</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call><operator>)</operator><operator>*</operator><call><name>SGS</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name><operator>/</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call><operator>%</operator><name>m</name></expr>;</return>
  }</block></then></if>
  <return>return <expr><operator>(</operator><literal type="number">1</literal><operator>+</operator><name>x</name><operator>*</operator><call><name>SGS</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call><operator>)</operator><operator>%</operator><name>m</name></expr>;</return>
}</block></function>
 
<function><type><name>ll</name></type> <name>SSGS</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>y</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>m</name></decl></parameter>)</parameter_list>
<block>{
  <if>if<condition>(<expr><name>y</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
  <if>if<condition>(<expr><name>y</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
  <if>if<condition>(<expr><name>y</name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
    <return>return <expr><operator>(</operator><call><name>SSGS</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name><operator>/</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call><operator>*</operator><operator>(</operator><call><name>POW3</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name><operator>/</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><name>m</name><operator>+</operator><call><name>SGS</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name><operator>/</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call><operator>*</operator><name>y</name><operator>/</operator><literal type="number">2</literal><operator>%</operator><name>m</name><operator>)</operator><operator>%</operator><name>m</name></expr>;</return>
  }</block></then></if>
  <return>return <expr><operator>(</operator><call><name>SSGS</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call><operator>*</operator><name>x</name><operator>%</operator><name>m</name><operator>+</operator><name>y</name><operator>)</operator><operator>%</operator><name>m</name></expr>;</return>
}</block></function>
 
<function><type><name>void</name></type> <name>shuffle</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name><name>array</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{
    <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>j</name> <init>= <expr><call><name>rand</name><argument_list>()</argument_list></call><operator>%</operator><name>size</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ll</name></type> <name>t</name> <init>= <expr><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>array</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>array</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
    }</block></for>
}</block></function>

<function><type><name>ll</name></type> <name>SQRT</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{
  <decl_stmt><decl><type><name>ll</name></type> <name>ok</name></decl>,<decl><type ref="prev"/><name>ng</name></decl>,<decl><type ref="prev"/><name>mid</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>ng</name><operator>=</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <if>if<condition>(<expr><literal type="number">303700500</literal><operator>&lt;</operator><name>ng</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>ng</name><operator>=</operator><literal type="number">303700500</literal></expr>;</expr_stmt></block></then></if>
  <expr_stmt><expr><name>ok</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
  <while>while<condition>(<expr><call><name>abs</name><argument_list>(<argument><expr><name>ok</name><operator>-</operator><name>ng</name></expr></argument>)</argument_list></call><operator>&gt;</operator><literal type="number">1</literal></expr>)</condition><block>{
    <expr_stmt><expr><name>mid</name><operator>=</operator><operator>(</operator><name>ok</name><operator>+</operator><name>ng</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>mid</name><operator>*</operator><name>mid</name><operator>&lt;=</operator><name>n</name></expr>)</condition><then><block>{
      <expr_stmt><expr><name>ok</name><operator>=</operator><name>mid</name></expr>;</expr_stmt>
    }</block></then>
    <else>else<block>{
      <expr_stmt><expr><name>ng</name><operator>=</operator><name>mid</name></expr>;</expr_stmt>
    }</block></else></if>
  }</block></while>
  <return>return <expr><name>ok</name></expr>;</return>
}</block></function>
 
<struct>struct <name>UnionFind</name>
<block>{<public type="default">
  <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>par</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>sizes</name></decl>;</decl_stmt>
  <constructor><name>UnionFind</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>par</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call>, <call><name>sizes</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> </member_init_list><block>{
    <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument>n</argument>)</argument_list></macro> <expr_stmt><expr><name><name>par</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
  }</block></constructor>
  <function><type><name>int</name></type> <name>find</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>x</name> <operator>==</operator> <name><name>par</name><index>[<expr><name>x</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>x</name></expr>;</return></block></then></if>
    <return>return <expr><name><name>par</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>find</name><argument_list>(<argument><expr><name><name>par</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>
  <function><type><name>void</name></type> <name>unite</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>find</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>find</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>x</name> <operator>==</operator> <name>y</name></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then></if>
    <if>if <condition>(<expr><name><name>sizes</name><index>[<expr><name>x</name></expr>]</index></name> <operator>&lt;</operator> <name><name>sizes</name><index>[<expr><name>y</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    <expr_stmt><expr><name><name>par</name><index>[<expr><name>y</name></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sizes</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+=</operator> <name><name>sizes</name><index>[<expr><name>y</name></expr>]</index></name></expr>;</expr_stmt>
  }</block></function>
  <function><type><name>bool</name></type> <name>same</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>find</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>find</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>
  <function><type><name>int</name></type> <name>size</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><name><name>sizes</name><index>[<expr><call><name>find</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</return>
  }</block></function>
</public>}</block>;</struct>

<function><type><name><name>map</name><argument_list type="generic">&lt; <argument><expr><name>int64_t</name></expr></argument>, <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></type> <name>prime_factor</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{
  <decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt; <argument><expr><name>int64_t</name></expr></argument>, <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></type> <name>ret</name></decl>;</decl_stmt>
  <for>for<control>(<init><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>*</operator> <name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
    <while>while<condition>(<expr><name>n</name> <operator>%</operator> <name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{
      <expr_stmt><expr><name><name>ret</name><index>[<expr><name>i</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>n</name> <operator>/=</operator> <name>i</name></expr>;</expr_stmt>
    }</block></while>
  }</block></for>
  <if>if<condition>(<expr><name>n</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>ret</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
  <return>return <expr><name>ret</name></expr>;</return>
}</block></function>

<struct>struct <name>edge</name><block>{<public type="default"><decl_stmt><decl><type><name>ll</name></type> <name>to</name></decl>, <decl><type ref="prev"/><name>cost</name></decl>;</decl_stmt></public>}</block>;</struct>
<struct>struct <name>graph</name><block>{<public type="default">
  <decl_stmt><decl><type><name>ll</name></type> <name>V</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>edge</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>G</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>d</name></decl>;</decl_stmt>

  <constructor><name>graph</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{
    <expr_stmt><expr><call><name>init</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <function><type><name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{
    <expr_stmt><expr><name>V</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>G</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>V</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>V</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument>V</argument>)</argument_list></macro><block>{
      <expr_stmt><expr><name><name>d</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>INF</name></expr>;</expr_stmt>
    }</block>
  }</block></function>

  <function><type><name>void</name></type> <name>add_edge</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>cost</name></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name>edge</name></type> <name>e</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>e</name><operator>.</operator><name>to</name></name> <operator>=</operator> <name>t</name></expr><operator>,</operator> <expr><name><name>e</name><operator>.</operator><name>cost</name></name> <operator>=</operator> <name>cost</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>G</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><type><name>void</name></type> <name>dijkstra</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>s</name></decl></parameter>)</parameter_list><block>{
    <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument>V</argument>)</argument_list></macro><block>{
      <expr_stmt><expr><name><name>d</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>INF</name></expr>;</expr_stmt>
    }</block>
    <expr_stmt><expr><name><name>d</name><index>[<expr><name>s</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>priority_queue</name><argument_list type="generic">&lt;<argument><expr><name>LP</name></expr></argument>,<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>LP</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>greater</name><argument_list type="generic">&lt;<argument><expr><name>LP</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>que</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>que</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><call><name>LP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>(<expr><operator>!</operator><call><name><name>que</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{
      <decl_stmt><decl><type><name>LP</name></type> <name>p</name> <init>= <expr><call><name><name>que</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> <expr_stmt><expr><call><name><name>que</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>ll</name></type> <name>v</name> <init>= <expr><name><name>p</name><operator>.</operator><name>second</name></name></expr></init></decl>;</decl_stmt>
      <if>if<condition>(<expr><name><name>d</name><index>[<expr><name>v</name></expr>]</index></name><operator>&lt;</operator><name><name>p</name><operator>.</operator><name>first</name></name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
      <for>for<control>(<init><decl><type><name>auto</name></type> <name>e</name> <range>: <expr><name><name>G</name><index>[<expr><name>v</name></expr>]</index></name></expr></range></decl></init>)</control><block>{
        <if>if<condition>(<expr><name><name>d</name><index>[<expr><name><name>e</name><operator>.</operator><name>to</name></name></expr>]</index></name><operator>&gt;</operator><name><name>d</name><index>[<expr><name>v</name></expr>]</index></name><operator>+</operator><name><name>e</name><operator>.</operator><name>cost</name></name></expr>)</condition><then><block>{
          <expr_stmt><expr><name><name>d</name><index>[<expr><name><name>e</name><operator>.</operator><name>to</name></name></expr>]</index></name> <operator>=</operator> <name><name>d</name><index>[<expr><name>v</name></expr>]</index></name><operator>+</operator><name><name>e</name><operator>.</operator><name>cost</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>que</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><call><name>LP</name><argument_list>(<argument><expr><name><name>d</name><index>[<expr><name><name>e</name><operator>.</operator><name>to</name></name></expr>]</index></name></expr></argument>,<argument><expr><name><name>e</name><operator>.</operator><name>to</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
      }</block></for>
    }</block></while>
  }</block></function>
</public>}</block>;</struct>

<decl_stmt><decl><type><name>ll</name></type> <name><name>d</name><index>[<expr><literal type="number">310</literal></expr>]</index><index>[<expr><literal type="number">310</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>warshall_floyd</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{
  <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument>n</argument>)</argument_list></macro><macro><name>rep</name><argument_list>(<argument>j</argument>,<argument>n</argument>)</argument_list></macro><macro><name>rep</name><argument_list>(<argument>k</argument>,<argument>n</argument>)</argument_list></macro><expr_stmt><expr><name><name>d</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name><name>d</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>d</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>d</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<decl_stmt><decl><type><name>ll</name></type> <name><name>D</name><index>[<expr><literal type="number">310</literal></expr>]</index><index>[<expr><literal type="number">310</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>Warshall_floyd</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{
  <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument>n</argument>)</argument_list></macro><macro><name>rep</name><argument_list>(<argument>j</argument>,<argument>n</argument>)</argument_list></macro><macro><name>rep</name><argument_list>(<argument>k</argument>,<argument>n</argument>)</argument_list></macro><expr_stmt><expr><name><name>D</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name><name>D</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>D</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>D</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<struct>struct <name>bit</name><block>{<public type="default">
  <decl_stmt><decl><type><name>ll</name></type> <name>m</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>b</name></decl>;</decl_stmt>
  <constructor><name>bit</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>i</name></decl></parameter>)</parameter_list><block>{
    <expr_stmt><expr><name>m</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>b</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>m</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>
  <function><type><name>ll</name></type> <name>num</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>i</name></decl></parameter>)</parameter_list><block>{
    <return>return <expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>
  }</block></function>
  <function><type><name>ll</name></type> <name>sum</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>i</name></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>s</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>i</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><block>{
      <expr_stmt><expr><name>s</name><operator>+=</operator><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>i</name><operator>-=</operator><name>i</name><operator>&amp;</operator><operator>-</operator><name>i</name></expr>;</expr_stmt>
    }</block></while
    <return>return <expr><name>s</name></expr>;</return>
  }</block></function>
  <function><type><name>void</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{
    <while>while<condition>(<expr><name>i</name><operator>&lt;=</operator><name>m</name></expr>)</condition><block>{
      <expr_stmt><expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name><operator>+=</operator><name>x</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>i</name><operator>+=</operator><name>i</name><operator>&amp;</operator><operator>-</operator><name>i</name></expr>;</expr_stmt>
    }</block></while>
  }</block></function>
</public>}</block>;</struct>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
  <decl_stmt><decl><type><name>ll</name></type> <name>t</name></decl>,<decl><type ref="prev"/><name>n</name></decl>,<decl><type ref="prev"/><name><name>p</name><index>[<expr><literal type="number">110000</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name><name>q</name><index>[<expr><literal type="number">110000</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name>a</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>b</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
  <macro><name>rep</name><argument_list>(<argument>j</argument>,<argument>t</argument>)</argument_list></macro><block>{
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
    <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument>n</argument>)</argument_list></macro><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>m</name></expr>;</expr_stmt>
    <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument>m</argument>)</argument_list></macro><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>q</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>a</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>b</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
    <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument>n</argument>)</argument_list></macro><if>if<condition>(<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>%</operator><literal type="number">2</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>a</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
    <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument>m</argument>)</argument_list></macro><if>if<condition>(<expr><name><name>q</name><index>[<expr><name>i</name></expr>]</index></name><operator>%</operator><literal type="number">2</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>b</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>,<argument><expr><name>a</name><operator>*</operator><name>b</name><operator>+</operator><operator>(</operator><name>n</name><operator>-</operator><name>a</name><operator>)</operator><operator>*</operator><operator>(</operator><name>m</name><operator>-</operator><name>b</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block>
  
}</block></function></unit>
