<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29178534_63007867.cpp">	<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
	<using>using <namespace>namespace <name>std</name>;</namespace></using>
	<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOS</name></cpp:macro> <cpp:value>ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);</cpp:value></cpp:define>
	<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>trace1</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>                <cpp:value>cerr&lt;&lt;#x&lt;&lt;": "&lt;&lt;x&lt;&lt;endl</cpp:value></cpp:define>
	<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>trace2</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro>             <cpp:value>cerr&lt;&lt;#x&lt;&lt;": "&lt;&lt;x&lt;&lt;" | "&lt;&lt;#y&lt;&lt;": "&lt;&lt;y&lt;&lt;endl</cpp:value></cpp:define>
	<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>trace3</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro>          <cpp:value>cerr&lt;&lt;#x&lt;&lt;":" &lt;&lt;x&lt;&lt;" | "&lt;&lt;#y&lt;&lt;": "&lt;&lt;y&lt;&lt;" | "&lt;&lt;#z&lt;&lt;": "&lt;&lt;z&lt;&lt;endl</cpp:value></cpp:define>
	<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>trace4</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro>       <cpp:value>cerr&lt;&lt;#a&lt;&lt;": "&lt;&lt;a&lt;&lt;" | "&lt;&lt;#b&lt;&lt;": "&lt;&lt;b&lt;&lt;" | "&lt;&lt;#c&lt;&lt;": "&lt;&lt;c&lt;&lt;" | "&lt;&lt;#d&lt;&lt;": "&lt;&lt;d&lt;&lt;endl</cpp:value></cpp:define>
	<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>trace5</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter>, <parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>cerr&lt;&lt;#a&lt;&lt;": "&lt;&lt;a&lt;&lt;" | "&lt;&lt;#b&lt;&lt;": "&lt;&lt;b&lt;&lt;" | "&lt;&lt;#c&lt;&lt;": "&lt;&lt;c&lt;&lt;" | "&lt;&lt;#d&lt;&lt;": "&lt;&lt;d&lt;&lt;" | "&lt;&lt;#e&lt;&lt; ": "&lt;&lt;e&lt;&lt;endl</cpp:value></cpp:define>
	<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>trace6</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter>, <parameter><type><name>e</name></type></parameter>, <parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cerr&lt;&lt;#a&lt;&lt;": "&lt;&lt;a&lt;&lt;" | "&lt;&lt;#b&lt;&lt;": "&lt;&lt;b&lt;&lt;" | "&lt;&lt;#c&lt;&lt;": "&lt;&lt;c&lt;&lt;" | "&lt;&lt;#d&lt;&lt;": "&lt;&lt;d&lt;&lt;" | "&lt;&lt;#e&lt;&lt; ": "&lt;&lt;e&lt;&lt;" | "&lt;&lt;#f&lt;&lt;": "&lt;&lt;f&lt;&lt;endl</cpp:value></cpp:define>
	<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>'\n'</cpp:value></cpp:define>

	<function><type><name>int32_t</name></type> <name>main</name><parameter_list>()</parameter_list>
	<block>{
	    <expr_stmt><expr><name>IOS</name></expr>;</expr_stmt>
	    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
	    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
	    <decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>
	    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>s</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name>s</name><operator>=</operator><literal type="string">" "</literal><operator>+</operator><name>s</name></expr>;</expr_stmt>
	    <decl_stmt><decl><type><name>int</name></type> <name>l</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	    <decl_stmt><decl><type><name>int</name></type> <name>r</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	    <decl_stmt><decl><type><name>int</name></type> <name>ans</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	    <block>{
	    	<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
	    	<block>{
	    		<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    		<decl_stmt><decl><type><name>int</name></type> <name><name>pre1</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>pre2</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
	    		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pre1</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pre1</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    		<for>for<control>(<init><decl><type><name>int</name></type> <name>k</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>k</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
	    		<block>{
	    			<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>k</name></expr>]</index></name><operator>==</operator><literal type="char">'('</literal></expr>)</condition><then>
	    				<block type="pseudo"><expr_stmt><expr><name><name>pre1</name><index>[<expr><name>k</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then>
	    			<else>else
	    				<block type="pseudo"><expr_stmt><expr><name><name>pre1</name><index>[<expr><name>k</name></expr>]</index></name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
	    			<expr_stmt><expr><name><name>pre1</name><index>[<expr><name>k</name></expr>]</index></name><operator>+=</operator><name><name>pre1</name><index>[<expr><name>k</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	    		}</block></for>
	    		<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    		<decl_stmt><decl><type><name>int</name></type> <name>tmp</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	    		<decl_stmt><decl><type><name>int</name></type> <name><name>mi1</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
	    		<decl_stmt><decl><type><name>int</name></type> <name><name>mi2</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
	    		<expr_stmt><expr><name><name>mi1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name><name>pre1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	    		<expr_stmt><expr><name><name>mi2</name><index>[<expr><name>n</name></expr>]</index></name><operator>=</operator><name><name>pre1</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
	    		<for>for<control>(<init><decl><type><name>int</name></type> <name>k</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</init><condition><expr><name>k</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
	    			<block type="pseudo"><expr_stmt><expr><name><name>mi1</name><index>[<expr><name>k</name></expr>]</index></name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name><name>mi1</name><index>[<expr><name>k</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>pre1</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	    		<for>for<control>(<init><decl><type><name>int</name></type> <name>k</name><init>=<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>k</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition><incr><expr><name>k</name><operator>--</operator></expr></incr>)</control>
	    			<block type="pseudo"><expr_stmt><expr><name><name>mi2</name><index>[<expr><name>k</name></expr>]</index></name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name><name>mi2</name><index>[<expr><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>pre1</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	    		<decl_stmt><decl><type><name>int</name></type> <name>neg</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	    		<if>if<condition>(<expr><name><name>mi1</name><index>[<expr><name>n</name></expr>]</index></name><operator>&gt;=</operator><literal type="number">0</literal><operator>&amp;&amp;</operator><name><name>pre1</name><index>[<expr><name>n</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
	    		<block type="pseudo"><expr_stmt><expr><name>tmp</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
	    		<for>for<control>(<init><decl><type><name>int</name></type> <name>k</name><init>=<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>k</name><operator>&gt;=</operator><literal type="number">1</literal></expr>;</condition><incr><expr><name>k</name><operator>--</operator></expr></incr>)</control>
	    		<block>{
	    			<decl_stmt><decl><type><name>int</name></type> <name>add1</name><init>=<expr><name><name>pre1</name><index>[<expr><name>n</name></expr>]</index></name><operator>-</operator><name><name>pre1</name><index>[<expr><name>k</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	    			<decl_stmt><decl><type><name>int</name></type> <name>add2</name><init>=<expr><operator>-</operator><name><name>pre1</name><index>[<expr><name>k</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	    			<decl_stmt><decl><type><name>int</name></type> <name>x</name><init>=<expr><name><name>mi1</name><index>[<expr><name>k</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	    			<decl_stmt><decl><type><name>int</name></type> <name>y</name><init>=<expr><name><name>mi2</name><index>[<expr><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	    			<if>if<condition>(<expr><operator>(</operator><name><name>pre1</name><index>[<expr><name>k</name></expr>]</index></name><operator>+</operator><name>add1</name><operator>==</operator><literal type="number">0</literal><operator>)</operator><operator>&amp;&amp;</operator><operator>(</operator><operator>(</operator><name>x</name><operator>+</operator><name>add1</name><operator>)</operator><operator>&gt;=</operator><literal type="number">0</literal><operator>)</operator><operator>&amp;&amp;</operator><operator>(</operator><name>y</name><operator>+</operator><name>add2</name><operator>&gt;=</operator><literal type="number">0</literal><operator>)</operator></expr>)</condition><then>
	    				<block type="pseudo"><expr_stmt><expr><name>tmp</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
	    		}</block></for>
	    		<if>if<condition>(<expr><name>ans</name><operator>&lt;=</operator><name>tmp</name></expr>)</condition><then>
	    		<block>{
	    			<expr_stmt><expr><name>ans</name><operator>=</operator><name>tmp</name></expr>;</expr_stmt>
	    			<expr_stmt><expr><name>l</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
	    			<expr_stmt><expr><name>r</name><operator>=</operator><name>j</name></expr>;</expr_stmt>
	    			<continue>continue;</continue>
	    		}</block></then></if>
	    	}</block></for>
	    }</block></for>
	    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>l</name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name>r</name></expr>;</expr_stmt>
	}</block></function>
	    
	    </unit>
