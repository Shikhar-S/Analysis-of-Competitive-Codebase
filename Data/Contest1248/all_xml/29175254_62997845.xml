<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29175254_62997845.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>N</name> <init>= <expr><literal type="number">1e5</literal> <operator>+</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>mod</name><init>=<expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<function><type><name>ll</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><name>n</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><literal type="number">2</literal></expr>;</return></block></then></if>
    <if>if<condition>(<expr><name>n</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><literal type="number">4</literal></expr>;</return></block></then></if>
    <decl_stmt><decl><type><name>ll</name></type> <name>a</name> <init>= <expr><literal type="number">2</literal></expr></init></decl> , <decl><type ref="prev"/><name>b</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>n</name><operator>-=</operator><literal type="number">2</literal></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>n</name><operator>--</operator><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>c</name> <init>= <expr><operator>(</operator><name>a</name><operator>+</operator><name>b</name><operator>)</operator><operator>%</operator><name>mod</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>b</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><name>b</name></expr>;</return>
}</block></function>
<function><type><name>ll</name></type> <name>calc</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><name>n</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
    <if>if<condition>(<expr><name>n</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><literal type="number">2</literal></expr>;</return></block></then></if>
    <decl_stmt><decl><type><name>ll</name></type> <name>a</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> , <decl><type ref="prev"/><name>b</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>n</name><operator>-=</operator><literal type="number">2</literal></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>n</name><operator>--</operator><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>c</name> <init>= <expr><operator>(</operator><name>a</name><operator>+</operator><name>b</name><operator>)</operator><operator>%</operator><name>mod</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>b</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
    }</block></while>
    <decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><operator>(</operator> <operator>(</operator><literal type="number">2</literal><operator>*</operator><name>b</name><operator>)</operator><operator>%</operator><name>mod</name> <operator>-</operator> <literal type="number">2</literal> <operator>+</operator> <name>mod</name><operator>)</operator><operator>%</operator><name>mod</name></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>ans</name></expr>;</return>
}</block></function>


<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>r</name></decl>,<decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>r</name><operator>&gt;&gt;</operator><name>c</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><call><name>init</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>a</name> <init>= <expr><name>ans</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>b</name> <init>= <expr><operator>(</operator> <name>ans</name><operator>+</operator><literal type="number">2</literal> <operator>)</operator><operator>%</operator><name>mod</name></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>c</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><name>cout</name><operator>&lt;&lt;</operator><name>a</name></expr> <operator>,</operator> <expr><literal type="number">0</literal></expr>;</return></block></then>
    <elseif>else <if>if<condition>(<expr><name>c</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><name>cout</name><operator>&lt;&lt;</operator><name>b</name></expr> <operator>,</operator> <expr><literal type="number">0</literal></expr>;</return></block></then></if></elseif></if>
    <decl_stmt><decl><type><name>ll</name></type> <name>sub</name> <init>= <expr><call><name>calc</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>c</name><operator>-=</operator><literal type="number">2</literal></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>c</name><operator>--</operator><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>n</name> <init>= <expr><operator>(</operator> <operator>(</operator><name>a</name><operator>+</operator><name>b</name><operator>)</operator><operator>%</operator><name>mod</name> <operator>-</operator><name>sub</name> <operator>+</operator>  <name>mod</name><operator>)</operator><operator>%</operator><name>mod</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>b</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
    }</block></while>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>b</name></expr>;</expr_stmt>
}</block></function>
</unit>
