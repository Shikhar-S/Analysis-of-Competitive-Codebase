<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29179752_62979859.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(register int a=(b);a&lt;=(c);++a)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(register int a=(b);a&gt;=(c);--a)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<decl_stmt><decl><type><name>char</name></type> <name><name>pbuf</name><index>[<expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">20</literal></expr>]</index></name></decl>,<modifier>*</modifier><decl><type ref="prev"/><name>pp1</name><init>=<expr><name>pbuf</name></expr></init></decl>;</decl_stmt>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>push</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><operator>*</operator><name>pp1</name><operator>=</operator><name>c</name></expr>;</expr_stmt><expr_stmt><expr><name>pp1</name><operator>=</operator><ternary><condition><expr><operator>(</operator><name>pp1</name><operator>-</operator><name>pbuf</name><operator>==</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">20</literal><operator>)</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>?</condition><then><expr><operator>(</operator><call><name>fwrite</name><argument_list>(<argument><expr><name>pbuf</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">20</literal></expr></argument>,<argument><expr><name>stdout</name></expr></argument>)</argument_list></call><operator>,</operator><name>pbuf</name><operator>)</operator></expr></then><else>:<expr><operator>(</operator><name>pp1</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pc</name></cpp:macro> <cpp:value>push</cpp:value></cpp:define>
<comment type="line">//#define pc putchar</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pe</name></cpp:macro> <cpp:value>pc('\n')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ps</name></cpp:macro> <cpp:value>pc(' ')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wer</name></cpp:macro> <cpp:value>rd()</cpp:value></cpp:define>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p1</name></decl>,<modifier>*</modifier><decl><type ref="prev"/><name>p2</name></decl>,<decl><type ref="prev"/><name><name>buf</name><index>[<expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GC</name></cpp:macro> <cpp:value>(p1==p2&amp;&amp;(p1=buf,p2=buf+fread(buf,1,1&lt;&lt;20,stdin),p1==p2)?0:(*(p1++)))</cpp:value></cpp:define>
<comment type="line">//#define GC getchar()</comment>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><specifier>inline</specifier> <type><name>ll</name></type> <name>wer</name><argument_list>{
	<argument><expr><name>ll</name> <name>ans</name></expr></argument>;<argument><expr><name>char</name> <name>t</name></expr></argument>,<argument><expr><name>k</name></expr></argument>;
	while<argument><expr><operator>(</operator><operator>(</operator><operator>(</operator><name>t</name><operator>=</operator><name>GC</name><operator>)</operator><operator>!=</operator><literal type="char">'-'</literal><operator>)</operator><operator>&amp;&amp;</operator><operator>(</operator><name>t</name><operator>&gt;</operator><literal type="char">'9'</literal><operator>||</operator><name>t</name><operator>&lt;</operator><literal type="char">'0'</literal><operator>)</operator><operator>)</operator></expr></argument>;
	<argument><expr><name>k</name><operator>=</operator><operator>(</operator><name>t</name><operator>==</operator><literal type="char">'-'</literal><operator>)</operator></expr></argument>;
	<argument><expr><name>ans</name><operator>=</operator><ternary><condition><expr><name>k</name></expr>?</condition><then><expr><literal type="number">0</literal></expr></then><else>:<expr><operator>(</operator><name>t</name><operator>-</operator><literal type="char">'0'</literal><operator>)</operator></expr></else></ternary></expr></argument>;
	while<argument><expr><operator>(</operator><operator>(</operator><name>t</name><operator>=</operator><name>GC</name><operator>)</operator><operator>&gt;=</operator><literal type="char">'0'</literal><operator>&amp;&amp;</operator><name>t</name><operator>&lt;=</operator><literal type="char">'9'</literal><operator>)</operator><name>ans</name><operator>=</operator><name>ans</name><operator>*</operator><literal type="number">10</literal><operator>+</operator><name>t</name><operator>-</operator><literal type="char">'0'</literal></expr></argument>;
	return <argument><expr><ternary><condition><expr><name>k</name></expr>?</condition><then><expr><operator>-</operator><name>ans</name></expr></then><else>:<expr><name>ans</name></expr></else></ternary></expr></argument>;
}</argument_list>
<namespace><specifier>inline</specifier> void <name>wt</name>(<name>ll</name> <name>k</name></namespace></decl>)
<block>{
	<if>if<condition>(<expr><name>k</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>pc</name><argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><call><name>wt</name><argument_list>(<argument><expr><operator>-</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
	<else>else
	<block>{
		<if>if<condition>(<expr><name>k</name><operator>&lt;</operator><literal type="number">10</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>pc</name><argument_list>(<argument><expr><literal type="char">'0'</literal><operator>+</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><call><name>wt</name><argument_list>(<argument><expr><name>k</name><operator>/</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><call><name>pc</name><argument_list>(<argument><expr><literal type="char">'0'</literal><operator>+</operator><name>k</name><operator>%</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
	}</block></else></if>
	<return>return;</return>
}</block></decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>p</name><index>[<expr><literal type="number">1000001</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>q</name><index>[<expr><literal type="number">1000001</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name>t</name></decl>,<decl><type ref="prev"/><name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt> 
<function><name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><name>t</name><operator>=</operator><name>wer</name></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition>
    <block>{
    	<expr_stmt><expr><name>n</name><operator>=</operator><name>wer</name></expr>;</expr_stmt>
    	<decl_stmt><decl><type><name>int</name></type> <name>a</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>b</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    	<macro><name>f</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro><block>{
    		<expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>wer</name></expr>;</expr_stmt>
    		<if>if<condition>(<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>a</name><operator>++</operator></expr>;</expr_stmt></block></then>
    		<else>else <block type="pseudo"><expr_stmt><expr><name>b</name><operator>++</operator></expr>;</expr_stmt></block></else></if>
		}</block>
    	<expr_stmt><expr><name>m</name><operator>=</operator><name>wer</name></expr>;</expr_stmt>
    	<decl_stmt><decl><type><name>int</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    	<macro><name>f</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>m</argument>)</argument_list></macro><block>{
    		<expr_stmt><expr><name><name>q</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>wer</name></expr>;</expr_stmt>
    		<if>if<condition>(<expr><name><name>q</name><index>[<expr><name>i</name></expr>]</index></name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>ans</name><operator>+=</operator><name>a</name></expr>;</expr_stmt></block></then><else>else <block type="pseudo"><expr_stmt><expr><name>ans</name><operator>+=</operator><name>b</name></expr>;</expr_stmt></block></else></if>
		}</block>
		<expr_stmt><expr><call><name>wt</name><argument_list>(<argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><name>pe</name></expr>;</expr_stmt>
	}</block></while>
    <expr_stmt><expr><call><name>fwrite</name><argument_list>(<argument><expr><name>pbuf</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>pp1</name><operator>-</operator><name>pbuf</name></expr></argument>,<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>


</unit>
