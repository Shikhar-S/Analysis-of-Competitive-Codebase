<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29181056_63005500.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fstream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bitset&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;complex&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iomanip&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;valarray&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ull</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ull</name></expr></argument>&gt;</argument_list></name></type> <name>vull</name>;</typedef>
<typedef>typedef <type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>&gt;</argument_list></name></type> <name>ss</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vi</name></expr></argument>&gt;</argument_list></name></type> <name>vvi</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>ii</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ii</name></expr></argument>&gt;</argument_list></name></type> <name>vii</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>ii</name></expr></argument>&gt;</argument_list></name></type> <name>iii</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ii</name></expr></argument>, <argument><expr><name>ii</name></expr></argument>&gt;</argument_list></name></type> <name>iiii</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>iii</name></expr></argument>&gt;</argument_list></name></type> <name>viii</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>viii</name></expr></argument>&gt;</argument_list></name></type> <name>vviii</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vii</name></expr></argument>&gt;</argument_list></name></type> <name>vvii</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>&gt;</argument_list></name></type> <name>vs</name>;</typedef>
<typedef>typedef <type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>msi</name>;</typedef>
<typedef>typedef <type><name><name>multiset</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>mlsi</name>;</typedef>
<typedef>typedef <type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>ii</name></expr></argument>&gt;</argument_list></name></type> <name>sii</name>;</typedef>
<typedef>typedef <type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>ii</name></expr></argument>&gt;</argument_list></name></type> <name>mii</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>psi</name>;</typedef>
<typedef>typedef <type><name><name>queue</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>qi</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>vi</name></expr></argument>&gt;</argument_list></name></type> <name>pivi</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pivi</name></expr></argument>&gt;</argument_list></name></type> <name>vpivi</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>ii</name></expr></argument>&gt;</argument_list></name></type> <name>iii</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>iii</name></expr></argument>&gt;</argument_list></name></type> <name>viii</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></type> <name>ib</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ib</name></expr></argument>&gt;</argument_list></name></type> <name>vib</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>double</name></expr></argument>&gt;</argument_list></name></type> <name>vd</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>&gt;</argument_list></name></type> <name>vs</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vib</name></expr></argument>&gt;</argument_list></name></type> <name>vvib</name>;</typedef>
<typedef>typedef <type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>si</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></type> <name>bb</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type><name>pll</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type><name>vll</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pll</name></expr></argument>&gt;</argument_list></name></type> <name>vpll</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vpll</name></expr></argument>&gt;</argument_list></name></type> <name>vvpll</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vll</name></expr></argument>&gt;</argument_list></name></type> <name>vvll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>string</name></expr></argument>&gt;</argument_list></name></type> <name>pis</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>string</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>vpis</name>;</typedef>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PI</name></cpp:macro> <cpp:value>3.14159265</cpp:value></cpp:define>

<comment type="block">/* ii;
class SegTree {
public:
   vii A;
   vi st;
   int n;
 
   int left(int i) {
       return (i &lt;&lt; 1);
   }
 
   int right(int i) {
       return (i &lt;&lt; 1) + 1;
   }
 
   void build(int p, int L, int R) {
       if (L == R)
           st[p] = L;
       else {
           build(left(p), L, (L + R) / 2);
           build(right(p), (L + R) / 2 + 1, R);
           int p1 = st[left(p)];
           int p2 = st[right(p)];
           st[p] = A[p1].second &lt;= A[p2].second ? p1 : p2;
       }
   }
 
   SegTree(const vii &amp;_A) {
       A = _A;
       n = _A.size();
       st.assign(4 * n, -1);
       build(1, 0, n - 1);
   }
 
   int rmq(int p, int L, int R, int i, int j) {
       if (i &gt; R || j &lt; L) return -1;
       if (L &gt;= i &amp;&amp; R &lt;= j) return st[p];
       int p1 = rmq(left(p), L, (L + R) / 2, i, j);
       int p2 = rmq(right(p), (L + R) / 2 + 1, R, i, j);
       if (p1 == -1) return p2;
       if (p2 == -1) return p1;
 
       return (A[p1].second &lt;= A[p2].second ? p1 : p2);
   }
 
   int rmq(int i, int j) {
       return rmq(1, 0, n - 1, i, j);
   }
 
   int getIndex(int p, int L, int R, int pos) {
       if (L == R) return p;
       if (pos &lt;= (L + R) / 2) return getIndex(left(p), L, (L + R) / 2, pos);
       return getIndex(right(p), (L + R) / 2 + 1, R, pos);
   }
 
   void update(int pos, int value) {
       A[pos].second = value;
       pos = getIndex(1, 0, n - 1, pos);
       pos /= 2;
 
       while (pos != 0) {
           int p1 = st[left(pos)];
           int p2 = st[right(pos)];
 
           if (p1 &gt;= 0 &amp;&amp; p2 &gt;= 0)
               st[pos] = A[p1].second &lt;= A[p2].second ? p1 : p2;
           pos /= 2;
       }
   }
};
 */</comment>


<class>class <name>SegTree</name> <block>{<private type="default">
</private><public>public:
    <decl_stmt><decl><type><name>vll</name></type> <name>A</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>vll</name></type> <name>st</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

    <function><type><name>int</name></type> <name>left</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
    }</block></function>

    <function><type><name>int</name></type> <name>right</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
    }</block></function>

    <function><type><name>void</name></type> <name>build</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>R</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>L</name> <operator>==</operator> <name>R</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name><name>st</name><index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <name>L</name></expr>;</expr_stmt></block></then>
        <else>else <block>{
            <expr_stmt><expr><call><name>build</name><argument_list>(<argument><expr><call><name>left</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>(</operator><name>L</name> <operator>+</operator> <name>R</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>build</name><argument_list>(<argument><expr><call><name>right</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>L</name> <operator>+</operator> <name>R</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>p1</name> <init>= <expr><name><name>st</name><index>[<expr><call><name>left</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>p2</name> <init>= <expr><name><name>st</name><index>[<expr><call><name>right</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>st</name><index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name><name>A</name><index>[<expr><name>p1</name></expr>]</index></name> <operator>&gt;=</operator> <name><name>A</name><index>[<expr><name>p2</name></expr>]</index></name></expr> ?</condition><then> <expr><name>p1</name></expr> </then><else>: <expr><name>p2</name></expr></else></ternary></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <constructor><name>SegTree</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vll</name> <modifier>&amp;</modifier></type><name>_A</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>A</name> <operator>=</operator> <name>_A</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name><name>_A</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><literal type="number">4</literal> <operator>*</operator> <name>n</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>build</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><name>int</name></type> <name>rmq</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>R</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <name>R</name> <operator>||</operator> <name>j</name> <operator>&lt;</operator> <name>L</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block></then></if>
        <if>if <condition>(<expr><name>L</name> <operator>&gt;=</operator> <name>i</name> <operator>&amp;&amp;</operator> <name>R</name> <operator>&lt;=</operator> <name>j</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name><name>st</name><index>[<expr><name>p</name></expr>]</index></name></expr>;</return></block></then></if>
        <decl_stmt><decl><type><name>int</name></type> <name>p1</name> <init>= <expr><call><name>rmq</name><argument_list>(<argument><expr><call><name>left</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>(</operator><name>L</name> <operator>+</operator> <name>R</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>p2</name> <init>= <expr><call><name>rmq</name><argument_list>(<argument><expr><call><name>right</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>L</name> <operator>+</operator> <name>R</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>R</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>p1</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>p2</name></expr>;</return></block></then></if>
        <if>if <condition>(<expr><name>p2</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>p1</name></expr>;</return></block></then></if>

        <return>return <expr><operator>(</operator><ternary><condition><expr><name><name>A</name><index>[<expr><name>p1</name></expr>]</index></name> <operator>&gt;=</operator> <name><name>A</name><index>[<expr><name>p2</name></expr>]</index></name></expr> ?</condition><then> <expr><name>p1</name></expr> </then><else>: <expr><name>p2</name></expr></else></ternary><operator>)</operator></expr>;</return>
    }</block></function>

    <function><type><name>int</name></type> <name>rmq</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></then></if>

        <return>return <expr><call><name>rmq</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>int</name></type> <name>getIndex</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>R</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>L</name> <operator>==</operator> <name>R</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>p</name></expr>;</return></block></then></if>
        <if>if <condition>(<expr><name>pos</name> <operator>&lt;=</operator> <operator>(</operator><name>L</name> <operator>+</operator> <name>R</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><call><name>getIndex</name><argument_list>(<argument><expr><call><name>left</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>(</operator><name>L</name> <operator>+</operator> <name>R</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
        <return>return <expr><call><name>getIndex</name><argument_list>(<argument><expr><call><name>right</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>L</name> <operator>+</operator> <name>R</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>R</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>void</name></type> <name>update</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>A</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>getIndex</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>pos</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

        <while>while <condition>(<expr><name>pos</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>p1</name> <init>= <expr><name><name>st</name><index>[<expr><call><name>left</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>p2</name> <init>= <expr><name><name>st</name><index>[<expr><call><name>right</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><name>p1</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>p2</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name><name>st</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name><name>A</name><index>[<expr><name>p1</name></expr>]</index></name> <operator>&gt;=</operator> <name><name>A</name><index>[<expr><name>p2</name></expr>]</index></name></expr> ?</condition><then> <expr><name>p1</name></expr> </then><else>: <expr><name>p2</name></expr></else></ternary></expr>;</expr_stmt></block></then></if>
            <expr_stmt><expr><name>pos</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        }</block></while>
    }</block></function>
</public>}</block>;</class>

<class>class <name>UnionFind</name> <block>{<private type="default">
</private><public>public:
    <decl_stmt><decl><type><name>vi</name></type> <name>rank</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>vii</name></type> <name>p</name></decl>;</decl_stmt>

    <constructor><name>UnionFind</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>N</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>rank</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><name>N</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><name>N</name></expr></argument>, <argument><expr><call><name>ii</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block></for>
    }</block></constructor>

    <function><type><name>int</name></type> <name>findSet</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><ternary><condition><expr><operator>(</operator><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>==</operator> <name>i</name><operator>)</operator></expr> ?</condition><then> <expr><name>i</name></expr> </then><else>: <expr><operator>(</operator><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>=</operator> <call><name>findSet</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name></expr></argument>)</argument_list></call><operator>)</operator></expr></else></ternary></expr>;</return>
    }</block></function>

    <function><type><name>bool</name></type> <name>isSameSet</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name>findSet</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>findSet</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>void</name></type> <name>unionSet</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><operator>!</operator><call><name>isSameSet</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><call><name>findSet</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>y</name> <init>= <expr><call><name>findSet</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name><name>rank</name><index>[<expr><name>x</name></expr>]</index></name> <operator>&gt;</operator> <name><name>rank</name><index>[<expr><name>y</name></expr>]</index></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>p</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>p</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>second</name> <operator>+=</operator> <name><name>p</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><name>second</name></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name><name>p</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>p</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><name>second</name> <operator>+=</operator> <name><name>p</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>second</name></expr>;</expr_stmt>
                <if>if <condition>(<expr><name><name>rank</name><index>[<expr><name>x</name></expr>]</index></name> <operator>==</operator> <name><name>rank</name><index>[<expr><name>y</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>rank</name><index>[<expr><name>y</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block></then></if>
            }</block></else></if>
        }</block></then></if>
    }</block></function>

    <function><type><name>int</name></type> <name>getMaxId</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>maxIn</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>p</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><if>if <condition>(<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name> <operator>&gt;</operator> <name><name>p</name><index>[<expr><name>maxIn</name></expr>]</index></name><operator>.</operator><name>second</name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>maxIn</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block></then></if></block></for>

        <return>return <expr><name>maxIn</name></expr>;</return>
    }</block></function>

    <function><type><name>int</name></type> <name>getNum</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>si</name></type> <name>par</name></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>p</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><expr_stmt><expr><call><name><name>par</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
        <return>return <expr><call><name><name>par</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

</public>}</block>;</class>

<function><type><name>string</name></type> <name>getString</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
    <comment type="line">// string class has a constructor </comment>
    <comment type="line">// that allows us to specify size of </comment>
    <comment type="line">// string as first parameter and character </comment>
    <comment type="line">// to be filled in given size as second </comment>
    <comment type="line">// parameter. </comment>
    <decl_stmt><decl><type><name>string</name></type> <name>s</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <return>return <expr><name>s</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><name>ull</name></type> <name><name>cost</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>dna</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="char">'A'</literal></expr>, <expr><literal type="char">'T'</literal></expr>, <expr><literal type="char">'C'</literal></expr>, <expr><literal type="char">'G'</literal></expr>, <expr><literal type="char">'?'</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vvi</name></type> <name>rels</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vpis</name></type> <name>ls</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name><name>isl</name><index>[<expr><literal type="number">10003</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ull</name></type> <name><name>dp</name><index>[<expr><literal type="number">10003</literal></expr>]</index><index>[<expr><literal type="number">203</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>par</name><index>[<expr><literal type="number">10003</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>bool</name></type> <name>comp</name><parameter_list>(<parameter><decl><type><name>pis</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>pis</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><name><name>a</name><operator>.</operator><name>first</name></name> <operator>&lt;</operator> <name><name>b</name><operator>.</operator><name>first</name></name></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name><name>isl</name><index>[<expr><name>u</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then></if>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>rels</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><name><name>rels</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>v</name> <operator>==</operator> <name><name>par</name><index>[<expr><name>u</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
        <expr_stmt><expr><name><name>par</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <name>u</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>



    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{
            <decl_stmt><decl><type><name>ull</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>rels</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><name><name>rels</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>v</name> <operator>==</operator> <name><name>par</name><index>[<expr><name>u</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

                <decl_stmt><decl><type><name>ull</name></type> <name>mn</name> <init>= <expr><operator>(</operator><literal type="number">1ull</literal> <operator>&lt;&lt;</operator> <literal type="number">60</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>t</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>t</name><operator>++</operator></expr></incr>)</control> <block>{
                    <decl_stmt><decl><type><name>ull</name></type> <name>tmp</name> <init>= <expr><name><name>dp</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>t</name></expr>]</index></name> <operator>+</operator> <name><name>cost</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>t</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>mn</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>mn</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>
                <expr_stmt><expr><name>c</name> <operator>+=</operator> <name>mn</name></expr>;</expr_stmt>
            }</block></for>
            <expr_stmt><expr><name><name>dp</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
        }</block></for>
    }</block></for>


}</block></function>

<function><type><name>int</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>string</name></type> <name>str</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name>int</name></type> <name><name>dp</name><index>[<expr><name>n</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name><name>arr</name><index>[<expr><name>n</name></expr>]</index></name></decl>;</decl_stmt>
    
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><if>if<condition>(<expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></else></if></block></for>
    
    <expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>arr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>dp</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>

    <decl_stmt><decl><type><name>int</name></type> <name>mn</name> <init>= <expr><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">30</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>mn</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>mn</name></expr></argument> , <argument><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    
    
    <decl_stmt><decl><type><name>int</name></type> <name><name>dpr</name><index>[<expr><name>n</name></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>dpr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>arr</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr> ;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>dpr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>dpr</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>arr</name><index>[<expr><name>n</name><operator>-</operator><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block></for>
    
    <if>if<condition>(<expr><name><name>dp</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>

    <decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>=<expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><if>if<condition>(<expr><name><name>dpr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>mn</name> <operator>&gt;=</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>res</name> <operator>++</operator></expr>;</expr_stmt></block></then></if></block></for>
    
    <return>return <expr><name>res</name></expr>;</return>
}</block></function> 

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{

    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>string</name></type> <name>str</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>str</name></expr>;</expr_stmt>
    
    <decl_stmt><decl><type><name>int</name></type> <name>tt</name> <init>= <expr><call><name>get</name><argument_list>(<argument><expr><literal type="string">"()()()()()"</literal></expr></argument> , <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><name>int</name></type> <name>l</name></decl> , <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>  ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
           <block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>n</name></expr> ;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
            <decl_stmt><decl><type><name>string</name></type> <name>tmp</name></decl>;</decl_stmt>
            <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>char</name></type> <name>a</name> <init>= <expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>char</name></type> <name>b</name> <init>= <expr><name><name>str</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>tmp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>tmp</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>cur</name> <init>= <expr><call><name>get</name><argument_list>(<argument><expr><name>tmp</name></expr></argument> , <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name>cur</name> <operator>&gt;</operator> <name>res</name></expr>)</condition><then><block>{
                <expr_stmt><expr><name>res</name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>i</name></expr></argument> , <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>i</name></expr></argument> , <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for></block></for>
    
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n%d %d"</literal></expr></argument> , <argument><expr><name>res</name></expr></argument> , <argument><expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr></argument> , <argument><expr><name>r</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>


























</unit>
