<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1248/all/29137891_63001882.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inf</name></cpp:macro> <cpp:value>999999999</cpp:value></cpp:define>
<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><literal type="number">100001</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>p</name><index>[<expr><literal type="number">100001</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>s</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>sum</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>a1</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>a2</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><name>sum</name><operator>+=</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">')'</literal></expr>;</expr_stmt></block></for>
	<if>if<condition>(<expr><name>n</name><operator>%</operator><literal type="number">2</literal><operator>!=</operator><literal type="number">0</literal><operator>||</operator><name>sum</name><operator>!=</operator><name>n</name><operator>/</operator><literal type="number">2</literal></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"0\n1 1\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></then></if>
	<decl_stmt><decl><type><name>int</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><name>i</name></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
		<block>{
			<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>tot</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>st</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>res</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>las</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
			<for>for<control>(<init><decl><type><name>int</name></type> <name>k</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>k</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
			<block>{
				<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>k</name></expr>]</index></name><operator>==</operator><literal type="char">')'</literal></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><name>tot</name><operator>--</operator></expr>;</expr_stmt></block></then>
				<else>else
					<block type="pseudo"><expr_stmt><expr><name>tot</name><operator>++</operator></expr>;</expr_stmt></block></else></if>
				<if>if<condition>(<expr><name>tot</name><operator>&lt;</operator><name>las</name></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><name>st</name><operator>=</operator><name>k</name><operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name>las</name><operator>=</operator><name>tot</name></expr>;</expr_stmt></block></then></if>
			}</block></for>
			<if>if<condition>(<expr><name>st</name><operator>==</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>st</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
			<for>for<control>(<init><decl><type><name>int</name></type> <name>k</name><init>=<expr><name>st</name></expr></init></decl>;</init><condition><expr><name>k</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
			<block>{
				<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>k</name></expr>]</index></name><operator>==</operator><literal type="char">')'</literal></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><name>tot</name><operator>--</operator></expr>;</expr_stmt></block></then>
				<else>else
					<block type="pseudo"><expr_stmt><expr><name>tot</name><operator>++</operator></expr>;</expr_stmt></block></else></if>
				<if>if<condition>(<expr><name>tot</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><name>res</name><operator>=</operator><operator>-</operator><name>inf</name></expr>;</expr_stmt></block></then></if>
				<expr_stmt><expr><name>res</name><operator>+=</operator><name>tot</name><operator>==</operator><literal type="number">0</literal></expr>;</expr_stmt>
			}</block></for>
			<for>for<control>(<init><decl><type><name>int</name></type> <name>k</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>k</name><operator>&lt;</operator><name>st</name></expr>;</condition><incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
			<block>{
				<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>k</name></expr>]</index></name><operator>==</operator><literal type="char">')'</literal></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><name>tot</name><operator>--</operator></expr>;</expr_stmt></block></then>
				<else>else
					<block type="pseudo"><expr_stmt><expr><name>tot</name><operator>++</operator></expr>;</expr_stmt></block></else></if>
				<if>if<condition>(<expr><name>tot</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><name>res</name><operator>=</operator><operator>-</operator><name>inf</name></expr>;</expr_stmt></block></then></if>
				<expr_stmt><expr><name>res</name><operator>+=</operator><name>tot</name><operator>==</operator><literal type="number">0</literal></expr>;</expr_stmt>
			}</block></for>
			<if>if<condition>(<expr><name>res</name><operator>&gt;</operator><name>ans</name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name>ans</name><operator>=</operator><name>res</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>a1</name><operator>=</operator><name>i</name></expr><operator>,</operator><expr><name>a2</name><operator>=</operator><name>j</name></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
	}</block></for>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n%d %d\n"</literal></expr></argument>,<argument><expr><name>ans</name></expr></argument>,<argument><expr><name>a1</name></expr></argument>,<argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
<comment type="block">/*
10
)))))(((((
*/</comment></unit>
