pragma directive name name include directive file include directive file include directive file include directive file include directive file include directive file include directive file include directive file include directive file include directive file include directive file include directive file include directive file include directive file define directive macro name value define directive macro name value define directive macro name parameter_list parameter type name value define directive macro name parameter_list parameter type name parameter type name value define directive macro name parameter_list parameter type name value define directive macro name parameter_list parameter type name value define directive macro name value define directive macro name value decl_stmt decl type specifier name name init expr literal type number define directive macro name parameter_list parameter type name value using namespace name comment type line comment type line comment type line comment type line comment type line comment type line comment type line comment type line comment type line comment type line comment type line comment type line comment type line comment type line comment type line comment type line comment type line comment type line comment type line function template parameter_list parameter type name name type name name name parameter_list parameter decl type name name block if condition expr name operator literal type number then block type pseudo return expr operator name operator call name argument_list argument expr literal type char if condition expr name operator literal type number then block type pseudo expr_stmt expr call name argument_list argument expr literal type char operator expr name operator operator name decl_stmt decl specifier type name name name index expr literal type number decl_stmt decl type name modifier name init expr name while condition expr name block expr_stmt expr operator operator name operator operator operator name operator literal type number operator literal type char expr_stmt expr name operator literal type number while condition expr name operator name block type pseudo expr_stmt expr call name argument_list argument expr operator operator operator name operator function type name name name parameter_list parameter decl type specifier name modifier name block while condition expr operator name operator literal type number block type pseudo expr_stmt expr call name argument_list argument expr operator operator name operator operator function template parameter_list parameter type name name type name name name parameter_list parameter decl type name name block expr_stmt expr call name argument_list argument expr name operator expr call name argument_list argument expr literal type char function template parameter_list parameter type name name type name name name parameter_list parameter decl type name name block expr_stmt expr call name argument_list argument expr name operator expr call name argument_list argument expr literal type char function type name name name parameter_list parameter decl type name modifier name block decl_stmt decl type name modifier name init expr name decl type ref prev name init expr call name argument_list while condition expr name name argument_list type generic argument expr literal type number operator name literal type number block expr_stmt expr name operator call name argument_list while condition expr name operator literal type number operator name operator literal type number block expr_stmt expr operator operator name operator operator operator name expr_stmt expr name operator call name argument_list expr_stmt expr operator name operator literal type number return expr name operator name function template parameter_list parameter type name name type name name name parameter_list block decl_stmt decl type name name init expr literal type number decl_stmt decl type specifier name name init expr literal type number decl_stmt decl type specifier name name init expr call name argument_list while condition expr name operator literal type char operator name operator literal type char block if condition expr name operator literal type char then block type pseudo expr_stmt expr name operator literal type number expr_stmt expr name operator call name argument_list while condition expr name operator literal type char operator name operator literal type char block expr_stmt expr name operator operator name operator literal type number operator operator operator name operator literal type number operator operator operator name operator literal type number operator expr_stmt expr name operator call name argument_list return expr ternary condition expr name then expr operator name else expr name function template parameter_list type name name name name argument_list type generic argument expr name parameter_list block decl_stmt decl type name name init expr literal type number decl_stmt decl type name name init expr literal type number decl type ref prev name init expr literal type number decl_stmt decl type name name init expr literal type number decl_stmt decl type specifier name name init expr call name argument_list while condition expr name operator literal type char operator name operator literal type char block if condition expr name operator literal type char then block type pseudo expr_stmt expr name operator literal type number expr_stmt expr name operator call name argument_list while condition expr name operator literal type char operator name operator literal type char operator name operator literal type char block if condition expr name operator literal type char then block expr_stmt expr name operator literal type number operator expr name operator call name argument_list continue expr_stmt expr name operator name operator literal type number operator operator name operator literal type number operator if condition expr name then block type pseudo expr_stmt expr name operator literal type number expr_stmt expr name operator call name argument_list return expr operator ternary condition expr name then expr operator name else expr name operator operator name pragma directive name decl_stmt decl type name name decl type ref prev name name index expr literal type number decl type ref prev name name index expr literal type number decl_stmt decl type name name name index expr literal type number decl type ref prev name name index expr literal type number decl_stmt decl type name name name index expr literal type number function type name name name parameter_list block decl_stmt decl type name name init expr literal type number decl type ref prev name init expr literal type number for control init decl type name name init expr literal type number condition expr name operator name incr expr operator name block expr_stmt expr name name index expr name operator name name index expr name operator literal type number operator operator ternary condition expr name name index expr name operator literal type char then expr literal type number else expr operator literal type number operator if condition expr name name index expr name operator literal type char then block type pseudo expr_stmt expr operator name else block type pseudo expr_stmt expr name operator call name argument_list argument expr name operator literal type number argument expr literal type number expr_stmt expr name name index expr name operator operator name expr_stmt expr name operator literal type number for control init decl type name name init expr name condition expr name incr expr operator name block expr_stmt expr name name index expr name operator name name index expr name operator literal type number operator operator ternary condition expr name name index expr name operator literal type char then expr literal type number else expr operator literal type number operator if condition expr name name index expr name operator literal type char then block type pseudo expr_stmt expr operator name else block type pseudo expr_stmt expr name operator call name argument_list argument expr name operator literal type number argument expr literal type number expr_stmt expr name name index expr name operator operator name for control init decl type name name init expr literal type number condition expr name operator name incr expr operator name block if condition expr name name index expr name operator name name index expr name operator literal type number operator name name index expr name operator operator name name index expr name operator literal type number then block type pseudo expr_stmt expr operator name return expr name function type name name parameter_list block expr_stmt expr name operator call name name argument_list type generic argument expr name argument_list expr_stmt expr call name argument_list argument expr name operator literal type number operator expr name name index expr name operator literal type number operator literal type number decl_stmt decl type name name init expr call name argument_list decl type ref prev name init expr literal type number decl type ref prev name init expr literal type number decl type ref prev name for control init decl type name name init expr literal type number condition expr name operator name incr expr operator name block for control init decl type name name init expr name operator literal type number condition expr name operator name incr expr operator name block if condition expr name name index expr name operator name name index expr name then block type pseudo continue expr_stmt expr call name argument_list argument expr name name index expr name argument expr name name index expr name operator expr name operator call name argument_list if condition expr name operator name then block type pseudo expr_stmt expr name operator name operator expr name operator name operator expr name operator name expr_stmt expr call name argument_list argument expr name name index expr name argument expr name name index expr name expr_stmt expr call name argument_list argument expr name operator expr call name argument_list argument expr name operator expr call name argument_list argument expr name 
