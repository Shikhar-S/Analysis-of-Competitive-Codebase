include directive file using namespace name define directive macro name value define directive macro name value define directive macro name value define directive macro name value typedef type name name name typedef type name name argument_list type generic argument expr name argument expr name name typedef type name name name name decl_stmt decl type name name decl_stmt decl type name name name index expr literal type number decl type ref prev name name index expr literal type number decl_stmt decl type name name name index expr literal type number function specifier type name name parameter_list block expr_stmt expr name name index expr literal type number operator literal type number decl_stmt decl type name name init expr literal type number for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block if condition expr name name index expr name operator literal type char then block type pseudo expr_stmt expr name name index expr name operator else block type pseudo expr_stmt expr name name index expr name operator if condition expr name name index expr name operator literal type char operator name name index expr name operator literal type number then block type pseudo expr_stmt expr name operator name operator literal type number operator expr name name index expr name operator literal type number operator literal type number else block type pseudo expr_stmt expr name name index expr name operator literal type number operator name name index expr name for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block type pseudo expr_stmt expr name name index expr name operator name name index expr operator name operator name operator operator name comment type line comment type line comment type line expr_stmt expr name name index expr literal type number operator literal type number decl_stmt decl type name name init expr literal type number for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block if condition expr name name index expr name operator literal type char then block type pseudo expr_stmt expr name name index expr name operator else block type pseudo expr_stmt expr name name index expr name operator expr_stmt expr name name index expr name operator literal type number operator name name index expr name if condition expr operator name name index expr name then block type pseudo expr_stmt expr name operator comment type line comment type line return expr name function type name name parameter_list block expr_stmt expr call name argument_list argument expr literal type string argument expr operator name expr_stmt expr call name argument_list argument expr literal type string argument expr name decl_stmt decl type name name init expr literal type number for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block type pseudo if condition expr name name index expr name operator literal type char then block type pseudo expr_stmt expr name operator else block type pseudo expr_stmt expr name operator if condition expr name then block expr_stmt expr call name argument_list argument expr literal type string return expr literal type number decl_stmt decl type name name init expr call name argument_list decl type ref prev name init expr literal type number decl type ref prev name init expr literal type number comment type line for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block type pseudo for control init decl type name name init expr name operator literal type number condition expr name operator name incr expr name operator block if condition expr name name index expr name operator name name index expr name then block type pseudo continue expr_stmt expr call name argument_list argument expr name name index expr name argument expr name name index expr name decl_stmt decl type name name init expr call name argument_list if condition expr name operator name then block expr_stmt expr name operator name expr_stmt expr name operator name expr_stmt expr name operator name expr_stmt expr call name argument_list argument expr name name index expr name argument expr name name index expr name expr_stmt expr call name argument_list argument expr literal type string argument expr name argument expr name operator literal type number argument expr name operator literal type number return expr literal type number 
