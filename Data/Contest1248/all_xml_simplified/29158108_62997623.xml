comment type block pragma directive name name name literal name include directive file include directive file include directive file include directive file include directive file include directive file include directive file include directive file include directive file include directive file include directive file include directive file include directive file include directive file comment type block comment type line define directive macro name parameter_list parameter type name parameter type name parameter type name value define directive macro name value define directive macro name value define directive macro name value define directive macro name parameter_list parameter type name value decl_stmt decl type specifier name name init expr call name argument_list argument expr operator literal type number using namespace name typedef type name name argument_list type generic argument expr name argument expr name name typedef type name name name typedef type name name argument_list type generic argument expr name argument expr name name typedef type name name argument_list type generic argument expr name name comment type line comment type line comment type line decl_stmt decl type specifier name name init expr literal type number decl type ref prev name init expr operator literal type number decl_stmt decl type specifier name name init expr literal type number decl_stmt decl type name name decl type ref prev name decl type ref prev name init expr literal type number operator literal type number decl type ref prev name name index expr name index expr literal type number index expr literal type number decl type ref prev name name index expr name index expr literal type number index expr literal type number function type name name parameter_list parameter decl type name name init expr literal type number parameter decl type name name init expr literal type number parameter decl type name name init expr literal type number block if condition expr name operator name then block type pseudo return expr literal type number decl_stmt decl type name modifier name init expr name name index expr name index expr name index expr name if condition expr operator name then block type pseudo return expr name expr_stmt expr name operator literal type number if condition expr name operator literal type number operator name operator literal type number then block type pseudo expr_stmt expr name operator call name argument_list argument expr name operator literal type number argument expr literal type number argument expr name operator name operator expr name operator name elseif if condition expr name operator literal type number operator name operator literal type number then block type pseudo expr_stmt expr name operator call name argument_list argument expr name operator literal type number argument expr literal type number argument expr name operator name operator expr name operator name else block expr_stmt expr name operator call name argument_list argument expr name operator literal type number argument expr literal type number argument expr name operator name operator expr name operator name expr_stmt expr name operator call name argument_list argument expr name operator literal type number argument expr literal type number argument expr name operator name operator expr name operator name return expr name function type name name parameter_list parameter decl type name name init expr literal type number parameter decl type name name init expr literal type number parameter decl type name name init expr literal type number block if condition expr name operator name then block type pseudo return expr literal type number decl_stmt decl type name modifier name init expr name name index expr name index expr name index expr name if condition expr operator name then block type pseudo return expr name expr_stmt expr name operator literal type number if condition expr name operator literal type number operator name operator literal type number then block type pseudo expr_stmt expr name operator call name argument_list argument expr name operator literal type number argument expr literal type number argument expr name operator name operator expr name operator name elseif if condition expr name operator literal type number operator name operator literal type number then block type pseudo expr_stmt expr name operator call name argument_list argument expr name operator literal type number argument expr literal type number argument expr name operator name operator expr name operator name else block expr_stmt expr name operator call name argument_list argument expr name operator literal type number argument expr literal type number argument expr name operator name operator expr name operator name expr_stmt expr name operator call name argument_list argument expr name operator literal type number argument expr literal type number argument expr name operator name operator expr name operator name return expr name function type name name parameter_list block comment type line comment type line comment type line expr_stmt expr name expr_stmt expr name operator name operator name expr_stmt expr call name argument_list argument expr name argument expr operator literal type number argument expr sizeof name expr_stmt expr call name argument_list argument expr name argument expr operator literal type number argument expr sizeof name decl_stmt decl type name name init expr operator call name argument_list operator literal type number operator call name argument_list operator operator name expr_stmt expr name operator operator name operator name operator name operator operator name return expr literal type number 
