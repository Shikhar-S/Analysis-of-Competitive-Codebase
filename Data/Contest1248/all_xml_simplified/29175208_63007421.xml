include directive file using namespace name decl_stmt decl type specifier name name init expr literal type number operator literal type number decl_stmt decl type name name decl type ref prev name decl type ref prev name decl type ref prev name decl type ref prev name decl type ref prev name decl type ref prev name name index expr name decl type ref prev name name index expr name decl type ref prev name name index expr name decl type ref prev name name index expr name decl type ref prev name name index expr name decl type ref prev name name index expr name decl type ref prev name name index expr name decl type ref prev name name index expr name decl_stmt decl type name name name index expr name decl type ref prev name name index expr name function type name name parameter_list parameter decl type name name parameter decl type name name block expr_stmt expr name name index expr operator name operator name expr_stmt expr name name index expr name operator name name index expr name expr_stmt expr name name index expr name operator name function type name name parameter_list parameter decl type name name block expr_stmt expr name name index expr name name index expr operator name operator name operator literal type boolean expr_stmt expr name name index expr name operator name name index expr name operator operator name for control init decl type name name init expr name name index expr name condition expr name incr expr name operator name name index expr name block type pseudo if condition expr operator name name index expr name name index expr name then block expr_stmt expr call name argument_list argument expr name name index expr name expr_stmt expr name name index expr name operator call name argument_list argument expr name name index expr name name index expr name argument expr name name index expr name elseif if condition expr name name index expr name name index expr name then block type pseudo expr_stmt expr name name index expr name operator call name argument_list argument expr name name index expr name argument expr name name index expr name name index expr name if condition expr name name index expr name operator name name index expr name then block expr_stmt expr operator name while condition expr literal type boolean block expr_stmt expr name name index expr name name index expr name operator name expr_stmt expr name name index expr name name index expr name operator literal type boolean if condition expr name name index expr name operator operator name then block type pseudo break function type name name parameter_list block expr_stmt expr call name name operator name argument_list argument expr literal type boolean decl_stmt decl type name name for control init expr name operator name condition expr name operator incr block expr_stmt expr name operator name operator name for control init decl type name name decl type ref prev name decl type ref prev name init expr literal type number condition expr name operator name operator name operator name operator name incr expr call name argument_list argument expr name argument expr name operator expr name operator block type pseudo empty_stmt for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block type pseudo if condition expr operator name name index expr name then block type pseudo expr_stmt expr call name argument_list argument expr name for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block type pseudo for control init decl type name name init expr name name index expr name condition expr name incr expr name operator name name index expr name block type pseudo expr_stmt expr name name index expr name name index expr name operator name name index expr name name index expr name operator name name index expr name if condition expr name operator literal type number then block type pseudo for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block type pseudo if condition expr name name index expr name operator literal type number then block decl_stmt decl type name name init expr literal type number for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block type pseudo if condition expr name name index expr name operator name then block type pseudo expr_stmt expr name operator expr_stmt expr name operator literal type string expr_stmt expr name operator name operator literal type string operator name operator name operator name for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block type pseudo if condition expr name name index expr name operator name then block type pseudo expr_stmt expr name operator name operator literal type string expr_stmt expr name operator name for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block type pseudo if condition expr name name index expr name operator name then block type pseudo expr_stmt expr name operator name operator literal type string expr_stmt expr name operator name expr_stmt expr name name index expr literal type number operator literal type number break if condition expr name name index expr literal type number operator name then block type pseudo expr_stmt expr name operator literal type string operator name for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block type pseudo expr_stmt expr name name index expr name operator name name index expr name operator name name index expr name operator name name index expr name operator name name index expr name operator literal type number expr_stmt expr name operator name operator name operator name operator literal type number return expr literal type number 
