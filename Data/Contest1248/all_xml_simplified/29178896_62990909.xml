include directive file using namespace name comment type line define directive macro name parameter_list parameter type name parameter type name parameter type name parameter type name parameter type modifier value define directive macro name parameter_list parameter type name parameter type name value define directive macro name parameter_list parameter type name parameter type name parameter type name value define directive macro name parameter_list parameter type modifier value define directive macro name parameter_list parameter type name value ifndef directive name define directive macro name parameter_list parameter type modifier value else directive define directive macro name parameter_list parameter type modifier endif directive comment type line function template parameter_list parameter type name name specifier type name name parameter_list parameter decl type name modifier name parameter decl type name name block if condition expr name operator name then block expr_stmt expr name operator name return expr literal type number return expr literal type number function template parameter_list parameter type name name specifier type name name parameter_list parameter decl type name modifier name parameter decl type name name block if condition expr name operator name then block expr_stmt expr name operator name return expr literal type number return expr literal type number function type name name parameter_list block expr_stmt expr name operator literal type char function template parameter_list parameter type name name parameter type name modifier name type name name parameter_list parameter decl type name name parameter decl type name modifier name block expr_stmt expr name operator literal type char operator name expr_stmt expr call name argument_list argument expr name operator comment type line struct name block public type default constructor name parameter_list block expr_stmt expr call name name operator name argument_list argument expr literal type null expr_stmt expr call name name operator name argument_list argument expr literal type boolean expr_stmt expr name operator name operator call name argument_list argument expr literal type number decl name comment type line struct template parameter_list parameter type specifier name name init expr literal type number name block public type default private using name init type name public decl_stmt decl type name name constructor specifier name parameter_list parameter decl type name name init expr literal type number noexcept macro name argument_list argument literal type number block expr_stmt expr specifier friend function type operator type name modifier name name parameter_list parameter decl type name modifier name parameter decl type name modifier name noexcept block name expr_stmt expr operator name name operator name name name operator name expr_stmt expr operator name if condition expr name name operator name operator literal type number then block type pseudo name name operator name expr_stmt expr operator name return expr name expr_stmt expr specifier friend function type operator type name modifier name name parameter_list parameter decl type name modifier name parameter decl type name name noexcept block return expr name operator name name operator name function type operator specifier type name name name parameter_list parameter decl type specifier name name noexcept block return expr call name argument_list argument expr operator name operator name function type operator specifier type name modifier name name parameter_list parameter decl type specifier name name noexcept block if condition expr operator name operator name name operator name operator operator name then block type pseudo expr_stmt expr name operator name return expr operator name function type operator specifier type name name name parameter_list parameter decl type specifier name name noexcept block return expr call name argument_list argument expr operator name operator name function type operator specifier type name modifier name name parameter_list parameter decl type specifier name name noexcept block if condition expr operator name operator name operator name name operator name operator operator name then block type pseudo expr_stmt expr name operator name return expr operator name function type operator specifier type name name name parameter_list parameter decl type specifier name name noexcept block return expr call name argument_list argument expr operator name operator name function type operator specifier type name modifier name name parameter_list parameter decl type specifier name name noexcept block expr_stmt expr name operator name operator name name operator name operator name return expr operator name function type operator specifier type name name name parameter_list parameter decl type specifier name name noexcept block return expr call name argument_list argument expr operator name operator name function type operator specifier type name modifier name name parameter_list parameter decl type specifier name name noexcept block return expr operator name operator call name name operator name argument_list function specifier type name name parameter_list specifier noexcept block decl_stmt decl type name name init expr name decl type ref prev name init expr name decl type ref prev name init expr literal type number decl type ref prev name init expr literal type number decl type ref prev name init expr literal type number while condition expr name block expr_stmt expr name operator name operator name expr_stmt expr name operator name operator name expr_stmt expr call name argument_list argument expr name argument expr name expr_stmt expr name operator name operator name expr_stmt expr call name argument_list argument expr name argument expr name return expr call name argument_list argument expr name function specifier type name name parameter_list parameter decl type name name noexcept block decl_stmt decl type name name argument_list argument expr literal type number decl type ref prev name argument_list argument expr operator name for control init condition expr name incr expr name operator literal type number block if condition expr name operator literal type number then block type pseudo expr_stmt expr name operator name expr_stmt expr name operator name return expr name using name init type name name argument_list type generic decl_stmt decl type name name name index expr literal type number function type name name parameter_list block decl_stmt decl type name name decl type ref prev name expr_stmt expr name operator name operator name expr_stmt expr name name index expr literal type number operator name name index expr literal type number operator call name argument_list argument expr literal type number macro name argument_list argument argument literal type number argument literal type number expr_stmt expr name name index expr name operator name name index expr name operator literal type number operator name name index expr name operator literal type number expr_stmt expr name operator operator name name index expr name operator call name argument_list argument expr literal type number operator operator call name argument_list argument expr literal type number operator name name index expr name operator call name argument_list argument expr literal type number operator literal type char 
