/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author ExplodingFreeze
 */

#include <iostream>
#include <fstream>

#include <bits/stdc++.h>
#define int long long
#define f(i,a,b) for(int i=(a);i<(b);i++)
const int MOD=1e9+7;
using pii=std::pair<int,int>;
//mt19937 rng(chrono::steady_clock::now().time_since_epoch().count()); <-- PUT IN main()/solve()!

using namespace std;

int k,n;
string s,t;
class B2CharacterSwapHardVersion {
public:
	void solve(std::istream& in, std::ostream& out) {
		in >> k;
		f(cases,0,k)
		{
			in >> n >> s >> t;
			vector<pii> ans;
			int freq[26]={0};
			f(i,0,n)
			{
				freq[s[i]-'a']++;
				freq[t[i]-'a']++;
			}
			int possible=1;
			f(i,0,26)
				if(freq[i]&1)
					possible=0;
			if(!possible)
			{
				out << "No\n";
				continue;
			}
			f(i,0,n-1)
			{
				if(s[i]==t[i])
					continue;
				int spos=-1,tpos=-1;
				f(j,i+1,n)
					if(s[j]==s[i])
					{
						spos=j;
						break;
					}
				if(spos!=-1)
				{
					ans.push_back({spos,i});
					swap(s[spos],t[i]);
					continue;
				}
				f(j,i+1,n)
					if(t[j]==s[i])
					{
						tpos=j;
						break;
					}
				assert(tpos!=-1);
				ans.push_back({tpos,tpos});
				ans.push_back({tpos,i});
				swap(s[tpos],t[tpos]);
				swap(s[tpos],t[i]);
			}
			out << "Yes\n";
			out << ans.size() << "\n";
			for(auto p : ans)
				out << p.first+1 << " " << p.second+1 << "\n";
		}
	}
};


int32_t main() {
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	B2CharacterSwapHardVersion solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
