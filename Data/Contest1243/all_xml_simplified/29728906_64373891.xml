pragma directive name name name literal name include directive file using namespace name typedef type name name name typedef type name name name typedef type name name argument_list type generic argument expr name argument expr name name typedef type name name argument_list type generic argument expr name argument expr name name typedef type name name argument_list type generic argument expr name argument expr name name typedef type name name argument_list type generic argument expr name argument expr name name typedef type name name argument_list type generic argument expr name argument expr name name define directive macro name parameter_list parameter type name value define directive macro name parameter_list parameter type name value define directive macro name parameter_list parameter type name value define directive macro name value define directive macro name value define directive macro name value define directive macro name value define directive macro name value define directive macro name parameter_list parameter type name value define directive macro name parameter_list parameter type name value define directive macro name parameter_list parameter type name value define directive macro name value define directive macro name value define directive macro name parameter_list parameter type name value define directive macro name value function specifier type name name parameter_list block decl_stmt decl type name name expr_stmt expr name operator name return expr name decl_stmt decl type specifier name name init expr literal type number operator literal type number decl_stmt decl type specifier name name init expr literal type number operator literal type number decl_stmt decl type specifier name name init expr literal type number decl_stmt decl type specifier name name init expr literal type number function type name name parameter_list parameter decl type name name parameter decl type name name block return expr operator ternary condition expr operator name then expr literal type number else expr operator ternary condition expr name operator literal type number then expr operator name operator call name argument_list argument expr name operator name operator name argument expr name operator literal type number operator operator name else expr call name argument_list argument expr name operator name operator name argument expr name operator literal type number operator operator decl_stmt decl type name name name index expr name function type name name parameter_list block expr_stmt expr name comment type line comment type line comment type line decl_stmt decl type name name expr_stmt expr name operator name while condition expr name operator block decl_stmt decl type name name expr_stmt expr name operator name for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block expr_stmt expr name operator name name index expr name decl_stmt decl type name name init expr literal type number for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block decl_stmt decl type name name init expr literal type number for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block if condition expr name name index expr name operator name then block expr_stmt expr name operator if condition expr name operator name then block expr_stmt expr name operator call name argument_list argument expr name argument expr name expr_stmt expr name operator name operator name return expr literal type number 
