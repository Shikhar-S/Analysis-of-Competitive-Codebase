include directive file define directive macro name value define directive macro name value using namespace name using name init type name name using name init type name name argument_list type generic argument expr name argument expr name decl_stmt decl type name specifier name init expr literal type number decl_stmt decl type name name name index expr name decl type ref prev name name index expr name function type name name parameter_list block expr_stmt expr call name name operator name argument_list argument expr literal type boolean operator expr call name name operator name argument_list argument expr literal type null decl_stmt decl type name name expr_stmt expr name operator name while condition expr name operator block expr_stmt expr call name argument_list argument expr name argument expr literal type number argument expr sizeof argument_list argument expr name expr_stmt expr call name argument_list argument expr name argument expr literal type number argument expr sizeof argument_list argument expr name decl_stmt decl type name name expr_stmt expr name operator name decl_stmt decl type name name decl type ref prev name expr_stmt expr name operator name operator name for control init decl type name name range expr name block type pseudo expr_stmt expr name name index expr name operator for control init decl type name name range expr name block type pseudo expr_stmt expr name name index expr name operator decl_stmt decl type name name argument_list type generic argument expr name name decl_stmt decl type name name init expr literal type boolean for control init decl type name name init expr literal type number condition expr name operator name operator name operator call name name operator name argument_list operator literal type number incr expr name operator block if condition expr operator name name index expr name operator name name index expr name operator operator literal type number operator literal type number then block expr_stmt expr name operator literal type string expr_stmt expr name operator literal type boolean if condition expr operator name then block type pseudo continue for control init decl type name name init expr literal type number condition expr name operator name operator name incr expr name operator block if condition expr name name index expr name operator name name index expr name then block expr_stmt expr name name index expr operator name operator name name index expr name operator expr_stmt expr name name index expr operator name operator name name index expr name operator continue decl_stmt decl type name name init expr lambda capture argument modifier parameter_list parameter decl type name name parameter decl type name name block expr_stmt expr name name index expr operator name operator name name index expr name operator expr_stmt expr name name index expr operator name operator name name index expr name operator expr_stmt expr name name index expr operator name operator name name index expr name operator expr_stmt expr name name index expr operator name operator name name index expr name operator expr_stmt expr call name argument_list argument expr name name index expr name argument expr name name index expr name expr_stmt expr call name name operator name argument_list argument expr name operator literal type number argument expr name operator literal type number if condition expr name name index expr operator name operator name name index expr name operator literal type number operator name name index expr operator name operator name name index expr name operator literal type number then block expr_stmt expr name operator literal type boolean break decl_stmt decl type name name init expr literal type boolean if condition expr name name index expr operator name operator name name index expr name operator literal type number then block for control init decl type name name init expr name operator literal type number condition expr name operator name incr expr name operator block if condition expr name name index expr name operator name name index expr name operator name name index expr name operator name name index expr name then block expr_stmt expr call name argument_list argument expr name argument expr name expr_stmt expr name operator literal type boolean break if condition expr operator name then block if condition expr name name index expr operator name operator name name index expr name operator literal type number then block for control init decl type name name init expr name operator literal type number condition expr name operator name incr expr name operator block if condition expr name name index expr name operator name name index expr name operator name name index expr name operator name name index expr name then block expr_stmt expr call name argument_list argument expr name argument expr name expr_stmt expr name operator literal type boolean break if condition expr operator name then block expr_stmt expr name operator literal type boolean break expr_stmt expr name name index expr operator name operator name name index expr name operator expr_stmt expr name name index expr operator name operator name name index expr name operator if condition expr call name name operator name argument_list operator literal type number then block type pseudo expr_stmt expr name operator literal type boolean if condition expr name then block type pseudo expr_stmt expr name operator literal type string else block type pseudo expr_stmt expr name operator literal type string 
