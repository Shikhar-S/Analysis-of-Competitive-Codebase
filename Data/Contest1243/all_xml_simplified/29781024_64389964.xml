include directive file using namespace name using name init type name name using name init type name name name using name init type name name using name init type name name argument_list type generic argument expr name using name init type name name argument_list type generic argument expr name using name init type name name argument_list type generic argument expr name using name init type name name argument_list type generic argument expr name using name init type name name argument_list type generic argument expr name using name init type name name argument_list type generic argument expr name using name init type name name argument_list type generic argument expr name using name init type name name argument_list type generic argument expr name argument expr name using name init type name name argument_list type generic argument expr name define directive macro name parameter_list parameter type name parameter type name value define directive macro name parameter_list parameter type name parameter type name value define directive macro name parameter_list parameter type name parameter type name parameter type name value define directive macro name parameter_list parameter type name parameter type name parameter type name value define directive macro name parameter_list parameter type name value define directive macro name parameter_list parameter type name value decl_stmt decl type specifier name name init expr literal type number decl_stmt decl type specifier name name init expr literal type number decl_stmt decl type specifier name name init expr literal type number decl_stmt decl type specifier name name init expr literal type number function specifier type name name parameter_list parameter decl type name name parameter decl type name name block return expr ternary condition expr name then expr call name argument_list argument expr name argument expr name operator name else expr name function specifier type name name parameter_list parameter decl type name name parameter decl type name name block return expr name operator call name argument_list argument expr name argument expr name operator name function specifier type name name parameter_list parameter decl type name name parameter decl type name name block decl_stmt decl type name name init expr literal type number while condition expr name block if condition expr name operator literal type number then block type pseudo expr_stmt expr name operator name expr_stmt expr name operator name expr_stmt expr name operator literal type number return expr name function specifier type name name parameter_list parameter decl type name name parameter decl type name name parameter decl type name name init expr name block decl_stmt decl type name name init expr literal type number while condition expr name block if condition expr name operator literal type number then block type pseudo expr_stmt expr name operator name expr_stmt expr name operator name expr_stmt expr name operator name expr_stmt expr name operator name expr_stmt expr name operator literal type number return expr name function template parameter_list parameter type name name parameter type name name specifier type name name parameter_list parameter decl type name modifier name parameter decl type specifier name modifier name block if condition expr name operator name then block expr_stmt expr name operator name return expr literal type number return expr literal type number function template parameter_list parameter type name name parameter type name name specifier type name name parameter_list parameter decl type name modifier name parameter decl type specifier name modifier name block if condition expr name operator name then block expr_stmt expr name operator name return expr literal type number return expr literal type number ifdef directive name include directive file else directive define directive macro name parameter_list parameter type modifier value endif directive comment type line function type name name argument_list type generic argument expr name name argument_list type generic argument expr name argument expr name name parameter_list parameter decl type name name block decl_stmt decl type name name argument_list type generic argument expr name name argument_list type generic argument expr name argument expr name name if condition expr name operator literal type number then block for control init decl type name name init expr literal type number condition expr name operator name operator name incr expr name operator block decl_stmt decl type name name init expr literal type number while condition expr name operator name operator literal type number block expr_stmt expr name operator expr_stmt expr name operator name if condition expr name then block type pseudo expr_stmt expr call name name operator name argument_list argument expr name argument expr name if condition expr name operator literal type number then block type pseudo expr_stmt expr call name name operator name argument_list argument expr name argument expr literal type number expr_stmt expr call name argument_list argument expr call name name operator name argument_list argument expr call name name operator name argument_list return expr name function type name name parameter_list parameter decl type name name block expr_stmt expr name operator name operator name function type name name parameter_list block expr_stmt expr call name name operator name argument_list argument expr literal type number expr_stmt expr call name name operator name argument_list argument expr literal type boolean expr_stmt expr name operator name operator call name argument_list argument expr literal type number decl_stmt decl type name name expr_stmt expr name operator name decl_stmt decl type name name init expr call name argument_list argument expr name if condition expr call name argument_list argument expr name operator literal type number then block expr_stmt expr call name argument_list argument expr literal type number elseif if condition expr call name argument_list argument expr name operator literal type number then block expr_stmt expr call name argument_list argument expr name name index expr literal type number operator name else block expr_stmt expr call name argument_list argument expr literal type number return expr literal type number 
