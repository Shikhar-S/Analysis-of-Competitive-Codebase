include directive file using namespace name function type name name parameter_list parameter decl type name name block return expr literal type char operator name operator literal type char function type name name parameter_list parameter decl type specifier name modifier name block return expr call name argument_list argument expr operator name operator name function type name name parameter_list parameter decl type name name block return expr operator ternary condition expr name then expr literal type string else expr literal type string operator function template parameter_list parameter type name name parameter type name name type name name parameter_list parameter decl type name name argument_list type generic argument expr name argument expr name name block return expr literal type string operator call name argument_list argument expr name name operator name operator literal type string operator call name argument_list argument expr name name operator name operator literal type string function template parameter_list parameter type name name type name name parameter_list parameter decl type name name block decl_stmt decl type name name init expr literal type boolean decl_stmt decl type name name init expr literal type string for control init decl type specifier specifier modifier name range expr name block if condition expr operator name then block expr_stmt expr name operator literal type string expr_stmt expr name operator literal type boolean expr_stmt expr name operator call name argument_list argument expr name expr_stmt expr name operator literal type string return expr name function type name name parameter_list block expr_stmt expr name operator name function template parameter_list parameter type name name parameter type name modifier name type name name parameter_list parameter decl type name name parameter decl type name modifier name block expr_stmt expr name operator literal type string operator call name argument_list argument expr name expr_stmt expr call name argument_list argument expr name operator ifdef directive name define directive macro name parameter_list parameter type modifier value else directive define directive macro name parameter_list parameter type modifier value endif directive function type name name parameter_list block decl_stmt decl type name name decl type ref prev name expr_stmt expr name operator name operator name decl_stmt decl type name name argument_list type generic argument expr name name argument_list type generic argument expr name name argument_list argument expr name operator literal type number for control init decl type name name init expr literal type number condition expr name operator name incr expr operator name block decl_stmt decl type name name decl type ref prev name expr_stmt expr name operator name operator name expr_stmt expr name name index expr name operator call name argument_list argument expr name expr_stmt expr name name index expr name operator call name argument_list argument expr name decl_stmt decl type name name argument_list type generic argument expr name name for control init decl type name name init expr literal type number condition expr name operator name incr expr operator name block expr_stmt expr call name name operator name argument_list argument expr name decl_stmt decl type name name argument_list type generic argument expr name operator name operator name init expr lambda capture argument modifier parameter_list parameter decl type name name block decl_stmt decl type name name argument_list type generic argument expr name name for control init decl type name name range expr name block if condition expr operator name name index expr name operator call name argument_list argument expr name then block expr_stmt expr call name name operator name argument_list argument expr name for control init decl type name name range expr name block expr_stmt expr call name name operator name argument_list argument expr name for control init decl type name name range expr name block expr_stmt expr call name argument_list argument expr name decl_stmt decl type name name init expr literal type number for control init decl type name name init expr literal type number condition expr name operator name incr expr operator name block if condition expr call name name operator name argument_list argument expr name then block expr_stmt expr call name name operator name argument_list argument expr name expr_stmt expr call name argument_list argument expr name expr_stmt expr operator name expr_stmt expr name operator name operator literal type number operator literal type string function type name name parameter_list block expr_stmt expr call name name operator name argument_list argument expr literal type number expr_stmt expr call name name operator name argument_list argument expr literal type number expr_stmt expr call name name operator name argument_list argument expr literal type number expr_stmt expr call name argument_list return expr literal type number 
