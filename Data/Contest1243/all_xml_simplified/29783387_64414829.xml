include directive file pragma directive name name name literal name pragma directive name name name literal name pragma directive name name name literal name pragma directive name name name literal name pragma directive name name name literal name using namespace name define directive macro name value define directive macro name value typedef type name name name typedef type name name name decl_stmt decl type name name argument_list argument expr call name argument_list argument expr name decl_stmt decl type specifier name name init expr literal type number operator literal type number decl_stmt decl type specifier name name init expr literal type number operator literal type number decl_stmt decl type specifier name name init expr literal type number decl_stmt decl type specifier name name init expr literal type number function type name name parameter_list parameter decl type name name parameter decl type name name parameter decl type name name parameter decl type name name argument_list type generic argument expr name name argument_list type generic argument expr name argument expr name modifier name block decl_stmt decl type name name argument_list type generic argument expr name name argument_list type generic argument expr name name argument_list type generic argument expr name argument expr name name argument_list argument expr literal type number argument expr call name name argument_list type generic argument expr name name argument_list type generic argument expr name argument expr name argument_list for control init decl type name name init expr literal type number condition expr name operator name incr expr operator name block expr_stmt expr name name index expr name name index expr name operator literal type char operator call name argument_list argument expr block expr name expr literal type number expr_stmt expr name name index expr name name index expr name operator literal type char operator call name argument_list argument expr block expr name expr literal type number decl_stmt decl type name name init expr literal type number for control init decl type name name init expr literal type number condition expr name operator literal type number incr expr operator name block type pseudo if condition expr name name index expr name operator call name argument_list operator literal type number then block type pseudo expr_stmt expr name operator literal type number if condition expr operator name then block type pseudo return expr literal type number for control init decl type name name init expr literal type number condition expr name operator literal type number incr expr operator name block comment type line expr_stmt expr call name argument_list argument expr name name index expr name operator call name argument_list argument expr name name index expr name operator call name argument_list for control init decl type name name init expr literal type number condition expr name operator name name index expr name operator call name argument_list incr expr name operator literal type number block if condition expr name name index expr name index expr name operator name operator name name index expr name index expr name operator literal type number operator name then block type pseudo continue if condition expr name name index expr name index expr name operator name operator name name index expr name index expr name operator literal type number operator name then block if condition expr name name index expr name name index expr name index expr name operator literal type number operator name operator name name index expr name name index expr name index expr name operator literal type number operator name then block decl_stmt decl type name name init expr name name index expr name index expr name operator literal type number operator name expr_stmt expr call name name operator name argument_list argument expr block expr name expr name for control init expr name operator name operator name name index expr name name index expr name operator literal type char block if condition expr name name operator name operator name operator name name operator name operator literal type number then block expr_stmt expr name name operator name operator literal type number break expr_stmt expr call name argument_list argument expr name name index expr name name index expr name operator literal type char operator call name argument_list argument expr name name index expr name name index expr name operator literal type char operator call name argument_list for control init expr name operator name operator name name index expr name name index expr name operator literal type char block if condition expr name name operator name operator name operator name name operator name operator literal type number then block expr_stmt expr name name operator name operator literal type number break expr_stmt expr call name argument_list argument expr name name index expr name name index expr name operator literal type char operator call name argument_list argument expr name name index expr name name index expr name operator literal type char operator call name argument_list expr_stmt expr call name argument_list argument expr name name index expr name argument expr name name index expr name decl_stmt decl type name name init expr name name index expr name index expr name operator name if condition expr name operator literal type number then block expr_stmt expr call name name operator name argument_list argument expr block expr name name index expr name index expr name operator literal type number operator name expr name name index expr name index expr name operator name decl_stmt decl type name name init expr name name index expr name index expr name operator literal type number operator name decl_stmt decl type name name init expr name name index expr name index expr name operator name for control init expr name operator name operator name name index expr name name index expr name operator literal type char block if condition expr name name operator name operator name operator name name operator name operator literal type number then block expr_stmt expr name name operator name operator name expr_stmt expr name name operator name operator literal type number break expr_stmt expr call name argument_list argument expr name name index expr name name index expr name operator literal type char operator call name argument_list argument expr name name index expr name name index expr name operator literal type char operator call name argument_list for control init expr name operator name operator name name index expr name name index expr name operator literal type char block if condition expr name name operator name operator name operator name name operator name operator literal type number then block expr_stmt expr name name operator name operator name expr_stmt expr name name operator name operator literal type number break expr_stmt expr call name argument_list argument expr name name index expr name name index expr name operator literal type char operator call name argument_list argument expr name name index expr name name index expr name operator literal type char operator call name argument_list expr_stmt expr call name argument_list argument expr name name index expr name argument expr name name index expr name else block expr_stmt expr call name name operator name argument_list argument expr block expr name name index expr name index expr name operator name expr name name index expr name index expr name operator literal type number operator name decl_stmt decl type name name init expr name name index expr name index expr name operator name decl_stmt decl type name name init expr name name index expr name index expr name operator literal type number operator name for control init expr name operator name operator name name index expr name name index expr name operator literal type char block if condition expr name name operator name operator name operator name name operator name operator literal type number then block expr_stmt expr name name operator name operator name expr_stmt expr name name operator name operator literal type number break expr_stmt expr call name argument_list argument expr name name index expr name name index expr name operator literal type char operator call name argument_list argument expr name name index expr name name index expr name operator literal type char operator call name argument_list for control init expr name operator name operator name name index expr name name index expr name operator literal type char block if condition expr name name operator name operator name operator name name operator name operator literal type number then block expr_stmt expr name name operator name operator name expr_stmt expr name name operator name operator literal type number break expr_stmt expr call name argument_list argument expr name name index expr name name index expr name operator literal type char operator call name argument_list argument expr name name index expr name name index expr name operator literal type char operator call name argument_list expr_stmt expr call name argument_list argument expr name name index expr name argument expr name name index expr name return expr literal type number function type name name parameter_list block for control init decl type name name init expr literal type number condition expr name operator literal type number incr expr operator name block for control init decl type name name init expr literal type number condition expr name operator literal type number incr expr operator name block decl_stmt decl type name name decl type ref prev name decl type ref prev name decl type ref prev name for control init decl type name name init expr literal type number condition expr name operator name incr expr operator name block expr_stmt expr name operator literal type char operator call name argument_list operator literal type number expr_stmt expr name operator literal type char operator call name argument_list operator literal type number expr_stmt expr name operator name expr_stmt expr name operator name decl_stmt decl type name name argument_list type generic argument expr name name argument_list type generic argument expr name argument expr name name if condition expr call name argument_list argument expr name argument expr name argument expr name argument expr name then block if condition expr call name name operator name argument_list operator literal type number operator name then block type pseudo expr_stmt expr name operator literal type string operator name for control init decl type name name range expr name block expr_stmt expr call name argument_list argument expr name name index expr name name operator name argument expr name name index expr name name operator name if condition expr name operator name then block expr_stmt expr name operator literal type string operator name expr_stmt expr name operator name operator literal type string operator name operator literal type string operator name operator name expr_stmt expr name operator call name name operator name argument_list operator name for control init decl type name name range expr name block type pseudo expr_stmt expr name operator name name operator name operator literal type number operator literal type string operator name name operator name operator literal type number operator name return function type name name parameter_list block expr_stmt expr call name name operator name argument_list argument expr literal type boolean expr_stmt expr call name name operator name argument_list argument expr literal type number ifndef directive name expr_stmt expr call name argument_list argument expr literal type string argument expr literal type string argument expr name expr_stmt expr call name argument_list argument expr literal type string argument expr literal type string argument expr name endif directive decl_stmt decl type name name expr_stmt expr name operator name while condition expr name operator block decl_stmt decl type name name decl_stmt decl type name name decl type ref prev name expr_stmt expr name operator name operator name operator name decl_stmt decl type name name argument_list type generic argument expr name name argument_list type generic argument expr name argument expr name name if condition expr operator call name argument_list argument expr name argument expr name argument expr name argument expr name then block type pseudo expr_stmt expr name operator literal type string else block expr_stmt expr name operator literal type string expr_stmt expr name operator call name name operator name argument_list operator literal type string for control init decl type name name range expr name block type pseudo expr_stmt expr name operator name name operator name operator literal type number operator literal type string operator name name operator name operator literal type number operator literal type string return expr literal type number 
