include directive file using namespace name typedef type name name name typedef type name name argument_list type generic argument expr name name typedef type name name argument_list type generic argument expr name argument expr name name define directive macro name value define directive macro name value define directive macro name value define directive macro name value define directive macro name value define directive macro name value define directive macro name value define directive macro name parameter_list parameter type name value define directive macro name parameter_list parameter type name parameter type name value define directive macro name parameter_list parameter type name value define directive macro name parameter_list parameter type name value define directive macro name parameter_list parameter type name parameter type name parameter type name value define directive macro name parameter_list parameter type name parameter type name parameter type name value decl_stmt decl type specifier name name init expr literal type number decl_stmt decl type name name decl type ref prev name decl_stmt decl type name name decl type ref prev name function type name name parameter_list block decl_stmt decl type name name argument_list type generic argument expr name name macro name argument_list argument argument literal type number argument if condition expr name name index expr name operator name name index expr name then block if condition expr name operator name operator literal type number then block type pseudo return expr literal type boolean decl_stmt decl type name name init expr literal type boolean macro name argument_list argument argument literal type number argument if condition expr name name index expr name operator name name index expr name operator name name index expr name operator name name index expr name then block expr_stmt expr call name name operator name argument_list argument expr name argument expr name expr_stmt expr call name argument_list argument expr name name index expr name argument expr name name index expr name expr_stmt expr name operator literal type boolean break if condition expr name then block type pseudo continue macro name argument_list argument argument literal type number argument if condition expr name name index expr name operator name name index expr name then block expr_stmt expr call name name operator name argument_list argument expr name operator literal type number argument expr name expr_stmt expr call name name operator name argument_list argument expr name operator literal type number argument expr name expr_stmt expr call name argument_list argument expr name name index expr name operator literal type number argument expr name name index expr name expr_stmt expr call name argument_list argument expr name name index expr name operator literal type number argument expr name name index expr name expr_stmt expr name operator literal type boolean break if condition expr operator name then block type pseudo return expr literal type boolean if condition expr call name argument_list argument expr name operator literal type number then block type pseudo return expr literal type boolean expr_stmt expr name operator literal type string operator name return expr literal type boolean function type name name parameter_list block expr_stmt expr call name name operator name argument_list argument expr literal type boolean expr_stmt expr call name name operator name argument_list argument expr name expr_stmt expr call name name operator name argument_list argument expr name expr_stmt expr name operator name while condition expr name operator block expr_stmt expr name operator name operator name operator name if condition expr operator call name argument_list then block type pseudo expr_stmt expr name operator literal type string operator name 
