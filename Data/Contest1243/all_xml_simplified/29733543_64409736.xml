include directive file using namespace name typedef type name name name typedef type name name argument_list type generic argument expr name name typedef type name name argument_list type generic argument expr name argument expr name name typedef type name name argument_list type generic argument expr name argument expr name name define directive macro name value function template parameter_list parameter type name name type name name parameter_list parameter decl type name name operator name name argument_list type generic argument expr name name block for control init decl type specifier specifier modifier name range expr name block type pseudo expr_stmt expr name name operator name operator name operator literal type string define directive macro name parameter_list parameter type name parameter type name value define directive macro name parameter_list parameter type name parameter type name value define directive macro name parameter_list parameter type name parameter type name parameter type name parameter type name value define directive macro name parameter_list parameter type name parameter type name parameter type name value function type name name parameter_list parameter decl type name name parameter decl type name name parameter decl type name name parameter decl type name name block macro name argument_list argument argument literal type number argument argument literal type number block if condition expr name operator name name index expr name then block type pseudo return expr name return expr operator literal type number function name parameter_list block ifndef directive name expr_stmt expr call name argument_list argument expr literal type string argument expr literal type string argument expr name comment type line endif directive decl_stmt decl type name name init expr literal type number expr_stmt expr name operator name while condition expr name operator block decl_stmt decl type name name expr_stmt expr name operator name decl_stmt decl type name name decl type ref prev name expr_stmt expr name operator name operator name decl_stmt decl type name name name index expr literal type number init expr block expr literal type number macro name argument_list argument argument block expr_stmt expr name name index expr name name index expr name operator literal type char operator expr_stmt expr name name index expr name name index expr name operator literal type char operator decl_stmt decl type name name init expr literal type boolean decl_stmt decl type name name init expr literal type number operator name macro name argument_list argument argument literal type number block if condition expr name name index expr name operator literal type number operator literal type number then block type pseudo expr_stmt expr name operator literal type boolean if condition expr operator name then block expr_stmt expr name operator literal type string operator name continue else block decl_stmt decl type name name argument_list type generic argument expr name name argument_list type generic argument expr name argument expr name name macro name argument_list argument argument block if condition expr name name index expr name operator name name index expr name then block decl_stmt decl type name name init expr call name argument_list argument expr name argument expr name argument expr name argument expr name name index expr name decl_stmt decl type name name init expr call name argument_list argument expr name argument expr name argument expr name argument expr name name index expr name if condition expr name operator operator literal type number operator name operator literal type number then block expr_stmt expr name operator expr_stmt expr call name name operator name argument_list argument expr block expr name expr name decl_stmt decl type name name init expr name name index expr name expr_stmt expr name name index expr name operator name name index expr name expr_stmt expr name name index expr name operator name elseif if condition expr name operator operator literal type number operator name operator literal type number then block expr_stmt expr name operator literal type number expr_stmt expr call name name operator name argument_list argument expr block expr name expr name operator literal type number decl_stmt decl type name name init expr name name index expr name expr_stmt expr name name index expr name operator name name index expr name operator literal type number expr_stmt expr name name index expr name operator literal type number operator name expr_stmt expr call name name operator name argument_list argument expr block expr name expr name operator literal type number expr_stmt expr name operator name name index expr name expr_stmt expr name name index expr name operator name name index expr name operator literal type number expr_stmt expr name name index expr name operator literal type number operator name else block expr_stmt expr name operator literal type boolean if condition expr operator name then block expr_stmt expr name operator literal type string operator name continue else block expr_stmt expr name operator literal type string operator name expr_stmt expr name operator call name name operator name argument_list operator name macro name argument_list argument argument expr_stmt expr name operator name name index expr name operator name operator literal type number operator literal type string operator name name index expr name operator name operator literal type number operator name 
