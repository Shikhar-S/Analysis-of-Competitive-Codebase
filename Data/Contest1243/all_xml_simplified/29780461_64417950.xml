include directive file using namespace name define directive macro name value define directive macro name parameter_list parameter type name parameter type name parameter type name value define directive macro name parameter_list parameter type name parameter type name parameter type name value function specifier type name name parameter_list block decl_stmt decl type name name init expr literal type number decl_stmt decl type name name init expr call name argument_list decl_stmt decl type name name init expr literal type number for control init condition expr operator call name argument_list argument expr name incr expr name operator call name argument_list block type pseudo if condition expr name operator literal type char then block type pseudo expr_stmt expr name operator literal type number for control init condition expr call name argument_list argument expr name incr expr name operator call name argument_list block type pseudo expr_stmt expr name operator name operator literal type number operator name operator literal type char return expr ternary condition expr name then expr operator name else expr name function type name name parameter_list parameter decl type name name block if condition expr name operator literal type number then block type pseudo expr_stmt expr call name argument_list argument expr literal type char operator expr name operator operator name if condition expr name operator literal type number then block type pseudo expr_stmt expr call name argument_list argument expr name operator literal type number expr_stmt expr call name argument_list argument expr name operator literal type number operator literal type char function type name name parameter_list parameter decl type name name block expr_stmt expr call name argument_list argument expr name expr_stmt expr call name argument_list argument expr literal type string function type name name parameter_list parameter decl type name name block expr_stmt expr call name argument_list argument expr name expr_stmt expr call name argument_list argument expr literal type char decl_stmt decl type specifier name name init expr literal type number decl type ref prev name init expr literal type number decl_stmt decl type name name decl type ref prev name decl type ref prev name name index expr name decl type ref prev name decl type ref prev name decl type ref prev name decl type ref prev name name index expr name struct name block public type default decl_stmt decl type name name decl type ref prev name decl name name index expr name operator literal type number function type name name parameter_list parameter decl type name name parameter decl type name name block expr_stmt expr name name index expr operator name operator operator name operator block expr name expr name name index expr name expr_stmt expr name name index expr name operator name expr_stmt expr name name index expr operator name operator operator name operator block expr name expr name name index expr name expr_stmt expr name name index expr name operator name decl_stmt decl type name name argument_list type generic argument expr name name decl_stmt decl type name name argument_list type generic argument expr name name decl type ref prev name decl_stmt decl type name name name argument_list type generic argument expr name operator name name function type name name parameter_list parameter decl type name name block expr_stmt expr call name name operator name argument_list expr_stmt expr call name name operator name argument_list macro name argument_list argument argument literal type number argument if condition expr name operator name then block type pseudo expr_stmt expr call name name operator name argument_list argument expr name expr_stmt expr call name name operator name argument_list argument expr name expr_stmt expr name name index expr name operator literal type number while condition expr call name name operator name argument_list block decl_stmt decl type name name init expr call name name operator name argument_list expr_stmt expr call name name operator name argument_list for control init decl type name name init expr name name index expr name condition expr name incr expr name operator name name index expr name operator name block decl_stmt decl type name name init expr name name index expr name operator name expr_stmt expr name operator call name name operator name argument_list argument expr name if condition expr name operator call name name operator name argument_list then block type pseudo expr_stmt expr call name name operator name argument_list argument expr name operator expr call name name operator name argument_list argument expr name for control init expr name operator call name name operator name argument_list condition expr name operator call name name operator name argument_list incr expr operator name block decl_stmt decl type name name init expr operator name expr_stmt expr name name index expr name operator literal type number expr_stmt expr call name name operator name argument_list argument expr name expr_stmt expr name operator name expr_stmt expr call name name operator name argument_list function type name name parameter_list block expr_stmt expr name operator call name argument_list expr_stmt expr name operator call name argument_list expr_stmt expr call name argument_list argument expr name argument expr operator literal type number argument expr sizeof argument_list argument expr name macro name argument_list argument argument literal type number argument block decl_stmt decl type name name init expr call name argument_list decl type ref prev name init expr call name argument_list expr_stmt expr call name argument_list argument expr name argument expr name decl_stmt decl type name name init expr literal type number macro name argument_list argument argument literal type number argument if condition expr name name index expr name operator operator literal type number then block expr_stmt expr operator name expr_stmt expr call name argument_list argument expr name expr_stmt expr name operator name operator literal type number 
