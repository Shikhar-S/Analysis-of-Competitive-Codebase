include directive file define directive macro name value define directive macro name value define directive macro name value define directive macro name parameter_list parameter type name value define directive macro name parameter_list parameter type name value define directive macro name parameter_list parameter type name value define directive macro name value define directive macro name value define directive macro name parameter_list parameter type name value define directive macro name parameter_list parameter type name value define directive macro name parameter_list parameter type name value define directive macro name parameter_list parameter type name parameter type name value define directive macro name parameter_list parameter type name parameter type name value define directive macro name value define directive macro name value define directive macro name value define directive macro name value define directive macro name parameter_list parameter type name parameter type name value define directive macro name parameter_list parameter type name parameter type name parameter type name value define directive macro name parameter_list parameter type name parameter type name parameter type name value define directive macro name parameter_list parameter type name parameter type name parameter type name value using namespace name decl_stmt decl type specifier name name init expr literal type number operator literal type number decl type ref prev name init expr literal type number decl_stmt decl type specifier name name init expr literal type number function template parameter_list parameter type name name specifier type name name parameter_list parameter decl type specifier name modifier name parameter decl type specifier name modifier name block return expr ternary condition expr name operator name then expr name else expr name function template parameter_list parameter type name name specifier type name name parameter_list parameter decl type specifier name modifier name parameter decl type specifier name modifier name block return expr ternary condition expr name operator name then expr name else expr name function specifier type name name parameter_list block decl_stmt decl type name name init expr call name argument_list decl_stmt decl type name name init expr literal type number decl type ref prev name init expr literal type number while condition expr name name argument_list type generic argument expr literal type char operator name literal type char block if condition expr name operator literal type char then block type pseudo expr_stmt expr name operator operator literal type number expr_stmt expr name operator call name argument_list while condition expr literal type char operator name operator name operator literal type char block expr_stmt expr name operator name operator literal type number operator name operator literal type char expr_stmt expr name operator call name argument_list return expr name operator name function specifier type name name parameter_list block decl_stmt decl type name name init expr call name argument_list decl_stmt decl type name name init expr literal type number decl type ref prev name init expr literal type number while condition expr name name argument_list type generic argument expr literal type char operator name literal type char block if condition expr name operator literal type char then block type pseudo expr_stmt expr name operator operator literal type number expr_stmt expr name operator call name argument_list while condition expr literal type char operator name operator name operator literal type char block expr_stmt expr name operator name operator literal type number operator name operator literal type char expr_stmt expr name operator call name argument_list return expr name operator name function specifier type name name parameter_list block decl_stmt decl type name name init expr call name argument_list decl_stmt decl type name name init expr literal type number decl type ref prev name init expr literal type number while condition expr name name argument_list type generic argument expr literal type char operator name literal type char block if condition expr name operator literal type char then block type pseudo expr_stmt expr name operator operator literal type number expr_stmt expr name operator call name argument_list decl_stmt decl type name name init expr literal type boolean decl_stmt decl type name name init expr literal type number while condition expr literal type char operator name operator name operator literal type char block if condition expr operator name then block type pseudo expr_stmt expr name operator name operator literal type number operator name operator literal type char else block type pseudo expr_stmt expr name operator name operator operator name operator literal type char operator operator expr name operator literal type number expr_stmt expr name operator call name argument_list if condition expr name operator literal type char then block expr_stmt expr name operator literal type boolean operator expr name operator call name argument_list return expr name operator name function specifier type name name parameter_list parameter decl type name name parameter decl type name name block decl_stmt decl type name name init expr literal type number while condition expr name block if condition expr name operator literal type number then block type pseudo expr_stmt expr name operator name operator name operator name expr_stmt expr name operator name operator name operator name expr_stmt expr name operator literal type number return expr name function specifier type name name parameter_list parameter decl type name name parameter decl type name name block decl_stmt decl type name name init expr literal type number while condition expr name block if condition expr name operator literal type number then block type pseudo expr_stmt expr name operator ternary condition expr name operator name operator name then expr name operator name operator name else expr name operator name expr_stmt expr name operator ternary condition expr name operator name operator name then expr name operator name operator name else expr name operator name expr_stmt expr name operator literal type number return expr name function specifier type name name parameter_list parameter decl type specifier name modifier name block if condition expr call name argument_list argument expr name operator name then block type pseudo return expr literal type number return expr name decl_stmt decl type specifier name name init expr literal type number operator literal type number decl_stmt decl type name name name index expr name function type name name parameter_list block ifndef directive name decl_stmt decl type name name init expr call name argument_list expr_stmt expr name endif directive expr_stmt expr name decl_stmt decl type name name expr_stmt expr name operator name label name empty_stmt while condition expr name operator block decl_stmt decl type name name expr_stmt expr name operator name decl_stmt decl type name name decl type ref prev name expr_stmt expr name operator name operator name expr_stmt expr call name argument_list argument expr name for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block type pseudo expr_stmt expr name name index expr name name index expr name operator operator expr name name index expr name name index expr name operator for control init decl type name name init expr literal type char condition expr name operator literal type char incr expr name operator block if condition expr name name index expr name operator literal type number operator literal type number then block comment type line expr_stmt expr name operator literal type string goto name decl_stmt decl type name name argument_list type generic argument expr name name while condition expr name operator name block for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block if condition expr name name index expr name operator name name index expr name then block for control init decl type name name init expr name operator literal type number condition expr name operator name incr expr name operator block if condition expr name name index expr name operator name name index expr name then block if condition expr name name index expr name operator name name index expr name then block expr_stmt expr call name name operator name argument_list argument expr call name argument_list argument expr name argument expr name expr_stmt expr call name argument_list argument expr name name index expr name argument expr name name index expr name expr_stmt expr call name name operator name argument_list argument expr call name argument_list argument expr name argument expr name expr_stmt expr call name argument_list argument expr name name index expr name argument expr name name index expr name break elseif if condition expr name name index expr name operator name name index expr name then block expr_stmt expr call name name operator name argument_list argument expr call name argument_list argument expr name argument expr name expr_stmt expr call name argument_list argument expr name name index expr name argument expr name name index expr name break break expr_stmt expr name operator literal type string expr_stmt expr name operator call name name operator name argument_list operator name for control init decl type name name range expr name block expr_stmt expr name operator name name operator name operator literal type number operator literal type char operator name name operator name operator literal type number operator name ifndef directive name expr_stmt expr call name argument_list argument expr literal type string argument expr call name argument_list operator name endif directive return expr literal type number 
