include directive file using namespace name typedef type name name name typedef type name name argument_list type generic argument expr name argument expr name name define directive macro name value define directive macro name value decl_stmt decl type specifier name name init expr literal type number function specifier type name name parameter_list block decl_stmt decl type name name init expr literal type number decl type ref prev name init expr literal type number decl_stmt decl type name name init expr call name argument_list while condition expr operator call name argument_list argument expr name block if condition expr name operator literal type char then block type pseudo expr_stmt expr name operator operator literal type number expr_stmt expr name operator call name argument_list while condition expr call name argument_list argument expr name block type pseudo expr_stmt expr name operator name operator literal type number operator name operator literal type char operator expr name operator call name argument_list return expr name operator name decl_stmt decl type specifier name name init expr literal type number decl_stmt decl type name name decl_stmt decl type name name name index expr name decl type ref prev name name index expr name decl_stmt decl type name name name index expr literal type number decl type ref prev name name index expr name decl_stmt decl type name name argument_list type generic argument expr name argument expr name name name index expr name operator literal type number function type name name parameter_list block decl_stmt decl type name name init expr call name argument_list while condition expr name operator block expr_stmt expr call name argument_list argument expr name argument expr literal type number argument expr sizeof argument_list argument expr name expr_stmt expr call name argument_list argument expr literal type string argument expr operator name expr_stmt expr call name argument_list argument expr literal type string argument expr name operator literal type number expr_stmt expr call name argument_list argument expr literal type string argument expr name operator literal type number for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block type pseudo expr_stmt expr name name index expr name name index expr name operator literal type char operator operator expr name name index expr name name index expr name operator literal type char operator decl_stmt decl type name name init expr literal type number for control init decl type name name init expr literal type number condition expr name operator literal type number incr expr name operator block type pseudo if condition expr name name index expr name operator literal type number operator literal type number then block expr_stmt expr call name argument_list argument expr literal type string expr_stmt expr name operator literal type number break if condition expr name then block type pseudo continue decl_stmt decl type name name init expr literal type number for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block if condition expr name name index expr name operator name name index expr name then block for control init decl type name name init expr name operator literal type number condition expr name operator name incr expr name operator block type pseudo if condition expr name name index expr name operator name name index expr name then block expr_stmt expr name name index expr operator name operator block expr name expr name expr_stmt expr call name argument_list argument expr name name index expr name argument expr name name index expr name break elseif if condition expr name name index expr name operator name name index expr name then block expr_stmt expr name name index expr operator name operator block expr name expr name expr_stmt expr call name argument_list argument expr name name index expr name argument expr name name index expr name break elseif if condition expr name name index expr name operator name name index expr name then block expr_stmt expr name name index expr operator name operator block expr name operator literal type number expr name expr_stmt expr call name argument_list argument expr name name index expr name operator literal type number argument expr name name index expr name expr_stmt expr name name index expr operator name operator block expr name operator literal type number expr name expr_stmt expr call name argument_list argument expr name name index expr name operator literal type number argument expr name name index expr name break elseif if condition expr name name index expr name operator name name index expr name then block expr_stmt expr name name index expr operator name operator block expr name expr name operator literal type number expr_stmt expr name name index expr operator name operator block expr name expr name operator literal type number expr_stmt expr call name argument_list argument expr name name index expr name argument expr name name index expr name operator literal type number expr_stmt expr call name argument_list argument expr name name index expr name argument expr name name index expr name operator literal type number break expr_stmt expr call name argument_list argument expr literal type string expr_stmt expr call name argument_list argument expr literal type string argument expr name for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block type pseudo expr_stmt expr call name argument_list argument expr literal type string argument expr name name index expr name operator name argument expr name name index expr name operator name return expr literal type number 
