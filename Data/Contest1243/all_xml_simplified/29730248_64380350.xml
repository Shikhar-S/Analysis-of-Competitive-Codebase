include directive file define directive macro name value using namespace name define directive macro name value define directive macro name value define directive macro name value define directive macro name value define directive macro name parameter_list parameter type name value define directive macro name value define directive macro name value define directive macro name value define directive macro name parameter_list parameter type name parameter type name value define directive macro name parameter_list parameter type name value define directive macro name parameter_list parameter type name parameter type name parameter type name value define directive macro name parameter_list parameter type name parameter type name parameter type name value define directive macro name parameter_list parameter type name value typedef type name name name typedef type name name argument_list type generic argument expr name argument expr name name typedef type name name name typedef type name name name name decl_stmt decl type specifier name name init expr literal type number operator literal type number decl_stmt decl type specifier name name init expr literal type number decl_stmt decl type specifier name name init expr call name argument_list argument expr operator name operator operator literal type number function type name name parameter_list parameter decl type name name parameter decl type name name block return expr operator name operator operator name operator literal type number operator operator operator literal type number function type name name parameter_list parameter decl type name name parameter decl type name name block return expr name operator call name argument_list argument expr name argument expr name operator name function type name name parameter_list parameter decl type name name block for control init decl type name name init expr literal type number condition expr name operator name operator name incr expr name operator block if condition expr name operator name operator literal type number then block type pseudo return expr literal type number return expr ternary condition expr operator name operator literal type number operator then expr literal type number else expr literal type number function type name name parameter_list parameter decl type name name parameter decl type name name parameter decl type name name init expr name block decl_stmt decl type name name init expr literal type number for control init condition expr name incr expr name operator literal type number operator expr name operator name operator name operator name block if condition expr name operator literal type number then block type pseudo expr_stmt expr name operator name operator name operator name return expr name decl_stmt decl type specifier name name init expr literal type number operator literal type number decl_stmt decl type name name decl type ref prev name decl type ref prev name decl type ref prev name decl type ref prev name decl_stmt decl type name name name index expr name function type name name parameter_list block decl_stmt decl type name name decl type ref prev name expr_stmt expr name operator name expr_stmt expr name operator name operator name decl_stmt decl type name name argument_list type generic argument expr name name for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block if condition expr name name index expr name operator name name index expr name then block decl_stmt decl type name name init expr literal type boolean for control init decl type name name init expr name operator literal type number condition expr name operator name incr expr name operator block if condition expr name name index expr name operator name name index expr name operator name name index expr name operator name name index expr name then block expr_stmt expr call name name operator name argument_list argument expr block expr name expr name expr_stmt expr call name argument_list argument expr name name index expr name argument expr name name index expr name expr_stmt expr name operator literal type boolean break if condition expr name then block type pseudo continue for control init decl type name name init expr name operator literal type number condition expr name operator name incr expr name operator block if condition expr name name index expr name operator name name index expr name operator name name index expr name operator name name index expr name then block expr_stmt expr call name argument_list argument expr name name index expr name argument expr name name index expr name expr_stmt expr call name argument_list argument expr name name index expr name argument expr name name index expr name expr_stmt expr call name name operator name argument_list argument expr block expr name expr name expr_stmt expr call name name operator name argument_list argument expr block expr name expr name expr_stmt expr name operator literal type boolean break if condition expr operator name then block expr_stmt expr name operator literal type string return expr_stmt expr name operator literal type string expr_stmt expr name operator call name argument_list argument expr name operator literal type string for control init decl type name name range expr name block expr_stmt expr name operator name name operator name operator literal type number operator literal type string operator name name operator name operator literal type number operator literal type string function type name name parameter_list block expr_stmt expr name decl_stmt decl type name name init expr literal type number comment type line expr_stmt expr name operator name while condition expr name operator block expr_stmt expr call name argument_list 
