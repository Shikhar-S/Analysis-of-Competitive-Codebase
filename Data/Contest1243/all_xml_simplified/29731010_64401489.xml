include directive file define directive macro name value define directive macro name value define directive macro name value define directive macro name value define directive macro name value define directive macro name parameter_list parameter type name value define directive macro name parameter_list parameter type name parameter type name value define directive macro name parameter_list parameter type name parameter type name parameter type name value using namespace name decl_stmt decl type specifier name name init expr literal type number decl_stmt decl type name name name index expr name decl type ref prev name name index expr name decl_stmt decl type name name name index expr name decl type ref prev name name index expr name index expr literal type number decl type ref prev name name index expr name decl type ref prev name name index expr literal type number decl_stmt decl type name name name index expr name decl type ref prev name name index expr name function specifier type name name parameter_list parameter decl type name name parameter decl type name name block decl_stmt decl type name name init expr name name index expr name index expr literal type number decl type ref prev name init expr name name index expr name index expr literal type number expr_stmt expr call name argument_list argument expr name name index expr name index expr literal type number argument expr name name index expr name index expr literal type number expr_stmt expr name name index expr name operator literal type number expr_stmt expr name name index expr name operator literal type number expr_stmt expr name name index expr name operator name expr_stmt expr name name index expr name operator name function type name name parameter_list block decl_stmt decl type name name expr_stmt expr call name argument_list argument expr name while condition expr name operator block decl_stmt decl type name name expr_stmt expr call name argument_list argument expr name expr_stmt expr call name argument_list argument expr literal type string argument expr name expr_stmt expr call name argument_list argument expr literal type string argument expr name expr_stmt expr call name argument_list argument expr name argument expr literal type number argument expr sizeof argument_list argument expr name expr_stmt expr call name argument_list argument expr name argument expr literal type number argument expr sizeof argument_list argument expr name for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block type pseudo expr_stmt expr name name index expr name name index expr name operator literal type char operator operator expr name name index expr name name index expr name operator literal type char operator decl_stmt decl type name name init expr literal type number for control init decl type name name init expr literal type number condition expr name operator literal type number incr expr name operator block type pseudo if condition expr name name index expr name operator literal type number then block expr_stmt expr name operator literal type number break if condition expr operator name then block expr_stmt expr call name argument_list argument expr literal type string continue expr_stmt expr call name argument_list argument expr literal type string for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block expr_stmt expr name name index expr name index expr literal type number operator name expr_stmt expr name name index expr name index expr literal type number operator name operator name expr_stmt expr name name index expr name operator name name index expr name operator name operator name expr_stmt expr name name index expr name operator literal type number expr_stmt expr name name index expr name operator name operator literal type number for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block if condition expr name name index expr name then block type pseudo continue decl_stmt decl type name name init expr literal type number for control init decl type name name init expr name operator literal type number condition expr name operator name incr expr name operator block type pseudo if condition expr operator name name index expr name operator name name index expr name operator name name index expr name then block expr_stmt expr name name index expr name operator name operator expr name name index expr name operator name operator expr name name index expr name operator name name index expr name operator name operator literal type number break if condition expr operator name then block type pseudo for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block type pseudo if condition expr operator name name index expr name operator name operator name name index expr name operator name name index expr name then block expr_stmt expr name name index expr name operator name operator name operator expr name name index expr name operator name operator name operator expr name name index expr name operator name operator name name index expr name operator literal type number break for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block if condition expr name name index expr name operator name then block type pseudo continue for control init decl type name name init expr name operator literal type number condition expr name operator name incr expr name operator block type pseudo if condition expr operator name name index expr name operator name operator name name index expr name operator name name index expr name then block expr_stmt expr name name index expr name operator name operator name operator name operator expr name name index expr name operator name operator name operator name operator expr name name index expr name operator name operator name name index expr name operator name operator literal type number break decl_stmt decl type name name operator name name argument_list type generic argument expr name name argument_list type generic argument expr name argument expr name name for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block decl_stmt decl type name name init expr name name index expr name index expr literal type number decl_stmt decl type name name init expr name name index expr name if condition expr name name index expr name operator name then block type pseudo continue if condition expr name name index expr name then block expr_stmt expr call name name operator name argument_list argument expr block expr name operator literal type number expr name name index expr name expr_stmt expr call name argument_list argument expr name operator literal type number argument expr name name index expr name expr_stmt expr call name name operator name argument_list argument expr block expr name operator literal type number expr name expr_stmt expr call name argument_list argument expr name operator literal type number argument expr name else block expr_stmt expr call name name operator name argument_list argument expr block expr name name index expr name expr name expr_stmt expr call name argument_list argument expr name name index expr name argument expr name expr_stmt expr call name argument_list argument expr literal type string argument expr call name name operator name argument_list for control init decl type name name init expr literal type number condition expr name operator call name name operator name argument_list incr expr name operator block type pseudo expr_stmt expr call name argument_list argument expr literal type string argument expr name name index expr name operator name operator literal type number argument expr name name index expr name operator name operator literal type number return expr literal type number 
