include directive file using namespace name decl_stmt decl type specifier name name init expr literal type number decl_stmt decl type name name decl type ref prev name decl_stmt decl type name name argument_list type generic argument expr name name name index expr name decl_stmt decl type name name name index expr name function type name name parameter_list block function type name name parameter_list block function type name name argument_list type generic argument expr name name parameter_list parameter decl type name name argument_list type generic argument expr name modifier name parameter decl type name name argument_list type generic argument expr name modifier name block decl_stmt decl type name name argument_list type generic argument expr name name if condition expr call name name operator name argument_list operator call name name operator name argument_list then block for control init decl type name name range expr name block decl_stmt decl type name name init expr call name argument_list argument expr call name name operator name argument_list argument expr call name name operator name argument_list argument expr name if condition expr name operator call name name operator name argument_list operator operator operator name operator operator name then block expr_stmt expr call name name operator name argument_list argument expr name else block for control init decl type name name range expr name block decl_stmt decl type name name init expr call name argument_list argument expr call name name operator name argument_list argument expr call name name operator name argument_list argument expr name if condition expr name operator call name name operator name argument_list operator operator operator name operator operator name then block expr_stmt expr call name name operator name argument_list argument expr name return expr name comment type line function type name name parameter_list parameter decl type name name parameter decl type name name parameter decl type name name argument_list type generic argument expr name modifier name parameter decl type name name argument_list type generic argument expr name modifier name parameter decl type name name argument_list type generic argument expr name modifier name parameter decl type name name argument_list type generic argument expr name modifier name block if condition expr call name name operator name argument_list operator call name name operator name argument_list then block expr_stmt expr call name name operator name argument_list argument expr call name name operator name argument_list argument expr call name name operator name argument_list argument expr call name name operator name argument_list for control init decl type name name range expr name block expr_stmt expr name name index expr name operator name expr_stmt expr name operator call name argument_list argument expr name argument expr name else block expr_stmt expr call name name operator name argument_list argument expr call name name operator name argument_list argument expr call name name operator name argument_list argument expr call name name operator name argument_list for control init decl type name name range expr name block expr_stmt expr name name index expr name operator name expr_stmt expr name operator call name argument_list argument expr name argument expr name function type name name parameter_list block for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block if condition expr name name index expr name operator name name index expr literal type number then block return expr literal type boolean return expr literal type boolean define directive macro name parameter_list parameter type modifier value function type name name parameter_list block expr_stmt expr call name argument_list argument expr literal type string argument expr operator name argument expr operator name for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block decl_stmt decl type name name decl type ref prev name expr_stmt expr call name argument_list argument expr literal type string argument expr operator name argument expr operator name expr_stmt expr name operator expr_stmt expr name operator expr_stmt expr name name index expr name operator call name argument_list argument expr name expr_stmt expr name name index expr name operator call name argument_list argument expr name for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block expr_stmt expr call name argument_list argument expr name name index expr name operator call name argument_list argument expr name name index expr name operator call name argument_list decl_stmt decl type name name argument_list type generic argument expr name name argument_list type generic argument expr name name decl_stmt decl type name name argument_list type generic argument expr name name argument_list argument expr name argument expr literal type number decl_stmt decl type name name argument_list type generic argument expr name name argument_list type generic argument expr name name argument_list argument expr name argument expr call name name argument_list type generic argument expr name argument_list for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block expr_stmt expr name name index expr name operator name decl_stmt decl type name name argument_list type generic argument expr name name expr_stmt expr call name name operator name argument_list argument expr name expr_stmt expr call name name operator name argument_list argument expr name expr_stmt expr name name index expr name operator name name index expr name decl_stmt decl type name name init expr literal type number while condition expr operator call name argument_list block comment type block expr_stmt expr call name name operator name argument_list argument expr name argument expr literal type number for control init decl type name name init expr literal type number condition expr name operator operator name operator call name name operator name argument_list incr expr name operator block if condition expr name name index expr name then block type pseudo continue if condition expr name name index expr name name index expr name index expr literal type number operator name then block type pseudo continue decl_stmt decl type name name init expr operator literal type number decl_stmt decl type name name init expr operator literal type number for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block if condition expr name name index expr name operator name then block type pseudo continue while condition expr name operator literal type number operator operator name operator name name index expr name operator call name argument_list operator name name index expr name index expr name operator literal type number operator name block expr_stmt expr name operator if condition expr name operator operator literal type number operator name name index expr name index expr name operator name then block expr_stmt expr name operator name break if condition expr name operator operator literal type number then block expr_stmt expr name operator name name index expr name index expr literal type number expr_stmt expr name operator expr_stmt expr name name index expr name name index expr name operator literal type number expr_stmt expr call name argument_list argument expr name argument expr name name index expr name argument expr name name index expr name argument expr name name index expr name name index expr name argument expr name name index expr name argument expr name name index expr name name index expr name expr_stmt expr call name argument_list argument expr literal type string argument expr name function type name name parameter_list block comment type line comment type line expr_stmt expr call name argument_list expr_stmt expr call name argument_list expr_stmt expr call name argument_list return expr literal type number 
