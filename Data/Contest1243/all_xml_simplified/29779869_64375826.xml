include directive file using namespace name ifdef directive name define directive macro name include directive file else directive define directive macro name parameter_list parameter type modifier endif directive define directive macro name value define directive macro name value define directive macro name value define directive macro name parameter_list parameter type name parameter type name parameter type name value define directive macro name parameter_list parameter type name parameter type name parameter type name value define directive macro name parameter_list parameter type name value define directive macro name parameter_list parameter type name value decl_stmt decl type specifier name name init expr ternary condition expr sizeof argument_list argument expr name operator operator name name operator then expr literal type number else expr literal type number decl_stmt decl type specifier name name init expr call name argument_list argument expr literal type number operator literal type number define directive macro name value define directive macro name value define directive macro name value define directive macro name value using name init type name name argument_list type generic argument expr name argument expr name comment type line function type operator template parameter_list parameter type name name parameter type name name type name modifier name name parameter_list parameter decl type name modifier name parameter decl type name name argument_list type generic argument expr name argument expr name modifier name block expr_stmt expr name operator name name operator name operator name name operator name return expr name comment type line function template parameter_list parameter type name name type name name parameter_list parameter decl type specifier name name argument_list type generic argument expr name name argument_list type generic argument expr name modifier name block expr_stmt expr name operator name macro name argument_list argument argument literal type number argument macro name argument_list argument argument literal type number argument block if condition expr typeid argument_list argument expr name name index expr name index expr name operator call name argument_list operator typeid argument_list argument expr name operator call name argument_list operator name name index expr name index expr name operator name then block expr_stmt expr name operator literal type string else block type pseudo expr_stmt expr name operator name name index expr name index expr name expr_stmt expr name operator operator ternary condition expr name operator name name index expr name operator call name argument_list operator literal type number then expr literal type char else expr literal type char operator expr_stmt expr name operator name ifndef directive name define directive macro name parameter_list parameter type modifier endif directive function type name name parameter_list parameter decl type name name block expr_stmt expr name operator operator ternary condition expr name then expr literal type string else expr literal type string operator operator name function type name name parameter_list parameter decl type name name block expr_stmt expr name operator operator ternary condition expr name then expr literal type string else expr literal type string operator operator name function template parameter_list parameter type name name parameter type name name type name name parameter_list parameter decl type name modifier name parameter decl type name name block if condition expr name operator name then block expr_stmt expr name operator name return expr literal type boolean return expr literal type boolean function template parameter_list parameter type name name parameter type name name type name name parameter_list parameter decl type name modifier name parameter decl type name name block if condition expr name operator name then block expr_stmt expr name operator name return expr literal type boolean return expr literal type boolean function type name name parameter_list parameter decl type name name parameter decl type name modifier name name index block expr_stmt expr call name name operator name argument_list argument expr literal type number expr_stmt expr call name name operator name argument_list argument expr literal type boolean expr_stmt expr name operator name operator call name argument_list argument expr literal type number decl_stmt decl type name name expr_stmt expr name operator name macro name argument_list argument block decl_stmt decl type name name expr_stmt expr name operator name decl_stmt decl type name name argument_list type generic argument expr name name argument_list argument expr name macro name argument_list argument argument literal type number argument block expr_stmt expr name operator name name index expr name expr_stmt expr call name argument_list argument expr call name argument_list argument expr name decl_stmt decl type name name init expr literal type number macro name argument_list argument argument literal type number argument block decl_stmt decl type name name init expr name operator name if condition expr name name index expr name operator name then block expr_stmt expr call name argument_list argument expr name argument expr name expr_stmt expr name operator name operator name return expr literal type number 
