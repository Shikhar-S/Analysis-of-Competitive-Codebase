include directive file using namespace name decl_stmt decl type specifier name name init expr literal type number operator literal type number decl_stmt decl type name name name index expr name decl type ref prev name name index expr name decl type ref prev name name index expr name decl type ref prev name decl type ref prev name function type name name parameter_list parameter decl type name name parameter decl type name name block expr_stmt expr name name index expr name operator name name index expr name expr_stmt expr name name index expr name operator name expr_stmt expr name name index expr name operator name expr_stmt expr name operator function type name name parameter_list parameter decl type name name parameter decl type name name block expr_stmt expr call name argument_list argument expr name argument expr name expr_stmt expr call name argument_list argument expr name argument expr name function type name name parameter_list block expr_stmt expr call name argument_list argument expr name argument expr operator literal type number argument expr name operator sizeof name name index expr literal type number expr_stmt expr name operator literal type number decl_stmt decl type name name name index expr name decl_stmt decl type name name name index expr name decl type ref prev name decl type ref prev name name index expr name decl_stmt decl type name name argument_list type generic argument expr name name argument_list type generic argument expr name argument expr name argument expr name name argument_list type generic argument expr name name argument_list type generic argument expr name argument expr name argument expr name name argument_list type generic argument expr name name argument_list type generic argument expr name argument expr name name comment type line decl_stmt decl type name name argument_list type generic argument expr name name function type name name parameter_list parameter decl type name name parameter decl type name name block if condition expr name name index expr name operator then block type pseudo return expr_stmt expr name name index expr name operator name expr_stmt expr operator name for control init decl type name name init expr name name index expr name condition expr operator name incr expr name operator name name index expr name block decl_stmt decl type name name init expr name name index expr name expr_stmt expr name name index expr name operator name if condition expr call name name operator name argument_list argument expr name then block type pseudo expr_stmt expr call name name operator name argument_list argument expr name decl_stmt decl type name name argument_list type generic argument expr name name for control init decl type name name init expr call name name operator name argument_list condition expr name operator call name name operator name argument_list incr block if condition expr name name index expr operator name operator name then block expr_stmt expr call name name operator name argument_list argument expr operator name expr_stmt expr name operator call name name operator name argument_list argument expr name else block expr_stmt expr operator name for control init decl type name name range expr name block expr_stmt expr call name argument_list argument expr name argument expr literal type number for control init decl type name name init expr name name index expr name condition expr operator name incr expr name operator name name index expr name block decl_stmt decl type name name init expr name name index expr name if condition expr operator name name index expr name then block type pseudo expr_stmt expr call name name operator name argument_list argument expr block expr literal type number expr name function type name name parameter_list block ifndef directive name expr_stmt expr call name argument_list argument expr literal type string argument expr literal type string argument expr name endif directive decl_stmt decl type name name expr_stmt expr call name argument_list argument expr literal type string argument expr operator name argument expr operator name for control init decl type name name init expr literal type number condition expr name operator name incr expr operator name block type pseudo expr_stmt expr call name name operator name argument_list argument expr name expr_stmt expr call name argument_list while condition expr name operator block decl_stmt decl type name name decl type ref prev name expr_stmt expr call name argument_list argument expr literal type string argument expr operator name argument expr operator name expr_stmt expr call name argument_list argument expr operator name argument expr operator name expr_stmt expr call name name operator name argument_list argument expr block expr literal type number expr literal type number while condition expr literal type boolean block while condition expr call name name operator name argument_list operator name name index expr call name name operator name argument_list operator name block type pseudo expr_stmt expr call name name operator name argument_list if condition expr call name name operator name argument_list then block type pseudo break decl_stmt decl type name name init expr call name name operator name argument_list expr_stmt expr call name name operator name argument_list expr_stmt expr call name argument_list argument expr name name operator name argument expr name name operator name decl_stmt decl type name name init expr literal type number for control init decl type name name init expr literal type number condition expr name operator name incr expr operator name block type pseudo expr_stmt expr name operator name name index expr name expr_stmt expr call name argument_list argument expr literal type string argument expr name return expr literal type number 
