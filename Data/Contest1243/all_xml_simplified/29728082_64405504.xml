pragma directive name name name literal name include directive file define directive macro name value define directive macro name value define directive macro name value using namespace name decl_stmt decl type specifier name name init expr literal type number operator literal type number decl type ref prev name init expr literal type number operator literal type number decl_stmt decl type name name name index expr literal type number decl_stmt decl type name name name index expr name decl type ref prev name decl_stmt decl type name name name index expr name decl type ref prev name name index expr name function type name name parameter_list block decl_stmt decl type name name expr_stmt expr call name argument_list argument expr literal type string argument expr operator name while condition expr name operator block decl_stmt decl type name name expr_stmt expr call name argument_list argument expr literal type string argument expr operator name argument expr operator name argument expr operator name expr_stmt expr call name argument_list argument expr name argument expr literal type number argument expr sizeof name for control init decl type name name init expr literal type number condition expr name operator name incr expr operator name block expr_stmt expr operator name name index expr name name index expr name operator literal type char expr_stmt expr operator name name index expr name name index expr name operator literal type char decl_stmt decl type name name init expr literal type boolean for control init decl type name name init expr literal type number condition expr name operator literal type number incr expr operator name block type pseudo expr_stmt expr name operator operator name name index expr name operator literal type number operator if condition expr name then block expr_stmt expr call name argument_list argument expr literal type string continue decl_stmt decl type name name init expr literal type number decl_stmt decl type name name argument_list type generic argument expr name name argument_list type generic argument expr name argument expr name name while condition expr name operator name operator call name name operator name argument_list operator literal type number operator name block comment type block format doxygen expr_stmt expr operator name for control init decl type name name init expr literal type number condition expr name operator name incr expr operator name block type pseudo if condition expr name name index expr name operator name name index expr name then block type pseudo expr_stmt expr name name index expr name operator name comment type block format doxygen decl_stmt decl type name name init expr literal type boolean for control init decl type name name init expr literal type number condition expr name operator name operator operator name incr expr operator name block if condition expr name name index expr name operator name then block type pseudo continue for control init decl type name name init expr literal type number condition expr name operator name operator operator name incr expr operator name block if condition expr name name index expr name operator name then block type pseudo continue if condition expr name operator name then block type pseudo continue if condition expr name name index expr name operator name name index expr name then block expr_stmt expr call name argument_list argument expr name name index expr name argument expr name name index expr name expr_stmt expr call name name operator name argument_list argument expr name argument expr name expr_stmt expr name operator literal type boolean for control init decl type name name init expr literal type number condition expr name operator name operator operator name incr expr operator name block if condition expr name name index expr name operator name then block type pseudo continue for control init decl type name name init expr literal type number condition expr name operator name operator operator name incr expr operator name block if condition expr name name index expr name operator name then block type pseudo continue if condition expr name operator name then block type pseudo continue if condition expr name name index expr name operator name name index expr name then block expr_stmt expr call name argument_list argument expr name name index expr name argument expr name name index expr name expr_stmt expr call name name operator name argument_list argument expr name argument expr name expr_stmt expr call name argument_list argument expr name name index expr name argument expr name name index expr name expr_stmt expr call name name operator name argument_list argument expr name argument expr name expr_stmt expr name operator literal type boolean expr_stmt expr name operator literal type number for control init decl type name name init expr literal type number condition expr name operator name incr expr operator name block type pseudo if condition expr name name index expr name operator name name index expr name then block type pseudo expr_stmt expr operator name if condition expr call name name operator name argument_list operator literal type number operator name then block type pseudo expr_stmt expr call name argument_list argument expr literal type number operator literal type number expr_stmt expr call name argument_list argument expr literal type string expr_stmt expr call name argument_list argument expr literal type string argument expr operator name operator call name name operator name argument_list for control init decl type name name range expr name block type pseudo expr_stmt expr call name argument_list argument expr literal type string argument expr name name operator name operator literal type number argument expr name name operator name operator literal type number 
