include directive file using namespace name class name block private type default public function type name name argument_list type generic argument expr name argument expr name name argument_list type generic argument expr name name argument_list type generic argument expr name argument expr name name parameter_list parameter decl type name modifier name parameter decl type name modifier name block decl_stmt decl type name name argument_list type generic argument expr name argument expr name name for control init decl type name name range expr name block type pseudo expr_stmt expr operator name name index expr name for control init decl type name name range expr name block type pseudo expr_stmt expr operator name name index expr name for control init decl type specifier specifier name range expr name block if condition expr name name operator name operator literal type number then block type pseudo return expr block expr literal type boolean expr block decl_stmt decl type name name argument_list type generic argument expr name argument expr name name argument_list type generic argument expr name name argument_list type generic argument expr name argument expr name name argument_list type generic argument expr name name for control init decl type name name init expr literal type number condition expr name operator call name name operator name argument_list incr expr operator name block if condition expr name name index expr name operator name name index expr name then block type pseudo continue expr_stmt expr name name index expr name name index expr name operator call name name operator name argument_list argument expr name expr_stmt expr name name index expr name name index expr name operator call name name operator name argument_list argument expr name decl_stmt decl type name name argument_list type generic argument expr name name argument_list type generic argument expr name argument expr name name for control init decl type name name init expr literal type number condition expr name operator call name name operator name argument_list incr expr operator name block if condition expr name name index expr name operator name name index expr name then block type pseudo continue if condition expr name name index expr name name index expr name operator call name name operator name argument_list operator literal type number then block decl_stmt decl type name name init expr operator call name argument_list argument expr name name index expr name name index expr name operator call name name operator name argument_list expr_stmt expr call name name operator name argument_list argument expr block expr name operator literal type number expr name operator literal type number expr_stmt expr name name index expr name name index expr name operator call name name operator name argument_list argument expr name expr_stmt expr name name index expr name name index expr name operator call name name operator name argument_list argument expr name expr_stmt expr name name index expr name name index expr name operator call name name operator name argument_list argument expr name expr_stmt expr name name index expr name name index expr name operator call name name operator name argument_list argument expr name expr_stmt expr call name argument_list argument expr name name index expr name argument expr name name index expr name if condition expr name name index expr name operator name name index expr name then block expr_stmt expr name name index expr name name index expr name operator call name name operator name argument_list argument expr name expr_stmt expr name name index expr name name index expr name operator call name name operator name argument_list argument expr name else block decl_stmt decl type name name init expr operator operator name name index expr name name index expr name operator call name name operator name argument_list operator expr_stmt expr call name name operator name argument_list argument expr block expr name operator literal type number expr name operator literal type number expr_stmt expr call name name operator name argument_list argument expr block expr name operator literal type number expr name operator literal type number expr_stmt expr name name index expr name name index expr name operator call name name operator name argument_list argument expr name expr_stmt expr name name index expr name name index expr name operator call name name operator name argument_list argument expr name expr_stmt expr name name index expr name name index expr name operator call name name operator name argument_list argument expr name expr_stmt expr name name index expr name name index expr name operator call name name operator name argument_list argument expr name expr_stmt expr name name index expr name name index expr name operator call name name operator name argument_list argument expr name expr_stmt expr name name index expr name name index expr name operator call name name operator name argument_list argument expr name expr_stmt expr call name argument_list argument expr name name index expr name argument expr name name index expr name expr_stmt expr call name argument_list argument expr name name index expr name argument expr name name index expr name if condition expr name name index expr name operator name name index expr name then block expr_stmt expr name name index expr name name index expr name operator call name name operator name argument_list argument expr name expr_stmt expr name name index expr name name index expr name operator call name name operator name argument_list argument expr name return expr block expr literal type boolean macro name argument_list argument function type name name parameter_list block decl_stmt decl type name name expr_stmt expr name operator name for control init decl type name name init expr literal type number condition expr name operator name incr expr operator name block decl_stmt decl type name name expr_stmt expr name operator name decl_stmt decl type name name decl type ref prev name expr_stmt expr name operator name expr_stmt expr name operator name decl_stmt decl type name name init expr call name argument_list operator call name argument_list argument expr name argument expr name if condition expr name name operator name then block expr_stmt expr name operator literal type string operator name expr_stmt expr name operator call name name operator name operator name argument_list operator name for control init decl type specifier specifier modifier name range expr name name operator name block expr_stmt expr name operator name name operator name operator literal type char operator name name operator name operator name else block expr_stmt expr name operator literal type string operator name return expr literal type number 
