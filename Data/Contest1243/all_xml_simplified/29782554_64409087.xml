include directive file include directive file include directive file using namespace name decl_stmt decl type name name decl type ref prev name decl type ref prev name name index expr literal type number decl type ref prev name decl type ref prev name struct name block public type default decl_stmt decl type name name decl_stmt decl type name name decl name decl_stmt decl type name name name index expr literal type number decl type ref prev name name index expr literal type number decl type ref prev name decl_stmt decl type name name argument_list type generic argument expr name name decl_stmt decl type name name argument_list type generic argument expr name name function type name name parameter_list block expr_stmt expr call name argument_list argument expr literal type string argument expr operator name while condition expr name operator block expr_stmt expr name operator literal type number expr_stmt expr call name argument_list argument expr name argument expr literal type number argument expr sizeof argument_list argument expr name expr_stmt expr call name argument_list argument expr literal type string argument expr operator name expr_stmt expr call name argument_list argument expr literal type string argument expr name operator literal type number argument expr name operator literal type number expr_stmt expr call name name operator name argument_list expr_stmt expr call name name operator name argument_list for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block if condition expr name name index expr name operator name name index expr name then block expr_stmt expr name name index expr name name index expr name operator literal type char operator literal type number operator expr_stmt expr name name index expr name name index expr name operator literal type char operator literal type number operator expr_stmt expr call name name operator name argument_list argument expr name expr_stmt expr name operator literal type number for control init decl type name name init expr literal type number condition expr name operator literal type number incr expr name operator block if condition expr name name index expr name operator literal type number operator literal type number then block expr_stmt expr name operator literal type number break if condition expr name operator literal type number then block expr_stmt expr call name argument_list argument expr literal type string else block expr_stmt expr call name argument_list argument expr literal type string for control init decl type name name init expr literal type number condition expr name operator call name name operator name argument_list incr expr name operator block if condition expr name name index expr name name index expr name operator name name index expr name name index expr name then block type pseudo continue expr_stmt expr name operator literal type number for control init decl type name name init expr name operator literal type number condition expr name operator call name name operator name argument_list incr expr name operator block if condition expr name name index expr name name index expr name operator name name index expr name name index expr name then block expr_stmt expr name operator name name index expr name name index expr name expr_stmt expr name name index expr name name index expr name operator name name index expr name name index expr name expr_stmt expr name name index expr name name index expr name operator name expr_stmt expr name name operator name operator name name index expr name expr_stmt expr name name operator name operator name name index expr name expr_stmt expr call name name operator name argument_list argument expr name expr_stmt expr name operator expr_stmt expr name operator literal type number break if condition expr name operator literal type number then block type pseudo continue for control init decl type name name init expr name operator literal type number condition expr name operator call name name operator name argument_list incr expr name operator block if condition expr name name index expr name name index expr name operator name name index expr name name index expr name then block expr_stmt expr name operator name name index expr name name index expr name expr_stmt expr name name index expr name name index expr name operator name name index expr name name index expr name expr_stmt expr name name index expr name name index expr name operator name expr_stmt expr name name operator name operator name name index expr name expr_stmt expr name name operator name operator name name index expr name expr_stmt expr call name name operator name argument_list argument expr name expr_stmt expr name operator name name index expr name name index expr name expr_stmt expr name name index expr name name index expr name operator name name index expr name name index expr name expr_stmt expr name name index expr name name index expr name operator name expr_stmt expr name name operator name operator name name index expr name expr_stmt expr name name operator name operator name name index expr name expr_stmt expr call name name operator name argument_list argument expr name expr_stmt expr name operator literal type number break expr_stmt expr call name argument_list argument expr literal type string argument expr name for control init decl type name name init expr literal type number condition expr name operator call name name operator name argument_list incr expr name operator block expr_stmt expr call name argument_list argument expr literal type string argument expr name name index expr name operator name argument expr name name index expr name operator name return expr literal type number 
