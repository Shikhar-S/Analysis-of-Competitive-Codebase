include directive file using namespace name typedef type name name name decl_stmt decl type name name name index expr literal type number decl type ref prev name name index expr literal type number decl type ref prev name name index expr literal type number decl_stmt decl type name name name index expr literal type number decl type ref prev name name index expr literal type number decl_stmt decl type name name argument_list type generic argument expr name name decl type ref prev name function type name name parameter_list block decl_stmt decl type name name expr_stmt expr call name argument_list argument expr literal type string argument expr operator name while condition expr name operator block expr_stmt expr call name argument_list argument expr name argument expr literal type number argument expr sizeof argument_list argument expr name expr_stmt expr call name argument_list argument expr name argument expr literal type number argument expr sizeof argument_list argument expr name expr_stmt expr call name argument_list argument expr name argument expr literal type number argument expr sizeof argument_list argument expr name expr_stmt expr call name name operator name argument_list operator expr call name name operator name argument_list decl_stmt decl type name name expr_stmt expr call name argument_list argument expr literal type string argument expr operator name argument expr name argument expr name for control init decl type name name init expr literal type number condition expr name operator name incr expr operator name block expr_stmt expr operator name name index expr name name index expr name operator literal type char expr_stmt expr operator name name index expr name name index expr name operator literal type char decl_stmt decl type name name init expr literal type boolean for control init decl type name name init expr literal type number condition expr name operator literal type number incr expr operator name block type pseudo if condition expr name name index expr name operator literal type number then block type pseudo expr_stmt expr name operator literal type boolean if condition expr operator name then block expr_stmt expr call name argument_list argument expr literal type string continue expr_stmt expr call name argument_list argument expr literal type string for control init decl type name name init expr literal type number condition expr name operator literal type number incr expr operator name block if condition expr operator name name index expr name then block type pseudo continue expr_stmt expr call name argument_list argument expr name argument expr literal type number argument expr sizeof argument_list argument expr name expr_stmt expr call name argument_list argument expr name argument expr literal type number argument expr sizeof argument_list argument expr name for control init decl type name name init expr literal type number condition expr name operator name incr expr operator name block expr_stmt expr operator name name index expr name name index expr name operator literal type char expr_stmt expr operator name name index expr name name index expr name operator literal type char if condition expr name name index expr name operator name name index expr name then block decl_stmt decl type name name init expr name name index expr name operator name name index expr name for control init decl type name name init expr name condition expr name operator literal type number incr expr operator name block if condition expr name name index expr name operator name operator literal type char then block for control init decl type name name init expr literal type number condition expr name operator name incr expr operator name block if condition expr name name index expr name operator name operator literal type char operator name name index expr name operator name operator literal type char then block expr_stmt expr call name argument_list argument expr name name index expr name argument expr name name index expr name expr_stmt expr call name name operator name argument_list argument expr name operator literal type number expr_stmt expr call name name operator name argument_list argument expr name operator literal type number expr_stmt expr name operator literal type number break if condition expr operator name then block type pseudo break elseif if condition expr name name index expr name operator name name index expr name then block decl_stmt decl type name name init expr name name index expr name operator name name index expr name for control init decl type name name init expr name condition expr name operator literal type number incr expr operator name block if condition expr name name index expr name operator name operator literal type char then block for control init decl type name name init expr literal type number condition expr name operator name incr expr operator name block if condition expr name name index expr name operator name operator literal type char operator name name index expr name operator name operator literal type char then block expr_stmt expr call name argument_list argument expr name name index expr name argument expr name name index expr name expr_stmt expr call name name operator name argument_list argument expr name operator literal type number expr_stmt expr call name name operator name argument_list argument expr name operator literal type number expr_stmt expr name operator literal type number break if condition expr operator name then block type pseudo break for control init decl type name name init expr literal type number condition expr name operator name incr expr operator name block if condition expr name name index expr name operator name operator literal type char operator name name index expr name operator name name index expr name then block decl_stmt decl type name name decl type ref prev name for control init expr name operator literal type number condition expr name operator name incr expr operator name block type pseudo if condition expr name name index expr name operator name operator literal type char then block type pseudo break for control init expr name operator literal type number condition expr name operator name incr expr operator name block type pseudo if condition expr name name index expr name operator name operator literal type char operator name name index expr name operator name name index expr name then block type pseudo break expr_stmt expr call name argument_list argument expr name name index expr name argument expr name name index expr name expr_stmt expr call name name operator name argument_list argument expr name operator literal type number expr_stmt expr call name name operator name argument_list argument expr name operator literal type number expr_stmt expr call name argument_list argument expr name name index expr name argument expr name name index expr name expr_stmt expr call name name operator name argument_list argument expr name operator literal type number expr_stmt expr call name name operator name argument_list argument expr name operator literal type number expr_stmt expr call name argument_list argument expr literal type string argument expr call name name operator name argument_list for control init decl type name name init expr literal type number condition expr name operator call name name operator name argument_list incr expr operator name block type pseudo expr_stmt expr call name argument_list argument expr literal type string argument expr name name index expr name argument expr name name index expr name return expr literal type number 
