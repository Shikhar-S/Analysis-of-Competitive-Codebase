comment type line comment type line using namespace name include directive file include directive file include directive file ifdef directive name decl_stmt decl type name name init expr literal type boolean else directive decl_stmt decl type name name init expr literal type boolean endif directive define directive macro name value define directive macro name parameter_list parameter type name parameter type name parameter type name value define directive macro name parameter_list parameter type name value define directive macro name parameter_list parameter type name value using name init type name name using name init type name name name decl_stmt decl type name name init expr literal type number decl_stmt decl type name name init expr literal type number comment type line include directive file include directive file include directive file include directive file include directive file comment type line struct name block public type default decl_stmt decl type name name init expr operator literal type number decl_stmt decl type name name init expr operator literal type number function type operator type name name name parameter_list parameter decl type name name parameter decl type name name block if condition expr name name operator name operator name name operator name then block type pseudo return expr name name operator name operator name name operator name return expr name name operator name operator name name operator name comment type line decl_stmt decl type name name argument_list type generic argument expr name name argument_list type generic argument expr name name comment type line function type name name parameter_list block ifdef directive name decl_stmt decl type name name argument_list argument expr literal type string decl_stmt decl type name name argument_list argument expr literal type string endif directive decl_stmt decl type name comment type line name name expr_stmt expr name operator name if condition expr name operator literal type number then block type pseudo expr_stmt expr name operator literal type number elseif if condition expr name operator literal type number then block type pseudo expr_stmt expr name operator literal type number elseif if condition expr name operator literal type number then block type pseudo expr_stmt expr name operator literal type number elseif if condition expr name operator literal type number then block type pseudo expr_stmt expr name operator literal type number elseif if condition expr name operator literal type number then block type pseudo expr_stmt expr name operator literal type number elseif if condition expr name operator literal type number then block type pseudo expr_stmt expr name operator literal type number elseif if condition expr name operator literal type number then block type pseudo expr_stmt expr name operator literal type number elseif if condition expr name operator literal type number then block type pseudo expr_stmt expr name operator literal type number else block decl_stmt decl type name name argument_list type generic argument expr name argument expr name name for control init decl type name name init expr literal type number condition expr name operator literal type number incr expr name operator block while condition expr name operator name operator literal type number block expr_stmt expr name name index expr name operator expr_stmt expr name operator name if condition expr name operator literal type number then block expr_stmt expr name name index expr name operator if condition expr call name name operator name argument_list operator literal type number then block for control init decl type name name range expr name block expr_stmt expr name operator name name operator name break else block type pseudo expr_stmt expr name operator literal type char 
