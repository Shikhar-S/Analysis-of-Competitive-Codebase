include directive file using namespace name typedef type name name argument_list type generic argument expr name argument expr name name decl_stmt decl type specifier name name init expr literal type number decl_stmt decl type name name decl type ref prev name decl type ref prev name name index expr literal type number decl_stmt decl type name name name index expr name decl type ref prev name name index expr name decl_stmt decl type name name argument_list type generic argument expr name name function type name name parameter_list block comment type line expr_stmt expr call name argument_list argument expr literal type string argument expr operator name while condition expr name operator block expr_stmt expr call name argument_list argument expr literal type string argument expr operator name expr_stmt expr call name argument_list argument expr literal type string argument expr name argument expr name expr_stmt expr call name argument_list argument expr name argument expr literal type number argument expr sizeof argument_list argument expr name for control init decl type name name init expr literal type number condition expr name operator name incr expr operator name block expr_stmt expr operator name name index expr name name index expr name operator literal type char expr_stmt expr operator name name index expr name name index expr name operator literal type char decl_stmt decl type name name init expr literal type boolean for control init decl type name name init expr literal type number condition expr name operator literal type number incr expr operator name block if condition expr name name index expr name operator literal type number then block expr_stmt expr name operator literal type boolean break if condition expr operator name then block expr_stmt expr call name argument_list argument expr literal type string continue expr_stmt expr call name name operator name argument_list for control init decl type name name init expr literal type number condition expr name operator name incr expr operator name block if condition expr name name index expr name operator name name index expr name then block type pseudo continue for control init decl type name name init expr name operator literal type number condition expr name operator name incr expr operator name block if condition expr name name index expr name operator name name index expr name then block expr_stmt expr call name argument_list argument expr name name index expr name argument expr name name index expr name expr_stmt expr call name name operator name argument_list argument expr call name argument_list argument expr name argument expr name break if condition expr name name index expr name operator name name index expr name then block expr_stmt expr call name argument_list argument expr name name index expr name argument expr name name index expr name expr_stmt expr call name argument_list argument expr name name index expr name argument expr name name index expr name expr_stmt expr call name name operator name argument_list argument expr call name argument_list argument expr name argument expr name expr_stmt expr call name name operator name argument_list argument expr call name argument_list argument expr name argument expr name break expr_stmt expr call name argument_list argument expr literal type string expr_stmt expr call name argument_list argument expr literal type string argument expr operator name operator call name name operator name argument_list for control init decl type name name init expr literal type number condition expr name operator operator name operator call name name operator name argument_list incr expr operator name block type pseudo expr_stmt expr call name argument_list argument expr literal type string argument expr literal type number operator name name index expr name operator name argument expr literal type number operator name name index expr name operator name return expr literal type number 
