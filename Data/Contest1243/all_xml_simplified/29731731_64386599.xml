include directive file using namespace name typedef type name name name typedef type name name name name typedef type name name argument_list type generic argument expr name argument expr name name typedef type name name argument_list type generic argument expr name argument expr name name decl_stmt decl type specifier name name name init expr call name argument_list argument expr operator literal type number decl_stmt decl type specifier name name init expr call name argument_list argument expr operator literal type number define directive macro name value decl_stmt decl type specifier name name init expr literal type number operator literal type number decl_stmt decl type specifier name name init expr literal type number operator literal type number decl_stmt decl type specifier name name init expr literal type number operator literal type number decl_stmt decl type specifier name name init expr literal type number function type name name parameter_list block expr_stmt expr call name name operator name argument_list argument expr literal type boolean decl_stmt decl type name name expr_stmt expr name operator name while condition expr name operator block decl_stmt decl type name name expr_stmt expr name operator name decl_stmt decl type name name decl type ref prev name expr_stmt expr name operator name operator name decl_stmt decl type name name argument_list type generic argument expr name argument expr name name decl type ref prev name decl type ref prev name for control init decl type name name range expr name block type pseudo expr_stmt expr name name index expr name operator for control init decl type name name range expr name block type pseudo expr_stmt expr name name index expr name operator decl_stmt decl type name name init expr literal type boolean for control init decl type name name range expr name block type pseudo if condition expr name name operator name operator literal type number then block type pseudo expr_stmt expr name operator literal type boolean if condition expr operator name then block expr_stmt expr name operator literal type string continue for control init decl type name name range expr name block type pseudo expr_stmt expr name name index expr name operator for control init decl type name name range expr name block type pseudo expr_stmt expr name name index expr name operator if condition expr name operator name then block decl_stmt decl type name name init expr literal type boolean for control init decl type name name range expr name block if condition expr call name name operator name argument_list argument expr name name operator name then block type pseudo expr_stmt expr name operator literal type boolean if condition expr name then block type pseudo expr_stmt expr name operator literal type string else block type pseudo expr_stmt expr name operator literal type string continue decl_stmt decl type name name init expr operator literal type number for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block if condition expr name name index expr name operator name name index expr name then block expr_stmt expr name operator name break decl_stmt decl type name name init expr operator literal type number for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block if condition expr name name index expr name operator name name index expr name operator name operator name then block expr_stmt expr name operator name break if condition expr name operator operator literal type number operator name operator operator literal type number then block expr_stmt expr name operator literal type string continue expr_stmt expr call name argument_list argument expr name name index expr name argument expr name name index expr name if condition expr name operator name then block type pseudo expr_stmt expr name operator literal type string else block expr_stmt expr name operator literal type string return expr literal type number 
