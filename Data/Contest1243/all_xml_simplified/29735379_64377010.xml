include directive file using namespace name typedef type name name name define directive macro name value define directive macro name value define directive macro name value define directive macro name value define directive macro name value function type name name parameter_list parameter decl type name name parameter decl type name name block decl_stmt decl type name name init expr literal type number while condition expr name block if condition expr name operator literal type number then block expr_stmt expr name operator name expr_stmt expr name operator name expr_stmt expr name operator literal type number return expr name function type name name parameter_list parameter decl type name name block if condition expr name operator literal type char operator name operator literal type char operator name operator literal type char operator name operator literal type char operator name operator literal type char then block type pseudo return expr literal type boolean return expr literal type boolean function type name name parameter_list parameter decl type name name block decl_stmt decl type name name init expr call name name operator name argument_list decl type ref prev name decl_stmt decl type name name init expr literal type number while condition expr literal type number block if condition expr name operator name operator call name argument_list argument expr name name index expr name then block type pseudo expr_stmt expr name operator else block break if condition expr name operator name then block type pseudo return expr literal type boolean while condition expr name operator name block if condition expr name operator name operator call name argument_list argument expr name name index expr name then block expr_stmt expr name operator literal type number while condition expr name operator name operator call name argument_list argument expr name name index expr name block expr_stmt expr name operator expr_stmt expr name operator if condition expr name operator name operator name operator literal type number then block type pseudo return expr literal type boolean elseif if condition expr name operator name then block type pseudo return expr literal type boolean else block expr_stmt expr name operator literal type number while condition expr name operator name operator operator operator call name argument_list argument expr name name index expr name operator block expr_stmt expr name operator expr_stmt expr name operator if condition expr name operator literal type number then block type pseudo return expr literal type boolean return expr literal type boolean function type name name parameter_list block decl_stmt decl type name name name decl type ref prev name decl type ref prev name expr_stmt expr name operator name decl_stmt decl type name name decl type ref prev name decl type ref prev name decl type ref prev name decl_stmt decl type name name decl_stmt decl type name name init expr literal type number while condition expr name operator block expr_stmt expr name operator name decl_stmt decl type name name name index expr name for control init expr name operator literal type number condition expr name operator name incr expr name operator block expr_stmt expr name operator name name index expr name expr_stmt expr call name argument_list argument expr name argument expr name operator name argument expr call name name argument_list type generic argument_list decl_stmt decl type name name init expr literal type number decl type ref prev name init expr literal type number for control init expr name operator literal type number condition expr name operator name incr expr name operator block expr_stmt expr name operator if condition expr name operator name name index expr name then block break if condition expr name operator name then block type pseudo expr_stmt expr name operator name operator literal type number operator literal type string else block type pseudo expr_stmt expr name operator name operator literal type string 
