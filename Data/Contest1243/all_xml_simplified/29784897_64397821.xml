include directive file using namespace name define directive macro name parameter_list parameter type name value define directive macro name value decl_stmt decl type specifier name name init expr literal type number operator literal type number decl_stmt decl type name name argument_list type generic argument expr name name name index expr name decl_stmt decl type name name name index expr name decl_stmt decl type name name name index expr name function type name name parameter_list parameter decl type name name block if condition expr name name index expr name operator name then block return expr name return expr name name index expr name operator call name argument_list argument expr name name index expr name function type name name parameter_list parameter decl type name name parameter decl type name name block expr_stmt expr name operator call name argument_list argument expr name expr_stmt expr name operator call name argument_list argument expr name if condition expr name name index expr name operator name name index expr name then block expr_stmt expr call name argument_list argument expr name argument expr name expr_stmt expr name name index expr name operator name if condition expr name name index expr name operator name name index expr name then block expr_stmt expr operator name name index expr name function type name name parameter_list parameter decl type name name parameter decl type name name argument_list type generic argument expr name modifier name parameter decl type name name argument_list type generic argument expr name modifier name block expr_stmt expr name name index expr name operator literal type boolean expr_stmt expr call name name operator name argument_list argument expr name decl_stmt decl type name name init expr literal type number while condition expr literal type boolean block decl_stmt decl type name name init expr call name name operator name argument_list argument expr name if condition expr name operator call name name operator name argument_list then block expr_stmt expr name operator operator name if condition expr name name index expr name operator call name argument_list argument expr name operator name name index expr name operator call name argument_list then block expr_stmt expr call name argument_list argument expr name argument expr name expr_stmt expr call name argument_list argument expr name argument expr name argument expr name else block break function type name name parameter_list block ifdef directive name expr_stmt expr call name argument_list argument expr literal type string argument expr literal type string argument expr name endif directive expr_stmt expr call name name operator name argument_list argument expr literal type boolean expr_stmt expr call name name operator name argument_list argument expr literal type number decl_stmt decl type name name decl type ref prev name expr_stmt expr name operator name operator name for control init decl type name name init expr literal type number condition expr name operator name incr expr operator name block expr_stmt expr name name index expr name operator name for control init decl type name name init expr literal type number condition expr name operator name incr expr operator name block decl_stmt decl type name name decl type ref prev name expr_stmt expr name operator name operator name expr_stmt expr name name index expr name operator call name argument_list argument expr name expr_stmt expr name name index expr name operator call name argument_list argument expr name decl_stmt decl type name name argument_list type generic argument expr name name argument_list argument expr name decl_stmt decl type name name argument_list type generic argument expr name name argument_list argument expr name operator literal type number decl_stmt decl type name name argument_list type generic argument expr name name for control init decl type name name init expr literal type number condition expr name operator name incr expr operator name block expr_stmt expr name name index expr name operator name operator literal type number expr_stmt expr call name name operator name argument_list argument expr name operator literal type number expr_stmt expr call name argument_list argument expr call name argument_list argument expr name argument expr lambda capture argument modifier parameter_list parameter decl type name name parameter decl type name name block return expr name name index expr name operator call name argument_list operator name name index expr name operator call name argument_list for control init decl type name name range expr name block if condition expr operator name name index expr name then block expr_stmt expr call name argument_list argument expr name argument expr name argument expr name decl_stmt decl type name name argument_list type generic argument expr name name argument_list argument expr name operator literal type number for control init decl type name name init expr literal type number condition expr name operator name incr expr operator name block expr_stmt expr name name index expr call name argument_list argument expr name operator literal type number expr_stmt expr name operator call name argument_list argument expr call name argument_list argument expr name argument expr literal type number operator literal type number 
