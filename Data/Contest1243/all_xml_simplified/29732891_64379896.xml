include directive file define directive macro name value define directive macro name value using namespace name typedef type name name name typedef type name name argument_list type generic argument expr name name typedef type name name argument_list type generic argument expr name name typedef type name name argument_list type generic argument expr name name typedef type name name argument_list type generic argument expr name argument expr name name typedef type name name argument_list type generic argument expr name name typedef type name name argument_list type generic argument expr name name typedef type name name argument_list type generic argument expr name name typedef type name name argument_list type generic argument expr name argument expr name argument expr name name typedef type name name argument_list type generic argument expr name name typedef type name name argument_list type generic argument expr name argument expr name name function type name name parameter_list block expr_stmt expr call name name operator name argument_list argument expr literal type number expr_stmt expr call name name operator name argument_list argument expr literal type number decl_stmt decl type name name expr_stmt expr name operator name while condition expr name operator block decl_stmt decl type name name expr_stmt expr name operator name decl_stmt decl type name name decl type ref prev name expr_stmt expr name operator name operator name decl_stmt decl type name name argument_list type generic argument expr name argument expr name name for control init decl type name name init expr literal type number condition expr name operator name incr expr operator name block type pseudo expr_stmt expr name name index expr name name index expr name operator operator expr name name index expr name name index expr name operator decl_stmt decl type name name init expr literal type boolean for control init decl type name name range expr name block if condition expr name name operator name operator literal type number then block type pseudo expr_stmt expr name operator literal type boolean if condition expr operator name then block type pseudo expr_stmt expr name operator literal type string else block expr_stmt expr name operator literal type string decl_stmt decl type name name for control init decl type name name init expr literal type number condition expr name operator name incr expr operator name block if condition expr name name index expr name operator name name index expr name then block decl_stmt decl type name name init expr literal type boolean for control init decl type name name init expr name operator literal type number condition expr name operator name incr expr operator name block if condition expr name name index expr name operator name name index expr name then block expr_stmt expr call name argument_list argument expr name name index expr name argument expr name name index expr name expr_stmt expr call name name operator name argument_list argument expr block expr name operator literal type number expr name operator literal type number if condition expr name name index expr name operator name name index expr name then block expr_stmt expr call name argument_list argument expr name name index expr name argument expr name name index expr name expr_stmt expr call name name operator name argument_list argument expr block expr name operator literal type number expr name operator literal type number break expr_stmt expr name operator call name name operator name argument_list operator literal type string for control init decl type name name init expr literal type number condition expr name operator call name name operator name argument_list incr expr operator name block type pseudo expr_stmt expr name operator name name index expr name operator name operator literal type string operator name name index expr name operator name operator literal type string return expr literal type number 
