include directive file using namespace name define directive macro name parameter_list parameter type name parameter type name parameter type name value define directive macro name parameter_list parameter type name parameter type name parameter type name value define directive macro name value function specifier type name name parameter_list block decl_stmt decl type name name init expr literal type number decl_stmt decl type name name init expr call name argument_list decl_stmt decl type name name init expr literal type number for control init condition expr operator call name argument_list argument expr name incr expr name operator call name argument_list block type pseudo if condition expr name operator literal type char then block type pseudo expr_stmt expr name operator literal type number for control init condition expr call name argument_list argument expr name incr expr name operator call name argument_list block type pseudo expr_stmt expr name operator name operator literal type number operator name operator literal type char return expr ternary condition expr name then expr operator name else expr name function type name name parameter_list parameter decl type name name block if condition expr name operator literal type number then block type pseudo expr_stmt expr call name argument_list argument expr literal type char operator expr name operator operator name if condition expr name operator literal type number then block type pseudo expr_stmt expr call name argument_list argument expr name operator literal type number expr_stmt expr call name argument_list argument expr name operator literal type number operator literal type char function type name name parameter_list parameter decl type name name block expr_stmt expr call name argument_list argument expr name expr_stmt expr call name argument_list argument expr literal type string function type name name parameter_list parameter decl type name name block expr_stmt expr call name argument_list argument expr name expr_stmt expr call name argument_list argument expr literal type char decl_stmt decl type specifier name name init expr literal type number operator literal type number decl_stmt decl type name name decl_stmt decl type name name name index expr name decl type ref prev name name index expr name function type name name parameter_list block decl_stmt decl type name name init expr call name argument_list while condition expr name operator block expr_stmt expr name operator call name argument_list expr_stmt expr call name argument_list argument expr literal type string argument expr name operator literal type number argument expr name operator literal type number decl_stmt decl type name name init expr literal type number macro name argument_list argument argument literal type number argument if condition expr name name index expr name operator name name index expr name then block type pseudo expr_stmt expr name operator if condition expr name operator literal type number then block expr_stmt expr call name argument_list argument expr literal type string continue if condition expr name operator literal type number operator name operator literal type number then block expr_stmt expr call name argument_list argument expr literal type string continue decl_stmt decl type name name init expr literal type number decl type ref prev name init expr literal type number macro name argument_list argument argument literal type number argument block if condition expr name name index expr name operator name name index expr name then block if condition expr operator name then block type pseudo expr_stmt expr name operator name else block type pseudo expr_stmt expr name operator name if condition expr name name index expr name operator name name index expr name operator name name index expr name operator name name index expr name then block type pseudo expr_stmt expr call name argument_list argument expr literal type string else block type pseudo expr_stmt expr call name argument_list argument expr literal type string 
