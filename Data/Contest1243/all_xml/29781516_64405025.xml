<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29781516_64405025.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;unordered_map&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REP</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>m</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=(m);i&lt;(n);i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>REP(i,0,n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(c).begin(),(c).end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rall</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(c).rbegin(),(c).rend()</cpp:value></cpp:define>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>pll</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>inf</name><init>=<expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>mod</name><init>=<expr><literal type="number">998244353</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>a</name><index>[<expr><literal type="number">1010</literal></expr>]</index><index>[<expr><literal type="number">1010</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>cnt</name><index>[<expr><literal type="number">1010</literal></expr>]</index><index>[<expr><literal type="number">1010</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>dx</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><init>=<expr><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>dy</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><init>=<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></name></type> <name>IsPrime</name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>sieve</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>max</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><name>max</name><operator>+</operator><literal type="number">1</literal> <operator>&gt;</operator> <call><name><name>IsPrime</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block>{     <comment type="line">// resizeã§è¦ç´ æ°ãæ¸ããªãããã«</comment>
        <expr_stmt><expr><call><name><name>IsPrime</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>max</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// IsPrimeã«å¿è¦ãªè¦ç´ æ°ãç¢ºä¿</comment>
    }</block></then></if> 
    <expr_stmt><expr><name><name>IsPrime</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt> <comment type="line">// 0ã¯ç´ æ°ã§ã¯ãªã</comment>
    <expr_stmt><expr><name><name>IsPrime</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt> <comment type="line">// 1ã¯ç´ æ°ã§ã¯ãªã</comment>

    <for>for<control>(<init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>*</operator><name>i</name><operator>&lt;=</operator><name>max</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <comment type="line">// 0ããsqrt(max)ã¾ã§èª¿ã¹ã</comment>
        <block type="pseudo"><if>if<condition>(<expr><name><name>IsPrime</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <comment type="line">// iãç´ æ°ãªãã°</comment>
            <block type="pseudo"><for>for<control>(<init><decl><type><name>size_t</name></type> <name>j</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>*</operator><name>j</name><operator>&lt;=</operator><name>max</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <comment type="line">// (maxä»¥ä¸ã®)iã®åæ°ã¯</comment>
                <block type="pseudo"><expr_stmt><expr><name><name>IsPrime</name><index>[<expr><name>i</name><operator>*</operator><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt></block></for></block></then></if></block></for>      <comment type="line">// ç´ æ°ã§ã¯ãªã</comment>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>;</decl_stmt><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sieve</name><argument_list>(<argument><expr><literal type="number">1000010</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type><name>div</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>k</name><init>=<expr><name>n</name></expr></init></decl>;</decl_stmt>
    <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument>sqrt(k)+<literal type="number">1</literal></argument>)</argument_list></macro><block>{
        <if>if<condition>(<expr><name><name>IsPrime</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block>{
            <if>if<condition>(<expr><name>n</name><operator>%</operator><name>i</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name><name>div</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
            <while>while<condition>(<expr><name>n</name><operator>%</operator><name>i</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>n</name><operator>/=</operator><name>i</name></expr>;</expr_stmt></block></while>
        }</block></then></if>
    }</block>
    <if>if<condition>(<expr><name>n</name><operator>!=</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name><name>div</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    <if>if<condition>(<expr><call><name><name>div</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&gt;</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></then>
    <elseif>else <if>if<condition>(<expr><call><name><name>div</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>div</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></then></if></elseif>
    <else>else <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>n</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></else></if>
}</block></function></unit>
