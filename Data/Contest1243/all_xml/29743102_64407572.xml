<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29743102_64407572.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ext/pb_ds/assoc_container.hpp&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ext/pb_ds/tree_policy.hpp&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<using>using <namespace>namespace <name>__gnu_pbds</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ldb</name>;</typedef>
<using><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> using <name>ordered_set</name> <init>=  <type><name><name>tree</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name>null_type</name></expr></argument>, <argument><expr><name><name>less</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>rb_tree_tag</name></expr></argument>, <argument><expr><name>tree_order_statistics_node_update</name></expr></argument>&gt;</argument_list></name></type></init>;</using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ss</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V</name></cpp:macro> <cpp:value>vector</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pll</name></cpp:macro> <cpp:value>pair&lt;ll,ll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>"\n"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLEAR</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(a,-1,sizeof(a))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x.begin(),x.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((ll)x.size())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep0</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(ll i=0;i&lt;n;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep1</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(ll i=1;i&lt;=n;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ios_tie</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL); cerr.tie(nullptr)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>trace1</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro>             <cpp:value>cout &lt;&lt;#a&lt;&lt;":"&lt;&lt;a&lt;&lt; endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>trace2</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>           <cpp:value>cout &lt;&lt;#a&lt;&lt;":"&lt;&lt;a&lt;&lt;" | "&lt;&lt;#b&lt;&lt;":"&lt;&lt;b&lt;&lt; endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>trace3</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro>         <cpp:value>cout &lt;&lt;#a&lt;&lt;":"&lt;&lt;a&lt;&lt;" | "&lt;&lt;#b&lt;&lt;":"&lt;&lt;b&lt;&lt;" | "&lt;&lt;#c&lt;&lt;":"&lt;&lt;c&lt;&lt;endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>trace4</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro>       <cpp:value>cout &lt;&lt;#a&lt;&lt;":"&lt;&lt;a&lt;&lt;" | "&lt;&lt;#b&lt;&lt;":"&lt;&lt;b&lt;&lt;" | "&lt;&lt;#c&lt;&lt;":"&lt;&lt;c&lt;&lt;" | "&lt;&lt;#d&lt;&lt;":"&lt;&lt;d&lt;&lt;endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>trace5</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro>     <cpp:value>cout &lt;&lt;#a&lt;&lt;":"&lt;&lt;a&lt;&lt;" | "&lt;&lt;#b&lt;&lt;":"&lt;&lt;b&lt;&lt;" | "&lt;&lt;#c&lt;&lt;":"&lt;&lt;c&lt;&lt;" | "&lt;&lt;#d&lt;&lt;":"&lt;&lt;d&lt;&lt;" | "&lt;&lt;#e&lt;&lt;":"&lt;&lt;e&lt;&lt;endl;</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>inf</name> <init>= <expr><literal type="number">1e18</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>mod</name> <init>= <expr><literal type="number">987654319</literal></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>maxn</name> <init>= <expr><literal type="number">2e5</literal><operator>+</operator><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ldb</name></type> <name>PI</name> <init>= <expr><call><name>acos</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>lol</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<expr_stmt><expr><name>cerr</name><operator>&lt;&lt;</operator><literal type="string">"check........................................... "</literal><operator>&lt;&lt;</operator><name>s</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>}</block></function>
<function><type><name>ll</name></type> <name>power</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<decl_stmt><decl><type><name>ll</name></type> <name>res</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> <expr_stmt><expr><name>x</name><operator>%=</operator><name>mod</name></expr>;</expr_stmt> <while>while<condition>(<expr><name>y</name></expr>)</condition> <block>{<if>if<condition>(<expr><name>y</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>res</name><operator>=</operator><operator>(</operator><name>res</name><operator>*</operator><name>x</name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt></block></then></if> <expr_stmt><expr><name>y</name><operator>&gt;&gt;=</operator><literal type="number">1LL</literal></expr>;</expr_stmt> <expr_stmt><expr><name>x</name><operator>=</operator><operator>(</operator><name>x</name><operator>*</operator><name>x</name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt> }</block></while><return>return <expr><name>res</name></expr>;</return>}</block></function>
<function><type><name>ll</name></type> <name>inv</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<return>return <expr><call><name>power</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>mod</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return>}</block></function><comment type="line">//(1/x)%y = x^(y-2) % y;   // pow(x,y)%m = pow(x,y%(m-1))%m</comment>
<decl_stmt><decl><type><name>mt19937</name></type> <name>rng</name><argument_list>(<argument><expr><call><name><name>chrono</name><operator>::</operator><name>steady_clock</name><operator>::</operator><name>now</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>time_since_epoch</name><argument_list>()</argument_list></call><operator>.</operator><call><name>count</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name>ios_tie</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>t</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition>
	<block>{
		<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>s</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name><name>V</name><argument_list type="generic">&lt;<argument><expr><name>pll</name></expr></argument>&gt;</argument_list></name></type> <name>v</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ll</name></type> <name><name>freq</name><index>[<expr><literal type="number">26</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>auto</name></type> <name>it</name><range>:<expr><name>s</name></expr></range></decl></init>)</control>
			<block type="pseudo"><expr_stmt><expr><name><name>freq</name><index>[<expr><name>it</name><operator>-</operator><literal type="char">'a'</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block></for>
		<for>for<control>(<init><decl><type><name>auto</name></type> <name>it</name><range>:<expr><name>t</name></expr></range></decl></init>)</control>
			<block type="pseudo"><expr_stmt><expr><name><name>freq</name><index>[<expr><name>it</name><operator>-</operator><literal type="char">'a'</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block></for>
		<decl_stmt><decl><type><name>bool</name></type> <name>ok</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<macro><name>rep0</name><argument_list>(<argument>i</argument>,<argument><literal type="number">26</literal></argument>)</argument_list></macro>
			<if>if<condition>(<expr><name><name>freq</name><index>[<expr><name>i</name></expr>]</index></name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><name>ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
		<if>if<condition>(<expr><operator>!</operator><name>ok</name></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"NO\n"</literal></expr>;</expr_stmt>
			<continue>continue;</continue>
		}</block></then></if>
		<macro><name>rep0</name><argument_list>(<argument>i</argument>,<argument><literal type="number">26</literal></argument>)</argument_list></macro>
		<block>{
			<decl_stmt><decl><type><name>ll</name></type> <name>x</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>y</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
			<macro><name>rep0</name><argument_list>(<argument>j</argument>,<argument>n</argument>)</argument_list></macro>
			<block>{
				<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal><operator>==</operator><name>i</name> <operator>&amp;&amp;</operator> <name><name>t</name><index>[<expr><name>j</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal><operator>==</operator><name>i</name></expr>)</condition><then>
					<block type="pseudo"><continue>continue;</continue></block></then></if>
				<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal><operator>==</operator><name>i</name></expr>)</condition><then>
				<block>{
					<if>if<condition>(<expr><name>x</name><operator>==</operator><operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>y</name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
						<block type="pseudo"><expr_stmt><expr><name>x</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt></block></then>
					<elseif>else <if>if<condition>(<expr><name>y</name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
					<block>{
						<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>t</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><block>{<expr><name>x</name></expr>,<expr><name>j</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
					}</block></then></if></elseif>
					<else>else
					<block>{
						<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>y</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>t</name><index>[<expr><name>y</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>y</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>t</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><block>{<expr><name>y</name></expr>,<expr><name>y</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><block>{<expr><name>y</name></expr>,<expr><name>j</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
					}</block></else></if>
				}</block></then>
				<elseif>else <if>if<condition>(<expr><name><name>t</name><index>[<expr><name>j</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal><operator>==</operator><name>i</name></expr>)</condition><then>
				<block>{
					<if>if<condition>(<expr><name>x</name><operator>==</operator><operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>y</name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
						<block type="pseudo"><expr_stmt><expr><name>y</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt></block></then>
					<elseif>else <if>if<condition>(<expr><name>x</name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
					<block>{
						<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>t</name><index>[<expr><name>y</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><block>{<expr><name>j</name></expr>,<expr><name>y</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
					}</block></then></if></elseif>
					<else>else
					<block>{
						<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>t</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>t</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><block>{<expr><name>x</name></expr>,<expr><name>x</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><block>{<expr><name>j</name></expr>,<expr><name>x</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
					}</block></else></if>
				}</block></then></if></elseif></if>
			}</block>
		}</block>
		<if>if<condition>(<expr><call><name>sz</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call><operator>&gt;</operator><literal type="number">2</literal><operator>*</operator><name>n</name></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"NO\n"</literal></expr>;</expr_stmt>
			<continue>continue;</continue>
		}</block></then></if>
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"YES\n"</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name>sz</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
		<macro><name>rep0</name><argument_list>(<argument>i</argument>,<argument>sz(v)</argument>)</argument_list></macro>
			<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ff</name><operator>+</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ss</name><operator>+</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	}</block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
