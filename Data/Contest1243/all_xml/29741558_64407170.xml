<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29741558_64407170.cpp"><comment type="block" format="doxygen">/***********************************************************
	When you are inspired by passion 
	and you want to live for the current moment

	When your every thought and action
	has the power to become the story of your future

	When difficulties stand to demolish your Glory
	Just remember that Life is a 'Golden adverse Story'

	Withstand it to acheive your passion and dreams
	more amazingly more easily.

	Why then? When writing the story of your Life
	You want to Let someone else hold your pen

					huzaifa242Â©

***********************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>int32_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX</name></cpp:macro> <cpp:value>100005</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>x</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>y</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name>seed</name></decl>;</decl_stmt>
<function_decl><type><name>mt19937</name></type> <name>rng</name><parameter_list>(<parameter><decl><type><name>seed</name></type><init>=<expr><call><name><name>chrono</name><operator>::</operator><name>steady_clock</name><operator>::</operator><name>now</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>time_since_epoch</name><argument_list>()</argument_list></call><operator>.</operator><call><name>count</name><argument_list>()</argument_list></call></expr></init></decl></parameter>)</parameter_list>;</function_decl>
<function><specifier>inline</specifier> <type><name>int</name></type> <name>rnd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>l</name><init>=<expr><literal type="number">0</literal></expr></init></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>r</name><init>=<expr><name>INT_MAX</name></expr></init></decl></parameter>)</parameter_list>
<block>{<return>return <expr><call><call><name><name>uniform_int_distribution</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>rng</name></expr></argument>)</argument_list></call></expr>;</return>}</block></function>

<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>,<parameter><type><name>typename</name></type> <name>G</name></parameter>&gt;</parameter_list></template>
<type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator <name>&lt;&lt;</name></name> <parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>,<argument><expr><name>G</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>)</parameter_list> 
<block>{<return>return <expr><name>out</name><operator>&lt;&lt;</operator><literal type="string">"("</literal><operator>&lt;&lt;</operator><name><name>a</name><operator>.</operator><name>x</name></name><operator>&lt;&lt;</operator><literal type="string">" , "</literal><operator>&lt;&lt;</operator><name><name>a</name><operator>.</operator><name>y</name></name><operator>&lt;&lt;</operator><literal type="string">")"</literal></expr>;</return>}</block></function>

<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator <name>&lt;&lt;</name></name> <parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>)</parameter_list> 
<block>{<expr_stmt><expr><name>out</name><operator>&lt;&lt;</operator><literal type="string">"["</literal></expr>;</expr_stmt><for>for<control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier> <modifier>&amp;</modifier></type><name>i</name><range>:<expr><name>a</name></expr></range></decl></init>)</control><block type="pseudo"><expr_stmt><expr><name>out</name><operator>&lt;&lt;</operator><name>i</name><operator>&lt;&lt;</operator><literal type="string">" , "</literal></expr>;</expr_stmt></block></for><return>return <expr><name>out</name><operator>&lt;&lt;</operator><literal type="string">"]"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</return>}</block></function>

<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator <name>&lt;&lt;</name></name> <parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>)</parameter_list> 
<block>{<expr_stmt><expr><name>out</name><operator>&lt;&lt;</operator><literal type="string">"{"</literal></expr>;</expr_stmt><for>for<control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier> <modifier>&amp;</modifier></type><name>i</name><range>:<expr><name>a</name></expr></range></decl></init>)</control><block type="pseudo"><expr_stmt><expr><name>out</name><operator>&lt;&lt;</operator><name>i</name><operator>&lt;&lt;</operator><literal type="string">" , "</literal></expr>;</expr_stmt></block></for><return>return <expr><name>out</name><operator>&lt;&lt;</operator><literal type="string">"}"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</return>}</block></function>

<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>,<parameter><type><name>typename</name></type> <name>G</name></parameter>&gt;</parameter_list></template>
<type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator <name>&lt;&lt;</name></name> <parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>,<argument><expr><name>G</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>)</parameter_list> 
<block>{<expr_stmt><expr><name>out</name><operator>&lt;&lt;</operator><literal type="string">"&lt;"</literal></expr>;</expr_stmt><for>for<control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier> <modifier>&amp;</modifier></type><name>i</name><range>:<expr><name>a</name></expr></range></decl></init>)</control><block type="pseudo"><expr_stmt><expr><name>out</name><operator>&lt;&lt;</operator><name>i</name><operator>&lt;&lt;</operator><literal type="string">" , "</literal></expr>;</expr_stmt></block></for><return>return <expr><name>out</name><operator>&lt;&lt;</operator><literal type="string">"&gt;"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</return>}</block></function>

<decl_stmt><decl><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>, <parameter><type><name>size_t</name></type> <name>N</name></parameter>&gt;</parameter_list></template>
<type><name><typename>typename</typename> <name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><operator>!</operator><name><name><name>is_same</name><argument_list type="generic">&lt;<argument><expr><name><typename>typename</typename> <name><name>remove_cv</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></name></expr></argument>, <argument><expr><name>char</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></name></expr></argument>,
<argument><expr><name>ostream</name><modifier>&amp;</modifier></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></name></type> <name>operator<name>&lt;&lt;</name></name><argument_list>(<argument><expr><name>ostream</name><operator>&amp;</operator> <name>out</name></expr></argument>, <argument><expr><call><name>T</name><argument_list>(<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call><index>[<expr><name>N</name></expr>]</index></expr></argument>)</argument_list>
<argument_list>{<argument><expr><name>out</name><operator>&lt;&lt;</operator><literal type="char">'['</literal></expr></argument>;for<argument><expr><operator>(</operator><name>size_t</name> <name>i</name><operator>=</operator><literal type="number">0</literal>;<name>i</name><operator>&lt;</operator><name>N</name>;<operator>++</operator><name>i</name><operator>)</operator><name>out</name><operator>&lt;&lt;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;&lt;</operator><literal type="string">" , "</literal></expr></argument>;<argument><expr><name>out</name> <operator>&lt;&lt;</operator><literal type="string">"]"</literal><operator>&lt;&lt;</operator><name>endl</name></expr></argument>;return <argument><expr><name>out</name></expr></argument>;}</argument_list>

<name>signed</name> main<argument_list>()</argument_list><argument_list>{
	<argument><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>;
	<argument><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>;<argument><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>;
	<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ONLINE_JUDGE</name></cpp:ifndef>
		<argument><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"input.txt"</literal></expr></argument>,<argument><expr><literal type="string">"r"</literal></expr></argument>,<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr></argument>;
		<argument><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"output.txt"</literal></expr></argument>,<argument><expr><literal type="string">"w"</literal></expr></argument>,<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>;  
	<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<argument><expr><name>int</name> <name>t</name></expr></argument>;
	<argument><expr><name>cin</name><operator>&gt;&gt;</operator><name>t</name></expr></argument>;
	while<argument><expr><operator>(</operator><name>t</name><operator>--</operator><operator>)</operator><block>{
		<expr><name>int</name> <name>n</name></expr>,<expr><name>i</name></expr>,<expr><name>j</name></expr>;
		<expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;
		<expr><name>string</name> <name>a</name></expr>,<expr><name>b</name></expr>;
		<expr><name>cin</name><operator>&gt;&gt;</operator><name>a</name><operator>&gt;&gt;</operator><name>b</name></expr>;
		<expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name> <call><name>cnt</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;
		<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><expr_stmt><expr><block>{
			<expr><name><name>cnt</name><index>[<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal></expr>]</index></name><operator>++</operator></expr>;
			<expr><name><name>cnt</name><index>[<expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal></expr>]</index></name><operator>++</operator></expr>;
		}</block></expr></expr_stmt></for>
		<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">26</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><expr_stmt><expr><block>{
			<if>if<condition>(<expr><name><name>cnt</name><index>[<expr><name>i</name></expr>]</index></name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then>
				<block type="pseudo"><break>break;</break></block></then></if>
		}</block></expr></expr_stmt></for>
		<if>if<condition>(<expr><name>i</name><operator>&lt;</operator><literal type="number">26</literal></expr>)</condition><then><expr_stmt><expr><block>{
			<expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No\n"</literal></expr>;</block></expr></expr_stmt></then></if>
			<continue>continue;</continue>
		}</block>
		<name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name> <name>ans</name></expr></argument>;
		for<argument><expr><operator>(</operator><name>i</name><operator>=</operator><literal type="number">0</literal>;<name>i</name><operator>&lt;</operator><name>n</name>;<name>i</name><operator>++</operator><operator>)</operator><block>{
			<if>if<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
				<block type="pseudo"><continue>continue;</continue></block></then></if>
			<name>int</name> <name>ps</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></block></expr></argument>;
			for<argument><expr><operator>(</operator><name>j</name><operator>=</operator><name>i</name><operator>+</operator><literal type="number">1</literal>;<name>j</name><operator>&lt;</operator><name>n</name>;<name>j</name><operator>++</operator><operator>)</operator><block>{
				<if>if<condition>(<expr><name><name>b</name><index>[<expr><name>j</name></expr>]</index></name><operator>==</operator><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><expr_stmt><expr><block>{
					<expr><name>ps</name><operator>=</operator><name>j</name></expr>;</block></expr></expr_stmt></then></if>
					<break>break;</break>
				}</block>
			}</expr></argument>
			<if>if<condition>(<expr><name>ps</name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then><expr_stmt><expr><block>{
				<for>for<control>(<init><expr><name>j</name><operator>=</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><expr_stmt><expr><block>{
					<if>if<condition>(<expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then><expr_stmt><expr><block>{
						<expr><name>ps</name><operator>=</operator><name>j</name></expr>;</block></expr></expr_stmt></then></if>
						<break>break;</break>
					}</block>
				}
				<call><name>swap</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>ps</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>b</name><index>[<expr><name>ps</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
				<call><name><name>ans</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name>ps</name></expr>,<expr><name>ps</name></expr>}</block></expr></argument>)</argument_list></call></block></expr>;</expr_stmt></then></if></argument_list></decl></decl_stmt>
			}
			swap<expr_stmt><expr><operator>(</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>,</operator><name><name>b</name><index>[<expr><name>ps</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name>i</name></expr>,<expr><name>ps</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}
		cout<expr_stmt><expr><operator>&lt;&lt;</operator><literal type="string">"Yes\n"</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name><name>ans</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&lt;&lt;</operator><literal type="string">"\n"</literal></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>auto</name></type> <name>u</name><range>:<expr><name>ans</name></expr></range></decl></init>)</control>
			<block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>u</name><operator>.</operator><name>x</name></name><operator>+</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name><name>u</name><operator>.</operator><name>y</name></name><operator>+</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="string">"\n"</literal></expr>;</expr_stmt></block></for>
	}
	return <expr_stmt><expr><literal type="number">0</literal></expr>;</expr_stmt>
}
</unit>
