<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29744426_64405672.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iterator&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iomanip&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctime&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bitset&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<using>using <name>ll</name> <init>= <type><name>long</name> <name>long</name></type></init>;</using>
<using>using <name>ld</name> <init>= <type><name>long</name> <name>double</name></type></init>;</using>
<using>using <name>pll</name> <init>= <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>, <argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></type></init>;</using>


<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAXN</name> <init>= <expr><literal type="number">4e5</literal> <operator>+</operator> <literal type="number">50</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>MOD</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>char</name></type> <name><name>ff</name><index>[<expr><literal type="number">55</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>ss</name><index>[<expr><literal type="number">55</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>dof</name><parameter_list>()</parameter_list> <block>{

    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>string</name></type> <name>s1</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>string</name></type> <name>s2</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>s1</name> <operator>&gt;&gt;</operator> <name>s2</name></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator> <name>i</name></expr></incr>)</control><block>{
        <expr_stmt><expr><name><name>ff</name><index>[<expr><name>i</name></expr>]</index></name>  <operator>=</operator> <name><name>s1</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ss</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s2</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></for>

    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>answr</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>was_bad</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator> <name>i</name></expr></incr>)</control><block>{


        <if>if <condition>(<expr><name><name>ff</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>ss</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block>{

            <decl_stmt><decl><type><name>bool</name></type> <name>ok</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

            <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator> <name>j</name></expr></incr>)</control><block>{
                <if>if <condition>(<expr><name><name>ff</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name><name>ff</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block>{
                    <expr_stmt><expr><name>ok</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>

                    <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>ss</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>ff</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>answr</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name>i</name></expr>, <expr><name>j</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break>break;</break>
                }</block></then></if>

            }</block></for>

            <if>if <condition>(<expr><operator>!</operator><name>ok</name></expr>)</condition><then><block>{

                <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator> <name>j</name></expr></incr>)</control><block>{
                    <if>if <condition>(<expr><name><name>ss</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>ss</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then><block>{
                        <expr_stmt><expr><name>ok</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>

                        <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>ss</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>ff</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>answr</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name>j</name></expr>, <expr><name>i</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break>break;</break>
                    }</block></then></if>

                }</block></for>
            }</block></then></if>

            <if>if <condition>(<expr><operator>!</operator><name>ok</name></expr>)</condition><then><block>{

                <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator> <name>j</name></expr></incr>)</control><block>{
                    <if>if <condition>(<expr><name><name>ff</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>ss</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then><block>{
                        <expr_stmt><expr><name>ok</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>

                        <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>ss</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>ff</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>ff</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>ss</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>answr</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name>j</name></expr>, <expr><name>j</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>answr</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name>j</name></expr>, <expr><name>i</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break>break;</break>
                    }</block></then></if>

                }</block></for>
            }</block></then></if>

            <if>if <condition>(<expr><operator>!</operator><name>ok</name></expr>)</condition><then><block>{

                <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator> <name>j</name></expr></incr>)</control><block>{
                    <if>if <condition>(<expr><name><name>ss</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>ff</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then><block>{
                        <expr_stmt><expr><name>ok</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>

                        <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>ss</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>ff</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>ff</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>ss</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>answr</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name>j</name></expr>, <expr><name>j</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>answr</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name>i</name></expr>, <expr><name>j</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break>break;</break>
                    }</block></then></if>

                }</block></for>
            }</block></then></if>


            <if>if <condition>(<expr><operator>!</operator><name>ok</name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>was_bad</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt></block></then></if>
        }</block></then></if>

    }</block></for>

    <if>if <condition>(<expr><name>was_bad</name></expr>)</condition><then><block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No\n"</literal></expr>;</expr_stmt>
    }</block></then><else>else <block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Yes\n"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name><name>answr</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>

        <for>for <control>(<init><decl><type><name>auto</name></type> <name>el</name> <range>: <expr><name>answr</name></expr></range></decl></init>)</control><block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>el</name><operator>.</operator><name>first</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name><name>el</name><operator>.</operator><name>second</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
        }</block></for>
    }</block></else></if>

}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nn</name> <init>= <expr><literal type="number">1e5</literal> <operator>+</operator> <literal type="number">9</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>edgees</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>not_usd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>start</name><index>[<expr><name>nn</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>vertex</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>color</name></decl></parameter>)</parameter_list> <block>{

    <if>if <condition>(<expr><name><name>start</name><index>[<expr><name>vertex</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then>
        <block type="pseudo"><return>return;</return></block></then></if>

    <expr_stmt><expr><call><name><name>not_usd</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>vertex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>start</name><index>[<expr><name>vertex</name></expr>]</index></name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>look</name></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>auto</name></type> <name>el</name> <range>: <expr><name>not_usd</name></expr></range></decl></init>)</control> <block>{
        <if>if <condition>(<expr><call><name><name>edgees</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><block>{<expr><name>vertex</name></expr>, <expr><name>el</name></expr>}</block></expr></argument>)</argument_list></call> <operator>==</operator> <call><name><name>edgees</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>look</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></for>

    <for>for <control>(<init><decl><type><name>auto</name></type> <name>el</name> <range>: <expr><name>look</name></expr></range></decl></init>)</control> <block>{
        <expr_stmt><expr><call><name><name>not_usd</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <for>for <control>(<init><decl><type><name>auto</name></type> <name>el</name> <range>: <expr><name>look</name></expr></range></decl></init>)</control> <block>{
        <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
}</block></function>

<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><operator>++</operator> <name>i</name></expr></incr>)</control><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>u</name> <operator>&gt;&gt;</operator> <name>v</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>edgees</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><block>{<expr><name>u</name></expr>, <expr><name>v</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>edgees</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><block>{<expr><name>v</name></expr>, <expr><name>u</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator> <name>i</name></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><call><name><name>not_usd</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block></for>

    <decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>answr</name></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator> <name>i</name></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><call><name><name>answr</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name><name>start</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>

    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name><name>answr</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>fixed</name> <operator>&lt;&lt;</operator> <call><name>setprecision</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ONLINE_JUDGE</name></cpp:ifndef>
    <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"input.in"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"output.out"</literal></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ONLINE_JUDGE</name></cpp:ifndef>
    <comment type="line">//cout &lt;&lt; '\n' &lt;&lt; (double)clock() / CLOCKS_PER_SEC &lt;&lt; '\n';</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function></unit>
