<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29731010_64401489.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INF</name></cpp:macro> <cpp:value>0x3f3f3f3f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sc</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%d",&amp;x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>scc</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%d%d",&amp;x,&amp;y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sccc</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%d%d%d",&amp;x,&amp;y,&amp;z)</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name><init>=<expr><literal type="number">110</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>t</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>mp</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>pos</name><index>[<expr><name>N</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>position</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>cnt</name><index>[<expr><literal type="number">26</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name><name>up</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>v</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>

<function><specifier>inline</specifier> <type><name>void</name></type> <name>Swap1</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>a</name><init>=<expr><name><name>pos</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>,<decl><type ref="prev"/><name>b</name><init>=<expr><name><name>pos</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>pos</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>pos</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>up</name><index>[<expr><name>a</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>up</name><index>[<expr><name>b</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>position</name><index>[<expr><name>a</name></expr>]</index></name><operator>=</operator><name>y</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>position</name><index>[<expr><name>b</name></expr>]</index></name><operator>=</operator><name>x</name></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>T</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>sc</name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>T</name><operator>--</operator></expr>)</condition>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt> <expr_stmt><expr><call><name>sc</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>,<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>v</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>cnt</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cnt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block type="pseudo"><expr_stmt><expr><name><name>cnt</name><index>[<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal></expr>]</index></name><operator>++</operator></expr><operator>,</operator><expr><name><name>cnt</name><index>[<expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block></for>
		<decl_stmt><decl><type><name>bool</name></type> <name>flag</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">26</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block type="pseudo"><if>if <condition>(<expr><name><name>cnt</name><index>[<expr><name>i</name></expr>]</index></name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then> <block>{<expr_stmt><expr><name>flag</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt><break>break;</break>}</block></then></if></block></for>
		<if>if <condition>(<expr><operator>!</operator><name>flag</name></expr>)</condition><then> <block>{<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"No"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><continue>continue;</continue>}</block></then></if>
       	<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"Yes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
       	<block>{
       		<expr_stmt><expr><name><name>pos</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt>
       		<expr_stmt><expr><name><name>pos</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name>i</name><operator>+</operator><name>n</name></expr>;</expr_stmt>
       		<expr_stmt><expr><name><name>position</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>position</name><index>[<expr><name>i</name><operator>+</operator><name>n</name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt>
       		<expr_stmt><expr><name><name>up</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>up</name><index>[<expr><name>i</name><operator>+</operator><name>n</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
       	}</block></for>
       	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
       	<block>{
       		<if>if <condition>(<expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
       		<decl_stmt><decl><type><name>bool</name></type> <name>fg</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
       		<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
       			<block type="pseudo"><if>if <condition>(<expr><operator>!</operator><name><name>v</name><index>[<expr><name>j</name></expr>]</index></name><operator>&amp;&amp;</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then> <block>{<expr_stmt><expr><name><name>mp</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>j</name></expr><operator>,</operator><expr><name><name>mp</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><name>i</name></expr><operator>,</operator><expr><name><name>v</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>fg</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt><break>break;</break>}</block></then></if></block></for>
       		<if>if <condition>(<expr><operator>!</operator><name>fg</name></expr>)</condition><then>
       			<block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
       				<block type="pseudo"><if>if <condition>(<expr><operator>!</operator><name><name>v</name><index>[<expr><name>j</name><operator>+</operator><name>n</name></expr>]</index></name><operator>&amp;&amp;</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name><name>t</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then> <block>{<expr_stmt><expr><name><name>mp</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>j</name><operator>+</operator><name>n</name></expr><operator>,</operator><expr><name><name>mp</name><index>[<expr><name>j</name><operator>+</operator><name>n</name></expr>]</index></name><operator>=</operator><name>i</name></expr><operator>,</operator><expr><name><name>v</name><index>[<expr><name>j</name><operator>+</operator><name>n</name></expr>]</index></name><operator>=</operator><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt><break>break;</break>}</block></then></if></block></for></block></then></if>
       	}</block></for>
       	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
       	<block>{
       		<if>if <condition>(<expr><name><name>v</name><index>[<expr><name>i</name><operator>+</operator><name>n</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
       		<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
       			<block type="pseudo"><if>if <condition>(<expr><operator>!</operator><name><name>v</name><index>[<expr><name>j</name><operator>+</operator><name>n</name></expr>]</index></name><operator>&amp;&amp;</operator><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name><name>t</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then> <block>{<expr_stmt><expr><name><name>mp</name><index>[<expr><name>i</name><operator>+</operator><name>n</name></expr>]</index></name><operator>=</operator><name>j</name><operator>+</operator><name>n</name></expr><operator>,</operator><expr><name><name>mp</name><index>[<expr><name>j</name><operator>+</operator><name>n</name></expr>]</index></name><operator>=</operator><name>i</name><operator>+</operator><name>n</name></expr><operator>,</operator><expr><name><name>v</name><index>[<expr><name>j</name><operator>+</operator><name>n</name></expr>]</index></name><operator>=</operator><name><name>v</name><index>[<expr><name>i</name><operator>+</operator><name>n</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt><break>break;</break>}</block></then></if></block></for>
       	}</block></for>
       	<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></name></type> <name>ans</name></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{
			<decl_stmt><decl><type><name>int</name></type> <name>now</name><init>=<expr><name><name>pos</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>tar</name><init>=<expr><name><name>mp</name><index>[<expr><name>now</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name><name>position</name><index>[<expr><name>tar</name></expr>]</index></name><operator>==</operator><name>i</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
			<if>if <condition>(<expr><name><name>up</name><index>[<expr><name>tar</name></expr>]</index></name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><block>{<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>,<expr><name><name>position</name><index>[<expr><name>tar</name></expr>]</index></name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>Swap1</name><argument_list>(<argument><expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name><name>position</name><index>[<expr><name>tar</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><block>{<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>,<expr><name>i</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>Swap1</name><argument_list>(<argument><expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else>else
			<block>{
				<expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><block>{<expr><name><name>position</name><index>[<expr><name>tar</name></expr>]</index></name></expr>,<expr><name>i</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>Swap1</name><argument_list>(<argument><expr><name><name>position</name><index>[<expr><name>tar</name></expr>]</index></name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
		}</block></for>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><call><name><name>ans</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>ans</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d\n"</literal></expr></argument>,<argument><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fi</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>se</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	}</block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
