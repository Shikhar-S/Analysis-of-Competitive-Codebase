<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29782103_64405204.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>llu</name></cpp:macro> <cpp:value>unsigned long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(i = 0; i &lt; n; i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep1</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(i = 1; i &lt;= n; i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rev</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(i = n-1; i &gt;= 0; i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rev1</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(i = n; i &gt; 0; i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fastread</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pf</name></cpp:macro> <cpp:value>push_front</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mk</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>line</name></cpp:macro> <cpp:value>cout&lt;&lt;endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dbug</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout&lt;&lt;#n&lt;&lt;" "&lt;&lt;n&lt;&lt;"|| ";</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dbug2</name><parameter_list>(<parameter><type><name>n</name></type></parameter>, <parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout&lt;&lt;#n&lt;&lt;" "&lt;&lt;n&lt;&lt;" "&lt;&lt;#m&lt;&lt;" "&lt;&lt;m&lt;&lt;" "&lt;&lt;endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dbug3</name><parameter_list>(<parameter><type><name>n</name></type></parameter>, <parameter><type><name>m</name></type></parameter>, <parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout&lt;&lt;#n&lt;&lt;" "&lt;&lt;n&lt;&lt;" "&lt;&lt;#m&lt;&lt;" "&lt;&lt;m&lt;&lt;" "&lt;&lt;#l&lt;&lt;" "&lt;&lt;l&lt;&lt;" "&lt;&lt;endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dbug4</name><parameter_list>(<parameter><type><name>n</name></type></parameter>, <parameter><type><name>m</name></type></parameter>, <parameter><type><name>l</name></type></parameter>, <parameter><type><name>o</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout&lt;&lt;#n&lt;&lt;" "&lt;&lt;n&lt;&lt;" "&lt;&lt;#m&lt;&lt;" "&lt;&lt;m&lt;&lt;" "&lt;&lt;#l&lt;&lt;" "&lt;&lt;l&lt;&lt;" "&lt;&lt;#o&lt;&lt;" "&lt;&lt;o&lt;&lt;" "&lt;&lt;endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dbug5</name><parameter_list>(<parameter><type><name>n</name></type></parameter>, <parameter><type><name>m</name></type></parameter>, <parameter><type><name>l</name></type></parameter>, <parameter><type><name>o</name></type></parameter>, <parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout&lt;&lt;#n&lt;&lt;" "&lt;&lt;n&lt;&lt;" "&lt;&lt;#m&lt;&lt;" "&lt;&lt;m&lt;&lt;" "&lt;&lt;#l&lt;&lt;" "&lt;&lt;l&lt;&lt;" "&lt;&lt;#o&lt;&lt;" "&lt;&lt;o&lt;&lt;" "&lt;&lt;#p&lt;&lt;" "&lt;&lt;p&lt;&lt;" "&lt;&lt;endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>show_ara</name><parameter_list>(<parameter><type><name>ara</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int iii  = 0; iii &lt; n; iii++) cout&lt;&lt;ara[iii]&lt;&lt;" "; line</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>show_araln</name><parameter_list>(<parameter><type><name>ara</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int iii  = 0; iii &lt; n; iii++) cout&lt;&lt;ara[iii]&lt;&lt;endl;</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vowel</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(a == 'a' || a == 'e' || a == 'i' || a == 'o' || a == 'u')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vowelC</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(a == 'A' || a == 'E' || a == 'I' || a == 'O' || a == 'U')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>odd</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a % 2) == 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>even</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a % 2) == 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>iflower</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(c &gt;= 'a' &amp;&amp; c &lt;= 'z')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ifupper</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(c &gt;= 'A' &amp;&amp; c &lt;= 'Z')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ifnum</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(c &gt;= '0' &amp;&amp; c &lt;= '9')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ifAlpha_numaric</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(iflower(c) || ifupper(c) || ifnum(c))</cpp:value></cpp:define>
<comment type="line">//#define stll vector&lt;int&gt;v; string s, s1, s2, anss, rlts; unordered_map&lt;ll, ll&gt;ump; map&lt;ll, ll&gt;mp; unordered_set&lt;ll&gt;ust; set&lt;ll&gt;st; stack&lt;ll&gt;S; queue&lt;ll&gt;Q; deque&lt;ll&gt;dq; priority_queue&lt;ll&gt;pq; vector&lt;pair&lt;ll, ll&gt; &gt;pr;</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>binary_representation</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = 1&lt;&lt;30, J = 1; i &gt; 0; i &gt;&gt;= 1, J++){ if(!(J%4)) cout&lt;&lt;" "; (n&amp;i)? cout&lt;&lt;"1": cout&lt;&lt;"0";} line;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>swapx</name><parameter_list>(<parameter><type><name>A</name></type></parameter>, <parameter><type><name>B</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>A = A^B; B = A^B; A = A^B;</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">3e5</literal><operator>+</operator><literal type="number">100</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>NN</name> <init>= <expr><literal type="number">550</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MM</name> <init>= <expr><literal type="number">550</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>mod</name> <init>= <expr><literal type="number">9e10</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>ESP</name> <init>= <expr><literal type="number">1e-9</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type><name>v</name></decl>, <decl><type ref="prev"/><name>v1</name></decl>, <decl><type ref="prev"/><name>v2</name></decl>, <decl><type ref="prev"/><name><name>vara</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt> <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type><name>pr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>, <decl><type ref="prev"/><name>ss</name></decl>, <decl><type ref="prev"/><name>s1</name></decl>, <decl><type ref="prev"/><name>s2</name></decl>, <decl><type ref="prev"/><name>s3</name></decl>, <decl><type ref="prev"/><name>anss</name></decl>, <decl><type ref="prev"/><name>rlts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type><name>mp</name></decl>;</decl_stmt> <decl_stmt><decl><type><name><name>unordered_map</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type><name>ump</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type><name>st</name></decl>;</decl_stmt> <decl_stmt><decl><type><name><name>unordered_set</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type><name>ust</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>stack</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type><name>S</name></decl>;</decl_stmt> <decl_stmt><decl><type><name><name>queue</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type><name>Q</name></decl>;</decl_stmt> <decl_stmt><decl><type><name><name>deque</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type><name>dq</name></decl>;</decl_stmt> <decl_stmt><decl><type><name><name>priority_queue</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type><name>pq</name></decl>;</decl_stmt>

<struct>struct <name>stk</name><block>{<public type="default">
    <decl_stmt><decl><type><name>ll</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>pos</name></decl>;</decl_stmt>
</public>}</block>;</struct>

<decl_stmt><decl><type><name>ll</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>d</name></decl>,   <decl><type ref="prev"/><name>t</name></decl>, <decl><type ref="prev"/><name>tc</name></decl>,   <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>,   <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>l</name></decl>,   <decl><type ref="prev"/><name>f</name></decl>,   <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>z</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>ans</name></decl>, <decl><type ref="prev"/><name>cnt</name></decl>, <decl><type ref="prev"/><name>cnt1</name></decl>, <decl><type ref="prev"/><name>cnt2</name></decl>, <decl><type ref="prev"/><name>rlt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>mn</name> <init>= <expr><call><name><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>max</name></name><argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>mx</name> <init>= <expr><call><name><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>min</name></name><argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>mnn</name> <init>= <expr><name>INT_MAX</name></expr></init></decl>, <decl><type ref="prev"/><name>mxx</name> <init>= <expr><name>INT_MIN</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>ara</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>ara1</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>arr</name><index>[<expr><name>NN</name></expr>]</index><index>[<expr><name>MM</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name><name>ff</name><index>[<expr><name>N</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="boolean">false</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stk</name></type> <name><name>stk</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>ll</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{ <return>return <expr><call><name>abs</name><argument_list>(<argument><expr><call><name>__gcd</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>}</block></function>
<function><type><name>ll</name></type> <name>lcm</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{ <return>return <expr><call><name>abs</name><argument_list>(<argument><expr><name>a</name><operator>*</operator><name>b</name></expr></argument>)</argument_list></call><operator>/</operator><call><name>gcd</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>}</block></function>
<function><type><name>void</name></type> <name>stl_clear</name><parameter_list>()</parameter_list><block>{ <expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>v1</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>v2</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>pr</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>mp</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>ump</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>ust</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>dq</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt><for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>vara</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></for><while>while<condition>(<expr><operator>!</operator><call><name><name>Q</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{<expr_stmt><expr><call><name><name>Q</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>}</block></while><while>while<condition>(<expr><operator>!</operator><call><name><name>S</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{<expr_stmt><expr><call><name><name>S</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>}</block></while><while>while<condition>(<expr><operator>!</operator><call><name><name>pq</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{<expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>}</block></while><expr_stmt><expr><name>s</name><operator>=</operator><literal type="string">""</literal></expr>;</expr_stmt><expr_stmt><expr><name>ss</name><operator>=</operator><literal type="string">""</literal></expr>;</expr_stmt><expr_stmt><expr><name>s1</name><operator>=</operator><literal type="string">""</literal></expr>;</expr_stmt><expr_stmt><expr><name>s2</name><operator>=</operator><literal type="string">""</literal></expr>;</expr_stmt><expr_stmt><expr><name>s3</name><operator>=</operator><literal type="string">""</literal></expr>;</expr_stmt><expr_stmt><expr><name>anss</name><operator>=</operator><literal type="string">""</literal></expr>;</expr_stmt><expr_stmt><expr><name>rlts</name><operator>=</operator><literal type="string">""</literal></expr>;</expr_stmt>}</block></function>
<function><type><name>void</name></type> <name>all_clear</name><parameter_list>()</parameter_list><block>{ <expr_stmt><expr><name>a</name><operator>=</operator><name>b</name><operator>=</operator><name>c</name><operator>=</operator><name>d</name><operator>=</operator><name>t</name><operator>=</operator><name>tc</name><operator>=</operator><name>n</name><operator>=</operator><name>m</name><operator>=</operator><name>i</name><operator>=</operator><name>j</name><operator>=</operator><name>k</name><operator>=</operator><name>l</name><operator>=</operator><name>f</name><operator>=</operator><name>x</name><operator>=</operator><name>y</name><operator>=</operator><name>z</name><operator>=</operator><name>tmp</name><operator>=</operator><name>ans</name><operator>=</operator><name>cnt</name><operator>=</operator><name>cnt1</name><operator>=</operator><name>cnt2</name><operator>=</operator><name>rlt</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name>mn</name> <operator>=</operator> <call><name><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>max</name></name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><name>mx</name> <operator>=</operator> <call><name><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>min</name></name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><name>mnn</name> <operator>=</operator> <name>INT_MAX</name></expr><operator>,</operator> <expr><name>mxx</name> <operator>=</operator> <name>INT_MIN</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ara</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ara</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ara1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ara1</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>arr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>arr</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><name>NN</name><operator>*</operator><name>MM</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ff</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ff</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>stk</name><index>[<expr><name>N</name></expr>]</index></name> <operator>=</operator> <block>{}</block></expr>;</expr_stmt> <expr_stmt><expr><call><name>stl_clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>fastread</name></type>

    <name>cin</name>&gt;&gt;<name>n</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>sqrt</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>a</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>m</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>m</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;=</operator> <name>a</name></expr>)</condition><block>{
        <if>if<condition>(<expr><name>m</name> <operator>%</operator> <name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <while>while<condition>(<expr><name>m</name> <operator>%</operator> <name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{
                <expr_stmt><expr><name>m</name> <operator>/=</operator> <name>i</name></expr>;</expr_stmt>
            }</block></while>
        }</block></then></if>
        <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
    }</block></while>
<comment type="line">//    dbug2(m, v.size());</comment>
    <if>if<condition>(<expr><name>m</name> <operator>==</operator> <name>n</name></expr>)</condition><then><block>{
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>n</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    }</block></then>
    <else>else<block>{
        <if>if<condition>(<expr><name>m</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if<condition>(<expr><call><name><name>v</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
        }</block></then>
        <else>else<block>{
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
        }</block></else></if>
    }</block></else></if>

    <label><name>rett</name>:</label>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
    <expr_stmt><expr><call><name>all_clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>main</name><argument_list>()</argument_list></call></expr>;</return>
}</block></function>

</unit>
