<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29729517_64393281.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(a,b,sizeof(a))</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>,<decl><type ref="prev"/><name>n</name></decl>,<decl><type ref="prev"/><name>cnt</name></decl>,<decl><type ref="prev"/><name>flag</name></decl>,<decl><type ref="prev"/><name><name>num</name><index>[<expr><literal type="number">30</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>l</name><index>[<expr><literal type="number">500</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>r</name><index>[<expr><literal type="number">500</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>s1</name><index>[<expr><literal type="number">500</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>s2</name><index>[<expr><literal type="number">500</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>deal</name><parameter_list>()</parameter_list>
<block>{
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<if>if<condition>(<expr><name><name>s1</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name><name>s2</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
		<block>{
			<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
			<block>{
				<if>if<condition>(<expr><name><name>s1</name><index>[<expr><name>j</name></expr>]</index></name><operator>==</operator><name><name>s1</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
				<block>{
					<expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s1</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>s2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>l</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>=</operator><name>j</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>r</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>=</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
					<break>break;</break>
				}</block></then></if>
				<if>if<condition>(<expr><name><name>s2</name><index>[<expr><name>j</name></expr>]</index></name><operator>==</operator><name><name>s1</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
				<block>{
					<expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s2</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>s1</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>l</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>=</operator><name><name>r</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>=</operator><name>j</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s1</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>s2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>l</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>=</operator><name>j</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>r</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>=</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
					<break>break;</break>
				}</block></then></if>
			}</block></for>
		}</block></then></if>
	}</block></for>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition>
	<block>{
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%s%s"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><name>s1</name></expr></argument>,<argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>mp</name><argument_list>(<argument><expr><name>num</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>flag</name><operator>=</operator><name>cnt</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
			<expr_stmt><expr><name><name>num</name><index>[<expr><name><name>s1</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>num</name><index>[<expr><name><name>s2</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
		}</block></for>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">26</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block type="pseudo"><if>if<condition>(<expr><name><name>num</name><index>[<expr><name>i</name></expr>]</index></name><operator>%</operator><literal type="number">2</literal></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name>flag</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"No\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	
				<break>break;</break>
			}</block></then></if></block></for> 
		<if>if<condition>(<expr><operator>!</operator><name>flag</name></expr>)</condition><then> 
		<block>{
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Yes\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>deal</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<if>if<condition>(<expr><name>cnt</name><operator>!=</operator><literal type="number">0</literal></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>,<argument><expr><name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>cnt</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
				<block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d\n"</literal></expr></argument>,<argument><expr><name><name>l</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>r</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>	
			}</block></then>
			<else>else
			<block>{
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"1\n1 1\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>	
		}</block></then></if>
	}</block></while>
	
}</block></function></unit>
