<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29734923_64381798.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fstream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iomanip&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdlib&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<using>using <name>ll</name> <init>= <type><name>long</name> <name>long</name></type></init>;</using>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SZ</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a.size()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>push_back(a)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALL</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a.begin(), a.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>make_pair(a,b)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>mod</name> <init>= <expr><literal type="number">1000000000</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<comment type="line">//ifstream cin("input.txt");</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>k</name><operator>--</operator></expr>)</condition>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>string</name></type> <name>str1</name></decl>, <decl><type ref="prev"/><name>str2</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>str1</name> <operator>&gt;&gt;</operator> <name>str2</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>cnt1</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>cnt2</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>ind1</name></decl>, <decl><type ref="prev"/><name>ind2</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>ind1</name> <operator>=</operator> <name>ind2</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{
			<if>if <condition>(<expr><name><name>str1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>str2</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
			<block>{
				<if>if <condition>(<expr><name>ind1</name><operator>&gt;=</operator><literal type="number">0</literal></expr>)</condition><then>
				<block>{
					<expr_stmt><expr><name>ind2</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
				}</block></then>
				<else>else
				<block>{
					<expr_stmt><expr><name>ind1</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
				}</block></else></if>
				<expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><name><name>cnt1</name><index>[<expr><name><name>str1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>cnt2</name><index>[<expr><name><name>str2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
		}</block></for>
		<if>if <condition>(<expr><name>cnt</name> <operator>&gt;</operator> <literal type="number">2</literal><operator>||</operator><name>cnt</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"NO\n"</literal></expr>;</expr_stmt>
		}</block></then>
		<else>else
		<block>{
			<if>if <condition>(<expr><name>cnt</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"NO\n"</literal></expr>;</expr_stmt>
			}</block></then>
			<else>else
			<block>{
				<if>if <condition>(<expr><name><name>str1</name><index>[<expr><name>ind1</name></expr>]</index></name> <operator>==</operator> <name><name>str1</name><index>[<expr><name>ind2</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>str2</name><index>[<expr><name>ind1</name></expr>]</index></name> <operator>==</operator> <name><name>str2</name><index>[<expr><name>ind2</name></expr>]</index></name></expr>)</condition><then>
				<block>{
					<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES\n"</literal></expr>;</expr_stmt>
				}</block></then>
				<else>else
				<block>{
					<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"NO\n"</literal></expr>;</expr_stmt>
				}</block></else></if>
			}</block></else></if>
		}</block></else></if>

	}</block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
