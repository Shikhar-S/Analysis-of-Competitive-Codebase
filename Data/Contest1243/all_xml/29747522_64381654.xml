<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29747522_64381654.cpp"><comment type="line">// - Author: Ares</comment>
<comment type="line">// - Compatible with C++11 </comment>
<comment type="line">// CAN YOU GET AC IN ONE HIT? :D</comment>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>comment</name><name>(</name><name>linker</name><name>,</name> <cpp:literal>"/stack:200000000"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><cpp:literal>"Ofast,no-stack-protector"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>target</name><name>(</name><cpp:literal>"avx"</cpp:literal><name>)</name></cpp:pragma>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iomanip&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdlib&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;list&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bitset&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;random&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;chrono&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_map&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<comment type="line">//#include &lt;ext/pb_ds/tree_policy.hpp&gt;</comment>
<comment type="line">//#include &lt;ext/pb_ds/detail/standard_policies.hpp&gt;</comment>
<comment type="line">//#include &lt;ext/pb_ds/assoc_container.hpp&gt;</comment>
<comment type="line">//using namespace __gnu_pbds;</comment>
<comment type="line">//typedef tree&lt;int, null_type, less&lt;int&gt;, rb_tree_tag,</comment>
<comment type="line">//tree_order_statistics_node_update&gt; ordered_set;</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int i = (a), _b = (b); i &lt;= _b; i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FORD</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int i = (a), _b = (b); i &gt;= _b; i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REP</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int i = 0, _a = (a); i &lt; _a; ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REPD</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int i = (a) - 1; i &gt;= 0; --i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PB</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EB</name></cpp:macro> <cpp:value>emplace_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>prev</name></cpp:macro> <cpp:value>KhanhNgan</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>next</name></cpp:macro> <cpp:value>MinhTu</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>y0</name></cpp:macro> <cpp:value>chuquachula</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>y1</name></cpp:macro> <cpp:value>tacadada</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>left</name></cpp:macro> <cpp:value>uzumakinaruto</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>right</name></cpp:macro> <cpp:value>uchihasasuke</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PI</name></cpp:macro> <cpp:value>(2 * acos((double)0))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sec</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>1.0 / cos((x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>asec</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>acos(1.0 / (x))</cpp:value></cpp:define>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>int</name></type> <name>getbit</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><operator>(</operator><name>s</name> <operator>&gt;&gt;</operator> <name>i</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</return> }</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>T</name></type> <name>onbit</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name>s</name> <operator>|</operator> <operator>(</operator><call><name>T</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator></expr>;</return> }</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>T</name></type> <name>offbit</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name>s</name> <operator>&amp;</operator> <operator>(</operator><operator>~</operator><operator>(</operator><call><name>T</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator><operator>)</operator></expr>;</return> }</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>int</name></type> <name>cntbit</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>__builtin_popcountll</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>T</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{ <decl_stmt><decl><type><name>T</name></type> <name>r</name></decl>;</decl_stmt> <while>while <condition>(<expr><name>b</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{ <expr_stmt><expr><name>r</name> <operator>=</operator> <name>a</name> <operator>%</operator> <name>b</name></expr>;</expr_stmt> <expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt> <expr_stmt><expr><name>b</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt> }</block></while> <return>return <expr><name>a</name></expr>;</return>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>T</name></type> <name>lcm</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name>a</name> <operator>/</operator> <call><name>gcd</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>b</name></expr>;</return> }</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>int</name></type> <name>minimize</name><parameter_list>(<parameter><decl><type><name>T</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T</name><modifier>&amp;</modifier></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<return>return <expr><ternary><condition><expr><name>val</name> <operator>&lt;</operator> <name>a</name></expr> ?</condition><then> <expr><name>a</name> <operator>=</operator> <name>val</name></expr></then></ternary></expr><operator>,</operator> <expr><literal type="number">1</literal> <operator>:</operator> <literal type="number">0</literal></expr>;</return>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>int</name></type> <name>maximize</name><parameter_list>(<parameter><decl><type><name>T</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T</name><modifier>&amp;</modifier></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<return>return <expr><ternary><condition><expr><name>a</name> <operator>&lt;</operator> <name>val</name></expr> ?</condition><then> <expr><name>a</name> <operator>=</operator> <name>val</name></expr></then></ternary></expr><operator>,</operator> <expr><literal type="number">1</literal> <operator>:</operator> <literal type="number">0</literal></expr>;</return>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOS</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(0), cin.tie(0);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ cerr &lt;&lt; #X &lt;&lt; " = " &lt;&lt; (X) &lt;&lt; endl; }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARR</name><parameter_list>(<parameter><type><name>X</name></type></parameter>, <parameter><type><name>L</name></type></parameter>, <parameter><type><name>R</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ cerr &lt;&lt; #X &lt;&lt; " = {"; FOR(_, L, R) cerr &lt;&lt; ' ' &lt;&lt; X[_]; cerr &lt;&lt; " }\n"; }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ cerr &lt;&lt; "set " &lt;&lt; #X &lt;&lt; " = "; for (auto _:X) cerr &lt;&lt; _ &lt;&lt; ' '; cerr &lt;&lt; '\n'; }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAP</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ cerr &lt;&lt; "map " &lt;&lt; #X &lt;&lt; " = "; for (auto _:X) cerr &lt;&lt; '(' &lt;&lt; _.first &lt;&lt; ' ' &lt;&lt; _.second &lt;&lt; ')' &lt;&lt; '\n'; }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debugfunc</name><parameter_list>(<parameter><type><name>f</name></type></parameter>, <parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>printf("%s(%g) = %g\n", #f, (x), (f(x)));</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debugfunc2</name><parameter_list>(<parameter><type><name>f</name></type></parameter>, <parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>printf("%s(%g,%g) = %g\n", #f, (x), (y), (f((x), (y))));</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sqr</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) * (x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>unify</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x.erase(unique(x.begin(), x.end()), x.end())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__builtin_popcount</name></cpp:macro> <cpp:value>__builtin_popcountll</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SZ</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)(x).size())</cpp:value></cpp:define>
<decl_stmt><decl><type><name>mt19937</name></type> <name>RNG</name><argument_list>(<argument><expr><call><name><name>chrono</name><operator>::</operator><name>high_resolution_clock</name><operator>::</operator><name>now</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>time_since_epoch</name><argument_list>()</argument_list></call><operator>.</operator><call><name>count</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
<function><specifier>inline</specifier> <type><name>int</name></type> <name>myrand</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>abs</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>RNG</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ull</name>;</typedef>
<typedef>typedef <type><name><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></name></type> <name>pii</name>;</typedef>
<typedef>typedef <type><name><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></name></type> <name>pll</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAXN</name> <init>= <expr><literal type="number">5e5</literal> <operator>+</operator> <literal type="number">100</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MOD</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>MAXV</name> <init>= <expr><literal type="number">1e9</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>eps</name> <init>= <expr><literal type="number">1e-12</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>INF</name> <init>= <expr><literal type="number">2e9</literal> <operator>+</operator> <literal type="number">100</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>INF_LL</name> <init>= <expr><literal type="number">1e16</literal></expr></init></decl>;</decl_stmt>

<function><specifier>inline</specifier> <type><name>string</name></type> <name>toStr</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
	<decl_stmt><decl><type><name>string</name></type> <name>tmp</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
	<do>do <block type="pseudo"><expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>char</name><argument_list>(<argument><expr><name>x</name> <operator>%</operator> <literal type="number">10</literal> <operator>+</operator> <literal type="char">'0'</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name>tmp</name></expr>;</expr_stmt></block> while <condition>(<expr><name>x</name> <operator>/=</operator> <literal type="number">10</literal></expr>)</condition>;</do>
	<return>return <expr><name>tmp</name></expr>;</return>
}</block></function>
<function><specifier>inline</specifier> <type><name>ll</name></type> <name>toInt</name><parameter_list>(<parameter><decl><type><name>string</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{
	<decl_stmt><decl><type><name>ll</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>auto</name></type> <name>x</name><range>: <expr><name>s</name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><name>res</name> <operator>=</operator> <name>res</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <name>x</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block></for>
	<return>return <expr><name>res</name></expr>;</return>
}</block></function>
<function><specifier>inline</specifier> <type><name>string</name></type> <name>toBinStr</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
	<decl_stmt><decl><type><name>string</name></type> <name>res</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
	<do>do <block type="pseudo"><expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>x</name> <operator>%</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><literal type="string">"1"</literal></expr> </then><else>: <expr><literal type="string">"0"</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <name>res</name></expr>;</expr_stmt></block> while <condition>(<expr><name>x</name> <operator>&gt;&gt;=</operator> <literal type="number">1LL</literal></expr>)</condition>;</do>
	<return>return <expr><name>res</name></expr>;</return>
}</block></function>
<function><type><name>ll</name></type> <name>rnd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list> <block>{
	<if>if <condition>(<expr><operator>!</operator><name>k</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><call><name>myrand</name><argument_list>()</argument_list></call> <operator>%</operator> <name>MAXV</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return></block></then></if>
	<decl_stmt><decl><type><name>ll</name></type> <name>t</name> <init>= <expr><call><name>myrand</name><argument_list>()</argument_list></call> <operator>%</operator> <name>MAXV</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<return>return <expr><operator>(</operator><call><name>myrand</name><argument_list>()</argument_list></call> <operator>%</operator> <name>t</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>MAXV</name> <operator>-</operator> <name>t</name><operator>)</operator></expr>;</return>
}</block></function>
<function><type><name>ll</name></type> <name>random_gen</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sign</name></decl></parameter>)</parameter_list> <block>{
	<decl_stmt><decl><type><name>ll</name></type> <name>x</name> <init>= <expr><call><name>rnd</name><argument_list>(<argument><expr><call><name>myrand</name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>s</name> <init>= <expr><call><name>myrand</name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt> <expr_stmt><expr><name>s</name> <operator>=</operator> <ternary><condition><expr><operator>!</operator><name>s</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
	<return>return <expr><ternary><condition><expr><name>sign</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>x</name></expr> </then><else>: <expr><ternary><condition><expr><name>sign</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><operator>-</operator><name>x</name></expr> </then><else>: <expr><name>s</name> <operator>*</operator> <name>x</name></expr></else></ternary></expr></else></ternary></expr>;</return>
}</block></function>
<comment type="line">// template ends here</comment>

<function><type><name>int</name></type> <name>Ares_KN</name><parameter_list>()</parameter_list> <comment type="line">// main</comment>
<block>{
	<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>divisor</name></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>*</operator> <name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block type="pseudo"><if>if <condition>(<expr><name>n</name> <operator>%</operator> <name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><call><name><name>divisor</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>ll</name></type> <name>j</name> <init>= <expr><name>n</name> <operator>/</operator> <name>i</name></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>j</name> <operator>!=</operator> <name>i</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>divisor</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
		}</block></then></if></block></for>
	<if>if <condition>(<expr><call><name><name>divisor</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
		<block type="pseudo"><return>return <expr><operator>!</operator><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
	<decl_stmt><decl><type><name>ll</name></type> <name>d</name> <init>= <expr><name><name>divisor</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>auto</name></type> <name>x</name><range>: <expr><name>divisor</name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>gcd</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<comment type="line">//freopen(".inp", "r", stdin);	freopen(".out", "w", stdout);</comment>
	<decl_stmt><decl><type><name>IOS</name></type>
	<name>Ares_KN</name><argument_list>()</argument_list></decl>;</decl_stmt>
	<expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <literal type="string">"\nTime elapsed: "</literal> <operator>&lt;&lt;</operator> <literal type="number">1000</literal> <operator>*</operator> <call><name>clock</name><argument_list>()</argument_list></call> <operator>/</operator> <name>CLOCKS_PER_SEC</name> <operator>&lt;&lt;</operator> <literal type="string">"ms\n"</literal></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
