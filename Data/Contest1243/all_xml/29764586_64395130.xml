<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29764586_64395130.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>int</name></type> <name>main</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>minDiv</name> <init>= <expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>oneDiv</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init><decl><type><name>long</name> <name>long</name></type> <name>i</name> <init>= <expr><literal type="number">1LL</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>*</operator> <name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
		<if>if <condition>(<expr><name>n</name><operator>%</operator><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
			<if>if <condition>(<expr><name>n</name><operator>/</operator><name>i</name> <operator>==</operator> <name>i</name></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><operator>++</operator><name>cnt</name></expr>;</expr_stmt></block></then>
			<else>else
				<block type="pseudo"><expr_stmt><expr><name>cnt</name> <operator>=</operator> <name>cnt</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt></block></else></if>

			<if>if <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>minDiv</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>minDiv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then></if>
	}</block></for>

	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>ans</name></decl>;</decl_stmt>

	<if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
		<expr_stmt><expr><name>ans</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	}</block></then> <elseif>else <if>if <condition>(<expr><name>cnt</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
		<expr_stmt><expr><name>ans</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
	}</block></then></if></elseif> <else>else <block>{
		<while>while <condition>(<expr><name>n</name> <operator>%</operator> <name>minDiv</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{
			<expr_stmt><expr><name>n</name> <operator>/=</operator> <name>minDiv</name></expr>;</expr_stmt>
		}</block></while>

		<if>if <condition>(<expr><name>n</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>oneDiv</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt></block></then></if>

		<expr_stmt><expr><name>ans</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>oneDiv</name></expr> ?</condition><then> <expr><name>minDiv</name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
	}</block></else></if>

	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
}</block></function></unit>
