<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29732816_64405674.cpp"><comment type="block">/*================= *\
|  ID : aman__guta__ |
|      LANG: C++     |
\*==================*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mk</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fs</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sc</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JOKER</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio (false) ; cin.tie(0) ; cout.tie(0) ;</cpp:value></cpp:define>
<function><name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JOKER</name>
    <name>int</name></type> <name>t</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>,<decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>s</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name><name>b</name><index>[<expr><literal type="number">26</literal></expr>]</index></name><init>=<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <expr_stmt><expr><name><name>b</name><index>[<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>b</name><index>[<expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
        }</block></for>
        <decl_stmt><decl><type><name>int</name></type> <name>flag</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">26</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <if>if<condition>(<expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name><operator>%</operator><literal type="number">2</literal><operator>!=</operator><literal type="number">0</literal></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>flag</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
                <break>break;</break>
            }</block></then></if>
        }</block></for>
        <if>if<condition>(<expr><name>flag</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"NO\n"</literal></expr>;</expr_stmt>
            <continue>continue;</continue>
        }</block></then></if>
        <decl_stmt><decl><type><name>int</name></type> <name><name>arr</name><index>[<expr><literal type="number">110</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>f</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>map</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>,<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>mp</name></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name><name>mp</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><operator>(</operator><call><name>mk</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt></block></then></if>
        }</block></for>
        <for>for<control>(<init><decl><type><name>auto</name></type> <name>it</name><init>=<expr><call><name><name>mp</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>it</name><operator>!=</operator><call><name><name>mp</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>it</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <decl_stmt><decl><type><name>char</name></type> <name>p</name><init>=<expr><name><name>it</name><operator>-&gt;</operator><name>sc</name><operator>.</operator><name>fs</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>char</name></type> <name>q</name><init>=<expr><name><name>it</name><operator>-&gt;</operator><name>sc</name><operator>.</operator><name>sc</name></name></expr></init></decl>;</decl_stmt>
            <for>for<control>(<init><decl><type><name>auto</name></type> <name>itr</name><init>=<expr><name>it</name></expr></init></decl>;</init> <condition>;</condition> <incr/>)</control>
            <block>{
                <expr_stmt><expr><name>itr</name><operator>++</operator></expr>;</expr_stmt>
                <if>if<condition>(<expr><name>itr</name><operator>==</operator><call><name><name>mp</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                    <block type="pseudo"><break>break;</break></block></then></if>
                <if>if<condition>(<expr><name><name>itr</name><operator>-&gt;</operator><name>sc</name><operator>.</operator><name>fs</name></name><operator>==</operator><name>p</name></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name><name>arr</name><index>[<expr><name>f</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name><name>itr</name><operator>-&gt;</operator><name>fs</name></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>arr</name><index>[<expr><name>f</name><operator>++</operator></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name><name>it</name><operator>-&gt;</operator><name>fs</name></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>char</name></type> <name>c</name><init>=<expr><name><name>itr</name><operator>-&gt;</operator><name>sc</name><operator>.</operator><name>fs</name></name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>char</name></type> <name>d</name><init>=<expr><name><name>it</name><operator>-&gt;</operator><name>sc</name><operator>.</operator><name>sc</name></name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>sc</name><operator>.</operator><name>sc</name></name><operator>=</operator><name>c</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>itr</name><operator>-&gt;</operator><name>sc</name><operator>.</operator><name>fs</name></name><operator>=</operator><name>d</name></expr>;</expr_stmt>
                    <break>break;</break>
                }</block></then></if>
                <if>if<condition>(<expr><name><name>itr</name><operator>-&gt;</operator><name>sc</name><operator>.</operator><name>sc</name></name><operator>==</operator><name>p</name></expr>)</condition><then>
                <block>{
                    <decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>,<decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name><name>arr</name><index>[<expr><name>f</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name><name>itr</name><operator>-&gt;</operator><name>fs</name></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>arr</name><index>[<expr><name>f</name><operator>++</operator></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name><name>itr</name><operator>-&gt;</operator><name>fs</name></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>c</name><operator>=</operator><name><name>itr</name><operator>-&gt;</operator><name>sc</name><operator>.</operator><name>fs</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>d</name><operator>=</operator><name><name>itr</name><operator>-&gt;</operator><name>sc</name><operator>.</operator><name>sc</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>itr</name><operator>-&gt;</operator><name>sc</name><operator>.</operator><name>sc</name></name><operator>=</operator><name>c</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>itr</name><operator>-&gt;</operator><name>sc</name><operator>.</operator><name>fs</name></name><operator>=</operator><name>d</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>arr</name><index>[<expr><name>f</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name><name>itr</name><operator>-&gt;</operator><name>fs</name></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>arr</name><index>[<expr><name>f</name><operator>++</operator></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name><name>it</name><operator>-&gt;</operator><name>fs</name></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>c</name><operator>=</operator><name><name>itr</name><operator>-&gt;</operator><name>sc</name><operator>.</operator><name>fs</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>d</name><operator>=</operator><name><name>it</name><operator>-&gt;</operator><name>sc</name><operator>.</operator><name>sc</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>sc</name><operator>.</operator><name>sc</name></name><operator>=</operator><name>c</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>itr</name><operator>-&gt;</operator><name>sc</name><operator>.</operator><name>fs</name></name><operator>=</operator><name>d</name></expr>;</expr_stmt>
                    <break>break;</break>
                }</block></then></if>
            }</block></for>
        }</block></for>
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"YES\n"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>f</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>f</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>arr</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name><name>arr</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></for>
    }</block></while>
    <expr_stmt><expr><name>cerr</name><operator>&lt;&lt;</operator><literal type="string">"Time elapsed : "</literal><operator>&lt;&lt;</operator><call><name>clock</name><argument_list>()</argument_list></call><operator>*</operator><literal type="number">1000.0</literal><operator>/</operator><name>CLOCKS_PER_SEC</name><operator>&lt;&lt;</operator><literal type="string">"ms"</literal><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt> 
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
