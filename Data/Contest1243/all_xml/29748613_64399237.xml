<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29748613_64399237.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PB</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REP</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int i = a; i &lt;b; i++)</cpp:value></cpp:define>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>ll</cpp:value></cpp:define>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></type> <name>vl</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pi</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>trace</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout&lt;&lt;#x&lt;&lt;"="&lt;&lt;x&lt;&lt;"\n";</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(int)(x.size())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>"\n"</cpp:value></cpp:define>
<function type="operator"><template>template <parameter_list>&lt; <parameter><type><name>typename</name></type> <name>F</name></parameter>, <parameter><type><name>typename</name></type> <name>S</name></parameter> &gt;</parameter_list></template>
<type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator <name>&lt;&lt;</name></name> <parameter_list>( <parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type> <name>os</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>pair</name><argument_list type="generic">&lt; <argument><expr><name>F</name></expr></argument>, <argument><expr><name>S</name></expr></argument> &gt;</argument_list></name> <modifier>&amp;</modifier></type> <name>p</name></decl></parameter> )</parameter_list> <block>{
    <return>return <expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">"("</literal> <operator>&lt;&lt;</operator> <name><name>p</name><operator>.</operator><name>first</name></name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal> <operator>&lt;&lt;</operator> <name><name>p</name><operator>.</operator><name>second</name></name> <operator>&lt;&lt;</operator> <literal type="string">")"</literal></expr>;</return>
}</block></function>

<function type="operator"><template>template <parameter_list>&lt; <parameter><type><name>typename</name></type> <name>T</name></parameter> &gt;</parameter_list></template>
<type><name>ostream</name> <modifier>&amp;</modifier></type><name>operator <name>&lt;&lt;</name></name> <parameter_list>( <parameter><decl><type><name>ostream</name> <modifier>&amp;</modifier></type> <name>os</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>vector</name><argument_list type="generic">&lt; <argument><expr><name>T</name></expr></argument> &gt;</argument_list></name> <modifier>&amp;</modifier></type><name>v</name></decl></parameter> )</parameter_list> <block>{
    <expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">"{"</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><typename>typename</typename> <name><name>vector</name><argument_list type="generic">&lt; <argument><expr><name>T</name></expr></argument> &gt;</argument_list></name> <operator>::</operator> <name>const_iterator</name></name></type> <name>it</name></decl>;</decl_stmt>
    <for>for<control>( <init><expr><name>it</name> <operator>=</operator> <call><name><name>v</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>it</name> <operator>!=</operator> <call><name><name>v</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>it</name><operator>++</operator></expr></incr> )</control> <block>{
        <if>if<condition>( <expr><name>it</name> <operator>!=</operator> <call><name><name>v</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr> )</condition><then> <block type="pseudo"><expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <operator>*</operator><name>it</name></expr>;</expr_stmt>
    }</block></for>
    <return>return <expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">"}"</literal></expr>;</return>
}</block></function>

<function type="operator"><template>template <parameter_list>&lt; <parameter><type><name>typename</name></type> <name>T</name></parameter> &gt;</parameter_list></template>
<type><name>ostream</name> <modifier>&amp;</modifier></type><name>operator <name>&lt;&lt;</name></name> <parameter_list>( <parameter><decl><type><name>ostream</name> <modifier>&amp;</modifier></type> <name>os</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>set</name><argument_list type="generic">&lt; <argument><expr><name>T</name></expr></argument> &gt;</argument_list></name> <modifier>&amp;</modifier></type><name>v</name></decl></parameter> )</parameter_list> <block>{
    <expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">"["</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><typename>typename</typename> <name><name>set</name><argument_list type="generic">&lt; <argument><expr><name>T</name></expr></argument> &gt;</argument_list></name> <operator>::</operator> <name>const_iterator</name></name></type> <name>it</name></decl>;</decl_stmt>
    <for>for <control>( <init><expr><name>it</name> <operator>=</operator> <call><name><name>v</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>it</name> <operator>!=</operator> <call><name><name>v</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>it</name><operator>++</operator></expr></incr> )</control> <block>{
        <if>if<condition>( <expr><name>it</name> <operator>!=</operator> <call><name><name>v</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr> )</condition><then> <block type="pseudo"><expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <operator>*</operator><name>it</name></expr>;</expr_stmt>
    }</block></for>
    <return>return <expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">"]"</literal></expr>;</return>
}</block></function>

<function type="operator"><template>template <parameter_list>&lt; <parameter><type><name>typename</name></type> <name>F</name></parameter>, <parameter><type><name>typename</name></type> <name>S</name></parameter> &gt;</parameter_list></template>
<type><name>ostream</name> <modifier>&amp;</modifier></type><name>operator <name>&lt;&lt;</name></name> <parameter_list>( <parameter><decl><type><name>ostream</name> <modifier>&amp;</modifier></type> <name>os</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>map</name><argument_list type="generic">&lt; <argument><expr><name>F</name></expr></argument>, <argument><expr><name>S</name></expr></argument> &gt;</argument_list></name> <modifier>&amp;</modifier></type><name>v</name></decl></parameter> )</parameter_list> <block>{
    <expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">"["</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><typename>typename</typename> <name><name>map</name><argument_list type="generic">&lt; <argument><expr><name>F</name></expr></argument> , <argument><expr><name>S</name></expr></argument> &gt;</argument_list></name><operator>::</operator><name>const_iterator</name></name></type> <name>it</name></decl>;</decl_stmt>
    <for>for<control>( <init><expr><name>it</name> <operator>=</operator> <call><name><name>v</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>it</name> <operator>!=</operator> <call><name><name>v</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>it</name><operator>++</operator></expr></incr> )</control> <block>{
        <if>if<condition>( <expr><name>it</name> <operator>!=</operator> <call><name><name>v</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr> )</condition><then> <block type="pseudo"><expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <name><name>it</name> <operator>-&gt;</operator> <name>first</name></name> <operator>&lt;&lt;</operator> <literal type="string">" = "</literal> <operator>&lt;&lt;</operator> <name><name>it</name> <operator>-&gt;</operator> <name>second</name></name></expr> ;</expr_stmt>
    }</block></for>
    <return>return <expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">"]"</literal></expr>;</return>
}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>deb</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cerr &lt;&lt; #x &lt;&lt; " = " &lt;&lt; x &lt;&lt; endl;</cpp:value></cpp:define>



<function><type><name>int32_t</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>vi</name></type> <name>fact</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>N</name><init>=<expr><name>n</name></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>*</operator><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <if>if<condition>(<expr><name>N</name><operator>%</operator><name>i</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><call><name><name>fact</name><operator>.</operator><name>PB</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <while>while<condition>(<expr><name>N</name><operator>%</operator><name>i</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><block>{
                <expr_stmt><expr><name>N</name><operator>=</operator><name>N</name><operator>/</operator><name>i</name></expr>;</expr_stmt>
            }</block></while>
        }</block></then></if>
    }</block></for>
    <if>if<condition>(<expr><name>N</name><operator>!=</operator><literal type="number">1</literal></expr>)</condition><then><block>{
        <expr_stmt><expr><call><name><name>fact</name><operator>.</operator><name>PB</name></name><argument_list>(<argument><expr><name>N</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <if>if<condition>(<expr><call><name><name>fact</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>fact</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="string">"\n"</literal></expr>;</expr_stmt>
    }</block></then>
    <else>else<block>{
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="string">"\n"</literal></expr>;</expr_stmt>
    }</block></else></if>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
