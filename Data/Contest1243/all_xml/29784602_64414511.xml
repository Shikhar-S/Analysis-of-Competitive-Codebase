<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29784602_64414511.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ext/pb_ds/assoc_container.hpp&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ext/pb_ds/tree_policy.hpp&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<using>using <namespace>namespace <name>__gnu_pbds</name>;</namespace></using>
 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PI</name></cpp:macro> <cpp:value>3.1415926535</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pf</name></cpp:macro> <cpp:value>push_front</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ull</name></cpp:macro> <cpp:value>unsigned long long int</cpp:value></cpp:define> 
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type>  <name>pii</name>;</typedef>  
<decl_stmt><decl><type><name>uint64_t</name></type> <name>seed</name> <init>= <expr><cast type="reinterpret">reinterpret_cast<argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><operator>new</operator> <name>char</name></expr></argument>)</argument_list></cast></expr></init></decl>;</decl_stmt>
<function_decl><type><name>mt19937_64</name></type> <name>rd</name><parameter_list>(<parameter><decl><type><name>seed</name></type></decl></parameter>)</parameter_list>;</function_decl>
<comment type="line">//uniform_int_distribution&lt;int&gt; rg(1, n);</comment>
<comment type="line">//int RandomNumber = rg(rd);</comment>
<comment type="line">// vector &lt; int &gt; v(N,-1);   sqrtl for square root of ll</comment>
<comment type="line">// vector of size N with initial value -1 </comment>
<typedef>typedef <type><name><name>tree</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>null_type</name></expr></argument>, <argument><expr><name><name>less</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>rb_tree_tag</name></expr></argument>, <argument><expr><name>tree_order_statistics_node_update</name></expr></argument>&gt;</argument_list></name></type> <name>pbds</name>;</typedef>
<typedef>typedef <type><name><name>tree</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>null_type</name></expr></argument>, <argument><expr><name><name>less</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>rb_tree_tag</name></expr></argument>, <argument><expr><name>tree_order_statistics_node_update</name></expr></argument>&gt;</argument_list></name></type> <name>OST</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gc</name></cpp:macro> <cpp:value>getchar_unlocked</cpp:value></cpp:define>
 
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name><init>=<expr><literal type="number">10000006</literal></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name> <parameter_list>()</parameter_list>     
<block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name>l</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>n</name></decl>,<decl><type ref="prev"/><name>p</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>string</name></type> <name>str</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>string</name></type> <name>ptr</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>str</name><operator>&gt;&gt;</operator><name>ptr</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name><name>f1</name><index>[<expr><literal type="number">26</literal></expr>]</index></name><init>=<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>  
        <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
            <expr_stmt><expr><name><name>f1</name><index>[<expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>  <expr_stmt><expr><name><name>f1</name><index>[<expr><name><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
        }</block></for>
        <decl_stmt><decl><type><name>int</name></type> <name>fg</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">26</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <if>if<condition>(<expr><name><name>f1</name><index>[<expr><name>i</name></expr>]</index></name><operator>%</operator><literal type="number">2</literal></expr>)</condition><then><block>{
                <expr_stmt><expr><name>fg</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>  <break>break;</break>
            }</block></then></if>
        }</block></for>
        <decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>pii</name></expr></argument>&gt;</argument_list></name></type> <name>v</name></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>fg</name></expr>)</condition><then><block>{
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>  <continue>continue;</continue>
        }</block></then></if>
        <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <if>if<condition>(<expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block>{
                <decl_stmt><decl><type><name>char</name></type> <name>x</name></decl>;</decl_stmt>
                <for>for<control>(<init><expr><name>j</name><operator>=</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
                <block>{
                    <if>if<condition>(<expr><name><name>str</name><index>[<expr><name>j</name></expr>]</index></name><operator>==</operator><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block>{
                        <expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><block>{<expr><name>j</name></expr>,<expr><name>i</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>x</name><operator>=</operator><name><name>str</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>  
                        <expr_stmt><expr><name><name>str</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><name><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>x</name></expr>;</expr_stmt>
                        <break>break;</break>
                    }</block></then></if>
                }</block></for>
                <if>if<condition>(<expr><name>j</name><operator>==</operator><name>n</name></expr>)</condition><then>  <block>{
                    <for>for<control>(<init><expr><name>j</name><operator>=</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
                    <block>{
                        <if>if<condition>(<expr><name><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name><name>ptr</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then><block>{
                            <expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><block>{<expr><name>i</name></expr>,<expr><name>j</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><name>x</name><operator>=</operator><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
                            <expr_stmt><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>ptr</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
                            <expr_stmt><expr><name><name>ptr</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><name>x</name></expr>;</expr_stmt>
                            <break>break;</break>
                        }</block></then></if>
                    }</block></for>
                    <if>if<condition>(<expr><name>j</name><operator>==</operator><name>n</name></expr>)</condition><then><block>{
                        <decl_stmt><decl><type><name>char</name></type> <name>x</name><init>=<expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>x</name></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><block>{<expr><name>i</name></expr>,<expr><name>i</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <for>for<control>(<init><expr><name>j</name><operator>=</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
                        <block>{
                            <if>if<condition>(<expr><name><name>str</name><index>[<expr><name>j</name></expr>]</index></name><operator>==</operator><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block>{
                                <expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><block>{<expr><name>j</name></expr>,<expr><name>i</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <expr_stmt><expr><name>x</name><operator>=</operator><name><name>str</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>  
                                <expr_stmt><expr><name><name>str</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><name><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
                                <expr_stmt><expr><name><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>x</name></expr>;</expr_stmt>
                                <break>break;</break>
                            }</block></then></if>
                        }</block></for>
                        <if>if<condition>(<expr><name>j</name><operator>==</operator><name>n</name></expr>)</condition><then>   <block>{
                            <for>for<control>(<init><expr><name>j</name><operator>=</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
                            <block>{
                                <if>if<condition>(<expr><name><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name><name>ptr</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then><block>{
                                    <expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><block>{<expr><name>i</name></expr>,<expr><name>j</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    <expr_stmt><expr><name>x</name><operator>=</operator><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
                                    <expr_stmt><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>ptr</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
                                    <expr_stmt><expr><name><name>ptr</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><name>x</name></expr>;</expr_stmt>
                                    <break>break;</break>
                                }</block></then></if>
                            }</block></for>
                            <if>if<condition>(<expr><name>j</name><operator>==</operator><name>n</name></expr>)</condition><then><block>{
                                <expr_stmt><expr><name>fg</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>  <break>break;</break>
                            }</block></then></if>
                        }</block></then></if>
                    }</block></then></if>
                }</block></then></if>
            }</block></then></if>
        }</block></for>
        <if>if<condition>(<expr><name>fg</name></expr>)</condition><then><block>{
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>  <continue>continue;</continue>
        }</block></then></if>
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Yes"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name><name>v</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>auto</name></type> <name>pk</name> <range>: <expr><name>v</name></expr></range></decl></init>)</control>  <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>pk</name><operator>.</operator><name>first</name></name><operator>+</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name><name>pk</name><operator>.</operator><name>second</name></name><operator>+</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></for>
    }</block></while>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

</unit>
