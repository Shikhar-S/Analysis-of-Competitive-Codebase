<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29738328_64399408.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M</name></cpp:macro> <cpp:value>998244353</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>v.begin(),v.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ios</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<function><type><name>int32_t</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
<decl_stmt><decl><type><name>ios</name>
<name>int</name></type> <name>t</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<comment type="line">//cin&gt;&gt;t;</comment>
<while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>n</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="number">1</literal></expr>;</expr_stmt>}</block></then>
    <else>else<block>{
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>div</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>tn</name><init>=<expr><name>n</name></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>i</name><operator>*</operator><name>i</name><operator>&lt;=</operator><name>n</name></expr>)</condition>
    <block>{
        <if>if<condition>(<expr><name>n</name><operator>%</operator><name>i</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name><name>div</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <while>while<condition>(<expr><name>n</name><operator>%</operator><name>i</name><operator>==</operator><literal type="number">0</literal></expr>)</condition>
            <block type="pseudo"><expr_stmt><expr><name>n</name><operator>/=</operator><name>i</name></expr>;</expr_stmt></block></while>
        }</block></then></if>
        <expr_stmt><expr><name>i</name><operator>+=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    }</block></while>
    <if>if<condition>(<expr><name>n</name><operator>&gt;</operator><literal type="number">1</literal></expr>)</condition><then><block>{<expr_stmt><expr><call><name><name>div</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></then></if>
    <decl_stmt><decl><type><name>int</name></type> <name>sz</name><init>=<expr><call><name><name>div</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>mn</name><init>=<expr><literal type="number">1e18</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>sz</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><name>i</name></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>sz</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>g</name><init>=<expr><call><name>__gcd</name><argument_list>(<argument><expr><name><name>div</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>div</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>mn</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>mn</name></expr></argument>,<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></for>
    <if>if<condition>(<expr><name>sz</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
    <block>{
        <if>if<condition>(<expr><name><name>div</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><name>tn</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>tn</name></expr>;</expr_stmt></block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>div</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block></else></if>
    }</block></then>
    <else>else <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>mn</name></expr>;</expr_stmt></block></else></if>}</block></else></if>
}</block></while>
}</block></function>
</unit>
