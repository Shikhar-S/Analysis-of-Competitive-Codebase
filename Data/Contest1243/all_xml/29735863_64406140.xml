<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29735863_64406140.cpp"><comment type="block">/*
When you walk through a storm
Hold your head up high
And don't be afraid of the dark
At the end of the storm
There's a golden sky
And the sweet silver song
of the lark
Walk on, through the wind
Walk on, through the rain
Though your dreams be tossed
and blown
Walk on, walk on
With hope in your heart
And you'll never walk alone
YNWA
*/</comment>
 
<comment type="line">//hell_hacker</comment>
<comment type="line">//IT TAKES EVERYTHING and IT IS NOT LUCK</comment>
<comment type="line">//PICK ME LAST -- COME OUT OF N^WHERE</comment>
<comment type="line">//WHY NOT?</comment>
 
<comment type="block">/*
And you came my way on a winner's day
Shouted loudly come out and play
Can't you tell I got news for you
Sun is shining and so are you
*/</comment>
 
<comment type="line">// author: SweetPrinces</comment>
 
<comment type="block">/*
 
___ââââ______ââââââââ
__âââââââââââââââââââ
_ââââââââââââââââ__âââ
âââ___âââââââââââ__âââ
âââ__ââââââââââââ_ââ
_ââââââââââââââââââ
___âââââââââââââââ_â___ââ___ââ
___âââââââââââââââââ___ââ__ââ
___âââââââ___âââ____ââ___ââ_ââ
____ââââ__ââââââââââ_____âââââ
_____ââââ_____ââ_âââ______ââââââ
___ââââââââââââ_âââââââââââ
__âââââââââââââââââââââââ
_ââââââââ___ââ__âââââââââ
_âââââââ_________âââââ
 
*/</comment>
 
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><cpp:literal>"O3"</cpp:literal><name>)</name></cpp:pragma>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ext/pb_ds/detail/standard_policies.hpp&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ext/pb_ds/assoc_container.hpp&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ext/pb_ds/tree_policy.hpp&gt;</cpp:file></cpp:include>
 
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<using>using <namespace>namespace <name>__gnu_pbds</name>;</namespace></using>
 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro>                  <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ull</name></cpp:macro>                 <cpp:value>unsigned long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ld</name></cpp:macro>                  <cpp:value>long double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f</name></cpp:macro>                   <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro>                  <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SpeedForce</name></cpp:macro>          <cpp:value>ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sqr</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>              <cpp:value>((x)*(x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>forn</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>          <cpp:value>for(ll i=0;i&lt;n;++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>forl</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>       <cpp:value>for(ll i=(a);i&lt;=(b);++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ford</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>       <cpp:value>for(int i=(a);i&gt;=(b);--i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>forg</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>for(ll i=(a);i&lt;=(b);i += (c))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cno</name></cpp:macro>                 <cpp:value>cout&lt;&lt;"NO";return 0;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cye</name></cpp:macro>                 <cpp:value>cout&lt;&lt;"YES";return 0;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro>                  <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro>                  <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fbo</name></cpp:macro>                 <cpp:value>find_by_order</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ofk</name></cpp:macro>                 <cpp:value>order_of_key</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro>              <cpp:value>(a).begin(), (a).end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb1</name></cpp:macro>                 <cpp:value>pop_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>               <cpp:value>((int)(x).size())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fill</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>          <cpp:value>memset(a, x, sizeof(a))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro>            <cpp:value>makeDebugInfo(#v, v)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dbg</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro>              <cpp:value>out.put(makeDebugInfo(#v, v)), cout.flush()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_read</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>            <cpp:value>freopen(x, "r", stdin)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_write</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>           <cpp:value>freopen(x, "w", stdout)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>files</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>            <cpp:value>_read(x ".in"); _write(x ".out")</cpp:value></cpp:define>
 
<typedef>typedef <type><name><name>pair</name> <argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></type> <name>pii</name>;</typedef>
<typedef>typedef <type><name><name>pair</name> <argument_list type="generic">&lt; <argument><expr><name>char</name></expr></argument>, <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></type> <name>pci</name>;</typedef>
<typedef>typedef <type><name><name>pair</name> <argument_list type="generic">&lt; <argument><expr><name>pii</name></expr></argument>, <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></type> <name>ppii</name>;</typedef>
<typedef>typedef <type><name><name>pair</name> <argument_list type="generic">&lt; <argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument> &gt;</argument_list></name></type> <name>pll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name> <argument_list type="generic">&lt; <argument><expr><name>ull</name></expr></argument>, <argument><expr><name>ull</name></expr></argument> &gt;</argument_list></name></type> <name>puu</name>;</typedef>
<typedef>typedef <type><name><name>pair</name> <argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument>, <argument><expr><name>string</name></expr></argument> &gt;</argument_list></name></type> <name>pis</name>;</typedef>
<typedef>typedef <type><name><name>pair</name> <argument_list type="generic">&lt; <argument><expr><name>string</name></expr></argument>, <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></type> <name>psi</name>;</typedef>
<typedef>typedef <type><name><name>map</name> <argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></type> <name>mii</name>;</typedef>
<typedef>typedef <type><name><name>map</name> <argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></type> <name>mii</name>;</typedef>
<typedef>typedef <type><name><name>map</name> <argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument>, <argument><expr><name>char</name></expr></argument> &gt;</argument_list></name></type> <name>mic</name>;</typedef>
<typedef>typedef <type><name><name>map</name> <argument_list type="generic">&lt; <argument><expr><name>string</name></expr></argument>, <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></type> <name>msi</name>;</typedef>
<typedef>typedef <type><name><name>map</name> <argument_list type="generic">&lt; <argument><expr><name>string</name></expr></argument>, <argument><expr><name>string</name></expr></argument> &gt;</argument_list></name></type> <name>mss</name>;</typedef>
<typedef>typedef <type><name><name>map</name> <argument_list type="generic">&lt; <argument><expr><name>char</name></expr></argument>, <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></type> <name>mci</name>;</typedef>
<typedef>typedef <type><name><name>map</name> <argument_list type="generic">&lt; <argument><expr><name>char</name></expr></argument>, <argument><expr><name>ll</name></expr></argument> &gt;</argument_list></name></type> <name>mcl</name>;</typedef>
<typedef>typedef <type><name><name>map</name> <argument_list type="generic">&lt; <argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument> &gt;</argument_list></name></type> <name>mll</name>;</typedef>
<typedef>typedef <type><name><name>map</name> <argument_list type="generic">&lt; <argument><expr><name>pii</name></expr></argument>, <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></type> <name>mpii</name>;</typedef>
<typedef>typedef <type><name><name>vector</name> <argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></type> <name>vi</name>;</typedef>
<typedef>typedef <type><name><name>vector</name> <argument_list type="generic">&lt; <argument><expr><name>vi</name></expr></argument> &gt;</argument_list></name></type> <name>vvi</name>;</typedef>
<typedef>typedef <type><name><name>vector</name> <argument_list type="generic">&lt; <argument><expr><name>char</name></expr></argument> &gt;</argument_list></name></type> <name>vc</name>;</typedef>
<typedef>typedef <type><name><name>vector</name> <argument_list type="generic">&lt; <argument><expr><name>ll</name></expr></argument> &gt;</argument_list></name></type> <name>vll</name>;</typedef>
<typedef>typedef <type><name><name>vector</name> <argument_list type="generic">&lt; <argument><expr><name>pii</name></expr></argument> &gt;</argument_list></name></type> <name>vpii</name>;</typedef>
<typedef>typedef <type><name><name>vector</name> <argument_list type="generic">&lt; <argument><expr><name>pll</name></expr></argument> &gt;</argument_list></name></type> <name>vpll</name>;</typedef>
<typedef>typedef <type><name><name>vector</name> <argument_list type="generic">&lt; <argument><expr><name>pis</name></expr></argument> &gt;</argument_list></name></type> <name>vpis</name>;</typedef>
<typedef>typedef <type><name><name>map</name> <argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument>, <argument><expr><name>vpii</name></expr></argument> &gt;</argument_list></name></type> <name>mivpi</name>;</typedef>
<typedef>typedef <type><name><name>set</name> <argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></type> <name>si</name>;</typedef>
<typedef>typedef <type><name><name>set</name> <argument_list type="generic">&lt; <argument><expr><name>char</name></expr></argument> &gt;</argument_list></name></type> <name>sc</name>;</typedef>
<typedef>typedef <type><name><name>set</name> <argument_list type="generic">&lt; <argument><expr><name>ll</name></expr></argument> &gt;</argument_list></name></type> <name>sll</name>;</typedef>
<typedef>typedef <type><name><name>set</name><argument_list type="generic">&lt; <argument><expr><name><name>pair</name> <argument_list type="generic">&lt; <argument><expr><name>ull</name></expr></argument>, <argument><expr><name>ull</name></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>spuu</name>;</typedef>
<typedef>typedef <type><name><name>set</name><argument_list type="generic">&lt; <argument><expr><name>pii</name></expr></argument> &gt;</argument_list></name></type> <name>spii</name>;</typedef>
<typedef>typedef <type><name><name>priority_queue</name><argument_list type="generic">&lt; <argument><expr><name>ll</name></expr></argument> &gt;</argument_list></name></type> <name>pqll</name>;</typedef>
 
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">50</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>M</name> <init>= <expr><literal type="number">60</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAXK</name> <init>= <expr><literal type="number">1e5</literal><operator>+</operator><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>Candy</name> <init>= <expr><literal type="number">1e6</literal><operator>+</operator><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mod</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MOD</name> <init>= <expr><literal type="number">998244353</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>INF</name> <init>= <expr><literal type="number">1e18</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>PI</name> <init>= <expr><literal type="number">3.1415926535897932384626433</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ld</name></type> <name>EPS</name> <init>= <expr><literal type="number">1e-12</literal></expr></init></decl>;</decl_stmt>
 
 
<using><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> using <name>ordered_set</name> <init>= <type><name><name>tree</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name>null_type</name></expr></argument>, <argument><expr><name><name>less</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>rb_tree_tag</name></expr></argument>, <argument><expr><name>tree_order_statistics_node_update</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
 
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>int</name></type> <name>sgn</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><operator>(</operator><call><name>T</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>val</name><operator>)</operator> <operator>-</operator> <operator>(</operator><name>val</name> <operator>&lt;</operator> <call><name>T</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
}</block></function>
 
<function><type><name>char</name></type> <name>getChar</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <while>while <condition>(<expr><name>c</name> <operator>&lt;=</operator> <literal type="char">' '</literal></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>c</name></expr>;</expr_stmt></block></while> <return>return <expr><name>c</name></expr>;</return> }</block></function>
 
<function><specifier>inline</specifier> <type><name>ll</name></type> <name>fast_pow</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
	<decl_stmt><decl><type><name>ll</name></type> <name>res</name> <init>= <expr><name>a</name></expr></init></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>b</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><block>{
		<if>if<condition>(<expr><name>b</name><operator>%</operator><literal type="number">2</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>ret</name><operator>*</operator><name>res</name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt></block></then></if>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>res</name><operator>*</operator><name>res</name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>b</name><operator>/=</operator><literal type="number">2</literal></expr>;</expr_stmt>
	}</block></while>
	<return>return <expr><name>ret</name></expr>;</return>
}</block></function>
 
<function><specifier>inline</specifier> <type><name>ll</name></type> <name>fact</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>f</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <macro><name>forl</name><argument_list>(<argument>i</argument>, <argument><literal type="number">2</literal></argument>, <argument>n</argument>)</argument_list></macro> <expr_stmt><expr><name>f</name> <operator>=</operator> <name>f</name> <operator>*</operator> <name>i</name> <operator>%</operator> <name>mod</name></expr>;</expr_stmt>
    <return>return <expr><name>f</name></expr>;</return>
}</block></function>
 
<function><specifier>inline</specifier> <type><name>ll</name></type> <name>Cnk</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>r</name></decl></parameter>)</parameter_list><block>{
    <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>n</name> <operator>-</operator> <name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <macro><name>ford</name><argument_list>(<argument>i</argument>, <argument>n</argument>, <argument>n - r + <literal type="number">1</literal></argument>)</argument_list></macro> <expr_stmt><expr><name>ans</name> <operator>=</operator> <operator>(</operator><name>ans</name> <operator>*</operator> <name>i</name><operator>)</operator> <operator>%</operator> <name>mod</name></expr>;</expr_stmt>
    <macro><name>forl</name><argument_list>(<argument>i</argument>, <argument><literal type="number">1</literal></argument>, <argument>r</argument>)</argument_list></macro> <expr_stmt><expr><name>ans</name> <operator>=</operator> <operator>(</operator><name>ans</name> <operator>*</operator> <call><name>fast_pow</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>mod</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>%</operator> <name>mod</name></expr>;</expr_stmt>
    <return>return <expr><name>ans</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name><name>a</name><index>[<expr><literal type="number">30</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name>SpeedForce</name></type>
    <name>cin</name> &gt;&gt; <name>k</name></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>k</name><operator>--</operator></expr>)</condition><block>{
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>s</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>vi</name></type> <name>g</name></decl>;</decl_stmt>
        <macro><name>forn</name><argument_list>(<argument>i</argument>, <argument>n</argument>)</argument_list></macro><block>{
            <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block>{
                <expr_stmt><expr><name><name>a</name><index>[<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>a</name><index>[<expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>g</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block>
		<decl_stmt><decl><type><name>bool</name></type> <name>ok</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<macro><name>forn</name><argument_list>(<argument>i</argument>, <argument><literal type="number">26</literal></argument>)</argument_list></macro><block>{
		    <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then><block>{
		        <expr_stmt><expr><name>ok</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		    }</block></then></if>
		}</block>
		<if>if<condition>(<expr><name>ok</name></expr>)</condition><then><block>{
		    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"NO\n"</literal></expr>;</expr_stmt>
		    <continue>continue;</continue>
		}</block></then></if>
		<decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><call><name>sz</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>pii</name></expr></argument>&gt;</argument_list></name></type> <name>v</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type> <name>flag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<macro><name>forn</name><argument_list>(<argument>i</argument>, <argument>m</argument>)</argument_list></macro><block>{
            <if>if<condition>(<expr><name><name>s</name><index>[<expr><name><name>g</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>==</operator> <name><name>t</name><index>[<expr><name><name>g</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
            <expr_stmt><expr><name>ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <macro><name>forl</name><argument_list>(<argument>j</argument>, <argument>i + <literal type="number">1</literal></argument>, <argument>m - <literal type="number">1</literal></argument>)</argument_list></macro><block>{
                <if>if<condition>(<expr><name><name>t</name><index>[<expr><name><name>g</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>==</operator> <name><name>t</name><index>[<expr><name><name>g</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name></expr>)</condition><then><block>{
                    <expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><block>{<expr><name><name>g</name><index>[<expr><name>i</name></expr>]</index></name></expr>, <expr><name><name>g</name><index>[<expr><name>j</name></expr>]</index></name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name><name>g</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>t</name><index>[<expr><name><name>g</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>ok</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    <break>break;</break>
                }</block></then></if>
            }</block>
            <if>if<condition>(<expr><name>ok</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
            <macro><name>forl</name><argument_list>(<argument>j</argument>, <argument>i + <literal type="number">1</literal></argument>, <argument>m - <literal type="number">1</literal></argument>)</argument_list></macro><block>{
                <if>if<condition>(<expr><name><name>t</name><index>[<expr><name><name>g</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>==</operator> <name><name>s</name><index>[<expr><name><name>g</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name></expr>)</condition><then><block>{
                    <expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><block>{<expr><name><name>g</name><index>[<expr><name>j</name></expr>]</index></name></expr>, <expr><name><name>g</name><index>[<expr><name>j</name></expr>]</index></name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name><name>g</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>t</name><index>[<expr><name><name>g</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><block>{<expr><name><name>g</name><index>[<expr><name>i</name></expr>]</index></name></expr>, <expr><name><name>g</name><index>[<expr><name>j</name></expr>]</index></name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name><name>g</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>t</name><index>[<expr><name><name>g</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>ok</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    <break>break;</break>
                }</block></then></if>
            }</block>
            <if>if<condition>(<expr><operator>!</operator><name>ok</name></expr>)</condition><then><block>{
               <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"NO\n"</literal></expr>;</expr_stmt>
               <expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
               <break>break;</break>
            }</block></then></if>
		}</block>
		<if>if<condition>(<expr><name>flag</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES\n"</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>sz</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
		<macro><name>forn</name><argument_list>(<argument>i</argument>, <argument>sz(v)</argument>)</argument_list></macro><block>{
		    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>f</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="char">' '</literal> <operator>&lt;&lt;</operator> <name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>se</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
		}</block>
    }</block></while>
    <return>return <expr><operator>(</operator><operator>!</operator><literal type="boolean">false</literal> <operator>&amp;&amp;</operator> <operator>!</operator><literal type="boolean">true</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><call>(<name>ll</name>)<argument_list>(<argument><expr><call>(<name>ll</name>)<argument_list>(<argument><expr><literal type="number">1713</literal> <operator>+</operator> <literal type="number">2377</literal> <operator>+</operator> <literal type="number">1464</literal></expr></argument>)</argument_list></call> <operator>*</operator> <call>(<name>ll</name>)<argument_list>(<argument><expr><literal type="number">1713</literal> <operator>+</operator> <literal type="number">2377</literal> <operator>+</operator> <literal type="number">1464</literal></expr></argument>)</argument_list></call> <operator>*</operator> <call>(<name>ll</name>)<argument_list>(<argument><expr><literal type="number">1713</literal> <operator>+</operator> <literal type="number">2377</literal> <operator>+</operator> <literal type="number">1464</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <call>(<name>ll</name>)<argument_list>(<argument><expr><literal type="number">171323771464</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
}</block></function></unit>
