<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29781737_64391607.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">1e5</literal><operator>+</operator><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>t</name></decl>,<decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>string</name></type> <name>s1</name></decl>,<decl><type ref="prev"/><name>s2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name>pos</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition>
	<block>{
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>s1</name><operator>&gt;&gt;</operator><name>s2</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>pos</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>s1</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{
			<if>if<condition>(<expr><name><name>s1</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name><name>s2</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><call><name><name>pos</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
		}</block></for>
		<if>if<condition>(<expr><call><name><name>pos</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>!=</operator><literal type="number">2</literal></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No\n"</literal></expr>;</expr_stmt>
			<continue>continue;</continue>
		}</block></then>
		<else>else
		<block>{
			<if>if<condition>(<expr><operator>!</operator><operator>(</operator><name><name>s1</name><index>[<expr><name><name>pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>==</operator><name><name>s1</name><index>[<expr><name><name>pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>&amp;&amp;</operator><name><name>s2</name><index>[<expr><name><name>pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>==</operator><name><name>s2</name><index>[<expr><name><name>pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>)</operator></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No\n"</literal></expr>;</expr_stmt>
				<continue>continue;</continue>
			}</block></then></if>
			<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Yes\n"</literal></expr>;</expr_stmt>
		}</block></else></if>
	}</block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
