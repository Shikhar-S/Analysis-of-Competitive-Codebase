<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29769398_64394412.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>


<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
  <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
  <while>while<condition>(<expr><name>k</name><operator>--</operator></expr>)</condition><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>string</name></type> <name>s1</name></decl>, <decl><type ref="prev"/><name>s2</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>s1</name> <operator>&gt;&gt;</operator> <name>s2</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vec1</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>auto</name></type> <name>a</name> <range>: <expr><name>s1</name></expr></range></decl></init>)</control><block type="pseudo"><expr_stmt><expr><name><name>vec1</name><index>[<expr><name>a</name> <operator>-</operator> <literal type="char">'a'</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block></for>
    <for>for<control>(<init><decl><type><name>auto</name></type> <name>a</name> <range>: <expr><name>s2</name></expr></range></decl></init>)</control><block type="pseudo"><expr_stmt><expr><name><name>vec1</name><index>[<expr><name>a</name> <operator>-</operator> <literal type="char">'a'</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block></for>
    <decl_stmt><decl><type><name>bool</name></type> <name>flag</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>auto</name></type> <name>a</name> <range>: <expr><name>vec1</name></expr></range></decl></init>)</control><block>{
      <if>if<condition>(<expr><name>a</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then><block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No\n"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <break>break;</break>
      }</block></then></if>
    }</block></for>
    <if>if<condition>(<expr><name>flag</name></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Yes\n"</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>vec</name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>x</name> <init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block>{

      <if>if<condition>(<expr><name><name>s1</name><index>[<expr><name>x</name></expr>]</index></name> <operator>==</operator> <name><name>s2</name><index>[<expr><name>x</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
      <for>for<control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block>{
        <if>if<condition>(<expr><name><name>s2</name><index>[<expr><name>x</name></expr>]</index></name> <operator>==</operator> <name><name>s2</name><index>[<expr><name>y</name></expr>]</index></name></expr>)</condition><then>
        <block>{
          <decl_stmt><decl><type><name>char</name></type> <name>d</name> <init>= <expr><name><name>s1</name><index>[<expr><name>x</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name><name>s1</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>s2</name><index>[<expr><name>y</name></expr>]</index></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>s2</name><index>[<expr><name>y</name></expr>]</index></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>vec</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr>, <expr><name>y</name><operator>+</operator><literal type="number">1</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        }</block></then></if>
      }</block></for>
      <if>if<condition>(<expr><name><name>s1</name><index>[<expr><name>x</name></expr>]</index></name> <operator>!=</operator> <name><name>s2</name><index>[<expr><name>x</name></expr>]</index></name></expr>)</condition><then><block>{
        <for>for<control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block>{
          <if>if<condition>(<expr><name><name>s1</name><index>[<expr><name>y</name></expr>]</index></name> <operator>==</operator> <name><name>s2</name><index>[<expr><name>x</name></expr>]</index></name></expr>)</condition><then><block>{
            <decl_stmt><decl><type><name>char</name></type> <name>d</name> <init>= <expr><name><name>s2</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>s2</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s1</name><index>[<expr><name>y</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>s1</name><index>[<expr><name>y</name></expr>]</index></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>vec</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name>y</name><operator>+</operator><literal type="number">1</literal></expr>, <expr><name>n</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>s2</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s1</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>vec</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><literal type="number">1</literal><operator>+</operator><name>x</name></expr>, <expr><name>n</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
          }</block></then></if>
        }</block></for>
      }</block></then></if>
    }</block></for>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name><name>vec</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>auto</name></type> <name>a</name> <range>: <expr><name>vec</name></expr></range></decl></init>)</control><block>{
      <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>a</name><operator>.</operator><name>first</name></name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name><name>a</name><operator>.</operator><name>second</name></name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
    }</block></for>
  }</block></while>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
