<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29741579_64406262.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>s</name></type></parameter>,<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = s; i &lt; e; i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>test</name><parameter_list>(<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>int t; cin &gt;&gt; t; while(t--)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>iterate</name><parameter_list>(<parameter><type><name>it</name></type></parameter>,<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(auto it = s.begin(); it != s.end(); ++it)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pi</name>;</typedef>
<typedef>typedef <type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>si</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
  <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>setprecision</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>fixed</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
  <while>while<condition>(<expr><name>k</name><operator>--</operator></expr>)</condition> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>string</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>diffs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>unordered_map</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>count</name></decl>;</decl_stmt>
    <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro> <block>{
      <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>count</name><index>[<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>count</name><index>[<expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>diffs</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block>
    <if>if<condition>(<expr><call><name><name>diffs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Yes"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="number">0</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
      <continue>continue;</continue>
    }</block></then></if>
    <decl_stmt><decl><type><name>bool</name></type> <name>err</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><call><name><name>count</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>it</name> <operator>!=</operator> <call><name><name>count</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>it</name></expr></incr>)</control> <block>{
      <if>if<condition>(<expr><name><name>it</name> <operator>-&gt;</operator> <name>second</name></name> <operator>%</operator> <literal type="number">2</literal> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <break>break;</break>
      }</block></then></if>
    }</block></for>
    <if>if<condition>(<expr><name>err</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>sol</name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>diffs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>mindex</name> <init>= <expr><name><name>diffs</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>mindex</name></expr>]</index></name> <operator>==</operator> <name><name>b</name><index>[<expr><name>mindex</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
      <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <call><name><name>diffs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>tindex</name> <init>= <expr><name><name>diffs</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>mindex</name></expr>]</index></name> <operator>==</operator> <name><name>a</name><index>[<expr><name>tindex</name></expr>]</index></name></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name><name>sol</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name>tindex</name></expr>,<expr><name>mindex</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>b</name><index>[<expr><name>mindex</name></expr>]</index></name> <operator>=</operator> <name><name>b</name><index>[<expr><name>mindex</name></expr>]</index></name> <operator>^</operator> <name><name>a</name><index>[<expr><name>tindex</name></expr>]</index></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>a</name><index>[<expr><name>tindex</name></expr>]</index></name> <operator>=</operator> <name><name>b</name><index>[<expr><name>mindex</name></expr>]</index></name> <operator>^</operator> <name><name>a</name><index>[<expr><name>tindex</name></expr>]</index></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>b</name><index>[<expr><name>mindex</name></expr>]</index></name> <operator>=</operator> <name><name>b</name><index>[<expr><name>mindex</name></expr>]</index></name> <operator>^</operator> <name><name>a</name><index>[<expr><name>tindex</name></expr>]</index></name></expr>;</expr_stmt>
          <break>break;</break>
        }</block></then></if>
        <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>mindex</name></expr>]</index></name> <operator>==</operator> <name><name>b</name><index>[<expr><name>tindex</name></expr>]</index></name></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name><name>sol</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name>tindex</name></expr>,<expr><name>tindex</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>a</name><index>[<expr><name>tindex</name></expr>]</index></name> <operator>=</operator> <name><name>b</name><index>[<expr><name>tindex</name></expr>]</index></name> <operator>^</operator> <name><name>a</name><index>[<expr><name>tindex</name></expr>]</index></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>b</name><index>[<expr><name>tindex</name></expr>]</index></name> <operator>=</operator> <name><name>b</name><index>[<expr><name>tindex</name></expr>]</index></name> <operator>^</operator> <name><name>a</name><index>[<expr><name>tindex</name></expr>]</index></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>a</name><index>[<expr><name>tindex</name></expr>]</index></name> <operator>=</operator> <name><name>b</name><index>[<expr><name>tindex</name></expr>]</index></name> <operator>^</operator> <name><name>a</name><index>[<expr><name>tindex</name></expr>]</index></name></expr>;</expr_stmt>

          <expr_stmt><expr><call><name><name>sol</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name>tindex</name></expr>,<expr><name>mindex</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>b</name><index>[<expr><name>mindex</name></expr>]</index></name> <operator>=</operator> <name><name>b</name><index>[<expr><name>mindex</name></expr>]</index></name> <operator>^</operator> <name><name>a</name><index>[<expr><name>tindex</name></expr>]</index></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>a</name><index>[<expr><name>tindex</name></expr>]</index></name> <operator>=</operator> <name><name>b</name><index>[<expr><name>mindex</name></expr>]</index></name> <operator>^</operator> <name><name>a</name><index>[<expr><name>tindex</name></expr>]</index></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>b</name><index>[<expr><name>mindex</name></expr>]</index></name> <operator>=</operator> <name><name>b</name><index>[<expr><name>mindex</name></expr>]</index></name> <operator>^</operator> <name><name>a</name><index>[<expr><name>tindex</name></expr>]</index></name></expr>;</expr_stmt>

          <break>break;</break>
        }</block></then></if>
      }</block></for>
   }</block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
      <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <break>break;</break>
      }</block></then></if>
    }</block></for>
    <if>if<condition>(<expr><name>err</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Yes"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name><name>sol</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
      <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>sol.size()</argument>)</argument_list></macro> <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>sol</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name><operator>+</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="char">' '</literal> <operator>&lt;&lt;</operator> <name><name>sol</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name><operator>+</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    }</block></else></if>
  }</block></while>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

</unit>
