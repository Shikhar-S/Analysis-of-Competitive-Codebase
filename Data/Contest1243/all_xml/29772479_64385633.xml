<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29772479_64385633.cpp"><cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><name>2</name><name>)</name></cpp:pragma>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<comment type="line">//#define int long long</comment>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name><init>=<expr><literal type="number">1010</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name>n</name></decl>,<decl><type ref="prev"/><name>res</name></decl>,<decl><type ref="prev"/><name>T</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>dp</name><index>[<expr><literal type="number">20</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">10</literal></expr>]</index><index>[<expr><literal type="number">10</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name>l</name></decl>,<decl><type ref="prev"/><name>r</name></decl>,<decl><type ref="prev"/><name>flag</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>pre</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>st</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>ok</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>limit</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>is4</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>is8</name></decl></parameter>)</parameter_list><block>{
	<if>if<condition>(<expr><name>is4</name><operator>&amp;&amp;</operator><name>is8</name></expr>)</condition><then>	<block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
	<if>if<condition>(<expr><operator>!</operator><name>pos</name></expr>)</condition><then>	<block type="pseudo"><return>return <expr><name>ok</name></expr>;</return></block></then></if>
	<if>if<condition>(<expr><name><name>dp</name><index>[<expr><name>pos</name></expr>]</index><index>[<expr><name>ok</name></expr>]</index><index>[<expr><name>pre</name></expr>]</index><index>[<expr><name>st</name></expr>]</index><index>[<expr><name>limit</name></expr>]</index><index>[<expr><name>is4</name></expr>]</index><index>[<expr><name>is8</name></expr>]</index></name><operator>!=</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then>	
		<block type="pseudo"><return>return <expr><name><name>dp</name><index>[<expr><name>pos</name></expr>]</index><index>[<expr><name>ok</name></expr>]</index><index>[<expr><name>pre</name></expr>]</index><index>[<expr><name>st</name></expr>]</index><index>[<expr><name>limit</name></expr>]</index><index>[<expr><name>is4</name></expr>]</index><index>[<expr><name>is8</name></expr>]</index></name></expr>;</return></block></then></if>
	<decl_stmt><decl><type><name>int</name></type> <name>up</name><init>=<expr><ternary><condition><expr><name>limit</name></expr>?</condition><then><expr><name><name>a</name><index>[<expr><name>pos</name></expr>]</index></name></expr></then><else>:<expr><literal type="number">9</literal></expr></else></ternary></expr></init></decl>,<decl><type ref="prev"/><name>res</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>up</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><name>res</name><operator>+=</operator><call><name>dfs</name><argument_list>(<argument><expr><name>pos</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><name>pre</name></expr></argument>,<argument><expr><name>ok</name><operator>||</operator><name>i</name><operator>==</operator><name>pre</name><operator>&amp;&amp;</operator><name>pre</name><operator>==</operator><name>st</name></expr></argument>,<argument><expr><name>limit</name><operator>&amp;&amp;</operator><name>i</name><operator>==</operator><name>up</name></expr></argument>,<argument><expr><name>i</name><operator>==</operator><literal type="number">4</literal><operator>||</operator><name>is4</name></expr></argument>,<argument><expr><name>i</name><operator>==</operator><literal type="number">8</literal><operator>||</operator><name>is8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><name><name>dp</name><index>[<expr><name>pos</name></expr>]</index><index>[<expr><name>ok</name></expr>]</index><index>[<expr><name>pre</name></expr>]</index><index>[<expr><name>st</name></expr>]</index><index>[<expr><name>limit</name></expr>]</index><index>[<expr><name>is4</name></expr>]</index><index>[<expr><name>is8</name></expr>]</index></name><operator>=</operator><name>res</name></expr>;</expr_stmt>
	<return>return <expr><name>res</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>solve</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{
	<if>if<condition>(<expr><name>x</name><operator>&lt;</operator><literal type="number">1e10</literal></expr>)</condition><then>	<block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>	<decl_stmt><decl><type><name>int</name></type> <name>res</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>pos</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dp</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof <name>dp</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>x</name></expr>)</condition>	<block type="pseudo"><expr_stmt><expr><name><name>a</name><index>[<expr><operator>++</operator><name>pos</name></expr>]</index></name><operator>=</operator><name>x</name><operator>%</operator><literal type="number">10</literal></expr><operator>,</operator><expr><name>x</name><operator>/=</operator><literal type="number">10</literal></expr>;</expr_stmt></block></while>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name><name>a</name><index>[<expr><name>pos</name></expr>]</index></name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>	<block type="pseudo"><expr_stmt><expr><name>res</name><operator>+=</operator><call><name>dfs</name><argument_list>(<argument><expr><name>pos</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>i</name><operator>==</operator><name><name>a</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>,<argument><expr><name>i</name><operator>==</operator><literal type="number">4</literal></expr></argument>,<argument><expr><name>i</name><operator>==</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<return>return <expr><name>res</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>cmp</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
	<return>return <expr><name>a</name><operator>&gt;</operator><name>b</name></expr>;</return>
}</block></function>
<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>T</name></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>T</name><operator>--</operator></expr>)</condition><block>{
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>	<block type="pseudo"><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
		<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>a</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>a</name><operator>+</operator><literal type="number">1</literal><operator>+</operator><name>n</name></expr></argument>,<argument><expr><name>cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block type="pseudo"><if>if<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;=</operator><name>i</name></expr>)</condition><then>	<block type="pseudo"><expr_stmt><expr><name>res</name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></then>
			<else>else	<block type="pseudo"><break>break;</break></block></else></if></block></for>
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>res</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	}</block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
