<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29783864_64398715.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdlib&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cctype&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
 
<function><type><name>int</name></type> <name>read</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>f</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> <decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><call><name>getchar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block>{ <if>if<condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>f</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if> <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt> }</block></while>
    <while>while<condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block>{ <expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt> }</block></while>
    <return>return <expr><name>x</name> <operator>*</operator> <name>f</name></expr>;</return>
}</block></function>
 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>maxn</name></cpp:macro> <cpp:value>100010</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>maxm</name></cpp:macro> <cpp:value>4000010</cpp:value></cpp:define>
 
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name><name>head</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>nxt</name><index>[<expr><name>maxm</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>to</name><index>[<expr><name>maxm</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>Pre</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>Nxt</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
 
<function><type><name>void</name></type> <name>AddEdge</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>to</name><index>[<expr><operator>++</operator><name>m</name></expr>]</index></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>nxt</name><index>[<expr><name>m</name></expr>]</index></name> <operator>=</operator> <name><name>head</name><index>[<expr><name>a</name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>head</name><index>[<expr><name>a</name></expr>]</index></name> <operator>=</operator> <name>m</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>to</name><index>[<expr><operator>++</operator><name>m</name></expr>]</index></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>nxt</name><index>[<expr><name>m</name></expr>]</index></name> <operator>=</operator> <name><name>head</name><index>[<expr><name>a</name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>head</name><index>[<expr><name>a</name></expr>]</index></name> <operator>=</operator> <name>m</name></expr>;</expr_stmt>
    <return>return ;</return>
}</block></function>
 
<decl_stmt><decl><type><name>bool</name></type> <name><name>vis</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>tag</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>Q</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name>hd</name></decl>, <decl><type ref="prev"/><name>tl</name></decl>, <decl><type ref="prev"/><name>ans</name></decl>, <decl><type ref="prev"/><name><name>tot</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>del</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>lp</name> <init>= <expr><name><name>Pre</name><index>[<expr><name>u</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>ln</name> <init>= <expr><name><name>Nxt</name><index>[<expr><name>u</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>Nxt</name><index>[<expr><name>lp</name></expr>]</index></name> <operator>=</operator> <name>ln</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Pre</name><index>[<expr><name>ln</name></expr>]</index></name> <operator>=</operator> <name>lp</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>vis</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <return>return ;</return>
}</block></function>
<function><type><name>void</name></type> <name>bfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name>hd</name> <operator>=</operator> <name>tl</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>Q</name><index>[<expr><operator>++</operator><name>tl</name></expr>]</index></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>del</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>tot</name><index>[<expr><name>ans</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>hd</name> <operator>&lt;</operator> <name>tl</name></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>u</name> <init>= <expr><name><name>Q</name><index>[<expr><operator>++</operator><name>hd</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>e</name> <init>= <expr><name><name>head</name><index>[<expr><name>u</name></expr>]</index></name></expr></init></decl>;</init> <condition><expr><name>e</name></expr>;</condition> <incr><expr><name>e</name> <operator>=</operator> <name><name>nxt</name><index>[<expr><name>e</name></expr>]</index></name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>tag</name><index>[<expr><name><name>to</name><index>[<expr><name>e</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></for>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>Nxt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</init> <condition><expr><name>i</name></expr>;</condition> <incr><expr><name>i</name> <operator>=</operator> <name><name>Nxt</name><index>[<expr><name>i</name></expr>]</index></name></expr></incr>)</control> <block type="pseudo"><if>if<condition>(<expr><operator>!</operator><name><name>tag</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>del</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name><name>tot</name><index>[<expr><name>ans</name></expr>]</index></name><operator>++</operator></expr><operator>,</operator> <expr><name><name>Q</name><index>[<expr><operator>++</operator><name>tl</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block></then></if></block></for>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>e</name> <init>= <expr><name><name>head</name><index>[<expr><name>u</name></expr>]</index></name></expr></init></decl>;</init> <condition><expr><name>e</name></expr>;</condition> <incr><expr><name>e</name> <operator>=</operator> <name><name>nxt</name><index>[<expr><name>e</name></expr>]</index></name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>tag</name><index>[<expr><name><name>to</name><index>[<expr><name>e</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></for>
    }</block></while>
    <return>return ;</return>
}</block></function>
 
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><call><name>read</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>m</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><call><name>read</name><argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>b</name> <init>= <expr><call><name>read</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>AddEdge</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>Nxt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name><name>Pre</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block></for>
     
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><if>if<condition>(<expr><operator>!</operator><name><name>vis</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ans</name><operator>++</operator></expr><operator>,</operator> <expr><call><name>bfs</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></block></for>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><name>ans</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
