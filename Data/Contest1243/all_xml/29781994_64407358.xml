<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29781994_64407358.cpp"><cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><cpp:literal>"Ofast"</cpp:literal><name>)</name></cpp:pragma>   <comment type="line">//Comment optimisations for an interatcive problem - use endl</comment>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>target</name><name>(</name><cpp:literal>"avx,avx2,fma"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimization</name> <name>(</name><cpp:literal>"unroll-loops"</cpp:literal><name>)</name></cpp:pragma>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive>  <cpp:macro><name>fastio</name></cpp:macro>         <cpp:value>ios:: sync_with_stdio(0);cin.tie(0);cout.tie(0);cout&lt;&lt;fixed;cout&lt;&lt;setprecision(10);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>  <cpp:macro><name>foo</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>     <cpp:value>for(ll i = (a); i &lt;= n; i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>  <cpp:macro><name>frr</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>     <cpp:value>for(ll i = (a); i &gt;= n; i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>  <cpp:macro><name>fo</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>        <cpp:value>for(ll i = 0; i &lt; n; i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>  <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>         <cpp:value>(x).begin(),(x).end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>  <cpp:macro><name>mset</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>memset(x,val,sizeof(x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>  <cpp:macro><name>newl</name></cpp:macro>           <cpp:value>cout&lt;&lt;"\n"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>  <cpp:macro><name>pb</name></cpp:macro>             <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>  <cpp:macro><name>mp</name></cpp:macro>             <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>  <cpp:macro><name>s</name></cpp:macro>              <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>  <cpp:macro><name>f</name></cpp:macro>              <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>  <cpp:macro><name>dline</name></cpp:macro>          <cpp:value>cerr&lt;&lt;"///REACHED///\n";</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>  <cpp:macro><name>deb1</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>        <cpp:value>cerr&lt;&lt;#x&lt;&lt;" = "&lt;&lt;x&lt;&lt;'\n';</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>  <cpp:macro><name>deb2</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro>      <cpp:value>cerr&lt;&lt;'['&lt;&lt;#x&lt;&lt;','&lt;&lt;#y&lt;&lt;"] = "&lt;&lt;'['&lt;&lt;x&lt;&lt;','&lt;&lt;y&lt;&lt;']'&lt;&lt;'\n';</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>  <cpp:macro><name>deb3</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>cerr&lt;&lt;'['&lt;&lt;#x&lt;&lt;','&lt;&lt;#y&lt;&lt;','&lt;&lt;#z&lt;&lt;"] = "&lt;&lt;'['&lt;&lt;x&lt;&lt;','&lt;&lt;y&lt;&lt;','&lt;&lt;z&lt;&lt;']'&lt;&lt;'\n';</cpp:value></cpp:define>

<typedef>typedef  <type><name>long</name> <name>long</name></type>             <name>ll</name>;</typedef>
<typedef>typedef  <type><name>long</name> <name>double</name></type>           <name>ld</name>;</typedef>
<typedef>typedef  <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type>           <name>pll</name>;</typedef>
<typedef>typedef  <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type>            <name>vll</name>;</typedef>
<typedef>typedef  <type><name><name>unordered_map</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type>  <name>um</name>;</typedef>
<typedef>typedef  <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pll</name></expr></argument>&gt;</argument_list></name></type>           <name>vpll</name>;</typedef>

<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type>   <name>MAXN</name>  <init>=  <expr><literal type="number">1e+5</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type>   <name>MOD</name>   <init>=  <expr><literal type="number">1e+9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type>   <name>INF</name>   <init>=  <expr><literal type="number">0x7f7f7f7f7f7f7f7f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type>  <name>INFi</name>  <init>=  <expr><literal type="number">0x7f7f7f7f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vll</name></type> <name><name>adj</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt><decl_stmt><decl><type><name>ll</name></type> <name><name>visit</name><index>[<expr><name>MAXN</name></expr>]</index></name><init>=<expr><block>{}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>dx8</name><index>[]</index></name><init>=<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>, <decl><type ref="prev"/><name><name>dy8</name><index>[]</index></name><init>=<expr><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>dx4</name><index>[]</index></name><init>=<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>, <decl><type ref="prev"/><name><name>dy4</name><index>[]</index></name><init>=<expr><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<comment type="line">//&lt;&lt;-----Declare Variable Here-------&gt;&gt;//</comment>
<decl_stmt><decl><type><name>ll</name></type> <name>q</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>alpha1</name><index>[<expr><literal type="number">26</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>alpha2</name><index>[<expr><literal type="number">26</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vpll</name></type> <name>res</name></decl>;</decl_stmt>
<comment type="line">//&lt;&lt;-----Implement Functions Here----&gt;&gt;//</comment>


<comment type="line">//&lt;&lt;-----Start of Main---------------&gt;&gt;//</comment>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><name>fastio</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>q</name></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>q</name><operator>--</operator></expr>)</condition><block>{
		<decl_stmt><decl><type><name>ll</name></type> <name>cnt</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ll</name></type> <name>mark</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>res</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>mset</name><argument_list>(<argument><expr><name>alpha1</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>mset</name><argument_list>(<argument><expr><name>alpha2</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>s</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
		<macro><name>fo</name><argument_list>(<argument>i</argument>,<argument>n</argument>)</argument_list></macro><block>{
			<expr_stmt><expr><name><name>alpha1</name><index>[<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>alpha2</name><index>[<expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
		}</block>

		<macro><name>fo</name><argument_list>(<argument>i</argument>,<argument><literal type="number">26</literal></argument>)</argument_list></macro><block>{
			<expr_stmt><expr><name>mark</name><operator>&amp;=</operator><operator>(</operator><operator>(</operator><name><name>alpha1</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>alpha2</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
		}</block>

		<comment type="line">//cout&lt;&lt;cnt&lt;&lt;" "&lt;&lt;mark;</comment>
		<if>if<condition>(<expr><name>mark</name></expr>)</condition><then><block>{
			<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Yes\n"</literal></expr>;</expr_stmt>
			<macro><name>fo</name><argument_list>(<argument>i</argument>,<argument>n</argument>)</argument_list></macro><block>{
				<decl_stmt><decl><type><name>ll</name></type> <name>ok</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
				<macro><name>foo</name><argument_list>(<argument>j</argument>,<argument>i+<literal type="number">1</literal></argument>,<argument>n-<literal type="number">1</literal></argument>)</argument_list></macro><block>{
					<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name><operator>==</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block>{
						<comment type="line">//cout&lt;&lt;j+1&lt;&lt;" "&lt;&lt;i+1;newl;</comment>
						<expr_stmt><expr><call><name><name>res</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><block>{<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>,<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>ok</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
						<break>break;</break>
					}</block></then></if>
				}</block>
				<if>if<condition>(<expr><name>ok</name></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>

				<macro><name>foo</name><argument_list>(<argument>j</argument>,<argument>i+<literal type="number">1</literal></argument>,<argument>n-<literal type="number">1</literal></argument>)</argument_list></macro><block>{
					<if>if<condition>(<expr><name><name>t</name><index>[<expr><name>j</name></expr>]</index></name><operator>==</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block>{
						<comment type="line">//cout&lt;&lt;j+1&lt;&lt;" "&lt;&lt;j+1;newl;</comment>
						<expr_stmt><expr><call><name><name>res</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><block>{<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>,<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>t</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<comment type="line">//cout&lt;&lt;j+1&lt;&lt;" "&lt;&lt;i+1;newl;</comment>
						<expr_stmt><expr><call><name><name>res</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><block>{<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>,<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>
					}</block></then></if>
				}</block>
			}</block>
			<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name><name>res</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name>newl</name></expr>;</expr_stmt>
			<for>for<control>(<init><expr><name>auto</name> <index>[<expr><name>i</name></expr><operator>,</operator><name>j</name>]</index><operator>:</operator> <name>res</name></expr></init>)</control><block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>i</name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name>j</name><operator>&lt;&lt;</operator><literal type="string">"\n"</literal></expr>;</expr_stmt></block></for>
		}</block></then>
		<else>else<block>{
			<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No\n"</literal></expr>;</expr_stmt>
		}</block></else></if>
		
	}</block></while>

    <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ONLINE_JUDGE</name></cpp:ifndef>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"\nTime Elapsed: "</literal> <operator>&lt;&lt;</operator> <literal type="number">1.0</literal><operator>*</operator><call><name>clock</name><argument_list>()</argument_list></call> <operator>/</operator> <name>CLOCKS_PER_SEC</name> <operator>&lt;&lt;</operator> <literal type="string">" sec\n"</literal></expr>;</expr_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function></unit>
