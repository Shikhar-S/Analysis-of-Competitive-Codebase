<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29742234_64387490.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PII</name></cpp:macro> <cpp:value>pair&lt;int,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PII2</name></cpp:macro> <cpp:value>pair&lt;int,pair&lt;int,int&gt; &gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PII3</name></cpp:macro> <cpp:value>pair&lt;pair&lt;int,int&gt;,int &gt;</cpp:value></cpp:define>
<decl_stmt><decl><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>int</name></type> <name>SIZE</name><argument_list>(<argument><expr><call><name>T</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list><argument_list>{ return <argument><expr><call><name><name>t</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>; }</argument_list> template<name/>&lt;<name><typename>typename</typename> <name>T</name></name></decl>, <decl><type ref="prev"/><name>size_t</name> <name>N</name>&gt; <name>int</name> <name>SIZE</name><argument_list>(<argument><expr><call><name>T</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call><index>[<expr><name>N</name></expr>]</index></expr></argument>)</argument_list><argument_list>{ return <argument><expr><name>N</name></expr></argument>; }</argument_list> <name>string</name> <name>to_string</name><argument_list>(<argument><expr><name>char</name> <name>t</name></expr></argument>)</argument_list><argument_list>{ return <argument><expr><literal type="string">"'"</literal> <operator>+</operator> <call><name>string</name><argument_list>(<argument><expr><block>{<expr><name>t</name></expr>}</block></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"'"</literal></expr></argument>; }</argument_list> <name>string</name> <name>to_string</name><argument_list>(<argument><expr><name>bool</name> <name>t</name></expr></argument>)</argument_list><argument_list>{ return <argument><expr><ternary><condition><expr><name>t</name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>; }</argument_list> <name>string</name> <name>to_string</name><argument_list>(<argument><expr><specifier>const</specifier> <name>string</name> <operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><name>int</name> <name>x1</name><operator>=</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>int</name> <name>x2</name><operator>=</operator><literal type="number">1e9</literal></expr></argument>)</argument_list><argument_list>{ <argument><expr><name>string</name> <name>ret</name> <operator>=</operator> <literal type="string">""</literal></expr></argument>; for<argument><expr><operator>(</operator><name>int</name> <name>i</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>x1</name></expr></argument>,<argument><expr><call><name>SIZE</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>,</operator> <name>_i</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>x2</name></expr></argument>,<argument><expr><call><name>SIZE</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call>; <name>i</name> <operator>&lt;=</operator> <name>_i</name>; <operator>++</operator><name>i</name><operator>)</operator><block>{ <expr><name>ret</name> <operator>+=</operator> <name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr>; }</block></expr></argument> <return>return <expr><literal type="char">'"'</literal> <operator>+</operator> <name>ret</name> <operator>+</operator> <literal type="char">'"'</literal></expr>;</return></argument_list></decl></decl_stmt> } string <macro><name>to_string</name><argument_list>(<argument>const char* t</argument>)</argument_list></macro><block>{ <function_decl><type><name>string</name></type> <name>ret</name><parameter_list>(<parameter><decl><type><name>t</name></type></decl></parameter>)</parameter_list>;</function_decl> <return>return <expr><call><name>to_string</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</return> }</block> <function><template>template<parameter_list>&lt;<parameter><type><name>size_t</name></type> <name>N</name></parameter>&gt;</parameter_list></template> <type><name>string</name></type> <name>to_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>bitset</name><argument_list type="generic">&lt;<argument><expr><name>N</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x1</name><init>=<expr><literal type="number">0</literal></expr></init></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x2</name><init>=<expr><literal type="number">1e9</literal></expr></init></decl></parameter>)</parameter_list><block>{ <decl_stmt><decl><type><name>string</name></type> <name>ret</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt> <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name>x1</name></expr></argument>,<argument><expr><call><name>SIZE</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <call><name>min</name><argument_list>(<argument><expr><name>x2</name></expr></argument>,<argument><expr><call><name>SIZE</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{ <expr_stmt><expr><name>ret</name> <operator>+=</operator> <name><name>t</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="char">'0'</literal></expr>;</expr_stmt> }</block></for> <return>return <expr><call><name>to_string</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function> <decl_stmt><decl><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>, <parameter><type><name>typename</name><modifier>...</modifier></type> <name>Coords</name></parameter>&gt;</parameter_list></template> <type><name>string</name></type> <name>to_string</name><argument_list>(<argument><expr><specifier>const</specifier> <call><name>T</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>int</name> <name>x1</name><operator>=</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>int</name> <name>x2</name><operator>=</operator><literal type="number">1e9</literal></expr></argument>, <argument><expr><name>Coords</name><operator>...</operator> <name>C</name></expr></argument>)</argument_list></decl>;</decl_stmt> <function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>, <parameter><type><name>typename</name></type> <name>S</name></parameter>&gt;</parameter_list></template> <type><name>string</name></type> <name>to_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name>S</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>t</name></decl></parameter>)</parameter_list><block>{ <return>return <expr><literal type="string">"("</literal> <operator>+</operator> <call><name>to_string</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">", "</literal> <operator>+</operator> <call><name>to_string</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">")"</literal></expr>;</return> }</block></function> <decl_stmt><decl><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>, <parameter><type><name>typename</name><modifier>...</modifier></type> <name>Coords</name></parameter>&gt;</parameter_list></template> <type><name>string</name></type> <name>to_string</name><argument_list>(<argument><expr><specifier>const</specifier> <call><name>T</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>int</name> <name>x1</name></expr></argument>, <argument><expr><name>int</name> <name>x2</name></expr></argument>, <argument><expr><name>Coords</name><operator>...</operator> <name>C</name></expr></argument>)</argument_list><argument_list>{ <argument><expr><name>string</name> <name>ret</name> <operator>=</operator> <literal type="string">"["</literal></expr></argument>; <argument><expr><name>x1</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><call><name>SIZE</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>; <argument><expr><name>auto</name> <name>e</name> <operator>=</operator> <call><name>begin</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>; <argument><expr><call><name>advance</name><argument_list>(<argument><expr><name>e</name></expr></argument>,<argument><expr><name>x1</name></expr></argument>)</argument_list></call></expr></argument>; for<argument><expr><operator>(</operator><name>int</name> <name>i</name> <operator>=</operator> <name>x1</name><operator>,</operator> <name>_i</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>x2</name></expr></argument>,<argument><expr><call><name>SIZE</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call>; <name>i</name> <operator>&lt;=</operator> <name>_i</name>; <operator>++</operator><name>i</name><operator>)</operator><block>{ <expr><name>ret</name> <operator>+=</operator> <call><name>to_string</name><argument_list>(<argument><expr><operator>*</operator><name>e</name></expr></argument>, <argument><expr><name>C</name><operator>...</operator></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>i</name> <operator>!=</operator> <name>_i</name> <operator>?</operator> <literal type="string">", "</literal> <operator>:</operator> <literal type="string">""</literal><operator>)</operator></expr>; <expr><name>e</name> <operator>=</operator> <call><name>next</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>; }</block></expr></argument> <return>return <expr><name>ret</name> <operator>+</operator> <literal type="string">"]"</literal></expr>;</return></argument_list></decl></decl_stmt> } template<expr_stmt><expr><operator>&lt;</operator><name>int</name> <name>Index</name></expr><operator>,</operator> <expr><name><typename>typename</typename></name><operator>...</operator> <name>Ts</name><operator>&gt;</operator> struct <name>print_tuple</name><block>{ <expr><name>string</name> <name>operator<name>()</name></name> <operator>(</operator><specifier>const</specifier> <name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>Ts</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>t</name><operator>)</operator> <block>{ <expr><name>string</name> <name>ret</name> <operator>=</operator> <name><name>print_tuple</name><argument_list type="generic">&lt;<argument><expr><name>Index</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>Ts</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name><block>{}</block><operator>(</operator><name>t</name><operator>)</operator></expr>; <expr><name>ret</name> <operator>+=</operator> <operator>(</operator><ternary><condition><expr><name>Index</name></expr> ?</condition><then> <expr><literal type="string">", "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr>; <return>return <expr><name>ret</name> <operator>+</operator> <call><name>to_string</name><argument_list>(<argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>Index</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block></expr> }</block></expr></expr_stmt> }; <struct><template>template<parameter_list>&lt;<parameter><type><name>typename</name><modifier>...</modifier></type> <name>Ts</name></parameter>&gt;</parameter_list></template> struct <name><name>print_tuple</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Ts</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name> <block>{<public type="default"> <function type="operator"><type><name>string</name></type> <name>operator<name>()</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>Ts</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>t</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>to_string</name><argument_list>(<argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function> </public>}</block>;</struct> <function><template>template<parameter_list>&lt;<parameter><type><name>typename</name><modifier>...</modifier></type> <name>Ts</name></parameter>&gt;</parameter_list></template> <type><name>string</name></type> <name>to_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>Ts</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>t</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><specifier>const</specifier> <specifier>auto</specifier></type> <name>Size</name> <init>= <expr><name><name><name>tuple_size</name><argument_list type="generic">&lt;<argument><expr><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>Ts</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></name></expr></init></decl>;</decl_stmt> <return>return <expr><name><name>print_tuple</name><argument_list type="generic">&lt;<argument><expr><name>Size</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>Ts</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name><block>{}</block><operator>(</operator><name>t</name><operator>)</operator></expr>;</return> }</block></function> <function><type><name>void</name></type> <name>dbgr</name><parameter_list>()</parameter_list><block>{<empty_stmt>;</empty_stmt>}</block></function> <function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>Heads</name></parameter>, <parameter><type><name>typename</name><modifier>...</modifier></type> <name>Tails</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>dbgr</name><parameter_list>(<parameter><decl><type><name>Heads</name></type> <name>H</name></decl></parameter>, <parameter><decl><type><name>Tails</name><modifier>...</modifier></type> <name>T</name></decl></parameter>)</parameter_list><block>{ <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>to_string</name><argument_list>(<argument><expr><name>H</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">" | "</literal></expr>;</expr_stmt> <expr_stmt><expr><call><name>dbgr</name><argument_list>(<argument><expr><name>T</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function> <function><type><name>void</name></type> <name>dbgs</name><parameter_list>()</parameter_list><block>{<empty_stmt>;</empty_stmt>}</block></function> <function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>Heads</name></parameter>, <parameter><type><name>typename</name><modifier>...</modifier></type> <name>Tails</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>dbgs</name><parameter_list>(<parameter><decl><type><name>Heads</name></type> <name>H</name></decl></parameter>, <parameter><decl><type><name>Tails</name><modifier>...</modifier></type> <name>T</name></decl></parameter>)</parameter_list><block>{ <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>H</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt> <expr_stmt><expr><call><name>dbgs</name><argument_list>(<argument><expr><name>T</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dbgv</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout &lt;&lt; to_string(__VA_ARGS__) &lt;&lt; endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dbg</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout &lt;&lt; "[" &lt;&lt; #__VA_ARGS__ &lt;&lt; "]: "; dbgv(__VA_ARGS__);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dbgr</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dbgr(__VA_ARGS__); cout &lt;&lt; endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dbgm</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout &lt;&lt; "[" &lt;&lt; #__VA_ARGS__ &lt;&lt; "]: "; dbgr(__VA_ARGS__);</cpp:value></cpp:define>
<decl_stmt><decl><type><name>unsigned</name></type> <name>seed</name> <init>= <expr><call><name><name>std</name><operator>::</operator><name>chrono</name><operator>::</operator><name>system_clock</name><operator>::</operator><name>now</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>time_since_epoch</name><argument_list>()</argument_list></call><operator>.</operator><call><name>count</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>cnts</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>cntt</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>ok</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list>
<block>{
   <decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>,<decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
   <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
   <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>s</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
   <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">26</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
   <block>{
       <expr_stmt><expr><name><name>cnts</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
       <expr_stmt><expr><name><name>cntt</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
   }</block></for>
   <for>for<control>(<init><decl><type><name>auto</name></type> <name>it</name><range>:<expr><name>s</name></expr></range></decl></init>)</control><block type="pseudo"><expr_stmt><expr><name><name>cnts</name><index>[<expr><name>it</name><operator>-</operator><literal type="char">'a'</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block></for>
   <for>for<control>(<init><decl><type><name>auto</name></type> <name>it</name><range>:<expr><name>t</name></expr></range></decl></init>)</control><block type="pseudo"><expr_stmt><expr><name><name>cntt</name><index>[<expr><name>it</name><operator>-</operator><literal type="char">'a'</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block></for>
   <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">26</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
       <block type="pseudo"><if>if<condition>(<expr><operator>(</operator><name><name>cnts</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>cntt</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>%</operator><literal type="number">2</literal></expr>)</condition><then><block>{<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No"</literal><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt><return>return;</return>}</block></then></if></block></for>
   <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Yes"</literal><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt>
   <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>PII</name></expr></argument>&gt;</argument_list></name></type> <name>ans</name></decl>;</decl_stmt>
   <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
   <block>{
       <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
         <block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
         <block>{
             <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name><name>t</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then>
             <block>{
                 <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>t</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 <comment type="line">//cout&lt;&lt;j+1&lt;&lt;" "&lt;&lt;j+1&lt;&lt;'\n';</comment>
                 <expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>,<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 <comment type="line">//cout&lt;&lt;j+1&lt;&lt;" "&lt;&lt;i+1&lt;&lt;'\n';</comment>
                 <expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>,<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 <break>break;</break>
             }</block></then></if>
             <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then>
             <block>{
                 <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 <comment type="line">//cout&lt;&lt;j+1&lt;&lt;" "&lt;&lt;i+1&lt;&lt;'\n';</comment>
                 <expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>,<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 <break>break;</break>
             }</block></then></if>
         }</block></for></block></then></if>
   }</block></for>
   <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name><name>ans</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt>
   <for>for<control>(<init><decl><type><name>auto</name></type> <name>it</name><range>:<expr><name>ans</name></expr></range></decl></init>)</control><block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>it</name><operator>.</operator><name>fi</name></name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name><name>it</name><operator>.</operator><name>se</name></name><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt></block></for>
}</block></function>
<function><name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">//freopen("flash.inp", "r", stdin);</comment>
    <comment type="line">//freopen("flash.out", "w", stdout);</comment>

    <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt><while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition>

    <block type="pseudo"><expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
}</block></function>
</unit>
