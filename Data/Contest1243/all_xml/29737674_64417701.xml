<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29737674_64417701.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name> <init>= <expr><literal type="number">2e5</literal> <operator>+</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>head</name><index>[<expr><name>maxn</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>cnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name><name>vis1</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>vis2</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ans</name></decl>;</decl_stmt>
<struct>struct <name>node</name> <block>{<public type="default">
    <decl_stmt><decl><type><name>int</name></type> <name>v</name></decl>, <decl><type ref="prev"/><name>nxt</name></decl>;</decl_stmt>
</public>}</block> <decl><name><name>e</name><index>[<expr><name>maxn</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</struct>

<struct>struct <name>link</name> <block>{<public type="default">
    <decl_stmt><decl><type><name>int</name></type> <name>pre</name></decl>, <decl><type ref="prev"/><name>nxt</name></decl>;</decl_stmt>
</public>}</block> <decl><name><name>lnk</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</struct>

<function><type><name>void</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>e</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>=</operator> <block>{<expr><name>v</name></expr>, <expr><name><name>head</name><index>[<expr><name>u</name></expr>]</index></name></expr>}</block></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>head</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <name>cnt</name><operator>++</operator></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name>del</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>lnk</name><index>[<expr><name><name>lnk</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>pre</name></expr>]</index></name><operator>.</operator><name>nxt</name> <operator>=</operator> <name><name>lnk</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>nxt</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>lnk</name><index>[<expr><name><name>lnk</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>nxt</name></expr>]</index></name><operator>.</operator><name>pre</name> <operator>=</operator> <name><name>lnk</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>pre</name></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name>A</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>)</parameter_list> <block>{
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>head</name><index>[<expr><name>u</name></expr>]</index></name></expr></init></decl>;</init> <condition><expr><operator>~</operator><name>i</name></expr>;</condition> <incr><expr><name>i</name> <operator>=</operator> <name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nxt</name></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name><name>vis1</name><index>[<expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></for>
}</block></function>

<function><type><name>void</name></type> <name>B</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>)</parameter_list> <block>{
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>head</name><index>[<expr><name>u</name></expr>]</index></name></expr></init></decl>;</init> <condition><expr><operator>~</operator><name>i</name></expr>;</condition> <incr><expr><name>i</name> <operator>=</operator> <name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nxt</name></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name><name>vis1</name><index>[<expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></for>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>head</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>head</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><name><name>lnk</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pre</name> <operator>=</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name><name>lnk</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>nxt</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><name><name>lnk</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>nxt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>v</name></decl>, <decl><type ref="prev"/><name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>u</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <decl_stmt><decl><type><name><name>queue</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>q</name></decl>;</decl_stmt>
    <while>while <condition>(<expr><name><name>lnk</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nxt</name></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>now</name> <init>= <expr><name><name>lnk</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nxt</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>vis2</name><index>[<expr><name>now</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>del</name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr><operator>!</operator><call><name><name>q</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>u</name> <init>= <expr><call><name><name>q</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>A</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>lnk</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nxt</name></expr></init></decl>;</init> <condition><expr><name>i</name></expr>;</condition> <incr><expr><name>i</name> <operator>=</operator> <name><name>lnk</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nxt</name></expr></incr>)</control> <block>{
                <if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>!</operator><name><name>vis1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>vis2</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then>
                <else>else <block>{
                    <expr_stmt><expr><call><name>del</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>vis2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                }</block></else></if>
            }</block></for>
            <expr_stmt><expr><call><name>B</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>
        <expr_stmt><expr><operator>++</operator><name>ans</name></expr>;</expr_stmt>
    }</block></while>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><name>ans</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
