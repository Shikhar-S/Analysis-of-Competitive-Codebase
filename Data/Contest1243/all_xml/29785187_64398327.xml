<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29785187_64398327.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>long</name> <name>long</name> <name>int</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
	<if>if<condition>(<expr><name>a</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
		<return>return <expr><name>b</name></expr>;</return>
	}</block></then></if>
	<return>return <expr><call><name>gcd</name><argument_list>(<argument><expr><name>b</name><operator>%</operator><name>a</name></expr></argument>,<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>n</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>

	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name> <name>int</name></expr></argument>&gt;</argument_list></name></type><name>v</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>f</name><init>=<expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>i</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><call><name>sqrt</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<if>if<condition>(<expr><name>n</name><operator>%</operator><name>i</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
			<if>if<condition>(<expr><name>n</name><operator>/</operator><name>i</name><operator>==</operator><name>i</name></expr>)</condition><then><block>{
				<expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then><else>else<block>{
				<expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>n</name><operator>/</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
			<expr_stmt><expr><name>f</name><operator>=</operator><literal type="boolean">true</literal></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>	

	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>v</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if>if<condition>(<expr><operator>!</operator><name>f</name></expr>)</condition><then><block>{
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>n</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	}</block></then><else>else<block>{
		<decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>g</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>v</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
			<if>if<condition>(<expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name>n</name></expr>)</condition><then><block>{
				<if>if<condition>(<expr><name>g</name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block>{
					<expr_stmt><expr><name>g</name><operator>=</operator><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
				}</block></then><else>else<block>{
					<expr_stmt><expr><name>g</name><operator>=</operator><call><name>gcd</name><argument_list>(<argument><expr><name>g</name></expr></argument>,<argument><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
			}</block></then></if>
		}</block></for>
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>g</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	}</block></else></if>
}</block></function></unit>
