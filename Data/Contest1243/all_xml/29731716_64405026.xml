<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29731716_64405026.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name> <name>int</name></type> <name>LL</name>;</typedef>

<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name>LL</name></type> <name>n</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>LL</name></type> <name>tmp</name><init>=<expr><name>n</name></expr></init></decl>, <decl><type ref="prev"/><name>p</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>cnt</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>LL</name></type> <name>i</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>*</operator><name>i</name><operator>&lt;=</operator><name>n</name><operator>&amp;&amp;</operator><name>cnt</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <if>if<condition>(<expr><name>n</name><operator>%</operator><name>i</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
            <while>while<condition>(<expr><name>n</name><operator>%</operator><name>i</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>n</name><operator>/=</operator><name>i</name></expr>;</expr_stmt></block></while>
            <expr_stmt><expr><name>p</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>
        }</block></then></if>
    }</block></for>
    <if>if<condition>(<expr><name>n</name><operator>!=</operator><literal type="number">1</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>p</name><operator>=</operator><name>n</name></expr><operator>,</operator><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
    <if>if<condition>(<expr><name>cnt</name><operator>&gt;=</operator><literal type="number">2</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></then>
    <elseif>else <if>if<condition>(<expr><name>cnt</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>p</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></then></if></elseif>
    <else>else
        <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>tmp</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></else></if>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
