<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29732602_64412424.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = (a); i &lt; (b); ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>trav</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(auto&amp; a : x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x.begin(), x.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(int)(x).size()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fst</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>snd</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PI</name></cpp:macro> <cpp:value>(acos(-1))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>max</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) &gt; (b) ? (a) : (b))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>min</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) &lt; (b) ? (a) : (b))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXN</name></cpp:macro> <cpp:value>1123456</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pii</name></expr></argument>&gt;</argument_list></name></type> <name>vii</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vi</name></expr></argument>&gt;</argument_list></name></type> <name>vvi</name>;</typedef>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAX_PR</name> <init>= <expr><literal type="number">5</literal><literal type="char">'000'</literal><literal type="number">000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>bitset</name><argument_list type="generic">&lt;<argument><expr><name>MAX_PR</name></expr></argument>&gt;</argument_list></name></type> <name>isprime</name></decl>;</decl_stmt>
<function><type><name>vi</name></type> <name>eratosthenes_sieve</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>lim</name></decl></parameter>)</parameter_list> <block>{
  <expr_stmt><expr><call><name><name>isprime</name><operator>.</operator><name>set</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>isprime</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>isprime</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>lim</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>isprime</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></for>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>*</operator><name>i</name> <operator>&lt;</operator> <name>lim</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block type="pseudo"><if>if <condition>(<expr><name><name>isprime</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
    <block type="pseudo"><for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name><operator>*</operator><name>i</name></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>lim</name></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <name>i</name><operator>*</operator><literal type="number">2</literal></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>isprime</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></for></block></then></if></block></for>
  <decl_stmt><decl><type><name>vi</name></type> <name>pr</name></decl>;</decl_stmt>
  <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">2</literal></argument>,<argument>lim</argument>)</argument_list></macro> <if>if <condition>(<expr><name><name>isprime</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>pr</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
  <return>return <expr><name>pr</name></expr>;</return>
}</block></function>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ull</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>
<function><type><name>ull</name></type> <name>mod_mul</name><parameter_list>(<parameter><decl><type><name>ull</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ull</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>ull</name></type> <name>M</name></decl></parameter>)</parameter_list> <block>{
  <decl_stmt><decl><type><name>ll</name></type> <name>ret</name> <init>= <expr><name>a</name> <operator>*</operator> <name>b</name> <operator>-</operator> <name>M</name> <operator>*</operator> <call><name>ull</name><argument_list>(<argument><expr><call><name>ld</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>ld</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>/</operator> <call><name>ld</name><argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><name>ret</name> <operator>+</operator> <name>M</name> <operator>*</operator> <operator>(</operator><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>-</operator> <name>M</name> <operator>*</operator> <operator>(</operator><name>ret</name> <operator>&gt;=</operator> <operator>(</operator><name>ll</name><operator>)</operator><name>M</name><operator>)</operator></expr>;</return>
}</block></function>
<function><type><name>ull</name></type> <name>mod_pow</name><parameter_list>(<parameter><decl><type><name>ull</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>ull</name></type> <name>e</name></decl></parameter>, <parameter><decl><type><name>ull</name></type> <name>mod</name></decl></parameter>)</parameter_list> <block>{
  <decl_stmt><decl><type><name>ull</name></type> <name>ans</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init>;</init> <condition><expr><name>e</name></expr>;</condition> <incr><expr><name>b</name> <operator>=</operator> <call><name>mod_mul</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name>e</name> <operator>/=</operator> <literal type="number">2</literal></expr></incr>)</control>
    <block type="pseudo"><if>if <condition>(<expr><name>e</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>=</operator> <call><name>mod_mul</name><argument_list>(<argument><expr><name>ans</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></block></for>
  <return>return <expr><name>ans</name></expr>;</return>
}</block></function>

<function><type><name>bool</name></type> <name>isPrime</name><parameter_list>(<parameter><decl><type><name>ull</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{
  <if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>||</operator> <name>n</name> <operator>%</operator> <literal type="number">6</literal> <operator>%</operator> <literal type="number">4</literal> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>n</name> <operator>-</operator> <literal type="number">2</literal> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</return></block></then></if>
  <decl_stmt><decl><type><name>ull</name></type> <name><name>A</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">2</literal></expr>, <expr><literal type="number">325</literal></expr>, <expr><literal type="number">9375</literal></expr>, <expr><literal type="number">28178</literal></expr>, <expr><literal type="number">450775</literal></expr>, <expr><literal type="number">9780504</literal></expr>, <expr><literal type="number">1795265022</literal></expr>}</block></expr></init></decl>, <decl><type ref="prev"/><name>s</name> <init>= <expr><call><name>__builtin_ctzll</name><argument_list>(<argument><expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>d</name> <init>= <expr><name>n</name> <operator>&gt;&gt;</operator> <name>s</name></expr></init></decl>;</decl_stmt>
  <macro><name>trav</name><argument_list>(<argument>a</argument>, <argument>A</argument>)</argument_list></macro> <block>{   <comment type="line">// ^ count trailing zeroes</comment>
    <decl_stmt><decl><type><name>ull</name></type> <name>p</name> <init>= <expr><call><name>mod_pow</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>i</name> <init>= <expr><name>s</name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>p</name> <operator>!=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>p</name> <operator>!=</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>a</name> <operator>%</operator> <name>n</name> <operator>&amp;&amp;</operator> <name>i</name><operator>--</operator></expr>)</condition>
      <block type="pseudo"><expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mod_mul</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></while>
    <if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>n</name><operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>!=</operator> <name>s</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
  }</block>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
  <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>eratosthenes_sieve</name><argument_list>(<argument><expr><name>MAX_PR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>vi</name></type> <name>f</name></decl>;</decl_stmt>
  <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">2</literal></argument>,<argument>min(n,(ll)MAX_PR)</argument>)</argument_list></macro> <block>{
    <if>if <condition>(<expr><name>n</name><operator>%</operator><name>i</name><operator>==</operator><literal type="number">0</literal> <operator>and</operator> <name><name>isprime</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>f</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><call><name>sz</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
      <if>if <condition>(<expr><name>n</name><operator>/</operator><name>i</name> <operator>!=</operator> <name>i</name> <operator>and</operator> <name>n</name><operator>/</operator><name>i</name> <operator>&gt;</operator> <call><name>min</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><operator>(</operator><name>ll</name><operator>)</operator><name>MAX_PR</name></expr></argument>)</argument_list></call> <operator>and</operator> <call><name>isPrime</name><argument_list>(<argument><expr><operator>(</operator><name>ull</name><operator>)</operator><name>n</name><operator>/</operator><name>i</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>f</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>n</name><operator>/</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></then></if>
  }</block>

  <comment type="line">//trav(k,f) cerr &lt;&lt; k &lt;&lt; endl;</comment>

  <if>if <condition>(<expr><call><name>sz</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>n</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
  }</block></then> <elseif>else <if>if <condition>(<expr><call><name>sz</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>f</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
  }</block></then></if></elseif> <else>else <block>{
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
  }</block></else></if>

}</block></function>
</unit>
