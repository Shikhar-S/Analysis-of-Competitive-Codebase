<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29781191_64379218.cpp"><comment type="block">/*#pragma comment(linker, "/stack:200000000")
#pragma GCC optimize("O3")
#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#pragma GCC optimize("unroll-loops")
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>testcase</name><parameter_list>(<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>int t;cin&gt;&gt;t;while(t--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>eb</name></cpp:macro> <cpp:value>emplace_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>double</name></cpp:macro> <cpp:value>long double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOS</name></cpp:macro> <cpp:value>ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>"\n"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>imax</name></cpp:macro> <cpp:value>INT_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>imin</name></cpp:macro> <cpp:value>INT_MIN</cpp:value></cpp:define>
<function><type><name>bool</name></type> <name>sortbysec</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>,
              <parameter><decl><type><specifier>const</specifier> <name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{
    <return>return <expr><operator>(</operator><name><name>a</name><operator>.</operator><name>second</name></name> <operator>&lt;</operator> <name><name>b</name><operator>.</operator><name>second</name></name><operator>)</operator></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>nod</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>string</name></type> <name>s</name> <init>= <expr><call><name>to_string</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><call><name><name>s</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>int32_t</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<function><type><name>IOS</name></type>
	<comment type="line">//n==1</comment>
	<name>testcase</name><parameter_list>(<parameter><decl><type><name>t</name></type></decl></parameter>)</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>,<decl><type ref="prev"/><name>s1</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>s</name><operator>&gt;&gt;</operator><name>s1</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>f</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block type="pseudo"><if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name><name>s1</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>f</name><operator>++</operator></expr>;</expr_stmt></block></then></if></block></for>
		<if>if<condition>(<expr><name>f</name><operator>!=</operator><literal type="number">2</literal> <operator>and</operator> <name>f</name><operator>!=</operator><literal type="number">0</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
			<continue>continue;</continue>
		}</block></then>
		<else>else
		<block>{
			<if>if<condition>(<expr><name>f</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Yes"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
				<continue>continue;</continue>
			}</block></then></if>
			<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name>v</name></decl>;</decl_stmt>
			<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
				<block type="pseudo"><if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name><name>s1</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></block></for>
			<decl_stmt><decl><type><name>string</name></type> <name>s3</name><init>=<expr><name>s</name></expr></init></decl>,<decl><type ref="prev"/><name>s4</name><init>=<expr><name>s1</name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name><name>s3</name><index>[<expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>=</operator><name><name>s1</name><index>[<expr><name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>s4</name><index>[<expr><name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>=</operator><name><name>s</name><index>[<expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>string</name></type> <name>s5</name> <init>= <expr><name>s</name></expr></init></decl>,<decl><type ref="prev"/><name>s6</name><init>=<expr><name>s1</name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name><name>s5</name><index>[<expr><name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>=</operator><name><name>s1</name><index>[<expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>s6</name><index>[<expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>=</operator><name><name>s</name><index>[<expr><name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
			<comment type="line">//cout&lt;&lt;s3&lt;&lt;" "&lt;&lt;s4&lt;&lt;endl;</comment>
			<if>if<condition>(<expr><name>s3</name><operator>!=</operator><name>s4</name> <operator>or</operator> <name>s5</name><operator>!=</operator><name>s6</name></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></then>
			<else>else <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Yes"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></else></if>
		}</block></else></if>
	}</block></function>
}</block></function></unit>
