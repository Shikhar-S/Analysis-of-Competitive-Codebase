<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29778355_64380104.cpp">                       <comment type="line">//  @ /\/\ BESH //</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inp_out_work</name></cpp:macro> <cpp:value>ios::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>testCase</name></cpp:macro>    <cpp:value>int T; cin&gt;&gt;T; while(T--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fr</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=0;i&lt;n;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fro</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>s</name></type></parameter>,<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=s;i&lt;=e;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>'\n'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><name>P</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout&lt;&lt;#P&lt;&lt;" = "&lt;&lt;P&lt;&lt;endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>


<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAXN</name> <init>= <expr><literal type="number">100001</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mod</name> <init>= <expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name>inp_out_work</name></type>
    <name>testCase</name><argument_list>{
        <argument><expr><name>int</name> <name>n</name></expr></argument>;
        <argument><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr></argument>;
        <argument><expr><name>string</name> <name>s</name></expr></argument>, <argument><expr><name>t</name></expr></argument>;
        <argument><expr><name>cin</name><operator>&gt;&gt;</operator><name>s</name><operator>&gt;&gt;</operator><name>t</name></expr></argument>;
       <comment type="block">/* int fq1[26], fq2[26] ;
        fill(fq1, fq1 + 26, 0);
        fill(fq2, fq2 + 26, 0);
        for(char x : s)fq1[x-'a']++;
        for(char x : t)fq2[x-'a']++;*/</comment>
        <argument><expr><name>bool</name> <name>can</name> <operator>=</operator> <literal type="number">1</literal></expr></argument>;
        <comment type="line">//fr(i,26)if(fq1[i] != fq2[i])can = 0;</comment>
        <argument><expr><name>int</name> <name>i1</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument> , <argument><expr><name>i2</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>;
        <argument><expr><name>int</name> <name>miss</name> <operator>=</operator> <literal type="number">0</literal></expr></argument>;
        <argument><expr><macro><name>fr</name><argument_list>(<argument>i</argument>,<argument>n</argument>)</argument_list></macro></expr></argument><if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><expr_stmt><expr><block>{
                <if>if<condition>(<expr><name>i1</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>i1</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block></then>
                <else>else <block type="pseudo"><expr_stmt><expr><name>i2</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block></else></if>
                <name>miss</name><operator>++</operator></block></expr>;</expr_stmt></then></if></argument_list></decl></decl_stmt>
        }</block></function>
        <if>if<condition>(<expr><name>miss</name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>can</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></then>
        <elseif>else <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i1</name></expr>]</index></name> <operator>!=</operator> <name><name>s</name><index>[<expr><name>i2</name></expr>]</index></name> <operator>||</operator> <name><name>t</name><index>[<expr><name>i1</name></expr>]</index></name> <operator>!=</operator> <name><name>t</name><index>[<expr><name>i2</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>can</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></then></if></elseif></if>


        <if>if<condition>(<expr><name>can</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Yes\n"</literal></expr>;</expr_stmt></block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No\n"</literal></expr>;</expr_stmt></block></else></if>
    }
}
</unit>
