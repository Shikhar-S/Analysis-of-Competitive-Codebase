<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29771985_64389787.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>


<function><type><name>void</name></type> <name>prepare</name><parameter_list>()</parameter_list> <block>{
	
}</block></function>

<function><type><name>void</name></type> <name>read</name><parameter_list>()</parameter_list> <block>{
	
}</block></function>

<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>s</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
<comment type="line">//	cerr &lt;&lt; "s = " &lt;&lt; s &lt;&lt; " t = " &lt;&lt; t &lt;&lt; endl;</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>pos</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
			<break>break;</break>
		}</block></then></if>
	}</block></for>	
	<if>if <condition>(<expr><name>pos</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Yes\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	}</block></then></if>			
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>pos</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<decl_stmt><decl><type><name>char</name></type> <name>s_1</name> <init>= <expr><name><name>s</name><index>[<expr><name>pos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name></type> <name>s_2</name> <init>= <expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name></type> <name>t_1</name> <init>= <expr><name><name>t</name><index>[<expr><name>pos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name></type> <name>t_2</name> <init>= <expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<comment type="line">//		cerr &lt;&lt; " i = " &lt;&lt; s_1 &lt;&lt; " " &lt;&lt; t_1 &lt;&lt; " " &lt;&lt; s_2 &lt;&lt; " " &lt;&lt; t_2 &lt;&lt; endl;</comment>
		<if>if <condition>(<expr><name>s_1</name> <operator>==</operator> <name>s_2</name> <operator>&amp;&amp;</operator> <name>t_1</name> <operator>==</operator> <name>t_2</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>t</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		}</block></then></if>
	}</block></for>
	<if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name>t</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"No\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then> <else>else <block>{
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Yes\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
<comment type="line">//	freopen("input.txt", "r", stdin);</comment>
<comment type="line">//	freopen("output.txt", "w", stdout);</comment>

	<expr_stmt><expr><call><name>prepare</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>test</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>test</name></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>t</name> <operator>&lt;</operator> <name>test</name></expr>;</condition> <incr><expr><name>t</name><operator>++</operator></expr></incr>)</control> <block>{
		<expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>



</unit>
