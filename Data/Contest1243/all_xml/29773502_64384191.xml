<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29773502_64384191.cpp">    <comment type="block">/*
    |___________________________Arshit Mangukiya_____________________________|
    |_______________________________DA-IICT__________________________________|
    |_____________________________201801173__________________________________|
    */</comment>
    <comment type="block">/*______________________WRITE  YOUR  CODE  HERE_________________________*/</comment>
     
    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
    <using>using <namespace>namespace <name>std</name>;</namespace></using>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define> 
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ld</name></cpp:macro> <cpp:value>long double</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ss</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
     <typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>vec</name>;</typedef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FAST</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(false),cin.tie(0),cout.tie(0);srand(time(NULL))</cpp:value></cpp:define>
     <decl_stmt><decl><type><name>ll</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
        
        <function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list>
    <block>{
                   
         <expr_stmt><expr><name>FAST</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ll</name></type> <name>q</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>q</name></expr>;</expr_stmt>
        <while>while<condition>(<expr><name>q</name><operator>--</operator></expr>)</condition>
        <block>{
        	<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>;</decl_stmt>
        	<decl_stmt><decl><type><name>ll</name></type> <name>temp</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>,<decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
            <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>s</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type><name>mp</name></decl>;</decl_stmt>
            <for>for<control>(<init><decl><type><name>auto</name></type> <name>x</name><range>:<expr><name>s</name></expr></range></decl></init>)</control>
             <block type="pseudo"><expr_stmt><expr><name><name>mp</name><index>[<expr><name>x</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block></for>
             <for>for<control>(<init><decl><type><name>auto</name></type> <name>x</name><range>:<expr><name>t</name></expr></range></decl></init>)</control>
             <block type="pseudo"><expr_stmt><expr><name><name>mp</name><index>[<expr><name>x</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block></for>
             <for>for<control>(<init><decl><type><name>auto</name></type> <name>x</name><range>:<expr><name>mp</name></expr></range></decl></init>)</control>
             <block>{
             	<if>if<condition>(<expr><name><name>x</name><operator>.</operator><name>ss</name></name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
             	<block>{
             		<expr_stmt><expr><name>temp</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
             		<break>break;</break>
             	}</block></then></if>
             }</block></for>
             <if>if<condition>(<expr><name>s</name><operator>!=</operator><name>t</name></expr>)</condition><then>
             <block>{
             	 <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type><name>m</name></decl>;</decl_stmt>
             	 <decl_stmt><decl><type><name>ll</name></type> <name>cnt</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
             	<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
             	<block>{
             		<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
             		<block>{<expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>
             		<expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></then></if>
             	}</block></for>
             <if>if<condition>(<expr><name>cnt</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then>
             <block>{
             	  <if>if<condition>(<expr><name><name>s</name><index>[<expr><name><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>==</operator><name><name>s</name><index>[<expr><name><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>&amp;&amp;</operator>  <name><name>t</name><index>[<expr><name><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>==</operator><name><name>t</name><index>[<expr><name><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr>)</condition><then>
             	  <block>{
             	  	
             	  }</block></then>
             	  <else>else
             	  <block type="pseudo"><expr_stmt><expr><name>temp</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
             }</block></then>
             <else>else
             <block type="pseudo"><expr_stmt><expr><name>temp</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
             }</block></then></if>
             <if>if<condition>(<expr><name>temp</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
             <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"yes"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></then>
             <else>else
             <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"no"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></else></if>
             
        }</block></while>
        
    }</block></function></unit>
