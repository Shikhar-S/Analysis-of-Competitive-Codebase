<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29783335_64382501.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<using>using <name>ll</name><init>=<type><name>long</name> <name>long</name></type></init>;</using>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>MOD</name><init>=<expr><operator>(</operator><name>ll</name><operator>)</operator><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>INF</name><init>=<expr><operator>(</operator><name>ll</name><operator>)</operator><literal type="number">1e18</literal><operator>+</operator><literal type="number">10</literal></expr></init></decl>;</decl_stmt>

<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>bool</name></type> <name>chmax</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{ <if>if <condition>(<expr><name>a</name><operator>&lt;</operator><name>b</name></expr>)</condition><then> <block>{ <expr_stmt><expr><name>a</name><operator>=</operator><name>b</name></expr>;</expr_stmt> <return>return <expr><literal type="number">1</literal></expr>;</return> }</block></then></if> <return>return <expr><literal type="number">0</literal></expr>;</return> }</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>bool</name></type> <name>chmin</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{ <if>if <condition>(<expr><name>a</name><operator>&gt;</operator><name>b</name></expr>)</condition><then> <block>{ <expr_stmt><expr><name>a</name><operator>=</operator><name>b</name></expr>;</expr_stmt> <return>return <expr><literal type="number">1</literal></expr>;</return> }</block></then></if> <return>return <expr><literal type="number">0</literal></expr>;</return> }</block></function>

<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list><block>{

    <decl_stmt><decl><type><name>int</name></type> <name>N</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>N</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>,<decl><type ref="prev"/><name>t</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>s</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>cnt</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name><name>diff</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><init>=<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
        <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block>{
            <if>if<condition>(<expr><name>cnt</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then><block>{
                <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
                <return>return;</return>
            }</block></then></if>
            <expr_stmt><expr><name><name>diff</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>++</operator><name>cnt</name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></for>
    <if>if<condition>(<expr><name>cnt</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Yes"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
        <return>return;</return>
    }</block></then></if>
    <if>if<condition>(<expr><name>cnt</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then><block>{
        <if>if<condition>(<expr><name><name>s</name><index>[<expr><name><name>diff</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>==</operator><name><name>s</name><index>[<expr><name><name>diff</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>&amp;&amp;</operator><name><name>t</name><index>[<expr><name><name>diff</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>==</operator><name><name>t</name><index>[<expr><name><name>diff</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr>)</condition><then><block>{
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Yes"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>
    }</block></then></if>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>

}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>q</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>q</name></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>q</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
        <expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
