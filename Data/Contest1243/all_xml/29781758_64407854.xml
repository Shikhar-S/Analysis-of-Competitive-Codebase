<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29781758_64407854.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<typedef>typedef <type><name>long</name> <name>long</name> <name>int</name></type> <name>ll</name>;</typedef>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<comment type="line">// sieve(upto) returns the list of prime numbers up to upto.</comment>
<comment type="line">//   Size: upto(1e8).size() ... 5.7e6,  upto(1e9).size() ... 5.1e7</comment>
<comment type="line">//   Performance: upto(1e8) ... 0.7sec,   upto(1e9) ... 9.2sec</comment>
<function><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>sieve</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>upto</name></decl></parameter>)</parameter_list> <block>{
  <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>res</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></type> <name>tbl</name><argument_list>(<argument><expr><name>upto</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ll</name></type> <name>lim</name> <init>= <expr><call>(<name>int</name>)<argument_list>(<argument><expr><call><name>sqrt</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>upto</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;=</operator> <name>upto</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{
    <if>if <condition>(<expr><call><name><name>tbl</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition><then>  <block type="pseudo"><continue>continue;</continue></block></then></if>
    <expr_stmt><expr><call><name><name>res</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>x</name> <operator>&gt;</operator> <name>lim</name></expr>)</condition><then>  <block type="pseudo"><continue>continue;</continue></block></then></if>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name>x</name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;=</operator> <name>upto</name></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <name>x</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name><name>tbl</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt></block></for>
  }</block></for>
  <return>return <expr><name>res</name></expr>;</return>
}</block></function>

<comment type="block">/*
  Prime Factorization
    Two versions:
      - prfac(n)
      - prfac(n, primes)
 */</comment>

<function><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>prfac</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>primes</name></decl></parameter>)</parameter_list> <block>{
  <comment type="line">//      primes should contain prime numbers at least up to sqrt(n)</comment>
  <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>res</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ll</name></type> <name>x</name> <init>= <expr><name>n</name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>ll</name></type> <name>p</name> <range>: <expr><name>primes</name></expr></range></decl></init>)</control> <block>{
    <if>if <condition>(<expr><name>x</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>  <block type="pseudo"><break>break;</break></block></then></if>
    <if>if <condition>(<expr><name>p</name> <operator>*</operator> <name>p</name> <operator>&gt;</operator> <name>x</name></expr>)</condition><then>  <block type="pseudo"><break>break;</break></block></then></if>
    <if>if <condition>(<expr><name>x</name> <operator>%</operator> <name>p</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then>  <block type="pseudo"><continue>continue;</continue></block></then></if>
    <decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>x</name> <operator>/=</operator> <name>p</name></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>x</name> <operator>%</operator> <name>p</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{
      <expr_stmt><expr><name>c</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>x</name> <operator>/=</operator> <name>p</name></expr>;</expr_stmt>
    }</block></while>
    <expr_stmt><expr><call><name><name>res</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>
  <if>if <condition>(<expr><name>x</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><then>  <block type="pseudo"><expr_stmt><expr><call><name><name>res</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
  <return>return <expr><name>res</name></expr>;</return>
}</block></function>

<function><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>prfac</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{
  <return>return <expr><call><name>prfac</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><call><name>sieve</name><argument_list>(<argument><expr><call>(<name>int</name>)<argument_list>(<argument><expr><call><name>sqrt</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{
  <comment type="line">// C-style stdio functions should not be used.</comment>
  <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>setprecision</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"1\n"</literal></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  }</block></then></if>
  <decl_stmt><decl><type><name>auto</name></type> <name>prf</name> <init>= <expr><call><name>prfac</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name><name>prf</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name><name>prf</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>first</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  }</block></then></if>
  <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"1\n"</literal></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

</unit>
