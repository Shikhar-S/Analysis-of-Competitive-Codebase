<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29781071_64400474.cpp"><comment type="line">// https://codeforces.com/profile/_Mr_Fab</comment>
<comment type="line">// Because there was a same question before</comment>
 <cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
    <using>using <namespace>namespace <name>std</name>;</namespace></using>
  
    <decl_stmt><decl><specifier>static</specifier> <type><name>int</name></type> <name>LOCAL</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
 
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F0</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(a,0,sizeof(a));</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>print</name><parameter_list>(<parameter><type><name>v</name></type></parameter>,<parameter><type><name>i</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int j=i;j&lt;=x;j++){cout&lt;&lt;v[j]&lt;&lt;" ";}cout&lt;&lt;endl;</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lli</name></cpp:macro> <cpp:value>long long int</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ulli</name></cpp:macro> <cpp:value>unsigned long long int</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x.begin(),x.end()</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)x.size())</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>s</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
 
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>si</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%d",&amp;x)</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>slli</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%lld",&amp;x)</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>si2</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%d %d",&amp;x,&amp;y)</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>si3</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%d %d %d",&amp;x,&amp;y,&amp;z)</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>slli2</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%lld %lld",&amp;x,&amp;y)</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>slli3</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%lld %lld %lld",&amp;x,&amp;y,&amp;z)</cpp:value></cpp:define>
 
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pi</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>printf("%d",x)</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pi2</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>printf("%d %d",x,y)</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pi3</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>printf("%d %d %d",x,y,z)</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>plli</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>printf("%lld",x)</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>plli2</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>printf("%lld %lld",x,y)</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>plli3</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>printf("%lld %lld %lld",x,y,z)</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pn</name></cpp:macro> <cpp:value>printf("\n")</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ps</name></cpp:macro> <cpp:value>printf(" ")</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pc</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>printf("%c",c)</cpp:value></cpp:define>
 
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>x</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=x;i&lt;=n;i++)</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROF</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>x</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=x;i&gt;=n;i--)</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fr</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>x</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=x;i&lt;n;i++)</cpp:value></cpp:define>
 
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout &lt;&lt; "  - " &lt;&lt; #x &lt;&lt; ": " &lt;&lt; x &lt;&lt; endl;</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debugs</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout &lt;&lt; "  - " &lt;&lt; #x &lt;&lt; ": " &lt;&lt; x &lt;&lt; "         " &lt;&lt; #y &lt;&lt; ": " &lt;&lt; y &lt;&lt; endl;</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debugss</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout &lt;&lt; "  - " &lt;&lt; #x &lt;&lt; ": " &lt;&lt; x &lt;&lt; "         " &lt;&lt; #y &lt;&lt; ": " &lt;&lt; y &lt;&lt; "         " &lt;&lt; #z &lt;&lt; ": " &lt;&lt; z &lt;&lt;  endl;</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fastIO</name></cpp:macro>  <cpp:value>std::ios::sync_with_stdio(false);cin.tie(NULL);</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cut</name></cpp:macro> <cpp:value>cout&lt;&lt;"------------------------------------------\n";</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cut1</name></cpp:macro> <cpp:value>cout&lt;&lt;"******************************************\n";</cpp:value></cpp:define>
 
    <typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>
    <typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>lli</name></expr></argument>&gt;</argument_list></name></type> <name>vlli</name>;</typedef>
    <typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>vii</name>;</typedef>
 
    <typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>prii</name>;</typedef>
    <typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>lli</name></expr></argument>&gt;</argument_list></name></type> <name>prilli</name>;</typedef>
    <typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>lli</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>prllii</name>;</typedef>
    <typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>lli</name></expr></argument>,<argument><expr><name>lli</name></expr></argument>&gt;</argument_list></name></type> <name>prllilli</name>;</typedef>
 
    <decl_stmt><decl><type><specifier>const</specifier> <name>lli</name></type> <name>mod</name> <init>= <expr><literal type="number">1000000007ll</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>lli</name></type> <name>MOD</name> <init>= <expr><literal type="number">1000000009ll</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>lli</name></type> <name>INF</name> <init>= <expr><name>LLONG_MAX</name><operator>/</operator><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>inf</name> <init>= <expr><name>INT_MAX</name><operator>/</operator><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
 
    <function><type><name>lli</name></type> <name>powermod</name><parameter_list>(<parameter><decl><type><name>lli</name></type> <name>_a</name></decl></parameter>,<parameter><decl><type><name>lli</name></type> <name>_b</name></decl></parameter>,<parameter><decl><type><name>lli</name></type> <name>_m</name><init>=<expr><name>mod</name></expr></init></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name>lli</name></type> <name>_r</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt><while>while<condition>(<expr><name>_b</name></expr>)</condition><block>{<if>if<condition>(<expr><name>_b</name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>_r</name><operator>=</operator><operator>(</operator><name>_r</name><operator>*</operator><name>_a</name><operator>)</operator><operator>%</operator><name>_m</name></expr>;</expr_stmt></block></then></if><expr_stmt><expr><name>_b</name><operator>/=</operator><literal type="number">2</literal></expr>;</expr_stmt><expr_stmt><expr><name>_a</name><operator>=</operator><operator>(</operator><name>_a</name><operator>*</operator><name>_a</name><operator>)</operator><operator>%</operator><name>_m</name></expr>;</expr_stmt>}</block></while><return>return <expr><name>_r</name></expr>;</return>}</block></function>
    <function><type><name>lli</name></type> <name>power</name><parameter_list>(<parameter><decl><type><name>lli</name></type> <name>_a</name></decl></parameter>,<parameter><decl><type><name>lli</name></type> <name>_b</name></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name>lli</name></type> <name>_r</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt><while>while<condition>(<expr><name>_b</name></expr>)</condition><block>{<if>if<condition>(<expr><name>_b</name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>_r</name><operator>=</operator><operator>(</operator><name>_r</name><operator>*</operator><name>_a</name><operator>)</operator></expr>;</expr_stmt></block></then></if><expr_stmt><expr><name>_b</name><operator>/=</operator><literal type="number">2</literal></expr>;</expr_stmt><expr_stmt><expr><name>_a</name><operator>=</operator><operator>(</operator><name>_a</name><operator>*</operator><name>_a</name><operator>)</operator></expr>;</expr_stmt>}</block></while><return>return <expr><name>_r</name></expr>;</return>}</block></function>
    <function><type><name>lli</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>lli</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>lli</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>lli</name></type> <name>m</name><init>=<expr><name>mod</name></expr></init></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name>lli</name></type> <name>x</name><init>=<expr><name>a</name><operator>+</operator><name>b</name></expr></init></decl>;</decl_stmt><while>while<condition>(<expr><name>x</name><operator>&gt;=</operator><name>m</name></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>x</name><operator>-=</operator><name>m</name></expr>;</expr_stmt></block></while><return>return <expr><name>x</name></expr>;</return>}</block></function>
    <function><type><name>lli</name></type> <name>sub</name><parameter_list>(<parameter><decl><type><name>lli</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>lli</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>lli</name></type> <name>m</name><init>=<expr><name>mod</name></expr></init></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name>lli</name></type> <name>x</name><init>=<expr><name>a</name><operator>-</operator><name>b</name></expr></init></decl>;</decl_stmt><while>while<condition>(<expr><name>x</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>x</name><operator>+=</operator><name>m</name></expr>;</expr_stmt></block></while><return>return <expr><name>x</name></expr>;</return>}</block></function>
    <function><type><name>lli</name></type> <name>mul</name><parameter_list>(<parameter><decl><type><name>lli</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>lli</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>lli</name></type> <name>m</name><init>=<expr><name>mod</name></expr></init></decl></parameter>)</parameter_list><block>{<return>return <expr><operator>(</operator><operator>(</operator><name>a</name><operator>%</operator><name>m</name><operator>)</operator><operator>*</operator><operator>(</operator><name>b</name><operator>%</operator><name>m</name><operator>)</operator><operator>)</operator><operator>%</operator><name>m</name></expr>;</return>}</block></function>
    <function><type><name>lli</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>lli</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>lli</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<while>while<condition>(<expr><name>a</name><operator>&amp;&amp;</operator><name>b</name></expr>)</condition><block type="pseudo"><expr_stmt><expr><ternary><condition><expr><name>a</name><operator>&gt;</operator><name>b</name></expr>?</condition><then><expr><name>a</name><operator>%=</operator><name>b</name></expr></then><else>:<expr><name>b</name><operator>%=</operator><name>a</name></expr></else></ternary></expr>;</expr_stmt></block></while><return>return <expr><name>a</name><operator>+</operator><name>b</name></expr>;</return>}</block></function>
    <function><type><name>lli</name></type> <name>lcm</name><parameter_list>(<parameter><decl><type><name>lli</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>lli</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<return>return <expr><operator>(</operator><call><name>max</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>/</operator><call><name>gcd</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>)</operator><operator>*</operator><call><name>min</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>}</block></function>
 
    <struct>struct <name>pair_hash</name> <block>{<public type="default">
        <function type="operator"><type><name><name>std</name><operator>::</operator><name>size_t</name></name></type> <name>operator <name>()</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></name> <modifier>&amp;</modifier></type><name>p</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{
            <decl_stmt><decl><type><name>auto</name></type> <name>h1</name> <init>= <expr><name><name>std</name><operator>::</operator><name><name>hash</name><argument_list type="generic">&lt;<argument><expr><name>lli</name></expr></argument>&gt;</argument_list></name></name><block>{}</block><operator>(</operator><name><name>p</name><operator>.</operator><name>first</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>auto</name></type> <name>h2</name> <init>= <expr><name><name>std</name><operator>::</operator><name><name>hash</name><argument_list type="generic">&lt;<argument><expr><name>lli</name></expr></argument>&gt;</argument_list></name></name><block>{}</block><operator>(</operator><name><name>p</name><operator>.</operator><name>second</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
            <return>return <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>add</name><argument_list>(<argument><expr><name>h1</name></expr></argument>,<argument><expr><call><name>mul</name><argument_list>(<argument><expr><name>h2</name></expr></argument>,<argument><expr><name>h1</name></expr></argument>,<argument><expr><name>MOD</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    </public>}</block>;</struct>
 
    <struct>struct <name>cmp</name><block>{<public type="default">
        <function type="operator"><type><name>bool</name></type> <name>operator<name>()</name></name><parameter_list>(<parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>prllilli</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier> <modifier>&amp;</modifier></type> <name>l</name></decl></parameter>,<parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>prllilli</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier> <modifier>&amp;</modifier></type> <name>r</name></decl></parameter>)</parameter_list><block>{
            <return>return <expr><name><name>l</name><operator>.</operator><name>s</name><operator>.</operator><name>f</name></name><operator>&lt;</operator><name><name>r</name><operator>.</operator><name>s</name><operator>.</operator><name>f</name></name></expr>;</return>
        }</block></function>
    </public>}</block><decl><name>myobject</name></decl>;</struct>
 
    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name><init>=<expr><literal type="number">200010</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>adj</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vis</name></decl>;</decl_stmt> 
    <decl_stmt><decl><type><name>vi</name></type> <name>ans</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>s</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt> 
 
    <function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>)</parameter_list><block>{
        <expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>last</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
     
        <decl_stmt><decl><type><name>vi</name></type> <name>v</name></decl>;</decl_stmt>
 
        <for>for<control>(<init><decl><type><name>auto</name></type> <name>it</name><init>=<expr><name><name>adj</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</init><condition><expr><name>it</name><operator>!=</operator><name><name>adj</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>it</name><operator>++</operator></expr></incr>)</control><block>{
            <decl_stmt><decl><type><name>auto</name></type> <name>jt</name><init>=<expr><call><name><name>vis</name><operator>.</operator><name>upper_bound</name></name><argument_list>(<argument><expr><operator>-</operator><operator>(</operator><operator>*</operator><name>it</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while<condition>(<expr><name>jt</name><operator>!=</operator><call><name><name>vis</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>abs</name><argument_list>(<argument><expr><operator>*</operator><name>jt</name></expr></argument>)</argument_list></call><operator>&gt;</operator><name>last</name></expr>)</condition><block>{
                <if>if<condition>(<expr><name><name>adj</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>find</name><argument_list>(<argument><expr><call><name>abs</name><argument_list>(<argument><expr><operator>*</operator><name>jt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>==</operator><name><name>adj</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
                    <decl_stmt><decl><type><name>int</name></type> <name>tmp</name><init>=<expr><call><name>abs</name><argument_list>(<argument><expr><operator>*</operator><name>jt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>jt</name><operator>=</operator><call><name><name>vis</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>jt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <comment type="line">//dfs(tmp);</comment>
                    <expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else>else
                    <block type="pseudo"><break>break;</break></block></else></if>
            }</block></while>
            <expr_stmt><expr><name>last</name><operator>=</operator><operator>*</operator><name>it</name></expr>;</expr_stmt>
        }</block></for>
 
        <for>for<control>(<init><decl><type><name>int</name></type> <name>x</name><range>:<expr><name>v</name></expr></range></decl></init>)</control>
            <block type="pseudo"><expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
 
    }</block></function>
 
    <function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
 
    
        <expr_stmt><expr><call><name>si2</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
        <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
        <macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>m</argument>)</argument_list></macro><block>{
            <expr_stmt><expr><call><name>si2</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>adj</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>adj</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
 
        <macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro><expr_stmt><expr><call><name><name>vis</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><operator>-</operator><name>i</name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><name><name>adj</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
        <macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro><block>{
            <if>if<condition>(<expr><call><name><name>vis</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><operator>-</operator><name>i</name></expr></argument>)</argument_list></call><operator>!=</operator><call><name><name>vis</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
                <expr_stmt><expr><name>s</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>vis</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><operator>-</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block>
 
        <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
        <expr_stmt><expr><call><name>pi</name><argument_list>(<argument><expr><call><name>sz</name><argument_list>(<argument><expr><name>ans</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></function></unit>
