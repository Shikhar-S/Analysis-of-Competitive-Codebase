<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29761260_64396329.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>int</name></type> <name>flag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>swaps</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>pushSwap</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>flag</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>swaps</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><call><name><name>swaps</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>tests</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>mas</name><index>[<expr><literal type="number">26</literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>tests</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>swaps</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><call><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>test</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>test</name><operator>&lt;</operator><name>tests</name></expr>;</condition> <incr><expr><name>test</name><operator>++</operator></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>string</name></type> <name>s1</name></decl>, <decl><type ref="prev"/><name>s2</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>s1</name> <operator>&gt;&gt;</operator> <name>s2</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>swaps</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">26</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><expr_stmt><expr><name><name>mas</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></for>

        <for>for <control>(<init><decl><type><name>auto</name></type> <name>c</name> <range>: <expr><name>s1</name></expr></range></decl></init>)</control>
            <block type="pseudo"><expr_stmt><expr><name><name>mas</name><index>[<expr><name>c</name> <operator>-</operator> <literal type="char">'a'</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block></for>

        <for>for <control>(<init><decl><type><name>auto</name></type> <name>c</name> <range>: <expr><name>s2</name></expr></range></decl></init>)</control>
            <block type="pseudo"><expr_stmt><expr><name><name>mas</name><index>[<expr><name>c</name> <operator>-</operator> <literal type="char">'a'</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block></for>

        <decl_stmt><decl><type><name>char</name></type> <name>isError</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">26</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
            <if>if <condition>(<expr><name><name>mas</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>isError</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <break>break;</break>
            }</block></then></if>
        }</block></for>

        <if>if <condition>(<expr><name>isError</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"NO"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
            <continue>continue;</continue>
        }</block></then></if>

        <decl_stmt><decl><type><name>int</name></type> <name>cur</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <while>while <condition>(<expr><name>cur</name> <operator>&lt;</operator> <name>n</name></expr>)</condition> <block>{
            <if>if <condition>(<expr><name><name>s1</name><index>[<expr><name>cur</name></expr>]</index></name> <operator>==</operator> <name><name>s2</name><index>[<expr><name>cur</name></expr>]</index></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>cur</name><operator>++</operator></expr>;</expr_stmt>
                <continue>continue;</continue>
            }</block></then></if>

            <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>cur</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>)</condition> <block>{
                <if>if <condition>(<expr><name><name>s1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>s1</name><index>[<expr><name>cur</name></expr>]</index></name></expr>)</condition><then>
                    <block type="pseudo"><break>break;</break></block></then></if>
                <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
            }</block></while>

            <if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>pushSwap</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>char</name></type> <name>buf</name></decl>;</decl_stmt>
                <expr_stmt><expr><name>buf</name> <operator>=</operator> <name><name>s2</name><index>[<expr><name>cur</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>s2</name><index>[<expr><name>cur</name></expr>]</index></name> <operator>=</operator> <name><name>s1</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>s1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>cur</name><operator>++</operator></expr>;</expr_stmt>
                <continue>continue;</continue>
            }</block></then></if>

            <decl_stmt><decl><type><name>char</name></type> <name>buf</name> <init>= <expr><name><name>s1</name><index>[<expr><name>cur</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>s1</name><index>[<expr><name>cur</name></expr>]</index></name> <operator>=</operator> <name><name>s2</name><index>[<expr><name>cur</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>s2</name><index>[<expr><name>cur</name></expr>]</index></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

            <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>s1</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>s1</name> <operator>=</operator> <name>s2</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>s2</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>flag</name> <operator>=</operator> <operator>!</operator><name>flag</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>pushSwap</name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>

        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name><name>swaps</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>auto</name></type> <name>swap</name> <range>: <expr><name>swaps</name></expr></range></decl></init>)</control> <block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>swap</name><operator>.</operator><name>first</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name><name>swap</name><operator>.</operator><name>second</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
        }</block></for>
    }</block></for>
}</block></function></unit>
