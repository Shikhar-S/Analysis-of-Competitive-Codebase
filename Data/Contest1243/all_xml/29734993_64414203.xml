<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29734993_64414203.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdlib&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iomanip&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INF</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<comment type="line">//#define POLYTOPE_TESTING // set to true if you're running polytope testing</comment>
<comment type="line">//#define DEBUG</comment>


<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>s64</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>u64</name>;</typedef>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name> <modifier>&amp;</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>vec</name></decl></parameter>)</parameter_list> <block>{
	<expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <literal type="string">"["</literal></expr>;</expr_stmt>
	<if>if <condition>(<expr><call><name><name>vec</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{		
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name><name>vec</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
			<block type="pseudo"><expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <name><name>vec</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal></expr>;</expr_stmt></block></for>
		<expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <name><name>vec</name><index>[<expr><call><name><name>vec</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	}</block></then></if>
	<expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <literal type="string">"]"</literal></expr>;</expr_stmt>
	<return>return <expr><name>out</name></expr>;</return>
}</block></function>

<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name> <modifier>&amp;</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;&amp;</modifier></type><name>vec</name></decl></parameter>)</parameter_list> <block>{
	<expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <literal type="string">"["</literal></expr>;</expr_stmt>
	<if>if <condition>(<expr><call><name><name>vec</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{		
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name><name>vec</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
			<block type="pseudo"><expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <name><name>vec</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal></expr>;</expr_stmt></block></for>
		<expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <name><name>vec</name><index>[<expr><call><name><name>vec</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	}</block></then></if>
	<expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <literal type="string">"]"</literal></expr>;</expr_stmt>
	<return>return <expr><name>out</name></expr>;</return>
}</block></function>

<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T1</name></parameter>, <parameter><type><name>typename</name></type> <name>T2</name></parameter>&gt;</parameter_list></template>
<type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name> <modifier>&amp;</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name><name>unordered_map</name><argument_list type="generic">&lt;<argument><expr><name>T1</name></expr></argument>, <argument><expr><name>T2</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>dict</name></decl></parameter>)</parameter_list> <block>{
	<expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <literal type="string">"{"</literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><call><name><name>dict</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>auto</name></type> <name>it</name><init>=<expr><call><name><name>dict</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>it</name><operator>!=</operator><call><name><name>dict</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>it</name></expr></incr>)</control> <block>{
		<expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>it</name><operator>-&gt;</operator><name>first</name></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="string">": "</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>it</name><operator>-&gt;</operator><name>second</name></name><operator>)</operator></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>k</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><operator>--</operator><name>k</name></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <literal type="string">"}"</literal></expr>;</expr_stmt>
	<return>return <expr><name>out</name></expr>;</return>
}</block></function>

<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T1</name></parameter>, <parameter><type><name>typename</name></type> <name>T2</name></parameter>&gt;</parameter_list></template>
<type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name> <modifier>&amp;</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>T1</name></expr></argument>, <argument><expr><name>T2</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>dict</name></decl></parameter>)</parameter_list> <block>{
	<expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <literal type="string">"{"</literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><call><name><name>dict</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>auto</name></type> <name>it</name><init>=<expr><call><name><name>dict</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>it</name><operator>!=</operator><call><name><name>dict</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>it</name></expr></incr>)</control> <block>{
		<expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>it</name><operator>-&gt;</operator><name>first</name></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="string">": "</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>it</name><operator>-&gt;</operator><name>second</name></name><operator>)</operator></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>k</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><operator>--</operator><name>k</name></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <literal type="string">"}"</literal></expr>;</expr_stmt>
	<return>return <expr><name>out</name></expr>;</return>
}</block></function>

<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name> <modifier>&amp;</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name><name>unordered_set</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>S</name></decl></parameter>)</parameter_list> <block>{
	<expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <literal type="string">"{"</literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><call><name><name>S</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>auto</name></type> <name>it</name><init>=<expr><call><name><name>S</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>it</name><operator>!=</operator><call><name><name>S</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>it</name></expr></incr>)</control> <block>{
		<expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <operator>(</operator><operator>*</operator><name>it</name><operator>)</operator></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>k</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><operator>--</operator><name>k</name></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <literal type="string">"}"</literal></expr>;</expr_stmt>
	<return>return <expr><name>out</name></expr>;</return>
}</block></function>

<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name> <modifier>&amp;</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>S</name></decl></parameter>)</parameter_list> <block>{
	<expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <literal type="string">"{"</literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><call><name><name>S</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>auto</name></type> <name>it</name><init>=<expr><call><name><name>S</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>it</name><operator>!=</operator><call><name><name>S</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>it</name></expr></incr>)</control> <block>{
		<expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <operator>(</operator><operator>*</operator><name>it</name><operator>)</operator></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>k</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><operator>--</operator><name>k</name></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <literal type="string">"}"</literal></expr>;</expr_stmt>
	<return>return <expr><name>out</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name><name>good</name><index>[<expr><literal type="number">100100</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>notadj</name><index>[<expr><literal type="number">100100</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>unordered_map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name><name>unordered_map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>adj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>adjl</name><index>[<expr><literal type="number">100100</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>color</name><index>[<expr><literal type="number">100100</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
	<for>for <control>(<init><decl><type><name>int</name></type> <name>u</name><range>: <expr><name><name>adjl</name><index>[<expr><name>v</name></expr>]</index></name></expr></range></decl></init>)</control> <block>{
		<if>if <condition>(<expr><name><name>color</name><index>[<expr><name>u</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
			<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
			<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"[dfs]: setting color["</literal> <operator>&lt;&lt;</operator> <name>u</name> <operator>&lt;&lt;</operator> <literal type="string">"] = "</literal> <operator>&lt;&lt;</operator> <name><name>color</name><index>[<expr><name>v</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
			<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<expr_stmt><expr><name><name>color</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <name><name>color</name><index>[<expr><name>v</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>POLYTOPE_TESTING</name></cpp:ifdef>
	<decl_stmt><decl><type><name>int</name></type> <name>polytope_ntests</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>polytope_ntests</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>string</name></type> <name>polytope_sampstr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>tnum</name></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>polytope_tn</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>polytope_tn</name> <operator>&lt;=</operator> <name>polytope_ntests</name></expr>;</condition> <incr><expr><name>polytope_tn</name><operator>++</operator></expr></incr>)</control> <block>{
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"polytope-test "</literal> <operator>&lt;&lt;</operator> <name>polytope_tn</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>polytope_sampstr</name> <operator>&gt;&gt;</operator> <name>tnum</name></expr>;</expr_stmt>
	<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<expr_stmt><expr><name><name>notadj</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>adjl</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><call><name><name>adj</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>m</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>notadj</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>notadj</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<decl_stmt><decl><type><name>int</name></type> <name>best</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<if>if <condition>(<expr><name><name>notadj</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <name><name>notadj</name><index>[<expr><name>best</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>best</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
	
	<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"choosing minimally connected (best) vertex = "</literal> <operator>&lt;&lt;</operator> <name>best</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
	<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>good</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt></block></for>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>v</name><range>: <expr><name><name>notadj</name><index>[<expr><name>best</name></expr>]</index></name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><name><name>good</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt></block></for>
	
	<decl_stmt><decl><type><name>int</name></type> <name>goods</name> <init>= <expr><name>n</name><operator>-</operator><name><name>notadj</name><index>[<expr><name>best</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>added</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><name>added</name></expr>)</condition> <block>{
		<expr_stmt><expr><name>added</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>v</name><range>: <expr><name><name>notadj</name><index>[<expr><name>best</name></expr>]</index></name></expr></range></decl></init>)</control> <block>{
			<if>if <condition>(<expr><operator>!</operator><name><name>good</name><index>[<expr><name>v</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>notadj</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <name>goods</name></expr>)</condition><then> <block>{
				<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
				<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"adding vertex "</literal> <operator>&lt;&lt;</operator> <name>v</name> <operator>&lt;&lt;</operator> <literal type="string">" because it's nonadjacent to "</literal> <operator>&lt;&lt;</operator> <name><name>notadj</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">" things and there are "</literal> <operator>&lt;&lt;</operator> <name>goods</name> <operator>&lt;&lt;</operator> <literal type="string">" good vertices\n"</literal></expr>;</expr_stmt>
				<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
				<expr_stmt><expr><name><name>good</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>goods</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>added</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
			}</block></then></if>
		}</block></for>
	}</block></while>
	
	<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"vertices adjacent to best: "</literal></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>v</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>v</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>v</name><operator>++</operator></expr></incr>)</control> <block>{
		<if>if <condition>(<expr><name><name>good</name><index>[<expr><name>v</name></expr>]</index></name></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>v</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
	<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	
	<for>for <control>(<init><decl><type><name>int</name></type> <name>v</name><range>: <expr><name><name>notadj</name><index>[<expr><name>best</name></expr>]</index></name></expr></range></decl></init>)</control> <block>{
		<comment type="line">//cout &lt;&lt; v &lt;&lt; endl;</comment>
		<if>if <condition>(<expr><name><name>good</name><index>[<expr><name>v</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
		<comment type="line">//cout &lt;&lt; v &lt;&lt; endl;</comment>
		<decl_stmt><decl><type><name>int</name></type> <name>ok</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>u</name><range>: <expr><name><name>notadj</name><index>[<expr><name>best</name></expr>]</index></name></expr></range></decl></init>)</control> <block>{
			<if>if <condition>(<expr><name>u</name> <operator>!=</operator> <name>v</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>adj</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
		}</block></for>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>u</name><range>: <expr><name><name>notadj</name><index>[<expr><name>v</name></expr>]</index></name></expr></range></decl></init>)</control> <block>{
			<if>if <condition>(<expr><operator>!</operator><name><name>good</name><index>[<expr><name>u</name></expr>]</index></name></expr>)</condition><then> <block>{
				<expr_stmt><expr><name><name>adj</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>ok</name><operator>++</operator></expr>;</expr_stmt>
			}</block></then></if>
		}</block></for>
		<if>if <condition>(<expr><name><name>notadj</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>-</operator><name>ok</name> <operator>&lt;</operator> <name>goods</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><name><name>adj</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>adj</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		}</block></then> <else>else <block>{
			<expr_stmt><expr><name><name>adj</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>adj</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		}</block></else></if>
	}</block></for>
	
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>things</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name>things</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>v</name><range>: <expr><name><name>notadj</name><index>[<expr><name>best</name></expr>]</index></name></expr></range></decl></init>)</control> <block>{
		<if>if <condition>(<expr><operator>!</operator><name><name>good</name><index>[<expr><name>v</name></expr>]</index></name></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>things</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
	
	<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"adjmat\n"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"  "</literal></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>v</name><range>: <expr><name>things</name></expr></range></decl></init>)</control> <block>{
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>v</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
	<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>u</name><range>: <expr><name>things</name></expr></range></decl></init>)</control> <block>{
		<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>u</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt>
		<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>v</name><range>: <expr><name>things</name></expr></range></decl></init>)</control> <block>{
			<if>if <condition>(<expr><name><name>adj</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name>v</name></expr>]</index></name></expr>)</condition><then> <block>{
				<expr_stmt><expr><name><name>adjl</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>adjl</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
			<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>adj</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name>v</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt>
			<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		}</block></for>
		<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
		<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	}</block></for>
	
	<decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>v</name><range>: <expr><name>things</name></expr></range></decl></init>)</control> <block>{
		<expr_stmt><expr><name><name>color</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	}</block></for>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>v</name><range>: <expr><name>things</name></expr></range></decl></init>)</control> <block>{
		<if>if <condition>(<expr><name><name>color</name><index>[<expr><name>v</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>k</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>color</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
			<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
			<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"setting color["</literal> <operator>&lt;&lt;</operator> <name>v</name> <operator>&lt;&lt;</operator> <literal type="string">"] = "</literal> <operator>&lt;&lt;</operator> <name>k</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
			<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
	
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>(</operator><name>k</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
	
	<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>POLYTOPE_TESTING</name></cpp:ifdef>
	}</block></for>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"polytope-test end\n"</literal></expr>;</expr_stmt>
	<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
