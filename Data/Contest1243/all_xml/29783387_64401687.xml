<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29783387_64401687.cpp">    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><cpp:literal>"Ofast"</cpp:literal><name>)</name></cpp:pragma>
    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><cpp:literal>"unroll-loops"</cpp:literal><name>)</name></cpp:pragma>
    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><cpp:literal>"fast-math"</cpp:literal><name>)</name></cpp:pragma>
    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><cpp:literal>"no-stack-protector"</cpp:literal><name>)</name></cpp:pragma>
    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>target</name><name>(</name><cpp:literal>"sse,sse2,sse3,ssse3,mmx,abm,popcnt"</cpp:literal><name>)</name></cpp:pragma>
    <using>using <namespace>namespace <name>std</name>;</namespace></using>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fs</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sc</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
    <typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
    <typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>
    <decl_stmt><decl><type><name>mt19937</name></type> <name>rng</name><argument_list>(<argument><expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name> <init>= <expr><literal type="number">1e3</literal> <operator>+</operator> <literal type="number">100</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mod</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>inf</name> <init>= <expr><literal type="number">1e9</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>ld</name></type> <name>eps</name> <init>= <expr><literal type="number">1e-9</literal></expr></init></decl>;</decl_stmt>
     
    <function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{	
    	<expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    	<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ONLINE_JUDGE</name></cpp:ifndef>
    	<expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"input.txt"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    	<expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"output.txt"</literal></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
     
    	<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>
    	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>k</name></expr>;</expr_stmt>
    	<while>while <condition>(<expr><name>k</name><operator>--</operator></expr>)</condition> <block>{
    		<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
    		<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>,<decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
    		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>s</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
    		<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>cnt</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>cnt2</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
    			<expr_stmt><expr><name><name>cnt</name><index>[<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
    			<expr_stmt><expr><name><name>cnt2</name><index>[<expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
    		}</block></for>
    		<comment type="line">// bool f = 1;</comment>
    		<comment type="line">// for (int i = 0;i&lt;26;++i) if (cnt[i] != cnt2[i]) f = 0;</comment>
    		<comment type="line">// 	if (!f) {</comment>
    		<comment type="line">// 		cout&lt;&lt;"No\n";</comment>
    		<comment type="line">// 		continue;</comment>
    		<comment type="line">// 	}</comment>
    		<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>p</name></decl>;</decl_stmt>
    		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
    			<if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    		}</block></for>
    		<if>if <condition>(<expr><call><name><name>p</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
    			<block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Yes\n"</literal></expr>;</expr_stmt></block></then>
    		<elseif>else <if>if <condition>(<expr><call><name><name>p</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
    			<if>if <condition>(<expr><name><name>s</name><index>[<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>==</operator> <name><name>s</name><index>[<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>t</name><index>[<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>==</operator> <name><name>t</name><index>[<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Yes\n"</literal></expr>;</expr_stmt></block></then>
    			<else>else <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No\n"</literal></expr>;</expr_stmt></block></else></if> 
    		}</block></then></if></elseif>
    		<else>else <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No\n"</literal></expr>;</expr_stmt></block></else></if>
     
    	}</block></while>
    	<return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></function></unit>
