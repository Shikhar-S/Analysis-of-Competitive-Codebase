<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29735271_64407000.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include> <comment type="block">/*
#include &lt;ext/pb_ds/assoc_container.hpp&gt; // Common file
#include &lt;ext/pb_ds/tree_policy.hpp&gt; // Including */</comment>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<comment type="line">//using namespace __gnu_pbds;</comment>

<comment type="line">//typedefs</comment>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>vl</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vi</name></expr></argument>&gt;</argument_list></name></type> <name>vvi</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vl</name></expr></argument>&gt;</argument_list></name></type> <name>vvl</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>double</name></expr></argument>, <argument><expr><name>double</name></expr></argument>&gt;</argument_list></name></type> <name>pdd</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>pll</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pii</name></expr></argument>&gt;</argument_list></name></type> <name>vii</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pll</name></expr></argument>&gt;</argument_list></name></type> <name>vll</name>;</typedef>
<typedef>typedef <type><name><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></name></type> <name>vit</name>;</typedef>
<typedef>typedef <type><name><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></name></type> <name>sit</name>;</typedef>

<comment type="block">/*
template&lt;typename T&gt;
using ordered_set = tree&lt;T, null_type, less&lt;T&gt;, rb_tree_tag, tree_order_statistics_node_update&gt;;
template&lt;typename F, typename S&gt;
using ordered_map = tree&lt;F, S, less&lt;F&gt;, rb_tree_tag, tree_order_statistics_node_update&gt;;
*/</comment>

<comment type="line">//#Defines</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>for(i=a;i&lt;=b;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>repR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>for(i=a;i&gt;=b;i--)</cpp:value></cpp:define>
<comment type="line">//#define pb push_back</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>emplace_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro>		<cpp:value>c.begin(),c.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>'\n'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pf</name></cpp:macro> <cpp:value>printf</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sf</name></cpp:macro> <cpp:value>scanf</cpp:value></cpp:define>
<comment type="line">//#define left __left</comment>
<comment type="line">//#define right __right</comment>
<comment type="line">//#define tree __tree</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<comment type="line">//#define harmonic(n) 0.57721566490153286l+log(n)</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESET</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>memset(a,b,sizeof(a))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gcd</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__gcd(a,b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lcm</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(a*(b/gcd(a,b)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sqr</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) * (a))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>optimize</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fraction</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>cout.unsetf(ios::floatfield); cout.precision(10); cout.setf(ios::fixed,ios::floatfield);</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>PI</name> <init>= <expr><call><name>acos</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>eps</name> <init>= <expr><literal type="number">1e-9</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>inf</name> <init>= <expr><literal type="number">2000000000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>infLL</name> <init>= <expr><literal type="number">9000000000000000000</literal></expr></init></decl>;</decl_stmt>


<comment type="line">//Bit Operations</comment>
<function><specifier>inline</specifier> <type><name>bool</name></type> <name>checkBit</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name>n</name><operator>&amp;</operator><operator>(</operator><literal type="number">1LL</literal><operator>&lt;&lt;</operator><name>i</name><operator>)</operator></expr>;</return> }</block></function>
<function><specifier>inline</specifier> <type><name>ll</name></type> <name>setBit</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name>n</name><operator>|</operator><operator>(</operator><literal type="number">1LL</literal><operator>&lt;&lt;</operator><name>i</name><operator>)</operator></expr>;</return><empty_stmt>;</empty_stmt> }</block></function>
<function><specifier>inline</specifier> <type><name>ll</name></type> <name>resetBit</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name>n</name><operator>&amp;</operator><operator>(</operator><operator>~</operator><operator>(</operator><literal type="number">1LL</literal><operator>&lt;&lt;</operator><name>i</name><operator>)</operator><operator>)</operator></expr>;</return> }</block></function>

<decl_stmt><decl><type><name>int</name></type> <name><name>fx</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>+</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>fy</name><index>[]</index></name> <init>= <expr><block>{<expr><operator>+</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<comment type="line">//int dx[] = {+1, 0, -1, 0, +1, +1, -1, -1};</comment>
<comment type="line">//int dy[] = {0, +1, 0, -1, +1, -1, +1, -1};</comment>


<comment type="line">//Inline functions</comment>

<function><specifier>inline</specifier> <type><name>bool</name></type> <name>EQ</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>fabs</name><argument_list>(<argument><expr><name>a</name><operator>-</operator><name>b</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1e-9</literal></expr>;</return> }</block></function>
<function><specifier>inline</specifier> <type><name>bool</name></type> <name>isLeapYear</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>year</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><operator>(</operator><name>year</name><operator>%</operator><literal type="number">400</literal><operator>==</operator><literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>year</name><operator>%</operator><literal type="number">4</literal><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>year</name><operator>%</operator><literal type="number">100</literal><operator>!=</operator><literal type="number">0</literal><operator>)</operator></expr>;</return> }</block></function>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>normal</name><parameter_list>(<parameter><decl><type><name>ll</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>a</name> <operator>%=</operator> <name>MOD</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>a</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>a</name> <operator>+=</operator> <name>MOD</name><operator>)</operator></expr>;</expr_stmt> }</block></function>
<function><specifier>inline</specifier> <type><name>ll</name></type> <name>modMul</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>a</name> <operator>%=</operator> <name>MOD</name></expr><operator>,</operator> <expr><name>b</name> <operator>%=</operator> <name>MOD</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>normal</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>normal</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><operator>(</operator><name>a</name><operator>*</operator><name>b</name><operator>)</operator><operator>%</operator><name>MOD</name></expr>;</return> }</block></function>
<function><specifier>inline</specifier> <type><name>ll</name></type> <name>modAdd</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>a</name> <operator>%=</operator> <name>MOD</name></expr><operator>,</operator> <expr><name>b</name> <operator>%=</operator> <name>MOD</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>normal</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>normal</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><operator>(</operator><name>a</name><operator>+</operator><name>b</name><operator>)</operator><operator>%</operator><name>MOD</name></expr>;</return> }</block></function>
<function><specifier>inline</specifier> <type><name>ll</name></type> <name>modSub</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>a</name> <operator>%=</operator> <name>MOD</name></expr><operator>,</operator> <expr><name>b</name> <operator>%=</operator> <name>MOD</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>normal</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>normal</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>a</name> <operator>-=</operator> <name>b</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>normal</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>a</name></expr>;</return> }</block></function>
<function><specifier>inline</specifier> <type><name>ll</name></type> <name>modPow</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>p</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>ll</name></type> <name>r</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> <while>while<condition>(<expr><name>p</name></expr>)</condition> <block>{ <if>if<condition>(<expr><name>p</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>modMul</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if> <expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>modMul</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>p</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt> }</block></while> <return>return <expr><name>r</name></expr>;</return> }</block></function>
<function><specifier>inline</specifier> <type><name>ll</name></type> <name>modInverse</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>modPow</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>MOD</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
<function><specifier>inline</specifier> <type><name>ll</name></type> <name>modDiv</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>modMul</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><call><name>modInverse</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
<function><specifier>inline</specifier> <type><name>bool</name></type> <name>isInside</name><parameter_list>(<parameter><decl><type><name>pii</name></type> <name>p</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>m</name></decl></parameter>)</parameter_list>	<block>{ <return>return <expr><operator>(</operator><name><name>p</name><operator>.</operator><name>first</name></name><operator>&gt;=</operator><literal type="number">0</literal><operator>&amp;&amp;</operator><name><name>p</name><operator>.</operator><name>first</name></name><operator>&lt;</operator><name>n</name><operator>&amp;&amp;</operator><name><name>p</name><operator>.</operator><name>second</name></name><operator>&gt;=</operator><literal type="number">0</literal><operator>&amp;&amp;</operator><name><name>p</name><operator>.</operator><name>second</name></name><operator>&lt;</operator><name>m</name><operator>)</operator></expr>;</return> }</block></function>
<function><specifier>inline</specifier> <type><name>bool</name></type> <name>isInside</name><parameter_list>(<parameter><decl><type><name>pii</name></type> <name>p</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>)</parameter_list>		<block>{ <return>return <expr><operator>(</operator><name><name>p</name><operator>.</operator><name>first</name></name><operator>&gt;=</operator><literal type="number">0</literal><operator>&amp;&amp;</operator><name><name>p</name><operator>.</operator><name>first</name></name><operator>&lt;</operator><name>n</name><operator>&amp;&amp;</operator><name><name>p</name><operator>.</operator><name>second</name></name><operator>&gt;=</operator><literal type="number">0</literal><operator>&amp;&amp;</operator><name><name>p</name><operator>.</operator><name>second</name></name><operator>&lt;</operator><name>n</name><operator>)</operator></expr>;</return> }</block></function>
<function><specifier>inline</specifier> <type><name>bool</name></type> <name>isSquare</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>)</parameter_list> 				<block>{ <decl_stmt><decl><type><name>ll</name></type> <name>s</name> <init>= <expr><call><name>sqrt</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>	<return>return <expr><operator>(</operator><name>s</name><operator>*</operator><name>s</name><operator>==</operator><name>x</name><operator>)</operator></expr>;</return> }</block></function>
<function><specifier>inline</specifier> <type><name>bool</name></type> <name>isFib</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>)</parameter_list> 				<block>{ <return>return <expr><call><name>isSquare</name><argument_list>(<argument><expr><literal type="number">5</literal><operator>*</operator><name>x</name><operator>*</operator><name>x</name><operator>+</operator><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>||</operator> <call><name>isSquare</name><argument_list>(<argument><expr><literal type="number">5</literal><operator>*</operator><name>x</name><operator>*</operator><name>x</name><operator>-</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
<function><specifier>inline</specifier> <type><name>bool</name></type> <name>isPowerOfTwo</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>)</parameter_list>			<block>{ <return>return <expr><operator>(</operator><operator>(</operator><literal type="number">1LL</literal><operator>&lt;&lt;</operator><operator>(</operator><name>ll</name><operator>)</operator><call><name>log2</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>)</operator><operator>==</operator><name>x</name><operator>)</operator></expr>;</return> }</block></function>


<struct>struct <name>func</name>
<block>{<public type="default">
	<comment type="line">//this is a sample overloading function for sorting stl</comment>
	<function type="operator"><type><name>bool</name></type> <name>operator<name>()</name></name><parameter_list>(<parameter><decl><type><name>pii</name> <specifier>const</specifier> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>pii</name> <specifier>const</specifier> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list>	
	<block>{
		<if>if<condition>(<expr><name><name>a</name><operator>.</operator><name>F</name></name><operator>==</operator><name><name>b</name><operator>.</operator><name>F</name></name></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><operator>(</operator><name><name>a</name><operator>.</operator><name>S</name></name><operator>&lt;</operator><name><name>b</name><operator>.</operator><name>S</name></name><operator>)</operator></expr>;</return></block></then></if>
		<return>return <expr><operator>(</operator><name><name>a</name><operator>.</operator><name>F</name></name><operator>&lt;</operator><name><name>b</name><operator>.</operator><name>F</name></name><operator>)</operator></expr>;</return>
	}</block></function>
</public>}</block>;</struct>

<comment type="line">//Prime Number Generator</comment>

<comment type="block">/*
#define M 100000000
int marked[M/64 + 2];

#define on(x) (marked[x/64] &amp; (1&lt;&lt;((x%64)/2)))
#define mark(x)  marked[x/64] |= (1&lt;&lt;((x%64)/2))

vl prime;

bool isPrime(int num) {
  return num &gt; 1 &amp;&amp; (num == 2 || ((num &amp; 1) &amp;&amp; !on(num))); 
}

void sieve(ll n) {
	for (ll i = 3; i * i &lt; n; i += 2) {
		if (!on(i)) {
			for (ll j = i * i; j &lt;= n; j += i + i) {
				mark(j);
			}
		}
	}
	prime.pb(2);
	for(ll i = 3; i &lt;= n; i += 2) {
		if(!on(i))	prime.pb(i);	
	}
}

*/</comment>

<comment type="line">//</comment>
<comment type="line">//debug</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>tajir</name></cpp:ifdef>
<function type="operator"><template>template <parameter_list>&lt; <parameter><type><name>typename</name></type> <name>F</name></parameter>, <parameter><type><name>typename</name></type> <name>S</name></parameter> &gt;</parameter_list></template>
<type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator <name>&lt;&lt;</name></name> <parameter_list>( <parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type> <name>os</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>pair</name><argument_list type="generic">&lt; <argument><expr><name>F</name></expr></argument>, <argument><expr><name>S</name></expr></argument> &gt;</argument_list></name> <modifier>&amp;</modifier></type> <name>p</name></decl></parameter> )</parameter_list> <block>{
	<return>return <expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">"("</literal> <operator>&lt;&lt;</operator> <name><name>p</name><operator>.</operator><name>first</name></name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal> <operator>&lt;&lt;</operator> <name><name>p</name><operator>.</operator><name>second</name></name> <operator>&lt;&lt;</operator> <literal type="string">")"</literal></expr>;</return>
}</block></function>

<function type="operator"><template>template <parameter_list>&lt; <parameter><type><name>typename</name></type> <name>T</name></parameter> &gt;</parameter_list></template>
<type><name>ostream</name> <modifier>&amp;</modifier></type><name>operator <name>&lt;&lt;</name></name> <parameter_list>( <parameter><decl><type><name>ostream</name> <modifier>&amp;</modifier></type> <name>os</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>vector</name><argument_list type="generic">&lt; <argument><expr><name>T</name></expr></argument> &gt;</argument_list></name> <modifier>&amp;</modifier></type><name>v</name></decl></parameter> )</parameter_list> <block>{
	<expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">"{"</literal></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><call><name><name>v</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>it</name> <operator>!=</operator> <call><name><name>v</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>it</name></expr></incr>)</control> <block>{
		<if>if<condition>( <expr><name>it</name> <operator>!=</operator> <call><name><name>v</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr> )</condition><then> <block type="pseudo"><expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal></expr>;</expr_stmt></block></then></if>
			<expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <operator>*</operator><name>it</name></expr>;</expr_stmt>
	}</block></for>
	<return>return <expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">"}"</literal></expr>;</return>
}</block></function>

<function type="operator"><template>template <parameter_list>&lt; <parameter><type><name>typename</name></type> <name>T</name></parameter> &gt;</parameter_list></template>
<type><name>ostream</name> <modifier>&amp;</modifier></type><name>operator <name>&lt;&lt;</name></name> <parameter_list>( <parameter><decl><type><name>ostream</name> <modifier>&amp;</modifier></type> <name>os</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>set</name><argument_list type="generic">&lt; <argument><expr><name>T</name></expr></argument> &gt;</argument_list></name> <modifier>&amp;</modifier></type><name>v</name></decl></parameter> )</parameter_list> <block>{
	<expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">"["</literal></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><call><name><name>v</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>it</name> <operator>!=</operator> <call><name><name>v</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>it</name></expr></incr>)</control> <block>{
		<if>if<condition>( <expr><name>it</name> <operator>!=</operator> <call><name><name>v</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr> )</condition><then> <block type="pseudo"><expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal></expr>;</expr_stmt></block></then></if>
			<expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <operator>*</operator><name>it</name></expr>;</expr_stmt>
	}</block></for>
	<return>return <expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">"]"</literal></expr>;</return>
}</block></function>

<function type="operator"><template>template <parameter_list>&lt; <parameter><type><name>typename</name></type> <name>T</name></parameter> &gt;</parameter_list></template>
<type><name>ostream</name> <modifier>&amp;</modifier></type><name>operator <name>&lt;&lt;</name></name> <parameter_list>( <parameter><decl><type><name>ostream</name> <modifier>&amp;</modifier></type> <name>os</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>multiset</name><argument_list type="generic">&lt; <argument><expr><name>T</name></expr></argument> &gt;</argument_list></name> <modifier>&amp;</modifier></type><name>v</name></decl></parameter> )</parameter_list> <block>{
	<expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">"["</literal></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><call><name><name>v</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>it</name> <operator>!=</operator> <call><name><name>v</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>it</name></expr></incr>)</control> <block>{
		<if>if<condition>( <expr><name>it</name> <operator>!=</operator> <call><name><name>v</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr> )</condition><then> <block type="pseudo"><expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal></expr>;</expr_stmt></block></then></if>
		<expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <operator>*</operator><name>it</name></expr>;</expr_stmt>
	}</block></for>
	<return>return <expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">"]"</literal></expr>;</return>
}</block></function>

<function type="operator"><template>template <parameter_list>&lt; <parameter><type><name>typename</name></type> <name>F</name></parameter>, <parameter><type><name>typename</name></type> <name>S</name></parameter> &gt;</parameter_list></template>
<type><name>ostream</name> <modifier>&amp;</modifier></type><name>operator <name>&lt;&lt;</name></name> <parameter_list>( <parameter><decl><type><name>ostream</name> <modifier>&amp;</modifier></type> <name>os</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>map</name><argument_list type="generic">&lt; <argument><expr><name>F</name></expr></argument>, <argument><expr><name>S</name></expr></argument> &gt;</argument_list></name> <modifier>&amp;</modifier></type><name>v</name></decl></parameter> )</parameter_list> <block>{
	<expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">"["</literal></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><call><name><name>v</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>it</name> <operator>!=</operator> <call><name><name>v</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>it</name></expr></incr>)</control> <block>{
		<if>if<condition>( <expr><name>it</name> <operator>!=</operator> <call><name><name>v</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr> )</condition><then> <block type="pseudo"><expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal></expr>;</expr_stmt></block></then></if>
		<expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <name><name>it</name> <operator>-&gt;</operator> <name>first</name></name> <operator>&lt;&lt;</operator> <literal type="string">" = "</literal> <operator>&lt;&lt;</operator> <name><name>it</name> <operator>-&gt;</operator> <name>second</name></name></expr> ;</expr_stmt>
		}</block></for>
	<return>return <expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">"]"</literal></expr>;</return>
}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dbg</name><parameter_list>(<parameter><type><name>args</name><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {cerr &lt;&lt; #args &lt;&lt; " : "; faltu(args); } while(0)</cpp:value></cpp:define>

<decl_stmt><decl><type><name>clock_t</name></type> <name>tStart</name> <init>= <expr><call><name>clock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>timeStamp</name></cpp:macro> <cpp:value>dbg("Execution Time: ", (double)(clock() - tStart)/CLOCKS_PER_SEC)</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>faltu</name> <parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
}</block></function>

<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name>void</name></type> <name>faltu</name><parameter_list>( <parameter><decl><type><name>T</name></type> <name><name>a</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter> )</parameter_list> <block>{
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
}</block></function>

<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>, <parameter><type><name>typename</name> <modifier>...</modifier></type> <name>hello</name></parameter>&gt;</parameter_list></template>
<type><name>void</name></type> <name>faltu</name><parameter_list>( <parameter><decl><type><name>T</name></type> <name>arg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>hello</name> <modifier>&amp;</modifier><modifier>...</modifier></type> <name>rest</name></decl></parameter>)</parameter_list> <block>{
	<expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <name>arg</name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>faltu</name><argument_list>(<argument><expr><name>rest</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dbg</name><parameter_list>(<parameter><type><name>args</name><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// tajir</comment>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>tajir</name></cpp:ifdef>
		<expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"input.txt"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<comment type="line">// online submission</comment>
	<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name>optimize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	
	<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>ll</name></type> <name>res</name> <init>= <expr><name>n</name></expr></init></decl>;</decl_stmt>

	<for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>*</operator> <name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
		<if>if<condition>(<expr><name>n</name> <operator>%</operator> <name>i</name> <operator>==</operator> <literal type="number">0ll</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>gcd</name><argument_list>(<argument><expr><name>res</name></expr></argument> , <argument><expr><call><name>gcd</name><argument_list>(<argument><expr><name>i</name></expr></argument> , <argument><expr><name>n</name><operator>/</operator><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>

	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>res</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
	
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
