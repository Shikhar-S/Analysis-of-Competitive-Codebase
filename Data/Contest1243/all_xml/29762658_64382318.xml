<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29762658_64382318.cpp">    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX</name></cpp:macro> <cpp:value>10e15+1</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD</name></cpp:macro> <cpp:value>998244353</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>for(int i=a;i&lt;b;i++)</cpp:value></cpp:define>
    <using>using <namespace>namespace <name>std</name>;</namespace></using>
    <typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
    <typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>vll</name>;</typedef>
    <typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>
    <typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>pll</name>;</typedef>
    <typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>double</name></expr></argument>,<argument><expr><name>double</name></expr></argument>&gt;</argument_list></name></type> <name>ii</name>;</typedef>
    <typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pll</name></expr></argument>&gt;</argument_list></name></type> <name>vpll</name>;</typedef>
    <decl_stmt><decl><type><name>ll</name></type> <name>N</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>ll</name></type> <name>M</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>ll</name></type> <name>Q</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>ll</name></type> <name>T</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>vll</name></type> <name>vl</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>string</name></type> <name>s1</name></decl>,<decl><type ref="prev"/><name>s2</name></decl>;</decl_stmt>
    <function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
    <block>{
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>T</name></expr>;</expr_stmt>
        <macro><name>FOR</name><argument_list>(<argument>k</argument>,<argument><literal type="number">0</literal></argument>,<argument>T</argument>)</argument_list></macro>
        <block>{
            <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>N</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>s1</name><operator>&gt;&gt;</operator><name>s2</name></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>bool</name></type> <name>unamal</name><init>=<expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>char</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>bool</name></type> <name>dosmal</name><init>=<expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>bool</name></type> <name>cambio</name><init>=<expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
            <macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>N</argument>)</argument_list></macro>
            <block>{
                <if>if<condition>(<expr><operator>!</operator><name>unamal</name></expr>)</condition><then>
                <block>{
                    <if>if<condition>(<expr><name><name>s1</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name><name>s2</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
                    <block>{
                        <expr_stmt><expr><name>a</name><operator>=</operator><name><name>s1</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>b</name><operator>=</operator><name><name>s2</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>unamal</name><operator>=</operator><literal type="boolean">true</literal></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then> <else>else<block>{
                    <if>if<condition>(<expr><name><name>s1</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name><name>s2</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
                    <block>{
                        <if>if<condition>(<expr><name><name>s2</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name>b</name><operator>&amp;&amp;</operator><name><name>s1</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name>a</name></expr>)</condition><then>
                        <block>{   <if>if<condition>(<expr><name>cambio</name><operator>==</operator><literal type="boolean">false</literal></expr>)</condition><then>
                            <block>{<expr_stmt><expr><name>cambio</name><operator>=</operator><literal type="boolean">true</literal></expr>;</expr_stmt>}</block></then>
                            <else>else<block>{
                                <expr_stmt><expr><name>dosmal</name><operator>=</operator><literal type="boolean">true</literal></expr>;</expr_stmt>
                            }</block></else></if>
                        }</block></then>
                        <else>else
                        <block>{
                            <expr_stmt><expr><name>dosmal</name><operator>=</operator><literal type="boolean">true</literal></expr>;</expr_stmt>
                        }</block></else></if>
                    }</block></then></if>
                }</block></else></if>
            }</block>
            <if>if<condition>(<expr><name>dosmal</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></then>
            <elseif>else <if>if<condition>(<expr><name>unamal</name><operator>&amp;&amp;</operator><operator>!</operator><name>cambio</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></then></if></elseif>
            <else>else <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Yes"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></else></if>
        }</block>


    }</block></function></unit>
