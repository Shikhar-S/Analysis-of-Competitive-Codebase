<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29777533_64397666.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long int</cpp:value></cpp:define>
 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout &lt;&lt; '&gt;' &lt;&lt; #x &lt;&lt; ':' &lt;&lt; x &lt;&lt; endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REP</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(ll i=0;i&lt;(n);i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(ll i=(a);i&lt;=(b);i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FORD</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(ll i=(a);i&gt;=(b);i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(v).begin(),(v).end()</cpp:value></cpp:define>
 
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<comment type="line" format="doxygen">///////////////////////////////////////////////////////</comment>
 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>

<function><type><name>ll</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><name>a</name><operator>&gt;</operator><name>b</name></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><call><name>gcd</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
    <if>if<condition>(<expr><name>a</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><name>b</name></expr>;</return></block></then></if>
    <if>if<condition>(<expr><name>a</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
    <return>return <expr><call><name>gcd</name><argument_list>(<argument><expr><name>b</name><operator>%</operator><name>a</name></expr></argument>,<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</return>

}</block></function>

<decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>bfs</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>a</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name><name>visited</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>gcdstore</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name><name>beauty</name><index>[]</index></name></decl></parameter>)</parameter_list><block>{
    <comment type="line">// cout&lt;&lt;x&lt;&lt;":";</comment>
    <comment type="line">// if(gcdstore.size()!=0){</comment>
        <decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type><name>fornext</name></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>auto</name></type> <name>i</name><range>:<expr><name>gcdstore</name></expr></range></decl></init>)</control><block>{
            <comment type="line">// cout&lt;&lt;i.first&lt;&lt;":"&lt;&lt;i.second&lt;&lt;endl;</comment>
            <decl_stmt><decl><type><name>ll</name></type> <name>temp</name> <init>= <expr><call><name>gcd</name><argument_list>(<argument><expr><name><name>i</name><operator>.</operator><name>first</name></name></expr></argument>,<argument><expr><name><name>beauty</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>ans</name><operator>=</operator><operator>(</operator><name>ans</name><operator>+</operator><operator>(</operator><name>temp</name><operator>*</operator><name><name>i</name><operator>.</operator><name>second</name></name><operator>)</operator><operator>%</operator><name>mod</name> <operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>fornext</name><index>[<expr><name>temp</name></expr>]</index></name><operator>+=</operator><name><name>i</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt>
        }</block></for>
    <comment type="line">// }    </comment>
    <expr_stmt><expr><name><name>fornext</name><index>[<expr><name><name>beauty</name><index>[<expr><name>x</name></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
    <comment type="line">// for(int i=0;i&lt;gcdstore.size())</comment>
    <comment type="line">// cout&lt;&lt;endl;</comment>
    <expr_stmt><expr><name>ans</name> <operator>=</operator> <operator>(</operator><name>ans</name> <operator>+</operator> <name><name>beauty</name><index>[<expr><name>x</name></expr>]</index></name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>a</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <if>if<condition>(<expr><operator>!</operator><name><name>visited</name><index>[<expr><name><name>a</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>)</condition><then><block>{
            <expr_stmt><expr><name><name>visited</name><index>[<expr><name><name>a</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>=</operator><literal type="boolean">true</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>bfs</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>visited</name></expr></argument>,<argument><expr><name>fornext</name></expr></argument>,<argument><expr><name><name>a</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name>beauty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></for>
}</block></function>

<function><type><name>bool</name></type> <name>csort</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list><block>{
    <return>return <expr><operator>(</operator><name><name>a</name><operator>.</operator><name>first</name></name> <operator>&gt;</operator> <name><name>b</name><operator>.</operator><name>first</name></name><operator>)</operator></expr>;</return>
}</block></function>

<function><type><name>ll</name></type> <name>modpow</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><name>x</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><literal type="number">1LL</literal></expr>;</return></block></then></if>
    <if>if<condition>(<expr><name>x</name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>temp</name> <init>= <expr><call><name>modpow</name><argument_list>(<argument><expr><name>m</name></expr></argument>,<argument><expr><name>x</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><operator>(</operator><name>temp</name><operator>*</operator><name>temp</name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</return>
    }</block></then><else>else<block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>temp</name> <init>= <expr><call><name>modpow</name><argument_list>(<argument><expr><name>m</name></expr></argument>,<argument><expr><name>x</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><operator>(</operator><operator>(</operator><name>temp</name><operator>*</operator><name>temp</name><operator>)</operator><operator>%</operator><name>mod</name> <operator>*</operator> <name>m</name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</return>
    }</block></else></if>
}</block></function>

<function><type><name>void</name></type> <name>solve</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>till</name></decl></parameter>)</parameter_list><block>{
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"\n"</literal></expr><operator>,</operator><expr><call><name>DEBUG</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>DEBUG</name><argument_list>(<argument><expr><name>till</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>ans2</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>till</name></expr>;</condition><incr><expr><name>i</name><operator>+=</operator><name>a</name></expr></incr>)</control><block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>temp</name> <init>= <expr><name>i</name></expr></init></decl>,<decl><type ref="prev"/><name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <while>while<condition>(<expr><name>temp</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><block>{
            <expr_stmt><expr><name>ans</name><operator>=</operator><name>ans</name><operator>*</operator><literal type="number">10</literal> <operator>+</operator> <name>temp</name><operator>%</operator><literal type="number">10</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>temp</name><operator>/=</operator><literal type="number">10</literal></expr>;</expr_stmt>
        }</block></while>
        <if>if<condition>( <expr><operator>(</operator><name>ans</name><operator>%</operator><name>a</name><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>ans2</name><operator>=</operator><operator>(</operator><name>ans2</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block></then></if>
    }</block></for>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans2</name></expr>;</expr_stmt>
}</block></function>

<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type><name>a</name><argument_list>(<argument><expr><literal type="number">500002</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name><name>visited</name><index>[<expr><literal type="number">500002</literal></expr>]</index></name><init>=<expr><block>{<expr><literal type="boolean">false</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>qans</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type><name>query</name><argument_list>(<argument><expr><literal type="number">500002</literal></expr></argument>)</argument_list></decl>;</decl_stmt><comment type="line">//query at time t present or not</comment>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type><name>adding</name><argument_list>(<argument><expr><literal type="number">500002</literal></expr></argument>)</argument_list></decl>;</decl_stmt><comment type="line">//adding at time t value k</comment>

<function><type><name>void</name></type> <name>traverse</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>)</parameter_list><block>{
    <comment type="line">// DEBUG(x);</comment>
    <comment type="line">//add values of adding[k] to adding[0] </comment>
    <if>if<condition>(<expr><name>x</name><operator>!=</operator><literal type="number">1</literal></expr>)</condition><then><block>{
        <for>for<control>(<init><decl><type><name>auto</name></type> <name>i</name><range>:<expr><name><name>adding</name><index>[<expr><name>x</name></expr>]</index></name></expr></range></decl></init>)</control>
            <block type="pseudo"><expr_stmt><expr><name><name>adding</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name><name>i</name><operator>.</operator><name>F</name></name><operator>-</operator><name>level</name></expr>]</index></name><operator>+=</operator><name><name>i</name><operator>.</operator><name>S</name></name></expr>;</expr_stmt></block></for>
    }</block></then></if>

    <decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>,<argument><expr><name><name>greater</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>tempmap</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>temp</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>isleaf</name><init>=<expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">// int qsize = query[x].size();</comment>
    <comment type="line">// int filling_query=0;</comment>
    <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name><name>visited</name><index>[<expr><name><name>a</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr> )</condition><then><block>{<comment type="line">//leaf</comment>
        <comment type="line">// cout&lt;&lt;"isleaf\n";</comment>
        <expr_stmt><expr><name>isleaf</name><operator>=</operator><literal type="boolean">true</literal></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>auto</name></type> <name>i</name><range>:<expr><name><name>adding</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></range></decl></init>)</control><block>{
            <expr_stmt><expr><name>temp</name><operator>+=</operator><name><name>i</name><operator>.</operator><name>S</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>tempmap</name><index>[<expr><name><name>i</name><operator>.</operator><name>F</name></name></expr>]</index></name><operator>=</operator><name>temp</name></expr>;</expr_stmt>
            <comment type="line">// while(filling_query&lt;qsize &amp;&amp; query[x][filling_query]){</comment>
            <comment type="line">//     qans[query[x][filling_query]]=temp;</comment>
            <comment type="line">// }</comment>
        }</block></for>
    }</block></then></if>

    <comment type="line">// if(isleaf)</comment>
    <comment type="line">//     for(auto i:tempmap)</comment>
    <comment type="line">//         cout&lt;&lt;i.F&lt;&lt;":"&lt;&lt;i.S&lt;&lt;" ";</comment>
    <comment type="line">// else   </comment>
    <comment type="line">//     for(auto i:adding[1])</comment>
    <comment type="line">//         cout&lt;&lt;i.F&lt;&lt;":"&lt;&lt;i.S&lt;&lt;" ";</comment>
    <comment type="line">// cout&lt;&lt;endl;     </comment>
        

    <if>if<condition>(<expr><name>isleaf</name></expr>)</condition><then><block>{
        <comment type="line">// int i=0;</comment>
        <comment type="line">// auto iter = tempmap.begin();</comment>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>query</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
            <decl_stmt><decl><type><name><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>,<argument><expr><name><name>greater</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name><operator>::</operator><name>iterator</name></name></type> <name>it</name> <init>= <expr><call><name><name>tempmap</name><operator>.</operator><name>lower_bound</name></name><argument_list>(<argument><expr><name><name>query</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name>level</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name>it</name><operator>==</operator><call><name><name>tempmap</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <block type="pseudo"><continue>continue;</continue></block></then>
            <else>else
                <block type="pseudo"><expr_stmt><expr><name><name>qans</name><index>[<expr><name><name>query</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>=</operator><call><name><name>tempmap</name><operator>.</operator><name>lower_bound</name></name><argument_list>(<argument><expr><name><name>query</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name>level</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>second</name></expr>;</expr_stmt></block></else></if>
        }</block></for>
        
        <comment type="line">// while(i&lt;query[x].size() &amp;&amp; iter!=tempmap.end()){</comment>
        <comment type="line">//     if(iter-&gt;first + level &lt;= query[x][i]){</comment>
        <comment type="line">//         qans[query[x][i]] = iter-&gt;second;</comment>
        <comment type="line">//         iter++;</comment>
        <comment type="line">//     }else{</comment>
        <comment type="line">//         i++;</comment>
        <comment type="line">//         if(i&lt;query[x].size())</comment>
        <comment type="line">//             qans[query[x][i]] = qans[query[x][i-1]];</comment>
        <comment type="line">//     }</comment>
                
        <comment type="line">// }</comment>
    }</block></then><else>else<block>{
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>query</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><comment type="line">//answer queries for this node</comment>
                <block type="pseudo"><expr_stmt><expr><name><name>qans</name><index>[<expr><name><name>query</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>=</operator><name><name>adding</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name><name>query</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name>level</name></expr>]</index></name></expr>;</expr_stmt></block></for>
    }</block></else></if>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>a</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <if>if<condition>(<expr><operator>!</operator><name><name>visited</name><index>[<expr><name><name>a</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>)</condition><then><block>{
            <expr_stmt><expr><name><name>visited</name><index>[<expr><name><name>a</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>=</operator><literal type="boolean">true</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>traverse</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name>level</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></for>
    
    <comment type="line">//remove values from adding[0];</comment>
    <if>if<condition>(<expr><name>x</name><operator>!=</operator><literal type="number">1</literal></expr>)</condition><then><block>{
        <for>for<control>(<init><decl><type><name>auto</name></type> <name>i</name><range>:<expr><name><name>adding</name><index>[<expr><name>x</name></expr>]</index></name></expr></range></decl></init>)</control>
            <block type="pseudo"><expr_stmt><expr><name><name>adding</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name><name>i</name><operator>.</operator><name>F</name></name><operator>-</operator><name>level</name></expr>]</index></name><operator>-=</operator><name><name>i</name><operator>.</operator><name>S</name></name></expr>;</expr_stmt></block></for>
    }</block></then></if>
}</block></function>


<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    
    <decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>k</name></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>k</name><operator>--</operator></expr>)</condition><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>,<decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>s</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type><name>ans</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name><name>count</name><index>[<expr><literal type="number">26</literal></expr>]</index></name><init>=<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

        <macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n-<literal type="number">1</literal></argument>)</argument_list></macro><block>{
            <expr_stmt><expr><name><name>count</name><index>[<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>count</name><index>[<expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
        }</block>

        <decl_stmt><decl><type><name>int</name></type> <name>flag</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">25</literal></argument>)</argument_list></macro><block>{
            <if>if<condition>(<expr><name><name>count</name><index>[<expr><name>i</name></expr>]</index></name><operator>%</operator><literal type="number">2</literal></expr>)</condition><then><block>{
                <comment type="line">// DEBUG(i);</comment>
                <expr_stmt><expr><name>flag</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
                <break>break;</break>
            }</block></then></if>
        }</block>
        <if>if<condition>(<expr><name>flag</name></expr>)</condition><then><block>{
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"NO\n"</literal></expr>;</expr_stmt>
            <continue>continue;</continue>
        }</block></then><else>else<block>{
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"YES\n"</literal></expr>;</expr_stmt>

            <macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n-<literal type="number">1</literal></argument>)</argument_list></macro><block>{
                <expr_stmt><expr><name>flag</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
                <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
                    <block type="pseudo"><continue>continue;</continue></block></then></if>
                <macro><name>FOR</name><argument_list>(<argument>j</argument>,<argument>i+<literal type="number">1</literal></argument>,<argument>n-<literal type="number">1</literal></argument>)</argument_list></macro><block>{
                    <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then><block>{
                        <expr_stmt><expr><name>flag</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name>j</name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
                        <break>break;</break>
                    }</block></then></if>
                }</block>
                <if>if<condition>(<expr><name>flag</name></expr>)</condition><then>
                    <block type="pseudo"><continue>continue;</continue></block></then></if>

                <macro><name>FOR</name><argument_list>(<argument>j</argument>,<argument>i+<literal type="number">1</literal></argument>,<argument>n-<literal type="number">1</literal></argument>)</argument_list></macro><block>{
                    <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name><name>t</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then><block>{
                        <expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>t</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
                        <break>break;</break>            
                    }</block></then></if>
                }</block>
            }</block>

            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name><name>ans</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
            <macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>ans.size()-<literal type="number">1</literal></argument>)</argument_list></macro>
                <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>F</name><operator>+</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>S</name><operator>+</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="string">"\n"</literal></expr>;</expr_stmt>

        }</block></else></if>

    }</block></while>
    
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
