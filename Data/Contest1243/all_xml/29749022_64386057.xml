<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29749022_64386057.cpp"><comment type="block">/*
    Mbak Rose Dong
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long int</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>,<decl><type ref="prev"/><name>ans</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>q</name></decl>,<decl><type ref="prev"/><name>curr</name></decl>,<decl><type ref="prev"/><name>temp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>tc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>now</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>akar</name> <init>= <expr><call><name>sqrt</name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>rose</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>jisoo</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>skrg</name> <init>= <expr><name>now</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>gcd</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">2</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>akar</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <if>if<condition>(<expr><name>now</name> <operator>%</operator> <name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>gcd</name> <operator>=</operator> <call><name>__gcd</name><argument_list>(<argument><expr><name>gcd</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>gcd</name> <operator>=</operator> <call><name>__gcd</name><argument_list>(<argument><expr><name>gcd</name></expr></argument>, <argument><expr><name>now</name><operator>/</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>rose</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        }</block></then></if>
    }</block></for>
    <if>if<condition>(<expr><name>rose</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else
    <block>{
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>, <argument><expr><name>gcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
