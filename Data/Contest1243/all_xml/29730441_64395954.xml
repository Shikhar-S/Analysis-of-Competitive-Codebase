<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29730441_64395954.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">1000000</literal></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>LL</name></type> <name><name>prime</name><index>[<expr><name>N</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl> ;</decl_stmt>
<function><type><name>void</name></type> <name>getPrime</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>dsaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaajlksfjlkasjflkasjkfjalkjflkassjflkajkfajlkfjalkfjlakjflkasjflkasjlkfjalkfjalkjflkasjflkajk</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>prime</name></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument> , <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>prime</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <for>for <control>(<init><decl><type><name>LL</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>N</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <if>if <condition>(<expr><operator>!</operator><name><name>prime</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name><name>prime</name><index>[<expr><operator>++</operator><name><name>prime</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>i</name></expr> ;</expr_stmt></block></then></if>
        <decl_stmt><decl><type><name>int</name></type> <name>dmsafjalkhfjlkasjflkasjlkfjaslkfjlakjflkasjflkasjflkajslkfjaslkfjlaskjflkaslfkjsalkfjlkasjflakjfjlkdjlfkjaklfjkasfjlaskjflka</name><init>= <expr><literal type="number">5</literal></expr></init></decl> ;</decl_stmt>
        <for>for <control>(<init><decl><type><name>LL</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name><name>prime</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>prime</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&lt;=</operator> <name>N</name> <operator>/</operator> <name>i</name></expr> ;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <expr_stmt><expr><name><name>prime</name><index>[<expr><name><name>prime</name><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
            <if>if <condition>(<expr><name>i</name> <operator>%</operator> <name><name>prime</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
                <block type="pseudo"><break>break ;</break></block></then></if>
        }</block></for>
    }</block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>aksldjaslkdjlkasjflkasjlkasjlkdjlkajfdlkadjlkfjlkadsjfflkasjdfkasjdlkgjasdlkjglksdjflkasjdlkfjsdlkafjlkasdjflkasjdfjlaskdjflkas</name> <init>= <expr><literal type="number">56</literal></expr></init></decl>;</decl_stmt>
}</block></function>

<comment type="line">//factor[i][0]  ä»£è¡¨ç¬¬iä¸ªç´ æ°çå¼</comment>
<comment type="line">//factor[i][1]  ä»£è¡¨ç¬¬iä¸ªç´ æ°çä¸ªæ°</comment>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>factor</name><index>[<expr><literal type="number">100</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>LL</name></type> <name>fatCnt</name></decl> ;</decl_stmt>

<function><type><name>LL</name></type> <name>getFactors</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>djslakfjlkadsjflkadjslgkjasdlkgjlaksdjflkasdjflkasdjflkasjdlkfjasdlkgjaslkjglksadjklfdmaslkdmflasdkglksadjgjlksdanlkgnasdlknfdasdnfnalkdsnflkasdnflkasnlkfnaskdnflkd</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>fatCnt</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>tmp</name> <init>= <expr><name>x</name></expr></init></decl> ;</decl_stmt>
    <for>for <control>(<init><decl><type><name>LL</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name><name>prime</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;=</operator> <name>tmp</name> <operator>/</operator> <name><name>prime</name><index>[<expr><name>i</name></expr>]</index></name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><name><name>factor</name><index>[<expr><name>fatCnt</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
        <if>if <condition>(<expr><name>tmp</name> <operator>%</operator> <name><name>prime</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>jfakjflkasdjglkjaslkgjaslkjdglkasdjlkgjaslkdgjlkasdjdglkasjddlkgjasdlkgjaslkjglkasjdlkgjaslkdjglkasddjgdk</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>factor</name><index>[<expr><name>fatCnt</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>prime</name><index>[<expr><name>i</name></expr>]</index></name></expr> ;</expr_stmt>
            <while>while <condition>(<expr><name>tmp</name> <operator>%</operator> <name><name>prime</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{
                <expr_stmt><expr><name><name>factor</name><index>[<expr><name>fatCnt</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>++</operator></expr> ;</expr_stmt>
                <expr_stmt><expr><name>tmp</name> <operator>/=</operator> <name><name>prime</name><index>[<expr><name>i</name></expr>]</index></name></expr> ;</expr_stmt>
            }</block></while>
            <expr_stmt><expr><name>fatCnt</name><operator>++</operator></expr> ;</expr_stmt>
        }</block></then></if>
    }</block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>fjkslafjlkasdjflkasdjlkfjasdlkfjlkasdjflkasdjflkasdjjfkjasdlkfjasdlkfjlkasdjflkasdjglkasjdlgkjs</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>tmp</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name><name>factor</name><index>[<expr><name>fatCnt</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>tmp</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>factor</name><index>[<expr><name>fatCnt</name><operator>++</operator></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
    }</block></then></if>
    <return>return <expr><name>fatCnt</name></expr> ;</return>
}</block></function>

<decl_stmt><decl><type><name>LL</name></type> <name>now</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>LL</name></type> <name>u</name></decl> ;</decl_stmt>
<function><type><name>void</name></type> <name>work</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name>scanf</name> <argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument> , <argument><expr><operator>&amp;</operator><name>now</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>u</name> <operator>=</operator> <call><name>getFactors</name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>flkadjglkaddsjlgkjaslkgjlaskjglkasdngklewjkfgwjopqerjgoaijg0qiwejr092fjlwakjdglkjasdlkdjglkawjglkasjdlk</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>u</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument> , <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    }</block></then>

    <elseif>else <if>if <condition>(<expr><name>u</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument> , <argument><expr><name><name>factor</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    }</block></then></if></elseif>
    <else>else
        <block type="pseudo"><expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block></else></if>
}</block></function>
<function><type><name>int</name></type> <name>main</name> <parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name>getPrime</name><argument_list>()</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>fljaskjflkasdjglksajflkgjalksjglkasjglkasjlkfgjlaskjglkasdjglkawjlkdfjlkadjflkawdjflkasjdlkgfjasdlkjglkasdjglkasjdglkajslkdjflka</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>work</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/*
#include &lt;stdio.h&gt;
#include &lt;vector&gt;
#include &lt;algorithm&gt;
using namespace std ;

vector &lt;int&gt; V1 , V2 ;

int n ;
char s[10004] , t[10005] ;
int cnts[27] , cntt[27] ;
int main ()
{
    int T ;
    scanf ("%d" , &amp;T) ;
    while (T--)
    {
        V1.clear() ;
        V2.clear() ;
        s[0] = '+' ;
        scanf ("%d" , &amp;n) ;
        scanf ("%s" , s + 1) ;
        scanf ("%s" , t + 1) ;
        for (int i = 1 ; i &lt;= n ; ++i)
        {
            if (s[i] == t[i])
                continue ;
            bool flag = true ;
            for (int j = i + 1 ; j &lt;= n ; ++j)
            {
                if (s[j] == t[i])
                {
                    V1.push_back(j) ;
                    V2.push_back(j) ;
                    swap(s[j] , t[j]) ;
                }
                if (t[j] == t[i])
                {
                    V1.push_back(i) ;
                    V2.push_back(j) ;
                    swap(s[i] , t[j]) ;
                    flag = false ;
                    break ;
                }
            }
            if (flag)
            {
                s[0] = '-' ;
                break ;
            }
//            printf ("s : %s\n" , s + 1) ;
//            printf ("t : %s\n" , t + 1) ;
        }
        if (s[0] == '-')
        {
            printf ("No\n") ;
            continue ;
        }
        printf ("Yes\n") ;
        printf ("%d\n" , V1.size()) ;
        for (int i = 0 ; i &lt; V1.size() ; ++i)
        {
            printf ("%d %d\n" , V1[i] , V2[i]) ;
        }
    }
}
*/</comment>
</unit>
