<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29734110_64393336.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>long</name> <name>long</name> <name>int</name></type> <name>lli</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name> <name>int</name></type> <name>ulli</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<typedef>typedef <type><name><name>priority_queue</name><argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument>, <argument><expr><name><name>vector</name><argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></expr></argument>, <argument><expr><name><name>greater</name><argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type>  <name>minHeap</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ones</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_popcount(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>onesl</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_popcountl(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>onesll</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_popcountll(x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>eb</name></cpp:macro> <cpp:value>emplace_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mt</name></cpp:macro> <cpp:value>make_tuple</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>scn</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%d",&amp;n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>scnll</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%lld",&amp;n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>scn2</name><parameter_list>(<parameter><type><name>n</name></type></parameter>,<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%d%d",&amp;n,&amp;m)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>scn3</name><parameter_list>(<parameter><type><name>n</name></type></parameter>,<parameter><type><name>m</name></type></parameter>,<parameter><type><name>w</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%d%d%d",&amp;n,&amp;m,&amp;w)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>scn2ll</name><parameter_list>(<parameter><type><name>n</name></type></parameter>,<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%lld%lld",&amp;n,&amp;m)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atoz</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>v.begin(),v.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ratoz</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>v.rbegin(),v.rend()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Fill</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(a,v,sizeof(a))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inf</name></cpp:macro> <cpp:value>1e9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pi</name></cpp:macro> <cpp:value>acos(-1.0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>max3</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>max(a,max(b,c))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>min3</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>min(a,min(b,c))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FastIO</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bug</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cerr &lt;&lt; __LINE__ &lt;&lt; " says: " &lt;&lt; #x &lt;&lt; " = " &lt;&lt; (x) &lt;&lt; "\n"</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>Set</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>N</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>)</parameter_list>
<block>{
    <return>return <expr><name>N</name><operator>=</operator><name>N</name> <operator>|</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>pos</name><operator>)</operator></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>reset</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>N</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>)</parameter_list>
<block>{
    <return>return <expr><name>N</name> <operator>=</operator> <name>N</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>pos</name><operator>)</operator></expr>;</return>
}</block></function>
<function><type><name>bool</name></type> <name>check</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>N</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>)</parameter_list>
<block>{
    <return>return <expr><call>(<name>bool</name>)<argument_list>(<argument><expr><name>N</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>pos</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><specifier>inline</specifier> <type><name>int</name></type> <name>addmod</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{
    <return>return <expr><operator>(</operator><name>x</name><operator>%</operator><name>mod</name> <operator>+</operator> <name>y</name><operator>%</operator><name>mod</name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</return>
}</block></function>
<function><specifier>inline</specifier> <type><name>int</name></type> <name>submod</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{
    <return>return <expr><operator>(</operator><name>x</name><operator>%</operator><name>mod</name> <operator>-</operator> <name>y</name><operator>%</operator><name>mod</name> <operator>+</operator> <name>mod</name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</return>
}</block></function>
<function><specifier>inline</specifier> <type><name>int</name></type> <name>mulmod</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{
    <return>return <expr><operator>(</operator><name>x</name><operator>%</operator><name>mod</name> <operator>*</operator><literal type="number">1LL</literal><operator>*</operator> <name>y</name><operator>%</operator><name>mod</name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</return>
}</block></function>

<function><specifier>inline</specifier> <type><name>int</name></type> <name>nextSubMask</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>)</parameter_list>
<block>{
    <return>return <expr><operator>(</operator><name>i</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>&amp;</operator><name>mask</name></expr>;</return>   <comment type="line" format="doxygen">/// returns next  submask</comment>
}</block></function>

<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name>void</name></type> <name>we_r_done</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>mssg</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>mssg</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>


<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <comment type="line" format="doxygen">///freopen("output.txt","w",stdout);</comment>
    <comment type="line" format="doxygen">///freopen("input.txt","r",stdin);</comment>

    <comment type="line" format="doxygen">///FastIO;</comment>

    <decl_stmt><decl><type><name>lli</name></type> <name>n</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>


    <if>if<condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>we_r_done</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

    <decl_stmt><decl><type><name>lli</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> , <decl><type ref="prev"/><name>gone</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> , <decl><type ref="prev"/><name>nn</name> <init>= <expr><name>n</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>prime</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

    <for>for<control>(<init><decl><type><name>lli</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><operator>(</operator><name>i</name><operator>*</operator><name>i</name><operator>)</operator><operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{

        <if>if<condition>(<expr><name>n</name><operator>%</operator><name>i</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
        <expr_stmt><expr><name>prime</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <while>while<condition>(<expr><name>n</name><operator>%</operator><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{
            <expr_stmt><expr><name>n</name><operator>/=</operator> <name>i</name></expr>;</expr_stmt>
        }</block></while>
        <if>if<condition>(<expr><name>n</name><operator>&gt;</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block></else></if>
        <break>break;</break>
    }</block></for>

    <if>if<condition>(<expr><name>prime</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>=</operator> <name>nn</name></expr>;</expr_stmt></block></then></if>

    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>

}</block></function>

<comment type="line" format="doxygen">///sin and cos expect input in radians not degrees. so use , sin(degrees * pi / 180)</comment>
<comment type="line" format="doxygen">///using bs = bitset&lt;MX&gt;; // how many distinct number can be form?</comment>
<comment type="line" format="doxygen">///sort(atoz(v), [](const data x, const data y){return (x.a==y.a?x.b&gt;y.b : x.a&lt;y.a);});</comment>
</unit>
