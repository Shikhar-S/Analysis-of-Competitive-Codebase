<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29783796_64392257.cpp"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_CRT_SECURE_NO_WARNINGS</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>INF</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>kol</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>)</parameter_list> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><name>ch</name></expr>)</condition> <block>{
		<expr_stmt><expr><name>ch</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>c</name><operator>++</operator></expr>;</expr_stmt>
	}</block></while>
	<return>return <expr><name>c</name></expr>;</return>
}</block></function>
<struct>struct <name>dd</name> <block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>a1</name></decl>, <decl><type ref="prev"/><name>a2</name></decl>, <decl><type ref="prev"/><name>a3</name></decl>, <decl><type ref="prev"/><name>a4</name></decl>;</decl_stmt>
</public>}</block>;</struct>
<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<comment type="line">//freopen("input.txt", "r", stdin);</comment>
	<comment type="line">//freopen("output.txt", "w", stdout);</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>q</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>q</name></expr>;</expr_stmt>
	<comment type="block">/*
	while (q--) {
		int n;
		cin &gt;&gt; n;
		string s, t;
		cin &gt;&gt; s &gt;&gt; t;
		vector&lt;int&gt; a(26);
		for (int i = 0; i &lt; n; i++) {    //bca 
			                             //abc
			a[s[i] - 'a']++;
			a[t[i] - 'a']++;
		}
		bool g = 0;
		for (int i = 0; i &lt; a.size(); i++) {
			if (a[i] % 2) {
			
				g = 1;
			}
		} 
		if (g) {
			cout &lt;&lt; "No" &lt;&lt; endl;
			continue;
		}
		cout &lt;&lt; "Yes" &lt;&lt; endl;
		vector&lt;pair&lt;int, int&gt; &gt; ans;
		for (int i = 0; i &lt; n-1; i++) {
			if (s[i] == t[i]) continue;
			else {
				bool a = 1;
				for (int j = i; j &lt; n; j++) {
					if (t[j] == s[i]) {
						
						ans.push_back({ i + 1, j });
						ans.push_back({ i + 1, i });
						swap(s[i + 1], t[j]);
						swap(s[i + 1], t[i]);
						a = 0;
						break;
					}
				}
				if (a) {
					for (int j = i + 1; j &lt; n; j++) {
						if (s[i] == s[j]) {
							ans.push_back({ j, i });
							swap(s[j], s[i]);
							break;
						}
					}
				}
			}
		}
		cout &lt;&lt; ans.size() &lt;&lt; endl;
		for (int i = 0; i &lt; ans.size(); i++) {
			cout &lt;&lt; ans[i].first + 1&lt;&lt; " " &lt;&lt; ans[i].second + 1 &lt;&lt; endl;
		}
	} */</comment>
	<while>while <condition>(<expr><name>q</name><operator>--</operator></expr>)</condition> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>s</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>ch</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>p1</name></decl>, <decl><type ref="prev"/><name>p2</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>ch</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>p2</name> <operator>=</operator> <name>p1</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>p1</name><operator>.</operator><name>first</name></name> <operator>=</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="char">'a'</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>p1</name><operator>.</operator><name>second</name></name> <operator>=</operator> <name><name>t</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="char">'a'</literal></expr>;</expr_stmt>
			}</block></then></if>
			
		}</block></for>
		<if>if <condition>(<expr><name>ch</name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>||</operator> <name>ch</name><operator>%</operator><literal type="number">2</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
			<continue>continue;</continue>
		}</block></then>
		<else>else <block>{
			<if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Yes"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
				<continue>continue;</continue>
			}</block></then>
			<elseif>else <if>if <condition>(<expr><name><name>p1</name><operator>.</operator><name>first</name></name> <operator>==</operator> <name><name>p2</name><operator>.</operator><name>first</name></name> <operator>&amp;&amp;</operator> <name><name>p2</name><operator>.</operator><name>second</name></name> <operator>==</operator> <name><name>p1</name><operator>.</operator><name>second</name></name></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Yes"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
				<continue>continue;</continue>
			
			}</block></then></if></elseif>
			<else>else
				<block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></else></if>
			
		
		}</block></else></if>
	}</block></while>
}</block></function></unit>
