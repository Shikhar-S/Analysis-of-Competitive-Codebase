<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29768606_64393346.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOS</name></cpp:macro> <cpp:value>ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name> <init>= <expr><literal type="number">1e5</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>mod</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>mt19937</name></type> <name>ran</name><argument_list>( <argument><expr><call><name>time</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>


<function><specifier>inline</specifier> <type><name>int</name></type> <name>random</name><parameter_list>( )</parameter_list> <block>{
    <return>return <expr><call><name>abs</name><argument_list>(<argument><expr><operator>(</operator> <name>int</name> <operator>)</operator> <call><name>ran</name><argument_list>( )</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>input</name><parameter_list>( )</parameter_list> <block>{
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
}</block></function>


<function><specifier>inline</specifier> <type><name>long</name> <name>long</name></type> <name>gcd</name><parameter_list>( <parameter><decl><type><name>long</name> <name>long</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>b</name></decl></parameter> )</parameter_list> <block>{
    <if>if <condition>( <expr><name>b</name> <operator>&gt;</operator> <name>a</name></expr> )</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>swap</name><argument_list>( <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block></then></if>
    <return>return <expr><ternary><condition><expr><name>b</name></expr> ?</condition><then> <expr><call><name>gcd</name><argument_list>( <argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name> <operator>%</operator> <name>b</name></expr></argument> )</argument_list></call></expr> </then><else>: <expr><name>a</name></expr></else></ternary></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>solve</name><parameter_list>( )</parameter_list> <block>{
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>ans</name> <init>= <expr><name>n</name></expr></init></decl>;</decl_stmt>
    <for>for <control>( <init><decl><type><name>long</name> <name>long</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>*</operator> <name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control> <block>{
        <if>if <condition>( <expr><name>n</name> <operator>%</operator> <name>i</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><then> <block>{
            <expr_stmt><expr><name>ans</name> <operator>=</operator> <call><name>gcd</name><argument_list>( <argument><expr><name>ans</name></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>ans</name> <operator>=</operator> <call><name>gcd</name><argument_list>( <argument><expr><name>ans</name></expr></argument>, <argument><expr><name>n</name> <operator>/</operator> <name>i</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></for>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name></expr>;</expr_stmt>

}</block></function>

<function><type><name>int32_t</name></type> <name>main</name><parameter_list>( )</parameter_list> <block>{
    <decl_stmt><decl><type><name>IOS</name></type>
    <name>input</name><argument_list>( )</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>solve</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>

}</block></function>
</unit>
