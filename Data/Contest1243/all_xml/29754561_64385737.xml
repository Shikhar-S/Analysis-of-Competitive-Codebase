<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29754561_64385737.cpp"><cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><cpp:literal>"O3"</cpp:literal><name>)</name></cpp:pragma>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>'\n'</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name>istream</name><modifier>&amp;</modifier></type> <name>operator<name>&gt;&gt;</name></name><parameter_list>(<parameter><decl><type><name>istream</name><modifier>&amp;</modifier></type> <name>in</name></decl></parameter>,<parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>,<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>p</name></decl></parameter>)</parameter_list><block>{
	<expr_stmt><expr><name>in</name><operator>&gt;&gt;</operator><name><name>p</name><operator>.</operator><name>first</name></name><operator>&gt;&gt;</operator><name><name>p</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt>
	<return>return <expr><name>in</name></expr>;</return>
}</block></function>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type> <name>out</name></decl></parameter>,<parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>,<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>p</name></decl></parameter>)</parameter_list><block>{
	<expr_stmt><expr><name>out</name><operator>&lt;&lt;</operator><name><name>p</name><operator>.</operator><name>first</name></name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name><name>p</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt>
	<return>return <expr><name>out</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><name>mt19937</name></type> <name>gen</name><argument_list>(<argument><expr><call><name>time</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>arr</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>*</operator><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<if>if<condition>(<expr><name>n</name><operator>%</operator><name>i</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
			<if>if<condition>(<expr><name>i</name><operator>*</operator><name>i</name><operator>==</operator><name>n</name></expr>)</condition><then><block>{
				<expr_stmt><expr><name>ans</name><operator>++</operator></expr>;</expr_stmt>
				<if>if<condition>(<expr><call><name><name>arr</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call><operator>||</operator><operator>(</operator><operator>(</operator><name>i</name><operator>%</operator><call><name><name>arr</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>!=</operator><literal type="number">0</literal><operator>)</operator></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><call><name><name>arr</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
				<expr_stmt><expr><name>tmp</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
			}</block></then>
				
			<else>else<block>{
				<expr_stmt><expr><name>ans</name><operator>+=</operator><literal type="number">2</literal></expr>;</expr_stmt>
				<if>if<condition>(<expr><call><name><name>arr</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call><operator>||</operator><operator>(</operator><operator>(</operator><name>i</name><operator>%</operator><call><name><name>arr</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>!=</operator><literal type="number">0</literal><operator>)</operator></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><call><name><name>arr</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
				<if>if<condition>(<expr><operator>(</operator><name>n</name><operator>/</operator><name>i</name><operator>)</operator><operator>%</operator><call><name><name>arr</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call><operator>!=</operator><literal type="number">0</literal></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><call><name><name>arr</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>n</name><operator>/</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
			}</block></else></if>
		}</block></then></if>
	}</block></for>
	<if>if<condition>(<expr><name>ans</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
		<block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>n</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></then>
	<elseif>else <if>if<condition>(<expr><call><name><name>arr</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name><name>arr</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	}</block></then></if></elseif>
	<else>else<block>{
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	}</block></else></if>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>


</unit>
