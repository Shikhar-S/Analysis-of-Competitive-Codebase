<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29771369_64400165.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>opt</name></cpp:macro> <cpp:value>ios::sync_with_stdio(0); cin.tie(0); cout.tie(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long int</cpp:value></cpp:define>
<comment type="line">// I might be a loser, but I have nothing to lose :p</comment>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
<expr_stmt><expr><name>opt</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>ans</name></decl>;</decl_stmt>
<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
<if>if<condition>(<expr><name>n</name><operator>&lt;=</operator><literal type="number">3</literal></expr>)</condition><then>
<block>{
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>n</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></then></if>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>f</name></decl>;</decl_stmt>
<for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name><init>=<expr><literal type="number">2</literal></expr></init></decl> ;</init> <condition><expr><name>i</name><operator>&lt;=</operator><call>(<name>ll</name>)<argument_list>(<argument><expr><call><name>sqrtl</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{
    <if>if<condition>(<expr><name>n</name><operator>%</operator><name>i</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><call><name><name>f</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>f</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>n</name><operator>/</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
}</block></for>
<if>if<condition>(<expr><call><name><name>f</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
<block>{
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>n</name></expr>;</expr_stmt>
}</block></then>
<elseif>else <if>if<condition>(<expr><call><name><name>f</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
<block>{
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>f</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
}</block></then></if></elseif>
<else>else
<block>{
    <expr_stmt><expr><name>ans</name><operator>=</operator><call><name>__gcd</name><argument_list>(<argument><expr><name><name>f</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>f</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><name>ans</name><operator>=</operator><call><name>__gcd</name><argument_list>(<argument><expr><name>ans</name></expr></argument>,<argument><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
