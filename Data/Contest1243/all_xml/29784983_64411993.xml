<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29784983_64411993.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name><init>=<expr><literal type="number">1e5</literal><operator>+</operator><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name><name>mp</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hd</name></decl>,<decl><type ref="prev"/><name><name>nxt</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>bfs</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>int</name></type> <name>now</name></decl>,<decl><type ref="prev"/><name>pre</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>queue</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name>q</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>hd</name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><name>hd</name><operator>=</operator><name><name>nxt</name><index>[<expr><name>hd</name></expr>]</index></name></expr>;</expr_stmt>
	<while>while<condition>(<expr><operator>!</operator><call><name><name>q</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>v</name><init>=<expr><call><name><name>q</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<for>for<control>(<init><expr><name>now</name><operator>=</operator><name>hd</name></expr><operator>,</operator><expr><name>pre</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>now</name></expr>;</condition><incr><expr><name>now</name><operator>=</operator><name><name>nxt</name><index>[<expr><name>now</name></expr>]</index></name></expr></incr>)</control><block>{
			<if>if<condition>(<expr><operator>!</operator><name><name>mp</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>now</name></expr>]</index></name></expr>)</condition><then><block>{
				<expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if>if<condition>(<expr><name>hd</name><operator>==</operator><name>now</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>hd</name><operator>=</operator><name><name>nxt</name><index>[<expr><name>hd</name></expr>]</index></name></expr>;</expr_stmt></block></then></if>
				<expr_stmt><expr><name><name>nxt</name><index>[<expr><name>pre</name></expr>]</index></name><operator>=</operator><name><name>nxt</name><index>[<expr><name>now</name></expr>]</index></name></expr>;</expr_stmt>
			}</block></then>
			<else>else<block>{
				<expr_stmt><expr><name>pre</name><operator>=</operator><name>now</name></expr>;</expr_stmt>
			}</block></else></if>
		}</block></for>
	}</block></while>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>m</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>u</name></decl>,<decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>u</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>mp</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name>v</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name><name>mp</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>u</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
	}</block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><name><name>nxt</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>hd</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>hd</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
	}</block></for>
	<decl_stmt><decl><type><name>int</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>hd</name></expr>)</condition><block>{
		<expr_stmt><expr><call><name>bfs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ans</name><operator>++</operator></expr>;</expr_stmt>
	}</block></while>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>,<argument><expr><name>ans</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function></unit>
