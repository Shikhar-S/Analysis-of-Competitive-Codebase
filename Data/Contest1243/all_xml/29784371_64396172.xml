<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29784371_64396172.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<comment type="line">//region debugging</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LOCAL</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"debugging.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>to_string</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug_out</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="line">//endregion debugging</comment>

<comment type="line">//region typedef abbreviations</comment>

<using>using <name>pii</name> <init>= <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>vi</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>vpii</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>vvi</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>vvpii</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>ll</name> <init>= <type><name>long</name> <name>long</name></type></init>;</using>
<using>using <name>pll</name> <init>= <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>, <argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>vl</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>vpll</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>, <argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>vvl</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>vvpll</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>, <argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type></init>;</using>

<comment type="line">//endregion typedef abbreviations</comment>

<comment type="line">// region rep, trav, all, sz</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REP</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(remove_reference&lt;decltype((b))&gt;::type i = (a); i &lt; (b); ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRAV</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(auto&amp; a : (x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>begin(x), end(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(remove_reference&lt;decltype((b))&gt;::type i = (a); i &lt; (b); ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>trav</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(auto&amp; a : (x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>begin(x), end(x)</cpp:value></cpp:define>


<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name>int</name></type> <name>sz</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>x</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></function>

<comment type="line">// endregion rep, trav, all, sz</comment>

<decl_stmt><decl><specifier>constexpr</specifier> <type><name>ll</name></type> <name>MOD</name> <init>= <expr><literal type="number">1</literal><literal type="char">'000'</literal><literal type="number">000</literal><literal type="char">'000ll + 7;

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cin.exceptions(cin.failbit);


#ifdef LOCAL
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    freopen("error.txt", "w", stderr);
#endif
    int q;
    cin &gt;&gt; q;
    while (q--) {
        int n; cin &gt;&gt; n;
        string s, t;
        cin &gt;&gt; s &gt;&gt; t;

        vi different;
        map&lt;char, int&gt; chars;
        for (int i=0; i&lt;n; ++i) {
            ++chars[s[i]];
            ++chars[t[i]];
        }
        bool even = true;
        for (auto&amp; c : chars) {
            if (c.second % 2 !=0) {
                even = false;
            }
        }
        if (!even) {
            cout &lt;&lt; "NO\n";
            continue;
        }

        cout &lt;&lt; "YES\n";
        vpii moves;
        for (int pos=0; pos &lt; n-1; ++pos) {
            char&amp; ss = s[pos];
            char&amp; tt = t[pos];
            if (ss == tt) continue;
            int smatch = -1;
            for (int i=pos+1; i&lt;n; ++i) {
                if (s[i]==ss) {
                    smatch = i; break;
                }
            }
            if (smatch &gt; 0) {
                swap(t[pos], s[smatch]);
                moves.push_back({smatch, pos});
                continue;
            }
            int tmatch = -1;
            for (int i=pos+1; i&lt;n; ++i) {
                if (t[i]==ss) {
                    tmatch = i; break;
                }
            }
            if (tmatch &gt; 0) {
                swap(s[pos+1], t[tmatch]);
                moves.push_back({pos+1, tmatch});
                swap(s[pos+1], t[pos]);
                moves.push_back({pos+1, pos});
            }
        }
        debug(s, t);
        cout &lt;&lt; sz(moves) &lt;&lt; endl;
        trav(p, moves) {
            cout &lt;&lt; p.first +1 &lt;&lt; '</literal> <literal type="char">'</literal></expr></init></decl></decl_stmt> &lt;&lt; p.second +1 &lt;&lt; endl;
        }


    }

//    int q;
//    cin &gt;&gt; q;
//    while (q--) {
//        int n; cin &gt;&gt; n;
//        string s, t;
//        cin &gt;&gt; s &gt;&gt; t;
//
//        vi different;
//        map&lt;char, int&gt; schars, tchars;
//        for (int i=0; i&lt;n; ++i) {
//            ++schars[s[i]];
//            ++tchars[t[i]];
//            if (s[i]!=t[i]) different.push_back(i);
//        }
//        bool yes = false;
//        if (sz(different)==2) {
//            char s1, s2, t1, t2;
//            s1 = s[different[0]];
//            s2 = s[different[1]];
//            t1 = t[different[0]];
//            t2 = t[different[1]];
//            if (t1==t2 &amp;&amp; s1==s2) {
//                yes = true;
//            }
//
//        }
//        if (yes) {
//            cout &lt;&lt; "YES\n";
//        } else {
//            cout &lt;&lt; "NO\n";
//        }
//    }
    return 0;
}


</unit>
