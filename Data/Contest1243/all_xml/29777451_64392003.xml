<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29777451_64392003.cpp"><comment type="line">//#include&lt;bits/stdc++.h&gt;</comment>
<comment type="line">//</comment>
<comment type="line">//using namespace std;</comment>
<comment type="line">//const int maxn = 1000 + 10;</comment>
<comment type="line">//int a[maxn];</comment>
<comment type="line">//int n;</comment>
<comment type="line">//</comment>
<comment type="line">//bool check(int pos){</comment>
<comment type="line">//    for(int i = 1; i &lt;= n - pos + 1; i++) if(a[i] &gt;= pos) return true;</comment>
<comment type="line">//    return false;</comment>
<comment type="line">//}</comment>
<comment type="line">//</comment>
<comment type="line">//int main(){</comment>
<comment type="line">//    int T;</comment>
<comment type="line">//    cin&gt;&gt;T;</comment>
<comment type="line">//    while(T--){</comment>
<comment type="line">//        cin&gt;&gt;n;</comment>
<comment type="line">//        for(int i = 1; i &lt;= n; i++) cin&gt;&gt;a[i];</comment>
<comment type="line">//        sort(a + 1, a + 1 + n);</comment>
<comment type="line">//        int l = 1, r = n;</comment>
<comment type="line">//        int ans;</comment>
<comment type="line">//        if(a[1] == a[n]){</comment>
<comment type="line">//            cout&lt;&lt;a[1]&lt;&lt;endl;</comment>
<comment type="line">//            continue;</comment>
<comment type="line">//        }</comment>
<comment type="line">//        while(l &lt; r){</comment>
<comment type="line">//            int mid = (l + r) &gt;&gt; 1;</comment>
<comment type="line">//            if(check(mid)) ans = mid, l = mid + 1;</comment>
<comment type="line">//            else r = mid;</comment>
<comment type="line">//        }</comment>
<comment type="line">//        cout&lt;&lt;ans&lt;&lt;endl;</comment>
<comment type="line">//    }</comment>
<comment type="line">//    return 0;</comment>
<comment type="line">//}</comment>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name> ;</namespace></using>
<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>V1</name></decl> , <decl><type ref="prev"/><name>V2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><literal type="number">10004</literal></expr>]</index></name></decl> , <decl><type ref="prev"/><name><name>t</name><index>[<expr><literal type="number">10005</literal></expr>]</index></name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>T</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name>scanf</name> <argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument> , <argument><expr><operator>&amp;</operator><name>T</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <while>while <condition>(<expr><name>T</name><operator>--</operator></expr>)</condition><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>sdbfkdshjbfksdhjbfjhdsbfhujdsb</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>V1</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr> ;</expr_stmt><expr_stmt><expr><call><name><name>V2</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr> ;</expr_stmt><expr_stmt><expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'+'</literal></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>scanf</name> <argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument> , <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt><expr_stmt><expr><call><name>scanf</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument> , <argument><expr><name>s</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt><expr_stmt><expr><call><name>scanf</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument> , <argument><expr><name>t</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
            <if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><continue>continue ;</continue></block></then></if>
            <decl_stmt><decl><type><name>bool</name></type> <name>flag</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>asdjfhbksdjfghbdskjhgfdsjhfgdsuhjigfdsjhgf</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>n</name></expr> ;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block>{
                <if>if <condition>(<expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block>{<expr_stmt><expr><call><name><name>V1</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt><expr_stmt><expr><call><name><name>V2</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt><expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument> , <argument><expr><name><name>t</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>}</block></then></if>
                <if>if <condition>(<expr><name><name>t</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block>{<expr_stmt><expr><call><name><name>V1</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt><expr_stmt><expr><call><name><name>V2</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt><expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> , <argument><expr><name><name>t</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt><expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="boolean">false</literal></expr> ;</expr_stmt><break>break ;</break>}</block></then></if>
                <decl_stmt><decl><type><name>int</name></type> <name>dsfhbksdjhbfdksjhfbdskjhgfbdsk</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            }</block></for>
            <if>if <condition>(<expr><name>flag</name></expr>)</condition><then><block>{<expr_stmt><expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'-'</literal></expr> ;</expr_stmt><break>break ;</break>}</block></then></if>
            <decl_stmt><decl><type><name>int</name></type> <name>sdkjhfdskjhfdskjhfdskhsjf</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        }</block></for>
        <if>if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><then><block>{<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"No\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt><continue>continue ;</continue>}</block></then></if>
        <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Yes\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument> , <argument><expr><call><name><name>V1</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>V1</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%d %d\n"</literal></expr></argument> , <argument><expr><name><name>V1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> , <argument><expr><name><name>V2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block></for>
    }</block></while>
}</block></function>

<function><type><name>int</name></type> <name>main</name> <parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>


</unit>
