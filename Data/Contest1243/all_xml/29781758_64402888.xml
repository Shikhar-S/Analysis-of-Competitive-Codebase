<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29781758_64402888.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<typedef>typedef <type><name>long</name> <name>long</name> <name>int</name></type> <name>ll</name>;</typedef>
<using>using <namespace>namespace <name>std</name>;</namespace></using>


<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>s</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>ccnt</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name></type> <name>cs</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>ct</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
    <decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="char">'a'</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>ccnt</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cs</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name>d</name> <init>= <expr><call><name><name>t</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="char">'a'</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>ccnt</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>n</name><operator>+</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ct</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
  }</block></for>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <literal type="number">26</literal></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{
    <if>if <condition>(<expr><call><name><name>ccnt</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No\n"</literal></expr>;</expr_stmt>
      <return>return;</return>
    }</block></then></if>
  }</block></for>
  <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Yes\n"</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>out</name></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><call><name><name>cs</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><call><name><name>ct</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>d</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>ccnt</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>erase</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>ccnt</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>erase</name><argument_list>(<argument><expr><name>n</name><operator>+</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    }</block></then></if>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <range>: <expr><call><name><name>ccnt</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{
      <if>if <condition>(<expr><name>j</name> <operator>==</operator> <name>i</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
      <if>if <condition>(<expr><name>j</name> <operator>&gt;=</operator> <name>n</name></expr>)</condition><then> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>jj</name> <init>= <expr><name>j</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>j</name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">// cout &lt;&lt; j+1 &lt;&lt; " " &lt;&lt; j+1 &lt;&lt; "\n";</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>e</name> <init>= <expr><call><name><name>cs</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name>ccnt</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>erase</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>ccnt</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>jj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>ccnt</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>erase</name><argument_list>(<argument><expr><name>jj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>ccnt</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cs</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>ct</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
      }</block></then></if>
      <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="line">// cout &lt;&lt; j+1 &lt;&lt; " " &lt;&lt; i+1 &lt;&lt; "\n";</comment>
      <expr_stmt><expr><call><name><name>ccnt</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>erase</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>ccnt</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>erase</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>ccnt</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>erase</name><argument_list>(<argument><expr><name>n</name><operator>+</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>ccnt</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>cs</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>ct</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
      <break>break;</break>
    }</block></for>
  }</block></for>
  <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name><name>out</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>auto</name></type> <name>p</name> <range>: <expr><name>out</name></expr></range></decl></init>)</control> <block>{
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>p</name><operator>.</operator><name>first</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name><name>p</name><operator>.</operator><name>second</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
  }</block></for>
}</block></function>


<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{
  <comment type="line">// C-style stdio functions should not be used.</comment>
  <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>setprecision</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>kk</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>kk</name> <operator>&lt;</operator> <name>k</name></expr>;</condition> <incr><expr><name>kk</name><operator>++</operator></expr></incr>)</control> <block>{
    <expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></for>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

</unit>
