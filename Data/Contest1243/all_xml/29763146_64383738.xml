<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29763146_64383738.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>MAXN</name><init>=<expr><literal type="number">1e3</literal><operator>+</operator><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>MOD</name><init>=<expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>INF</name><init>=<expr><literal type="number">1e18</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>t</name></decl>,<decl><type ref="prev"/><name>n</name></decl>,<decl><type ref="prev"/><name>cnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>string</name></type> <name>str1</name></decl>,<decl><type ref="prev"/><name>str2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>c</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><name>cnt</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>str1</name><operator>==</operator><name>str2</name></expr>)</condition><then><block>{
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"YES\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else<block>{
        <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
            <if>if<condition>(<expr><name><name>str1</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name><name>str2</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block>{
                <expr_stmt><expr><name><name>c</name><index>[<expr><operator>++</operator><name>cnt</name></expr>]</index></name><operator>=</operator><name><name>str1</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>c</name><index>[<expr><operator>++</operator><name>cnt</name></expr>]</index></name><operator>=</operator><name><name>str2</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
                <if>if<condition>(<expr><name>cnt</name><operator>&gt;</operator><literal type="number">4</literal></expr>)</condition><then><block>{
                    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"NO\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return;</return>
                }</block></then></if>
            }</block></then></if>
        }</block></for>
        <if>if<condition>(<expr><name>cnt</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"NO\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else<block>{
            <if>if<condition>(<expr><name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>==</operator><name><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>&amp;&amp;</operator><name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>==</operator><name><name>c</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>)</condition><then><block>{
                <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"YES\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else<block>{
                <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"NO\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></else></if>
    }</block></else></if>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition><block>{
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>str1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>str2</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></while>
}</block></function></unit>
