<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29778975_64392560.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>set</name> <argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></type> <name>s</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>primeFactors</name><parameter_list>()</parameter_list> <block>{
    <while>while <condition>(<expr><name>n</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{  
        <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>insert</name></name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>n</name> <operator>=</operator> <name>n</name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>  
    }</block></while>  
    <for>for <control>(<init><decl><type><name>long</name> <name>long</name></type> <name>i</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</init> <condition><expr><literal type="number">1ll</literal><operator>*</operator><name>i</name><operator>*</operator><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{  
        <while>while <condition>(<expr><name>n</name> <operator>%</operator> <name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{  
            <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
            <expr_stmt><expr><name>n</name> <operator>=</operator> <name>n</name><operator>/</operator><name>i</name></expr>;</expr_stmt>  
        }</block></while>  
    }</block></for>  
  
    <if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><then>  
        <block type="pseudo"><expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
}</block></function>
<function><type><name>int</name></type> <name>main</name> <parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return>}</block></then></if>
	<expr_stmt><expr><call><name>primeFactors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>*</operator><call><name><name>s</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></then>
	<else>else <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></else></if>
}</block></function> </unit>
