<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29784001_64393407.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pf</name></cpp:macro> <cpp:value>push_front</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lb</name></cpp:macro> <cpp:value>lower_bound</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ub</name></cpp:macro> <cpp:value>upper_bound</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Loop</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = a ; i &lt; b ; ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>loop</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Loop(i, 0, n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ss</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mkp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;int, int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vi</name></cpp:macro> <cpp:value>vector&lt;int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vvi</name></cpp:macro> <cpp:value>vector&lt;vi&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vii</name></cpp:macro> <cpp:value>vector&lt;pii&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vvii</name></cpp:macro> <cpp:value>vector&lt;vii&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vl</name></cpp:macro> <cpp:value>vector&lt;ll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vvl</name></cpp:macro> <cpp:value>vector&lt;vl&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pll</name></cpp:macro> <cpp:value>pair&lt;ll, ll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vll</name></cpp:macro> <cpp:value>vector&lt;pll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vvll</name></cpp:macro> <cpp:value>vector&lt;vll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x.begin(), x.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(int)x.size()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nmbr</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(int)(c-'0')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ltr</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(int)(c-'a')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INF</name></cpp:macro> <cpp:value>1e18+5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inf</name></cpp:macro> <cpp:value>1e9+5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_69e27</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sim</name></cpp:macro> <cpp:value>template &lt; class c</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ris</name></cpp:macro> <cpp:value>return * this</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dor</name></cpp:macro> <cpp:value>&gt; debug &amp; operator &lt;&lt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>eni</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>sim &gt; typename \
  enable_if&lt;sizeof dud&lt;c&gt;(0) x 1, debug&amp;&gt;::type operator&lt;&lt;(c i) {</cpp:value></cpp:define>
<expr_stmt><expr><name>sim</name> <operator>&gt;</operator> struct <name>rge</name> <block>{ <expr><name>c</name> <name>b</name></expr>, <expr><name>e</name></expr>; }</block></expr>;</expr_stmt>
<expr_stmt><expr><name>sim</name> <operator>&gt;</operator> <name><name>rge</name><argument_list type="generic">&lt;<argument><expr><name>c</name></expr></argument>&gt;</argument_list></name> <macro><name>range</name><argument_list>(<argument>c i</argument>, <argument>c j</argument>)</argument_list></macro> <block>{ <return>return <expr><name><name>rge</name><argument_list type="generic">&lt;<argument><expr><name>c</name></expr></argument>&gt;</argument_list></name><block>{<expr><name>i</name></expr>, <expr><name>j</name></expr>}</block></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>sim</name> <operator>&gt;</operator> <name>auto</name> <call><name>dud</name><argument_list>(<argument><expr><name>c</name><operator>*</operator> <name>x</name></expr></argument>)</argument_list></call> <operator>-&gt;</operator> <decltype>decltype<argument_list>(<argument><expr><name>cerr</name> <operator>&lt;&lt;</operator> <operator>*</operator><name>x</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decltype>;
<name>sim</name> <operator>&gt;</operator> <name>char</name> <call><name>dud</name><argument_list>(<argument><expr><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<struct>struct <name>debug</name> <block>{<public type="default">
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LOCAL</name></cpp:ifdef>
<destructor><name>~<name>debug</name></name><parameter_list>()</parameter_list> <block>{ <expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt> }</block></destructor>
<macro><name>eni</name><argument_list>(<argument>!=</argument>)</argument_list></macro> <macro><name>cerr</name></macro> <expr_stmt><expr><operator>&lt;&lt;</operator> <name>boolalpha</name> <operator>&lt;&lt;</operator> <name>i</name></expr>;</expr_stmt> <macro><name>ris</name></macro><empty_stmt>;</empty_stmt> </public>}</block>
<decl><name>eni</name><argument_list>(<argument><expr><operator>==</operator></expr></argument>)</argument_list> <name>ris</name> &lt;&lt; <name>range</name><argument_list>(<argument><expr><call><name>begin</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>end</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</struct> }
sim<operator>,</operator> <function><type><name><name>class</name> <name>b</name></name></type> <name>dor</name><parameter_list>(<parameter><decl><type><name><name>pair</name> <argument_list type="generic">&lt; <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument> &gt;</argument_list></name></type> <name>d</name></decl></parameter>)</parameter_list> <block>{
  <expr_stmt><expr><name>ris</name> <operator>&lt;&lt;</operator> <literal type="string">"("</literal> <operator>&lt;&lt;</operator> <name><name>d</name><operator>.</operator><name>first</name></name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal> <operator>&lt;&lt;</operator> <name><name>d</name><operator>.</operator><name>second</name></name> <operator>&lt;&lt;</operator> <literal type="string">")"</literal></expr>;</expr_stmt>
}</block></function>
<function><type><name>sim</name></type> <name>dor</name><parameter_list>(<parameter><decl><type><name><name>rge</name><argument_list type="generic">&lt;<argument><expr><name>c</name></expr></argument>&gt;</argument_list></name></type> <name>d</name></decl></parameter>)</parameter_list> <block>{
  <expr_stmt><expr><operator>*</operator><name>this</name> <operator>&lt;&lt;</operator> <literal type="string">"["</literal></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><name><name>d</name><operator>.</operator><name>b</name></name></expr></init></decl>;</init> <condition><expr><name>it</name> <operator>!=</operator> <name><name>d</name><operator>.</operator><name>e</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>it</name></expr></incr>)</control>
    <block type="pseudo"><expr_stmt><expr><operator>*</operator><name>this</name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>it</name> <operator>==</operator> <name><name>d</name><operator>.</operator><name>b</name></name><operator>)</operator> <operator>&lt;&lt;</operator> <operator>*</operator><name>it</name></expr>;</expr_stmt></block></for>
  <expr_stmt><expr><name>ris</name> <operator>&lt;&lt;</operator> <literal type="string">"]"</literal></expr>;</expr_stmt>
}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><name>sim</name></type> <name>dor</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>c</name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>ris</name></expr>;</expr_stmt> }</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
};
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>trace</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>" [" &lt;&lt; #__VA_ARGS__ ": " &lt;&lt; (__VA_ARGS__) &lt;&lt; "] "</cpp:value></cpp:define>

<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>T</name></type> <name>max</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>c</name></decl></parameter>)</parameter_list><block>{ <return>return <expr><call><name>max</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><call><name>max</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>}</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>T</name></type> <name>min</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>c</name></decl></parameter>)</parameter_list><block>{ <return>return <expr><call><name>min</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><call><name>min</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>}</block></function>

<decl_stmt><decl><type><name>int</name></type> <name>M</name> <init>= <expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt> <comment type="line">//check</comment>


<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><name>_69e27</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>T</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>T</name></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>T</name><operator>--</operator></expr>)</condition>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>s</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>vii</name></type> <name>moves</name></decl>;</decl_stmt>
		<macro><name>loop</name><argument_list>(<argument>i</argument>, <argument>n</argument>)</argument_list></macro>
		<block>{
			<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
			<block>{
				<macro><name>Loop</name><argument_list>(<argument>j</argument>, <argument>i+<literal type="number">1</literal></argument>, <argument>n</argument>)</argument_list></macro>
				<block>{
					<if>if<condition>(<expr><name><name>t</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
					<block>{
						<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>t</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>moves</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><call><name>mkp</name><argument_list>(<argument><expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>
					<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
					<block>{
						<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>moves</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><call><name>mkp</name><argument_list>(<argument><expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>
					}</block></then></if>
				}</block>
			}</block></then></if>
		}</block>
		<if>if<condition>(<expr><name>s</name> <operator>==</operator> <name>t</name></expr>)</condition><then><block>{
			<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES\n"</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>sz</name><argument_list>(<argument><expr><name>moves</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
			<for>for<control>(<init><decl><type><name>auto</name></type> <name>it</name> <range>: <expr><name>moves</name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>it</name><operator>.</operator><name>ff</name></name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal> <operator>&lt;&lt;</operator> <name><name>it</name><operator>.</operator><name>ss</name></name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></for>
		}</block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"NO\n"</literal></expr>;</expr_stmt></block></else></if>
	}</block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
