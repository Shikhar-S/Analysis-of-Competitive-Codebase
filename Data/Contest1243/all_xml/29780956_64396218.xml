<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29780956_64396218.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;ext/rope&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>__gnu_cxx</name>;</namespace></using>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>war</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>s</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(long long i=s;i&lt;n;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>speed</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(false);cin.tie(NULL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fr</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sc</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vctr2d</name></cpp:macro> <cpp:value>vector&lt;vector&lt;long long&gt;&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vctr</name></cpp:macro> <cpp:value>vector&lt;long long&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pll</name></cpp:macro> <cpp:value>pair&lt;long long,long long&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rz</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>resize(n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>v.begin(),v.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mkp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod2</name></cpp:macro>  <cpp:value>998244353</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>small</name></cpp:macro> <cpp:value>-1000000000000000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>big</name></cpp:macro> <cpp:value>1000000000000000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>arrin</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = 0; i &lt; n ; i++){cin&gt;&gt;a[i];}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>arrout</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = 0;i &lt; n; i++){cout&lt;&lt;a[i]&lt;&lt;" ";}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ex</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout&lt;&lt;s&lt;&lt;endl;exit(0);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>itr</name></cpp:macro> <cpp:value>iterator</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tra</name><parameter_list>(<parameter><type><name>it</name></type></parameter>,<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(it=m.begin();it!=m.end();++it)</cpp:value></cpp:define>
<comment type="line">//__________________________________________________________________________________________________________________________________________________________</comment>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
          <decl_stmt><decl><type><name>int</name></type> <name>q</name></decl>;</decl_stmt>
          <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>q</name></expr>;</expr_stmt>
          <while>while<condition>(<expr><name>q</name><operator>--</operator></expr>)</condition>
          <block>{
                    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>string</name></type> <name>s1</name></decl>,<decl><type ref="prev"/><name>s2</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>s1</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>s2</name></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name><name>fr</name><index>[<expr><literal type="number">26</literal></expr>]</index></name></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>fr</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof <name>fr</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <macro><name>war</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>s1.size()</argument>)</argument_list></macro><block>{
                              <expr_stmt><expr><name><name>fr</name><index>[<expr><name><name>s1</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
                    }</block>
                    <macro><name>war</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro><block>{
                              <expr_stmt><expr><name><name>fr</name><index>[<expr><name><name>s2</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
                    }</block>
                    <decl_stmt><decl><type><name>bool</name></type> <name>ff</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
                    <macro><name>war</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">26</literal></argument>)</argument_list></macro>
                    <block>{
                              <if>if<condition>(<expr><name><name>fr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then>
                              <block>{
                                        <expr_stmt><expr><name>ff</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                              }</block></then></if>
                    }</block>
                    <if>if<condition>(<expr><operator>!</operator><name>ff</name></expr>)</condition><then><block>{
                              <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
                              <continue>continue;</continue>
                    }</block></then></if>
                    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Yes"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>ans</name></decl>;</decl_stmt>
                    <macro><name>war</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro>
                    <block>{
                              <if>if<condition>(<expr><name><name>s1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>s2</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block>{<continue>continue;</continue>}</block></then></if>
                              <decl_stmt><decl><type><name>int</name></type> <name>in</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
                              <macro><name>war</name><argument_list>(<argument>j</argument>,<argument>i+<literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro><block>{
                                        <if>if<condition>(<expr><name><name>s1</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name><name>s1</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block>{
                                                  <expr_stmt><expr><name>in</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
                                                  <break>break;</break>
                                        }</block></then></if>
                              }</block>
                              <if>if<condition>(<expr><name>in</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block>{
                                        <expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><call><name>mkp</name><argument_list>(<argument><expr><name>in</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                        <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s1</name><index>[<expr><name>in</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>s2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                              }</block></then>
                              <else>else<block>{
                                        <macro><name>war</name><argument_list>(<argument>j</argument>,<argument>i+<literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro><block>{
                                                  <if>if<condition>(<expr><name><name>s2</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name><name>s1</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
                                                  <block>{
                                                            <expr_stmt><expr><name>in</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
                                                            <break>break;</break>
                                                  }</block></then></if>
                                        }</block>
                                        <expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><call><name>mkp</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><name>in</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                        <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s1</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>s2</name><index>[<expr><name>in</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                        <expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><call><name>mkp</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                        <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s1</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>s2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                              }</block></else></if>
                    }</block>
                    <if>if<condition>(<expr><call><name><name>ans</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
                              <expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><call><name>mkp</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name><name>ans</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
                    <macro><name>war</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>ans.size()</argument>)</argument_list></macro><block>{
                              <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fr</name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sc</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
                    }</block>
          }</block></while>
}</block></function>
</unit>
