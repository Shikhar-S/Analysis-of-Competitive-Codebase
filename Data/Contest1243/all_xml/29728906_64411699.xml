<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29728906_64411699.cpp"><cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><cpp:literal>"O2"</cpp:literal><name>)</name></cpp:pragma>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type>                   <name>ll</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type>                 <name>ld</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type>               <name>pii</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type>                 <name>pll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>double</name></expr></argument>,<argument><expr><name>double</name></expr></argument>&gt;</argument_list></name></type>         <name>pdd</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ld</name></expr></argument>,<argument><expr><name>ld</name></expr></argument>&gt;</argument_list></name></type>                 <name>pld</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument> , <argument><expr><name>string</name></expr></argument>&gt;</argument_list></name></type>       <name>pss</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ts</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>                       <cpp:value>to_string(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ti</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>                       <cpp:value>stoi(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>                      <cpp:value>(x).begin(),(x).end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro>                           <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name></cpp:macro>                           <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Mp</name></cpp:macro>                          <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tab</name></cpp:macro>                         <cpp:value>'\t'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sep</name></cpp:macro>                         <cpp:value>' '</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mine</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro>                     <cpp:value>*min_element(all(v))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>maxe</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro>                     <cpp:value>*max_element(all(v))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>error</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>                    <cpp:value>cerr &lt;&lt; #x &lt;&lt; " = " &lt;&lt; x &lt;&lt; endl</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fast_io</name></cpp:macro>                     <cpp:value>ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>file_io</name></cpp:macro>                     <cpp:value>freopen("in.txt" , "r+" , stdin) ; freopen("out.txt" , "w+" , stdout);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>                     <cpp:value>(int)x.size()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro>                        <cpp:value>"\n"</cpp:value></cpp:define>
<function><specifier>inline</specifier> <type><name>ll</name></type> <name>input</name><parameter_list>()</parameter_list><block>{<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr> ;</expr_stmt> <return>return <expr><name>n</name></expr>;</return>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAXN</name> <init>= <expr><literal type="number">1e6</literal> <operator>+</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MOD</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MOD2</name> <init>= <expr><literal type="number">998244353</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>INF</name> <init>= <expr><literal type="number">8e18</literal></expr></init></decl>;</decl_stmt>

<function><type><name>ll</name></type> <name>pw</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter> , <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list>  <block>{ <return>return <expr><operator>(</operator><ternary><condition><expr><operator>!</operator><name>b</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><name>b</name> <operator>&amp;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><operator>(</operator><name>a</name> <operator>*</operator> <call><name>pw</name><argument_list>(<argument><expr><name>a</name> <operator>*</operator> <name>a</name> <operator>%</operator> <name>MOD</name></expr></argument>, <argument><expr><name>b</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>%</operator> <name>MOD</name></expr> </then><else>: <expr><call><name>pw</name><argument_list>(<argument><expr><name>a</name> <operator>*</operator> <name>a</name> <operator>%</operator> <name>MOD</name></expr></argument>, <argument><expr><name>b</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr></else></ternary><operator>)</operator></expr>;</return> }</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><name>fast_io</name></expr>;</expr_stmt>
    <comment type="line">//cout &lt;&lt; fixed &lt;&lt; setprecision(15);</comment>
    <comment type="line">//scanf("%d %d %f %lld %s %c", &amp;x);</comment>
    <comment type="line">//printf("%d %d %f %lld %s %c", x);</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>q</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>q</name></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>q</name><operator>--</operator></expr>)</condition><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>, <decl><type ref="prev"/><name>s2</name></decl>, <decl><type ref="prev"/><name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>s</name> <operator>&gt;&gt;</operator> <name>s2</name></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>s</name> <operator>==</operator> <name>s2</name></expr>)</condition><then><block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Yes"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
            <continue>continue;</continue>
        }</block></then></if>
        <decl_stmt><decl><type><name>bool</name></type> <name>ok</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>mp1</name></decl>, <decl><type ref="prev"/><name>mp2</name></decl>, <decl><type ref="prev"/><name>mp</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pii</name></expr></argument>&gt;</argument_list></name></type> <name>ans</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>RI</name></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
            <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>s2</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block>{
                <continue>continue;</continue>
            }</block></then>
            <else>else<block>{
                <expr_stmt><expr><name>a</name> <operator>+=</operator> <call><name>string</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>b</name> <operator>+=</operator> <call><name>string</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>s2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>mp</name><index>[<expr><call><name>string</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>mp</name><index>[<expr><call><name>string</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>s2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>RI</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></for>
        <decl_stmt><decl><type><name>bool</name></type> <name>F</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><call><name><name>mp</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>it</name> <operator>!=</operator> <call><name><name>mp</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>it</name><operator>++</operator></expr></incr>)</control><block>{
            <if>if<condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>S</name></name> <operator>%</operator> <literal type="number">2</literal> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
                <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>F</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <break>break;</break>
            }</block></then></if>
        }</block></for>
        <if>if<condition>(<expr><name>F</name></expr>)</condition><then><block>{
            <continue>continue;</continue>
        }</block></then></if>
        <decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name><name>a</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
            <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block>{
                <continue>continue;</continue>
            }</block></then></if>
            <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>j2</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>k2</name></decl>;</decl_stmt>
            <for>for<control>(<init><expr><name>j</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
                <if>if<condition>(<expr><name><name>b</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block>{
                    <break>break;</break>
                }</block></then></if>
            }</block></for>
            <for>for<control>(<init><expr><name>j2</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j2</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><name>j2</name><operator>++</operator></expr></incr>)</control><block>{
                <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>j2</name></expr>]</index></name> <operator>==</operator> <name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block>{
                    <break>break;</break>
                }</block></then></if>
            }</block></for>
            <for>for<control>(<init><expr><name>k</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block>{
                <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>k</name></expr>]</index></name> <operator>==</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block>{
                    <break>break;</break>
                }</block></then></if>
            }</block></for>
            <for>for<control>(<init><expr><name>k2</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>k2</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><name>k2</name><operator>++</operator></expr></incr>)</control><block>{
                <if>if<condition>(<expr><name><name>b</name><index>[<expr><name>k2</name></expr>]</index></name> <operator>==</operator> <name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block>{
                    <break>break;</break>
                }</block></then></if>
            }</block></for>
            <comment type="line">// j -&gt; az a to b</comment>
            <comment type="line">// j2 -&gt; az b to a</comment>
            <comment type="line">// k -&gt; az a to a</comment>
            <comment type="line">// k2 az b to b</comment>
            <if>if<condition>(<expr><name>k</name> <operator>!=</operator> <name>m</name></expr>)</condition><then><block>{
                <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name><name>RI</name><index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>, <expr><name><name>RI</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <continue>continue;</continue>
            }</block></then></if>
            <if>if<condition>(<expr><name>k2</name> <operator>!=</operator> <name>m</name></expr>)</condition><then><block>{
                <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><name>k2</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name><name>RI</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>, <expr><name><name>RI</name><index>[<expr><name>k2</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <continue>continue;</continue>
            }</block></then></if>
            <if>if<condition>(<expr><name>i</name> <operator>==</operator> <name>m</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><then><block>{
                <expr_stmt><expr><name>ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <continue>continue;</continue>
            }</block></then></if>
            <if>if<condition>(<expr><name>j</name> <operator>!=</operator> <name>m</name></expr>)</condition><then><block>{
                <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name><name>RI</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>, <expr><name><name>RI</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name><name>RI</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>,<expr><name><name>RI</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <continue>continue;</continue>
            }</block></then></if>
            <if>if<condition>(<expr><name>j2</name> <operator>!=</operator> <name>m</name></expr>)</condition><then><block>{
                <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><name>j2</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name><name>RI</name><index>[<expr><name>j2</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>, <expr><name><name>RI</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name><name>RI</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>,<expr><name><name>RI</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <continue>continue;</continue>
            }</block></then></if>
            <expr_stmt><expr><name>ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        }</block></for>
        <if>if<condition>(<expr><operator>!</operator><name>ok</name> <operator>||</operator> <name>a</name> <operator>!=</operator> <name>b</name></expr>)</condition><then><block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
        }</block></then>
        <else>else<block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Yes"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name><name>ans</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
            <for>for<control>(<init><decl><type><name>auto</name></type> <name>x</name><range>:<expr><name>ans</name></expr></range></decl></init>)</control><block>{
                <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>x</name><operator>.</operator><name>F</name></name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name><name>x</name><operator>.</operator><name>S</name></name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
            }</block></for>
        }</block></else></if>
    }</block></while>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>


</unit>
