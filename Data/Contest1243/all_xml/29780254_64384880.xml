<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29780254_64384880.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>bool</name></type> <name>same</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{
    <for>for <control>(<init><decl><type><name>char</name></type> <name>_c</name> <range>: <expr><name>a</name></expr></range></decl></init>)</control> <block>{
        <if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>_c</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>
    }</block></for>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>s</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>first</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>second</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>first</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>first</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
            }</block></then> <elseif>else <if>if <condition>(<expr><name>second</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>second</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
            }</block></then></if></elseif> <else>else <block>{
                <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No\n"</literal></expr>;</expr_stmt>
                <return>return;</return>
            }</block></else></if>
        }</block></then></if>
    }</block></for>

    <if>if <condition>(<expr><name>first</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>second</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No\n"</literal></expr>;</expr_stmt>
        <return>return;</return>
    }</block></then></if>

    <if>if <condition>(<expr><name><name>s</name><index>[<expr><name>first</name></expr>]</index></name> <operator>==</operator> <name><name>s</name><index>[<expr><name>second</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>t</name><index>[<expr><name>first</name></expr>]</index></name> <operator>==</operator> <name><name>t</name><index>[<expr><name>second</name></expr>]</index></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Yes\n"</literal></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No\n"</literal></expr>;</expr_stmt>
    }</block></else></if>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>qt</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>qt</name></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>q</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>q</name> <operator>&lt;</operator> <name>qt</name></expr>;</condition> <incr><expr><name>q</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></for>
}</block></function>
</unit>
