<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29759177_64383963.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vi</name></cpp:macro> <cpp:value>vector&lt; int &gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vb</name></cpp:macro> <cpp:value>vector&lt; bool &gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vl</name></cpp:macro> <cpp:value>vector&lt; ll &gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro>              <cpp:value>c.begin(), c.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>'\n'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)((v).size()))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sc</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Sort</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>sort(s.begin(),s.end())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rsort</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>sort(s.rbegin(),s.rend())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>  <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ld</name></cpp:macro> <cpp:value>long double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vii</name></cpp:macro> <cpp:value>vector &lt;vector &lt;int&gt;&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>present</name><parameter_list>(<parameter><type><name>t</name></type></parameter>, <parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(t.find(x) != t.end())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>frn</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=a;i&lt;n;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>uni</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(a).erase(unique(all(a)), (a).end())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fre</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=a;i&lt;=n;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>drn</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = n;i&gt;=a;i--)</cpp:value></cpp:define>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ull</name>;</typedef>
<decl_stmt><decl><type><name>mt19937</name></type> <name>mt</name><argument_list>(<argument><expr><call><name><name>chrono</name><operator>::</operator><name>high_resolution_clock</name><operator>::</operator><name>now</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>time_since_epoch</name><argument_list>()</argument_list></call><operator>.</operator><call><name>count</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
<function><specifier>inline</specifier> <type><name>int</name></type> <name>mrand</name><parameter_list>()</parameter_list> <block>{<return>return <expr><call><name>abs</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>mt</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>}</block></function>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>mod</name> <init>= <expr><operator>(</operator><name>ll</name><operator>)</operator> <literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>inf</name> <init>= <expr><operator>(</operator><name>ll</name><operator>)</operator><literal type="number">1e18</literal> <operator>+</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ld</name></type> <name>eps</name> <init>= <expr><literal type="number">1e-12</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>LOGN</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ld</name></type> <name>PI</name> <init>=  <expr><literal type="number">3.14159265358979323846</literal></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list>
 
  <block>{   
  <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
  <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>        


        
        
            <decl_stmt><decl><type><name>int</name></type> <name>tre</name></decl>;</decl_stmt>
	
	
	        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator>  <name>tre</name></expr>;</expr_stmt>

<macro><name>frn</name><argument_list>(<argument>h</argument>,<argument><literal type="number">0</literal></argument>,<argument>tre</argument>)</argument_list></macro>



    	<block>{
    
    
                	<decl_stmt><decl><type><name>int</name></type> <name>nre</name></decl>;</decl_stmt>
                	
                	
                	        <decl_stmt><decl><type><name>int</name></type> <name>kre</name>     <init>=   <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    	
    	
    	            <decl_stmt><decl><type><name>int</name></type> <name><name>are</name><index>[<expr><literal type="number">10000</literal></expr>]</index></name></decl>;</decl_stmt>
    	
    	
    	
    	                <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator>  <name>nre</name></expr>;</expr_stmt>
    	<decl_stmt><decl><type><name>string</name></type> <name>sre</name></decl>;</decl_stmt>
    	
    	
    	<decl_stmt><decl><type><name>string</name></type> <name>tre</name></decl>;</decl_stmt>
    	
    	
    	        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator>  <name>sre</name> <operator>&gt;&gt;</operator>  <name>tre</name></expr>;</expr_stmt> 
    
    
    
                    	<macro><name>frn</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>nre</argument>)</argument_list></macro>
    
    
    	<block>{
    
    
                		<if>if<condition>(<expr><name><name>sre</name><index>[<expr><name>i</name></expr>]</index></name>       <operator>!=</operator>      <name><name>tre</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>    
                		
                		
                		        <block>{ 
                		            
                		                <expr_stmt><expr><name><name>are</name><index>[<expr><name>kre</name></expr>]</index></name>        <operator>=</operator>   <name>i</name></expr>;</expr_stmt>
                		                
                		                
                		                        <expr_stmt><expr><name>kre</name><operator>++</operator></expr>;</expr_stmt>
                		            
                		            
                		            
                		            
                		        }</block></then></if>
    
    
    
    
    	}</block>
    
    
    
        	<if>if<condition>(<expr><name>kre</name>                      <operator>==</operator>          <literal type="number">0</literal></expr>)</condition><then>                  <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Yes\n"</literal></expr>;</expr_stmt></block></then>
    	
    	
    	
    	
    	                        <elseif>else <if>if<condition>(<expr><name>kre</name>                     <operator>==</operator>      <literal type="number">2</literal></expr>)</condition><then>
    	
    	
    	    <block>{
    		
    		
    		
    		
    		
    		<if>if<condition>(<expr><name><name>sre</name><index>[<expr><name><name>are</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name>          <operator>==</operator>          <name><name>sre</name><index>[<expr><name><name>are</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name>             <operator>and</operator>     <name><name>tre</name><index>[<expr><name><name>are</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name>         <operator>==</operator>          <name><name>tre</name><index>[<expr><name><name>are</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr>)</condition><then>











    		<block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Yes\n"</literal></expr>;</expr_stmt></block></then>
    	
    	
    	
    	
    	
    		<else>else
    		
    		
    		
    		        <block>{ 
    		            
    		            
    		            
    		                    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No\n"</literal></expr>;</expr_stmt>
    		            
    		            
    		            
    		            
    		            
    
    
    		        }</block></else></if>
    
    
    
    	}</block></then></if></elseif>
    
    
    
                                                    	<else>else
                                                    	
                                                    	
                                                    	    <block>{ 
                                                    	        
                                                    	        
                                                    	        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No\n"</literal></expr>;</expr_stmt>
                                                    	        
                                                    	        
                                                    	        
                                                    	    }</block></else></if>

  }</block>


 
  }</block></function>
 
                 
 
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
 
 
<block>{
 
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ONLINE_JUDGE</name></cpp:ifndef>
  <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"input.txt"</literal></expr></argument>,<argument><expr><literal type="string">"r"</literal></expr></argument>,<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"output.txt"</literal></expr></argument>,<argument><expr><literal type="string">"w"</literal></expr></argument>,<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

 
 
 
 <expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
   
  
  <expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <literal type="string">"\nTime elapsed: "</literal> <operator>&lt;&lt;</operator> <literal type="number">1000</literal> <operator>*</operator> <call><name>clock</name><argument_list>()</argument_list></call> <operator>/</operator> <name>CLOCKS_PER_SEC</name> <operator>&lt;&lt;</operator> <literal type="string">"ms\n"</literal></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
