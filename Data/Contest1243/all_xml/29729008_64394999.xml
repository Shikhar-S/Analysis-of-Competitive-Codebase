<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29729008_64394999.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>char</name></type> <name><name>s1</name><index>[<expr><literal type="number">60</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>s2</name><index>[<expr><literal type="number">60</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>num1</name><index>[<expr><literal type="number">30</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>ans</name><index>[<expr><literal type="number">200</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>t</name><operator>--</operator></expr>)</condition>
<block>{
   <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
   <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>,<argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>,<argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>num1</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>num1</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <for>for <control>(<init><decl><type><name>int</name></type> <name>a</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>a</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>a</name><operator>++</operator></expr></incr>)</control>
      <block type="pseudo"><expr_stmt><expr><name><name>num1</name><index>[<expr><name><name>s1</name><index>[<expr><name>a</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block></for>
   <for>for <control>(<init><decl><type><name>int</name></type> <name>a</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>a</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>a</name><operator>++</operator></expr></incr>)</control>
      <block type="pseudo"><expr_stmt><expr><name><name>num1</name><index>[<expr><name><name>s2</name><index>[<expr><name>a</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block></for>
   <decl_stmt><decl><type><name>int</name></type> <name>flag</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
   <for>for <control>(<init><decl><type><name>int</name></type> <name>a</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>a</name><operator>&lt;=</operator><literal type="number">25</literal></expr>;</condition><incr><expr><name>a</name><operator>++</operator></expr></incr>)</control>
   <block>{
      <if>if <condition>(<expr><name><name>num1</name><index>[<expr><name>a</name></expr>]</index></name><operator>%</operator><literal type="number">2</literal><operator>!=</operator><literal type="number">0</literal></expr>)</condition><then>
      <block>{
         <expr_stmt><expr><name>flag</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
         <break>break;</break>
		}</block></then></if>
	}</block></for>
	<if>if <condition>(<expr><name>flag</name></expr>)</condition><then>
	<block>{
	   <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"No\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	   <continue>continue;</continue>
	}</block></then></if>
	<decl_stmt><decl><type><name>int</name></type> <name>cnt</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>a</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>a</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>a</name><operator>++</operator></expr></incr>)</control>
	<block>{
	   <if>if <condition>(<expr><name><name>s1</name><index>[<expr><name>a</name></expr>]</index></name><operator>!=</operator><name><name>s2</name><index>[<expr><name>a</name></expr>]</index></name></expr>)</condition><then>
	   <block>{
	   	<decl_stmt><decl><type><name>int</name></type> <name>okk</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	      <for>for <control>(<init><decl><type><name>int</name></type> <name>b</name><init>=<expr><name>a</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>b</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>b</name><operator>++</operator></expr></incr>)</control>
	         <block type="pseudo"><if>if <condition>(<expr><name><name>s2</name><index>[<expr><name>a</name></expr>]</index></name><operator>==</operator><name><name>s2</name><index>[<expr><name>b</name></expr>]</index></name></expr>)</condition><then>
	         <block>{
	            <expr_stmt><expr><name>ret</name><operator>=</operator><name>b</name></expr>;</expr_stmt>
	            <expr_stmt><expr><name>okk</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
	            <break>break;</break>
				}</block></then></if></block></for>
			<if>if <condition>(<expr><name>okk</name></expr>)</condition><then>
			<block>{
			   <expr_stmt><expr><name>c</name><operator>=</operator><name><name>s1</name><index>[<expr><name>a</name></expr>]</index></name></expr>;</expr_stmt>
		      <expr_stmt><expr><name><name>s1</name><index>[<expr><name>a</name></expr>]</index></name><operator>=</operator><name><name>s2</name><index>[<expr><name>ret</name></expr>]</index></name></expr>;</expr_stmt>
		      <expr_stmt><expr><name><name>s2</name><index>[<expr><name>ret</name></expr>]</index></name><operator>=</operator><name>c</name></expr>;</expr_stmt>
		      <expr_stmt><expr><name><name>ans</name><index>[<expr><operator>++</operator><name>cnt</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name>a</name></expr>;</expr_stmt>
		      <expr_stmt><expr><name><name>ans</name><index>[<expr><name>cnt</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name>ret</name></expr>;</expr_stmt>
		      <continue>continue;</continue>
			}</block></then></if>
		   <for>for <control>(<init><decl><type><name>int</name></type> <name>b</name><init>=<expr><name>a</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>b</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>b</name><operator>++</operator></expr></incr>)</control>
		   <block>{
		      <if>if <condition>(<expr><name><name>s2</name><index>[<expr><name>a</name></expr>]</index></name><operator>==</operator><name><name>s1</name><index>[<expr><name>b</name></expr>]</index></name></expr>)</condition><then>
		      <block>{
		         <expr_stmt><expr><name>ret</name><operator>=</operator><name>b</name></expr>;</expr_stmt>
	            <break>break;</break>
				}</block></then></if>
			}</block></for>
		   <expr_stmt><expr><name><name>ans</name><index>[<expr><operator>++</operator><name>cnt</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name>ret</name></expr>;</expr_stmt>
		   <expr_stmt><expr><name><name>ans</name><index>[<expr><name>cnt</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		   <expr_stmt><expr><name>c</name><operator>=</operator><name><name>s1</name><index>[<expr><name>ret</name></expr>]</index></name></expr>;</expr_stmt>
		   <expr_stmt><expr><name><name>s1</name><index>[<expr><name>ret</name></expr>]</index></name><operator>=</operator><name><name>s2</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		   <expr_stmt><expr><name><name>s2</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name>c</name></expr>;</expr_stmt>
		   <expr_stmt><expr><name><name>ans</name><index>[<expr><operator>++</operator><name>cnt</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name>a</name></expr>;</expr_stmt>
		   <expr_stmt><expr><name><name>ans</name><index>[<expr><name>cnt</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		   <expr_stmt><expr><name>c</name><operator>=</operator><name><name>s2</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		   <expr_stmt><expr><name><name>s2</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name><name>s1</name><index>[<expr><name>a</name></expr>]</index></name></expr>;</expr_stmt>
		   <expr_stmt><expr><name><name>s1</name><index>[<expr><name>a</name></expr>]</index></name><operator>=</operator><name>c</name></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Yes\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>,<argument><expr><name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>a</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>a</name><operator>&lt;=</operator><name>cnt</name></expr>;</condition><incr><expr><name>a</name><operator>++</operator></expr></incr>)</control>
	   <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d\n"</literal></expr></argument>,<argument><expr><name><name>ans</name><index>[<expr><name>a</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name><name>ans</name><index>[<expr><name>a</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
}</block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
