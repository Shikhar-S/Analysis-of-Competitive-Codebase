<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29773517_64390599.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int i = a; i &lt;= b; i ++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>G</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int i = a; i &gt;= b; i --)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>max</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) &gt; (b) ? (a) : (b))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>min</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) &lt; (b) ? (a) : (b))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mx</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) = max(a, b))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mn</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) = min(a, b))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mem</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(a, b, sizeof a)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mec</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memcpy(a, b, sizeof a)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pf</name></cpp:macro> <cpp:value>printf</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sf</name></cpp:macro> <cpp:value>scanf</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>M</name> <init>= <expr><literal type="number">26</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>t</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name><name>vis</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>Q1</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>Q2</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>b</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>cnta</name><index>[<expr><name>M</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>cntb</name><index>[<expr><name>M</name></expr>]</index></name></decl>;</decl_stmt>
<struct>struct <name>node</name> <block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
</public>}</block> <decl><name><name>Ans</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>N</name></expr>]</index></name></decl>;</struct>

<function><type><name>void</name></type> <name>Doit</name><parameter_list>()</parameter_list> <block>{
	<macro><name>F</name><argument_list>(<argument>i</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">25</literal></argument>)</argument_list></macro>
		<if>if <condition>( <expr><operator>(</operator><name><name>cnta</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>cntb</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"No"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		}</block></then></if>
	<decl_stmt><decl><type><name>int</name></type> <name>L</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<macro><name>F</name><argument_list>(<argument>i</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">25</literal></argument>)</argument_list></macro> <block>{
		<if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>cnta</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>cntb</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
		<macro><name>F</name><argument_list>(<argument>i</argument>, <argument><literal type="number">1</literal></argument>, <argument>n</argument>)</argument_list></macro> <expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="char">'a'</literal></expr><operator>,</operator> <expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>t</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="char">'a'</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>Q1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>Q2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<macro><name>F</name><argument_list>(<argument>j</argument>, <argument><literal type="number">1</literal></argument>, <argument>n</argument>)</argument_list></macro>
			<expr_stmt><expr><name><name>vis</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>i</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>b</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>i</name><operator>)</operator></expr>;</expr_stmt>
		<macro><name>F</name><argument_list>(<argument>j</argument>, <argument><literal type="number">1</literal></argument>, <argument>n</argument>)</argument_list></macro>
			<if>if <condition>(<expr><name><name>vis</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
				<if>if <condition>(<expr><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>i</name></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><name><name>Q1</name><index>[<expr><operator>++</operator> <name><name>Q1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt></block></then></if>
				<if>if <condition>(<expr><name><name>b</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>i</name></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><name><name>Q2</name><index>[<expr><operator>++</operator> <name><name>Q2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt></block></then></if>
			}</block></then></if>
		<macro><name>F</name><argument_list>(<argument>i</argument>, <argument><literal type="number">1</literal></argument>, <argument>Q1[<literal type="number">0</literal>] / <literal type="number">2</literal></argument>)</argument_list></macro>
			<expr_stmt><expr><name><name>Ans</name><index>[<expr><operator>++</operator> <name>L</name></expr>]</index></name> <operator>=</operator> <block>{<expr><name><name>Q1</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>, <expr><name><name>Q1</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></expr>}</block></expr><operator>,</operator> <expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name><name>Ans</name><index>[<expr><name>L</name></expr>]</index></name><operator>.</operator><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>t</name><index>[<expr><name><name>Ans</name><index>[<expr><name>L</name></expr>]</index></name><operator>.</operator><name>y</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<macro><name>F</name><argument_list>(<argument>i</argument>, <argument><literal type="number">1</literal></argument>, <argument>Q2[<literal type="number">0</literal>] / <literal type="number">2</literal></argument>)</argument_list></macro>
			<expr_stmt><expr><name><name>Ans</name><index>[<expr><operator>++</operator> <name>L</name></expr>]</index></name> <operator>=</operator> <block>{<expr><name><name>Q2</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></expr>, <expr><name><name>Q2</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>}</block></expr><operator>,</operator> <expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name><name>Ans</name><index>[<expr><name>L</name></expr>]</index></name><operator>.</operator><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>t</name><index>[<expr><name><name>Ans</name><index>[<expr><name>L</name></expr>]</index></name><operator>.</operator><name>y</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name><name>Q1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name><name>Ans</name><index>[<expr><operator>++</operator> <name>L</name></expr>]</index></name> <operator>=</operator> <block>{<expr><name><name>Q1</name><index>[<expr><name><name>Q1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr>, <expr><name><name>Q1</name><index>[<expr><name><name>Q1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr>}</block></expr><operator>,</operator> <expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name><name>Ans</name><index>[<expr><name>L</name></expr>]</index></name><operator>.</operator><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>t</name><index>[<expr><name><name>Ans</name><index>[<expr><name>L</name></expr>]</index></name><operator>.</operator><name>y</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>Ans</name><index>[<expr><operator>++</operator> <name>L</name></expr>]</index></name> <operator>=</operator> <block>{<expr><name><name>Q2</name><index>[<expr><name><name>Q2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr>, <expr><name><name>Q1</name><index>[<expr><name><name>Q1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr>}</block></expr><operator>,</operator> <expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name><name>Ans</name><index>[<expr><name>L</name></expr>]</index></name><operator>.</operator><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>t</name><index>[<expr><name><name>Ans</name><index>[<expr><name>L</name></expr>]</index></name><operator>.</operator><name>y</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block>
	<if>if <condition>(<expr><name>L</name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>*</operator> <name>n</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"No"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	}</block></then></if>
	<expr_stmt><expr><call><name>pf</name><argument_list>(<argument><expr><literal type="string">"Yes\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>F</name><argument_list>(<argument>i</argument>, <argument><literal type="number">1</literal></argument>, <argument>L</argument>)</argument_list></macro>
		<expr_stmt><expr><call><name>pf</name><argument_list>(<argument><expr><literal type="string">"%d %d\n"</literal></expr></argument>, <argument><expr><name><name>Ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>Ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<for>for <control>(<init><expr><call><name>sf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>k</name> <operator>--</operator></expr>;</condition> <incr/>)</control> <block>{
		<expr_stmt><expr><call><name>sf</name><argument_list>(<argument><expr><literal type="string">"%d%s%s"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name>s</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>t</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>L</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<macro><name>F</name><argument_list>(<argument>i</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">25</literal></argument>)</argument_list></macro> <expr_stmt><expr><name><name>cnta</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>cntb</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<macro><name>F</name><argument_list>(<argument>i</argument>, <argument><literal type="number">1</literal></argument>, <argument>n</argument>)</argument_list></macro> <expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="char">'a'</literal></expr><operator>,</operator> <expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>t</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="char">'a'</literal></expr><operator>,</operator> <expr><name><name>cnta</name><index>[<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>++</operator></expr><operator>,</operator> <expr><name><name>cntb</name><index>[<expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Doit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></for>
}</block></function></unit>
