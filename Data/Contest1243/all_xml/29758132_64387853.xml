<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29758132_64387853.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>'\n'</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>const</specifier> <name>long</name> <name>long</name></type> <name>mod</name><init>=<expr><literal type="number">764983111ll</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>long</name> <name>long</name></type> <name>mod2</name><init>=<expr><literal type="number">764983113ll</literal></expr></init></decl>;</decl_stmt>

<function><type><name>int32_t</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>;</decl_stmt><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type><name>d</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>ll</name></type> <name>i</name><init>=<expr><literal type="number">2ll</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>*</operator><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <if>if <condition>(<expr><name>n</name><operator>%</operator><name>i</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
        <expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>i</name><operator>*</operator><name>i</name><operator>&lt;</operator><name>n</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>n</name><operator>/</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></for>
    <for>for <control>(<init><decl><type><name>ll</name></type> <name>x</name><range>:<expr><name>d</name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><name>n</name><operator>=</operator><call><name>__gcd</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>n</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

</unit>
