<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29737039_64395990.cpp"><comment type="block" format="doxygen">/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fstream&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>c.begin(), c.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>soa</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>sort(all(c))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sua</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>accumulate(all(c), 0ll)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>forn</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>for(ll i = 0; i &lt; ll(n); ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>forn1</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(ll i = 1; i &lt; ll(n); ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nfor</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>for(ll i = ll(n) - 1; i &gt;= 0; --i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nfor1</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(ll i = ll(n) - 2; i &gt;= 0; --i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>forlr</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>l</name></type></parameter>, <parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(ll i = l; i &lt; ll(r); ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>forrl</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>l</name></type></parameter>, <parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(ll i = ll(r) - 1; i &gt;= l; --i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>forr</name><parameter_list>(<parameter><type><name>elem</name></type></parameter>, <parameter><type><name>vec</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(auto &amp; elem : vec)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>print</name></cpp:macro> <cpp:value>WhiteSpacedCout(out).start(),</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dbg</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>pr_dbg(out, #__VA_ARGS__, __VA_ARGS__);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>c.begin(), c.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rall</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>c.rbegin(), c.rend()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>by</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>[](const auto&amp; a, const auto&amp; b) { return a.x &lt; b.x; }</cpp:value></cpp:define> <comment type="line">// C++14</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>eq</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>[](const auto&amp; a, const auto&amp; b) { return a.x == b.x; }</cpp:value></cpp:define> <comment type="line">// C++14</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>divceil</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) + (y) - 1) / (y))</cpp:value></cpp:define>

<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T1</name></parameter>, <parameter><type><name>typename</name></type> <name>T2</name></parameter>&gt;</parameter_list></template> <type><name><name>std</name><operator>::</operator><name>ostream</name></name> <modifier>&amp;</modifier></type><name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>ostream</name></name> <modifier>&amp;</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>T1</name></expr></argument>,<argument><expr><name>T2</name></expr></argument>&gt;</argument_list></name></name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list><block>{ <expr_stmt><expr><name>s</name> <operator>&lt;&lt;</operator> <literal type="string">"pair("</literal> <operator>&lt;&lt;</operator> <name><name>x</name><operator>.</operator><name>first</name></name> <operator>&lt;&lt;</operator> <literal type="string">" ,"</literal> <operator>&lt;&lt;</operator> <name><name>x</name><operator>.</operator><name>second</name></name> <operator>&lt;&lt;</operator> <literal type="char">')'</literal></expr>;</expr_stmt> <return>return <expr><name>s</name></expr>;</return> }</block></function>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name><name>std</name><operator>::</operator><name>ostream</name></name> <modifier>&amp;</modifier></type><name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>ostream</name></name> <modifier>&amp;</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list><block>{ <if>if<condition>(<expr><call><name><name>x</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block>{ <expr_stmt><expr><name>s</name> <operator>&lt;&lt;</operator> <literal type="string">"vector(empty)"</literal></expr>;</expr_stmt> <return>return <expr><name>s</name></expr>;</return>}</block></then></if> <expr_stmt><expr><name>s</name> <operator>&lt;&lt;</operator> <literal type="string">"vector("</literal></expr>;</expr_stmt> <for>for<control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>x</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{ <expr_stmt><expr><name>s</name> <operator>&lt;&lt;</operator> <name><name>x</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal></expr>;</expr_stmt> }</block></for> <expr_stmt><expr><name>s</name> <operator>&lt;&lt;</operator> <name><name>x</name><index>[<expr><call><name><name>x</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="char">')'</literal></expr>;</expr_stmt> <return>return <expr><name>s</name></expr>;</return> }</block></function>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>V</name></parameter>&gt;</parameter_list></template>             <type><name><name>std</name><operator>::</operator><name>ostream</name></name> <modifier>&amp;</modifier></type><name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>ostream</name></name> <modifier>&amp;</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>V</name></expr></argument>&gt;</argument_list></name></name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list>        <block>{ <if>if<condition>(<expr><call><name><name>x</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block>{ <expr_stmt><expr><name>s</name> <operator>&lt;&lt;</operator> <literal type="string">"set(empty)"</literal></expr>;</expr_stmt>      <return>return <expr><name>s</name></expr>;</return>}</block></then></if> <expr_stmt><expr><name>s</name> <operator>&lt;&lt;</operator> <literal type="string">"set("</literal></expr>;</expr_stmt>      <for>for<control>(<init><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><call><name><name>x</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>it</name> <operator>!=</operator> <call><name><name>x</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>)</control><block>{ <expr_stmt><expr><name>auto</name> <operator>&amp;</operator> <name>v</name> <operator>=</operator> <operator>*</operator><name>it</name></expr>;</expr_stmt> <expr_stmt><expr><name>s</name> <operator>&lt;&lt;</operator> <name>v</name></expr>;</expr_stmt> <if>if<condition>(<expr><operator>++</operator><name>it</name> <operator>!=</operator> <call><name><name>x</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>s</name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal></expr>;</expr_stmt></block></then> <else>else <block type="pseudo"><expr_stmt><expr><name>s</name> <operator>&lt;&lt;</operator> <literal type="string">")"</literal></expr>;</expr_stmt></block></else></if> }</block></for> <return>return <expr><name>s</name></expr>;</return> }</block></function>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>V</name></parameter>&gt;</parameter_list></template>             <type><name><name>std</name><operator>::</operator><name>ostream</name></name> <modifier>&amp;</modifier></type><name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>ostream</name></name> <modifier>&amp;</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name><name>multiset</name><argument_list type="generic">&lt;<argument><expr><name>V</name></expr></argument>&gt;</argument_list></name></name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list>   <block>{ <if>if<condition>(<expr><call><name><name>x</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block>{ <expr_stmt><expr><name>s</name> <operator>&lt;&lt;</operator> <literal type="string">"multiset(empty)"</literal></expr>;</expr_stmt> <return>return <expr><name>s</name></expr>;</return>}</block></then></if> <expr_stmt><expr><name>s</name> <operator>&lt;&lt;</operator> <literal type="string">"multiset("</literal></expr>;</expr_stmt> <for>for<control>(<init><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><call><name><name>x</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>it</name> <operator>!=</operator> <call><name><name>x</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>)</control><block>{ <expr_stmt><expr><name>auto</name> <operator>&amp;</operator> <name>v</name> <operator>=</operator> <operator>*</operator><name>it</name></expr>;</expr_stmt> <expr_stmt><expr><name>s</name> <operator>&lt;&lt;</operator> <name>v</name></expr>;</expr_stmt> <if>if<condition>(<expr><operator>++</operator><name>it</name> <operator>!=</operator> <call><name><name>x</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>s</name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal></expr>;</expr_stmt></block></then> <else>else <block type="pseudo"><expr_stmt><expr><name>s</name> <operator>&lt;&lt;</operator> <literal type="string">")"</literal></expr>;</expr_stmt></block></else></if> }</block></for> <return>return <expr><name>s</name></expr>;</return> }</block></function>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>K</name></parameter>, <parameter><type><name>typename</name></type> <name>V</name></parameter>&gt;</parameter_list></template> <type><name><name>std</name><operator>::</operator><name>ostream</name></name> <modifier>&amp;</modifier></type><name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>ostream</name></name> <modifier>&amp;</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>K</name></expr></argument>, <argument><expr><name>V</name></expr></argument>&gt;</argument_list></name></name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list>     <block>{ <if>if<condition>(<expr><call><name><name>x</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block>{ <expr_stmt><expr><name>s</name> <operator>&lt;&lt;</operator> <literal type="string">"map(empty)"</literal></expr>;</expr_stmt>      <return>return <expr><name>s</name></expr>;</return>}</block></then></if> <expr_stmt><expr><name>s</name> <operator>&lt;&lt;</operator> <literal type="string">"map("</literal></expr>;</expr_stmt>      <for>for<control>(<init><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><call><name><name>x</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>it</name> <operator>!=</operator> <call><name><name>x</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>)</control><block>{ <expr_stmt><expr><name>auto</name> <operator>&amp;</operator> <name>v</name> <operator>=</operator> <operator>*</operator><name>it</name></expr>;</expr_stmt> <expr_stmt><expr><name>s</name> <operator>&lt;&lt;</operator> <name><name>v</name><operator>.</operator><name>fi</name></name> <operator>&lt;&lt;</operator> <literal type="string">"="</literal> <operator>&lt;&lt;</operator> <name><name>v</name><operator>.</operator><name>se</name></name></expr>;</expr_stmt> <if>if<condition>(<expr><operator>++</operator><name>it</name> <operator>!=</operator> <call><name><name>x</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>s</name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal></expr>;</expr_stmt></block></then> <else>else <block type="pseudo"><expr_stmt><expr><name>s</name> <operator>&lt;&lt;</operator> <literal type="string">")"</literal></expr>;</expr_stmt></block></else></if> }</block></for> <return>return <expr><name>s</name></expr>;</return> }</block></function>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>K</name></parameter>, <parameter><type><name>typename</name></type> <name>V</name></parameter>&gt;</parameter_list></template> <type><name><name>std</name><operator>::</operator><name>ostream</name></name> <modifier>&amp;</modifier></type><name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>ostream</name></name> <modifier>&amp;</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name><name>multimap</name><argument_list type="generic">&lt;<argument><expr><name>K</name></expr></argument>, <argument><expr><name>V</name></expr></argument>&gt;</argument_list></name></name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list><block>{ <if>if<condition>(<expr><call><name><name>x</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block>{ <expr_stmt><expr><name>s</name> <operator>&lt;&lt;</operator> <literal type="string">"multimap(empty)"</literal></expr>;</expr_stmt> <return>return <expr><name>s</name></expr>;</return>}</block></then></if> <expr_stmt><expr><name>s</name> <operator>&lt;&lt;</operator> <literal type="string">"multimap("</literal></expr>;</expr_stmt> <for>for<control>(<init><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><call><name><name>x</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>it</name> <operator>!=</operator> <call><name><name>x</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>)</control><block>{ <expr_stmt><expr><name>auto</name> <operator>&amp;</operator> <name>v</name> <operator>=</operator> <operator>*</operator><name>it</name></expr>;</expr_stmt> <expr_stmt><expr><name>s</name> <operator>&lt;&lt;</operator> <name><name>v</name><operator>.</operator><name>fi</name></name> <operator>&lt;&lt;</operator> <literal type="string">"="</literal> <operator>&lt;&lt;</operator> <name><name>v</name><operator>.</operator><name>se</name></name></expr>;</expr_stmt> <if>if<condition>(<expr><operator>++</operator><name>it</name> <operator>!=</operator> <call><name><name>x</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>s</name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal></expr>;</expr_stmt></block></then> <else>else <block type="pseudo"><expr_stmt><expr><name>s</name> <operator>&lt;&lt;</operator> <literal type="string">")"</literal></expr>;</expr_stmt></block></else></if> }</block></for> <return>return <expr><name>s</name></expr>;</return> }</block></function>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T1</name></parameter>, <parameter><type><name>typename</name></type> <name>T2</name></parameter>&gt;</parameter_list></template> <type><name><name>std</name><operator>::</operator><name>istream</name></name> <modifier>&amp;</modifier></type> <name>operator <name>&gt;&gt;</name></name> <parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>istream</name></name> <modifier>&amp;</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>T1</name></expr></argument>,<argument><expr><name>T2</name></expr></argument>&gt;</argument_list></name></name> <modifier>&amp;</modifier></type> <name>pair</name></decl></parameter>)</parameter_list><block>{ <expr_stmt><expr><name>s</name> <operator>&gt;&gt;</operator> <name><name>pair</name><operator>.</operator><name>fi</name></name> <operator>&gt;&gt;</operator> <name><name>pair</name><operator>.</operator><name>se</name></name></expr>;</expr_stmt> <return>return <expr><name>s</name></expr>;</return>  }</block></function>

<struct>struct <name>WhiteSpacedCout</name> <block>{<public type="default"> <decl_stmt><decl><type><name>bool</name></type> <name>space</name></decl>;</decl_stmt> <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type> <name>out</name></decl>;</decl_stmt> <constructor><specifier>explicit</specifier> <name>WhiteSpacedCout</name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type> <name>out</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>space</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call>, <call><name>out</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call> </member_init_list><block>{}</block></constructor> <destructor><name>~<name>WhiteSpacedCout</name></name><parameter_list>()</parameter_list> <block>{ <expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt> }</block></destructor>  <function><type><name>WhiteSpacedCout</name> <modifier>&amp;</modifier></type> <name>start</name><parameter_list>()</parameter_list> <block>{<return>return <expr><operator>*</operator><name>this</name></expr>;</return>}</block></function> <function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>WhiteSpacedCout</name> <modifier>&amp;</modifier></type><name>operator <name>,</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T</name> <modifier>&amp;</modifier></type><name>t</name></decl></parameter>)</parameter_list> <block>{ <if>if <condition>(<expr><name>space</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block></then> <else>else <block type="pseudo"><expr_stmt><expr><name>space</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt></block></else></if> <expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <name>t</name></expr>;</expr_stmt> <return>return <expr><operator>*</operator><name>this</name></expr>;</return> }</block></function> </public>}</block>;</struct>

<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>static</specifier> <type><name>void</name></type> <name>pr_dbg</name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>ostream</name></name> <modifier>&amp;</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>string</name><modifier>&amp;</modifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>t</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>s</name> <operator>&lt;&lt;</operator> <name>name</name> <operator>&lt;&lt;</operator> <literal type="string">": "</literal> <operator>&lt;&lt;</operator> <name>t</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt> }</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>, <parameter><type><name>typename</name> <modifier>...</modifier></type> <name>Types</name></parameter>&gt;</parameter_list></template> <specifier>static</specifier> <type><name>void</name></type> <name>pr_dbg</name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>ostream</name></name> <modifier>&amp;</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>string</name><modifier>&amp;</modifier></type> <name>names</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>Types</name> <modifier>...</modifier></type> <name>rest</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>auto</name></type> <name>comma_pos</name> <init>= <expr><call><name><name>names</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <expr_stmt><expr><name>s</name> <operator>&lt;&lt;</operator> <call><name><name>names</name><operator>.</operator><name>substr</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>comma_pos</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">": "</literal> <operator>&lt;&lt;</operator> <name>t</name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal></expr>;</expr_stmt> <expr_stmt><expr><call><name>pr_dbg</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>string</name><argument_list>(<argument><expr><name>names</name></expr></argument>, <argument><expr><call><name><name>names</name><operator>.</operator><name>find_first_not_of</name></name><argument_list>(<argument><expr><literal type="string">" \t\n"</literal></expr></argument>, <argument><expr><name>comma_pos</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rest</name> <operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>pll</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>&gt;</argument_list></name></type> <name>vs</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>vll</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></type> <name>vb</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vll</name></expr></argument>&gt;</argument_list></name></type> <name>vvll</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pll</name></expr></argument>&gt;</argument_list></name></type> <name>vpll</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vll</name></expr></argument>&gt;</argument_list></name></type> <name>Graph</name>;</typedef>

<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>static</specifier> <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>vin</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>istream</name></name><modifier>&amp;</modifier></type> <name>in</name></decl></parameter>)</parameter_list><block>{ <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>ret</name></decl>;</decl_stmt> <macro><name>forn</name><argument_list>(<argument>i</argument>, <argument>n</argument>)</argument_list></macro><block>{ <decl_stmt><decl><type><name>T</name></type> <name>val</name></decl>;</decl_stmt> <expr_stmt><expr><name>in</name> <operator>&gt;&gt;</operator> <name>val</name></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block> <return>return <expr><name>ret</name></expr>;</return> }</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>static</specifier> <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>vini</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>istream</name></name><modifier>&amp;</modifier></type> <name>in</name></decl></parameter>)</parameter_list><block>{ <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>ret</name></decl>;</decl_stmt> <macro><name>forn</name><argument_list>(<argument>i</argument>, <argument>n</argument>)</argument_list></macro><block>{ <decl_stmt><decl><type><name>T</name></type> <name>val</name></decl>;</decl_stmt> <expr_stmt><expr><name>in</name> <operator>&gt;&gt;</operator> <name>val</name></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><block>{<expr><name>val</name></expr>, <expr><name>i</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block> <return>return <expr><name>ret</name></expr>;</return> }</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>static</specifier> <type><name>T</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>istream</name></name><modifier>&amp;</modifier></type> <name>in</name></decl></parameter>)</parameter_list><block>{ <decl_stmt><decl><type><name>T</name></type> <name>val</name></decl>;</decl_stmt> <expr_stmt><expr><name>in</name> <operator>&gt;&gt;</operator> <name>val</name></expr>;</expr_stmt> <return>return <expr><name>val</name></expr>;</return> }</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>static</specifier> <type><name>void</name></type> <name>answer</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T</name> <modifier>&amp;</modifier></type> <name>cont</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>ostream</name></name> <modifier>&amp;</modifier></type> <name>out</name></decl></parameter>)</parameter_list><block>{ <for>for<control>(<init><expr><name>auto</name> <operator>&amp;</operator> <name>v</name> <operator>:</operator> <name>cont</name></expr></init>)</control><block>{ <expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <name>v</name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal></expr>;</expr_stmt> }</block></for><empty_stmt>;</empty_stmt> <expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt> }</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>read_vll</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>vin&lt;ll&gt;(n, in)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>read_vlli</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>vini&lt;ll&gt;(n, in)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>read_vpll</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>vin&lt;pll&gt;(n, in)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>read_vplli</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vini&lt;pll&gt;(n, in)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>read_vs</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>vin&lt;string&gt;(n, in)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>read_s</name><parameter_list>()</parameter_list></cpp:macro>      <cpp:value>read&lt;string&gt;(in)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>read_ll</name><parameter_list>()</parameter_list></cpp:macro>     <cpp:value>read&lt;ll&gt;(in)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>read_pll</name><parameter_list>()</parameter_list></cpp:macro>    <cpp:value>read&lt;pll&gt;(in)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>max_ll</name></cpp:macro> <cpp:value>std::numeric_limits&lt;ll&gt;::max()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>min_ll</name></cpp:macro> <cpp:value>std::numeric_limits&lt;ll&gt;::min()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>min3</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>std::min(std::min(a, b), c)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>max3</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>std::max(std::max(a, b), c)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>MOD</name> <init>= <expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>


<class>class <name>B2ObmenSimvolovUslozhnennayaVersiya</name>
<block>{<private type="default">
</private><public>public:
	<function><type><name>void</name></type> <name>solve</name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>istream</name></name><modifier>&amp;</modifier></type> <name>in</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type> <name>out</name></decl></parameter>)</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>ll</name></type> <name>q</name> <init>= <expr><call><name>read_ll</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<macro><name>forn</name><argument_list>(<argument>_</argument>, <argument>q</argument>)</argument_list></macro>
		<block>{
			<decl_stmt><decl><type><name>ll</name></type> <name>n</name> <init>= <expr><call><name>read_ll</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>auto</name></type> <name>s1</name> <init>= <expr><call><name>read_s</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>auto</name></type> <name>s2</name> <init>= <expr><call><name>read_s</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

			<decl_stmt><decl><type><name>vll</name></type> <name>freq</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
			<macro><name>forr</name><argument_list>(<argument>c</argument>, <argument>s1</argument>)</argument_list></macro> <expr_stmt><expr><name><name>freq</name><index>[<expr><name>c</name> <operator>-</operator> <literal type="char">'a'</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
			<macro><name>forr</name><argument_list>(<argument>c</argument>, <argument>s2</argument>)</argument_list></macro> <expr_stmt><expr><name><name>freq</name><index>[<expr><name>c</name> <operator>-</operator> <literal type="char">'a'</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

			<if>if<condition>(<expr><call><name>all_of</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name>freq</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl/></parameter></parameter_list>ll <name>i</name></lambda></expr></argument>)</argument_list></call></expr></condition><then><block>{ <return>return <expr><name>i</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>;</return> }</block></then></if>)</block>)</block><block>{
				<expr_stmt><expr><name>print</name> <literal type="string">"Yes"</literal></expr>;</expr_stmt>

				<decl_stmt><decl><type><name>vpll</name></type> <name>ans</name></decl>;</decl_stmt>

				<macro><name>forn</name><argument_list>(<argument>i</argument>, <argument>n</argument>)</argument_list></macro><block>{
					<if>if<condition>(<expr><name><name>s1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>s2</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
						<block type="pseudo"><continue>continue;</continue></block></then></if>

					<macro><name>forlr</name><argument_list>(<argument>j</argument>, <argument>i + <literal type="number">1</literal></argument>, <argument>n</argument>)</argument_list></macro><block>{
						<if>if<condition>(<expr><name>i</name> <operator>!=</operator> <name>j</name> <operator>&amp;&amp;</operator> <name><name>s1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>s1</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then><block>{
							<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s1</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><block>{<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>, <expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<break>break;</break>
						}</block></then></if>
						<if>if<condition>(<expr><name><name>s1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>s2</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then><block>{
							<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s1</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s2</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s1</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><block>{<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>, <expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><block>{<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>, <expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<break>break;</break>
						}</block></then></if>
					}</block>
				}</block>

				<decl_stmt><decl><type><name>print</name></type> <name><name>ans</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></decl>;</decl_stmt>
				<macro><name>forr</name><argument_list>(<argument>a</argument>, <argument>ans</argument>)</argument_list></macro><block>{
					<decl_stmt><decl><type><name>print</name></type> <name><name>a</name><operator>.</operator><name>fi</name></name></decl>, <decl><type ref="prev"/><name><name>a</name><operator>.</operator><name>se</name></name></decl>;</decl_stmt>
				}</block>
			}</block></function> <else>else <block>{
				<expr_stmt><expr><name>print</name> <literal type="string">"No"</literal></expr>;</expr_stmt>
			}</block></else>

		</public>}</block>
	<decl/></class>}
}<empty_stmt>;</empty_stmt>


<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name><name>std</name><operator>::</operator><name>setprecision</name></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>B2ObmenSimvolovUslozhnennayaVersiya</name></type> <name>solver</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>istream</name></name><modifier>&amp;</modifier></type> <name>in</name><argument_list>(<argument><expr><name><name>std</name><operator>::</operator><name>cin</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type> <name>out</name><argument_list>(<argument><expr><name><name>std</name><operator>::</operator><name>cout</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name>solver</name><operator>.</operator><name>solve</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
