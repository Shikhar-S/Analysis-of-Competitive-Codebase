<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29781052_64416328.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/algorithmfwd.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pi</name>;</typedef>
<decl_stmt><decl><type><name>int</name></type> <name>Test</name></decl>,<decl><type ref="prev"/><name>n</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>,<decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
<comment type="block">/*sfdsfsdfsdfsdf
sdf
sdf
ds
fsd
f
sdf
can you hack my code
*/</comment>
 <function><name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>Test</name></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>Test</name><operator>--</operator></expr>)</condition>
    <block>{
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>s</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pi</name></expr></argument>&gt;</argument_list></name></type> <name>lkjhlh</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>lkjhlh</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>dsfsdfs</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>dsfsdfs</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>dsfsdfs</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><if>if <condition>(<expr><name><name>s</name><index>[<expr><name>dsfsdfs</name></expr>]</index></name><operator>!=</operator><name><name>t</name><index>[<expr><name>dsfsdfs</name></expr>]</index></name></expr>)</condition><then>
            <block>{
                <for>for <control>(<init><decl><type><name>int</name></type> <name>sdfsdfsdf</name><init>=<expr><name>dsfsdfs</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>sdfsdfsdf</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>sdfsdfsdf</name><operator>++</operator></expr></incr>)</control>
                    <block type="pseudo"><if>if <condition>(<expr><name><name>t</name><index>[<expr><name>dsfsdfs</name></expr>]</index></name><operator>==</operator><name><name>t</name><index>[<expr><name>sdfsdfsdf</name></expr>]</index></name></expr>)</condition><then>
                    <block>{
                        <expr_stmt><expr><call><name><name>lkjhlh</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>pi</name><argument_list>(<argument><expr><name>dsfsdfs</name></expr></argument>,<argument><expr><name>sdfsdfsdf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>dsfsdfs</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>t</name><index>[<expr><name>sdfsdfsdf</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt><break>break;</break>
                    }</block></then>
                    <elseif>else <if>if <condition>(<expr><name><name>s</name><index>[<expr><name>sdfsdfsdf</name></expr>]</index></name> <operator>==</operator> <name><name>t</name><index>[<expr><name>dsfsdfs</name></expr>]</index></name></expr>)</condition><then>
                    <block>{
                        <expr_stmt><expr><call><name><name>lkjhlh</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>pi</name><argument_list>(<argument><expr><name>dsfsdfs</name></expr></argument>, <argument><expr><name>dsfsdfs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>dsfsdfs</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>t</name><index>[<expr><name>dsfsdfs</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>lkjhlh</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>pi</name><argument_list>(<argument><expr><name>sdfsdfsdf</name></expr></argument>, <argument><expr><name>dsfsdfs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>sdfsdfsdf</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>t</name><index>[<expr><name>dsfsdfs</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>
                    }</block></then></if></elseif>
                    <elseif>else <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>dsfsdfs</name></expr>]</index></name><operator>==</operator><name><name>t</name><index>[<expr><name>sdfsdfsdf</name></expr>]</index></name></expr>)</condition><then><block>{<expr_stmt><expr><call><name><name>lkjhlh</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>pi</name><argument_list>(<argument><expr><name>dsfsdfs</name></expr></argument>, <argument><expr><name>dsfsdfs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>dsfsdfs</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>t</name><index>[<expr><name>dsfsdfs</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>lkjhlh</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>pi</name><argument_list>(<argument><expr><name>dsfsdfs</name></expr></argument>, <argument><expr><name>sdfsdfsdf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>dsfsdfs</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>t</name><index>[<expr><name>sdfsdfsdf</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt><break>break;</break>}</block></then></if></elseif></if></block></for>
            }</block></then></if></block></for>
        <if>if<condition>(<expr><name>s</name><operator>==</operator><name>t</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Yes\n"</literal><operator>&lt;&lt;</operator><call><name><name>lkjhlh</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&lt;&lt;</operator><literal type="string">"\n"</literal></expr>;</expr_stmt>
            <for>for<control>(<init><decl><type><name>int</name></type> <name>dsfsdfs</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>dsfsdfs</name><operator>&lt;</operator><call><name><name>lkjhlh</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>dsfsdfs</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator> <name><name>lkjhlh</name><index>[<expr><name>dsfsdfs</name></expr>]</index></name><operator>.</operator><name>first</name><operator>+</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name><name>lkjhlh</name><index>[<expr><name>dsfsdfs</name></expr>]</index></name><operator>.</operator><name>second</name><operator>+</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt></block></for>
        }</block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No\n"</literal></expr>;</expr_stmt></block></else></if>
    }</block></while>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
