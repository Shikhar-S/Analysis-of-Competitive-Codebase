<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29730216_64397111.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cerr &lt;&lt; #x &lt;&lt; " " &lt;&lt; x &lt;&lt; '\n'</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<using>using <name>ll</name> <init>= <type><name>long</name> <name>long</name></type></init>;</using>
<using>using <name>pii</name> <init>= <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>INF</name> <init>= <expr><literal type="number">0x3f3f3f3f</literal></expr></init></decl>, <decl><type ref="prev"/><name>N</name> <init>= <expr><literal type="number">2e5</literal> <operator>+</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<function><specifier>inline</specifier> <type><name>int</name></type> <name>read</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>f</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><call><name>getchar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>c</name><operator>&gt;</operator><literal type="char">'9'</literal><operator>||</operator><name>c</name><operator>&lt;</operator><literal type="char">'0'</literal></expr>)</condition> <block>{<if>if<condition>(<expr><name>c</name><operator>==</operator><literal type="char">'-'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>f</name> <operator>=</operator> <operator>-</operator><name>f</name></expr>;</expr_stmt></block></then></if> <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>}</block></while>
	<while>while<condition>(<expr><name>c</name><operator>&gt;=</operator><literal type="char">'0'</literal><operator>&amp;&amp;</operator><name>c</name><operator>&lt;=</operator><literal type="char">'9'</literal></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>sum</name> <operator>=</operator> <name>sum</name><operator>*</operator><literal type="number">10</literal> <operator>+</operator> <name>c</name> <operator>-</operator> <literal type="number">48</literal></expr><operator>,</operator> <expr><name>c</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
	<return>return <expr><name>sum</name><operator>*</operator><name>f</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><name>int</name></type> <name><name>head</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name>cnt</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name><name>pre</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>nxt</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name><name>in</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>vis</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>scc</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt> <comment type="line">//å­æ¯ä¸ªè¿éååçç»ç¹</comment>
<struct>struct <name>node</name>
<block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>to</name></decl>, <decl><type ref="prev"/><name>next</name></decl>;</decl_stmt>
</public>}</block><decl><name><name>e</name><index>[<expr><name>N</name><operator>&lt;&lt;</operator><literal type="number">1</literal></expr>]</index></name></decl>;</struct>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{
	<expr_stmt><expr><name><name>e</name><index>[<expr><operator>++</operator><name>cnt</name></expr>]</index></name><operator>.</operator><name>next</name> <operator>=</operator> <name><name>head</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>e</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>.</operator><name>to</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>head</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <name>cnt</name></expr>;</expr_stmt>
}</block></function>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>del</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{
	<expr_stmt><expr><name><name>nxt</name><index>[<expr><name><name>pre</name><index>[<expr><name>x</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name><name>nxt</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pre</name><index>[<expr><name><name>nxt</name><index>[<expr><name>x</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name><name>pre</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
}</block></function>
<function><type><name>int</name></type> <name>bfs</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name><name>queue</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>q</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>tot</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name><name>nxt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>now</name> <init>= <expr><name><name>nxt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>del</name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>++</operator><name>tot</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>in</name><index>[<expr><name>now</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<while>while<condition>(<expr><operator>!</operator><call><name><name>q</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition>
		<block>{
			<decl_stmt><decl><type><name>int</name></type> <name>u</name> <init>= <expr><call><name><name>q</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name><name>head</name><index>[<expr><name>u</name></expr>]</index></name></expr></init></decl>;</init><condition><expr><name>i</name></expr>;</condition><incr><expr><name>i</name><operator>=</operator><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>next</name></expr></incr>)</control>
			<block>{
				<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>to</name></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name><name>vis</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			}</block></for>
			<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name><name>nxt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</init><condition><expr><name>i</name></expr>;</condition><incr><expr><name>i</name><operator>=</operator><name><name>nxt</name><index>[<expr><name>i</name></expr>]</index></name></expr></incr>)</control>
			<block>{
				<if>if<condition>(<expr><operator>!</operator><name><name>in</name><index>[<expr><name>i</name></expr>]</index></name><operator>&amp;&amp;</operator><operator>!</operator><name><name>vis</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
				<block>{
					<expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>in</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>del</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>scc</name><index>[<expr><name>tot</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
			}</block></for>
			<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name><name>head</name><index>[<expr><name>u</name></expr>]</index></name></expr></init></decl>;</init><condition><expr><name>i</name></expr>;</condition><incr><expr><name>i</name><operator>=</operator><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>next</name></expr></incr>)</control>
			<block>{
				<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>to</name></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name><name>vis</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			}</block></for>
		}</block></while>
	}</block></while>
	<return>return <expr><name>tot</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>read</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><name>m</name> <operator>=</operator> <call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>m</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>u</name> <init>= <expr><call><name>read</name><argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>v</name> <init>= <expr><call><name>read</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>u</name></expr></argument>,<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>v</name></expr></argument>,<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>pre</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>nxt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block></for> 
	<expr_stmt><expr><name><name>nxt</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><call><name>bfs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>,<argument><expr><name>ans</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
