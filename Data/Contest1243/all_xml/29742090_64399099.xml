<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29742090_64399099.cpp">
<comment type="line">//#include "stdc++.h"</comment>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>disable</name><name>:</name><name>4996</name><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>comment</name><name>(</name><name>linker</name><name>,</name> <cpp:literal>"/STACK:336777216"</cpp:literal><name>)</name></cpp:pragma>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<comment type="line">//mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());</comment>
<comment type="line">//typedef tuple&lt;int, int, int&gt; t3;</comment>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ull</name>;</typedef>
<typedef>typedef <type><name>double</name></type> <name>db</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ldb</name>;</typedef>
<typedef>typedef <type><name><name>pair</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<typedef>typedef <type><name><name>pair</name> <argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>pll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name> <argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pli</name>;</typedef>
<typedef>typedef <type><name><name>pair</name> <argument_list type="generic">&lt;<argument><expr><name>db</name></expr></argument>, <argument><expr><name>db</name></expr></argument>&gt;</argument_list></name></type> <name>pdd</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>m1</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOS</name></cpp:macro> <cpp:value>std::ios::sync_with_stdio(false); cin.tie(NULL);cout.tie(NULL);</cpp:value></cpp:define>
<function><specifier>inline</specifier> <type><name>ll</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<if>if<condition>(<expr><name>a</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>b</name></expr>;</return></block></then></if><return>return <expr><call><name>gcd</name><argument_list>(<argument><expr><name>b</name><operator>%</operator><name>a</name></expr></argument>,<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</return>}</block></function>
<function><specifier>inline</specifier> <type><name>ll</name></type> <name>power</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>m</name></decl></parameter>)</parameter_list><block>{<if>if<condition>(<expr><name>n</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if><decl_stmt><decl><type><name>ll</name></type> <name>p</name><init>=<expr><call><name>power</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>n</name><operator>/</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><expr_stmt><expr><name>p</name><operator>=</operator><operator>(</operator><name>p</name><operator>*</operator><name>p</name><operator>)</operator><operator>%</operator><name>m</name></expr>;</expr_stmt><if>if<condition>(<expr><name>n</name><operator>%</operator><literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><operator>(</operator><name>p</name><operator>*</operator><name>a</name><operator>)</operator><operator>%</operator><name>m</name></expr>;</return></block></then><else>else <block type="pseudo"><return>return <expr><name>p</name></expr>;</return></block></else></if> }</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>flush</name></cpp:macro> <cpp:value>fflush(stdout)</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>MOD</name> <init>= <expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>INF</name> <init>= <expr><literal type="number">0x3f3f3f3f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>LL_INF</name> <init>= <expr><literal type="number">0x3f3f3f3f3f3f3f3f</literal></expr></init></decl>;</decl_stmt>
<struct>struct <name>subset</name>
<block>{<public type="default">
    <decl_stmt><decl><type><name>int</name></type> <name>rank</name></decl>,<decl><type ref="prev"/><name>parent</name></decl>;</decl_stmt>
</public>}</block>;</struct>
<function><type><name>int</name></type> <name>find</name><parameter_list>(<parameter><decl><type><name>subset</name></type> <name><name>subsets</name><index>[]</index></name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><name><name>subsets</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>parent</name><operator>==</operator><name>i</name></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><name>i</name></expr>;</return></block></then></if>
    <expr_stmt><expr><name><name>subsets</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>parent</name><operator>=</operator><call><name>find</name><argument_list>(<argument><expr><name>subsets</name></expr></argument>,<argument><expr><name><name>subsets</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name><name>subsets</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>parent</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>Union</name><parameter_list>(<parameter><decl><type><name>subset</name></type> <name><name>subsets</name><index>[]</index></name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><name><name>subsets</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>rank</name><operator>&gt;</operator><name><name>subsets</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><name>rank</name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name><name>subsets</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><name>parent</name><operator>=</operator><name>x</name></expr>;</expr_stmt></block></then>
    <elseif>else <if>if<condition>(<expr><name><name>subsets</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><name>rank</name><operator>&gt;</operator><name><name>subsets</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>rank</name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name><name>subsets</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>parent</name><operator>=</operator><name>y</name></expr>;</expr_stmt></block></then></if></elseif>
    <else>else<block>{
        <expr_stmt><expr><name><name>subsets</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><name>parent</name><operator>=</operator><name>x</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>subsets</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>rank</name><operator>++</operator></expr>;</expr_stmt>
    }</block></else></if>
}</block></function>
<decl_stmt><decl><type><name>int</name></type> <name>cnt</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name>unvisited</name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name><modifier>&amp;</modifier></type><name>s</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>unvisited</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><decl_stmt><decl><type><name><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></name></type> <name>it</name></decl>;</decl_stmt>
    <comment type="line">//cout&lt;&lt;u&lt;&lt;endl;</comment>
    <expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>it</name><operator>=</operator><call><name><name>unvisited</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</init><condition><expr><name>it</name><operator>!=</operator><call><name><name>unvisited</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>)</control>
    <block>{
        <if>if<condition>(<expr><call><name><name>s</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><call><name>m1</name><argument_list>(<argument><expr><name>u</name></expr></argument>,<argument><expr><operator>*</operator><name>it</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>==</operator><call><name><name>s</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <block>{ <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><operator>*</operator><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>it</name><operator>=</operator><call><name><name>unvisited</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else
            <block type="pseudo"><expr_stmt><expr><name>it</name><operator>++</operator></expr>;</expr_stmt></block></else></if>
        <comment type="line">//else</comment>
        <comment type="line">//{</comment>
        <comment type="line">//     s.erase(m1(u,*it));</comment>
        <comment type="line">//     s.erase(m1(*it,u));</comment>
        <comment type="line">//   }</comment>
        
    }</block></for>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><name>IOS</name></expr>;</expr_stmt><comment type="line">//ifstream fin("input.txt");ofstream fout("output.txt");</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>m</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type><name>s</name></decl>;</decl_stmt><decl_stmt><decl><type><name>int</name></type> <name>u</name></decl>,<decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>m</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>u</name><operator>&gt;&gt;</operator><name>v</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>m1</name><argument_list>(<argument><expr><name>u</name></expr></argument>,<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>m1</name><argument_list>(<argument><expr><name>v</name></expr></argument>,<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <comment type="line">//set&lt;int&gt;unvisited;</comment>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><call><name><name>unvisited</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name>components</name></decl>;</decl_stmt>
    <while>while<condition>(<expr><operator>!</operator><call><name><name>unvisited</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{
        <expr_stmt><expr><name>cnt</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><operator>(</operator><operator>*</operator><operator>(</operator><call><name><name>unvisited</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// cout&lt;&lt;"OK"&lt;&lt;endl;</comment>
        <expr_stmt><expr><call><name><name>components</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></while>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name><name>components</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
