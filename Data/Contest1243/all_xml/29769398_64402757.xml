<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29769398_64402757.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>


<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
  <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>a1</name></decl> ;</decl_stmt>
  <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>a1</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></type> <name>vec</name></decl>;</decl_stmt>
  <for>for<control>(<init><decl><type><name>int</name></type> <name>x</name> <init>=<expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>x</name><operator>&lt;=</operator><call><name>sqrt</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>a1</name> <operator>%</operator> <name>x</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{
      <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>a1</name> <operator>/=</operator> <name>x</name></expr>;</expr_stmt>
    }</block></while>

    <if>if<condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><then><block>{
      <expr_stmt><expr><call><name><name>vec</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></for>
  <if>if<condition>(<expr><name>a1</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name><name>vec</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
  <if>if<condition>(<expr><call><name><name>vec</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>a</name></expr>;</expr_stmt></block></then>
  <elseif>else <if>if<condition>(<expr><call><name><name>vec</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>vec</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block></then></if></elseif>
  <else>else <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
