<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29737725_64402690.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<using>using <name>ll</name> <init>= <type><name>long</name> <name>long</name></type></init>;</using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>sz</name> <init>= <expr><literal type="number">1e5</literal> <operator>+</operator> <literal type="number">100</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>mod</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>set</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>set</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>G</name><index>[<expr><name>sz</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>ar</name><index>[<expr><name>sz</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>fl</name><index>[<expr><name>sz</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>bfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>queue</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>q</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>er</name></decl>;</decl_stmt>
    <while>while <condition>(<expr><call><name><name>q</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="boolean">false</literal></expr>)</condition> <block>{
        <expr_stmt><expr><name>u</name> <operator>=</operator> <call><name><name>q</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>er</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>fl</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>v</name><range>: <expr><name>st</name></expr></range></decl></init>)</control> <block>{
            <if>if <condition>(<expr><name><name>G</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>find</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>G</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>er</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>v</name><range>: <expr><name>er</name></expr></range></decl></init>)</control> <block>{
            <expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></while>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{

    <while>while <condition>(<expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name></expr>)</condition> <block>{

        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ar</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>ar</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>fl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>fl</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
            <expr_stmt><expr><name><name>G</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <while>while <condition>(<expr><name>m</name><operator>--</operator></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
            <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>x</name> <operator>&gt;&gt;</operator> <name>y</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>G</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>G</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ar</name><index>[<expr><name>x</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ar</name><index>[<expr><name>y</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
        }</block></while>

        <expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
            <if>if <condition>(<expr><name><name>ar</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>

        <while>while <condition>(<expr><call><name><name>st</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="boolean">false</literal></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>u</name> <init>= <expr><operator>*</operator><call><name><name>st</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>c</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>bfs</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>

        <decl_stmt><decl><type><name><name>set</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>ans</name></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
            <if>if <condition>(<expr><operator>!</operator><name><name>fl</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>fl</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>++</operator><name>c</name></expr>;</expr_stmt></block></then></if>
            <expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name><name>fl</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><call><name><name>ans</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>-</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>

        <expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <literal type="string">"-----\n"</literal></expr>;</expr_stmt>
    }</block></while>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
