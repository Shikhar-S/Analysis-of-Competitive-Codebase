<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29727803_64410410.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>forn</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>for(int i=0;i&lt;n;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>forna</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>for(int i=a;i&lt;n;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOS</name></cpp:macro> <cpp:value>ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro> <cpp:value>1e9+7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ss</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INF</name></cpp:macro> <cpp:value>1e9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX</name></cpp:macro> <cpp:value>100000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ya</name></cpp:macro> <cpp:value>cout&lt;&lt;"YES"&lt;&lt;endl;continue;</cpp:value></cpp:define>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<function_decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>p</name><parameter_list>(<parameter><decl><type><name>MAX</name></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name><name>set</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>count</name><index>[<expr><name>MAX</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>IOS</name>
	<name>int</name></type> <name>q</name></decl>;</decl_stmt><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>q</name></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>q</name><operator>--</operator></expr>)</condition><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>,<decl><type ref="prev"/><name>t</name></decl>;</decl_stmt><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>s</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name></type> <name>ss</name></decl>,<decl><type ref="prev"/><name>tt</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>prob</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>trans</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name><name>c</name><index>[<expr><literal type="number">26</literal></expr>]</index></name><init>=<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
		<macro><name>forn</name><argument_list>(<argument>i</argument>,<argument>n</argument>)</argument_list></macro><block>{
			<expr_stmt><expr><name><name>c</name><index>[<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>c</name><index>[<expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
		}</block>
		<decl_stmt><decl><type><name>int</name></type> <name>f</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<macro><name>forn</name><argument_list>(<argument>i</argument>,<argument><literal type="number">26</literal></argument>)</argument_list></macro><block>{
			<if>if<condition>(<expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name> <operator>%</operator><literal type="number">2</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"NO"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>f</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt><break>break;</break>
			}</block></then></if>
		}</block>
		<if>if<condition>(<expr><name>f</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"YES"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>ff</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt><decl_stmt><decl><type><name>char</name></type> <name>cc</name></decl>;</decl_stmt><decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>
		<while>while<condition>(<expr><literal type="boolean">true</literal></expr>)</condition><block>{
			<expr_stmt><expr><name>ff</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<macro><name>forn</name><argument_list>(<argument>i</argument>,<argument>n</argument>)</argument_list></macro><block>{
				<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
				<expr_stmt><expr><name>cc</name> <operator>=</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>ff</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>k</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
				<break>break;</break>
			}</block>
			<if>if<condition>(<expr><name>ff</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
			<macro><name>forn</name><argument_list>(<argument>i</argument>,<argument>n</argument>)</argument_list></macro><block>{
				<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
				<if>if<condition>(<expr><name>k</name><operator>==</operator><name>i</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
				<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>cc</name></expr>)</condition><then><block>{
					<expr_stmt><expr><call><name><name>trans</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>k</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>t</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>t</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>cc</name></expr>;</expr_stmt>
					<break>break;</break>
				}</block></then></if>
				<if>if<condition>(<expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name>cc</name></expr>)</condition><then><block>{
					<expr_stmt><expr><call><name><name>trans</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>trans</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>k</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>t</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>t</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>cc</name></expr>;</expr_stmt>
					<break>break;</break>
				}</block></then></if>
			}</block>


		}</block></while>
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name><name>trans</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
        <macro><name>forn</name><argument_list>(<argument>i</argument>,<argument>trans.size()</argument>)</argument_list></macro><block>{
				<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>trans</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ff</name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name><name>trans</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ss</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
			}</block>


	}</block></while>
}</block></function>
</unit>
