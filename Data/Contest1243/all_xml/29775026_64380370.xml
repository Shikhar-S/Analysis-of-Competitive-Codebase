<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29775026_64380370.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (ll i=x;i&lt;=y;i++)</cpp:value></cpp:define>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>q</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>q</name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>q</name><operator>--</operator></expr>)</condition>
	<block>{
		<decl_stmt><decl><type><name>string</name></type> <name>s1</name></decl>,<decl><type ref="prev"/><name>s2</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>x</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>y</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>cnt</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>s1</name><operator>&gt;&gt;</operator><name>s2</name></expr>;</expr_stmt>
		<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n-<literal type="number">1</literal></argument>)</argument_list></macro>
		<block>{
			<if>if <condition>(<expr><name><name>s1</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name><name>s2</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>
				<if>if <condition>(<expr><name>cnt</name><operator>==</operator><literal type="number">3</literal></expr>)</condition><then>
				<block>{
					<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
					<break>break;</break>
				}</block></then></if>
				<if>if <condition>(<expr><name>x</name><operator>==</operator><name>y</name></expr>)</condition><then>
				<block>{
					<expr_stmt><expr><name>x</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
				}</block></then>
				<else>else
				<block>{
					<expr_stmt><expr><name>y</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
				}</block></else></if>
			}</block></then></if>
		}</block>
		<if>if <condition>(<expr><name>cnt</name><operator>==</operator><literal type="number">3</literal></expr>)</condition><then>
		<block>{
			<continue>continue;</continue>
		}</block></then></if>
		<if>if <condition>(<expr><name>cnt</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
			<continue>continue;</continue>
		}</block></then>
		<else>else
		<block>{
			<if>if <condition>(<expr><name><name>s1</name><index>[<expr><name>x</name></expr>]</index></name><operator>==</operator><name><name>s1</name><index>[<expr><name>y</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>s2</name><index>[<expr><name>y</name></expr>]</index></name><operator>==</operator><name><name>s2</name><index>[<expr><name>x</name></expr>]</index></name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Yes"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
			}</block></then>
			<else>else
			<block>{
				<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
			}</block></else></if>
		}</block></else></if>
	}</block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
