<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29749005_64410749.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name> <init>= <expr><literal type="number">1e5</literal> <operator>+</operator> <literal type="number">15</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>fac</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>getfac</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <call><name>int</name><argument_list>(<argument><expr><name>x</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
        <if>if <condition>(<expr><name>x</name> <operator>%</operator> <name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>fac</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></for>
}</block></function>

<decl_stmt><decl><type><name>int</name></type> <name><name>f</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>init</name><parameter_list>()</parameter_list> <block>{
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>maxn</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
        <expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
    }</block></for>
}</block></function>

<function><type><name>int</name></type> <name>find</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name><name>f</name><index>[<expr><name>x</name></expr>]</index></name> <operator>==</operator> <name>x</name></expr>)</condition><then> <block>{
        <return>return <expr><name>x</name></expr>;</return>
    }</block></then></if>
    <return>return <expr><name><name>f</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>find</name><argument_list>(<argument><expr><name><name>f</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>merge</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>find</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name>y</name> <operator>=</operator> <call><name>find</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>x</name> <operator>!=</operator> <name>y</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>f</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>

<function><type><name>void</name></type> <name>fac2</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><literal type="number">1LL</literal> <operator>*</operator> <name>i</name> <operator>*</operator> <name>i</name> <operator>&lt;=</operator> <name>x</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <if>if <condition>(<expr><name>x</name> <operator>%</operator> <name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>fac</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <while>while <condition>(<expr><name>x</name> <operator>%</operator> <name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>/</operator> <name>i</name></expr>;</expr_stmt></block></while>
    }</block></for>
    <if>if<condition>(<expr><name>x</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><then><block>{
        <expr_stmt><expr><call><name><name>fac</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>

<function><type><name>bool</name></type> <name>isprime</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><literal type="number">1LL</literal> <operator>*</operator> <name>i</name> <operator>*</operator> <name>i</name> <operator>&lt;=</operator> <name>x</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
        <if>if<condition>(<expr><name>x</name> <operator>%</operator> <name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        }</block></then></if>
    }</block></for>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>check</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><call><name><name>fac</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><name>n</name></expr>;</return>
    }</block></then></if>
    <if>if <condition>(<expr><call><name><name>fac</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>isprime</name><argument_list>(<argument><expr><name><name>fac</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><name><name>fac</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
    }</block></then></if>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
    <if>if<condition>(<expr><call><name>isprime</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>n</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><call><name>fac2</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if<condition>(<expr><call><name><name>fac</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then><block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>fac</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">90</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
        <expr_stmt><expr><call><name><name>fac</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>getfac</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>i</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{
            <for>for <control>(<init><decl><type><name>auto</name></type> <name>e</name><range>:<expr><name>fac</name></expr></range></decl></init>)</control> <block>{
                <if>if <condition>(<expr><name>j</name> <operator>+</operator> <name>e</name> <operator>&gt;</operator> <name>i</name></expr>)</condition><then> <block>{
                    <break>break;</break>
                }</block></then></if>
                <expr_stmt><expr><call><name>merge</name><argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>j</name> <operator>+</operator> <name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></for>
        <decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>i</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{
            <if>if <condition>(<expr><name><name>f</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>j</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><operator>++</operator><name>cnt</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"i = "</literal> <operator>&lt;&lt;</operator> <name>i</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name>cnt</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>auto</name></type> <name>e</name><range>:<expr><name>fac</name></expr></range></decl></init>)</control> <block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>e</name> <operator>&lt;&lt;</operator> <literal type="char">','</literal></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>check</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>cnt</name></expr>)</condition><then> <block>{
            <break>break;</break>
        }</block></then></if>
    }</block></for>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
<comment type="line">//1,2,3,2,5,1,7,2,3,1,11</comment>

</unit>
