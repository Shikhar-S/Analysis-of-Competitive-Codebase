<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29762658_64394282.cpp">    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX</name></cpp:macro> <cpp:value>10e15+1</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD</name></cpp:macro> <cpp:value>998244353</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>for(int i=a;i&lt;b;i++)</cpp:value></cpp:define>
    <using>using <namespace>namespace <name>std</name>;</namespace></using>
    <typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
    <typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>vll</name>;</typedef>
    <typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>
    <typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>pll</name>;</typedef>
    <typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>double</name></expr></argument>,<argument><expr><name>double</name></expr></argument>&gt;</argument_list></name></type> <name>ii</name>;</typedef>
    <typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pll</name></expr></argument>&gt;</argument_list></name></type> <name>vpll</name>;</typedef>
    <decl_stmt><decl><type><name>ll</name></type> <name>N</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>ll</name></type> <name>M</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>ll</name></type> <name>Q</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>ll</name></type> <name>T</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>vll</name></type> <name>vl</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>string</name></type> <name>s1</name></decl>,<decl><type ref="prev"/><name>s2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>cunt</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>queue</name><argument_list type="generic">&lt;<argument><expr><name>pll</name></expr></argument>&gt;</argument_list></name></type> <name>ans</name></decl>;</decl_stmt>
    <function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>T</name></expr>;</expr_stmt>
        <macro><name>FOR</name><argument_list>(<argument>k</argument>, <argument><literal type="number">0</literal></argument>, <argument>T</argument>)</argument_list></macro> <block>{
            <expr_stmt><expr><call><name><name>cunt</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>N</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>s1</name> <operator>&gt;&gt;</operator> <name>s2</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>cunt</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <macro><name>FOR</name><argument_list>(<argument>i</argument>, <argument><literal type="number">0</literal></argument>, <argument>N</argument>)</argument_list></macro> <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><name><name>s1</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><name><name>s2</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>cunt</name><index>[<expr><name>a</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>cunt</name><index>[<expr><name>b</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
            }</block>
            <decl_stmt><decl><type><name>bool</name></type> <name>se</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
            <macro><name>FOR</name><argument_list>(<argument>i</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">200</literal></argument>)</argument_list></macro> <block>{
                <if>if <condition>(<expr><name><name>cunt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>%</operator> <literal type="number">2</literal> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>se</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt></block></then></if>
            }</block>
            <if>if <condition>(<expr><operator>!</operator><name>se</name></expr>)</condition><then> <block>{<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>}</block></then>
            <else>else <block>{
                <macro><name>FOR</name><argument_list>(<argument>i</argument>, <argument><literal type="number">0</literal></argument>, <argument>N</argument>)</argument_list></macro> <block>{
                    <if>if <condition>(<expr><name><name>s1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>s2</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>bool</name></type> <name>encon</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
                        <macro><name>FOR</name><argument_list>(<argument>j</argument>, <argument>i + <literal type="number">1</literal></argument>, <argument>N</argument>)</argument_list></macro> <block>{
                            <if>if <condition>(<expr><name><name>s1</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name><name>s1</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block>{
                                <expr_stmt><expr><name>encon</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                                <decl_stmt><decl><type><name>pll</name></type> <name>mien</name><argument_list>(<argument><expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
                                <decl_stmt><decl><type><name>char</name></type> <name>mient</name><init>=<expr><name><name>s1</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                                <expr_stmt><expr><name><name>s1</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><name><name>s2</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
                                <expr_stmt><expr><name><name>s2</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>mient</name></expr>;</expr_stmt>
                                <expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>mien</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <break>break;</break>
                            }</block></then></if>

                        }</block>
                        <if>if <condition>(<expr><operator>!</operator><name>encon</name></expr>)</condition><then> <block>{
                            <macro><name>FOR</name><argument_list>(<argument>j</argument>, <argument>i + <literal type="number">1</literal></argument>, <argument>N</argument>)</argument_list></macro> <block>{
                                <if>if <condition>(<expr><name><name>s2</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name><name>s1</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block>{
                                    <decl_stmt><decl><type><name>pll</name></type> <name>miena</name><argument_list>(<argument><expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
                                    <decl_stmt><decl><type><name>pll</name></type> <name>mienb</name><argument_list>(<argument><expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
                                    <decl_stmt><decl><type><name>char</name></type> <name>mient</name><init>=<expr><name><name>s1</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                                    <expr_stmt><expr><name><name>s1</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><name><name>s2</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
                                    <expr_stmt><expr><name><name>s2</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><name>mient</name></expr>;</expr_stmt>
                                    <expr_stmt><expr><name>mient</name><operator>=</operator><name><name>s1</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
                                    <expr_stmt><expr><name><name>s1</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><name><name>s2</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
                                    <expr_stmt><expr><name><name>s2</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>mient</name></expr>;</expr_stmt>
                                    <expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>miena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    <expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>mienb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    <break>break;</break>
                                }</block></then></if>
                            }</block>
                        }</block></then></if>
                    }</block></then></if>
                }</block>
                <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Yes"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name><name>ans</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
                <while>while<condition>(<expr><operator>!</operator><call><name><name>ans</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{
                    <decl_stmt><decl><type><name>pll</name></type> <name>mien</name> <init>= <expr><call><name><name>ans</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>mien</name><operator>.</operator><name>first</name></name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal> <operator>&lt;&lt;</operator> <name><name>mien</name><operator>.</operator><name>second</name></name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
                }</block></while>
            }</block></else></if>

        }</block>
    }</block></function>

</unit>
