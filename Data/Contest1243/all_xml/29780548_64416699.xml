<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29780548_64416699.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name> <init>= <expr><literal type="number">100010</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxm</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>;</decl_stmt>

<struct>struct <name>node</name> <block>{<public type="default">
  <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>z</name></decl>;</decl_stmt>
</public>}</block> <decl><name><name>ans</name><index>[<expr><name>maxm</name> <operator>+</operator> <literal type="number">10</literal></expr>]</index></name></decl>;</struct>

<struct>struct <name>edge</name> <block>{<public type="default">
  <decl_stmt><decl><type><name>int</name></type> <name>v</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>edge</name> <modifier>*</modifier></type><name>nxt</name></decl>;</decl_stmt>
  <constructor><name>edge</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_v</name></decl></parameter>, <parameter><decl><type><name>edge</name> <modifier>*</modifier></type><name>_nxt</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>v</name><argument_list>(<argument><expr><name>_v</name></expr></argument>)</argument_list></call>, <call><name>nxt</name><argument_list>(<argument><expr><name>_nxt</name></expr></argument>)</argument_list></call> </member_init_list><block>{}</block></constructor>
</public>}</block> <decl><modifier>*</modifier><name><name>fi</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</struct>

<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></name></type> <name>map</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>node</name></expr></argument>&gt;</argument_list></name></name></type> <name><name>vec</name><index>[<expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>maxm</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>g</name><index>[<expr><name>maxm</name> <operator>+</operator> <literal type="number">10</literal></expr>]</index><index>[<expr><name>maxn</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>cnt</name><index>[<expr><name>maxm</name> <operator>+</operator> <literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>f</name><index>[<expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>maxm</name></expr>]</index></name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt> <decl_stmt><decl><specifier>static</specifier> <type><name>long</name> <name>long</name></type> <name>ans</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%I64d"</literal></expr></argument>, <argument><expr><name><name>g</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name><name>g</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{
      <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%I64d"</literal></expr></argument>, <argument><expr><name><name>g</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>map</name><index>[<expr><name><name>g</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>i</name></expr><operator>,</operator> <expr><name>ans</name> <operator>+=</operator> <name><name>g</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr><operator>,</operator> <expr><name><name>cnt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>g</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></for>
  }</block></for>
  <if>if <condition>(<expr><name>ans</name> <operator>%</operator> <name>n</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"No"</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">0</literal></expr>;</return></block></then></if>
  <expr_stmt><expr><name>ans</name> <operator>/=</operator> <name>n</name></expr><operator>,</operator> <expr><name><name>f</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
    <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name><name>g</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>flag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>t</name> <init>= <expr><name>ans</name> <operator>-</operator> <operator>(</operator><name><name>cnt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>g</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><operator>!</operator><call><name><name>map</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><name>t</name> <operator>!=</operator> <name><name>g</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>map</name><index>[<expr><name>t</name></expr>]</index></name> <operator>==</operator> <name>i</name><operator>)</operator></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
      <decl_stmt><decl><type><name>int</name></type> <name>sta</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><name><name>map</name><index>[<expr><name>t</name></expr>]</index></name></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>!=</operator> <name>i</name></expr>;</condition> <incr><expr><name>k</name> <operator>=</operator> <name><name>map</name><index>[<expr><name>t</name></expr>]</index></name></expr></incr>)</control> <block>{
        <expr_stmt><expr><name>t</name> <operator>+=</operator> <name>ans</name> <operator>-</operator> <name><name>cnt</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
        <if>if <condition>(<expr><operator>!</operator><call><name><name>map</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><operator>(</operator><name>sta</name> <operator>&gt;&gt;</operator> <name>k</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><then> <block>{ <expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <break>break;</break> }</block></then></if>
        <expr_stmt><expr><name>sta</name> <operator>|=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>k</name><operator>)</operator></expr>;</expr_stmt>
      }</block></for>
      <if>if <condition>(<expr><name>t</name> <operator>==</operator> <name><name>g</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>flag</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>t</name> <operator>=</operator> <name>ans</name> <operator>-</operator> <operator>(</operator><name><name>cnt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>g</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator></expr><operator>,</operator> <expr><name><name>vec</name><index>[<expr><name>sta</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><operator>(</operator><name>node</name><operator>)</operator><block>{<expr><name><name>map</name><index>[<expr><name>t</name></expr>]</index></name></expr>, <expr><name>t</name></expr>, <expr><name>i</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><name><name>map</name><index>[<expr><name>t</name></expr>]</index></name></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>!=</operator> <name>i</name></expr>;</condition> <incr><expr><name>k</name> <operator>=</operator> <name><name>map</name><index>[<expr><name>t</name></expr>]</index></name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>t</name> <operator>+=</operator> <name>ans</name> <operator>-</operator> <name><name>cnt</name><index>[<expr><name>k</name></expr>]</index></name></expr><operator>,</operator> <expr><name><name>vec</name><index>[<expr><name>sta</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><operator>(</operator><name>node</name><operator>)</operator><block>{<expr><name><name>map</name><index>[<expr><name>t</name></expr>]</index></name></expr>, <expr><name>t</name></expr>, <expr><name>k</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
        <expr_stmt><expr><name><name>f</name><index>[<expr><name>sta</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      }</block></then></if>
    }</block></for>
  }</block></for>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>s</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>s</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>n</name><operator>)</operator></expr>;</condition> <incr><expr><operator>++</operator><name>s</name></expr></incr>)</control> <block type="pseudo"><if>if <condition>(<expr><operator>!</operator><name><name>f</name><index>[<expr><name>s</name></expr>]</index></name></expr>)</condition><then> <block>{
    <for>for <control>(<init><decl><type><name>int</name></type> <name>u</name> <init>= <expr><name>s</name></expr></init></decl>;</init> <condition><expr><name>u</name></expr>;</condition> <incr><expr><name>u</name> <operator>=</operator> <operator>(</operator><name>u</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <name>s</name></expr></incr>)</control> <block>{
      <if>if <condition>(<expr><name><name>f</name><index>[<expr><name>u</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>f</name><index>[<expr><name>s</name> <operator>^</operator> <name>u</name></expr>]</index></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>fi</name><index>[<expr><name>s</name></expr>]</index></name> <operator>=</operator> <operator>new</operator> <call><name>edge</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name><name>fi</name><index>[<expr><name>s</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>fi</name><index>[<expr><name>s</name></expr>]</index></name> <operator>=</operator> <operator>new</operator> <call><name>edge</name><argument_list>(<argument><expr><name>s</name> <operator>^</operator> <name>u</name></expr></argument>, <argument><expr><name><name>fi</name><index>[<expr><name>s</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>f</name><index>[<expr><name>s</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <break>break;</break>
      }</block></then></if>
    }</block></for>
  }</block></then></if></block></for>
  <if>if <condition>(<expr><operator>!</operator><name><name>f</name><index>[<expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>n</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><return>return <expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"No"</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">0</literal></expr>;</return></block></then></if>
  <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>n</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"Yes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d\n"</literal></expr></argument>, <argument><expr><name><operator>::</operator><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>, <argument><expr><name><operator>::</operator><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>z</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>)</parameter_list> <block>{
  <for>for <control>(<init><decl><type><name>auto</name></type> <name>i</name> <range>: <expr><name><name>vec</name><index>[<expr><name>u</name></expr>]</index></name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><name><name>ans</name><index>[<expr><name><name>i</name><operator>.</operator><name>x</name></name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block></for>
  <for>for <control>(<init><decl><type><name>edge</name> <modifier>*</modifier></type><name>i</name> <init>= <expr><name><name>fi</name><index>[<expr><name>u</name></expr>]</index></name></expr></init></decl>;</init> <condition><expr><name>i</name></expr>;</condition> <incr><expr><name>i</name> <operator>=</operator> <name><name>i</name><operator>-&gt;</operator><name>nxt</name></name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name><name>i</name><operator>-&gt;</operator><name>v</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
}</block></function>
</unit>
