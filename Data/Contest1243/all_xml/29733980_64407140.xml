<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29733980_64407140.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>read</name></cpp:macro> <cpp:value>FILE *fp;\
fp=freopen("testcase.txt","r",stdin);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ull</name></cpp:macro> <cpp:value>unsigned long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sf</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%I64d",&amp;n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pf</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>printf("%I64d\n",n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>loop</name></cpp:macro> <cpp:value>for(long long i=0;i&lt;n;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lp</name><parameter_list>(<parameter><type><name>b</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(long long i=b;i&lt;=n;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>push_back(n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>srt</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>sort(v.begin(),v.end())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rvs</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>sort(v.begin(), v.end(), greater&lt;long long&gt;());</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>make_pair(a,b);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fio</name></cpp:macro> <cpp:value>ios::sync_with_stdio(false); cin.tie(),cout.tie();</cpp:value></cpp:define>
<function><type><name>bool</name></type> <name>sortbysec</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>,
               <parameter><decl><type><specifier>const</specifier> <name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{
    <return>return <expr><operator>(</operator><name><name>a</name><operator>.</operator><name>second</name></name> <operator>&lt;</operator> <name><name>b</name><operator>.</operator><name>second</name></name><operator>)</operator></expr>;</return>
}</block></function>
<class>class <name>team</name>
<block>{<private type="default">
</private><public>public:
    <decl_stmt><decl><type><name>ll</name></type> <name>sol</name></decl>,<decl><type ref="prev"/><name>pen</name></decl>,<decl><type ref="prev"/><name>sub</name></decl>,<decl><type ref="prev"/><name>tpen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>v</name></decl>;</decl_stmt>
</public>}</block>;</class>
<function><type><name>string</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>string</name></type> <name>st1</name></decl></parameter>,<parameter><decl><type><name>string</name></type> <name>st2</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>r</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>string</name></type> <name>ans</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">3000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name><init>=<expr><literal type="number">2999</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
    <block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>x</name><init>=<expr><name><name>st1</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ll</name></type> <name>y</name><init>=<expr><name><name>st2</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ll</name></type> <name>z</name><init>=<expr><name>x</name><operator>+</operator><name>y</name><operator>+</operator><name>r</name></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>z</name><operator>&gt;=</operator><literal type="number">10</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>r</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
        }</block></then>
        <else>else
            <block type="pseudo"><expr_stmt><expr><name>r</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></else></if>
        <expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>z</name><operator>%</operator><literal type="number">10</literal><operator>)</operator><operator>+</operator><literal type="char">'0'</literal></expr>;</expr_stmt>
    }</block></for>
    <comment type="line">//cout&lt;&lt;ans&lt;&lt;endl;;</comment>
    <return>return <expr><name>ans</name></expr>;</return>
}</block></function>
<comment type="line">// C++ program to print all primes smaller than or equal to</comment>
<comment type="line">// n using Sieve of Eratosthenes</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>bool</name></type> <name><name>prime</name><index>[<expr><literal type="number">1000000</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>SieveOfEratosthenes</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{
	<comment type="line">// Create a boolean array "prime[0..n]" and initialize</comment>
	<comment type="line">// all entries it as true. A value in prime[i] will</comment>
	<comment type="line">// finally be false if i is Not a prime, else true.</comment>

	<for>for <control>(<init><decl><type><name>ll</name></type> <name>p</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>p</name><operator>*</operator><name>p</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<comment type="line">// If prime[p] is not changed, then it is a prime</comment>
		<if>if <condition>(<expr><name><name>prime</name><index>[<expr><name>p</name></expr>]</index></name> <operator>==</operator> <literal type="boolean">false</literal></expr>)</condition><then>
		<block>{
			<comment type="line">// Update all multiples of p</comment>
			<for>for <control>(<init><decl><type><name>ll</name></type> <name>i</name><init>=<expr><name>p</name><operator>*</operator><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>p</name></expr></incr>)</control>
				<block type="pseudo"><expr_stmt><expr><name><name>prime</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt></block></for>
		}</block></then></if>
	}</block></for>

	<comment type="line">// Print all prime numbers</comment>

}</block></function>

<comment type="line">// Driver Program to test above function</comment>


<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{

<decl_stmt><decl><type><name>ll</name></type> <name>q</name></decl>;</decl_stmt>
<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>q</name></expr>;</expr_stmt>
<while>while<condition>(<expr><name>q</name><operator>--</operator></expr>)</condition>
<block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sf</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>string</name></type> <name>st1</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>string</name></type> <name>st2</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>st1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>st2</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>c</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>vp</name></decl>;</decl_stmt>
    <macro><name>loop</name></macro>
    <block>{
        <if>if<condition>(<expr><name><name>st1</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name><name>st2</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name>ll</name></type> <name>f</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <for>for<control>(<init><decl><type><name>ll</name></type> <name>j</name><init>=<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
            <block>{
                <if>if<condition>(<expr><name><name>st1</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name><name>st1</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name>c</name><operator>++</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>vp</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name>j</name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>st1</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>st2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>f</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
                    <break>break;</break>
                }</block></then>
                <elseif>else <if>if<condition>(<expr><name><name>st2</name><index>[<expr><name>j</name></expr>]</index></name><operator>==</operator><name><name>st1</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name>c</name><operator>+=</operator><literal type="number">2</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>vp</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name>j</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>vp</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name>j</name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>st1</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>st2</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>st1</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>st2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>f</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
                    <break>break;</break>
                }</block></then></if></elseif></if>
            }</block></for>


        }</block></then></if>
    }</block>
    <decl_stmt><decl><type><name>ll</name></type> <name>fl</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <macro><name>loop</name></macro>
    <block>{
        <if>if<condition>(<expr><name><name>st1</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name><name>st2</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>fl</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <break>break;</break>
        }</block></then></if>
    }</block>
    <if>if<condition>(<expr><name>fl</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"NO\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else
    <block>{
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"YES\n"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>c</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>vp</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld %lld\n"</literal></expr></argument>,<argument><expr><name><name>vp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>F</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name><name>vp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>S</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></else></if>
}</block></while>
}</block></function>




</unit>
