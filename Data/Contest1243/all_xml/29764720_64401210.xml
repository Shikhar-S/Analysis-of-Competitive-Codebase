<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29764720_64401210.cpp"><cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name> <name>(</name><cpp:literal>"unroll-loops"</cpp:literal><name>,</name> <cpp:literal>"no-stack-protector"</cpp:literal><name>,</name> <cpp:literal>"O3"</cpp:literal><name>)</name></cpp:pragma>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>forinc</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=a;i&lt;=b;++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fordec</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=a;i&gt;=b;--i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>forv</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(auto &amp;i:x)</cpp:value></cpp:define>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><literal type="number">1e5</literal> <operator>+</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>fa</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>vis</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>cc</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>d</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>G</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>group</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>E</name></decl>;</decl_stmt>

<function><specifier>inline</specifier> <type><name>int</name></type> <name>find</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
  <return>return <expr><ternary><condition><expr><name><name>fa</name><index>[<expr><name>x</name></expr>]</index></name> <operator>==</operator> <name>x</name></expr> ?</condition><then> <expr><name>x</name></expr> </then><else>: <expr><name><name>fa</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>find</name><argument_list>(<argument><expr><name><name>fa</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
}</block></function>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>bfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{
  <decl_stmt><decl><specifier>static</specifier> <type><name><name>queue</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>q</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>fa</name><index>[<expr><name>s</name></expr>]</index></name> <operator>=</operator> <call><name>find</name><argument_list>(<argument><expr><name>s</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>group</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cc</name><index>[<expr><name>s</name></expr>]</index></name> <operator>=</operator> <name>cnt</name></expr>;</expr_stmt>
  <while>while<condition>(<expr><operator>!</operator><call><name><name>q</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><call><name><name>q</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>auto</name></type> <name>v</name> <range>: <expr><name><name>G</name><index>[<expr><name>x</name></expr>]</index></name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><name><name>vis</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt></block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name>find</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr> ;</condition> <incr><expr><name>i</name> <operator>=</operator> <call><name>find</name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{
      <if>if<condition>(<expr><name><name>vis</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>x</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>fa</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>find</name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name><name>q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name><name>group</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name><name>cc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>cnt</name></expr>;</expr_stmt></block></then></if>
    }</block></for>
  }</block></while>
  <expr_stmt><expr><operator>++</operator><name>cnt</name></expr>;</expr_stmt>
}</block></function>
<decl_stmt><decl><type><name>string</name></type> <name><name>s</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>upd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{
  <for>for<control>(<init><decl><type><name>auto</name></type> <name>j</name> <range>: <expr><name><name>group</name><index>[<expr><name>i</name></expr>]</index></name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><name><name>s</name><index>[<expr><name>id</name></expr>]</index><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block></for>
}</block></function><empty_stmt>;</empty_stmt>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>get2</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{
  <expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>(<expr><name>x</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>x</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then></if>
  <expr_stmt><expr><call><name>get2</name><argument_list>(<argument><expr><name>x</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>id</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>get2</name><argument_list>(<argument><expr><name>x</name> <operator>-</operator> <name>x</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>id</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{
  <if>if<condition>(<expr><name>x</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
    <comment type="block">/*
    upd(j, '0', id);
    for(int i = id + 1 ; i &lt; d ; ++i) upd(j, '0', i);
    */</comment>
  }</block></then>
  <elseif>else <if>if<condition>(<expr><name>x</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
    <comment type="line">//upd(j, '0', id);</comment>
    <expr_stmt><expr><call><name>upd</name><argument_list>(<argument><expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="char">'1'</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">//for(int i = id + 1 ; i &lt; d ; ++i) upd(j, '0', i), upd(j + 1, '0', i);</comment>
  }</block></then></if></elseif>
  <else>else <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>xx</name> <init>= <expr><name>x</name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <comment type="line">//for(int i = 0 ; i &lt; xx ; ++i) upd(j + i, '0', id);</comment>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>xx</name></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>x</name></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>upd</name><argument_list>(<argument><expr><name>j</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="char">'1'</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><call><name>get</name><argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>xx</name></expr></argument>, <argument><expr><name>id</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>get</name><argument_list>(<argument><expr><name>j</name> <operator>+</operator> <name>xx</name></expr></argument>, <argument><expr><name>x</name> <operator>-</operator> <name>xx</name></expr></argument>, <argument><expr><name>id</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></else></if>
}</block></function>

<function><type><name>void</name></type> <name>init</name><parameter_list>()</parameter_list> <block>{
  <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name></expr>;</expr_stmt>
  <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>m</name></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>G</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>G</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>E</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>
  <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>fa</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block></for>
}</block></function>
<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list> <block>{
  <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr> ;</condition> <incr><expr><name>i</name> <operator>=</operator> <call><name>find</name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>bfs</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>

  <expr_stmt><expr><call><name>get2</name><argument_list>(<argument><expr><name>cnt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>d</name><operator>++</operator></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>d</name></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><call><name>get</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cnt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>cnt</name><operator>-</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="string">"\n"</literal></expr>;</expr_stmt>
}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mn</name><init>=<expr><literal type="number">1e6</literal><operator>+</operator><literal type="number">100</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>e</name><index>[<expr><name>mn</name><operator>+</operator><literal type="number">100</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>p</name><index>[<expr><name>mn</name><operator>+</operator><literal type="number">100</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name>np</name></decl>,<decl><type ref="prev"/><name><name>x</name><index>[<expr><name>mn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>y</name><index>[<expr><name>mn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name>res</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>nto</name><parameter_list>()</parameter_list>
<block>{
    <macro><name>forinc</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>mn</argument>)</argument_list></macro> <expr_stmt><expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt>
    <macro><name>forinc</name><argument_list>(<argument>i</argument>,<argument><literal type="number">2</literal></argument>,<argument>mn</argument>)</argument_list></macro> <if>if<condition>(<expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name>i</name></expr>)</condition><then>
    <block>{
        <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">2</literal><operator>*</operator><name>i</name></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>mn</name></expr>;</condition><incr><expr><name>j</name><operator>+=</operator><name>i</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>e</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></for>
    }</block></then></if>
    <expr_stmt><expr><name>np</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
    <macro><name>forinc</name><argument_list>(<argument>i</argument>,<argument><literal type="number">2</literal></argument>,<argument>mn</argument>)</argument_list></macro> <if>if<condition>(<expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name>i</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>p</name><index>[<expr><operator>++</operator><name>np</name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></then></if>
}</block></function>

<function><type><name>void</name></type> <name>phantich</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><name>k</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>n</name><operator>&gt;</operator><literal type="number">1000000</literal></expr>)</condition>
    <block>{
        <while>while<condition>(<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;=</operator><name>n</name><operator>/</operator><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>&amp;&amp;</operator><name>n</name><operator>%</operator><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><literal type="number">0</literal></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block></while>
        <if>if<condition>(<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;</operator><name>n</name><operator>/</operator><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>a</name><operator>=</operator><name>n</name></expr>;</expr_stmt></block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><name>a</name><operator>=</operator><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></else></if>
        <expr_stmt><expr><name><name>x</name><index>[<expr><operator>++</operator><name>k</name></expr>]</index></name><operator>=</operator><name>a</name></expr>;</expr_stmt><expr_stmt><expr><name><name>y</name><index>[<expr><name>k</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
        <while>while<condition>(<expr><name>n</name><operator>%</operator><name>a</name><operator>==</operator><literal type="number">0</literal></expr>)</condition> <block type="pseudo"><expr_stmt><expr><operator>++</operator><name><name>y</name><index>[<expr><name>k</name></expr>]</index></name></expr><operator>,</operator><expr><name>n</name><operator>/=</operator><name>a</name></expr>;</expr_stmt></block></while>
    }</block></while>
    <while>while<condition>(<expr><name>n</name><operator>&gt;</operator><literal type="number">1</literal></expr>)</condition>
    <block>{
        <expr_stmt><expr><name>a</name><operator>=</operator><name><name>e</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>x</name><index>[<expr><operator>++</operator><name>k</name></expr>]</index></name><operator>=</operator><name>a</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>y</name><index>[<expr><name>k</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
        <while>while<condition>(<expr><name>n</name><operator>%</operator><name>a</name><operator>==</operator><literal type="number">0</literal></expr>)</condition> <block type="pseudo"><expr_stmt><expr><operator>++</operator><name><name>y</name><index>[<expr><name>k</name></expr>]</index></name></expr><operator>,</operator><expr><name>n</name><operator>/=</operator><name>a</name></expr>;</expr_stmt></block></while>
    }</block></while>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
  <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

</unit>
