<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29779110_64403887.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ss</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>'\n'</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>inf</name><init>=<expr><literal type="number">1e18</literal></expr></init></decl>;</decl_stmt>
<comment type="block">/*ll power(ll x,ll y)
{
    ll res=1;
    while(y&gt;0)
    {
        if(y%2==1)
            res=(res*x)%mod;
        x=(x*x)%mod;
        y=y/2;
    }
    return res;
}*/</comment>
<decl_stmt><decl><type><name>ll</name></type> <name><name>arr</name><index>[<expr><literal type="number">1000001</literal></expr>]</index></name><init>=<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>t1</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>t1</name></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>t1</name><operator>--</operator></expr>)</condition>
    <block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>,<decl><type ref="prev"/><name>r</name></decl>,<decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name>f</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>,<decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>s</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type><name>v1</name></decl>,<decl><type ref="prev"/><name>v2</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type><name>ans</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>unordered_map</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type><name>mp</name></decl>;</decl_stmt>
        <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
            <block>{
               <expr_stmt><expr><call><name><name>v1</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><block>{<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>,<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
               <expr_stmt><expr><call><name><name>v2</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><block>{<expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr>,<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
               <expr_stmt><expr><name><name>mp</name><index>[<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>++</operator></expr><operator>,</operator><expr><name><name>mp</name><index>[<expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
        <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">25</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <decl_stmt><decl><type><name>char</name></type> <name>ch</name><init>=<expr><literal type="number">97</literal><operator>+</operator><name>i</name></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name><name>mp</name><index>[<expr><name>ch</name></expr>]</index></name><operator>%</operator><literal type="number">2</literal><operator>!=</operator><literal type="number">0</literal></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>f</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
                <break>break;</break>
            }</block></then></if>
        }</block></for>
        <if>if<condition>(<expr><name>f</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
            <continue>continue;</continue>
        }</block></then></if>
        <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>v1</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <if>if<condition>(<expr><name><name>v1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ff</name><operator>==</operator><name><name>v2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ff</name></expr>)</condition><then>
                <block type="pseudo"><continue>continue;</continue></block></then></if>
            <expr_stmt><expr><name>f</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
                <for>for<control>(<init><expr><name>j</name><operator>=</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>j</name><operator>&lt;</operator><call><name><name>v1</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
                <block>{
                    <if>if<condition>(<expr><name><name>v1</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>ff</name><operator>==</operator><name><name>v1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ff</name></expr>)</condition><then>
                    <block>{
                        <expr_stmt><expr><name>f</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
                        <break>break;</break>
                    }</block></then></if>
                }</block></for>
                <if>if<condition>(<expr><name>f</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><block>{<expr><name><name>v1</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>ss</name></expr>,<expr><name><name>v2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ss</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>v1</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>ff</name><operator>=</operator><name><name>v2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ff</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>v2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ff</name><operator>=</operator><name><name>v1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ff</name></expr>;</expr_stmt>
                    <continue>continue;</continue>
                }</block></then></if>
                <for>for<control>(<init><expr><name>j</name><operator>=</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>j</name><operator>&lt;</operator><call><name><name>v2</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
                <block>{
                    <if>if<condition>(<expr><name><name>v2</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>ff</name><operator>==</operator><name><name>v1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ff</name></expr>)</condition><then>
                    <block>{
                        <break>break;</break>
                    }</block></then></if>
                }</block></for>
                <expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><block>{<expr><name><name>v1</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>ss</name></expr>,<expr><name><name>v2</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>ss</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>v1</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>v2</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><block>{<expr><name><name>v1</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>ss</name></expr>,<expr><name><name>v2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ss</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>v1</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>ff</name><operator>=</operator><name><name>v2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ff</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>v2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ff</name><operator>=</operator><name><name>v1</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>ff</name></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Yes"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name><name>ans</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>ans</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ff</name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ss</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></for>
}</block></while>
}</block></function>
</unit>
