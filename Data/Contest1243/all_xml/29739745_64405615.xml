<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29739745_64405615.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name> <init>= <expr><literal type="number">1e2</literal> <operator>+</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<struct>struct <name>node</name>
<block>{<public type="default">
    <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
</public>}</block>      <decl><name><name>P</name><index>[<expr><literal type="number">1000</literal></expr>]</index></name></decl>;</struct>
<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>k</name><operator>--</operator></expr>)</condition>
    <block>{
        <decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>ma</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>s</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><expr_stmt><expr><name><name>ma</name><index>[<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>++</operator></expr><operator>,</operator> <expr><name><name>ma</name><index>[<expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block></for>
        <decl_stmt><decl><type><name>bool</name></type> <name>flag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>char</name></type> <name>i</name> <init>= <expr><literal type="char">'a'</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="char">'z'</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><if>if <condition>(<expr><name><name>ma</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if></block></for>
        <if>if <condition>(<expr><name>flag</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"NO\n"</literal></expr>;</expr_stmt></block></then>
        <else>else
        <block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES\n"</literal></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>mid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block>{
                <if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
                <block>{
                    <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
                    <block>{
                        <if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then>
                        <block>{
                            <expr_stmt><expr><name><name>P</name><index>[<expr><name>mid</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>P</name><index>[<expr><name>mid</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>mid</name><operator>++</operator></expr>;</expr_stmt>
                            <break>break;</break>
                        }</block></then>
                        <elseif>else <if>if <condition>(<expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>t</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then>
                        <block>{
                            <expr_stmt><expr><name><name>P</name><index>[<expr><name>mid</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>P</name><index>[<expr><name>mid</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>t</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>mid</name><operator>++</operator></expr>;</expr_stmt>
                            <break>break;</break>
                        }</block></then></if></elseif>
                        <elseif>else <if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>t</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then>
                        <block>{
                            <expr_stmt><expr><name><name>P</name><index>[<expr><name>mid</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>P</name><index>[<expr><name>mid</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>t</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>mid</name><operator>++</operator></expr>;</expr_stmt>
                            <expr_stmt><expr><name><name>P</name><index>[<expr><name>mid</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>P</name><index>[<expr><name>mid</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>mid</name><operator>++</operator></expr>;</expr_stmt>
                            <break>break;</break>
                        }</block></then></if></elseif>
                        <elseif>else <if>if <condition>(<expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then>
                        <block>{
                            <expr_stmt><expr><name><name>P</name><index>[<expr><name>mid</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>P</name><index>[<expr><name>mid</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>t</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>mid</name><operator>++</operator></expr>;</expr_stmt>
                            <expr_stmt><expr><name><name>P</name><index>[<expr><name>mid</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>P</name><index>[<expr><name>mid</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>t</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>mid</name><operator>++</operator></expr>;</expr_stmt>
                            <break>break;</break>
                        }</block></then></if></elseif></if>
                    }</block></for>
                }</block></then></if>
            }</block></for>
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>mid</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>mid</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
                <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>P</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name><name>P</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></for>
        }</block></else></if>
    }</block></while>
}</block></function>
</unit>
