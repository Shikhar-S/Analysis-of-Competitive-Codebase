<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29766975_64379372.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bitset&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;chrono&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iomanip&gt;</cpp:file></cpp:include>
<comment type="line">//#include &lt;ext/pb_ds/assoc_container.hpp&gt;</comment>
<comment type="line">//#include &lt;ext/pb_ds/tree_policy.hpp&gt;</comment>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<comment type="line">//using namespace __gnu_pbds;</comment>
<comment type="line">//#define ordered_set tree&lt;int, null_type,less&lt;int&gt;, rb_tree_tag,tree_order_statistics_node_update&gt;</comment>


<typedef>typedef <type><name>long</name> <name>long</name> <name>int</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>pll</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>vl</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name></type> <name>vc</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pii</name></expr></argument>&gt;</argument_list></name></type> <name>vii</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pll</name></expr></argument>&gt;</argument_list></name></type> <name>vll</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vi</name></expr></argument>&gt;</argument_list></name></type> <name>vvi</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vl</name></expr></argument>&gt;</argument_list></name></type> <name>vvl</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>prq</name></cpp:macro> <cpp:value>priority_queue&lt;ll&gt;;</cpp:value></cpp:define>

<decl_stmt><decl><type><name>ll</name></type> <name>MOD</name><init>=<expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PI</name></cpp:macro> <cpp:value>3.1415926535897932384626433832795</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>llMAX</name></cpp:macro> <cpp:value>1000000000000000008</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>llMIN</name></cpp:macro> <cpp:value>-1000000000000000008</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>forx</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>j</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=j;i&lt;n;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fory</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>j</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=j;i&gt;=n;i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x.begin(),x.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>s</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fastio</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(false)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>testcase</name></cpp:macro> <cpp:value>int t; cin&gt;&gt;t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEM</name><parameter_list>(<parameter><type><name>xx</name></type></parameter>,<parameter><type><name>yy</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(xx,yy,sizeof(xx))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vbs</name><parameter_list>(<parameter><type><name>xx</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>binary_search(all(xx),x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlb</name><parameter_list>(<parameter><type><name>xx</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>lower_bound(all(xx),x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vub</name><parameter_list>(<parameter><type><name>xx</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>upper_bound(all(xx),x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inpi</name><parameter_list>(<parameter><type><name>xx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%d",&amp;xx)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inpl</name><parameter_list>(<parameter><type><name>xx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%lld",&amp;xx)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inpc</name><parameter_list>(<parameter><type><name>xx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%c",&amp;xx)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inps</name><parameter_list>(<parameter><type><name>xx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%s",&amp;xx)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pri</name><parameter_list>(<parameter><type><name>xx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>printf("%d",xx)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>prl</name><parameter_list>(<parameter><type><name>xx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>printf("%lld",xx)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>prls</name><parameter_list>(<parameter><type><name>xx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>printf("%lld ",xx)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>prle</name><parameter_list>(<parameter><type><name>xx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>printf("%lld\n",xx)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>prc</name><parameter_list>(<parameter><type><name>xx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>printf("%c",xx)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>prs</name></cpp:macro> <cpp:value>printf(" ")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pre</name></cpp:macro> <cpp:value>printf("\n")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>flush</name></cpp:macro> <cpp:value>fflush(stdout)</cpp:value></cpp:define>

<function><type><name>ll</name></type> <name>mul</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>mul_1</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>mul_2</name></decl></parameter>)</parameter_list><block>{ <decl_stmt><decl><type><name>ll</name></type> <name>mul_t</name><init>=<expr><operator>(</operator><operator>(</operator><name>mul_1</name><operator>%</operator><name>MOD</name><operator>)</operator><operator>*</operator><operator>(</operator><name>mul_2</name><operator>%</operator><name>MOD</name><operator>)</operator><operator>+</operator><name>MOD</name><operator>)</operator><operator>%</operator><name>MOD</name></expr></init></decl>;</decl_stmt> <return>return <expr><name>mul_t</name></expr>;</return> }</block></function>
<function><type><name>ll</name></type> <name>mul3</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>mul_1</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>mul_2</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>mul_3</name></decl></parameter>)</parameter_list><block>{ <decl_stmt><decl><type><name>ll</name></type> <name>mul_t</name><init>=<expr><call><name>mul</name><argument_list>(<argument><expr><call><name>mul</name><argument_list>(<argument><expr><name>mul_1</name></expr></argument>,<argument><expr><name>mul_2</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>mul_3</name></expr></argument>)</argument_list></call><operator>%</operator><name>MOD</name></expr></init></decl>;</decl_stmt> <return>return <expr><name>mul_t</name></expr>;</return> }</block></function>
<function><type><name>ll</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>add_1</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>add_2</name></decl></parameter>)</parameter_list><block>{ <decl_stmt><decl><type><name>ll</name></type> <name>add_t</name><init>=<expr><operator>(</operator><operator>(</operator><name>add_1</name><operator>%</operator><name>MOD</name><operator>)</operator><operator>+</operator><operator>(</operator><name>add_2</name><operator>%</operator><name>MOD</name><operator>)</operator><operator>+</operator><name>MOD</name><operator>+</operator><name>MOD</name><operator>)</operator><operator>%</operator><name>MOD</name></expr></init></decl>;</decl_stmt> <return>return <expr><name>add_t</name></expr>;</return> }</block></function>
<function><type><name>ll</name></type> <name>sub</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>sub_1</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>sub_2</name></decl></parameter>)</parameter_list><block>{ <decl_stmt><decl><type><name>ll</name></type> <name>sub_r</name><init>=<expr><literal type="number">1e15</literal></expr></init></decl>;</decl_stmt> <decl_stmt><decl><type><name>ll</name></type> <name>sub_t</name><init>=<expr><operator>(</operator><operator>(</operator><operator>(</operator><name>sub_1</name><operator>+</operator><name>sub_r</name><operator>)</operator><operator>%</operator><name>MOD</name><operator>)</operator><operator>-</operator><operator>(</operator><operator>(</operator><name>sub_2</name><operator>+</operator><name>sub_r</name><operator>)</operator><operator>%</operator><name>MOD</name><operator>)</operator><operator>+</operator><name>sub_r</name><operator>)</operator><operator>%</operator><name>MOD</name></expr></init></decl>;</decl_stmt> <return>return <expr><name>sub_t</name></expr>;</return> }</block></function>
<function><type><name>ll</name></type> <name>power</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>y</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>p</name></decl></parameter>)</parameter_list><block>{ <decl_stmt><decl><type><name>ll</name></type> <name>res</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> <expr_stmt><expr><name>x</name><operator>=</operator><name>x</name><operator>%</operator><name>p</name></expr>;</expr_stmt> <while>while<condition>(<expr><name>y</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><block>{ <if>if<condition>(<expr><name>y</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>res</name><operator>=</operator><operator>(</operator><name>res</name><operator>*</operator><name>x</name><operator>)</operator><operator>%</operator><name>p</name></expr>;</expr_stmt></block></then></if> <expr_stmt><expr><name>y</name><operator>=</operator><name>y</name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt> <expr_stmt><expr><name>x</name><operator>=</operator><operator>(</operator><name>x</name><operator>*</operator><name>x</name><operator>)</operator><operator>%</operator><name>p</name></expr>;</expr_stmt> }</block></while> <return>return <expr><name>res</name></expr>;</return> }</block></function> 
<function><type><name>ll</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>num1</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>num2</name></decl></parameter>)</parameter_list><block>{ <return>return <expr><operator>(</operator><ternary><condition><expr><name>num2</name></expr>?</condition><then><expr><call><name>gcd</name><argument_list>(<argument><expr><name>num2</name></expr></argument>,<argument><expr><name>num1</name><operator>%</operator><name>num2</name></expr></argument>)</argument_list></call></expr></then><else>:<expr><name>num1</name></expr></else></ternary><operator>)</operator></expr>;</return> }</block></function>
<function><type><name>ll</name></type> <name>lcm</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>num1</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>num2</name></decl></parameter>)</parameter_list><block>{ <return>return <expr><literal type="number">1LL</literal><operator>*</operator><operator>(</operator><operator>(</operator><name>num1</name><operator>*</operator><name>num2</name><operator>)</operator><operator>/</operator><call><name>__gcd</name><argument_list>(<argument><expr><name>num1</name></expr></argument>,<argument><expr><name>num2</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return> }</block></function>
<function><type><name>ll</name></type> <name>countbit</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>num</name></decl></parameter>)</parameter_list><block>{ <return>return <expr><literal type="number">1LL</literal><operator>*</operator><operator>(</operator><call><name>__builtin_popcountll</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return> }</block></function>
<function><type><name>ll</name></type> <name>setbit</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>kk</name></decl></parameter>)</parameter_list><block>{ <return>return <expr><literal type="number">1LL</literal><operator>*</operator><operator>(</operator><name>num</name><operator>|</operator><operator>(</operator><literal type="number">1LL</literal><operator>&lt;&lt;</operator><name>kk</name><operator>)</operator><operator>)</operator></expr>;</return> }</block></function>
<function><type><name>ll</name></type> <name>unsetbit</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>kk</name></decl></parameter>)</parameter_list><block>{ <return>return <expr><literal type="number">1LL</literal><operator>*</operator><operator>(</operator><name>num</name><operator>&amp;</operator><operator>~</operator><operator>(</operator><literal type="number">1LL</literal><operator>&lt;&lt;</operator><name>kk</name><operator>)</operator><operator>)</operator></expr>;</return> }</block></function>
<function><type><name>ll</name></type> <name>invertbit</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>kk</name></decl></parameter>)</parameter_list><block>{ <return>return <expr><literal type="number">1LL</literal><operator>*</operator><operator>(</operator><name>num</name><operator>^</operator><operator>(</operator><literal type="number">1LL</literal><operator>&lt;&lt;</operator><name>kk</name><operator>)</operator><operator>)</operator></expr>;</return> }</block></function>
<function><type><name>bool</name></type> <name>kthbit</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>kk</name></decl></parameter>)</parameter_list><block>{ <return>return <expr><name>num</name><operator>&amp;</operator><operator>(</operator><literal type="number">1LL</literal><operator>&lt;&lt;</operator><name>kk</name><operator>)</operator></expr>;</return> }</block></function>
<function><type><name>ll</name></type> <name>zerotrail</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>num</name></decl></parameter>)</parameter_list><block>{ <return>return <expr><literal type="number">1LL</literal><operator>*</operator><operator>(</operator><call><name>__builtin_ctzll</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return> }</block></function>
<function><type><name>ll</name></type> <name>zerobegin</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>num</name></decl></parameter>)</parameter_list><block>{ <return>return <expr><literal type="number">1LL</literal><operator>*</operator><operator>(</operator><call><name>__builtin_clzll</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return> }</block></function>

<decl_stmt><decl><type><name>clock_t</name></type> <name>tim</name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>showtime</name><parameter_list>()</parameter_list><block>{ <expr_stmt><expr><name>tim</name><operator>=</operator><call><name>clock</name><argument_list>()</argument_list></call><operator>-</operator><name>tim</name></expr>;</expr_stmt> <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">" ===&gt; "</literal><operator>&lt;&lt;</operator><operator>(</operator><name>ld</name><operator>)</operator><name>tim</name><operator>/</operator><name>CLOCKS_PER_SEC</name><operator>&lt;&lt;</operator><literal type="string">" seconds\n"</literal></expr>;</expr_stmt> }</block></function>

<decl_stmt><decl><type><name>ll</name></type> <name><name>prime</name><index>[<expr><literal type="number">1000005</literal></expr>]</index></name></decl>;</decl_stmt> 
<function><type><name>void</name></type> <name>sieve</name><parameter_list>()</parameter_list><block>{ <comment type="line">//spf</comment>
    <macro><name>forx</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">1000005</literal></argument>)</argument_list></macro> <expr_stmt><expr><name><name>prime</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt> 
    <for>for<control>(<init><decl><type><name>ll</name></type> <name>p</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><literal type="number">1LL</literal><operator>*</operator><name>p</name><operator>*</operator><name>p</name><operator>&lt;</operator><literal type="number">1000005</literal></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block>{ <if>if<condition>(<expr><name><name>prime</name><index>[<expr><name>p</name></expr>]</index></name><operator>==</operator><name>p</name></expr>)</condition><then> <block>{ <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name><init>=<expr><literal type="number">1LL</literal><operator>*</operator><name>p</name><operator>*</operator><name>p</name></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">1000005</literal></expr>;</condition> <incr><expr><name>i</name><operator>+=</operator><name>p</name></expr></incr>)</control> <block type="pseudo"><if>if<condition>(<expr><name><name>prime</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name>i</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>prime</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>p</name></expr>;</expr_stmt></block></then></if></block></for> }</block></then></if> }</block></for> 
    <return>return;</return> 
}</block></function> 
<function><type><name>bool</name></type> <name>isPrime</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>pri</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><name>pri</name><operator>==</operator><literal type="number">1</literal><operator>||</operator><name>pri</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
    <if>if<condition>(<expr><name><name>prime</name><index>[<expr><name>pri</name></expr>]</index></name><operator>==</operator><name>pri</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
<function><type><name>vl</name></type> <name>alldiv</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>num</name></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name>vl</name></type> <name>prDiv</name></decl>;</decl_stmt> <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><literal type="number">1LL</literal><operator>*</operator><name>i</name><operator>*</operator><name>i</name><operator>&lt;=</operator><name>num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{ <if>if<condition>(<expr><name>num</name><operator>%</operator><name>i</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{ <expr_stmt><expr><call><name><name>prDiv</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <if>if<condition>(<expr><name>i</name><operator>!=</operator><operator>(</operator><name>num</name><operator>/</operator><name>i</name><operator>)</operator></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>prDiv</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>num</name><operator>/</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if> }</block></then></if> }</block></for>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name>prDiv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>prDiv</name></expr>;</return>
}</block></function>
<function><type><name>vl</name></type> <name>prdiv</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>num</name></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name>vl</name></type> <name>prDiv</name></decl>;</decl_stmt> <while>while<condition>(<expr><name>num</name><operator>!=</operator><literal type="number">1</literal></expr>)</condition><block>{ <expr_stmt><expr><call><name><name>prDiv</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name><name>prime</name><index>[<expr><name>num</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <decl_stmt><decl><type><name>ll</name></type> <name>prtemp</name><init>=<expr><name><name>prime</name><index>[<expr><name>num</name></expr>]</index></name></expr></init></decl>;</decl_stmt> <while>while<condition>(<expr><name>num</name><operator>%</operator><name>prtemp</name><operator>==</operator><literal type="number">0</literal></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>num</name><operator>/=</operator><name>prtemp</name></expr>;</expr_stmt></block></while> }</block></while>
    <return>return <expr><name>prDiv</name></expr>;</return>
}</block></function>



<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><name>fastio</name></expr>;</expr_stmt> <comment type="line">//tim=clock();</comment>
    <expr_stmt><expr><name>testcase</name></expr>;</expr_stmt>
    <comment type="line">//ll t=1;</comment>
    <macro><name>forx</name><argument_list>(<argument>T</argument>,<argument><literal type="number">1</literal></argument>,<argument><literal type="number">1</literal>+t</argument>)</argument_list></macro><block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>string</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>a</name><operator>&gt;&gt;</operator><name>b</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ll</name></type> <name>c</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>flg</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>vl</name></type> <name>d</name></decl>;</decl_stmt>
        <macro><name>forx</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro><block>{
            <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name>c</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
        }</block>
        <if>if<condition>(<expr><name>c</name><operator>!=</operator><literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No\n"</literal></expr>;</expr_stmt></block></then>
        <else>else<block>{
            <if>if<condition>(<expr><name>c</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>flg</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
            <if>if<condition>(<expr><name><name>a</name><index>[<expr><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>==</operator><name><name>a</name><index>[<expr><name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>&amp;&amp;</operator><name><name>b</name><index>[<expr><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>==</operator><name><name>b</name><index>[<expr><name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>flg</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
            <if>if<condition>(<expr><name>flg</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Yes\n"</literal></expr>;</expr_stmt></block></then>
            <else>else <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No\n"</literal></expr>;</expr_stmt></block></else></if>
        }</block></else></if>
    }</block>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
