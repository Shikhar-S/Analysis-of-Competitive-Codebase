<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29742664_64403917.cpp"><comment type="block">/*
    ##############################
    ## Author: Abhinav Batta #####
    ## College: IIIT-Allahabad ###
    ##############################
 
*/</comment>  
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<function><type><name>void</name></type> <name>cpp</name><parameter_list>()</parameter_list>
<block>{
     <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>;</decl_stmt>
     <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>a</name></expr>;</expr_stmt> 
     <decl_stmt><decl><type><name>int</name></type> <name><name>p1</name><index>[<expr><literal type="number">1000</literal></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name><name>v1</name><index>[<expr><literal type="number">1000</literal></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>c</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>*</operator><name>i</name><operator>&lt;=</operator><name>a</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <if>if<condition>(<expr><name>a</name><operator>%</operator><name>i</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
            <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>cp</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                <while>while<condition>(<expr><name>a</name><operator>%</operator><name>i</name><operator>==</operator><literal type="number">0</literal></expr>)</condition>
                <block>{
                    <expr_stmt><expr><name>a</name><operator>/=</operator><name>i</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>cp</name><operator>++</operator></expr>;</expr_stmt>
                }</block></while>
                <expr_stmt><expr><name><name>p1</name><index>[<expr><name>c</name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>v1</name><index>[<expr><name>c</name></expr>]</index></name><operator>=</operator><name>cp</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>c</name><operator>++</operator></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
        <if>if<condition>(<expr><name>a</name><operator>!=</operator><literal type="number">1</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name><name>p1</name><index>[<expr><name>c</name></expr>]</index></name><operator>=</operator><name>a</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>v1</name><index>[<expr><name>c</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>c</name><operator>++</operator></expr>;</expr_stmt>
        }</block></then></if>
        <if>if<condition>(<expr><name>c</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>p1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
        }</block></then>
        <else>else
        <block>{
           <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"1"</literal></expr>;</expr_stmt>
        }</block></else></if>
     
}</block></function>

<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list>
<block>{
  <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
 
}</block></function>
<function><type><name>int32_t</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
     <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
     <expr_stmt><expr><name>t</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
     <while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition>
     <block type="pseudo"><expr_stmt><expr><call><name>cpp</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>    
     <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
