<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29780377_64416977.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = (a); i &lt; (b); i++)</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>int</name></type> <name>tc</name></decl>,<decl><type ref="prev"/><name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>imp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>,<argument><expr><name><name>priority_queue</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>,<argument><expr><name><name>greater</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>vs</name></decl>,<decl><type ref="prev"/><name>vt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>,<decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>tc</name></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>tc</name><operator>--</operator></expr>)</condition>
    <block>{
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>s</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr><operator>,</operator><expr><call><name><name>vs</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr><operator>,</operator><expr><call><name><name>vt</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>imp</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
        <macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro>
        <block>{
            <expr_stmt><expr><name><name>vs</name><index>[<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><call><name>push</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>vt</name><index>[<expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><call><name>push</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro>
        <block>{
            <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
            <block>{
                <if>if<condition>(<expr><name><name>vs</name><index>[<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{ <comment type="block">/*cout&lt;&lt;"hi1"&lt;&lt;' '&lt;&lt;s&lt;&lt;' '&lt;&lt;t&lt;&lt;' '&lt;&lt;i&lt;&lt;'\n';*/</comment> <expr_stmt><expr><name>imp</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt> <break>break;</break> }</block></then></if>
                <expr_stmt><expr><name><name>vs</name><index>[<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><call><name>pop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <if>if<condition>(<expr><name><name>vt</name><index>[<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name><name>vs</name><index>[<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{ <comment type="block">/*cout&lt;&lt;"hi2"&lt;&lt;' '&lt;&lt;s&lt;&lt;' '&lt;&lt;t&lt;&lt;' '&lt;&lt;i&lt;&lt;'\n';*/</comment> <expr_stmt><expr><name>imp</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt> <break>break;</break> }</block></then></if>
                <if>if<condition>(<expr><operator>!</operator><name><name>vs</name><index>[<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr>)</condition><then>
                <block>{
                    <comment type="line">//cout&lt;&lt;"hi1"&lt;&lt;' '&lt;&lt;i&lt;&lt;'\n';</comment>
                    <comment type="line">//cout&lt;&lt;s&lt;&lt;' '&lt;&lt;t&lt;&lt;'\n';</comment>
                    <expr_stmt><expr><name>a</name><operator>=</operator><name><name>vs</name><index>[<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><call><name>top</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>vs</name><index>[<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><call><name>pop</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>vs</name><index>[<expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><call><name>push</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>vt</name><index>[<expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><call><name>pop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <comment type="line">//swap(s[a],t[i]);</comment>
                    <expr_stmt><expr><name>tmp</name><operator>=</operator><name><name>s</name><index>[<expr><name>a</name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><index>[<expr><name>a</name></expr>]</index></name><operator>=</operator><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>tmp</name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name>a</name><operator>+</operator><literal type="number">1</literal></expr>,<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <comment type="line">//cout&lt;&lt;a&lt;&lt;' '&lt;&lt;i&lt;&lt;'\n';</comment>
                    <comment type="line">//cout&lt;&lt;s&lt;&lt;' '&lt;&lt;t&lt;&lt;'\n';</comment>
                }</block></then>
                <elseif>else <if>if<condition>(<expr><operator>!</operator><name><name>vt</name><index>[<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>i</name><operator>!=</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
                <block>{
                    <comment type="line">//cout&lt;&lt;"hi2"&lt;&lt;' '&lt;&lt;i&lt;&lt;'\n';</comment>
                    <comment type="line">//cout&lt;&lt;s&lt;&lt;' '&lt;&lt;t&lt;&lt;'\n';</comment>
                    <expr_stmt><expr><name>a</name><operator>=</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>vs</name><index>[<expr><name><name>s</name><index>[<expr><name>a</name></expr>]</index></name></expr>]</index></name><operator>.</operator><call><name>pop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>b</name><operator>=</operator><name><name>vt</name><index>[<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><call><name>top</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>vt</name><index>[<expr><name><name>t</name><index>[<expr><name>b</name></expr>]</index></name></expr>]</index></name><operator>.</operator><call><name>pop</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>vs</name><index>[<expr><name><name>t</name><index>[<expr><name>b</name></expr>]</index></name></expr>]</index></name><operator>.</operator><call><name>push</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>vt</name><index>[<expr><name><name>s</name><index>[<expr><name>a</name></expr>]</index></name></expr>]</index></name><operator>.</operator><call><name>push</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <comment type="line">//swap(s[a],t[b]);</comment>
                    <expr_stmt><expr><name>tmp</name><operator>=</operator><name><name>s</name><index>[<expr><name>a</name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><index>[<expr><name>a</name></expr>]</index></name><operator>=</operator><name><name>t</name><index>[<expr><name>b</name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>t</name><index>[<expr><name>b</name></expr>]</index></name><operator>=</operator><name>tmp</name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name>a</name><operator>+</operator><literal type="number">1</literal></expr>,<expr><name>b</name><operator>+</operator><literal type="number">1</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt><expr><name>a</name><operator>=</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>vs</name><index>[<expr><name><name>s</name><index>[<expr><name>a</name></expr>]</index></name></expr>]</index></name><operator>.</operator><call><name>pop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>b</name><operator>=</operator><name>i</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>vt</name><index>[<expr><name><name>t</name><index>[<expr><name>b</name></expr>]</index></name></expr>]</index></name><operator>.</operator><call><name>pop</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>vs</name><index>[<expr><name><name>t</name><index>[<expr><name>b</name></expr>]</index></name></expr>]</index></name><operator>.</operator><call><name>push</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <comment type="line">//swap(s[a],t[b]);</comment>
                    <expr_stmt><expr><name>tmp</name><operator>=</operator><name><name>s</name><index>[<expr><name>a</name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><index>[<expr><name>a</name></expr>]</index></name><operator>=</operator><name><name>t</name><index>[<expr><name>b</name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>t</name><index>[<expr><name>b</name></expr>]</index></name><operator>=</operator><name>tmp</name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name>a</name><operator>+</operator><literal type="number">1</literal></expr>,<expr><name>b</name><operator>+</operator><literal type="number">1</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <comment type="line">//cout&lt;&lt;s&lt;&lt;' '&lt;&lt;t&lt;&lt;'\n';</comment>
                }</block></then></if></elseif>
                <else>else <block>{ <comment type="block">/*cout&lt;&lt;"hi3"&lt;&lt;' '&lt;&lt;vt[s[i]].empty()&lt;&lt;' '&lt;&lt;!vs[s[i]].empty()&lt;&lt;' '&lt;&lt;s&lt;&lt;' '&lt;&lt;t&lt;&lt;' '&lt;&lt;i&lt;&lt;'\n';*/</comment> <expr_stmt><expr><name>imp</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt> <break>break;</break> }</block></else></if>
            }</block></then>
            <else>else <block type="pseudo"><expr_stmt><expr><name><name>vs</name><index>[<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><call><name>pop</name><argument_list>()</argument_list></call></expr><operator>,</operator><expr><name><name>vt</name><index>[<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><call><name>pop</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></else></if>
        }</block>
        <if>if<condition>(<expr><name>imp</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No"</literal><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt></block></then>
        <else>else
        <block>{
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Yes"</literal><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name><name>v</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt>
            <for>for<control>(<init><decl><type><name>auto</name></type> <name>p</name><range>: <expr><name>v</name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>p</name><operator>.</operator><name>first</name></name><operator>&lt;&lt;</operator><literal type="char">' '</literal><operator>&lt;&lt;</operator><name><name>p</name><operator>.</operator><name>second</name></name><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt></block></for>
        }</block></else></if>
    }</block></while>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
