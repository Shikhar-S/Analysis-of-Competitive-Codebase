<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29742072_64379433.cpp"><comment type="block">/*Bismillahir Rahmanir Rahim*/</comment><comment type="line">//{</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<using>using <name>ll</name> <init>= <type><name>long</name> <name>long</name></type></init>;</using> <using>using <name>ull</name> <init>= <type><name>unsigned</name> <name>long</name> <name>long</name></type></init>;</using> <using>using <name>ld</name> <init>= <type><name>long</name> <name>double</name></type></init>;</using>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>llinf</name> <init>= <expr><operator>(</operator><literal type="number">1ll</literal><operator>&lt;&lt;</operator><literal type="number">61</literal><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>eps</name> <init>= <expr><literal type="number">1e-6</literal></expr></init></decl>, <decl><type ref="prev"/><name>ldeps</name> <init>= <expr><literal type="number">1e-9</literal></expr></init></decl>;</decl_stmt>
<struct>struct <name>Dbg</name> <block>{<public type="default">
<expr_stmt><expr><specifier>static</specifier> <specifier>constexpr</specifier> <name>auto</name> <operator>&amp;</operator><name>os</name> <operator>=</operator> <name>cout</name></expr>;</expr_stmt>   <comment type="line">// replace by cerr in interactive.</comment>
<function_decl><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>C</name></parameter>&gt;</parameter_list></template> <specifier>static</specifier> <type><name>auto</name></type> <name>dud</name><parameter_list>(<parameter><decl><type><name>C</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>-&gt;<type><decltype>decltype<argument_list>(<argument><expr><name>os</name> <operator>&lt;&lt;</operator> <operator>*</operator><name>x</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decltype></type>;</function_decl>
<function_decl><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>C</name></parameter>&gt;</parameter_list></template> <specifier>static</specifier> <type><name>char</name></type> <name>dud</name><parameter_list>(<parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>C</name></parameter>&gt;</parameter_list> <expr_stmt><expr><name><typename>typename</typename> <name>enable_if</name></name><operator>&lt;</operator><sizeof>sizeof <name><name>dud</name><argument_list type="generic">&lt;<argument><expr><name>C</name></expr></argument>&gt;</argument_list></name></sizeof><operator>(</operator><literal type="number">0</literal><operator>)</operator><operator>!=</operator><literal type="number">1</literal></expr><operator>,</operator> <expr><name>Dbg</name><operator>&amp;</operator><operator>&gt;</operator><name><operator>::</operator><name>type</name></name> <name>operator<name>&lt;&lt;</name></name><operator>(</operator><specifier>const</specifier> <name>C</name> <operator>&amp;</operator><name>x</name><operator>)</operator> <block>{ <expr><name>os</name> <operator>&lt;&lt;</operator> <name>x</name></expr>; <return>return <expr><operator>*</operator><name>this</name></expr>;</return> }</block></expr></expr_stmt></template>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>C</name></parameter>&gt;</parameter_list></template> <type><name>Dbg</name> <modifier>&amp;</modifier></type><name>dump</name><parameter_list>(<parameter><decl><type><name>C</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>C</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><operator>*</operator><name>this</name> <operator>&lt;&lt;</operator> <literal type="string">"\n["</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>cur</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>C</name></type> <name>i</name> <init>= <expr><name>b</name></expr></init></decl>;</init> <condition><expr><name>i</name><operator>!=</operator><name>e</name> <operator>and</operator> <name>cur</name><operator>&lt;</operator><literal type="number">26</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>cur</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><operator>*</operator><name>this</name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal><operator>+</operator><literal type="number">2</literal><operator>*</operator><operator>(</operator><name>i</name><operator>==</operator><name>b</name><operator>)</operator> <operator>&lt;&lt;</operator> <operator>*</operator><name>i</name></expr>;</expr_stmt></block></for>
    <return>return <expr><operator>*</operator><name>this</name> <operator>&lt;&lt;</operator> <literal type="char">']'</literal></expr>;</return>
}</block></function>
<template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>C</name></parameter>&gt;</parameter_list> <expr_stmt><expr><name><typename>typename</typename> <name>enable_if</name></name><operator>&lt;</operator><sizeof>sizeof <name><name>dud</name><argument_list type="generic">&lt;<argument><expr><name>C</name></expr></argument>&gt;</argument_list></name></sizeof><operator>(</operator><literal type="number">0</literal><operator>)</operator><operator>==</operator><literal type="number">1</literal></expr><operator>,</operator> <expr><name>Dbg</name><operator>&amp;</operator><operator>&gt;</operator><name><operator>::</operator><name>type</name></name> <name>operator<name>&lt;&lt;</name></name><operator>(</operator><specifier>const</specifier> <name>C</name> <operator>&amp;</operator><name>x</name><operator>)</operator> <block>{
    <return>return <expr><call><name>dump</name><argument_list>(<argument><expr><call><name>begin</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>end</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt></template>
<template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>C</name></parameter>, <parameter><type><name>size_t</name></type> <name>X</name></parameter>&gt;</parameter_list> <expr_stmt><expr><name><typename>typename</typename> <name>enable_if</name></name><operator>&lt;</operator><sizeof>sizeof<argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></sizeof><operator>!=</operator><literal type="number">1</literal></expr><operator>,</operator> <expr><name>Dbg</name><operator>&amp;</operator><operator>&gt;</operator><name><operator>::</operator><name>type</name></name> <name>operator <name>&lt;&lt;</name></name><operator>(</operator><call><name>C</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call><index>[<expr><name>X</name></expr>]</index><operator>)</operator> <block>{
    <return>return <expr><call><name>dump</name><argument_list>(<argument><expr><call><name>begin</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>end</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt></template>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>B</name></parameter>, <parameter><type><name>class</name></type> <name>C</name></parameter>&gt;</parameter_list></template> <type><name>Dbg</name> <modifier>&amp;</modifier></type><name>operator <name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><operator>*</operator><name>this</name> <operator>&lt;&lt;</operator> <literal type="char">'{'</literal> <operator>&lt;&lt;</operator> <name><name>x</name><operator>.</operator><name>first</name></name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal> <operator>&lt;&lt;</operator> <name><name>x</name><operator>.</operator><name>second</name></name> <operator>&lt;&lt;</operator> <literal type="char">'}'</literal></expr>;</return>
}</block></function>
<struct><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>C</name></parameter>, <parameter><type><name>size_t</name></type> <name>Y</name></parameter>&gt;</parameter_list></template> struct <name>TP</name> <block>{<public type="default">
    <function type="operator"><type><name>void</name></type> <name>operator<name>()</name></name><parameter_list>(<parameter><decl><type><name>Dbg</name><modifier>&amp;</modifier></type> <name>os</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>C</name> <modifier>&amp;</modifier></type><name>t</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><call><name><name>TP</name><argument_list type="generic">&lt;<argument><expr><name>C</name></expr></argument>, <argument><expr><name>Y</name><operator>-</operator><literal type="number">1</literal></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call><argument_list>(<argument><expr><name>os</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal> <operator>&lt;&lt;</operator> <call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>Y</name><operator>-</operator><literal type="number">1</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
</public>}</block>;</struct>
<struct><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>C</name></parameter>&gt;</parameter_list></template> struct <name><name>TP</name><argument_list type="generic">&lt;<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name> <block>{<public type="default"> <function type="operator"><type><name>void</name></type> <name>operator<name>()</name></name><parameter_list>(<parameter><decl><type><name>Dbg</name><modifier>&amp;</modifier></type> <name>os</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>C</name> <modifier>&amp;</modifier></type><name>t</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function> </public>}</block>;</struct>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>class</name><modifier>...</modifier></type> <name>C</name></parameter>&gt;</parameter_list></template> <type><name>Dbg</name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>C</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>t</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="char">'{'</literal></expr><operator>,</operator> <expr><name>TP</name><operator>&lt;</operator><decltype>decltype<argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></decltype>, <sizeof type="pack">sizeof...<argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></sizeof><operator>&gt;</operator><operator>(</operator><operator>)</operator><operator>(</operator><operator>*</operator><name>this</name><operator>,</operator> <name>t</name><operator>)</operator></expr>;</expr_stmt> <return>return <expr><operator>*</operator><name>this</name> <operator>&lt;&lt;</operator> <literal type="char">'}'</literal></expr>;</return>
}</block></function>
<function type="operator"><type><name>Dbg</name> <modifier>&amp;</modifier></type><name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><function_decl><type><name>ostream</name><modifier>&amp;</modifier></type>(<modifier>*</modifier><name>x</name>)<parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <name>x</name></expr>;</expr_stmt> <return>return <expr><operator>*</operator><name>this</name></expr>;</return> }</block></function>
</public>}</block> <decl><name>dbg</name></decl>;</struct>
<function><type><name>void</name></type> <name>err</name><parameter_list>(<parameter><decl><type><name>istringstream</name> <modifier>*</modifier></type><name>iss</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><operator>delete</operator> <name>iss</name></expr>;</expr_stmt> }</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>C</name></parameter>, <parameter><type><name>class</name><modifier>...</modifier></type> <name>Args</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>err</name><parameter_list>(<parameter><decl><type><name>istringstream</name> <modifier>*</modifier></type><name>iss</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>C</name> <modifier>&amp;</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Args</name> <modifier>&amp;</modifier><modifier>...</modifier></type> <name>args</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>string</name></type> <name>name</name></decl>;</decl_stmt> <expr_stmt><expr><operator>*</operator><name>iss</name> <operator>&gt;&gt;</operator> <name>name</name></expr>;</expr_stmt> <if>if <condition>(<expr><call><name><name>name</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>==</operator><literal type="char">','</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>name</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
    <expr_stmt><expr><name>dbg</name> <operator>&lt;&lt;</operator> <name>name</name> <operator>&lt;&lt;</operator> <literal type="string">" = "</literal> <operator>&lt;&lt;</operator> <name>val</name> <operator>&lt;&lt;</operator> <literal type="string">"; "</literal></expr><operator>,</operator> <expr><call><name>err</name><argument_list>(<argument><expr><name>iss</name></expr></argument>, <argument><expr><name>args</name> <operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bug</name><parameter_list>(<parameter><type><name>args</name><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dbg &lt;&lt; __LINE__ &lt;&lt; ": ", err(new istringstream(string(#args)), args), dbg &lt;&lt; endl</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sl</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>int(strlen(a))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>int(a.size())</cpp:value></cpp:define>
<decl_stmt><decl><type><name>int</name></type> <name>T</name></decl>, <decl><type ref="prev"/><name>Q</name></decl>, <decl><type ref="prev"/><name>cn</name></decl>;</decl_stmt><comment type="line">//}</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>inf</name> <init>= <expr><literal type="number">1000000007</literal></expr></init></decl>, <decl><type ref="prev"/><name>mxn</name> <init>= <expr><literal type="number">10005</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><name>mxn</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>t</name><index>[<expr><name>mxn</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>ss</name><index>[<expr><name>mxn</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>tt</name><index>[<expr><name>mxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>must</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{ <if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>x</name><operator>)</operator></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No\n"</literal></expr><operator>,</operator> <expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if> }</block></function>
<function><type><name>void</name></type> <name>done</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{ <if>if <condition>(<expr><name>x</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Yes\n"</literal></expr><operator>,</operator> <expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if> }</block></function>

<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{ <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>precision</name></name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>T</name></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>cn</name><operator>++</operator><operator>!=</operator><name>T</name></expr>)</condition> <block>{
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>s</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>dif</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
            <if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>dif</name><operator>++</operator></expr><operator>,</operator> <expr><name><name>ss</name><index>[<expr><name>dif</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr><operator>,</operator> <expr><name><name>tt</name><index>[<expr><name>dif</name></expr>]</index></name> <operator>=</operator> <name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></then></if>
        }</block></for>
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>(</operator><ternary><condition><expr><name>dif</name><operator>==</operator><literal type="number">2</literal> <operator>and</operator> <name><name>ss</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>==</operator><name><name>ss</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>and</operator> <name><name>tt</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>==</operator><name><name>tt</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr> ?</condition><then> <expr><literal type="string">"Yes\n"</literal></expr> </then><else>: <expr><literal type="string">"No\n"</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
    }</block></while>
}</block></function></unit>
