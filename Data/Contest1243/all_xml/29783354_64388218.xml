<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29783354_64388218.cpp"> <cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fstream&gt;</cpp:file></cpp:include>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>s</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
    <using>using <namespace>namespace <name>std</name>;</namespace></using>



    <function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{

<decl_stmt><decl><type><name>ll</name></type> <name>k</name></decl> ;</decl_stmt>
<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
<for>for <control>( <init><decl><type><name>int</name></type> <name>o</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>o</name> <operator>&lt;=</operator> <name>k</name></expr> ;</condition> <incr><expr><name>o</name><operator>++</operator></expr></incr> )</control>
<block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>,<decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>s</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt; <argument><expr><name><name>pair</name> <argument_list type="generic">&lt; <argument><expr><name>ll</name></expr></argument> , <argument><expr><name>ll</name></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>ans</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>f</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>x1</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl> , <decl><type ref="prev"/><name>x2</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
    <block>{
        <decl_stmt><decl><type><name>char</name></type> <name>x</name> <init>= <expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>y</name> <init>= <expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
<if>if <condition>(<expr><name>x1</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>x1</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block></then>
<elseif>else <if>if <condition>(<expr><name>x2</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>x2</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block></then></if></elseif>
<else>else <block>{<expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt> <break>break;</break>}</block></else></if>
    }</block></for>

    <if>if <condition>(<expr><name>f</name><operator>==</operator><literal type="number">1</literal> <operator>||</operator> <operator>(</operator><name>x2</name><operator>==</operator><operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>x1</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><then> <block>{<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt><continue>continue;</continue>}</block></then>
 <elseif>else <if>if <condition>(<expr><name><name>s</name><index>[<expr><name>x1</name></expr>]</index></name><operator>==</operator><name><name>s</name><index>[<expr><name>x2</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>t</name><index>[<expr><name>x1</name></expr>]</index></name><operator>==</operator><name><name>t</name><index>[<expr><name>x2</name></expr>]</index></name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Yes"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr> ;</expr_stmt></block></then></if></elseif>
            <else>else <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></else></if>



}</block></for>









    <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></function>
</unit>
