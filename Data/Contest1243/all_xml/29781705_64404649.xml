<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29781705_64404649.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PI</name></cpp:macro> <cpp:value>2*asin(1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>begin(a),end(a)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fore</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>j</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(long long i = j; i &lt; n;i++)</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>int32_t</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>qwe</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>qwe</name></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>qwe</name><operator>--</operator></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name><name>used</name><index>[<expr><literal type="number">27</literal></expr>]</index></name></decl>;</decl_stmt>
        <macro><name>fore</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">26</literal></argument>)</argument_list></macro> <expr_stmt><expr><name><name>used</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>,<decl><type ref="prev"/><name>t</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>s</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
        <macro><name>fore</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro><block>{
            <expr_stmt><expr><name><name>used</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <call>(<name>int</name>)<argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>)</argument_list></call></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>used</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <call>(<name>int</name>)<argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>)</argument_list></call></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
        }</block>
        <decl_stmt><decl><type><name>bool</name></type> <name>flag</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
        <macro><name>fore</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">26</literal></argument>)</argument_list></macro> <block>{
            <if>if <condition>(<expr><name><name>used</name><index>[<expr><name>i</name></expr>]</index></name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>used</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No\n"</literal></expr>;</expr_stmt>
                <break>break;</break>
            }</block></then></if>
        }</block>
        <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type><name>res</name></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>flag</name></expr>)</condition><then><block>{
            <macro><name>fore</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro><block>{
                <decl_stmt><decl><type><name>bool</name></type> <name>use</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
                <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block>{
                    <macro><name>fore</name><argument_list>(<argument>j</argument>, <argument>i + <literal type="number">1</literal></argument>, <argument>n</argument>)</argument_list></macro><block>{
                        <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>s</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <name><name>t</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then><block>{     <comment type="line">// saaaah</comment>
                            <expr_stmt><expr><call><name><name>res</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>,<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line">// haaaas</comment>
                            <expr_stmt><expr><name>use</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                            <break>break;</break>
                        }</block></then></if>
                    }</block>
                    <if>if<condition>(<expr><operator>!</operator><name>use</name></expr>)</condition><then><block>{
                        <macro><name>fore</name><argument_list>(<argument>j</argument>, <argument>i + <literal type="number">1</literal></argument>, <argument>n</argument>)</argument_list></macro><block>{
                            <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>t</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <name><name>t</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then><block>{
                                <expr_stmt><expr><call><name><name>res</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>,<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <expr_stmt><expr><call><name><name>res</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>,<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>t</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <break>break;</break>
                            }</block></then></if>
                        }</block>
                    }</block></then></if>
                }</block></then></if>
            }</block>
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Yes\n"</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name><name>res</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
            <for>for<control>(<init><decl><type><name>auto</name></type> <name>i</name><range>: <expr><name>res</name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>i</name><operator>.</operator><name>first</name></name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal> <operator>&lt;&lt;</operator> <name><name>i</name><operator>.</operator><name>second</name></name> <operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt></block></for>
        }</block></then></if>

    }</block></while>
}</block></function></unit>
