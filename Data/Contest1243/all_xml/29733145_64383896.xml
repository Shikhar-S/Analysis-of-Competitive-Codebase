<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29733145_64383896.cpp">                                        <comment type="line" format="doxygen">///*******ZoHuyHieuZo*******///</comment>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;int,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Zo</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>maxn</name></cpp:macro> <cpp:value>1000111</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mem</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(i,m,sizeof(i))</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>string</name></type> <name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>string</name></type> <name>b</name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>nhap</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>a</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>b</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>a</name><operator>=</operator><literal type="char">' '</literal><operator>+</operator><name>a</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>b</name><operator>=</operator><literal type="char">' '</literal><operator>+</operator><name>b</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>cnt</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>c1</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>c2</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
            <block>{
                <if>if<condition>(<expr><name>c1</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>c1</name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></then>
                <else>else <block type="pseudo"><expr_stmt><expr><name>c2</name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></else></if>
                <expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>
            }</block></then></if>
        <if>if<condition>(<expr><name>cnt</name><operator>&gt;</operator><literal type="number">2</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No"</literal><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt>
            <return>return ;</return>
        }</block></then></if>
    }</block></for>
    <if>if<condition>(<expr><name>cnt</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then>
    <block>{
        <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>c1</name></expr>]</index></name><operator>==</operator><name><name>a</name><index>[<expr><name>c2</name></expr>]</index></name><operator>&amp;&amp;</operator><name><name>b</name><index>[<expr><name>c1</name></expr>]</index></name><operator>==</operator><name><name>b</name><index>[<expr><name>c2</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Yes"</literal><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt></block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No"</literal><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt></block></else></if>
    }</block></then>
    <else>else
    <block>{
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No"</literal><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt>
    }</block></else></if>
}</block></function>

<function><name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">//    freopen(Zo".inp","r",stdin);</comment>
<comment type="line">//    freopen(Zo".out","w",stdout);</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>t</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block type="pseudo"><expr_stmt><expr><call><name>nhap</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></for>
}</block></function>
</unit>
