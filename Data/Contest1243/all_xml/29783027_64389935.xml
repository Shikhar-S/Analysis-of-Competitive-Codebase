<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29783027_64389935.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
<comment type="line">//    int t;</comment>
<comment type="line">//    cin &gt;&gt; t;</comment>
<comment type="line">//    while (t--) {</comment>
<comment type="line">//        int n;</comment>
<comment type="line">//        cin &gt;&gt; n;</comment>
<comment type="line">//        string s;</comment>
<comment type="line">//        cin &gt;&gt; s;</comment>
<comment type="line">//        string g;</comment>
<comment type="line">//        cin &gt;&gt; g;</comment>
<comment type="line">//        int diff = 0;</comment>
<comment type="line">//        vector&lt;int&gt; f;</comment>
<comment type="line">//        vector&lt;queue&lt;int&gt;&gt; cnt_a(26, 0);</comment>
<comment type="line">//        vector&lt;queue&lt;int&gt;&gt; cnt_b(26, 0);</comment>
<comment type="line">//        for (int i = 0; i &lt; n; i++) {</comment>
<comment type="line">//            if (s[i] != g[i]) {</comment>
<comment type="line">//                diff++;</comment>
<comment type="line">//                f.push_back(i);</comment>
<comment type="line">//            }</comment>
<comment type="line">//            cnt_a[s[i]-'a'].push(i);</comment>
<comment type="line">//            cnt_b[g[i] - 'a'].push(i)</comment>
<comment type="line">//        }</comment>
<comment type="line">//        bool ok = true;</comment>
<comment type="line">//        for (int i = 0; i &lt; cnt_a.size(); i++) {</comment>
<comment type="line">//            if ((cnt_a[i].size() + cnt_b[i].size()) % 2 == 1) {</comment>
<comment type="line">//                ok = false;</comment>
<comment type="line">//            }</comment>
<comment type="line">//        }</comment>
<comment type="line">//        if (!ok) {</comment>
<comment type="line">//            cout &lt;&lt; "No" &lt;&lt; endl;</comment>
<comment type="line">//        }</comment>
<comment type="line">//        else {</comment>
<comment type="line">//            for (int i = 0; i &lt; n; i++) {</comment>
<comment type="line">//</comment>
<comment type="line">//            }</comment>
<comment type="line">//        }</comment>
<comment type="line">//    }</comment>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>t</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>t</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>
    <decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>m</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>long</name> <name>long</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>*</operator> <name>i</name> <operator>&lt;=</operator> <name>t</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <while>while <condition>(<expr><name>t</name> <operator>%</operator> <name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{
            <expr_stmt><expr><name><name>m</name><index>[<expr><name>i</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>t</name> <operator>/=</operator> <name>i</name></expr>;</expr_stmt>
        }</block></while>
    }</block></for>
    <if>if <condition>(<expr><name>t</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>m</name><index>[<expr><name>t</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
    }</block></then></if>
    <if>if <condition>(<expr><call><name><name>m</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name><name>m</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call> <operator>-&gt;</operator> <name>first</name></expr>;</expr_stmt>
    }</block></else></if>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
