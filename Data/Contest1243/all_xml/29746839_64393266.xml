<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29746839_64393266.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fr</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=x;i&lt;y;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rfr</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=x;i&gt;=y;i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sync</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);cerr.tie(0);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);cerr.tie(0);</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name><init>=<expr><literal type="number">1e6</literal></expr></init></decl>,<decl><type ref="prev"/><name>M</name><init>=<expr><literal type="number">7</literal></expr></init></decl>,<decl><type ref="prev"/><name>INF</name><init>=<expr><literal type="number">1e18</literal></expr></init></decl>,<decl><type ref="prev"/><name>MOD</name><init>=<expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>,<decl><type ref="prev"/><name>L</name><init>=<expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>mas</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list>
<block>{
  <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>string</name></type> <name>s1</name></decl>,<decl><type ref="prev"/><name>s2</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>s1</name><operator>&gt;&gt;</operator><name>s2</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>was</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name>a1</name></decl>,<decl><type ref="prev"/><name>a2</name></decl>;</decl_stmt>
  <macro><name>fr</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro>
  <block>{
    <if>if<condition>(<expr><name><name>s1</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name><name>s2</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
    <block>{
      <if>if<condition>(<expr><name>was</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
      <block>{
        <expr_stmt><expr><name>a1</name><operator>=</operator><name><name>s1</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>a2</name><operator>=</operator><name><name>s2</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>was</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
      }</block></then>
      <elseif>else <if>if<condition>(<expr><name>was</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
      <block>{
        <if>if<condition>(<expr><name><name>s2</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name>a2</name> <operator>&amp;&amp;</operator> <name><name>s1</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name>a1</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>was</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></then>
        <else>else <block>{<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No\n"</literal></expr>;</expr_stmt><return>return;</return>}</block></else></if>
      }</block></then></if></elseif>
      <else>else <block>{<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No\n"</literal></expr>;</expr_stmt><return>return;</return>}</block></else></if>
    }</block></then></if>
  }</block>
  <if>if<condition>(<expr><name>was</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No\n"</literal></expr>;</expr_stmt></block></then>
  <else>else <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Yes\n"</literal></expr>;</expr_stmt></block></else></if>
}</block></function>
 <function><name>main</name><parameter_list>()</parameter_list>
<block>{
		<expr_stmt><expr><name>__</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>a</name><init>=<expr><name>n</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>d</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>zero</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <macro><name>fr</name><argument_list>(<argument>i</argument>,<argument><literal type="number">2</literal></argument>,<argument>sqrt(a)+<literal type="number">1</literal></argument>)</argument_list></macro>
    <block>{
      <if>if<condition>(<expr><name>a</name><operator>%</operator><name>i</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{<expr_stmt><expr><name>d</name><operator>=</operator><name>i</name></expr>;</expr_stmt><break>break;</break>}</block></then></if>
    }</block>
    <if>if<condition>(<expr><name>d</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><while>while<condition>(<expr><name>a</name><operator>%</operator><name>d</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>a</name><operator>/=</operator><name>d</name></expr>;</expr_stmt></block></while></block></then></if>
    <if>if<condition>(<expr><name>a</name><operator>!=</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>zero</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
    <if>if<condition>(<expr><name>d</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>n</name></expr>;</expr_stmt></block></then>
    <elseif>else <if>if<condition>(<expr><name>zero</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if></elseif>
    <else>else <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>d</name></expr>;</expr_stmt></block></else></if>
}</block></function>
</unit>
