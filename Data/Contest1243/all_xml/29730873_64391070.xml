<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29730873_64391070.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>G</name><init>=<expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>NN</name><init>=<expr><literal type="number">50005</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>,<decl><type ref="prev"/><name>cnt</name></decl>,<decl><type ref="prev"/><name>val</name></decl>,<decl><type ref="prev"/><name>num</name></decl>,<decl><type ref="prev"/><name>tmp</name></decl>,<decl><type ref="prev"/><name>Max</name></decl>;</decl_stmt>
<comment type="line">//vector&lt;Edge&gt; ve[NN];</comment>
<decl_stmt><decl><type><name>int</name></type> <name><name>cont</name><index>[<expr><literal type="number">30</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>inque</name><index>[<expr><name>NN</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>b</name><index>[<expr><name>NN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>pos</name><index>[<expr><name>NN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>,<decl><type ref="prev"/><name>s2</name></decl>;</decl_stmt>
<struct>struct <name>node</name><block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
	<constructor><name>node</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_x</name><init>=<expr><literal type="number">0</literal></expr></init></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>_y</name><init>=<expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list><member_init_list>:<call><name>x</name><argument_list>(<argument><expr><name>_x</name></expr></argument>)</argument_list></call>,<call><name>y</name><argument_list>(<argument><expr><name>_y</name></expr></argument>)</argument_list></call></member_init_list><block>{}</block></constructor>
</public>}</block><decl><name><name>ans</name><index>[<expr><name>NN</name></expr>]</index></name></decl>;</struct>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line">//cin.tie(0);cout.tie(0);</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>T</name></decl>;</decl_stmt><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>T</name></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>T</name><operator>--</operator></expr>)</condition><block>{
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>s</name><operator>&gt;&gt;</operator><name>s2</name></expr>;</expr_stmt><expr_stmt><expr><name>num</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>cont</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cont</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
			<expr_stmt><expr><name><name>cont</name><index>[<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>cont</name><index>[<expr><name><name>s2</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
		}</block></for>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">25</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
			<if>if<condition>(<expr><name><name>cont</name><index>[<expr><name>i</name></expr>]</index></name><operator>%</operator><literal type="number">2</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
				<goto>goto <name>out</name>;</goto>
			}</block></then></if>
		}</block></for>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
			<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name><name>s2</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
			<decl_stmt><decl><type><name>int</name></type> <name>flag</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
			<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
				<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name><operator>==</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block>{
					<expr_stmt><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><name><name>s2</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>ans</name><index>[<expr><operator>++</operator><name>num</name></expr>]</index></name><operator>=</operator><call><name>node</name><argument_list>(<argument><expr><name>j</name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>flag</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
					<break>break;</break>
				}</block></then></if>
			}</block></for>
			<if>if<condition>(<expr><operator>!</operator><name>flag</name></expr>)</condition><then><block>{
				<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
					<if>if<condition>(<expr><name><name>s2</name><index>[<expr><name>j</name></expr>]</index></name><operator>==</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block>{
						<expr_stmt><expr><name><name>s2</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><name><name>s</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>s</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name><name>s2</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>ans</name><index>[<expr><operator>++</operator><name>num</name></expr>]</index></name><operator>=</operator><call><name>node</name><argument_list>(<argument><expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>ans</name><index>[<expr><operator>++</operator><name>num</name></expr>]</index></name><operator>=</operator><call><name>node</name><argument_list>(<argument><expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>
					}</block></then></if>
				}</block></for>
			}</block></then></if>
		}</block></for>
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Yes"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>num</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>num</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
			<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name><operator>+</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="char">' '</literal><operator>&lt;&lt;</operator><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name><operator>+</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
		}</block></for>
		<label><name>out</name>:</label><empty_stmt>;</empty_stmt>
	}</block></while>
}</block></function>


</unit>
