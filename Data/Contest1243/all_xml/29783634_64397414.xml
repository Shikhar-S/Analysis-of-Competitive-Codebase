<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29783634_64397414.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name> <name>int</name></type> <name>lli</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name> <name>int</name></type> <name>ull</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>lli</name></expr></argument>,<argument><expr><name>lli</name></expr></argument>&gt;</argument_list></name></type> <name>pll</name>;</typedef>
<typedef>typedef <type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>lli</name></expr></argument>&gt;</argument_list></name></name></type> <name>vll</name>;</typedef>
<typedef>typedef <type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pll</name></expr></argument>&gt;</argument_list></name></name></type> <name>vpll</name>;</typedef>
<typedef>typedef <type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></name></type> <name>vbb</name>;</typedef>
<typedef>typedef <type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>lli</name></expr></argument>,<argument><expr><name>lli</name></expr></argument>&gt;</argument_list></name></type><name>mll</name>;</typedef>
<typedef>typedef <type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>lli</name></expr></argument>,<argument><expr><name>lli</name></expr></argument>,<argument><expr><name><name>greater</name><argument_list type="generic">&lt;<argument><expr><name>lli</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type><name>mllg</name>;</typedef>
<decl_stmt><decl><type><name>lli</name></type> <name>MOD</name><init>=<expr><literal type="number">1e9</literal> <operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lli</name></type> <name>INF</name><init>=<expr><literal type="number">1e14</literal></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>forr</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>p</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(i=p; i&lt;n; i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>be</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a.begin(),a.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>um</name></cpp:macro> <cpp:value>unordered_map</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>eb</name></cpp:macro> <cpp:value>emplace_back</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PI</name></cpp:macro> <cpp:value>3.14159265358979323846</cpp:value></cpp:define>
<function><type><name>lli</name></type> <name>sub</name><parameter_list>(<parameter><decl><type><name>lli</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>lli</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>lli</name></type> <name>p</name><init>=<expr><name>MOD</name></expr></init></decl></parameter>)</parameter_list><block>{<return>return <expr><operator>(</operator><operator>(</operator><name>a</name><operator>%</operator><name>p</name><operator>)</operator><operator>-</operator><operator>(</operator><name>b</name><operator>%</operator><name>p</name><operator>)</operator><operator>+</operator><name>p</name><operator>)</operator><operator>%</operator><name>p</name></expr>;</return>}</block></function>
<function><type><name>lli</name></type> <name>mult</name><parameter_list>(<parameter><decl><type><name>lli</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>lli</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>lli</name></type> <name>p</name><init>=<expr><name>MOD</name></expr></init></decl></parameter>)</parameter_list> <block>{<return>return <expr><operator>(</operator><operator>(</operator><name>a</name><operator>%</operator><name>p</name><operator>)</operator><operator>*</operator><operator>(</operator><name>b</name><operator>%</operator><name>p</name><operator>)</operator><operator>)</operator><operator>%</operator><name>p</name></expr>;</return>}</block></function>
<function><type><name>lli</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>lli</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>lli</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>lli</name></type> <name>p</name><init>=<expr><name>MOD</name></expr></init></decl></parameter>)</parameter_list> <block>{<return>return <expr><operator>(</operator><name>a</name><operator>%</operator><name>p</name> <operator>+</operator> <name>b</name><operator>%</operator><name>p</name><operator>)</operator><operator>%</operator><name>p</name></expr>;</return>}</block></function>
<function><type><name>lli</name></type> <name>fpow</name><parameter_list>(<parameter><decl><type><name>lli</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>lli</name></type> <name>k</name></decl></parameter>, <parameter><decl><type><name>lli</name></type> <name>p</name> <init>= <expr><name>MOD</name></expr></init></decl></parameter>)</parameter_list> <block>{<decl_stmt><decl><type><name>lli</name></type> <name>r</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> <while>while<condition>(<expr><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<if>if <condition>(<expr><name>k</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>r</name> <operator>=</operator> <name>r</name> <operator>*</operator> <name>n</name><operator>%</operator><name>p</name></expr>;</expr_stmt></block></then></if> <expr_stmt><expr><name>n</name> <operator>=</operator> <name>n</name> <operator>*</operator> <name>n</name><operator>%</operator><name>p</name></expr>;</expr_stmt> <expr_stmt><expr><name>k</name> <operator>=</operator> <name>k</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>}</block></while> <return>return <expr><name>r</name></expr>;</return>}</block></function>
<function><type><name>lli</name></type> <name>inv</name><parameter_list>(<parameter><decl><type><name>lli</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>lli</name></type> <name>p</name> <init>= <expr><name>MOD</name></expr></init></decl></parameter>)</parameter_list> <block>{<return>return <expr><call><name>fpow</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>}</block></function>
<function><type><name>lli</name></type> <name>fdiv</name><parameter_list>(<parameter><decl><type><name>lli</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>lli</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>lli</name></type> <name>p</name><init>=<expr><name>MOD</name></expr></init></decl></parameter>)</parameter_list><block>{
	<decl_stmt><decl><type><name>lli</name></type> <name>yinv</name><init>=<expr><call><name>inv</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>lli</name></type> <name>ans</name><init>=<expr><operator>(</operator><name>a</name><operator>*</operator><name>yinv</name><operator>)</operator><operator>%</operator><name>p</name></expr></init></decl>;</decl_stmt>
	<return>return <expr><name>ans</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name>ull</name></type> <name>I1018</name><init>=<expr><literal type="number">1000000000000000000</literal></expr></init></decl>;</decl_stmt><decl_stmt><decl><type><specifier>const</specifier> <name>ull</name></type> <name>I10e5</name><init>=<expr><literal type="number">100000</literal></expr></init></decl>;</decl_stmt><decl_stmt><decl><type><specifier>const</specifier> <name>lli</name></type> <name>I10e6</name><init>=<expr><literal type="number">1e6</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lli</name></type> <name>ZERO</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt><decl_stmt><decl><type><name>ull</name></type> <name>I10e9</name><init>=<expr><literal type="number">1000000000</literal></expr></init></decl>;</decl_stmt><decl_stmt><decl><type><name>lli</name></type> <name>ONE</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>printVecpll</name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pll</name></expr></argument>&gt;</argument_list></name></name></type> <name>v</name></decl></parameter>)</parameter_list><block>{
	<for>for<control>(<init><decl><type><name>auto</name></type> <name>p</name><range>:<expr><name>v</name></expr></range></decl></init>)</control><block>{
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>(</operator><name>char</name><operator>)</operator><name><name>p</name><operator>.</operator><name>first</name></name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name><name>p</name><operator>.</operator><name>second</name></name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	}</block></for>
}</block></function>
<function><type><name>void</name></type> <name>printVec</name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>lli</name></expr></argument>&gt;</argument_list></name></name></type> <name>v</name></decl></parameter>)</parameter_list><block>{
	<for>for<control>(<init><decl><type><name>lli</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>v</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;&lt;</operator><literal type="string">" "</literal></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
}</block></function>
<function><type><name>vll</name></type> <name>read_vec</name><parameter_list>(<parameter><decl><type><name>lli</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name>lli</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>vll</name></type> <name>v</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
	<macro><name>forr</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro><block>{
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	}</block>
	<return>return <expr><name>v</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></name></type> <name>is_prime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>lli</name></expr></argument>&gt;</argument_list></name></name></type> <name>primes</name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>sieve</name><parameter_list>(<parameter><decl><type><name>lli</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{
	<expr_stmt><expr><call><name><name>is_prime</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>primes</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>lli</name></type> <name>p</name></decl>;</decl_stmt>
	<for>for<control>(<init><expr><name>p</name><operator>=</operator><literal type="number">2</literal></expr>;</init><condition><expr><name>p</name><operator>*</operator><name>p</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block>{
		<if>if<condition>(<expr><name><name>is_prime</name><index>[<expr><name>p</name></expr>]</index></name></expr>)</condition><then><block>{
			<decl_stmt><decl><type><name>lli</name></type> <name>i</name></decl>;</decl_stmt>
			<for>for<control>(<init><expr><name>i</name><operator>=</operator><name>p</name><operator>*</operator><name>p</name></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>+=</operator><name>p</name></expr></incr>)</control><block>{
				<expr_stmt><expr><name><name>is_prime</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="boolean">false</literal></expr>;</expr_stmt>
			}</block></for>
		}</block></then></if>
	}</block></for>
	<expr_stmt><expr><name><name>is_prime</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name><name>is_prime</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="boolean">false</literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>lli</name></type> <name>i</name></decl>;</decl_stmt>
	<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">2</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<if>if<condition>(<expr><name><name>is_prime</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block>{
			<expr_stmt><expr><call><name><name>primes</name><operator>.</operator><name>eb</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
}</block></function>
<function><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>lli</name></expr></argument>&gt;</argument_list></name></type> <name>prime_factor</name><parameter_list>(<parameter><decl><type><name>lli</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{
	<decl_stmt><decl><type><name>lli</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>lli</name></expr></argument>&gt;</argument_list></name></type><name>s</name></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>auto</name></type> <name>p</name><range>:<expr><name>primes</name></expr></range></decl></init>)</control><block>{		
		<if>if<condition>(<expr><name>p</name><operator>&gt;</operator><call><name>sqrt</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition><then><block type="pseudo"><break>break;</break></block></then></if>
		<while>while<condition>(<expr><name>n</name><operator>%</operator><name>p</name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>n</name><operator>&gt;</operator><literal type="number">1</literal></expr>)</condition><block>{
			<expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>n</name><operator>/=</operator><name>p</name></expr>;</expr_stmt>
		}</block></while>
	}</block></for>
	<if>if<condition>(<expr><name>n</name><operator>&gt;</operator><literal type="number">1</literal></expr>)</condition><then><block>{
		<expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<return>return <expr><name>s</name></expr>;</return>
}</block></function>

<comment type="line">//     //FACTORIAL</comment>
<comment type="line">// std::vector&lt;lli&gt; fact_vec(10004);</comment>
<comment type="line">// void fact_fun(lli n){</comment>
<comment type="line">// 	lli i;</comment>
<comment type="line">// 	fact_vec[0]=1;</comment>
<comment type="line">// 	for(i=1;i&lt;=n+2;i++){</comment>
<comment type="line">// 		fact_vec[i]=(fact_vec[i-1]*i)%MOD;</comment>
<comment type="line">// 	}</comment>
<comment type="line">// }</comment>

    <comment type="line">//declare</comment>

<comment type="line">// class Sol{      	</comment>
<comment type="line">// public: 	</comment>


<comment type="line">// };</comment>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{	
	<expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ONLINE_JUDGE</name></cpp:ifndef>
	<expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"input.txt"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"output.txt"</literal></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>	
    <expr_stmt><expr><call><name>sieve</name><argument_list>(<argument><expr><name>I10e6</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>lli</name></type> <name>n</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
	<if>if<condition>(<expr><name>n</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	}</block></then><else>else<block>{
		<block>{
			<decl_stmt><decl><type><name>lli</name></type> <name>i</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>lli</name></type> <name>sqr</name><init>=<expr><call><name>sqrt</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>lli</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>lli</name></type> <name>cnt</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
			<comment type="line">// for(i=1;;i++){</comment>
			<comment type="line">// 	lli p=primes[i];</comment>
			<comment type="line">// 	if(p&gt;sqr){</comment>
			<comment type="line">// 		break;</comment>
			<comment type="line">// 	}</comment>
			<comment type="line">// 	if(n%p==0){</comment>
			<comment type="line">// 		ans=p;</comment>
			<comment type="line">// 		cnt++;</comment>
			<comment type="line">// 		lli temp=n/p;					</comment>
			<comment type="line">// 	}</comment>
			<comment type="line">// }</comment>
			<decl_stmt><decl><type><name>auto</name></type> <name>s</name><init>=<expr><call><name>prime_factor</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>cnt</name><operator>=</operator><call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<if>if<condition>(<expr><name>cnt</name><operator>&gt;</operator><literal type="number">1</literal></expr>)</condition><then><block>{
				<expr_stmt><expr><name>ans</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
			}</block></then><elseif>else <if>if<condition>(<expr><name>cnt</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
				<expr_stmt><expr><name>ans</name><operator>=</operator><name>n</name></expr>;</expr_stmt>
			}</block></then></if></elseif><else>else<block>{
				<expr_stmt><expr><name>ans</name><operator>=</operator><operator>*</operator><call><name><name>s</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
			<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
		}</block>
	}</block></else></if>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>   



</unit>
