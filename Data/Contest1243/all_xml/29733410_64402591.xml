<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29733410_64402591.cpp"><comment type="line">//problem link : https://codeforces.com/contest/920/problem/E</comment>
<comment type="line">//soln : https://codeforces.com/contest/920/submission/34934391</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAXSIZE</name><init>=<expr><literal type="number">10000020</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bufpos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>MAXSIZE</name></expr>]</index></name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEG</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<function><type><name>void</name></type> <name>init</name><parameter_list>()</parameter_list><block>{
    <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LOCAL</name></cpp:ifdef>
        <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"920E.txt"</literal></expr></argument>,<argument><expr><literal type="string">"r"</literal></expr></argument>,<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><name><name>buf</name><index>[<expr><call><name>fread</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>MAXSIZE</name></expr></argument>,<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>=</operator><literal type="char">'\0'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>bufpos</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>NEG</name></expr></cpp:if>
<function><type><name>int</name></type> <name>readint</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name>bool</name></type> <name>isneg</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>val</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init>;</init><condition><expr><operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><name>bufpos</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><name>bufpos</name></expr>]</index></name><operator>!=</operator><literal type="char">'-'</literal></expr>;</condition><incr><expr><name>bufpos</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><empty_stmt>;</empty_stmt></block></for>
    <expr_stmt><expr><name>bufpos</name><operator>+=</operator><operator>(</operator><name>isneg</name><operator>=</operator><name><name>buf</name><index>[<expr><name>bufpos</name></expr>]</index></name><operator>==</operator><literal type="char">'-'</literal><operator>)</operator></expr>;</expr_stmt>
    <for>for<control>(<init>;</init><condition><expr><call><name>isdigit</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><name>bufpos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition><incr><expr><name>bufpos</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name>val</name><operator>=</operator><name>val</name><operator>*</operator><literal type="number">10</literal><operator>+</operator><name><name>buf</name><index>[<expr><name>bufpos</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal></expr>;</expr_stmt></block></for>
    <return>return <expr><ternary><condition><expr><name>isneg</name></expr>?</condition><then><expr><operator>-</operator><name>val</name></expr></then><else>:<expr><name>val</name></expr></else></ternary></expr>;</return>
}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><name>int</name></type> <name>readint</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>val</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init>;</init><condition><expr><operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><name>bufpos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition><incr><expr><name>bufpos</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><empty_stmt>;</empty_stmt></block></for>
    <for>for<control>(<init>;</init><condition><expr><call><name>isdigit</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><name>bufpos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition><incr><expr><name>bufpos</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name>val</name><operator>=</operator><name>val</name><operator>*</operator><literal type="number">10</literal><operator>+</operator><name><name>buf</name><index>[<expr><name>bufpos</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal></expr>;</expr_stmt></block></for>
    <return>return <expr><name>val</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><name>char</name></type> <name>readchar</name><parameter_list>()</parameter_list><block>{
    <for>for<control>(<init>;</init><condition><expr><call><name>isspace</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><name>bufpos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition><incr><expr><name>bufpos</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><empty_stmt>;</empty_stmt></block></for>
    <return>return <expr><name><name>buf</name><index>[<expr><name>bufpos</name><operator>++</operator></expr>]</index></name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>readstr</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>cur</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init>;</init><condition><expr><call><name>isspace</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><name>bufpos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition><incr><expr><name>bufpos</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><empty_stmt>;</empty_stmt></block></for>
    <for>for<control>(<init>;</init><condition><expr><operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><name>bufpos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition><incr><expr><name>bufpos</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name><name>s</name><index>[<expr><name>cur</name><operator>++</operator></expr>]</index></name><operator>=</operator><name><name>buf</name><index>[<expr><name>bufpos</name></expr>]</index></name></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><name><name>s</name><index>[<expr><name>cur</name></expr>]</index></name><operator>=</operator><literal type="char">'\0'</literal></expr>;</expr_stmt>
    <return>return <expr><name>cur</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name><init>=<expr><literal type="number">200002</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>e</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>fa</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>sz</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>getf</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{
    <return>return <expr><ternary><condition><expr><name><name>fa</name><index>[<expr><name>x</name></expr>]</index></name><operator>==</operator><name>x</name></expr>?</condition><then><expr><name>x</name></expr></then><else>:<expr><name><name>fa</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><call><name>getf</name><argument_list>(<argument><expr><name><name>fa</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>mer</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{
    <expr_stmt><expr><name>x</name><operator>=</operator><call><name>getf</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>y</name><operator>=</operator><call><name>getf</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>x</name><operator>==</operator><name>y</name></expr>)</condition><then>
        <block type="pseudo"><return>return;</return></block></then></if>
    <expr_stmt><expr><name><name>fa</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><name>y</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sz</name><index>[<expr><name>y</name></expr>]</index></name><operator>+=</operator><name><name>sz</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
}</block></function>
<decl_stmt><decl><type><name>int</name></type> <name><name>cnt</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>now</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>rt</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name><init>=<expr><call><name>readint</name><argument_list>()</argument_list></call></expr></init></decl>,<decl><type ref="prev"/><name>m</name><init>=<expr><call><name>readint</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>m</name><operator>--</operator></expr>)</condition><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>u</name><init>=<expr><call><name>readint</name><argument_list>()</argument_list></call></expr></init></decl>,<decl><type ref="prev"/><name>v</name><init>=<expr><call><name>readint</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>u</name><operator>&gt;</operator><name>v</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>u</name></expr></argument>,<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name><name>e</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></while>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><name><name>fa</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>sz</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>v</name> <range>: <expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name></expr></range></decl></init>)</control>
            <block type="pseudo"><expr_stmt><expr><name><name>cnt</name><index>[<expr><call><name>getf</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block></for>
        <for>for<control>(<init><decl><type><name><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></name></type> <name>it</name><init>=<expr><call><name><name>rt</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init><condition><expr><name>it</name><operator>!=</operator><call><name><name>rt</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>)</control><block>{
            <decl_stmt><decl><type><name>int</name></type> <name>v</name><init>=<expr><operator>*</operator><name>it</name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name><name>cnt</name><index>[<expr><name>v</name></expr>]</index></name><operator>&lt;</operator><name><name>sz</name><index>[<expr><name>v</name></expr>]</index></name></expr>)</condition><then><block>{
                <expr_stmt><expr><call><name>mer</name><argument_list>(<argument><expr><name>v</name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>rt</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>it</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then><else>else <block type="pseudo"><expr_stmt><expr><name>it</name><operator>++</operator></expr>;</expr_stmt></block></else></if>
            <expr_stmt><expr><name><name>cnt</name><index>[<expr><name>v</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name><name>rt</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>,<argument><expr><call><name><name>rt</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function></unit>
