<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29733179_64389903.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>d</name></decl>,<decl><type ref="prev"/><name>sq</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>d</name><operator>=</operator><name>n</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>sq</name><operator>=</operator><call><name>sqrt</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>long</name> <name>long</name></type> <name>i</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>sq</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <if>if<condition>(<expr><name>n</name><operator>%</operator><name>i</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
            <if>if<condition>(<expr><name>d</name><operator>==</operator><name>n</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>d</name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></then>
            <elseif>else <if>if<condition>(<expr><name>i</name><operator>%</operator><name>d</name><operator>!=</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><operator>!</operator><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</return></block></then></if></elseif></if>
        }</block></then></if>
    }</block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>k</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>n</name><operator>%</operator><name>d</name><operator>==</operator><literal type="number">0LL</literal></expr>)</condition><block>{
       <expr_stmt><expr><name>n</name><operator>/=</operator><name>d</name></expr>;</expr_stmt>
       <if>if<condition>(<expr><name>n</name><operator>==</operator><literal type="number">1LL</literal></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
       <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>k</name><operator>&lt;</operator><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></while>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>,<argument><expr><ternary><condition><expr><name>n</name><operator>==</operator><literal type="number">1LL</literal></expr>?</condition><then><expr><name>d</name></expr></then><else>:<expr><literal type="number">1LL</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>


}</block></function>
</unit>
