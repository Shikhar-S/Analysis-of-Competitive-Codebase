<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29739429_64396130.cpp">
<comment type="line" format="doxygen">///   |----------------------------|</comment>
<comment type="line" format="doxygen">///   | BISMILLAHIR RAHMANIR RAHIM |</comment>
<comment type="line" format="doxygen">///   |----------------------------|</comment>

<comment type="line" format="doxygen">///       _______  __   ________   ___   .___________.</comment>
<comment type="line" format="doxygen">///      /       ||  | |   ____|  /   \  |           |</comment>
<comment type="line" format="doxygen">///     |   (----'|  | |  |__    /  ^  \ `---|  |----`</comment>
<comment type="line" format="doxygen">///      \   \    |  | |   __|  /  /_\  \    |  |</comment>
<comment type="line" format="doxygen">///  |----)   |   |  | |  |    /  _____  \   |  |</comment>
<comment type="line" format="doxygen">///  |_______/    |__| |__|   /__/     \__\  |__|</comment>
<comment type="line" format="doxygen">///</comment>


<comment type="line">//#define BitCnt(a) __builtin_popcountll(a)</comment>
<comment type="line">//template &lt;typename T&gt; T in(){char ch;T n = 0;bool ng = false;while (1){ch = getchar();if (ch == '-'){ng = true;ch = getchar();break;}if (ch&gt;='0' &amp;&amp; ch&lt;='9')     break;}while (1){n = n*10 + (ch - '0');ch = getchar();if (ch&lt;'0' || ch&gt;'9')   break;}return (ng?-n:n);}</comment>
<comment type="line">//template&lt;typename T&gt;inline T POW(T B,T P){ if(P==0) return 1; if(P&amp;1) return B*POW(B,P-1);  else return SQR(POW(B,P/2));}</comment>
<comment type="line">//template&lt;typename T&gt;inline T Gcd(T a,T b){if(a&lt;0)return Gcd(-a,b);if(b&lt;0)return Gcd(a,-b);return (b==0)?a:Gcd(b,a%b);}</comment>
<comment type="line">//template&lt;typename T&gt;inline T Lcm(T a,T b) {if(a&lt;0)return Lcm(-a,b);if(b&lt;0)return Lcm(a,-b);return a*(b/Gcd(a,b));}</comment>
<comment type="line">//long long Bigmod(long long base, long long power, long long MOD){long long ret=1;while(power){if(power &amp; 1)ret=(ret*base)%MOD;base=(base*base)%MOD;power&gt;&gt;=1;}return ret;}</comment>
<comment type="line">//bool isVowel(char ch){ ch=toupper(ch); if(ch=='A'||ch=='U'||ch=='I'||ch=='O'||ch=='E') return true; return false;}</comment>
<comment type="line">//long long ModInverse(long long number, long long MOD){return Bigmod(number, MOD-2, MOD);}</comment>
<comment type="line">//template &lt;typename T&gt; LL isLeft(T a,T b,T c) {return(a.x-b.x)*(b.y-c.y)-(b.x-c.x)*(a.y-b.y);}</comment>
<comment type="line">//bool isConst(char ch){if (isalpha(ch) &amp;&amp; !isVowel(ch)) return true; return false;}</comment>
<comment type="line">//int toInt(string s)  { int sm; stringstream ss(s); ss&gt;&gt;sm; return sm; }</comment>
<comment type="line">//#define good   st&lt;=l&amp;&amp;ed&gt;=r</comment>
<comment type="line">//#define seg    int mid=(l+r)/2,lft=2*id,rgt=lft+1</comment>
<comment type="line">//#define MX  500007</comment>
<comment type="line" format="doxygen">///**********************************************************//</comment>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive>   <cpp:macro><name>ff</name></cpp:macro>   <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>   <cpp:macro><name>ss</name></cpp:macro>   <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>   <cpp:macro><name>pb</name></cpp:macro>   <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>   <cpp:macro><name>mp</name></cpp:macro>   <cpp:value>make_pair</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive>   <cpp:macro><name>SQ</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>         <cpp:value>(n*n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>   <cpp:macro><name>ll</name></cpp:macro>            <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>   <cpp:macro><name>llu</name></cpp:macro>           <cpp:value>unsigned long long</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive>   <cpp:macro><name>pi</name></cpp:macro>            <cpp:value>acos(-1.0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive>   <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro>        <cpp:value>a.begin(),a.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>   <cpp:macro><name>_max</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>Max(a,Max(b,c))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>   <cpp:macro><name>_min</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>Min(a,Min(b,c))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive>   <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>for(int i=a;i&lt;b; i++)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive>   <cpp:macro><name>ms_inf</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro>     <cpp:value>memset(a,0x3f,sizeof(a))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>   <cpp:macro><name>ms_ninf</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>memset(a,0xcf,sizeof(a))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>   <cpp:macro><name>MEM</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>memset(a,val,sizeof(a))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive>   <cpp:macro><name>sf</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro>         <cpp:value>scanf("%d",&amp;a)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>   <cpp:macro><name>sf2</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>      <cpp:value>scanf("%d%d",&amp;a,&amp;b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>   <cpp:macro><name>sf3</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>scanf("%d%d%d",&amp;a,&amp;b,&amp;c)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>   <cpp:macro><name>sf4</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>scanf("%d%d%d%d",&amp;a,&amp;b,&amp;c,&amp;d)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive>   <cpp:macro><name>sfl</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro>        <cpp:value>scanf("%lld",&amp;a)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>   <cpp:macro><name>sfl2</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>     <cpp:value>scanf("%lld%lld",&amp;a,&amp;b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>   <cpp:macro><name>sfl3</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>scanf("%lld%lld%lld",&amp;a,&amp;b,&amp;c)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>   <cpp:macro><name>sfl4</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%lld%lld%lld%lld",&amp;a,&amp;b,&amp;c,&amp;d)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive>   <cpp:macro><name>pnl</name><parameter_list>()</parameter_list></cpp:macro>         <cpp:value>printf("\n")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>   <cpp:macro><name>pfs</name><parameter_list>()</parameter_list></cpp:macro>         <cpp:value>printf(" ")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive>   <cpp:macro><name>pfc</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro>        <cpp:value>printf("Case %d: ",a)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>   <cpp:macro><name>pf</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro>         <cpp:value>printf("%d",a)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>   <cpp:macro><name>pf2</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>      <cpp:value>printf("%d %d",a,b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>   <cpp:macro><name>pf3</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>printf("%d %d %d",a,b,c)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>   <cpp:macro><name>pf4</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>printf("%d %d %d %d",a,b,c,d)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive>   <cpp:macro><name>pflc</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro>       <cpp:value>printf("Case %lld: ",a)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>   <cpp:macro><name>pfl</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro>        <cpp:value>printf("%lld",a)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>   <cpp:macro><name>pfl2</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>     <cpp:value>printf("%lld %lld",a,b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>   <cpp:macro><name>pfl3</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>printf("%lld %lld %lld",a,b,c)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>   <cpp:macro><name>pfl4</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>printf("%lld %lld %lld %lld",a,b,c,d)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive>   <cpp:macro><name>tover</name><parameter_list>(<parameter><type><name>QLOW</name></type></parameter>, <parameter><type><name>QHIGH</name></type></parameter>, <parameter><type><name>LOW</name></type></parameter>, <parameter><type><name>HIGH</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>QLOW&lt;=LOW &amp;&amp; QHIGH&gt;= HIGH</cpp:value></cpp:define> <comment type="line" format="doxygen">/// QLOW,QHIGH = Jei Query Ber korbo</comment>
<cpp:define>#<cpp:directive>define</cpp:directive>   <cpp:macro><name>nover</name><parameter_list>(<parameter><type><name>QLOW</name></type></parameter>, <parameter><type><name>QHIGH</name></type></parameter>, <parameter><type><name>LOW</name></type></parameter>, <parameter><type><name>HIGH</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>QLOW&gt;HIGH || QHIGH&lt;LOW</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive>   <cpp:macro><name>bitCheck</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>k</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>((bool)(a&amp;(1&lt;&lt;(k))))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>   <cpp:macro><name>bitOff</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>k</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>(a&amp;(~(1&lt;&lt;(k))))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>   <cpp:macro><name>bitOn</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>k</name></type></parameter>)</parameter_list></cpp:macro>     <cpp:value>(a|(1&lt;&lt;(k)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>   <cpp:macro><name>bitFlip</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>k</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>(a^(1&lt;&lt;(k)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive>   <cpp:macro><name>POPCOUNT</name></cpp:macro>       <cpp:value>__builtin_popcount</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>   <cpp:macro><name>POPCOUNTLL</name></cpp:macro>     <cpp:value>__builtin_popcount</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>   <cpp:macro><name>RIGHTMOST</name></cpp:macro>      <cpp:value>__builtin_ctzll</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>   <cpp:macro><name>LEFTMOST</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>(63-__builtin_clzll((x)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive>   <cpp:macro><name>pii</name></cpp:macro>      <cpp:value>pair&lt;int,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>   <cpp:macro><name>pll</name></cpp:macro>      <cpp:value>pair&lt;ll,ll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>   <cpp:macro><name>vi</name></cpp:macro>       <cpp:value>vector&lt;int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>   <cpp:macro><name>FI</name></cpp:macro>       <cpp:value>freopen("in.txt", "r", stdin)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>   <cpp:macro><name>FO</name></cpp:macro>       <cpp:value>freopen("out.txt", "w", stdout)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>   <cpp:macro><name>MOD</name></cpp:macro>      <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>   <cpp:macro><name>inf</name></cpp:macro>      <cpp:value>INT_MAX/3</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name><name>fx</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> ,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>fy</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<comment type="line" format="doxygen">/// same, down, up, right, left, down-right, down-left, up-left, up-right</comment>

<cpp:define>#<cpp:directive>define</cpp:directive>   <cpp:macro><name>fastio</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0)</cpp:value></cpp:define>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>tc</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>tc</name></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>tc</name><operator>--</operator></expr>)</condition>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>string</name></type> <name>s1</name></decl>,<decl><type ref="prev"/><name>s2</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>s1</name> <operator>&gt;&gt;</operator> <name>s2</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name><name>fre</name><index>[<expr><literal type="number">30</literal></expr>]</index></name></decl>;</decl_stmt><expr_stmt><expr><call><name>MEM</name><argument_list>(<argument><expr><name>fre</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name><name>vis</name><index>[<expr><literal type="number">60</literal></expr>]</index></name></decl>;</decl_stmt><expr_stmt><expr><call><name>MEM</name><argument_list>(<argument><expr><name>vis</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <if>if<condition>(<expr><name><name>s1</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name><name>s2</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name><name>vis</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>v1</name> <init>= <expr><name><name>s1</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>v2</name> <init>= <expr><name><name>s2</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>fre</name><index>[<expr><name>v1</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>fre</name><index>[<expr><name>v2</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
        <decl_stmt><decl><type><name>bool</name></type> <name>flag</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">26</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <if>if<condition>(<expr><name><name>fre</name><index>[<expr><name>i</name></expr>]</index></name><operator>%</operator><literal type="number">2</literal><operator>!=</operator><literal type="number">0</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
        }</block></for>
<comment type="line">//        cout &lt;&lt; s1 &lt;&lt; endl;</comment>
<comment type="line">//        cout &lt;&lt; s2 &lt;&lt; endl;</comment>
        <if>if<condition>(<expr><name>flag</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Yes\n"</literal></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pii</name></expr></argument>&gt;</argument_list></name></type><name>sw</name></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <if>if<condition>(<expr><name><name>vis</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
            <if>if<condition>(<expr><name><name>s1</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name><name>s2</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block>{<expr_stmt><expr><name><name>vis</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <continue>continue;</continue>}</block></then></if>
            <decl_stmt><decl><type><name>bool</name></type> <name>flag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
            <block>{
                <if>if<condition>(<expr><name><name>vis</name><index>[<expr><name>j</name></expr>]</index></name><operator>==</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>s1</name><index>[<expr><name>j</name></expr>]</index></name><operator>==</operator><name><name>s1</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>s1</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>sw</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><block>{<expr><name>j</name></expr>,<expr><name>i</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    <break>break;</break>
                }</block></then></if>
            }</block></for>
            <if>if<condition>(<expr><name>flag</name></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
            <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
            <block>{
                <if>if<condition>(<expr><name><name>vis</name><index>[<expr><name>j</name></expr>]</index></name><operator>==</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>s2</name><index>[<expr><name>j</name></expr>]</index></name><operator>==</operator><name><name>s1</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s2</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>s1</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>sw</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><block>{<expr><name>j</name></expr>,<expr><name>j</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>s1</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>sw</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><block>{<expr><name>j</name></expr>,<expr><name>i</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                }</block></then></if>
            }</block></for>
        }</block></for>
            <if>if<condition>(<expr><call><name><name>sw</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>sw</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
            <decl_stmt><decl><type><name>int</name></type> <name>sz</name> <init>= <expr><call><name><name>sw</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>sz</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
            <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>sz</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>u</name> <init>= <expr><name><name>sw</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><name><name>sw</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>u</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name>v</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
            }</block></for>
        }</block></then>
        <else>else
            <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No\n"</literal></expr>;</expr_stmt></block></else></if>
    }</block></while>
}</block></function>
</unit>
