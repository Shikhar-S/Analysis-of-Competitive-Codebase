<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29747967_64414272.cpp"><cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>target</name> <name>(</name><cpp:literal>"avx2"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimization</name> <name>(</name><cpp:literal>"O3"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimization</name> <name>(</name><cpp:literal>"unroll-loops"</cpp:literal><name>)</name></cpp:pragma>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a.begin(),a.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vi</name></cpp:macro> <cpp:value>vector&lt;int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pi</name></cpp:macro> <cpp:value>pair&lt;int,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
 
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LOCAL</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"debug.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>42</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
 
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mod</name><init>=<expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
 
<decl_stmt><decl><type><name>mt19937</name></type> <name>rng</name><argument_list>(<argument><expr><call><name><name>chrono</name><operator>::</operator><name>steady_clock</name><operator>::</operator><name>now</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>time_since_epoch</name><argument_list>()</argument_list></call><operator>.</operator><call><name>count</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
 
<function><type><name>int</name></type> <name>mul</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
	<return>return <expr><operator>(</operator><operator>(</operator><name>a</name><operator>)</operator><operator>*</operator><literal type="number">1ll</literal><operator>*</operator><operator>(</operator><name>b</name><operator>)</operator><operator>)</operator><operator>%</operator><name>mod</name></expr>;</return>
}</block></function>
 
<function><type><name>void</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
	<expr_stmt><expr><name>a</name><operator>+=</operator><name>b</name></expr>;</expr_stmt>
	<if>if<condition>(<expr><name>a</name><operator>&gt;=</operator><name>mod</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>a</name><operator>-=</operator><name>mod</name></expr>;</expr_stmt></block></then></if>
}</block></function>
 
<function><type><name>int</name></type> <name>sub</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
	<expr_stmt><expr><name>a</name><operator>-=</operator><name>b</name></expr>;</expr_stmt>
	<if>if<condition>(<expr><name>a</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then><block>{
		<expr_stmt><expr><name>a</name><operator>+=</operator><name>mod</name></expr>;</expr_stmt>
	}</block></then></if>
	<return>return <expr><name>a</name></expr>;</return>
}</block></function>
 
<function><type><name>int</name></type> <name>powz</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>res</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>b</name></expr>)</condition>
	<block>{
		<if>if<condition>(<expr><name>b</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name>res</name><operator>=</operator><call><name>mul</name><argument_list>(<argument><expr><name>res</name></expr></argument>,<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><name>b</name><operator>/=</operator><literal type="number">2</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>a</name><operator>=</operator><call><name>mul</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></while>
	<return>return <expr><name>res</name></expr>;</return>
}</block></function>
 
<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>A</name></parameter>, <parameter><type><name>typename</name></type> <name>B</name></parameter>&gt;</parameter_list></template>
<type><name>istream</name><modifier>&amp;</modifier></type> <name>operator<name>&gt;&gt;</name></name><parameter_list>(<parameter><decl><type><name>istream</name><modifier>&amp;</modifier></type> <name>input</name></decl></parameter>,<parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>A</name></expr></argument>,<argument><expr><name>B</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
	<expr_stmt><expr><name>input</name><operator>&gt;&gt;</operator><name><name>x</name><operator>.</operator><name>F</name></name><operator>&gt;&gt;</operator><name><name>x</name><operator>.</operator><name>S</name></name></expr>;</expr_stmt>
	<return>return <expr><name>input</name></expr>;</return>
}</block></function>
 
<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>A</name></parameter>&gt;</parameter_list></template>
<type><name>istream</name><modifier>&amp;</modifier></type> <name>operator<name>&gt;&gt;</name></name><parameter_list>(<parameter><decl><type><name>istream</name><modifier>&amp;</modifier></type> <name>input</name></decl></parameter>,<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>A</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
	<for>for<control>(<init><expr><name>auto</name><operator>&amp;</operator> <name>i</name><operator>:</operator><name>x</name></expr></init>)</control>
		<block type="pseudo"><expr_stmt><expr><name>input</name><operator>&gt;&gt;</operator><name>i</name></expr>;</expr_stmt></block></for>
	<return>return <expr><name>input</name></expr>;</return>
}</block></function>
 
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>A</name></parameter>&gt;</parameter_list></template>
<type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type> <name>output</name></decl></parameter>,<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>A</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
	<for>for<control>(<init><expr><name>auto</name><operator>&amp;</operator> <name>i</name><operator>:</operator><name>x</name></expr></init>)</control>
		<block type="pseudo"><expr_stmt><expr><name>output</name><operator>&lt;&lt;</operator><name>i</name><operator>&lt;&lt;</operator><literal type="char">' '</literal></expr>;</expr_stmt></block></for>
	<return>return <expr><name>output</name></expr>;</return>
}</block></function>
 
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name><init>=<expr><literal type="number">500002</literal></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>,<decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>s</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type><name>move</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>flag</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block>{
			<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
				<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name><operator>==</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block>{
					<expr_stmt><expr><call><name><name>move</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><block>{<expr><name>j</name></expr>,<expr><name>i</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				}</block></then></if>
			}</block></for>
		}</block></then></if>
		<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block>{
			<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
				<if>if<condition>(<expr><name><name>t</name><index>[<expr><name>j</name></expr>]</index></name><operator>==</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block>{
					<expr_stmt><expr><call><name><name>move</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><block>{<expr><name>j</name></expr>,<expr><name>j</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>t</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>move</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><block>{<expr><name>j</name></expr>,<expr><name>i</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				}</block></then></if>
			}</block></for>
		}</block></then></if>
		<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block>{
			<expr_stmt><expr><name>flag</name><operator>++</operator></expr>;</expr_stmt>
			<break>break;</break>
		}</block></then></if>
	}</block></for>
	<if>if<condition>(<expr><name>s</name><operator>==</operator><name>t</name><operator>&amp;&amp;</operator><name>flag</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Yes\n"</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name><name>move</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&lt;&lt;</operator><literal type="string">"\n"</literal></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>auto</name></type> <name>i</name><range>:<expr><name>move</name></expr></range></decl></init>)</control><block>{
			<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>i</name><operator>.</operator><name>F</name></name><operator>+</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="char">' '</literal><operator>&lt;&lt;</operator><name><name>i</name><operator>.</operator><name>S</name></name><operator>+</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="string">"\n"</literal></expr>;</expr_stmt>
		}</block></for>
	}</block></then>
	<else>else<block>{
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No"</literal></expr>;</expr_stmt>
	}</block></else></if>
}</block></function>
 
<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>tc</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>tc</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>_</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>_</name><operator>&lt;</operator><name>tc</name></expr>;</condition><incr><expr><name>_</name><operator>++</operator></expr></incr>)</control><block>{
		<comment type="line">//~ cout&lt;&lt;"Case #"&lt;&lt;_+1&lt;&lt;": ";</comment>
		<expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>_</name><operator>!=</operator><name>tc</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
		<block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"\n"</literal></expr>;</expr_stmt></block></then></if>
	}</block></for>
}</block></function>
</unit>
