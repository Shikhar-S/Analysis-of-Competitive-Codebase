<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29782547_64415509.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<comment type="line">//#pragma GCC optimize ("O3")</comment>
<comment type="line">//#pragma GCC target ("sse4")</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>const</specifier> <name>long</name> <name>long</name></type> <name>MOD</name> <argument_list>(<argument><expr><call>(<name>long</name> <name>long</name>)<argument_list>(<argument><expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>long</name> <name>long</name></type> <name>LLX</name> <argument_list>(<argument><expr><call>(<name>long</name> <name>long</name>)<argument_list>(<argument><expr><literal type="number">1e18</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name>p</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>sq</name></decl>,<decl><type ref="prev"/><name>ans1</name></decl>,<decl><type ref="prev"/><name>ans2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>bitset</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1000005</literal></expr></argument>&gt;</argument_list></name></type><name>B</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
   <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <for>for<control>(<init><decl><type><name>long</name> <name>long</name></type> <name>i</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">1000005</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
   <block>{
      <if>if<condition>(<expr><operator>!</operator><name><name>B</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
      <block>{
         <expr_stmt><expr><name>k</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
         <while>while<condition>(<expr><name>k</name><operator>&lt;</operator><literal type="number">1000005</literal></expr>)</condition>
         <block>{
            <expr_stmt><expr><name><name>B</name><index>[<expr><name>k</name></expr>]</index></name><operator>=</operator><literal type="boolean">true</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>k</name><operator>+=</operator><name>i</name></expr>;</expr_stmt>
         }</block></while>
         <if>if<condition>(<expr><name>i</name><operator>&lt;</operator><name>n</name></expr>)</condition><then>
         <block>{
            <if>if<condition>(<expr><name>n</name><operator>%</operator><name>i</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
            <block>{
               <expr_stmt><expr><name>ans1</name><operator>++</operator></expr><operator>,</operator><expr><name>ans2</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
               <if>if<condition>(<expr><name>i</name><operator>*</operator><name>i</name><operator>!=</operator><name>n</name><operator>&amp;&amp;</operator><call><name>__gcd</name><argument_list>(<argument><expr><name>n</name><operator>/</operator><name>i</name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
               <block>{
                  <expr_stmt><expr><name>ans1</name><operator>++</operator></expr>;</expr_stmt>
               }</block></then></if>
            }</block></then></if>
         }</block></then></if>
      }</block></then></if>
   }</block></for>
   <if>if<condition>(<expr><name>ans1</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
   <block>{
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   }</block></then>
   <elseif>else <if>if<condition>(<expr><name>ans1</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
   <block>{
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>,<argument><expr><name>ans2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   }</block></then></if></elseif>
   <else>else
   <block>{
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   }</block></else></if>
}</block></function>
</unit>
