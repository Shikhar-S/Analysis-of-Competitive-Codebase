<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29785049_64408097.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;deque&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctime&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;random&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;climits&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>

<comment type="line">//#pragma GCC optimize ("O3")</comment>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int i=a;i&lt;b;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fj</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int j=a;j&lt;b;j++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fk</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int k=a;k&lt;b;k++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi1</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int i=a-1;i&gt;=b;i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fj1</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int j=a-1;j&gt;=b;j--)</cpp:value></cpp:define>


<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>char</name></type> <name>ch</name>;</typedef>
<typedef>typedef <type><name>string</name></type> <name>str</name>;</typedef>
<typedef>typedef <type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></type> <name>vl</name>;</typedef>
<typedef>typedef <type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>vvl</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>vvi</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>vpll</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>vpii</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>vvpll</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>vvpii</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name></type> <name>vch</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>vvch</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>&gt;</argument_list></name></type> <name>vs</name>;</typedef>
<typedef>typedef <type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>mll</name>;</typedef>
<typedef>typedef <type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>mii</name>;</typedef>
<typedef>typedef <type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>&gt;</argument_list></name></type> <name>mlch</name>;</typedef>
<typedef>typedef <type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>&gt;</argument_list></name></type> <name>mich</name>;</typedef>
<typedef>typedef <type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>ch</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>mchi</name>;</typedef>
<typedef>typedef <type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>ch</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>mchl</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>pll</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ull</name>;</typedef>


<function><type><name>long</name> <name>long</name></type> <name>powmod</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>mod</name></decl></parameter>)</parameter_list> <block>{
	<if>if <condition>(<expr><name>b</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>a</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
		<block type="pseudo"><return>return <expr><ternary><condition><expr><name>mod</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return></block></then></if>

	<if>if <condition>(<expr><name>b</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
		<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>k</name> <init>= <expr><call><name>powmod</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<return>return <expr><operator>(</operator><name>k</name> <operator>*</operator> <name>k</name><operator>)</operator> <operator>%</operator> <name>mod</name></expr>;</return>
	}</block></then>
	<else>else <block>{
		<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>k</name> <init>= <expr><call><name>powmod</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<return>return <expr><operator>(</operator><operator>(</operator><name>k</name> <operator>*</operator> <name>k</name><operator>)</operator> <operator>%</operator> <name>mod</name> <operator>*</operator> <name>a</name><operator>)</operator> <operator>%</operator> <name>mod</name></expr>;</return>
	}</block></else></if>
}</block></function>

<function><type><name>int</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
	<while>while <condition>(<expr><name>b</name></expr>)</condition> <block>{
		<expr_stmt><expr><name>a</name> <operator>%=</operator> <name>b</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></while>
	<return>return <expr><name>a</name></expr>;</return>
}</block></function>

<function><type><name>bool</name></type> <name>is_prime</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>bound</name> <init>= <expr><call><name>sqrt</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><name>d</name> <operator>&lt;=</operator> <name>bound</name> <operator>&amp;&amp;</operator> <name>n</name> <operator>%</operator> <name>d</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
		<block type="pseudo"><expr_stmt><expr><operator>++</operator><name>d</name></expr>;</expr_stmt></block></while>
	<return>return <expr><name>d</name> <operator>*</operator> <name>d</name> <operator>&gt;</operator> <name>n</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>sort</name><parameter_list>(<parameter><decl><type><name>vl</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>a</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>a</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name>sort</name><parameter_list>(<parameter><decl><type><name>vi</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>a</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>a</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name>sort</name><parameter_list>(<parameter><decl><type><name>vpll</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>a</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>a</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name>sort</name><parameter_list>(<parameter><decl><type><name>vpii</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>a</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>a</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name>rev</name><parameter_list>(<parameter><decl><type><name>vl</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{
	<expr_stmt><expr><call><name>reverse</name><argument_list>(<argument><expr><call><name><name>a</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>a</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name>rev</name><parameter_list>(<parameter><decl><type><name>vi</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{
	<expr_stmt><expr><call><name>reverse</name><argument_list>(<argument><expr><call><name><name>a</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>a</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name>rev</name><parameter_list>(<parameter><decl><type><name>vpll</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{
	<expr_stmt><expr><call><name>reverse</name><argument_list>(<argument><expr><call><name><name>a</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>a</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name>rev</name><parameter_list>(<parameter><decl><type><name>vpii</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{
	<expr_stmt><expr><call><name>reverse</name><argument_list>(<argument><expr><call><name><name>a</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>a</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name>rev</name><parameter_list>(<parameter><decl><type><name>string</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{
	<expr_stmt><expr><call><name>reverse</name><argument_list>(<argument><expr><call><name><name>a</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>a</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MOD</name> <init>= <expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>INF</name> <init>= <expr><literal type="number">1000000050</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAXN</name> <init>= <expr><literal type="number">100010</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>EPS</name> <init>= <expr><literal type="number">1e-9</literal></expr></init></decl>;</decl_stmt>




<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LOCAL</name></cpp:ifdef>
	<expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"input.txt"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAXN</name> <init>= <expr><literal type="number">10000</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
	<expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>tt</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>tt</name></expr>;</expr_stmt>
	<macro><name>fi</name><argument_list>(<argument><literal type="number">0</literal></argument>, <argument>tt</argument>)</argument_list></macro> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>str</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>vi</name></type> <name>cnt</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
		<macro><name>fj</name><argument_list>(<argument><literal type="number">0</literal></argument>, <argument>n</argument>)</argument_list></macro> <block>{
			<expr_stmt><expr><operator>++</operator><name><name>cnt</name><index>[<expr><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name> <operator>-</operator> <literal type="char">'a'</literal></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><operator>++</operator><name><name>cnt</name><index>[<expr><name><name>b</name><index>[<expr><name>j</name></expr>]</index></name> <operator>-</operator> <literal type="char">'a'</literal></expr>]</index></name></expr>;</expr_stmt>
		}</block>
		<decl_stmt><decl><type><name>bool</name></type> <name>pos</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
		<macro><name>fj</name><argument_list>(<argument><literal type="number">0</literal></argument>, <argument><literal type="number">26</literal></argument>)</argument_list></macro> <block>{
			<if>if <condition>(<expr><name><name>cnt</name><index>[<expr><name>j</name></expr>]</index></name> <operator>%</operator> <literal type="number">2</literal> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><name>pos</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt></block></then></if>
		}</block>
		<if>if <condition>(<expr><name>pos</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Yes\n"</literal></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>vpii</name></type> <name>acts</name></decl>;</decl_stmt>
			<macro><name>fj</name><argument_list>(<argument><literal type="number">0</literal></argument>, <argument>n</argument>)</argument_list></macro> <block>{
				<if>if <condition>(<expr><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name><name>b</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
				<macro><name>fk</name><argument_list>(<argument><literal type="number">0</literal></argument>, <argument>n</argument>)</argument_list></macro> <block>{
					<if>if <condition>(<expr><name><name>a</name><index>[<expr><name>k</name></expr>]</index></name> <operator>==</operator> <name><name>b</name><index>[<expr><name>k</name></expr>]</index></name> <operator>||</operator> <name>k</name> <operator>==</operator> <name>j</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
					<if>if <condition>(<expr><name><name>a</name><index>[<expr><name>k</name></expr>]</index></name> <operator>==</operator> <name><name>a</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then> <block>{
						<expr_stmt><expr><call><name><name>acts</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{ <expr><name>k</name> <operator>+</operator> <literal type="number">1</literal></expr>, <expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>
					}</block></then> <elseif>else <if>if <condition>(<expr><name><name>b</name><index>[<expr><name>k</name></expr>]</index></name> <operator>==</operator> <name><name>b</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then> <block>{
						<expr_stmt><expr><call><name><name>acts</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{ <expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>, <expr><name>k</name> <operator>+</operator> <literal type="number">1</literal></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>
					}</block></then></if></elseif>
					<elseif>else <if>if <condition>(<expr><name><name>a</name><index>[<expr><name>k</name></expr>]</index></name> <operator>==</operator> <name><name>b</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then> <block>{
						<expr_stmt><expr><call><name><name>acts</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{ <expr><name>k</name> <operator>+</operator> <literal type="number">1</literal></expr>, <expr><name>k</name> <operator>+</operator> <literal type="number">1</literal></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>acts</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{ <expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>, <expr><name>k</name> <operator>+</operator> <literal type="number">1</literal></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>
					}</block></then></if></elseif>
					<elseif>else <if>if <condition>(<expr><name><name>b</name><index>[<expr><name>k</name></expr>]</index></name> <operator>==</operator> <name><name>a</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then> <block>{
						<expr_stmt><expr><call><name><name>acts</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{ <expr><name>k</name> <operator>+</operator> <literal type="number">1</literal></expr>, <expr><name>k</name> <operator>+</operator> <literal type="number">1</literal></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>acts</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{ <expr><name>k</name> <operator>+</operator> <literal type="number">1</literal></expr>, <expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>
					}</block></then></if></elseif></if>
				}</block>
			}</block>
			<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name><name>acts</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
			<for>for <control>(<init><decl><type><name>auto</name></type> <name>p</name> <range>: <expr><name>acts</name></expr></range></decl></init>)</control>
				<block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>p</name><operator>.</operator><name>first</name></name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal> <operator>&lt;&lt;</operator>  <name><name>p</name><operator>.</operator><name>second</name></name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt></block></for>
		}</block></then> <else>else <block>{
			<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No\n"</literal></expr>;</expr_stmt>
		}</block></else></if>
	}</block>
}</block></function></unit>
