<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29784162_64412230.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>solve</name><parameter_list>(<parameter><decl><type><name>string</name> <modifier>&amp;</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>string</name> <modifier>&amp;</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>count</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>diff_idx_vec</name></decl>;</decl_stmt>
    
    <for>for <control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
    <block>{
        <if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name><name>diff_idx_vec</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            
            <expr_stmt><expr><name><name>count</name><index>[<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="char">'a'</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>count</name><index>[<expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="char">'a'</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
        }</block></then></if>
    }</block></for>
    
    <decl_stmt><decl><type><name>bool</name></type> <name>valid</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
    
    <for>for <control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">26</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
    <block>{
        <if>if <condition>(<expr><name><name>count</name><index>[<expr><name>i</name></expr>]</index></name> <operator>%</operator> <literal type="number">2</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>valid</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
            <break>break;</break>
        }</block></then></if>
    }</block></for>
    
    <if>if <condition>(<expr><operator>!</operator><name>valid</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
        <return>return;</return>
    }</block></then></if>
    
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Yes"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    
    <decl_stmt><decl><type><name>ll</name></type> <name>len</name> <init>= <expr><call><name><name>diff_idx_vec</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt; <argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>ans</name></decl>;</decl_stmt>
    
    <for>for <control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>len</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
    <block>{
        <if>if <condition>(<expr><name><name>s</name><index>[<expr><name><name>diff_idx_vec</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>==</operator> <name><name>t</name><index>[<expr><name><name>diff_idx_vec</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>)</condition><then>
        <block>{
            <continue>continue;</continue>
        }</block></then></if>
        
        <decl_stmt><decl><type><name>ll</name></type> <name>j</name></decl>;</decl_stmt>
        
        <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
        <block>{
            <if>if <condition>(<expr><name><name>t</name><index>[<expr><name><name>diff_idx_vec</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name> <operator>==</operator> <name><name>s</name><index>[<expr><name><name>diff_idx_vec</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>)</condition><then>
            <block>{
                <break>break;</break>
            }</block></then></if>
        }</block></for>
        
        <if>if <condition>(<expr><name>j</name> <operator>==</operator> <name>len</name></expr>)</condition><then>
        <block>{
            <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
            <block>{
                <if>if <condition>(<expr><name><name>s</name><index>[<expr><name><name>diff_idx_vec</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>==</operator> <name><name>s</name><index>[<expr><name><name>diff_idx_vec</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name></expr>)</condition><then>
                <block>{
                    <break>break;</break>
                }</block></then></if>
            }</block></for>
            
            <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name><name>diff_idx_vec</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>t</name><index>[<expr><name><name>diff_idx_vec</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            
            <expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name><name>diff_idx_vec</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>diff_idx_vec</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            
            <continue>continue;</continue>
        }</block></then></if>
        
        <if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>j</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name><name>diff_idx_vec</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>t</name><index>[<expr><name><name>diff_idx_vec</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name><name>diff_idx_vec</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>t</name><index>[<expr><name><name>diff_idx_vec</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            
            <expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name><name>diff_idx_vec</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>diff_idx_vec</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name><name>diff_idx_vec</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>diff_idx_vec</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></for>
    
    <decl_stmt><decl><type><name>ll</name></type> <name>ans_size</name> <init>= <expr><call><name><name>ans</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans_size</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    
    <for>for <control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ans_size</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    }</block></for>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>k</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
    
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
    
    <decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
    
    <while>while<condition>(<expr><name>k</name><operator>--</operator></expr>)</condition>
    <block>{
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
        
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>s</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>solve</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></while>
    
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
