<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29771964_64403278.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REP</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=0,i##_len=(n);i&lt;i##_len;++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RREP</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=int(n)-1;i&gt;=0;--i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=int(a);i&lt;int(b);++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rrep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=int(a)-1;i&gt;=int(b);--i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>All</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x).begin(),(x).end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rAll</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x).rbegin(),(x).rend()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ITR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(auto i=(x).begin();i!=(x).end();++i)</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<using>using <name>Graph</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type></init>;</using>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>P</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vi</name></expr></argument>&gt;</argument_list></name></type> <name>vvi</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>vl</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vl</name></expr></argument>&gt;</argument_list></name></type> <name>vvl</name>;</typedef>
<decl_stmt><decl><specifier>constexpr</specifier> <type><name>ll</name></type> <name>mod</name> <init>= <expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><specifier>constexpr</specifier> <type><name>double</name></type> <name>eps</name> <init>= <expr><literal type="number">1e-9</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>PI</name> <init>= <expr><call><name>acos</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list>;</function_decl>

<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name>bool</name></type> <name>chmax</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><name>a</name><operator>&lt;</operator><name>b</name></expr>)</condition><then><block>{
        <expr_stmt><expr><name>a</name><operator>=</operator><name>b</name></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></then></if>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name>bool</name></type> <name>chmin</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><name>b</name><operator>&lt;</operator><name>a</name></expr>)</condition><then><block>{
        <expr_stmt><expr><name>a</name><operator>=</operator><name>b</name></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></then></if>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
}</block></function>
<function><type><name>ll</name></type> <name>bisearch</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>ok</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>ng</name></decl></parameter>,<parameter><decl><type><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>bool</name><operator>(</operator><name>ll</name><operator>)</operator></expr></argument>&gt;</argument_list></name></type> <name>check</name></decl></parameter>)</parameter_list><block>{
    <while>while<condition>(<expr><call><name>abs</name><argument_list>(<argument><expr><name>ok</name><operator>-</operator><name>ng</name></expr></argument>)</argument_list></call><operator>&gt;</operator><literal type="number">1</literal></expr>)</condition><block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>mid</name><init>=<expr><operator>(</operator><name>ok</name><operator>+</operator><name>ng</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><call><name>check</name><argument_list>(<argument><expr><name>mid</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ok</name><operator>=</operator><name>mid</name></expr>;</expr_stmt></block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><name>ng</name><operator>=</operator><name>mid</name></expr>;</expr_stmt></block></else></if>
    }</block></while>
    <return>return <expr><name>ok</name></expr>;</return>
}</block></function>
<function><type><name>ll</name></type> <name>SQRT</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name>ll</name></type> <name>s</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> <while>while<condition>(<expr><name>s</name><operator>*</operator><name>s</name><operator>&gt;</operator><name>n</name><operator>||</operator><name>n</name><operator>&gt;=</operator><operator>(</operator><name>s</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><operator>(</operator><name>s</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><block>{ <expr_stmt><expr><name>s</name><operator>=</operator><operator>(</operator><name>n</name><operator>/</operator><name>s</name><operator>+</operator><name>s</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt> }</block></while> <return>return <expr><name>s</name></expr>;</return>}</block></function>
<function><type><name>ll</name></type> <name>roundup</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>div</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><name>n</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><operator>(</operator><name>n</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><name>div</name><operator>+</operator><literal type="number">1</literal></expr>;</return></block></then>
    <else>else <block type="pseudo"><return>return <expr><name>n</name><operator>/</operator><name>div</name></expr>;</return></block></else></if>    
}</block></function>
<function><type><name>bool</name></type> <name>square</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name>ll</name></type> <name>n</name><init>=<expr><call><name>SQRT</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><return>return <expr><name>a</name><operator>==</operator><name>n</name><operator>*</operator><name>n</name></expr>;</return>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>T</name></type> <name>npow</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name>T</name></type> <name>ans</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>n</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{
        <if>if<condition>(<expr><name>n</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>=</operator> <name>ans</name><operator>*</operator><name>x</name></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name><operator>*</operator><name>x</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>n</name> <operator>=</operator> <name>n</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><name>ans</name></expr>;</return>
}</block></function>
<function><type><name>ll</name></type> <name>mpow</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> <expr_stmt><expr><name>x</name><operator>%=</operator><name>mod</name></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>n</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{
        <if>if<condition>(<expr><name>n</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>=</operator> <name>ans</name><operator>*</operator><name>x</name> <operator>%</operator> <name>mod</name></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name><operator>*</operator><name>x</name> <operator>%</operator> <name>mod</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>n</name> <operator>=</operator> <name>n</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><name>ans</name></expr>;</return>
}</block></function>
<function><type><name>ll</name></type> <name>inv_mod</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>)</parameter_list><block>{<return>return <expr><call><name>mpow</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>mod</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return>}</block></function>
<function><type><name>int</name></type> <name>digitsum</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>N</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><name>N</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>ret</name><operator>+=</operator><call><name>digitsum</name><argument_list>(<argument><expr><name>N</name><operator>/</operator><name>a</name></expr></argument>,<argument><expr><name>a</name></expr></argument>)</argument_list></call><operator>+</operator><name>N</name><operator>%</operator><name>a</name></expr>;</expr_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
}</block></function>
<function><type><name>ll</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{<return>return <expr><ternary><condition><expr><name>y</name></expr> ?</condition><then> <expr><call><name>gcd</name><argument_list>(<argument><expr><name>y</name></expr></argument>,<argument><expr><name>x</name><operator>%</operator><name>y</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>x</name></expr></else></ternary></expr>;</return>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>ll</name></type> <name>lcm</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{<return>return <expr><name>x</name><operator>/</operator><call><name>gcd</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call><operator>*</operator><name>y</name></expr>;</return>}</block></function>
<function><type><name>void</name></type> <name>YN</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>flg</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name><operator>&lt;&lt;</operator><operator>(</operator><ternary><condition><expr><name>flg</name></expr>?</condition><then><expr><literal type="string">"YES"</literal></expr></then><else>:<expr><literal type="string">"NO"</literal></expr></else></ternary><operator>)</operator><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>}</block></function>
<function><type><name>void</name></type> <name>Yn</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>flg</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name><operator>&lt;&lt;</operator><operator>(</operator><ternary><condition><expr><name>flg</name></expr>?</condition><then><expr><literal type="string">"Yes"</literal></expr></then><else>:<expr><literal type="string">"No"</literal></expr></else></ternary><operator>)</operator><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>}</block></function>
<function><type><name>void</name></type> <name>yn</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>flg</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name><operator>&lt;&lt;</operator><operator>(</operator><ternary><condition><expr><name>flg</name></expr>?</condition><then><expr><literal type="string">"yes"</literal></expr></then><else>:<expr><literal type="string">"no"</literal></expr></else></ternary><operator>)</operator><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>}</block></function>
<function><type><name>ll</name></type> <name>manhattan</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>P</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>P</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list><block>{<return>return <expr><call><name>llabs</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>first</name></name><operator>-</operator><name><name>b</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call><operator>+</operator><call><name>llabs</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>second</name></name><operator>-</operator><name><name>b</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</return>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>V</name></parameter>&gt;</parameter_list></template> 
<type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>Zalgo</name><parameter_list>(<parameter><decl><type><name>V</name></type> <name>s</name></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>A</name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
        <while>while <condition>(<expr><name>i</name><operator>+</operator><name>j</name> <operator>&lt;</operator> <call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name><name>s</name><index>[<expr><name>i</name><operator>+</operator><name>j</name></expr>]</index></name></expr>)</condition> <block type="pseudo"><expr_stmt><expr><operator>++</operator><name>j</name></expr>;</expr_stmt></block></while>
        <expr_stmt><expr><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>j</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{ <expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt> <continue>continue;</continue>}</block></then></if>
    <decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>i</name><operator>+</operator><name>k</name> <operator>&lt;</operator> <call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>k</name><operator>+</operator><name><name>A</name><index>[<expr><name>k</name></expr>]</index></name> <operator>&lt;</operator> <name>j</name></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name><name>A</name><index>[<expr><name>i</name><operator>+</operator><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>A</name><index>[<expr><name>k</name></expr>]</index></name></expr><operator>,</operator> <expr><operator>++</operator><name>k</name></expr>;</expr_stmt></block></while>
    <expr_stmt><expr><name>i</name> <operator>+=</operator> <name>k</name></expr>;</expr_stmt> <expr_stmt><expr><name>j</name> <operator>-=</operator> <name>k</name></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><name>A</name></expr>;</return>
}</block></function>
<class>class <name>mint</name> <block>{<private type="default">
 </private><private>private:
  <decl_stmt><decl><type><name>ll</name></type> <name>_num</name></decl>,<decl><type ref="prev"/><name>_mod</name></decl>;</decl_stmt>
  <function><type><name>mint</name></type> <name>set</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>num</name></decl></parameter>)</parameter_list><block>{ 
      <expr_stmt><expr><name>_num</name> <operator>=</operator> <name>num</name></expr> ;</expr_stmt>
      <if>if<condition>(<expr><name>_num</name><operator>&gt;=</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>_num</name><operator>%=</operator><name>_mod</name></expr>;</expr_stmt></block></then>
      <else>else <block type="pseudo"><expr_stmt><expr><name>_num</name><operator>+=</operator><operator>(</operator><literal type="number">1</literal><operator>-</operator><operator>(</operator><name>_num</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><name>_mod</name><operator>)</operator><operator>*</operator><name>_mod</name></expr>;</expr_stmt></block></else></if> 
      <return>return <expr><operator>*</operator><name>this</name></expr>;</return>
  }</block></function>
  <function><type><name>ll</name></type> <name>_mpow</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{ <comment type="line">//x^n(mod) âæ®éã«pow(x,n)ã§ã¯æº¢ãã¦ãã¾ãããï¼éæmodè¨ç® 2åç´¯ä¹æ³ã ããæ©ã</comment>
    <decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>n</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{
        <if>if<condition>(<expr><name>n</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>=</operator> <name>ans</name><operator>*</operator><name>x</name> <operator>%</operator> <name>_mod</name></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name><operator>*</operator><name>x</name> <operator>%</operator> <name>_mod</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>n</name> <operator>=</operator> <name>n</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><name>ans</name></expr>;</return>
  }</block></function>
  <function><type><name>ll</name></type> <name>imod</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{<return>return <expr><call><name>_mpow</name><argument_list>(<argument><expr><name>n</name></expr></argument> , <argument><expr><name>_mod</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return>}</block></function>
 </private><public>public:
  <constructor><name>mint</name><parameter_list>()</parameter_list><block>{ <expr_stmt><expr><name>_num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt><expr_stmt><expr><name>_mod</name><operator>=</operator><name>mod</name></expr>;</expr_stmt> }</block></constructor>
  <constructor><name>mint</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>num</name></decl></parameter>)</parameter_list><block>{ <expr_stmt><expr><name>_mod</name> <operator>=</operator> <name>mod</name></expr>;</expr_stmt> <expr_stmt><expr><name>_num</name> <operator>=</operator> <operator>(</operator><name>num</name><operator>+</operator><operator>(</operator><literal type="number">1LL</literal><operator>&lt;&lt;</operator><literal type="number">25</literal><operator>)</operator><operator>*</operator><name>mod</name><operator>)</operator> <operator>%</operator> <name>mod</name></expr>;</expr_stmt> }</block></constructor>
  <constructor><name>mint</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>num</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>M</name></decl></parameter>)</parameter_list><block>{ <expr_stmt><expr><name>_mod</name><operator>=</operator><name>M</name></expr>;</expr_stmt><expr_stmt><expr><name>_num</name><operator>=</operator><operator>(</operator><name>num</name><operator>+</operator><operator>(</operator><literal type="number">1LL</literal><operator>&lt;&lt;</operator><literal type="number">25</literal><operator>)</operator><operator>*</operator><name>mod</name><operator>)</operator><operator>%</operator><name>_mod</name></expr>;</expr_stmt> }</block></constructor>
  <constructor><name>mint</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>mint</name> <modifier>&amp;</modifier></type><name>cp</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name>_num</name><operator>=</operator><name><name>cp</name><operator>.</operator><name>_num</name></name></expr>;</expr_stmt><expr_stmt><expr><name>_mod</name><operator>=</operator><name><name>cp</name><operator>.</operator><name>_mod</name></name></expr>;</expr_stmt>}</block></constructor>
  <function type="operator"><type><name>mint</name></type> <name>operator<name>=</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ll</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{ <return>return <expr><call><name>set</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function type="operator"><type><name>mint</name></type> <name>operator<name>+</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ll</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{ <return>return <expr><call><name>mint</name><argument_list>(<argument><expr><name>_num</name> <operator>+</operator> <operator>(</operator><name>x</name> <operator>%</operator> <name>_mod</name><operator>)</operator></expr></argument> , <argument><expr><name>_mod</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function type="operator"><type><name>mint</name></type> <name>operator<name>-</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ll</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{ <return>return <expr><call><name>mint</name><argument_list>(<argument><expr><name>_num</name> <operator>-</operator> <operator>(</operator><name>x</name> <operator>%</operator> <name>_mod</name><operator>)</operator></expr></argument>, <argument><expr><name>_mod</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function type="operator"><type><name>mint</name></type> <name>operator<name>*</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ll</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{ <return>return <expr><call><name>mint</name><argument_list>(<argument><expr><name>_num</name> <operator>*</operator> <operator>(</operator><name>x</name> <operator>%</operator> <name>_mod</name><operator>)</operator></expr></argument> , <argument><expr><name>_mod</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function type="operator"><type><name>mint</name></type> <name>operator<name>/</name></name> <parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{ <return>return <expr><call><name>mint</name><argument_list>(<argument><expr><name>_num</name> <operator>*</operator> <call><name>imod</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument> , <argument><expr><name>_mod</name></expr></argument>)</argument_list></call></expr>;</return>}</block></function>
  <function type="operator"><type><name>mint</name></type> <name>operator<name>+=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ll</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{ <return>return <expr><call><name>set</name><argument_list>(<argument><expr><name>_num</name> <operator>+</operator> <operator>(</operator><name>x</name> <operator>%</operator> <name>_mod</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function type="operator"><type><name>mint</name></type> <name>operator<name>-=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ll</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{ <return>return <expr><call><name>set</name><argument_list>(<argument><expr><name>_num</name> <operator>-</operator> <operator>(</operator><name>x</name> <operator>%</operator> <name>_mod</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function type="operator"><type><name>mint</name></type> <name>operator<name>*=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ll</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{ <return>return <expr><call><name>set</name><argument_list>(<argument><expr><name>_num</name> <operator>*</operator> <operator>(</operator><name>x</name> <operator>%</operator> <name>_mod</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function type="operator"><type><name>mint</name></type> <name>operator<name>/=</name></name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{ <return>return <expr><call><name>set</name><argument_list>(<argument><expr><name>_num</name> <operator>*</operator> <call><name>imod</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>}</block></function>
  <function type="operator"><type><name>mint</name></type> <name>operator<name>+</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>mint</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list><block>{ <return>return <expr><call><name>mint</name><argument_list>(<argument><expr><name>_num</name> <operator>+</operator> <name><name>x</name><operator>.</operator><name>_num</name></name></expr></argument> , <argument><expr><name>_mod</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function type="operator"><type><name>mint</name></type> <name>operator<name>-</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>mint</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list><block>{ <return>return <expr><call><name>mint</name><argument_list>(<argument><expr><name>_num</name> <operator>-</operator> <name><name>x</name><operator>.</operator><name>_num</name></name></expr></argument> , <argument><expr><name>_mod</name></expr></argument>)</argument_list></call></expr>;</return>}</block></function>
  <function type="operator"><type><name>mint</name></type> <name>operator<name>*</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>mint</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list><block>{ <return>return <expr><call><name>mint</name><argument_list>(<argument><expr><name>_num</name> <operator>*</operator> <name><name>x</name><operator>.</operator><name>_num</name></name></expr></argument> , <argument><expr><name>_mod</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function type="operator"><type><name>mint</name></type> <name>operator<name>/</name></name> <parameter_list>(<parameter><decl><type><name>mint</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{ <return>return <expr><call><name>mint</name><argument_list>(<argument><expr><name>_num</name> <operator>*</operator> <call><name>imod</name><argument_list>(<argument><expr><name><name>x</name><operator>.</operator><name>_num</name></name></expr></argument>)</argument_list></call></expr></argument> , <argument><expr><name>_mod</name></expr></argument>)</argument_list></call></expr>;</return>}</block></function>
  <function type="operator"><type><name>mint</name></type> <name>operator<name>+=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>mint</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list><block>{ <return>return <expr><call><name>set</name><argument_list>(<argument><expr><name>_num</name> <operator>+</operator> <name><name>x</name><operator>.</operator><name>_num</name></name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function type="operator"><type><name>mint</name></type> <name>operator<name>-=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>mint</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list><block>{ <return>return <expr><call><name>set</name><argument_list>(<argument><expr><name>_num</name> <operator>-</operator> <name><name>x</name><operator>.</operator><name>_num</name></name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function type="operator"><type><name>mint</name></type> <name>operator<name>*=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>mint</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list><block>{ <return>return <expr><call><name>set</name><argument_list>(<argument><expr><name>_num</name> <operator>*</operator> <name><name>x</name><operator>.</operator><name>_num</name></name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function type="operator"><type><name>mint</name></type> <name>operator<name>/=</name></name><parameter_list>(<parameter><decl><type><name>mint</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{ <return>return <expr><call><name>set</name><argument_list>(<argument><expr><name>_num</name> <operator>*</operator> <call><name>imod</name><argument_list>(<argument><expr><name><name>x</name><operator>.</operator><name>_num</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>}</block></function>

  <function type="operator"><type><name>bool</name></type> <name>operator<name>&lt;</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>mint</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list><specifier>const</specifier><block>{<return>return <expr><name>_num</name><operator>&lt;</operator><name><name>x</name><operator>.</operator><name>_num</name></name></expr>;</return>}</block></function>
  <function type="operator"><type><name>bool</name></type> <name>operator<name>==</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>mint</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list><specifier>const</specifier><block>{<return>return <expr><name>_num</name><operator>==</operator><name><name>x</name><operator>.</operator><name>_num</name></name></expr>;</return>}</block></function>
  <function type="operator"><type><name>bool</name></type> <name>operator<name>&gt;</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>mint</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list><specifier>const</specifier><block>{<return>return <expr><name>_num</name><operator>&gt;</operator><name><name>x</name><operator>.</operator><name>_num</name></name></expr>;</return>}</block></function>

  <friend>friend <function type="operator"><type><name>mint</name></type> <name>operator<name>+</name></name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>mint</name> <modifier>&amp;</modifier></type><name>m</name></decl></parameter>)</parameter_list><block>{<return>return <expr><call><name>mint</name><argument_list>(<argument><expr><name><name>m</name><operator>.</operator><name>_num</name></name> <operator>+</operator> <operator>(</operator><name>x</name> <operator>%</operator> <name><name>m</name><operator>.</operator><name>_mod</name></name><operator>)</operator></expr></argument> , <argument><expr><name><name>m</name><operator>.</operator><name>_mod</name></name></expr></argument>)</argument_list></call></expr>;</return>}</block></function></friend>
  <friend>friend <function type="operator"><type><name>mint</name></type> <name>operator<name>-</name></name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>mint</name> <modifier>&amp;</modifier></type><name>m</name></decl></parameter>)</parameter_list><block>{<return>return <expr><call><name>mint</name><argument_list>( <argument><expr><operator>(</operator><name>x</name> <operator>%</operator> <name><name>m</name><operator>.</operator><name>_mod</name></name><operator>)</operator> <operator>-</operator> <name><name>m</name><operator>.</operator><name>_num</name></name></expr></argument> , <argument><expr><name><name>m</name><operator>.</operator><name>_mod</name></name></expr></argument>)</argument_list></call></expr>;</return>}</block></function></friend>
  <friend>friend <function type="operator"><type><name>mint</name></type> <name>operator<name>*</name></name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>mint</name> <modifier>&amp;</modifier></type><name>m</name></decl></parameter>)</parameter_list><block>{<return>return <expr><call><name>mint</name><argument_list>(<argument><expr><name><name>m</name><operator>.</operator><name>_num</name></name> <operator>*</operator> <operator>(</operator><name>x</name> <operator>%</operator> <name><name>m</name><operator>.</operator><name>_mod</name></name><operator>)</operator></expr></argument> , <argument><expr><name><name>m</name><operator>.</operator><name>_mod</name></name></expr></argument>)</argument_list></call></expr>;</return>}</block></function></friend>
  <friend>friend <function type="operator"><type><name>mint</name></type> <name>operator<name>/</name></name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>mint</name></type> <name>m</name></decl></parameter>)</parameter_list><block>{<return>return <expr><call><name>mint</name><argument_list>(<argument><expr><call><name><name>m</name><operator>.</operator><name>imod</name></name><argument_list>(<argument><expr><name><name>m</name><operator>.</operator><name>_num</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>x</name></expr></argument> , <argument><expr><name><name>m</name><operator>.</operator><name>_mod</name></name></expr></argument>)</argument_list></call></expr>;</return>}</block></function></friend>

  <function type="operator"><specifier>explicit</specifier> <name>operator <name>ll</name></name><parameter_list>()</parameter_list> <block>{ <return>return <expr><name>_num</name></expr>;</return> }</block></function>
  <function type="operator"><specifier>explicit</specifier> <name>operator <name>int</name></name><parameter_list>()</parameter_list> <block>{ <return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>_num</name></expr>;</return> }</block></function>

  <friend>friend <function type="operator"><type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name> <modifier>&amp;</modifier></type><name>os</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mint</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list><block>{ <name>os</name> <expr_stmt><expr><operator>&lt;&lt;</operator> <name><name>x</name><operator>.</operator><name>_num</name></name></expr>;</expr_stmt> <return>return <expr><name>os</name></expr>;</return> }</block></function></friend>
  <friend>friend <function type="operator"><type><name>istream</name><modifier>&amp;</modifier></type> <name>operator<name>&gt;&gt;</name></name><parameter_list>(<parameter><decl><type><name>istream</name> <modifier>&amp;</modifier></type><name>is</name></decl></parameter>, <parameter><decl><type><name>mint</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name>ll</name></type> <name>val</name></decl>;</decl_stmt> <name>is</name><expr_stmt><expr><operator>&gt;&gt;</operator><name>val</name></expr>;</expr_stmt> <name><name>x</name><operator>.</operator><name>set</name></name><expr_stmt><expr><operator>(</operator><name>val</name><operator>)</operator></expr>;</expr_stmt> <return>return <expr><name>is</name></expr>;</return>}</block></function></friend>
</public>}</block>;</class>
<class><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> class <name>MAT</name><block>{<private type="default">
 </private><private>private:
    <decl_stmt><decl><type><name>int</name></type> <name>row</name></decl>,<decl><type ref="prev"/><name>col</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>_A</name></decl>;</decl_stmt>
    <function><type><name>MAT</name></type> <name>set</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>A</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name>_A</name> <operator>=</operator> <name>A</name></expr> ;</expr_stmt> <return>return <expr><operator>*</operator><name>this</name></expr>;</return>}</block></function>
 </private><public>public:
    <constructor><name>MAT</name><parameter_list>()</parameter_list><block>{ }</block></constructor>
    <constructor><name>MAT</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>m</name></decl></parameter>)</parameter_list><block>{
        <if>if<condition>(<expr><name>n</name><operator>&lt;</operator><literal type="number">1</literal> <operator>||</operator> <name>m</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then><block>{<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"err Matrix::Matrix"</literal> <operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt><expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></then></if>
        <expr_stmt><expr><name>row</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>col</name> <operator>=</operator> <ternary><condition><expr><name>m</name></expr>?</condition><then><expr><name>m</name></expr></then><else>:<expr><name>n</name></expr></else></ternary></expr>;</expr_stmt><comment type="line">//m=0ã®ã¨ãåä½è¡åãä½ã</comment>
        <macro><name>REP</name><argument_list>(<argument>i</argument>,<argument>row</argument>)</argument_list></macro><block>{
            <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>a</name><argument_list>(<argument><expr><name>col</name></expr></argument>,<argument><expr><literal type="number">0.0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>_A</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <comment type="line">//  å¤ã®åæå</comment>
        <if>if<condition>(<expr><name>m</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><macro><name>REP</name><argument_list>(<argument>i</argument>,<argument>n</argument>)</argument_list></macro> <expr_stmt><expr><name><name>_A</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">1.0</literal></expr>;</expr_stmt></block></then></if>
    }</block></constructor>
    <constructor><name>MAT</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>MAT</name> <modifier>&amp;</modifier></type><name>cp</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name>_A</name><operator>=</operator><name><name>cp</name><operator>.</operator><name>_A</name></name></expr>;</expr_stmt><expr_stmt><expr><name>row</name><operator>=</operator><name><name>cp</name><operator>.</operator><name>row</name></name></expr>;</expr_stmt><expr_stmt><expr><name>col</name><operator>=</operator><name><name>cp</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>}</block></constructor>
    <function type="operator"><type><name>T</name><modifier>*</modifier></type> <name>operator<name>[]</name></name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list><block>{<return>return <expr><name><name>_A</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>data</name><argument_list>()</argument_list></call></expr>;</return>}</block></function>
    <function type="operator"><type><name>MAT</name></type> <name>operator<name>=</name></name> <parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<return>return <expr><call><name>set</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>}</block></function>
    <function type="operator"><type><name>MAT</name></type> <name>operator<name>+</name></name> <parameter_list>(<parameter><decl><type><name>MAT</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
        <if>if<condition>(<expr><name>row</name><operator>!=</operator><name><name>x</name><operator>.</operator><name>row</name></name> <operator>||</operator> <name>col</name><operator>!=</operator><name><name>x</name><operator>.</operator><name>col</name></name></expr>)</condition><then><block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"err Matrix::operator+"</literal> <operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"  not equal matrix size"</literal> <operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><name>MAT</name></type> <name>r</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <macro><name>REP</name><argument_list>(<argument>i</argument>,<argument>row</argument>)</argument_list></macro> <macro><name>REP</name><argument_list>(<argument>j</argument>,<argument>col</argument>)</argument_list></macro> <expr_stmt><expr><name><name>r</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><name><name>_A</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>+</operator><name><name>x</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
        <return>return <expr><name>r</name></expr>;</return>
    }</block></function>
    <function type="operator"><type><name>MAT</name></type> <name>operator<name>-</name></name> <parameter_list>(<parameter><decl><type><name>MAT</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
        <if>if<condition>(<expr><name>row</name><operator>!=</operator><name><name>x</name><operator>.</operator><name>row</name></name> <operator>||</operator> <name>col</name><operator>!=</operator><name><name>x</name><operator>.</operator><name>col</name></name></expr>)</condition><then><block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"err Matrix::operator-"</literal> <operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"  not equal matrix size"</literal> <operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><name>MAT</name></type> <name>r</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <macro><name>REP</name><argument_list>(<argument>i</argument>,<argument>row</argument>)</argument_list></macro> <macro><name>REP</name><argument_list>(<argument>j</argument>,<argument>col</argument>)</argument_list></macro> <expr_stmt><expr><name><name>r</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><name><name>_A</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>-</operator><name><name>x</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
        <return>return <expr><name>r</name></expr>;</return>
    }</block></function>
    <function type="operator"><type><name>MAT</name></type> <name>operator<name>*</name></name> <parameter_list>(<parameter><decl><type><name>MAT</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
        <if>if<condition>(<expr><name>col</name><operator>!=</operator><name><name>x</name><operator>.</operator><name>row</name></name></expr>)</condition><then><block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"err Matrix::operator*"</literal> <operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"  not equal matrix size"</literal> <operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><name>MAT</name></type> <name>r</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name><name>x</name><operator>.</operator><name>col</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <macro><name>REP</name><argument_list>(<argument>i</argument>,<argument>row</argument>)</argument_list></macro> <macro><name>REP</name><argument_list>(<argument>j</argument>,<argument>x.col</argument>)</argument_list></macro> <macro><name>REP</name><argument_list>(<argument>k</argument>,<argument>col</argument>)</argument_list></macro> <expr_stmt><expr><name><name>r</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>+=</operator><name><name>_A</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name><operator>*</operator><name><name>x</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
        <return>return <expr><name>r</name></expr>;</return>
    }</block></function>
    <function type="operator"><type><name>MAT</name></type> <name>operator<name>/</name></name> <parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>)</parameter_list><block>{
        <decl_stmt><decl><type><name>MAT</name></type> <name>r</name><argument_list>(<argument><expr><name>row</name></expr></argument>,<argument><expr><name>col</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <macro><name>REP</name><argument_list>(<argument>i</argument>,<argument>row</argument>)</argument_list></macro> <macro><name>REP</name><argument_list>(<argument>j</argument>,<argument>col</argument>)</argument_list></macro> <expr_stmt><expr><name><name>r</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><name><name>_A</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>/</operator><name>a</name></expr>;</expr_stmt>
        <return>return <expr><name>r</name></expr>;</return>
    }</block></function>
    <function type="operator"><type><name>MAT</name></type> <name>operator<name>^</name></name> <parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{
        <if>if<condition>(<expr><name>row</name><operator>!=</operator><name>col</name></expr>)</condition><then><block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"err Matrix::operator^"</literal> <operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"  not equal matrix size"</literal> <operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><name>MAT</name></type> <name>r</name><argument_list>(<argument><expr><name>row</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>,<decl><type ref="prev"/><name>A</name><init>=<expr><operator>*</operator><name>this</name></expr></init></decl>;</decl_stmt>
        <while>while<condition>(<expr><name>n</name></expr>)</condition><block>{
            <if>if<condition>(<expr><name>n</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>r</name> <operator>*=</operator> <name>A</name></expr>;</expr_stmt></block></then></if>
            <expr_stmt><expr><name>A</name><operator>*=</operator><name>A</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>n</name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr>;</expr_stmt>
        }</block></while>
        <return>return <expr><name>r</name></expr>;</return>
    }</block></function>
    <function type="operator"><type><name>MAT</name></type> <name>operator<name>+=</name></name> <parameter_list>(<parameter><decl><type><name>MAT</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
        <if>if<condition>(<expr><name>row</name><operator>!=</operator><name><name>x</name><operator>.</operator><name>row</name></name> <operator>||</operator> <name>col</name><operator>!=</operator><name><name>x</name><operator>.</operator><name>col</name></name></expr>)</condition><then><block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"err Matrix::operator+="</literal> <operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"  not equal matrix size"</literal> <operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><name>MAT</name></type> <name>r</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <macro><name>REP</name><argument_list>(<argument>i</argument>,<argument>row</argument>)</argument_list></macro> <macro><name>REP</name><argument_list>(<argument>j</argument>,<argument>col</argument>)</argument_list></macro> <expr_stmt><expr><name><name>r</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><name><name>_A</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>+</operator><name><name>x</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
        <return>return <expr><call><name>set</name><argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>_A</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function type="operator"><type><name>MAT</name></type> <name>operator<name>-=</name></name> <parameter_list>(<parameter><decl><type><name>MAT</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
        <if>if<condition>(<expr><name>row</name><operator>!=</operator><name><name>x</name><operator>.</operator><name>row</name></name> <operator>||</operator> <name>col</name><operator>!=</operator><name><name>x</name><operator>.</operator><name>col</name></name></expr>)</condition><then><block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"err Matrix::operator-="</literal> <operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"  not equal matrix size"</literal> <operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><name>MAT</name></type> <name>r</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <macro><name>REP</name><argument_list>(<argument>i</argument>,<argument>row</argument>)</argument_list></macro> <macro><name>REP</name><argument_list>(<argument>j</argument>,<argument>col</argument>)</argument_list></macro> <expr_stmt><expr><name><name>r</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><name><name>_A</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>-</operator><name><name>x</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
        <return>return <expr><call><name>set</name><argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>_A</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function type="operator"><type><name>MAT</name></type> <name>operator<name>*=</name></name> <parameter_list>(<parameter><decl><type><name>MAT</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
        <if>if<condition>(<expr><name>col</name><operator>!=</operator><name><name>x</name><operator>.</operator><name>row</name></name></expr>)</condition><then><block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"err Matrix::operator*"</literal> <operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"  not equal matrix size"</literal> <operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><name>MAT</name></type> <name>r</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name><name>x</name><operator>.</operator><name>col</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <macro><name>REP</name><argument_list>(<argument>i</argument>,<argument>row</argument>)</argument_list></macro> <macro><name>REP</name><argument_list>(<argument>j</argument>,<argument>x.col</argument>)</argument_list></macro> <macro><name>REP</name><argument_list>(<argument>k</argument>,<argument>col</argument>)</argument_list></macro> <expr_stmt><expr><name><name>r</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>+=</operator><name><name>_A</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name><operator>*</operator><name><name>x</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
        <return>return <expr><call><name>set</name><argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>_A</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function type="operator"><type><name>MAT</name></type> <name>operator<name>/=</name></name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>)</parameter_list><block>{
        <decl_stmt><decl><type><name>MAT</name></type> <name>r</name><argument_list>(<argument><expr><name>row</name></expr></argument>,<argument><expr><name>col</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <macro><name>REP</name><argument_list>(<argument>i</argument>,<argument>row</argument>)</argument_list></macro> <macro><name>REP</name><argument_list>(<argument>j</argument>,<argument>col</argument>)</argument_list></macro> <expr_stmt><expr><name><name>r</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><name><name>_A</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>/</operator><name>a</name></expr>;</expr_stmt>
        <return>return <expr><name>r</name></expr>;</return>
    }</block></function>

    <friend>friend <function type="operator"><type><name>MAT</name></type> <name>operator<name>*</name></name> <parameter_list>(<parameter><decl><type><name>T</name></type> <name>n</name></decl></parameter>,<parameter><decl><type><name>MAT</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{
        <decl_stmt><decl><type><name>MAT</name></type> <name>r</name><argument_list>(<argument><expr><name><name>x</name><operator>.</operator><name>row</name></name></expr></argument>,<argument><expr><name><name>x</name><operator>.</operator><name>col</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <name>REP</name><expr_stmt><expr><operator>(</operator><name>i</name><operator>,</operator><name><name>x</name><operator>.</operator><name>row</name></name><operator>)</operator> <macro><name>REP</name><argument_list>(<argument>j</argument>,<argument>x.col</argument>)</argument_list></macro> <name><name>r</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><name>n</name><operator>*</operator><name><name>x</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
        <return>return <expr><name>r</name></expr>;</return>
    }</block></function></friend>
    <friend>friend <function type="operator"><type><name>MAT</name></type> <name>operator<name>*</name></name> <parameter_list>(<parameter><decl><type><name>MAT</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{
        <decl_stmt><decl><type><name>MAT</name></type> <name>r</name><argument_list>(<argument><expr><name><name>x</name><operator>.</operator><name>row</name></name></expr></argument>,<argument><expr><name><name>x</name><operator>.</operator><name>col</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <name>REP</name><expr_stmt><expr><operator>(</operator><name>i</name><operator>,</operator><name><name>x</name><operator>.</operator><name>row</name></name><operator>)</operator> <macro><name>REP</name><argument_list>(<argument>j</argument>,<argument>x.col</argument>)</argument_list></macro> <name><name>r</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><name>n</name><operator>*</operator><name><name>x</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
        <return>return <expr><name>r</name></expr>;</return>
    }</block></function></friend>
    <function type="operator"><specifier>explicit</specifier> <name>operator <name>vector&lt;vector&lt;T&gt;&gt;</name></name><parameter_list>()</parameter_list><block>{<return>return <expr><name>_A</name></expr>;</return>}</block></function>
    <friend>friend <function type="operator"><type><name>ostream</name> <modifier>&amp;</modifier></type><name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name> <modifier>&amp;</modifier></type><name>os</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>MAT</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list><block>{ <name>REP</name><expr_stmt><expr><operator>(</operator><name>i</name><operator>,</operator><name><name>x</name><operator>.</operator><name>row</name></name><operator>)</operator> <macro><name>REP</name><argument_list>(<argument>j</argument>,<argument>x.col</argument>)</argument_list></macro> <name>os</name><operator>&lt;&lt;</operator><name><name>x</name><operator>.</operator><name>_A</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>&lt;&lt;</operator><literal type="string">" \n"</literal><index>[<expr><name>j</name><operator>==</operator><name><name>x</name><operator>.</operator><name>col</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></expr>;</expr_stmt> <return>return <expr><name>os</name></expr>;</return>}</block></function></friend>
    <friend>friend <function type="operator"><type><name>istream</name> <modifier>&amp;</modifier></type><name>operator<name>&gt;&gt;</name></name><parameter_list>(<parameter><decl><type><name>istream</name> <modifier>&amp;</modifier></type><name>is</name></decl></parameter>,<parameter><decl><type><name>MAT</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list><block>{<name>REP</name><expr_stmt><expr><operator>(</operator><name>i</name><operator>,</operator><name><name>x</name><operator>.</operator><name>row</name></name><operator>)</operator> <macro><name>REP</name><argument_list>(<argument>j</argument>,<argument>x.col</argument>)</argument_list></macro> <name>is</name><operator>&gt;&gt;</operator><name><name>x</name><operator>.</operator><name>_A</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt><return>return <expr><name>is</name></expr>;</return>}</block></function></friend>
    <function><type><name>int</name></type> <name>size_row</name><parameter_list>()</parameter_list><block>{<return>return <expr><name>row</name></expr>;</return>}</block></function>
    <function><type><name>int</name></type> <name>size_col</name><parameter_list>()</parameter_list><block>{<return>return <expr><name>col</name></expr>;</return>}</block></function>
    <function><type><name>MAT</name></type> <name>transpose</name><parameter_list>()</parameter_list><block>{
        <decl_stmt><decl><type><name>MAT</name></type> <name>r</name><argument_list>(<argument><expr><name>col</name></expr></argument>,<argument><expr><name>row</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <macro><name>REP</name><argument_list>(<argument>i</argument>,<argument>col</argument>)</argument_list></macro> <macro><name>REP</name><argument_list>(<argument>j</argument>,<argument>row</argument>)</argument_list></macro> <expr_stmt><expr><name><name>r</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><name><name>_A</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <return>return <expr><name>r</name></expr>;</return>
    }</block></function>
    <function><type><name>MAT</name></type> <name>inverse</name><parameter_list>()</parameter_list><block>{
        <decl_stmt><decl><type><name>T</name></type> <name>buf</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>MAT</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>inv_a</name><argument_list>(<argument><expr><name>row</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>a</name><init>=<expr><name>_A</name></expr></init></decl>;</decl_stmt>
        <comment type="line">//æãåºãæ³</comment>
        <macro><name>REP</name><argument_list>(<argument>i</argument>,<argument>row</argument>)</argument_list></macro><block>{
            <expr_stmt><expr><name>buf</name><operator>=</operator><literal type="number">1</literal><operator>/</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            <macro><name>REP</name><argument_list>(<argument>j</argument>,<argument>row</argument>)</argument_list></macro><block>{
                <expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>*=</operator><name>buf</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>inv_a</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>*=</operator><name>buf</name></expr>;</expr_stmt>
            }</block>
            <macro><name>REP</name><argument_list>(<argument>j</argument>,<argument>row</argument>)</argument_list></macro><block>{
                <if>if<condition>(<expr><name>i</name><operator>!=</operator><name>j</name></expr>)</condition><then><block>{
                    <expr_stmt><expr><name>buf</name><operator>=</operator><name><name>a</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
                    <macro><name>REP</name><argument_list>(<argument>k</argument>,<argument>row</argument>)</argument_list></macro><block>{
                        <expr_stmt><expr><name><name>a</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name><operator>-=</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name><operator>*</operator><name>buf</name></expr>;</expr_stmt>
                       <expr_stmt><expr><name><name>inv_a</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name><operator>-=</operator><name><name>inv_a</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name><operator>*</operator><name>buf</name></expr>;</expr_stmt>
                    }</block>
                }</block></then></if>
            }</block>
        }</block>
        <return>return <expr><name>inv_a</name></expr>;</return>
    }</block></function>
    <comment type="line">// O( n^3 ).</comment>
    <function><type><name>int</name></type> <name>rank</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>A</name><init>=<expr><name>_A</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>n</name> <init>= <expr><name>row</name></expr></init></decl>, <decl><type ref="prev"/><name>m</name> <init>= <expr><name>col</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>r</name> <operator>&lt;</operator> <name>n</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>pivot</name> <init>= <expr><name>r</name></expr></init></decl>;</decl_stmt>
            <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>r</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block type="pseudo"><if>if<condition>(<expr><call><name>fabs</name><argument_list>(<argument><expr><name><name>A</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <call><name>fabs</name><argument_list>(<argument><expr><name><name>A</name><index>[<expr><name>pivot</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>pivot</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt></block></then></if></block></for>
            <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>A</name><index>[<expr><name>pivot</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><name>r</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if<condition>(<expr><call><name>fabs</name><argument_list>(<argument><expr><name><name>A</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>eps</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><name>m</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&gt;=</operator> <name>i</name></expr>;</condition> <incr><expr><operator>--</operator><name>k</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>A</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>/=</operator> <name><name>A</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
            <macro><name>rep</name><argument_list>(<argument>j</argument>,<argument>r+<literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro> <macro><name>rep</name><argument_list>(<argument>k</argument>,<argument>i</argument>,<argument>m</argument>)</argument_list></macro> <expr_stmt><expr><name><name>A</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>-=</operator> <name><name>A</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>*</operator> <name><name>A</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>++</operator><name>r</name></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><name>r</name></expr>;</return>
    }</block></function>
</public>}</block>;</class>
<class>class <name>UnionFind</name><block>{<private type="default"><comment type="line">//UnionFindæ¨</comment>
 </private><private>private:
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>Parent</name></decl>,<decl><type ref="prev"/><name>es</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>diff_weight</name></decl>;</decl_stmt>
 </private><public>public:
    <constructor><name>UnionFind</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>N</name></decl></parameter>)</parameter_list><block>{
        <expr_stmt><expr><call><name><name>es</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>N</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Parent</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>N</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>diff_weight</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>N</name></expr></argument>,<argument><expr><literal type="number">0LL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><name>int</name></type> <name>root</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>A</name></decl></parameter>)</parameter_list><block>{
        <if>if<condition>(<expr><name><name>Parent</name><index>[<expr><name>A</name></expr>]</index></name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>A</name></expr>;</return></block></then>
        <else>else<block>{ 
            <decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>root</name><argument_list>(<argument><expr><name><name>Parent</name><index>[<expr><name>A</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>diff_weight</name><index>[<expr><name>A</name></expr>]</index></name> <operator>+=</operator> <name><name>diff_weight</name><index>[<expr><name><name>Parent</name><index>[<expr><name>A</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt> <comment type="line">// ç´¯ç©åãã¨ã</comment>
            <return>return <expr><name><name>Parent</name><index>[<expr><name>A</name></expr>]</index></name><operator>=</operator><name>r</name></expr>;</return>
        }</block></else></if>
    }</block></function>
    <function><type><name>bool</name></type> <name>issame</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>A</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>B</name></decl></parameter>)</parameter_list><block>{
        <return>return <expr><call><name>root</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call><operator>==</operator><call><name>root</name><argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><type><name>ll</name></type> <name>weight</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>root</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// çµè·¯å§ç¸®</comment>
        <return>return <expr><name><name>diff_weight</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</return>
    }</block></function>
    <function><type><name>ll</name></type> <name>diff</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name>weight</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>weight</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><type><name>int</name></type> <name>size</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>A</name></decl></parameter>)</parameter_list><block>{
        <return>return <expr><operator>-</operator><name><name>Parent</name><index>[<expr><call><name>root</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</return>
    }</block></function>
    <function><type><name>int</name></type> <name>eize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>A</name></decl></parameter>)</parameter_list><block>{
        <return>return <expr><name><name>es</name><index>[<expr><call><name>root</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</return>
    }</block></function>
    <function><type><name>bool</name></type> <name>connect</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>A</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>B</name></decl></parameter>)</parameter_list><block>{
        <expr_stmt><expr><name>A</name><operator>=</operator><call><name>root</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>B</name><operator>=</operator><call><name>root</name><argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>A</name><operator>==</operator><name>B</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
        <if>if<condition>(<expr><call><name>size</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call><operator>&lt;</operator><call><name>size</name><argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>A</name></expr></argument>,<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name><name>Parent</name><index>[<expr><name>A</name></expr>]</index></name><operator>+=</operator><name><name>Parent</name><index>[<expr><name>B</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>es</name><index>[<expr><name>A</name></expr>]</index></name><operator>+=</operator><name><name>es</name><index>[<expr><name>B</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>Parent</name><index>[<expr><name>B</name></expr>]</index></name><operator>=</operator><name>A</name></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></function>
    <function><type><name>void</name></type> <name>unite</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>A</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>B</name></decl></parameter>)</parameter_list><block>{
        <expr_stmt><expr><name>A</name><operator>=</operator><call><name>root</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>B</name><operator>=</operator><call><name>root</name><argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>A</name><operator>==</operator><name>B</name></expr>)</condition><then><block>{ 
            <expr_stmt><expr><name><name>es</name><index>[<expr><name>A</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>
        <if>if<condition>(<expr><call><name>size</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call><operator>&lt;</operator><call><name>size</name><argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>A</name></expr></argument>,<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name><name>Parent</name><index>[<expr><name>A</name></expr>]</index></name><operator>+=</operator><name><name>Parent</name><index>[<expr><name>B</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>es</name><index>[<expr><name>A</name></expr>]</index></name><operator>+=</operator><name><name>es</name><index>[<expr><name>B</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>Parent</name><index>[<expr><name>B</name></expr>]</index></name><operator>=</operator><name>A</name></expr>;</expr_stmt>
        <return>return;</return>
    }</block></function>
    <function><type><name>bool</name></type> <name>merge</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>B</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>w</name></decl></parameter>)</parameter_list> <block>{
        <comment type="line">// x ã¨ y ããããã«ã¤ãã¦ã root ã¨ã®éã¿å·®åãè£æ­£</comment>
        <expr_stmt><expr><name>w</name> <operator>+=</operator> <call><name>weight</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>w</name> <operator>-=</operator> <call><name>weight</name><argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
        <expr_stmt><expr><name>A</name><operator>=</operator><call><name>root</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>B</name><operator>=</operator><call><name>root</name><argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>A</name><operator>==</operator><name>B</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
        <if>if<condition>(<expr><call><name>size</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call><operator>&lt;</operator><call><name>size</name><argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>A</name></expr></argument>,<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><name>w</name><operator>=</operator><operator>-</operator><name>w</name></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name><name>Parent</name><index>[<expr><name>A</name></expr>]</index></name><operator>+=</operator><name><name>Parent</name><index>[<expr><name>B</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>Parent</name><index>[<expr><name>B</name></expr>]</index></name><operator>=</operator><name>A</name></expr>;</expr_stmt>
        <comment type="line">// x ã y ã®è¦ªã«ãªãã®ã§ãx ã¨ y ã®å·®åã diff_weight[y] ã«è¨é²</comment>
        <expr_stmt><expr><name><name>diff_weight</name><index>[<expr><name>B</name></expr>]</index></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt> 
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></function>
</public>}</block>;</class>
<class>class <name>Factorial</name><block>{<private type="default"><comment type="line">//éä¹ã¨ãã®éåãæ±ãã¦è¨ç®ã«å©ç¨ããã¯ã©ã¹</comment>
 </private><private>private:
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>fac</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>ifac</name></decl>;</decl_stmt>
 </private><public>public:
    
    <constructor><name>Factorial</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>N</name></decl></parameter>)</parameter_list><block>{
        <expr_stmt><expr><call><name><name>fac</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>REP</name><argument_list>(<argument>i</argument>,<argument>N</argument>)</argument_list></macro> <expr_stmt><expr><call><name><name>fac</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>fac</name><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><name>mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ifac</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>N</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ifac</name><index>[<expr><name>N</name></expr>]</index></name><operator>=</operator><call><name>inv_mod</name><argument_list>(<argument><expr><name><name>fac</name><index>[<expr><name>N</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>REP</name><argument_list>(<argument>i</argument>,<argument>N</argument>)</argument_list></macro> <expr_stmt><expr><name><name>ifac</name><index>[<expr><name>N</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>i</name></expr>]</index></name><operator>=</operator><operator>(</operator><name><name>ifac</name><index>[<expr><name>N</name><operator>-</operator><name>i</name></expr>]</index></name><operator>*</operator><operator>(</operator><name>N</name><operator>-</operator><name>i</name><operator>)</operator><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><name>ll</name></type> <name>fact</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>)</parameter_list><block>{<return>return <expr><name><name>fac</name><index>[<expr><name>a</name></expr>]</index></name></expr>;</return>}</block></function>
    <function><type><name>ll</name></type> <name>ifact</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>)</parameter_list><block>{<return>return <expr><name><name>ifac</name><index>[<expr><name>a</name></expr>]</index></name></expr>;</return>}</block></function>

    <function><type><name>ll</name></type> <name>cmb</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
        <if>if<condition>(<expr><name>a</name><operator>==</operator><literal type="number">0</literal><operator>&amp;&amp;</operator><name>b</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
        <if>if<condition>(<expr><name>a</name><operator>&lt;</operator><name>b</name><operator>||</operator><name>a</name><operator>&lt;</operator><literal type="number">0</literal><operator>||</operator><name>b</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
        <decl_stmt><decl><type><name>ll</name></type> <name>tmp</name> <init>=<expr><call><name>ifact</name><argument_list>(<argument><expr><name>a</name><operator>-</operator><name>b</name></expr></argument>)</argument_list></call><operator>*</operator><call><name>ifact</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>%</operator><name>mod</name></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>tmp</name><operator>*</operator><name><name>fac</name><index>[<expr><name>a</name></expr>]</index></name><operator>%</operator><name>mod</name></expr>;</return>
    }</block></function>
    <function><type><name>ll</name></type> <name>per</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
        <if>if<condition>(<expr><name>a</name><operator>==</operator><literal type="number">0</literal><operator>&amp;&amp;</operator><name>b</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
        <if>if<condition>(<expr><name>a</name><operator>&lt;</operator><name>b</name><operator>||</operator><name>a</name><operator>&lt;</operator><literal type="number">0</literal><operator>||</operator><name>b</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
        <return>return <expr><name><name>fac</name><index>[<expr><name>a</name></expr>]</index></name><operator>*</operator><name><name>ifac</name><index>[<expr><name>a</name><operator>-</operator><name>b</name></expr>]</index></name><operator>%</operator><name>mod</name></expr>;</return>
    }</block></function>
</public>}</block>;</class>
<class>class <name>SOSU</name><block>{<private type="default">
 </private><private>private:
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>Prime_Number</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></type> <name>isp</name></decl>;</decl_stmt>
 </private><public>public:
    <constructor><name>SOSU</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>N</name></decl></parameter>)</parameter_list><block>{
        <expr_stmt><expr><call><name><name>isp</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>N</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>isp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name><name>isp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="boolean">false</literal></expr>;</expr_stmt>
        <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">2</literal></argument>,<argument>N+<literal type="number">1</literal></argument>)</argument_list></macro> <if>if<condition>(<expr><name><name>isp</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block>{
            <expr_stmt><expr><call><name><name>Prime_Number</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">2</literal><operator>*</operator><name>i</name></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>N</name></expr>;</condition><incr><expr><name>j</name><operator>+=</operator><name>i</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>isp</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><literal type="boolean">false</literal></expr>;</expr_stmt></block></for>
        }</block></then></if>
    }</block></constructor>
    <function type="operator"><type><name>int</name></type> <name>operator<name>[]</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list><block>{<return>return <expr><name><name>Prime_Number</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>}</block></function>
    <function><type><name>int</name></type> <name>size</name><parameter_list>()</parameter_list><block>{<return>return <expr><call><name><name>Prime_Number</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>}</block></function>
    <function><type><name>int</name></type> <name>back</name><parameter_list>()</parameter_list><block>{<return>return <expr><call><name><name>Prime_Number</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr>;</return>}</block></function>
    <function><type><name>bool</name></type> <name>isPrime</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>q</name></decl></parameter>)</parameter_list><block>{<return>return <expr><name><name>isp</name><index>[<expr><name>q</name></expr>]</index></name></expr>;</return>}</block></function>
</public>}</block>;</class>
<class>class <name>Divisor</name><block>{<private type="default"><comment type="line">//ç´ å æ°åè§£ããã¦ããç´æ°åæãåè§£çµæã¯ï¼°(åº,ææ°)ã§pfacã«ã¾ã¨ãã¦ãã</comment>
  </private><private>private:
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>F</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>P</name></expr></argument>&gt;</argument_list></name></type> <name>pfactorize</name></decl>;</decl_stmt>
  </private><public>public:
    <constructor><name>Divisor</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>N</name></decl></parameter>)</parameter_list><block>{
        <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>*</operator> <name>i</name> <operator>&lt;=</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
            <if>if<condition>(<expr><name>N</name> <operator>%</operator> <name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>F</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if<condition>(<expr><name>i</name> <operator>*</operator> <name>i</name> <operator>!=</operator> <name>N</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>F</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>N</name> <operator>/</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
            }</block></then></if>
        }</block></for>
        <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name>begin</name><argument_list>(<argument><expr><name>F</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>end</name><argument_list>(<argument><expr><name>F</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>SOSU</name></type> <name>p</name><argument_list>(<argument><expr><call><name>SQRT</name><argument_list>(<argument><expr><name>N</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    	<macro><name>REP</name><argument_list>(<argument>i</argument>,<argument>p.size()</argument>)</argument_list></macro><block>{
    		<expr_stmt><expr><call><name><name>pfactorize</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>P</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    		<while>while<condition>(<expr><name>N</name><operator>%</operator><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr>)</condition><block>{
    			<expr_stmt><expr><name>N</name><operator>/=</operator><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    			<expr_stmt><expr><call><name><name>pfactorize</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>second</name><operator>++</operator></expr>;</expr_stmt>
    		}</block></while>
            <if>if<condition>(<expr><call><name><name>pfactorize</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>second</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>pfactorize</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
    	}</block>
    	<if>if<condition>(<expr><name>N</name><operator>&gt;</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>pfactorize</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>P</name><argument_list>(<argument><expr><name>N</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></constructor>
    <function><type><name>int</name></type> <name>size</name><parameter_list>()</parameter_list><block>{<return>return <expr><call><name><name>F</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>}</block></function>
    <function><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>P</name></expr></argument>&gt;</argument_list></name></type> <name>pfac</name><parameter_list>()</parameter_list><block>{<return>return <expr><name>pfactorize</name></expr>;</return>}</block></function>
    <function type="operator"><type><name>ll</name></type> <name>operator<name>[]</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list><block>{<return>return <expr><name><name>F</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</return>}</block></function>
</public>}</block>;</class>
<struct>struct <name>compress</name><block>{<public type="default">
    <decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>zip</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>unzip</name></decl>;</decl_stmt>
    <constructor><name>compress</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>x</name></decl></parameter>)</parameter_list><block>{
        <expr_stmt><expr><name>unzip</name><operator>=</operator><name>x</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name>All</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>x</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name>unique</name><argument_list>(<argument><expr><call><name>All</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name><name>x</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>REP</name><argument_list>(<argument>i</argument>,<argument>x.size()</argument>)</argument_list></macro><block>{
            <expr_stmt><expr><name><name>zip</name><index>[<expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt>
        }</block>
    }</block></constructor>
    <function type="operator"><type><name>int</name></type> <name>operator<name>[]</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list><block>{<return>return <expr><name><name>zip</name><index>[<expr><name><name>unzip</name><index>[<expr><name>k</name></expr>]</index></name></expr>]</index></name></expr>;</return>}</block></function>
</public>}</block>;</struct>
<struct>struct <name>edge</name><block>{<public type="default">
    <decl_stmt><decl><type><name>int</name></type> <name>from</name></decl>;</decl_stmt><decl_stmt><decl><type><name>int</name></type> <name>to</name></decl>;</decl_stmt><decl_stmt><decl><type><name>ll</name></type> <name>cost</name></decl>;</decl_stmt>
    <function><type><name>void</name></type> <name>push</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list><block>{
        <expr_stmt><expr><name>from</name><operator>=</operator><name>a</name></expr>;</expr_stmt><expr_stmt><expr><name>to</name><operator>=</operator><name>b</name></expr>;</expr_stmt><expr_stmt><expr><name>cost</name><operator>=</operator><name>c</name></expr>;</expr_stmt>
    }</block></function>
    <function type="operator"><type><name>bool</name></type> <name>operator<name>&lt;</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>edge</name><modifier>&amp;</modifier></type> <name>y</name></decl></parameter>)</parameter_list> <specifier>const</specifier><block>{
        <if>if<condition>(<expr><name>cost</name><operator>!=</operator><name><name>y</name><operator>.</operator><name>cost</name></name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>cost</name><operator>&lt;</operator><name><name>y</name><operator>.</operator><name>cost</name></name></expr>;</return></block></then>
        <elseif>else <if>if<condition>(<expr><name>to</name><operator>!=</operator><name><name>y</name><operator>.</operator><name>to</name></name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>to</name><operator>&lt;</operator><name><name>y</name><operator>.</operator><name>to</name></name></expr>;</return></block></then></if></elseif>
        <else>else <block type="pseudo"><return>return <expr><name>from</name><operator>&lt;</operator><name><name>y</name><operator>.</operator><name>from</name></name></expr>;</return></block></else></if>}</block></function>
    <function type="operator"><type><name>bool</name></type> <name>operator<name>&gt;</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>edge</name><modifier>&amp;</modifier></type> <name>y</name></decl></parameter>)</parameter_list> <specifier>const</specifier><block>{
        <if>if<condition>(<expr><name>cost</name><operator>!=</operator><name><name>y</name><operator>.</operator><name>cost</name></name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>cost</name><operator>&gt;</operator><name><name>y</name><operator>.</operator><name>cost</name></name></expr>;</return></block></then>
        <elseif>else <if>if<condition>(<expr><name>to</name><operator>!=</operator><name><name>y</name><operator>.</operator><name>to</name></name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>to</name><operator>&gt;</operator><name><name>y</name><operator>.</operator><name>to</name></name></expr>;</return></block></then></if></elseif>
        <else>else <block type="pseudo"><return>return <expr><name>from</name><operator>&gt;</operator><name><name>y</name><operator>.</operator><name>from</name></name></expr>;</return></block></else></if>}</block></function>
    <function type="operator"><type><name>bool</name></type> <name>operator<name>==</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>edge</name><modifier>&amp;</modifier></type> <name>y</name></decl></parameter>)</parameter_list> <specifier>const</specifier><block>{<return>return <expr><operator>*</operator><name>this</name><operator>==</operator><name>y</name></expr>;</return>}</block></function>
</public>}</block>;</struct>
<class>class <name>lca</name> <block>{<private type="default">
  </private><public>public:
    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>log2_n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></name></expr></argument>&gt;</argument_list></name></name></type> <name>parent</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></name></type> <name>depth</name></decl>;</decl_stmt>

    <constructor><name>lca</name><parameter_list>()</parameter_list> <block>{}</block></constructor>

    <constructor><name>lca</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Graph</name> <modifier>&amp;</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>root</name></decl></parameter>)</parameter_list>
        <member_init_list>: <call><name>n</name><argument_list>(<argument><expr><call><name><name>g</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>, <call><name>log2_n</name><argument_list>(<argument><expr><call><name>log2</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call>, <call><name>parent</name><argument_list>(<argument><expr><name>log2_n</name></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>, <call><name>depth</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call> </member_init_list><block>{
        <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>log2_n</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{
            <for>for <control>(<init><decl><type><name>int</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>v</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name><name>g</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>v</name><operator>++</operator></expr></incr>)</control> <block>{
                <if>if <condition>(<expr><name><name>parent</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>v</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name><name>parent</name><index>[<expr><name>k</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then>
                <else>else
                    <block type="pseudo"><expr_stmt><expr><name><name>parent</name><index>[<expr><name>k</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <name><name>parent</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name><name>parent</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>v</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block></else></if>
            }</block></for>
        }</block></for>
    }</block></constructor>

    <function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Graph</name> <modifier>&amp;</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>d</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>parent</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>depth</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
        <macro><name>REP</name><argument_list>(<argument>j</argument>,<argument>g[v].size()</argument>)</argument_list></macro> <block>{
            <if>if <condition>(<expr><name><name>g</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <name>p</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name><name>g</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>d</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        }</block>
    }</block></function>

    <function><type><name>int</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>depth</name><index>[<expr><name>u</name></expr>]</index></name> <operator>&gt;</operator> <name><name>depth</name><index>[<expr><name>v</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>swap</name></name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>log2_n</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{
            <if>if <condition>(<expr><operator>(</operator><name><name>depth</name><index>[<expr><name>v</name></expr>]</index></name> <operator>-</operator> <name><name>depth</name><index>[<expr><name>u</name></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <name>k</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>parent</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>v</name></expr>]</index></name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
        <if>if <condition>(<expr><name>u</name> <operator>==</operator> <name>v</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>u</name></expr>;</return></block></then></if>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><name>log2_n</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>k</name><operator>--</operator></expr></incr>)</control> <block>{
            <if>if <condition>(<expr><name><name>parent</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>u</name></expr>]</index></name> <operator>!=</operator> <name><name>parent</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>v</name></expr>]</index></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>u</name> <operator>=</operator> <name><name>parent</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>parent</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>v</name></expr>]</index></name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
        <return>return <expr><name><name>parent</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>u</name></expr>]</index></name></expr>;</return>
    }</block></function>
</public>}</block>;</class>
<class><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> class <name>SegmentTree</name><block>{<private type="default">
  </private><private>private:
    <typedef>typedef <expr_stmt><expr><name>function</name><operator>&lt;</operator><call><name>T</name><argument_list>(<argument><expr><name>T</name></expr></argument>,<argument><expr><name>T</name></expr></argument>)</argument_list></call><operator>&gt;</operator> <name>F</name></expr>;</expr_stmt></typedef>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>T</name></type> <name>d0</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>vertex</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>F</name></type> <name>f</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>F</name></type> <name>g</name></decl>;</decl_stmt>
  </private><public>public:
    <constructor><name>SegmentTree</name><parameter_list>(<parameter><decl><type><name>F</name></type> <name>f</name></decl></parameter>,<parameter><decl><type><name>F</name></type> <name>g</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>d</name></decl></parameter>)</parameter_list><member_init_list>:<call><name>d0</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call>,<call><name>f</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call>,<call><name>g</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></member_init_list><block>{}</block></constructor>
    <function><type><name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_n</name></decl></parameter>)</parameter_list><block>{
        <expr_stmt><expr><name>n</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <while>while<condition>(<expr><name>n</name><operator>&lt;</operator><name>_n</name></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>n</name><operator>*=</operator><literal type="number">2</literal></expr>;</expr_stmt></block></while>
        <expr_stmt><expr><call><name><name>vertex</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <function><type><name>void</name></type> <name>build</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>v</name></decl></parameter>)</parameter_list><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>n_</name><init>=<expr><call><name><name>v</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>init</name><argument_list>(<argument><expr><name>n_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n_</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>vertex</name><index>[<expr><name>n</name><operator>+</operator><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>n</name><operator>-</operator><literal type="number">2</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition><incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name><name>vertex</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><call><name>f</name><argument_list>(<argument><expr><name><name>vertex</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>vertex</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    }</block></function>
    <function><type><name>void</name></type> <name>update</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>k</name><init>=<expr><name>i</name><operator>+</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>vertex</name><index>[<expr><name>k</name></expr>]</index></name><operator>=</operator><call><name>g</name><argument_list>(<argument><expr><name><name>vertex</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while<condition>(<expr><name>k</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><block>{
            <expr_stmt><expr><name>k</name><operator>=</operator><operator>(</operator><name>k</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>vertex</name><index>[<expr><name>k</name></expr>]</index></name><operator>=</operator><call><name>f</name><argument_list>(<argument><expr><name><name>vertex</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>vertex</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>
        <return>return;</return>
    }</block></function>
    <function><type><name>T</name></type> <name>query</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list><block>{
        <decl_stmt><decl><type><name>T</name></type> <name>vl</name><init>=<expr><name>d0</name></expr></init></decl>,<decl><type ref="prev"/><name>vr</name><init>=<expr><name>d0</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>l</name><operator>+=</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>r</name><operator>+=</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <for>for<control>(<init>;</init><condition><expr><name>l</name><operator>&lt;=</operator><name>r</name></expr>;</condition><incr><expr><name>l</name><operator>/=</operator><literal type="number">2</literal></expr><operator>,</operator><expr><name>r</name><operator>=</operator><name>r</name><operator>/</operator><literal type="number">2</literal><operator>-</operator><literal type="number">1</literal></expr></incr>)</control><block>{
            <if>if<condition>(<expr><name>l</name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>vl</name><operator>=</operator><call><name>f</name><argument_list>(<argument><expr><name>vl</name></expr></argument>,<argument><expr><name><name>vertex</name><index>[<expr><name>l</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
            <if>if<condition>(<expr><name>r</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>vr</name><operator>=</operator><call><name>f</name><argument_list>(<argument><expr><name>vr</name></expr></argument>,<argument><expr><name><name>vertex</name><index>[<expr><name>r</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        }</block></for>
        <return>return <expr><call><name>f</name><argument_list>(<argument><expr><name>vl</name></expr></argument>,<argument><expr><name>vr</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
</public>}</block>;</class>
<struct><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>,<parameter><type><name>typename</name></type> <name>E</name></parameter>&gt;</parameter_list></template>
struct <name>LazySegmentTree</name><block>{<public type="default">
  <using>using <name>F</name> <init>= <type><name>function</name><name/>&lt;<name>T</name></type><expr><operator>(</operator><name>T</name>,<name>T</name><operator>)</operator><operator>&gt;</operator></expr></init>;</using>
  <using>using <name>G</name> <init>= <type><name>function</name><name/>&lt;<name>T</name></type><expr><operator>(</operator><name>T</name>,<name>E</name><operator>)</operator><operator>&gt;</operator></expr></init>;</using>
  <using>using <name>H</name> <init>= <type><name>function</name><name/>&lt;<name>E</name></type><expr><operator>(</operator><name>E</name>,<name>E</name><operator>)</operator><operator>&gt;</operator></expr></init>;</using>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>height</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>F</name></type> <name>f</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>G</name></type> <name>g</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>H</name></type> <name>h</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>T</name></type> <name>ti</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>E</name></type> <name>ei</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>dat</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>E</name></expr></argument>&gt;</argument_list></name></type> <name>laz</name></decl>;</decl_stmt>
  <constructor><name>LazySegmentTree</name><parameter_list>(<parameter><decl><type><name>F</name></type> <name>f</name></decl></parameter>,<parameter><decl><type><name>G</name></type> <name>g</name></decl></parameter>,<parameter><decl><type><name>H</name></type> <name>h</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>ti</name></decl></parameter>,<parameter><decl><type><name>E</name></type> <name>ei</name></decl></parameter>)</parameter_list><member_init_list>:
    <call><name>f</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call>,<call><name>g</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call>,<call><name>h</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call>,<call><name>ti</name><argument_list>(<argument><expr><name>ti</name></expr></argument>)</argument_list></call>,<call><name>ei</name><argument_list>(<argument><expr><name>ei</name></expr></argument>)</argument_list></call></member_init_list><block>{}</block></constructor>
  
  <function><type><name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n_</name></decl></parameter>)</parameter_list><block>{
    <expr_stmt><expr><name>n</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt><expr_stmt><expr><name>height</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>n</name><operator>&lt;</operator><name>n_</name></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>n</name><operator>&lt;&lt;=</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name>height</name><operator>++</operator></expr>;</expr_stmt></block></while>
    <expr_stmt><expr><call><name><name>dat</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name>n</name></expr></argument>,<argument><expr><name>ti</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>laz</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name>n</name></expr></argument>,<argument><expr><name>ei</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>
  <function><type><name>void</name></type> <name>build</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>v</name></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n_</name><init>=<expr><call><name><name>v</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>init</name><argument_list>(<argument><expr><name>n_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n_</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>dat</name><index>[<expr><name>n</name><operator>+</operator><name>i</name></expr>]</index></name><operator>=</operator><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name></expr>;</condition><incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
      <block type="pseudo"><expr_stmt><expr><name><name>dat</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><call><name>f</name><argument_list>(<argument><expr><name><name>dat</name><index>[<expr><operator>(</operator><name>i</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>|</operator><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>dat</name><index>[<expr><operator>(</operator><name>i</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>|</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
  }</block></function>
  <function><specifier>inline</specifier> <type><name>T</name></type> <name>reflect</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list><block>{
    <return>return <expr><ternary><condition><expr><name><name>laz</name><index>[<expr><name>k</name></expr>]</index></name><operator>==</operator><name>ei</name></expr>?</condition><then><expr><name><name>dat</name><index>[<expr><name>k</name></expr>]</index></name></expr></then><else>:<expr><call><name>g</name><argument_list>(<argument><expr><name><name>dat</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>laz</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
  }</block></function>
  <function><specifier>inline</specifier> <type><name>void</name></type> <name>eval</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><name><name>laz</name><index>[<expr><name>k</name></expr>]</index></name><operator>==</operator><name>ei</name></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then></if>
    <expr_stmt><expr><name><name>laz</name><index>[<expr><operator>(</operator><name>k</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>|</operator><literal type="number">0</literal></expr>]</index></name><operator>=</operator><call><name>h</name><argument_list>(<argument><expr><name><name>laz</name><index>[<expr><operator>(</operator><name>k</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>|</operator><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>laz</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>laz</name><index>[<expr><operator>(</operator><name>k</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>|</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><call><name>h</name><argument_list>(<argument><expr><name><name>laz</name><index>[<expr><operator>(</operator><name>k</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>|</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>laz</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dat</name><index>[<expr><name>k</name></expr>]</index></name><operator>=</operator><call><name>reflect</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>laz</name><index>[<expr><name>k</name></expr>]</index></name><operator>=</operator><name>ei</name></expr>;</expr_stmt>
  }</block></function>
  <function><specifier>inline</specifier> <type><name>void</name></type> <name>thrust</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list><block>{
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>height</name></expr></init></decl>;</init><condition><expr><name>i</name></expr>;</condition><incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>eval</name><argument_list>(<argument><expr><name>k</name><operator>&gt;&gt;</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
  }</block></function>
  <function><specifier>inline</specifier> <type><name>void</name></type> <name>recalc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list><block>{    
    <while>while<condition>(<expr><name>k</name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr>)</condition>
      <block type="pseudo"><expr_stmt><expr><name><name>dat</name><index>[<expr><name>k</name></expr>]</index></name><operator>=</operator><call><name>f</name><argument_list>(<argument><expr><call><name>reflect</name><argument_list>(<argument><expr><operator>(</operator><name>k</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>|</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>reflect</name><argument_list>(<argument><expr><operator>(</operator><name>k</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>|</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></while>
  }</block></function>
  <function><type><name>void</name></type> <name>update</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>E</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{
    <expr_stmt><expr><call><name>thrust</name><argument_list>(<argument><expr><name>a</name><operator>+=</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>thrust</name><argument_list>(<argument><expr><name>b</name><operator>+=</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>l</name><init>=<expr><name>a</name></expr></init></decl>,<decl><type ref="prev"/><name>r</name><init>=<expr><name>b</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>l</name><operator>&lt;</operator><name>r</name></expr>;</condition><incr><expr><name>l</name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name>r</name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr></incr>)</control><block>{
      <if>if<condition>(<expr><name>l</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>laz</name><index>[<expr><name>l</name></expr>]</index></name><operator>=</operator><call><name>h</name><argument_list>(<argument><expr><name><name>laz</name><index>[<expr><name>l</name></expr>]</index></name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><name>l</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
      <if>if<condition>(<expr><name>r</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><operator>--</operator><name>r</name></expr><operator>,</operator><expr><name><name>laz</name><index>[<expr><name>r</name></expr>]</index></name><operator>=</operator><call><name>h</name><argument_list>(<argument><expr><name><name>laz</name><index>[<expr><name>r</name></expr>]</index></name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></for>
    <expr_stmt><expr><call><name>recalc</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>recalc</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>
  <function><type><name>void</name></type> <name>set_val</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{
    <expr_stmt><expr><call><name>thrust</name><argument_list>(<argument><expr><name>a</name><operator>+=</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dat</name><index>[<expr><name>a</name></expr>]</index></name><operator>=</operator><name>x</name></expr>;</expr_stmt><expr_stmt><expr><name><name>laz</name><index>[<expr><name>a</name></expr>]</index></name><operator>=</operator><name>ei</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>recalc</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>
  <function><type><name>T</name></type> <name>query</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
    <expr_stmt><expr><call><name>thrust</name><argument_list>(<argument><expr><name>a</name><operator>+=</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>thrust</name><argument_list>(<argument><expr><name>b</name><operator>+=</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>T</name></type> <name>vl</name><init>=<expr><name>ti</name></expr></init></decl>,<decl><type ref="prev"/><name>vr</name><init>=<expr><name>ti</name></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>l</name><init>=<expr><name>a</name></expr></init></decl>,<decl><type ref="prev"/><name>r</name><init>=<expr><name>b</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>l</name><operator>&lt;</operator><name>r</name></expr>;</condition><incr><expr><name>l</name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name>r</name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr></incr>)</control> <block>{
      <if>if<condition>(<expr><name>l</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>vl</name><operator>=</operator><call><name>f</name><argument_list>(<argument><expr><name>vl</name></expr></argument>,<argument><expr><call><name>reflect</name><argument_list>(<argument><expr><name>l</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
      <if>if<condition>(<expr><name>r</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>vr</name><operator>=</operator><call><name>f</name><argument_list>(<argument><expr><call><name>reflect</name><argument_list>(<argument><expr><operator>--</operator><name>r</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>vr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></for>
    <return>return <expr><call><name>f</name><argument_list>(<argument><expr><name>vl</name></expr></argument>,<argument><expr><name>vr</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>
</public>}</block>;</struct>
<struct>struct <name>rational</name> <block>{<public type="default">
  <decl_stmt><decl><type><name>ll</name></type> <name>p</name></decl>, <decl><type ref="prev"/><name>q</name></decl>;</decl_stmt>
  <function><type><name>void</name></type> <name>normalize</name><parameter_list>()</parameter_list> <block>{ <comment type="line">// keep q positive</comment>
    <if>if <condition>(<expr><name>q</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>p</name> <operator>*=</operator> <operator>-</operator><literal type="number">1</literal></expr><operator>,</operator> <expr><name>q</name> <operator>*=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
    <decl_stmt><decl><type><name>ll</name></type> <name>d</name> <init>= <expr><call><name>gcd</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><name>p</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>d</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator>  <expr><name>q</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then>
    <else>else        <block type="pseudo"><expr_stmt><expr><name>p</name> <operator>/=</operator> <name>d</name></expr><operator>,</operator> <expr><name>q</name> <operator>/=</operator> <name>d</name></expr>;</expr_stmt></block></else></if>
  }</block></function>
  <constructor><name>rational</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>q</name> <init>= <expr><literal type="number">1</literal></expr></init></decl></parameter>)</parameter_list> <member_init_list>: <call><name>p</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call>, <call><name>q</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call> </member_init_list><block>{
    <expr_stmt><expr><call><name>normalize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>
  <function type="operator"><type><name>rational</name> <modifier>&amp;</modifier></type><name>operator<name>+=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rational</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>q</name></name> <operator>*</operator> <name>p</name> <operator>+</operator> <name><name>a</name><operator>.</operator><name>p</name></name> <operator>*</operator> <name>q</name></expr>;</expr_stmt> <expr_stmt><expr><name>q</name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>q</name></name> <operator>*</operator> <name>q</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>normalize</name><argument_list>()</argument_list></call></expr>;</expr_stmt><return>return <expr><operator>*</operator><name>this</name></expr>;</return>}</block></function>
  <function type="operator"><type><name>rational</name> <modifier>&amp;</modifier></type><name>operator<name>-=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rational</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>q</name></name> <operator>*</operator> <name>p</name> <operator>-</operator> <name><name>a</name><operator>.</operator><name>p</name></name> <operator>*</operator> <name>q</name></expr>;</expr_stmt> <expr_stmt><expr><name>q</name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>q</name></name> <operator>*</operator> <name>q</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>normalize</name><argument_list>()</argument_list></call></expr>;</expr_stmt><return>return <expr><operator>*</operator><name>this</name></expr>;</return>}</block></function>
  <function type="operator"><type><name>rational</name> <modifier>&amp;</modifier></type><name>operator<name>*=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rational</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name>p</name> <operator>*=</operator> <name><name>a</name><operator>.</operator><name>p</name></name></expr>;</expr_stmt> <expr_stmt><expr><name>q</name> <operator>*=</operator> <name><name>a</name><operator>.</operator><name>q</name></name></expr>;</expr_stmt><expr_stmt><expr><call><name>normalize</name><argument_list>()</argument_list></call></expr>;</expr_stmt><return>return <expr><operator>*</operator><name>this</name></expr>;</return>}</block></function>
  <function type="operator"><type><name>rational</name> <modifier>&amp;</modifier></type><name>operator<name>/=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rational</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name>p</name> <operator>*=</operator> <name><name>a</name><operator>.</operator><name>q</name></name></expr>;</expr_stmt> <expr_stmt><expr><name>q</name> <operator>*=</operator> <name><name>a</name><operator>.</operator><name>p</name></name></expr>;</expr_stmt> <expr_stmt><expr><call><name>normalize</name><argument_list>()</argument_list></call></expr>;</expr_stmt><return>return <expr><operator>*</operator><name>this</name></expr>;</return>}</block></function>
  <function type="operator"><type><name>rational</name> <modifier>&amp;</modifier></type><name>operator<name>-</name></name><parameter_list>()</parameter_list><block>{<expr_stmt><expr><name>p</name> <operator>*=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt><return>return <expr><operator>*</operator><name>this</name></expr>;</return>}</block></function>
  <friend>friend <function type="operator"><type><name>rational</name></type> <name>operator<name>+</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rational</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>rational</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list><block>{<return>return <expr><call><name>rational</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>+=</operator> <name>b</name></expr>;</return>}</block></function></friend>
  <friend>friend <function type="operator"><type><name>rational</name></type> <name>operator<name>*</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rational</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>rational</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list><block>{<return>return <expr><call><name>rational</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>*=</operator> <name>b</name></expr>;</return>}</block></function></friend>
  <friend>friend <function type="operator"><type><name>rational</name></type> <name>operator<name>-</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rational</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>rational</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list><block>{<return>return <expr><call><name>rational</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call><operator>-=</operator><name>b</name></expr>;</return>}</block></function></friend>
  <friend>friend <function type="operator"><type><name>rational</name></type> <name>operator<name>/</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rational</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>rational</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list><block>{<return>return <expr><call><name>rational</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>/=</operator> <name>b</name></expr>;</return>}</block></function></friend>
  <friend>friend <function type="operator"><type><name>bool</name></type> <name>operator<name>&lt;</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rational</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>rational</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list><block>{ <comment type="line">// avoid overflow </comment>
    <return>return <expr><operator>(</operator><name>long</name> <name>double</name><operator>)</operator> <name><name>a</name><operator>.</operator><name>p</name></name> <operator>*</operator> <name><name>b</name><operator>.</operator><name>q</name></name> <operator>&lt;</operator> <operator>(</operator><name>long</name> <name>double</name><operator>)</operator> <name><name>a</name><operator>.</operator><name>q</name></name> <operator>*</operator> <name><name>b</name><operator>.</operator><name>p</name></name></expr>;</return>
  }</block></function></friend>
  <friend>friend <function type="operator"><type><name>bool</name></type> <name>operator<name>&lt;=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rational</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>rational</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list><block>{<return>return <expr><operator>!</operator><operator>(</operator><name>b</name> <operator>&lt;</operator> <name>a</name><operator>)</operator></expr>;</return>}</block></function></friend>
  <friend>friend <function type="operator"><type><name>bool</name></type> <name>operator<name>&gt;</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rational</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>rational</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list><block>{<return>return <expr><name>b</name> <operator>&lt;</operator> <name>a</name></expr>;</return>}</block></function></friend>
  <friend>friend <function type="operator"><type><name>bool</name></type> <name>operator<name>&gt;=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rational</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>rational</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list><block>{<return>return <expr><operator>!</operator><operator>(</operator><name>a</name> <operator>&lt;</operator> <name>b</name><operator>)</operator></expr>;</return>}</block></function></friend>
  <friend>friend <function type="operator"><type><name>bool</name></type> <name>operator<name>==</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rational</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>rational</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list><block>{<return>return <expr><operator>!</operator><operator>(</operator><name>a</name> <operator>&lt;</operator> <name>b</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>b</name> <operator>&lt;</operator> <name>a</name><operator>)</operator></expr>;</return>}</block></function></friend>
  <friend>friend <function type="operator"><type><name>bool</name></type> <name>operator<name>!=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rational</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>rational</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list><block>{<return>return <expr><operator>(</operator><name>a</name> <operator>&lt;</operator> <name>b</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>b</name> <operator>&lt;</operator> <name>a</name><operator>)</operator></expr>;</return>}</block></function></friend>
  <friend>friend <function type="operator"><type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name> <modifier>&amp;</modifier></type><name>os</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>rational</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list><block>{ <name>printf</name><expr_stmt><expr><operator>(</operator><literal type="string">"%.16f"</literal><operator>,</operator><operator>(</operator><name>double</name><operator>)</operator><name><name>x</name><operator>.</operator><name>p</name></name><operator>/</operator><operator>(</operator><name>double</name><operator>)</operator><name><name>x</name><operator>.</operator><name>q</name></name><operator>)</operator></expr>;</expr_stmt> <return>return <expr><name>os</name></expr>;</return> }</block></function></friend>
  <friend>friend <function type="operator"><type><name>istream</name><modifier>&amp;</modifier></type> <name>operator<name>&gt;&gt;</name></name><parameter_list>(<parameter><decl><type><name>istream</name> <modifier>&amp;</modifier></type><name>is</name></decl></parameter>, <parameter><decl><type><name>rational</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list><block>{<name>is</name><expr_stmt><expr><operator>&gt;&gt;</operator><name><name>x</name><operator>.</operator><name>p</name></name><operator>&gt;&gt;</operator><name><name>x</name><operator>.</operator><name>q</name></name></expr>;</expr_stmt> <name><name>x</name><operator>.</operator><name>normalize</name></name><expr_stmt><expr><operator>(</operator><operator>)</operator></expr>;</expr_stmt> <return>return <expr><name>is</name></expr>;</return>}</block></function></friend>
</public>}</block>;</struct>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>


<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>;</decl_stmt><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>Divisor</name></type> <name>d</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>n</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
        <return>return ;</return>
    }</block></then></if>
    <decl_stmt><decl><type><name>ll</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>d.size()</argument>)</argument_list></macro><block>{
        <expr_stmt><expr><name>ans</name><operator>=</operator><call><name>gcd</name><argument_list>(<argument><expr><name>ans</name></expr></argument>,<argument><expr><name><name>d</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
}</block></function></unit>
