<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29782384_64381453.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>int</name></type> <name>solve</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name><name>a</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name><name>pf</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><init>=<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt> <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>n</name></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>pf</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>pf</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>n</name></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block type="pseudo"><if>if<condition>(<expr><name><name>pf</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;=</operator><name>i</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>i</name></expr>;</return></block></then></if></block></for>
}</block></function>

<function><type><name>int32_t</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>q</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>q</name></expr>;</expr_stmt> <while>while<condition>(<expr><name>q</name><operator>--</operator></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt> <decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><init>=<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt> <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>tmp</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>a</name><index>[<expr><name>tmp</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>}</block></for>
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name>solve</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    }</block></while>
}</block></function></unit>
