<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29740239_64394184.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ull</name>;</typedef>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name> <init>= <expr><literal type="number">1e5</literal> <operator>+</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt>

<struct>struct <name>DSU</name><block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name><name>lab</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>

	<function><type><name>void</name></type> <name>Init</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{
		<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>lab</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>lab</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	<function><type><name>int</name></type> <name>finds</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>)</parameter_list><block>{
		<if>if <condition>(<expr><name><name>lab</name><index>[<expr><name>u</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>u</name></expr>;</return></block></then></if>
		<return>return <expr><name><name>lab</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <call><name>finds</name> <argument_list>(<argument><expr><name><name>lab</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	<function><type><name>bool</name></type> <name>same</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list><block>{
		<return>return <expr><operator>(</operator><call><name>finds</name> <argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>finds</name> <argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
	}</block></function>
	<function><type><name>bool</name></type> <name>merges</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list><block>{
		<expr_stmt><expr><name>u</name> <operator>=</operator> <call><name>finds</name> <argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>finds</name> <argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>u</name> <operator>==</operator> <name>v</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
		<if>if <condition>(<expr><name><name>lab</name><index>[<expr><name>v</name></expr>]</index></name> <operator>&lt;</operator> <name><name>lab</name><index>[<expr><name>u</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>swap</name> <argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
		<expr_stmt><expr><name><name>lab</name><index>[<expr><name>u</name></expr>]</index></name> <operator>+=</operator> <name><name>lab</name><index>[<expr><name>v</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>lab</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <name>u</name></expr>;</expr_stmt>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	}</block></function>
</public>}</block><decl><name>dsu</name></decl>;</struct>

<function><type><name>int</name></type> <name>brute_force</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{
	<expr_stmt><expr><call><name><name>dsu</name><operator>.</operator><name>Init</name></name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
		<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block>{
			<if>if <condition>(<expr><name>n</name> <operator>%</operator> <operator>(</operator><name>j</name><operator>-</operator><name>i</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
				<expr_stmt><expr><call><name><name>dsu</name><operator>.</operator><name>merges</name></name> <argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></for>
	}</block></for>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block type="pseudo"><if>if <condition>(<expr><name><name>dsu</name><operator>.</operator><name>lab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><operator>++</operator><name>ret</name></expr>;</expr_stmt></block></then></if></block></for>
	<return>return <expr><name>ret</name></expr>;</return>
}</block></function>

<function><type><name>bool</name></type> <name>check</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>spf</name></decl></parameter>)</parameter_list><block>{
	<while>while <condition>(<expr><name>x</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block>{
		<if>if <condition>(<expr><name>x</name> <operator>%</operator> <name>spf</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
		<expr_stmt><expr><name>x</name> <operator>/=</operator> <name>spf</name></expr>;</expr_stmt>
	}</block></while>
	<return>return <expr><literal type="boolean">true</literal></expr>;</return>
}</block></function>

<function><type><name>signed</name></type> <name>main</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{
	<expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<decl_stmt><decl><type><name>int</name></type> <name>N</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>N</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>spf</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>*</operator><name>i</name><operator>&lt;=</operator><name>N</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
		<if>if <condition>(<expr><name>N</name> <operator>%</operator> <name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name>spf</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
			<break>break;</break>
		}</block></then></if>
	}</block></for>
	<comment type="line">//cerr &lt;&lt; brute_force (N) &lt;&lt; '\n';</comment>
	<if>if <condition>(<expr><name>spf</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>N</name></expr>;</expr_stmt></block></then>
	<elseif>else <if>if <condition>(<expr><call><name>check</name> <argument_list>(<argument><expr><name>N</name></expr></argument>, <argument><expr><name>spf</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>spf</name></expr>;</expr_stmt></block></then></if></elseif>
	<else>else <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
}</block></function>

</unit>
