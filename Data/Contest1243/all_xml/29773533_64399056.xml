<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29773533_64399056.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define> 
<function><type><name>int32_t</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>t</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <comment type="line">//cin&gt;&gt;t;</comment>
    <while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition><block>{
      <decl_stmt><decl><type><name>int</name></type> <name>N</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>N</name></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>gcd</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>sqrtN</name> <init>= <expr><call><name>sqrt</name><argument_list>(<argument><expr><name>N</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <for>for<control>(<init><decl><type><name>int</name></type> <name>num</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>num</name><operator>&lt;=</operator><name>sqrtN</name></expr>;</condition><incr><expr><name>num</name><operator>++</operator></expr></incr>)</control>
      <block>{
          <if>if<condition>(<expr><name>N</name><operator>%</operator><name>num</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
          <block>{
              <decl_stmt><decl><type><name>int</name></type> <name>bnum</name> <init>= <expr><name>N</name><operator>/</operator><name>num</name></expr></init></decl>;</decl_stmt>
              <if>if<condition>(<expr><name>num</name><operator>!=</operator><literal type="number">1</literal></expr>)</condition><then>
              <block type="pseudo"><expr_stmt><expr><name>gcd</name> <operator>=</operator> <call><name>__gcd</name><argument_list>(<argument><expr><name>gcd</name></expr></argument>,<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
              <expr_stmt><expr><name>gcd</name> <operator>=</operator> <call><name>__gcd</name><argument_list>(<argument><expr><name>gcd</name></expr></argument>,<argument><expr><name>bnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></then></if>
      }</block></for>
      <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>gcd</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
      }</block></while>
    }</block></function></unit>
