<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29758811_64381982.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ext/pb_ds/assoc_container.hpp&gt;</cpp:file></cpp:include>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><name>-</name><name>O3</name><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><name>Ofast</name><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><cpp:literal>"unroll-loops"</cpp:literal><name>)</name></cpp:pragma>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x.begin(), x.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sqr</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) * (x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PB</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<using>using <namespace>namespace <name>__gnu_pbds</name>;</namespace></using>

<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>N</name> <init>= <expr><literal type="number">3e5</literal> <operator>+</operator> <literal type="number">200</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>MOD</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mt19937_64</name></type> <name>rnd</name><argument_list>(<argument><expr><call><name><name>chrono</name><operator>::</operator><name>system_clock</name><operator>::</operator><name>now</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>time_since_epoch</name><argument_list>()</argument_list></call><operator>.</operator><call><name>count</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<using><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
using <name>_set</name> <init>= <type><name><name>tree</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name>null_type</name></expr></argument>, <argument><expr><name><name>less</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>rb_tree_tag</name></expr></argument>, <argument><expr><name>tree_order_statistics_node_update</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<decl_stmt><decl><type><name>ll</name></type> <name>Q</name></decl>,<decl><type ref="prev"/><name>n</name></decl>,<decl><type ref="prev"/><name>ans</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>string</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument> , <argument><expr><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type>  <name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name> <operator>::</operator> <name>iterator</name></name></type> <name>it</name></decl>;</decl_stmt>
<function><type><name>bool</name></type> <name>solv</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>m</name><index>[<expr><block>{<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>, <expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr>}</block></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    <decl_stmt><decl><type><name>bool</name></type> <name>edd</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><if>if<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
    <block>{
<comment type="line">//        cout&lt;&lt;i&lt;&lt;" - "&lt;&lt;a[i]&lt;&lt;" "&lt;&lt;b[i]&lt;&lt;"\n";</comment>
<comment type="line">//        cout&lt;&lt;i&lt;&lt;" : "&lt;&lt;m[{a[i], b[i]}].size()&lt;&lt;"\n";</comment>
        <if>if<condition>(<expr><name><name>m</name><index>[<expr><block>{<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>, <expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr>}</block></expr>]</index></name><operator>.</operator><call><name>find</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>m</name><index>[<expr><block>{<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>, <expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr>}</block></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>m</name><index>[<expr><block>{<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>, <expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr>}</block></expr>]</index></name><operator>.</operator><call><name>erase</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <if>if<condition>(<expr><name>edd</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
        <expr_stmt><expr><name>it</name> <operator>=</operator> <name><name>m</name><index>[<expr><block>{<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>, <expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr>}</block></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>it</name> <operator>!=</operator> <name><name>m</name><index>[<expr><block>{<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>, <expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr>}</block></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>)</condition><then>
        <block>{
<comment type="line">//            cout&lt;&lt;" : "&lt;&lt;*it&lt;&lt;;</comment>
            <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><operator>*</operator><name>it</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if<condition>(<expr><name><name>m</name><index>[<expr><block>{<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>, <expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr>}</block></expr>]</index></name><operator>.</operator><call><name>find</name><argument_list>(<argument><expr><operator>*</operator><name>it</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>m</name><index>[<expr><block>{<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>, <expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr>}</block></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>m</name><index>[<expr><block>{<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>, <expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr>}</block></expr>]</index></name><operator>.</operator><call><name>erase</name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        }</block></then> <else>else <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></else></if>
        <expr_stmt><expr><name>edd</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    }</block></then></if></block></for>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>Q</name></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>Q</name><operator>--</operator></expr>)</condition>
    <block>{
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>a</name><operator>&gt;&gt;</operator><name>b</name></expr>;</expr_stmt>
        <if>if<condition>(<expr><call><name>solv</name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Yes\n"</literal></expr>;</expr_stmt></block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No\n"</literal></expr>;</expr_stmt></block></else></if>
    }</block></while>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
