<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29783393_64410840.cpp"><comment type="block">/*suri_kumkaran*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UB</name></cpp:macro> <cpp:value>upper_bound</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LB</name></cpp:macro> <cpp:value>lower_bound</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BS</name></cpp:macro> <cpp:value>binary_search</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EB</name></cpp:macro> <cpp:value>emplace_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>"\n"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PI</name></cpp:macro> <cpp:value>3.1415926535897932384626433832795</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALL</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(a).begin(),(a).end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOS</name></cpp:macro> <cpp:value>ios::sync_with_stdio(0); cin.tie(0); cout.tie(0)</cpp:value></cpp:define>

<typedef>typedef <type><name>long</name> <name>long</name> <name>int</name></type> <name>int64</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int64</name></expr></argument>&gt;</argument_list></name></type> <name>VI64</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int64</name></expr></argument>,<argument><expr><name>int64</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>VII64</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>&gt;</argument_list></name></type> <name>VS</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int64</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>VVI</name>;</typedef>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><name>IOS</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int64</name></type> <name>T</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>T</name></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>T</name><operator>--</operator></expr>)</condition>
	<block>{
		<decl_stmt><decl><type><name>int64</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>string</name></type> <name>s1</name></decl>,<decl><type ref="prev"/><name>s2</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>s1</name><operator>&gt;&gt;</operator><name>s2</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>,<argument><expr><name>int64</name></expr></argument>&gt;</argument_list></name></type> <name>mp</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>VI64</name></type> <name>v</name></decl>;</decl_stmt>
		<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{
			<expr_stmt><expr><name><name>mp</name><index>[<expr><name><name>s1</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>mp</name><index>[<expr><name><name>s2</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
			<if>if<condition>(<expr><name><name>s1</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name><name>s2</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>EB</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></for>
		<decl_stmt><decl><type><name>bool</name></type> <name>b</name><init>=<expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>auto</name></type> <name>x</name><range>:<expr><name>mp</name></expr></range></decl></init>)</control>
		<block>{
			<if>if<condition>(<expr><name><name>x</name><operator>.</operator><name>S</name></name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><name>b</name><operator>=</operator><literal type="boolean">true</literal></expr>;</expr_stmt></block></then></if>
		}</block></for>
		<if>if<condition>(<expr><name>b</name></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
			<continue>continue;</continue>
		}</block></then></if>
		<decl_stmt><decl><type><name>VII64</name></type> <name>ans</name></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>int64</name></type> <name>m</name><init>=<expr><call><name><name>v</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>m</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{
			<if>if<condition>(<expr><name><name>s1</name><index>[<expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>==</operator><name><name>s2</name><index>[<expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>)</condition><then>
				<block type="pseudo"><continue>continue;</continue></block></then></if>
			<expr_stmt><expr><name>b</name><operator>=</operator><literal type="boolean">true</literal></expr>;</expr_stmt>
			<for>for<control>(<init><expr><name>j</name><operator>=</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>m</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
			<block>{
				<if>if<condition>(<expr><name><name>s1</name><index>[<expr><name><name>v</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name><operator>==</operator><name><name>s2</name><index>[<expr><name><name>v</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name></expr>)</condition><then>
					<block type="pseudo"><continue>continue;</continue></block></then></if>
				<if>if<condition>(<expr><name><name>s2</name><index>[<expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>==</operator><name><name>s2</name><index>[<expr><name><name>v</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name></expr>)</condition><then>
				<block>{
					<expr_stmt><expr><name>b</name><operator>=</operator><literal type="boolean">false</literal></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s1</name><index>[<expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>,<argument><expr><name><name>s2</name><index>[<expr><name><name>v</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr>,<expr><name><name>v</name><index>[<expr><name>j</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				}</block></then></if>
			}</block></for>
			<if>if<condition>(<expr><name>b</name></expr>)</condition><then>
			<block>{
				<for>for<control>(<init><expr><name>j</name><operator>=</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>m</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
				<block>{
					<if>if<condition>(<expr><name><name>s1</name><index>[<expr><name><name>v</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name><operator>==</operator><name><name>s2</name><index>[<expr><name><name>v</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name></expr>)</condition><then>
					<block type="pseudo"><continue>continue;</continue></block></then></if>
					<if>if<condition>(<expr><name><name>s2</name><index>[<expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>==</operator><name><name>s1</name><index>[<expr><name><name>v</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name></expr>)</condition><then>
					<block>{
						<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s1</name><index>[<expr><name><name>v</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name></expr></argument>,<argument><expr><name><name>s2</name><index>[<expr><name><name>v</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name><name>v</name><index>[<expr><name>j</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr>,<expr><name><name>v</name><index>[<expr><name>j</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s1</name><index>[<expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>,<argument><expr><name><name>s2</name><index>[<expr><name><name>v</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr>,<expr><name><name>v</name><index>[<expr><name>j</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>
					}</block></then></if>
				}</block></for>
			}</block></then></if>
		}</block></for>

		<if>if<condition>(<expr><name>s1</name><operator>==</operator><name>s2</name><operator>&amp;&amp;</operator><call><name><name>ans</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&lt;=</operator><literal type="number">2</literal><operator>*</operator><name>n</name></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Yes"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name><name>ans</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
			<for>for<control>(<init><decl><type><name>auto</name></type> <name>x</name><range>: <expr><name>ans</name></expr></range></decl></init>)</control>
				<block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>x</name><operator>.</operator><name>F</name></name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name><name>x</name><operator>.</operator><name>S</name></name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></for>
		}</block></then>
		<else>else
			<block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></else></if>



	}</block></while>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
