<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29784214_64401855.cpp"><comment type="line">// Siddhant Gautam</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ull</name></cpp:macro> <cpp:value>unsigned long long ll</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x.begin(),x.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ss</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bitcount</name></cpp:macro> <cpp:value>__builtin_popcountll</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INF</name></cpp:macro> <cpp:value>1e18+9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>eb</name></cpp:macro> <cpp:value>emplace_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIO</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(false)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<function><type><name>ll</name></type> <name>power</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>m</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><name>a</name><operator>%=</operator><name>m</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>ret</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>b</name></expr>)</condition>
    <block>{
        <if>if<condition>(<expr><name>b</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>ret</name><operator>=</operator><operator>(</operator><operator>(</operator><name>ret</name><operator>%</operator><name>m</name><operator>)</operator><operator>*</operator><operator>(</operator><name>a</name><operator>%</operator><name>m</name><operator>)</operator><operator>)</operator><operator>%</operator><name>m</name></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name>a</name><operator>=</operator><operator>(</operator><operator>(</operator><name>a</name><operator>%</operator><name>m</name><operator>)</operator><operator>*</operator><operator>(</operator><name>a</name><operator>%</operator><name>m</name><operator>)</operator><operator>)</operator><operator>%</operator><name>m</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>b</name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><name>ret</name></expr>;</return>
}</block></function>

<struct>struct <name>DSU</name><block>{<public type="default">
    <decl_stmt><decl><type><name>ll</name></type> <name><name>par</name><index>[<expr><literal type="number">100006</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name><name>size</name><index>[<expr><literal type="number">100006</literal></expr>]</index></name></decl>;</decl_stmt>
 
    <function><type><name>void</name></type> <name>init</name><parameter_list>()</parameter_list><block>{
        <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">100006</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
            <expr_stmt><expr><name><name>par</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>size</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        }</block></for>
    }</block></function>
 
    <function><type><name>ll</name></type> <name>parent</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{
        <while>while<condition>(<expr><name>n</name> <operator>!=</operator> <name><name>par</name><index>[<expr><name>n</name></expr>]</index></name></expr>)</condition><block>{
            <expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>par</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>par</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[<expr><name><name>par</name><index>[<expr><name>n</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
        }</block></while>
        <return>return <expr><name>n</name></expr>;</return>
    }</block></function>
 
    <function><type><name>void</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>parx</name> <init>= <expr><call><name>parent</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ll</name></type> <name>pary</name> <init>= <expr><call><name>parent</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
        <if>if<condition>(<expr><name>parx</name> <operator>==</operator> <name>pary</name></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then></if>
 
        <if>if<condition>(<expr><name><name>size</name><index>[<expr><name>parx</name></expr>]</index></name> <operator>&lt;</operator> <name><name>size</name><index>[<expr><name>pary</name></expr>]</index></name></expr>)</condition><then><block>{
            <expr_stmt><expr><name><name>size</name><index>[<expr><name>pary</name></expr>]</index></name> <operator>+=</operator> <name><name>size</name><index>[<expr><name>parx</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>par</name><index>[<expr><name>parx</name></expr>]</index></name> <operator>=</operator> <name>pary</name></expr>;</expr_stmt>
        }</block></then>
        <else>else<block>{
            <expr_stmt><expr><name><name>size</name><index>[<expr><name>parx</name></expr>]</index></name> <operator>+=</operator> <name><name>size</name><index>[<expr><name>pary</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>par</name><index>[<expr><name>pary</name></expr>]</index></name> <operator>=</operator> <name>parx</name></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>
 
    <function><type><name>bool</name></type> <name>isConnected</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{
        <return>return <expr><operator>(</operator><call><name>parent</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>parent</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
    }</block></function>
</public>}</block><decl><name>dsu</name></decl>;</struct>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><name>FIO</name></expr>;</expr_stmt>
    
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></type> <name><name>v</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>unordered_map</name> <argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></type> <name><name>se</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt; <argument><expr><name><name>pair</name> <argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>arr</name></decl>;</decl_stmt>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>m</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>x</name> <operator>&gt;&gt;</operator> <name>y</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>v</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>v</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>se</name><index>[<expr><call><name>min</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>]</index><index>[<expr><call><name>max</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    }</block></for>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><call><name><name>arr</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><block>{<expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>,<expr><name>i</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name>arr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>reverse</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name>arr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>dsu</name><operator>.</operator><name>init</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">2000000</literal><operator>/</operator><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>prev</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <for>for<control>(<init><decl><type><name><name>pair</name> <argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></type> <name>p</name> <range>: <expr><name>arr</name></expr></range></decl></init>)</control><block>{
        <if>if<condition>(<expr><name>count</name></expr>)</condition><then><block>{
            <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
                <if>if<condition>(<expr><name><name>se</name><index>[<expr><call><name>min</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>ss</name></name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>]</index><index>[<expr><call><name>max</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>ss</name></name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then><block>{
                    <continue>continue;</continue>
                }</block></then></if>
                <expr_stmt><expr><call><name><name>dsu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>ss</name></name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
            <expr_stmt><expr><name>count</name><operator>--</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>prev</name> <operator>=</operator> <name><name>p</name><operator>.</operator><name>ss</name></name></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><call><name><name>dsu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>ss</name></name></expr></argument>,<argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>prev</name> <operator>=</operator> <name><name>p</name><operator>.</operator><name>ss</name></name></expr>;</expr_stmt>
        }</block></else></if>
    }</block></for>

    <decl_stmt><decl><type><name><name>set</name> <argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></type> <name>ans</name></decl>;</decl_stmt>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name><name>dsu</name><operator>.</operator><name>parent</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name><name>ans</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
