<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29781826_64412762.cpp"><comment type="line" format="doxygen">//////////////////////// AUTHOR -PRIYANSHI JAIN ////////////////////</comment>
<comment type="line" format="doxygen">//////////////////////// INSTITUTE - IIT JODHPUR /////////////////////</comment>


<comment type="line">//typedef cpp_ll c_i;</comment>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name> ;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>p0</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout &lt;&lt;std::fixed&lt;&lt;std::setprecision(0)&lt;&lt;x &lt;&lt;" "</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>p1</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout &lt;&lt;x &lt;&lt;endl</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>p2</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout &lt;&lt;x &lt;&lt;" " &lt;&lt;y &lt;&lt;endl</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>p3</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout &lt;&lt;x &lt;&lt;" " &lt;&lt;y &lt;&lt;" " &lt;&lt;z &lt;&lt;endl</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>p4</name><parameter_list>(<parameter><type><name>w</name></type></parameter>,<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout &lt;&lt;w &lt;&lt;" " &lt;&lt;x &lt;&lt;" " &lt;&lt;y &lt;&lt;" " &lt;&lt;z &lt;&lt;endl</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nL</name></cpp:macro> <cpp:value>cout&lt;&lt;endl</cpp:value></cpp:define>
 
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
 
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>vi</name></cpp:macro> <cpp:value>vector&lt;int&gt;</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>vll</name></cpp:macro> <cpp:value>vector&lt;ll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vpii</name></cpp:macro> <cpp:value>vector &lt;pair&lt;int,int&gt;&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vpll</name></cpp:macro> <cpp:value>vector &lt;pair&lt;ll,ll&gt;&gt;</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>vvi</name></cpp:macro> <cpp:value>vector&lt; vector &lt;int&gt; &gt;</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>vvll</name></cpp:macro> <cpp:value>vector&lt; vector &lt;ll&gt; &gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ss</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
 
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>srt</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>sort(a.begin(),a.end())</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>f</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(ll i=a;i&lt;b;i++)</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>frev</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(ll  i=a;i&gt;=b;i--)</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>srtrev</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>sort(a.begin(),a.end(),cmp)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gcd</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__gcd(a,b);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lcm</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>(a/gcd(a,b))*b;</cpp:value></cpp:define>
 
<using>using <namespace>namespace <name>std</name>;</namespace></using>
 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Map</name></cpp:macro> <cpp:value>map&lt;ll, ll &gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>umap</name></cpp:macro> <cpp:value>unordered_map&lt;ll,ll &gt;</cpp:value></cpp:define>
<decl_stmt><decl><type><name>ll</name></type> <name>limit</name> <init>= <expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl> ;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fast</name></cpp:macro>  <cpp:value>ios_base::sync_with_stdio(false); cin.tie(0);  cout.tie(0);</cpp:value></cpp:define>
 
<comment type="line" format="doxygen">//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////</comment>
<function><type><name>bool</name></type> <name>cmp</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
  <return>return <expr><name>a</name><operator>&gt;</operator><name>b</name></expr>;</return>
}</block></function>
<function><type><name>ll</name></type> <name>myceil</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
  <return>return <expr><name>a</name><operator>/</operator><name>b</name> <operator>+</operator><call><name>bool</name><argument_list>(<argument><expr><name>a</name><operator>%</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>ll</name></type> <name>mylog</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>num</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>base</name></decl></parameter>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>ll</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <while>while<condition>(<expr><name>num</name></expr>)</condition>
  <block>{
    <expr_stmt><expr><name>ans</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>num</name><operator>/=</operator><name>base</name></expr>;</expr_stmt>
  }</block></while>
  <return>return <expr><name>ans</name><operator>-</operator><literal type="number">1</literal></expr>;</return>
}</block></function>
<function><type><name>ll</name></type> <name>Pow</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter> )</parameter_list>  <comment type="line">//for modulus power</comment>
<block>{
  <decl_stmt><decl><type><name>ll</name></type> <name>ans</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>mul</name><init>=<expr><name>a</name></expr></init></decl>;</decl_stmt>
  <while>while<condition>(<expr><name>b</name></expr>)</condition>
  <block>{
    <if>if<condition>(<expr><name>b</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>ans</name><operator>=</operator><operator>(</operator><name>ans</name><operator>*</operator><name>mul</name><operator>)</operator><operator>%</operator><name>limit</name></expr>;</expr_stmt></block></then></if>
    <expr_stmt><expr><name>mul</name><operator>=</operator><operator>(</operator><name>mul</name><operator>*</operator><name>mul</name><operator>)</operator><operator>%</operator><name>limit</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>b</name><operator>/=</operator><literal type="number">2</literal></expr>;</expr_stmt>
  }</block></while>
  <return>return <expr><name>ans</name></expr>;</return>
}</block></function>
<comment type="line" format="doxygen">//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////</comment>
 
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <comment type="line">//fast;</comment>
    <decl_stmt><decl><type><name>ll</name></type> <name>t</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
  
    <while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition>
    <block>{
         <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
         <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
         <decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>,<decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
         <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>s</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
         <comment type="line">//cout&lt;&lt;n&lt;&lt;" "&lt;&lt;s&lt;&lt;" "&lt;&lt;t&lt;&lt;'\n';</comment>
         <decl_stmt><decl><type><name>int</name></type> <name><name>cnt</name><index>[<expr><literal type="number">26</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
         <macro><name>f</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">26</literal></argument>)</argument_list></macro>
         <macro><name>f</name><argument_list>(<argument>j</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">2</literal></argument>)</argument_list></macro>
         <expr_stmt><expr><name><name>cnt</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
         <macro><name>f</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro>
         <block>{
			 <expr_stmt><expr><name><name>cnt</name><index>[<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
			 <expr_stmt><expr><name><name>cnt</name><index>[<expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
		 }</block>
		 <decl_stmt><decl><type><name>bool</name></type> <name>eq</name><init>=<expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
		 <macro><name>f</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">26</literal></argument>)</argument_list></macro>
		 <if>if<condition>(<expr><call><name>abs</name><argument_list>(<argument><expr><name><name>cnt</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-</operator><name><name>cnt</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>%</operator><literal type="number">2</literal><operator>!=</operator><literal type="number">0</literal></expr>)</condition><then>
		  <block type="pseudo"><expr_stmt><expr><name>eq</name><operator>=</operator><literal type="boolean">false</literal></expr>;</expr_stmt></block></then></if>
		 <if>if<condition>(<expr><name>eq</name><operator>==</operator><literal type="boolean">false</literal></expr>)</condition><then>
		 <block>{ <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No\n"</literal></expr>;</expr_stmt>  <continue>continue;</continue>}</block></then></if>
		 <decl_stmt><decl><type><name>vpii</name></type> <name>ans</name></decl>;</decl_stmt>
	     <macro><name>f</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro>
         <block>{
            <decl_stmt><decl><type><name>char</name></type> <name>ch</name><init>=<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
            <block>{
               
                <macro><name>f</name><argument_list>(<argument>j</argument>,<argument>i+<literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro>
                <block>{<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name><operator>==</operator><name>ch</name></expr>)</condition><then>
                <block>{
                     <expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><block>{<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>,<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                     <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                     <comment type="line">//cout&lt;&lt;s&lt;&lt;" "&lt;&lt;t&lt;&lt;"\n";</comment>
                     <break>break;</break>
                }</block></then></if>
                <comment type="line">//cout&lt;&lt;s&lt;&lt;" "&lt;&lt;t&lt;&lt;"\n";</comment>
			}</block>

            }</block></then></if>
            <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
            <block>{
			
                <macro><name>f</name><argument_list>(<argument>j</argument>,<argument>i+<literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro>
                <if>if<condition>(<expr><name><name>t</name><index>[<expr><name>j</name></expr>]</index></name><operator>==</operator><name>ch</name></expr>)</condition><then>
                <block>{
				
					
				
                     <expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><block>{<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>,<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                     <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>t</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			   <comment type="line">//cout&lt;&lt;s&lt;&lt;" "&lt;&lt;t&lt;&lt;"\n";</comment>
                     <expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><block>{<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>,<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                     <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <comment type="line">// cout&lt;&lt;s&lt;&lt;" "&lt;&lt;t&lt;&lt;"\n";</comment>
                     <break>break;</break>
                }</block></then></if>
                
            }</block></then></if>
         }</block>
         <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Yes\n"</literal><operator>&lt;&lt;</operator><call><name><name>ans</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&lt;&lt;</operator><literal type="string">"\n"</literal></expr>;</expr_stmt>
         <for>for<control>(<init><decl><type><name>auto</name></type> <name>u</name><range>: <expr><name>ans</name></expr></range></decl></init>)</control>
            <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>u</name><operator>.</operator><name>ff</name></name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name><name>u</name><operator>.</operator><name>ss</name></name><operator>&lt;&lt;</operator><literal type="string">"\n"</literal></expr>;</expr_stmt></block></for>
     }</block></while>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
