<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29775026_64417521.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (ll i=x;i&lt;y;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>per</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (ll i=x;i&gt;=y;i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>quicker</name></cpp:macro> <cpp:value>ios::sync_with_stdio(false);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>first</name></cpp:macro> <cpp:value>fi</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>second</name></cpp:macro> <cpp:value>sec</cpp:value></cpp:define>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>HOLLAND_PIG</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>long</name> <name>long</name></type> <name>INF</name><init>=<expr><literal type="number">2147483647</literal></expr></init></decl>;</decl_stmt>

<function><specifier>inline</specifier> <type><name>int</name></type> <name>read</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>k</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name>f</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name>c</name><init>=<expr><call><name>getchar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>c</name><operator>&gt;</operator><literal type="char">'9'</literal><operator>||</operator><name>c</name><operator>&lt;</operator><literal type="char">'0'</literal></expr>)</condition>
    <block>{
        <if>if<condition>(<expr><name>c</name><operator>==</operator><literal type="char">'-'</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>f</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></while>
    <while>while<condition>(<expr><name>c</name><operator>&lt;=</operator><literal type="char">'9'</literal><operator>&amp;&amp;</operator><name>c</name><operator>&gt;=</operator><literal type="char">'0'</literal></expr>)</condition>
    <block>{
        <expr_stmt><expr><name>k</name><operator>=</operator><name>k</name><operator>*</operator><literal type="number">10</literal><operator>+</operator><name>c</name><operator>-</operator><literal type="char">'0'</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><name>k</name><operator>*</operator><name>f</name></expr>;</return>
}</block></function>

<function><type><name>ll</name></type> <name>max</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{
	<if>if <condition>(<expr><name>x</name><operator>&gt;</operator><name>y</name></expr>)</condition><then>
	<block>{
		<return>return <expr><name>x</name></expr>;</return>
	}</block></then>
	<else>else
	<block>{
		<return>return <expr><name>y</name></expr>;</return>
	}</block></else></if>
}</block></function>

<function><type><name>ll</name></type> <name>min</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{
	<if>if <condition>(<expr><name>x</name><operator>&lt;</operator><name>y</name></expr>)</condition><then>
	<block>{
		<return>return <expr><name>x</name></expr>;</return>
	}</block></then>
	<else>else
	<block>{
		<return>return <expr><name>y</name></expr>;</return>
	}</block></else></if>
}</block></function>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>u</name></decl>,<decl><type ref="prev"/><name>v</name></decl>,<decl><type ref="prev"/><name><name>y</name><index>[<expr><literal type="number">100043</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>nxt</name><index>[<expr><literal type="number">100043</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name>ans</name></decl>;</decl_stmt><decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>h</name><index>[<expr><literal type="number">100043</literal></expr>]</index></name></decl>;</decl_stmt><decl_stmt><decl><type><name>bool</name></type> <name><name>vis</name><index>[<expr><literal type="number">100043</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>gg</name><index>[<expr><literal type="number">100043</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>del</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name><name>nxt</name><index>[<expr><name><name>y</name><index>[<expr><name>u</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name><name>nxt</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt><expr_stmt><expr><name><name>y</name><index>[<expr><name><name>nxt</name><index>[<expr><name>u</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name><name>y</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt><expr_stmt><expr><name><name>vis</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>}</block></function>
<function><type><name>void</name></type> <name>fxt</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>)</parameter_list>
<block>{<expr_stmt><expr><operator>++</operator><name>ans</name></expr>;</expr_stmt><decl_stmt><decl><type><name><name>queue</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>que</name></decl>;</decl_stmt><expr_stmt><expr><call><name><name>que</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>del</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><while>while<condition>(<expr><operator>!</operator><call><name><name>que</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{<decl_stmt><decl><type><name>int</name></type> <name>u</name><init>=<expr><call><name><name>que</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><expr_stmt><expr><call><name><name>que</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt><macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>h[u].size()</argument>)</argument_list></macro><block>{<if>if<condition>(<expr><operator>!</operator><name><name>vis</name><index>[<expr><name><name>h</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>gg</name><index>[<expr><name><name>h</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>=</operator><literal type="boolean">true</literal></expr>;</expr_stmt></block></then></if>}</block>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name><name>nxt</name><index>[<expr><name>HOLLAND_PIG</name><operator>-</operator><name>HOLLAND_PIG</name></expr>]</index></name></expr></init></decl>;</init><condition><expr><name>i</name></expr>;</condition><incr><expr><name>i</name><operator>=</operator><name><name>nxt</name><index>[<expr><name>i</name></expr>]</index></name></expr></incr>)</control><block>{<if>if<condition>(<expr><operator>!</operator><name><name>gg</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block>{<expr_stmt><expr><call><name><name>que</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>del</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></then></if>}</block></for><macro><name>rep</name><argument_list>(<argument>i</argument>, <argument>HOLLAND_PIG-HOLLAND_PIG</argument>,<argument>h[u].size()</argument>)</argument_list></macro><block>{<if>if<condition>(<expr><operator>!</operator><name><name>vis</name><index>[<expr><name><name>h</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>gg</name><index>[<expr><name><name>h</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>=</operator><literal type="boolean">false</literal></expr>;</expr_stmt></block></then></if>
}</block>}</block></while>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>m</name></expr>;</expr_stmt><macro><name>rep</name><argument_list>(<argument>i</argument>, <argument>HOLLAND_PIG</argument>, <argument>n+HOLLAND_PIG</argument>)</argument_list></macro> <expr_stmt><expr><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>-</operator> <name>HOLLAND_PIG</name></expr><operator>,</operator> <expr><name><name>nxt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>+</operator> <name>HOLLAND_PIG</name></expr>;</expr_stmt><expr_stmt><expr><name><name>nxt</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name>HOLLAND_PIG</name><operator>-</operator><name>HOLLAND_PIG</name></expr>;</expr_stmt><expr_stmt><expr><name><name>nxt</name><index>[<expr><name>HOLLAND_PIG</name><operator>-</operator><name>HOLLAND_PIG</name></expr>]</index></name> <operator>=</operator> <name>HOLLAND_PIG</name></expr>;</expr_stmt>
	<macro><name>rep</name><argument_list>(<argument>i</argument>, <argument>HOLLAND_PIG</argument>, <argument>m+HOLLAND_PIG</argument>)</argument_list></macro><block>{<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>u</name><operator>&gt;&gt;</operator><name>v</name></expr>;</expr_stmt><expr_stmt><expr><name><name>h</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name><name>h</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block><decl_stmt><decl><type><name>int</name></type> <name>xx</name> <init>= <expr><name>HOLLAND_PIG</name><operator>-</operator><name>HOLLAND_PIG</name></expr></init></decl>;</decl_stmt><while>while<condition>(<expr><name><name>nxt</name><index>[<expr><name>xx</name></expr>]</index></name></expr>)</condition><block>{<expr_stmt><expr><name><name>vis</name><index>[<expr><name><name>nxt</name><index>[<expr><name>xx</name></expr>]</index></name></expr>]</index></name><operator>=</operator><literal type="boolean">true</literal></expr>;</expr_stmt><expr_stmt><expr><call><name>fxt</name><argument_list>(<argument><expr><name><name>nxt</name><index>[<expr><name>xx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name>xx</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>}</block></while>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>-</operator> <name>HOLLAND_PIG</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt><return>return <expr><literal type="number">0</literal></expr>;</return>}</block></function></unit>
