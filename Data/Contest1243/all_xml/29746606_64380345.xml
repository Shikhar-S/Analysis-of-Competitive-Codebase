<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29746606_64380345.cpp"><comment type="line" format="doxygen">///==================================================///</comment>
<comment type="line" format="doxygen">///</comment>
<comment type="line" format="doxygen">///  Ir0nic_  ///</comment>
<comment type="line" format="doxygen">///  MEHUL BHUTALIA  ///</comment>
<comment type="line" format="doxygen">/// Indian Institute Of Information Technology and Management,Gwalior.  ///</comment>
<comment type="line" format="doxygen">///</comment>
<comment type="line" format="doxygen">///==================================================///</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LOCAL_PROJECT</name></cpp:ifdef>
<cpp:include>#       <cpp:directive>include</cpp:directive> <cpp:file>&lt;prettypr.hpp&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive>     <cpp:macro><name>T</name><parameter_list>()</parameter_list></cpp:macro>                 <cpp:value>ll tt;    cin &gt;&gt; tt;        while(tt--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>     <cpp:macro><name>ll</name></cpp:macro>                  <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>     <cpp:macro><name>vi</name></cpp:macro>                  <cpp:value>vector&lt;ll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>     <cpp:macro><name>pii</name></cpp:macro>                 <cpp:value>pair&lt;ll,ll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>     <cpp:macro><name>vpair</name></cpp:macro>               <cpp:value>vector&lt; pii &gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>     <cpp:macro><name>fast</name></cpp:macro>                <cpp:value>ios_base::sync_with_stdio(false),cin.tie(0),cout.tie(0);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>     <cpp:macro><name>repp</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>         <cpp:value>for(ll i = a; i &lt; n; ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>     <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>            <cpp:value>for(ll i = 0; i &lt; n; ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>     <cpp:macro><name>rrep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>           <cpp:value>for(ll i = n - 1; i &gt;= 0; --i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>     <cpp:macro><name>p_b</name></cpp:macro>                 <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>     <cpp:macro><name>p_f</name></cpp:macro>                 <cpp:value>push_front</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>     <cpp:macro><name>pop_b</name></cpp:macro>               <cpp:value>pop_back()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>     <cpp:macro><name>pop_f</name></cpp:macro>               <cpp:value>pop_front()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>     <cpp:macro><name>m_p</name></cpp:macro>                 <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>     <cpp:macro><name>sumv</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro>             <cpp:value>accumulate(v.begin(),v.end(),0);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>     <cpp:macro><name>sortv</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro>            <cpp:value>sort(v.begin(),v.end())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>     <cpp:macro><name>sort_dec</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro>         <cpp:value>sort(v.begin(),v.end(),greater&lt;ll&gt;() )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>     <cpp:macro><name>l_b</name><parameter_list>(<parameter><type><name>v</name></type></parameter>,<parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro>            <cpp:value>lower_bound (v.begin(), v.end(), l)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>     <cpp:macro><name>u_b</name><parameter_list>(<parameter><type><name>v</name></type></parameter>,<parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro>            <cpp:value>upper_bound (v.begin(), v.end(), l)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>     <cpp:macro><name>pq</name></cpp:macro>                  <cpp:value>priority_queue</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>     <cpp:macro><name>ff</name></cpp:macro>                  <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>     <cpp:macro><name>ss</name></cpp:macro>                  <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>     <cpp:macro><name>len</name></cpp:macro>                 <cpp:value>length()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>     <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro>              <cpp:value>v.begin(),v.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>     <cpp:macro><name>mset</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>           <cpp:value>memset(a,b,sizeof( a ));</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>     <cpp:macro><name>endl</name></cpp:macro>                <cpp:value>'\n'</cpp:value></cpp:define>
<comment type="line" format="doxygen">///==========INPUT=============///</comment>
<cpp:define>#<cpp:directive>define</cpp:directive>     <cpp:macro><name>sc</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro>           <cpp:value>cin &gt;&gt; a;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>     <cpp:macro><name>sc2</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>        <cpp:value>cin &gt;&gt; a &gt;&gt; b;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>     <cpp:macro><name>sc3</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro>      <cpp:value>cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>     <cpp:macro><name>sc4</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>cin &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d;</cpp:value></cpp:define>

<comment type="line" format="doxygen">///==========PRINTING=============///</comment>
<cpp:define>#<cpp:directive>define</cpp:directive>     <cpp:macro><name>prarr</name><parameter_list>(<parameter><type><name>arr</name></type></parameter>)</parameter_list></cpp:macro>      <cpp:value>rep(i,sizeof( arr ) / sizeof( ll )) cout &lt;&lt; arr[i] &lt;&lt; " "; nl</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>     <cpp:macro><name>prvec</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro>        <cpp:value>rep(i,v.size()) cout &lt;&lt; v[i] &lt;&lt; " "; nl</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>     <cpp:macro><name>pr2d</name><parameter_list>(<parameter><type><name>arr</name></type></parameter>,<parameter><type><name>n</name></type></parameter>,<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>rep(i,n){rep(j,m) cout &lt;&lt; arr[i][j] &lt;&lt; " "; nl}</cpp:value></cpp:define>

<comment type="line" format="doxygen">///==========DEBUGGING=============///</comment>
<cpp:define>#<cpp:directive>define</cpp:directive>     <cpp:macro><name>debug</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro>            <cpp:value>cout &lt;&lt; "*" &lt;&lt; a &lt;&lt; endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>     <cpp:macro><name>debug2</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>         <cpp:value>cout &lt;&lt; "$" &lt;&lt; a &lt;&lt; " " &lt;&lt; b &lt;&lt; endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>     <cpp:macro><name>debug3</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro>       <cpp:value>cout &lt;&lt; "$" &lt;&lt; a &lt;&lt; " " &lt;&lt; b &lt;&lt; " " &lt;&lt; c &lt;&lt; endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>     <cpp:macro><name>bug</name></cpp:macro>                 <cpp:value>cout &lt;&lt; "#" &lt;&lt; endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>     <cpp:macro><name>nl</name></cpp:macro>                  <cpp:value>cout &lt;&lt; endl;</cpp:value></cpp:define>

<comment type="line" format="doxygen">///==========CONSTANTS=============///</comment>
<cpp:define>#<cpp:directive>define</cpp:directive>     <cpp:macro><name>max6</name></cpp:macro>     <cpp:value>1000005</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>     <cpp:macro><name>max5</name></cpp:macro>     <cpp:value>100004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>     <cpp:macro><name>max4</name></cpp:macro>     <cpp:value>10003</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>     <cpp:macro><name>mod</name></cpp:macro>      <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>     <cpp:macro><name>inf</name></cpp:macro>      <cpp:value>1e18</cpp:value></cpp:define>
<function><type><name>ll</name></type> <name>powermod</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>_a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>_b</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>_m</name></decl></parameter>)</parameter_list>    <block>{
	<decl_stmt><decl><type><name>ll</name></type> <name>_r</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> <while>while<condition>(<expr><name>_b</name></expr>)</condition> <block>{<if>if<condition>(<expr><name>_b</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>_r</name> <operator>=</operator> <operator>(</operator> <name>_r</name> <operator>*</operator> <name>_a</name> <operator>)</operator> <operator>%</operator> <name>_m</name></expr>;</expr_stmt></block></then></if> <expr_stmt><expr><name>_b</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <expr_stmt><expr><name>_a</name> <operator>=</operator> <operator>(</operator> <name>_a</name> <operator>*</operator> <name>_a</name> <operator>)</operator> <operator>%</operator> <name>_m</name></expr>;</expr_stmt>}</block></while> <return>return <expr><name>_r</name></expr>;</return>
}</block></function>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<function><template>template <parameter_list>&lt; <parameter><type><name>typename</name></type> <name>T</name></parameter> &gt;</parameter_list></template> <type><name>void</name></type> <name>pr</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T</name><modifier>&amp;</modifier></type> <name>t</name></decl></parameter>)</parameter_list> <block>{
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>t</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
}</block></function>

<function><template>template <parameter_list>&lt; <parameter><type><name>typename</name></type> <name>T</name></parameter>, <parameter><type><name>typename</name></type> <name>U</name></parameter>, <parameter><type><name>typename</name> <modifier>...</modifier></type> <name>ARGS</name></parameter> &gt;</parameter_list></template>
<type><name>void</name></type> <name>pr</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T</name><modifier>&amp;</modifier></type> <name>t</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>U</name><modifier>&amp;</modifier></type> <name>u</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ARGS</name><modifier>&amp;</modifier> <modifier>...</modifier></type> <name>args</name></decl></parameter>)</parameter_list> <block>{
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>t</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pr</name> <argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>args</name> <operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<function><type><name>fast</name></type>
	<name>T</name><parameter_list>()</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>;</decl_stmt>
		<macro><name>sc</name><argument_list>(<argument>n</argument>)</argument_list></macro>
		<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>,<decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
		<macro><name>sc2</name><argument_list>(<argument>s</argument>,<argument>t</argument>)</argument_list></macro>
		<decl_stmt><decl><type><name>ll</name></type> <name>c</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument>n</argument>)</argument_list></macro>
		<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
		<block type="pseudo"><expr_stmt><expr><name>c</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
		<if>if<condition>(<expr><name>c</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><call><name>pr</name><argument_list>(<argument><expr><literal type="string">"Yes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<elseif>else <if>if<condition>(<expr><name>c</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then>
		<block>{
			<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name></type> <name>c</name></decl>;</decl_stmt>
			<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument>n</argument>)</argument_list></macro>
			<block>{
				<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>p_b</name></name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><call><name><name>c</name><operator>.</operator><name>p_b</name></name><argument_list>(<argument><expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
			}</block>
			<if>if<condition>(<expr><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&amp;&amp;</operator><name><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>==</operator><name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><call><name>pr</name><argument_list>(<argument><expr><literal type="string">"Yes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
			<else>else
			<block type="pseudo"><expr_stmt><expr><call><name>pr</name><argument_list>(<argument><expr><literal type="string">"No"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
		}</block></then></if></elseif>
		<else>else
		<block type="pseudo"><expr_stmt><expr><call><name>pr</name><argument_list>(<argument><expr><literal type="string">"No"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
	}</block></function>
}</block></function>
</unit>
