<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29749477_64387608.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;map&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>k</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>string</name></type> <name>str1</name></decl>, <decl><type ref="prev"/><name>str2</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>str1</name> <operator>&gt;&gt;</operator> <name>str2</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>ch</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name></type> <name>f</name> <init>= <expr><literal type="char">'0'</literal></expr></init></decl>, <decl><type ref="prev"/><name>s</name> <init>= <expr><literal type="char">'0'</literal></expr></init></decl>, <decl><type ref="prev"/><name>fb</name> <init>= <expr><literal type="char">'0'</literal></expr></init></decl>, <decl><type ref="prev"/><name>sb</name> <init>= <expr><literal type="char">'0'</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
            <if>if <condition>(<expr><name><name>str1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>str2</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><operator>++</operator><name>ch</name></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>f</name> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>f</name> <operator>=</operator> <name><name>str1</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>fb</name> <operator>=</operator> <name><name>str2</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
                }</block></then>
                <else>else <block>{
                    <expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>str1</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>sb</name> <operator>=</operator> <name><name>str2</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
                }</block></else></if>
            }</block></then></if>
        }</block></for>
        <if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>f</name> <operator>==</operator> <name>s</name> <operator>&amp;&amp;</operator> <name>fb</name> <operator>==</operator> <name>sb</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Yes\n"</literal></expr>;</expr_stmt></block></then>
        <else>else
            <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No\n"</literal></expr>;</expr_stmt></block></else></if>
    }</block></for>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
