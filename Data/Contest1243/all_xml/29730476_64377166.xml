<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29730476_64377166.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
 
 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ext/pb_ds/assoc_container.hpp&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ext/pb_ds/tree_policy.hpp&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ext/pb_ds/detail/standard_policies.hpp&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>__gnu_pbds</name>;</namespace></using>
 
 
<using>using <namespace>namespace <name>std</name>;</namespace></using>
 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>ONLINE_JUDGE</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
 
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>ii</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>vii</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>pll</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>vvi</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ii</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>vvii</name>;</typedef>
 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x.begin(),x.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(int)x.size()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fill</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(a,x,sizeof(a))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ss</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>trav</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(auto&amp; a : x)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = a; i&lt;=b; ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NFOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = a; i&gt;=b; --i)</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>INF</name> <init>= <expr><literal type="number">1e18</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mod</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
 
<function><type><name>ll</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<if>if <condition>(<expr><name>a</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>b</name></expr>;</return></block></then></if><return>return <expr><call><name>gcd</name><argument_list>(<argument><expr><name>b</name><operator>%</operator><name>a</name></expr></argument>,<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</return>}</block></function>
<function><type><name>ll</name></type> <name>lcm</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<return>return <expr><name>a</name><operator>*</operator><operator>(</operator><name>b</name><operator>/</operator><call><name>gcd</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>}</block></function>
<function><type><name>ll</name></type> <name>Abs</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>)</parameter_list><block>{<if>if<condition>(<expr><name>a</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><name>a</name></expr>;</return></block></then></if><return>return <expr><operator>-</operator><name>a</name></expr>;</return>}</block></function>
<function><type><name>ll</name></type> <name>Ceil</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<if>if<condition>(<expr><name>a</name><operator>%</operator><name>b</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><name>a</name><operator>/</operator><name>b</name></expr>;</return></block></then><else>else <block type="pseudo"><return>return <expr><name>a</name><operator>/</operator><name>b</name><operator>+</operator><literal type="number">1</literal></expr>;</return></block></else></if>}</block></function>
<function><type><name>double</name></type> <name>Abs</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>a</name></decl></parameter>)</parameter_list><block>{<if>if<condition>(<expr><name>a</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><name>a</name></expr>;</return></block></then></if><return>return <expr><operator>-</operator><name>a</name></expr>;</return>}</block></function>
 
<comment type="line">//*X.find_by_order(2) element at index=2</comment>
<comment type="line">//X.order_of_key(1) how many elements strictly less than 1</comment>
 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ordered_set</name></cpp:macro> <cpp:value>tree&lt;int, null_type,less_equal&lt;int&gt;, rb_tree_tag,tree_order_statistics_node_update&gt;</cpp:value></cpp:define> 
 
<function><specifier>inline</specifier> <type><name>int</name></type> <name>pow_</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>y</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>p</name></decl></parameter>)</parameter_list><block>{
  <decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> <while>while<condition>(<expr><name>y</name></expr>)</condition><block>{<if>if<condition>(<expr><name>y</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>r</name> <operator>=</operator> <name>r</name> <operator>*</operator> <name>x</name> <operator>%</operator> <name>p</name></expr>;</expr_stmt></block></then></if> <expr_stmt><expr><name>y</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>*</operator> <name>x</name> <operator>%</operator> <name>p</name></expr>;</expr_stmt>}</block></while> <return>return <expr><name>r</name></expr>;</return>
}</block></function>
<function><specifier>inline</specifier> <type><name>int</name></type> <name>inv_</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{<return>return <expr><call><name>pow_</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>mod</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr>;</return>}</block></function>
<function><specifier>inline</specifier> <type><name>int</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name>a</name> <operator>+=</operator> <name>b</name></expr>;</expr_stmt> <if>if<condition>(<expr><name>a</name> <operator>&gt;=</operator> <name>mod</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>a</name> <operator>-=</operator> <name>mod</name></expr>;</expr_stmt></block></then></if> <return>return <expr><name>a</name></expr>;</return>}</block></function>
<function><specifier>inline</specifier> <type><name>int</name></type> <name>mul</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<return>return <expr><name>a</name> <operator>*</operator> <literal type="number">1LL</literal> <operator>*</operator> <name>b</name> <operator>%</operator> <name>mod</name></expr>;</return>}</block></function>
<function><specifier>inline</specifier> <type><name>int</name></type> <name>sub</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name>a</name> <operator>-=</operator> <name>b</name></expr>;</expr_stmt> <if>if<condition>(<expr><name>a</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>a</name> <operator>+=</operator> <name>mod</name></expr>;</expr_stmt></block></then></if> <return>return <expr><name>a</name></expr>;</return>}</block></function>
 
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>debug</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dbg</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ cerr&lt;&lt;"[ "; dump(#__VA_ARGS__, __VA_ARGS__);}</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>endl</name></cpp:undef>
<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>Arg1</name></parameter>,<parameter><type><name>typename</name></type> <name>Arg2</name></parameter>&gt;</parameter_list></template>
<type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator <name>&lt;&lt;</name></name> <parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>Arg1</name></expr></argument>,<argument><expr><name>Arg2</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><name>out</name><operator>&lt;&lt;</operator><literal type="string">"("</literal><operator>&lt;&lt;</operator><name><name>x</name><operator>.</operator><name>ff</name></name><operator>&lt;&lt;</operator><literal type="string">","</literal><operator>&lt;&lt;</operator><name><name>x</name><operator>.</operator><name>ss</name></name><operator>&lt;&lt;</operator><literal type="string">")"</literal></expr>;</return>
}</block></function>
 
<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>Arg1</name></parameter>&gt;</parameter_list></template>
<type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator <name>&lt;&lt;</name></name> <parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Arg1</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name>out</name><operator>&lt;&lt;</operator><literal type="string">"["</literal></expr>;</expr_stmt><for>for<control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier> <modifier>&amp;</modifier></type><name>x</name><range>:<expr><name>a</name></expr></range></decl></init>)</control><block type="pseudo"><expr_stmt><expr><name>out</name><operator>&lt;&lt;</operator><name>x</name><operator>&lt;&lt;</operator><literal type="string">","</literal></expr>;</expr_stmt></block></for><return>return <expr><name>out</name><operator>&lt;&lt;</operator><literal type="string">"]"</literal></expr>;</return>
}</block></function>
 
<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>Arg1</name></parameter>&gt;</parameter_list></template>
<type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator <name>&lt;&lt;</name></name> <parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>Arg1</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name>out</name><operator>&lt;&lt;</operator><literal type="string">"["</literal></expr>;</expr_stmt><for>for<control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier> <modifier>&amp;</modifier></type><name>x</name><range>:<expr><name>a</name></expr></range></decl></init>)</control><block type="pseudo"><expr_stmt><expr><name>out</name><operator>&lt;&lt;</operator><name>x</name><operator>&lt;&lt;</operator><literal type="string">","</literal></expr>;</expr_stmt></block></for><return>return <expr><name>out</name><operator>&lt;&lt;</operator><literal type="string">"]"</literal></expr>;</return>
}</block></function>
 
<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>Arg1</name></parameter>,<parameter><type><name>typename</name></type> <name>Arg2</name></parameter>&gt;</parameter_list></template>
<type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator <name>&lt;&lt;</name></name> <parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>Arg1</name></expr></argument>,<argument><expr><name>Arg2</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name>out</name><operator>&lt;&lt;</operator><literal type="string">"["</literal></expr>;</expr_stmt><for>for<control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier> <modifier>&amp;</modifier></type><name>x</name><range>:<expr><name>a</name></expr></range></decl></init>)</control><block type="pseudo"><expr_stmt><expr><name>out</name><operator>&lt;&lt;</operator><name>x</name><operator>&lt;&lt;</operator><literal type="string">","</literal></expr>;</expr_stmt></block></for><return>return <expr><name>out</name><operator>&lt;&lt;</operator><literal type="string">"]"</literal></expr>;</return>
}</block></function>
 
<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>Arg1</name></parameter>,<parameter><type><name>typename</name></type> <name>Arg2</name></parameter>&gt;</parameter_list></template>
<type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator <name>&lt;&lt;</name></name> <parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>unordered_map</name><argument_list type="generic">&lt;<argument><expr><name>Arg1</name></expr></argument>,<argument><expr><name>Arg2</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name>out</name><operator>&lt;&lt;</operator><literal type="string">"["</literal></expr>;</expr_stmt><for>for<control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier> <modifier>&amp;</modifier></type><name>x</name><range>:<expr><name>a</name></expr></range></decl></init>)</control><block type="pseudo"><expr_stmt><expr><name>out</name><operator>&lt;&lt;</operator><name>x</name><operator>&lt;&lt;</operator><literal type="string">","</literal></expr>;</expr_stmt></block></for><return>return <expr><name>out</name><operator>&lt;&lt;</operator><literal type="string">"]"</literal></expr>;</return>
}</block></function> 
 
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>Arg1</name></parameter>&gt;</parameter_list></template>
<type><name>void</name></type> <name>dump</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>Arg1</name><modifier>&amp;&amp;</modifier></type> <name>arg1</name></decl></parameter>)</parameter_list><block>{
    <expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <name>name</name> <operator>&lt;&lt;</operator> <literal type="string">" : "</literal> <operator>&lt;&lt;</operator> <name>arg1</name> <operator>&lt;&lt;</operator> <literal type="string">" ] "</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
}</block></function>
 
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>Arg1</name></parameter>, <parameter><type><name>typename</name><modifier>...</modifier></type> <name>Args</name></parameter>&gt;</parameter_list></template>
<type><name>void</name></type> <name>dump</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>string</name></type> <name>names</name></decl></parameter>, <parameter><decl><type><name>Arg1</name><modifier>&amp;&amp;</modifier></type> <name>arg1</name></decl></parameter>, <parameter><decl><type><name>Args</name><modifier>&amp;&amp;</modifier><modifier>...</modifier></type> <name>args</name></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>string</name></type> <name>name</name> <init>= <expr><call><name><name>names</name><operator>.</operator><name>substr</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><call><name><name>names</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>cerr</name><operator>&lt;&lt;</operator><name>name</name><operator>&lt;&lt;</operator><literal type="string">" : "</literal><operator>&lt;&lt;</operator><name>arg1</name><operator>&lt;&lt;</operator><literal type="string">" | "</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>dump</name><argument_list>(<argument><expr><call><name><name>names</name><operator>.</operator><name>substr</name></name><argument_list>(<argument><expr><literal type="number">1</literal><operator>+</operator><operator>(</operator><name>int</name><operator>)</operator><call><name><name>name</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>args</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dbg</name><parameter_list>(<parameter><type><name>args</name><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
 
<decl_stmt><decl><type><name>mt19937_64</name></type> <name>mrand</name><argument_list>(<argument><expr><call><name><name>chrono</name><operator>::</operator><name>steady_clock</name><operator>::</operator><name>now</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>time_since_epoch</name><argument_list>()</argument_list></call><operator>.</operator><call><name>count</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{
    <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LOCAL_TEST</name></cpp:ifdef>
    <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"in.txt"</literal></expr></argument>,<argument><expr><literal type="string">"r"</literal></expr></argument>,<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">//freopen("out.txt", "w", stdout);</comment>
    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <decl_stmt><decl><type><name>ll</name></type> <name>k</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>k</name></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>k</name><operator>--</operator></expr>)</condition><block>{
    	<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>;</decl_stmt>
    	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
    	<decl_stmt><decl><type><name>ll</name></type> <name><name>a</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

    	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
    		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    	}</block></for>
    	<decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
    		<decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    		<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
    			<if>if<condition>(<expr><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name><operator>&gt;=</operator><name>i</name></expr>)</condition><then><block>{
    				<expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>
    			}</block></then></if>
    		}</block></for>

    		<if>if<condition>(<expr><name>cnt</name> <operator>&gt;=</operator> <name>i</name></expr>)</condition><then><block>{
    			<expr_stmt><expr><name>ans</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
    		}</block></then></if>
    	}</block></for>

    	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
