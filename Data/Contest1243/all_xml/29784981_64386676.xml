<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29784981_64386676.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ios</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pll</name></cpp:macro> <cpp:value>pair &lt;long long,long long&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>s</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pss</name></cpp:macro> <cpp:value>pair &lt;string, string&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pls</name></cpp:macro> <cpp:value>pair &lt;long long , string &gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>psl</name></cpp:macro> <cpp:value>pair &lt;string , long long &gt;</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<function><type><name>int</name></type> <name>main</name> <parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><name>ios</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>t</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>t</name><operator>--</operator></expr>)</condition> <block>{
		<decl_stmt><decl><type><name>string</name></type> <name>st1</name></decl>,<decl><type ref="prev"/><name>st2</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>st1</name><operator>&gt;&gt;</operator><name>st2</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>ll</name></type> <name>j</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>jr</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>w</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>ll</name></type> <name>k</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>k</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{
			<if>if <condition>(<expr><name><name>st1</name><index>[<expr><name>k</name></expr>]</index></name><operator>!=</operator><name><name>st2</name><index>[<expr><name>k</name></expr>]</index></name><operator>&amp;&amp;</operator><name>j</name><operator>!=</operator><operator>-</operator><literal type="number">1</literal><operator>&amp;&amp;</operator><name>jr</name><operator>!=</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>w</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt><break>break;</break>
			}</block></then></if>
			<if>if <condition>(<expr><name><name>st1</name><index>[<expr><name>k</name></expr>]</index></name><operator>!=</operator><name><name>st2</name><index>[<expr><name>k</name></expr>]</index></name><operator>&amp;&amp;</operator><name>j</name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>j</name><operator>=</operator><name>k</name></expr>;</expr_stmt></block></then>
			<elseif>else <if>if <condition>(<expr><name><name>st1</name><index>[<expr><name>k</name></expr>]</index></name><operator>!=</operator><name><name>st2</name><index>[<expr><name>k</name></expr>]</index></name><operator>&amp;&amp;</operator><name>jr</name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>jr</name><operator>=</operator><name>k</name></expr>;</expr_stmt></block></then></if></elseif></if>
		}</block></for>
		<if>if <condition>(<expr><name>w</name><operator>==</operator><literal type="number">1</literal><operator>||</operator><name>jr</name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></then>
		<else>else <block>{
			<if>if <condition>(<expr><name><name>st1</name><index>[<expr><name>j</name></expr>]</index></name><operator>==</operator><name><name>st1</name><index>[<expr><name>jr</name></expr>]</index></name><operator>&amp;&amp;</operator><name><name>st2</name><index>[<expr><name>j</name></expr>]</index></name><operator>==</operator><name><name>st2</name><index>[<expr><name>jr</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Yes"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></then>
			<else>else <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></else></if>
		}</block></else></if>
	}</block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
