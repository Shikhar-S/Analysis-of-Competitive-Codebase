<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29778697_64390119.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<comment type="line">// code taken from https://www.geeksforgeeks.org/prlong long int-all-prime-factors-of-a-given-number/</comment>
<function><type><name>void</name></type> <name>primeFactors</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name><name>unordered_set</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name> <name>int</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>se</name></decl></parameter>)</parameter_list>  
<block>{  
    <comment type="line">// Prlong long int the number of 2s that divide n  </comment>
    <while>while <condition>(<expr><name>n</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>  
    <block>{  
        <expr_stmt><expr><call><name><name>se</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
        <expr_stmt><expr><name>n</name> <operator>=</operator> <name>n</name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>  
    }</block></while>  
  
    <comment type="line">// n must be odd at this polong long int. So we can skip  </comment>
    <comment type="line">// one element (Note i = i +2)  </comment>
    <for>for <control>(<init><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <call><name>sqrt</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">2</literal></expr></incr>)</control>  
    <block>{  
        <comment type="line">// While i divides n, prlong long int i and divide n  </comment>
        <while>while <condition>(<expr><name>n</name> <operator>%</operator> <name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>  
        <block>{  
            <expr_stmt><expr><call><name><name>se</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
            <expr_stmt><expr><name>n</name> <operator>=</operator> <name>n</name><operator>/</operator><name>i</name></expr>;</expr_stmt>  
        }</block></while>  
    }</block></for>  
  
    <comment type="line">// This condition is to handle the case when n  </comment>
    <comment type="line">// is a prime number greater than 2  </comment>
    <if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><then>  
        <block type="pseudo"><expr_stmt><expr><call><name><name>se</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if> 

 <comment type="line">//    for(auto x: se)</comment>
	<comment type="line">// 	cout &lt;&lt; x &lt;&lt; " ";</comment>
	<comment type="line">// cout &lt;&lt; "\n"; </comment>
}</block></function>  

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>unordered_set</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name> <name>int</name></expr></argument>&gt;</argument_list></name></type> <name>se</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>primeFactors</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>se</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if>if<condition>(<expr><call><name><name>se</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
		<block type="pseudo"><for>for<control>(<init><decl><type><name>auto</name></type> <name>x</name><range>: <expr><name>se</name></expr></range></decl></init>)</control>
			<block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>x</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt></block></for></block></then>

	<else>else
		<block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"1\n"</literal></expr>;</expr_stmt></block></else></if>
}</block></function></unit>
