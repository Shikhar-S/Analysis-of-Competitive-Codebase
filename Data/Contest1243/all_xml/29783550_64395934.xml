<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29783550_64395934.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;deque&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iomanip&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<using>using <name>ll</name> <init>= <type><name>long</name> <name>long</name></type></init>;</using>
<decl_stmt><decl><type><name>ll</name></type> <name>BASE_NUM</name> <init>= <expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>

<comment type="line">// ll pat(ll n){</comment>
<comment type="line">//     vector&lt;ll&gt; A;</comment>
<comment type="line">//     A.push_back[1];</comment>
<comment type="line">//     A.push_back[1];</comment>
<comment type="line">//     for(int i = 2;i&lt;n;i++){</comment>
<comment type="line">//         A.push_back( (A[i-1]+A[i-2]) % BASE_NUM);</comment>
<comment type="line">//     }</comment>
<comment type="line">//     return A[n];</comment>
<comment type="line">// }</comment>

<function><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>,<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></type> <name>decomposite</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>N</name></decl></parameter>, <parameter><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>,<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type> <name>primes</name></decl></parameter>,<parameter><decl><type><name>long</name> <name>long</name></type> <name>next_p</name> <init>= <expr><literal type="number">2</literal></expr></init></decl></parameter>)</parameter_list><block>{
    <if>if <condition>(<expr><name>N</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then><block>{
        <return>return <expr><name>primes</name></expr>;</return>
    }</block></then></if>


    <while>while <condition>(<expr><name>next_p</name> <operator>*</operator> <name>next_p</name> <operator>&lt;=</operator> <name>N</name></expr> )</condition> <block>{
        <if>if <condition>(<expr><name>N</name> <operator>%</operator> <name>next_p</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>primes</name><index>[<expr><name>next_p</name></expr>]</index></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <return>return <expr><call><name>decomposite</name><argument_list>(<argument><expr><name>N</name><operator>/</operator><name>next_p</name></expr></argument>,<argument><expr><name>primes</name></expr></argument>,<argument><expr><name>next_p</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>next_p</name><operator>++</operator></expr>;</expr_stmt>
        }</block></else></if>
    }</block></while>
    <expr_stmt><expr><name><name>primes</name><index>[<expr><name>N</name></expr>]</index></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <return>return <expr><name>primes</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <comment type="line">// æ´æ°ã®å¥å</comment>
    <decl_stmt><decl><type><name>ll</name></type> <name>N</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>N</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>N</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then><block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    }</block></then><else>else<block>{
        <decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>primes</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>decomposite</name><argument_list>(<argument><expr><name>N</name></expr></argument>,<argument><expr><name>primes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name><name>primes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
        }</block></then><else>else<block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>(</operator><operator>*</operator><call><name><name>primes</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><name>first</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
        }</block></else></if>
    }</block></else></if>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
