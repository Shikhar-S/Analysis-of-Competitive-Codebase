<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29782407_64381067.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>pll</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>vl</name>;</typedef>
<typedef>typedef <type><name>double</name></type> <name>db</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pt</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>printf("%lld\n",(ll)i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ss</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pi</name></cpp:macro> <cpp:value>acos(-1.0)</cpp:value></cpp:define>

<function><type><name>ll</name></type> <name>in</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>ll</name></type> <name>a</name></decl>;</decl_stmt><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>a</name></expr>;</return>}</block></function>
<function><type><name>db</name></type> <name>din</name><parameter_list>()</parameter_list><block>{ <decl_stmt><decl><type><name>db</name></type> <name>a</name></decl>;</decl_stmt><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lf"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>a</name></expr>;</return> }</block></function>
<function><type><name>ll</name></type> <name>bigmod</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>p</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>md</name></decl></parameter>)</parameter_list><block>{<if>if<condition>(<expr><name>p</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if><if>if<condition>(<expr><name>p</name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{ <return>return <expr><operator>(</operator><operator>(</operator><name>b</name><operator>%</operator><name>md</name><operator>)</operator><operator>*</operator><call><name>bigmod</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>p</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>md</name></expr></argument>)</argument_list></call><operator>)</operator><operator>%</operator><name>md</name></expr>;</return>}</block></then> <else>else <block>{<decl_stmt><decl><type><name>ll</name></type> <name>y</name><init>=<expr><call><name>bigmod</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>p</name><operator>/</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>md</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><return>return <expr><operator>(</operator><name>y</name><operator>*</operator><name>y</name><operator>)</operator><operator>%</operator><name>md</name></expr>;</return>}</block></else></if>}</block></function>
<function><type><name>ll</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{ <if>if<condition>(<expr><name>b</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>a</name></expr>;</return></block></then> <else>else <block type="pseudo"><return>return <expr><call><name>gcd</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>a</name><operator>%</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</return></block></else></if>}</block></function>

<function><type><name>long</name> <name>long</name></type> <name>getRandom</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>long</name> <name>long</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>ret</name> <init>= <expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><call><name>rand</name><argument_list>()</argument_list></call><operator>*</operator><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><call><name>rand</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>ret</name> <operator>%=</operator> <operator>(</operator><name>b</name> <operator>-</operator> <name>a</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>+=</operator> <name>a</name></expr>;</expr_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>t</name><init>=<expr><call><name>in</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>len</name><init>=<expr><call><name>in</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name></type> <name><name>s1</name><index>[<expr><name>len</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>s2</name><index>[<expr><name>len</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s %s"</literal></expr></argument>,<argument><expr><name>s1</name></expr></argument>,<argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>pos</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>cnt</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name><name>fre</name><index>[<expr><literal type="number">200</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name>hobe</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>fre</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof <name>fre</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>len</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <if>if<condition>(<expr><name><name>s1</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name><name>s2</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>
                <if>if<condition>(<expr><name>cnt</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>pos</name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></then>
                <elseif>else <if>if<condition>(<expr><name>cnt</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then>
                <block>{
                    <if>if<condition>(<expr><name><name>s1</name><index>[<expr><name>pos</name></expr>]</index></name><operator>==</operator><name><name>s1</name><index>[<expr><name>i</name></expr>]</index></name><operator>&amp;&amp;</operator><name><name>s2</name><index>[<expr><name>pos</name></expr>]</index></name><operator>==</operator><name><name>s2</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><empty_stmt>;</empty_stmt></block></then>
                    <else>else
                    <block>{
                        <expr_stmt><expr><name>pos</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
                        <break>break;</break>
                    }</block></else></if>
                }</block></then></if></elseif>
                <else>else<block>{
                    <expr_stmt><expr><name>pos</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
                    <break>break;</break>
                }</block></else></if>
            }</block></then></if>
            <expr_stmt><expr><name><name>fre</name><index>[<expr><name><name>s1</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
            <if>if<condition>(<expr><name><name>fre</name><index>[<expr><name><name>s1</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>hobe</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
        }</block></for>
        <if>if<condition>(<expr><name>pos</name><operator>==</operator><operator>-</operator><literal type="number">1</literal><operator>||</operator><name>cnt</name><operator>==</operator><literal type="number">1</literal><operator>||</operator><operator>(</operator><name>cnt</name><operator>==</operator><literal type="number">0</literal><operator>&amp;&amp;</operator><name>hobe</name><operator>==</operator><literal type="number">0</literal><operator>)</operator></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"No"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
        <else>else
        <block type="pseudo"><expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"Yes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
    }</block></while>
}</block></function>
</unit>
