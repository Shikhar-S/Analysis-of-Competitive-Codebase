<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29763190_64401993.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAX_SIZE</name> <init>= <expr><literal type="number">1000000</literal> <operator>+</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt>

<class>class <name>Solution</name>
<block>{<private type="default">
</private><public>public:

  <constructor><name>Solution</name><parameter_list>()</parameter_list>
  <block>{
    <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
  <block>{
    <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cin</name></name> <operator>&gt;&gt;</operator> <name>N</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>ans</name> <init>= <expr><name>N</name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><literal type="number">1LL</literal> <operator>*</operator> <name>i</name> <operator>*</operator> <name>i</name> <operator>&lt;=</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">1</literal></expr></incr>)</control>
    <block>{
      <if>if <condition>(<expr><name>N</name> <operator>%</operator> <name>i</name></expr>)</condition><then>
      <block>{
        <continue>continue;</continue>
      }</block></then></if>
      <expr_stmt><expr><name>ans</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>gcd</name></name><argument_list>(<argument><expr><name>ans</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>ans</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>gcd</name></name><argument_list>(<argument><expr><name>ans</name></expr></argument>, <argument><expr><name>N</name> <operator>/</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  }</block></function>

</public><private>private:
  <decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>N</name></decl>;</decl_stmt>
</private>}</block>;</class>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
  <expr_stmt><expr><call><name>Solution</name><argument_list>()</argument_list></call><operator>.</operator><call><name>main</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
