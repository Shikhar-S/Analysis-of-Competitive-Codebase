<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29743366_64397115.cpp"><comment type="block" format="doxygen">/** 
Humans are suspicious and jealous creatures. When they see something perfect, they want to find a flaw.        
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>INF</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">30</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/**
(âÌ¿Ä¹Ì¯âÌ¿ Ì¿) (à¸ Í Â° ÍÙÍ Í¡Â°)à¸
*/</comment>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>vll</name>;</typedef>
<typedef>typedef <type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>mii</name>;</typedef>

<decl_stmt><decl><type><name>ll</name></type> <name>_sieve_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>bitset</name><argument_list type="generic">&lt;<argument><expr><literal type="number">10000010</literal></expr></argument>&gt;</argument_list></name></type> <name>bs</name></decl>;</decl_stmt>                     <comment type="line">// 10^7 should be enough for most cases</comment>
<decl_stmt><decl><type><name>vll</name></type> <name>primes</name></decl>;</decl_stmt>               <comment type="line">// compact list of primes in form of vector&lt;long long&gt;</comment>


<comment type="line">// first part</comment>

<function><type><name>void</name></type> <name>sieve</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>upperbound</name></decl></parameter>)</parameter_list> <block>{          <comment type="line">// create list of primes in [0..upperbound]</comment>
  <expr_stmt><expr><name>_sieve_size</name> <operator>=</operator> <name>upperbound</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>                     <comment type="line">// add 1 to include upperbound</comment>
  <expr_stmt><expr><call><name><name>bs</name><operator>.</operator><name>set</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>                                                 <comment type="line">// set all bits to 1</comment>
  <expr_stmt><expr><name><name>bs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>bs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>                                     <comment type="line">// except index 0 and 1</comment>
  <for>for <control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>_sieve_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><if>if <condition>(<expr><name><name>bs</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block>{
    <comment type="line">// cross out multiples of i &lt;= _sieve_size starting from i*i</comment>
    <for>for <control>(<init><decl><type><name>ll</name></type> <name>j</name> <init>= <expr><name>i</name><operator>*</operator><name>i</name></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>_sieve_size</name></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <name>i</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>bs</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><call><name><name>primes</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>       <comment type="line">// also add this vector containing list of primes</comment>
}</block></then></if></block></for> }</block></function>                                           <comment type="line">// call this method in main method</comment>

<function><type><name>bool</name></type> <name>isPrime</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>N</name></decl></parameter>)</parameter_list> <block>{                 <comment type="line">// a good enough deterministic prime tester</comment>
  <if>if <condition>(<expr><name>N</name> <operator>&lt;</operator> <name>_sieve_size</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name><name>bs</name><index>[<expr><name>N</name></expr>]</index></name></expr>;</return></block></then></if>                <comment type="line">// now O(1) for small primes</comment>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><operator>(</operator><name>i</name> <operator>&lt;</operator> <call><name><name>primes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>primes</name><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><name><name>primes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;=</operator> <name>N</name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block type="pseudo"><if>if <condition>(<expr><name>N</name><operator>%</operator><name><name>primes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if></block></for>
  <return>return <expr><literal type="boolean">true</literal></expr>;</return>                    <comment type="line">// it takes longer time if N is a large prime!</comment>
}</block></function>                      <comment type="line">// note: only work for N &lt;= (last prime in vi "primes")^2</comment>

<comment type="line">// second part</comment>

<function><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></type> <name>primeFactors</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>N</name></decl></parameter>)</parameter_list> <block>{   <comment type="line">// remember: vi is vector of integers, ll is long long</comment>
  <decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>factors</name></decl>;</decl_stmt>                    <comment type="line">// vi `primes' (generated by sieve) is optional</comment>
  <decl_stmt><decl><type><name>ll</name></type> <name>PF_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>PF</name> <init>= <expr><name><name>primes</name><index>[<expr><name>PF_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>     <comment type="line">// using PF = 2, 3, 4, ..., is also ok</comment>
  <while>while <condition>(<expr><operator>(</operator><name>N</name> <operator>!=</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>PF</name><operator>*</operator><name>PF</name> <operator>&lt;=</operator> <name>N</name><operator>)</operator></expr>)</condition> <block>{   <comment type="line">// stop at sqrt(N), but N can get smaller</comment>
    <while>while <condition>(<expr><name>N</name><operator>%</operator><name>PF</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{ <expr_stmt><expr><name>N</name> <operator>/=</operator> <name>PF</name></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>factors</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>PF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></while>      <comment type="line">// remove this PF</comment>
    <expr_stmt><expr><name>PF</name> <operator>=</operator> <name><name>primes</name><index>[<expr><operator>++</operator><name>PF_idx</name></expr>]</index></name></expr>;</expr_stmt>                              <comment type="line">// only consider primes!</comment>
  }</block></while>
  <if>if <condition>(<expr><name>N</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>factors</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>N</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>     <comment type="line">// special case if N is actually a prime</comment>
  <return>return <expr><name>factors</name></expr>;</return>         <comment type="line">// if pf exceeds 32-bit integer, you have to change vi</comment>
}</block></function>

<function><type><name>long</name> <name>long</name></type> <name>solve</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><call><name>isPrime</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><name>n</name></expr>;</return>
    }</block></then></if>
    <decl_stmt><decl><type><name>auto</name></type> <name>res</name> <init>= <expr><call><name>primeFactors</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name><name>res</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    }</block></then></if>
    <return>return <expr><operator>*</operator><call><name><name>res</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>tt</name> <init>= <expr><call><name>clock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sieve</name><argument_list>(<argument><expr><literal type="number">10000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
    <switch>switch<condition>(<expr><name>n</name></expr>)</condition> <block>{
        <case>case <expr><literal type="number">1</literal></expr>:</case> 
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
        <break>break;</break>

        <case>case <expr><literal type="number">2</literal></expr>:</case>
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
        <break>break;</break>

        <default>default:</default>
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>solve</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
    }</block></switch>



    <expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <literal type="string">"TIME = "</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>double</name><operator>)</operator> <literal type="number">1.0</literal> <operator>*</operator> <operator>(</operator><call><name>clock</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tt</name><operator>)</operator> <operator>/</operator> <name>CLOCKS_PER_SEC</name> <operator>&lt;&lt;</operator> <literal type="string">" seconds"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
