<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29773384_64396244.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name> ;</namespace></using>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl> , <decl><type ref="prev"/><name>t</name></decl> , <decl><type ref="prev"/><name>s2</name></decl> , <decl><type ref="prev"/><name>t2</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name><name>freq</name><index>[<expr><literal type="number">26</literal></expr>]</index></name></decl> ;</decl_stmt> 

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
	<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>tc</name></decl> ;</decl_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>tc</name></expr> ;</expr_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl> , <decl><type ref="prev"/><name>c2</name></decl> ;</decl_stmt>
	<while>while<condition>(<expr><name>tc</name><operator>--</operator></expr>)</condition>
	<block>{
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>freq</name></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument>,  <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>freq</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr> ;</expr_stmt>
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>s</name></expr> ;</expr_stmt>
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>t</name></expr> ;</expr_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block>{
			<expr_stmt><expr><name><name>freq</name><index>[<expr><operator>(</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="char">'a'</literal><operator>)</operator></expr>]</index></name><operator>++</operator></expr> ;</expr_stmt>
			<expr_stmt><expr><name><name>freq</name><index>[<expr><operator>(</operator><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="char">'a'</literal><operator>)</operator></expr>]</index></name><operator>++</operator></expr> ;</expr_stmt>
		}</block></for>
		<decl_stmt><decl><type><name>bool</name></type> <name>flag</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl> ;</decl_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">26</literal></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block>{
			<if>if<condition>(<expr><name><name>freq</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="boolean">true</literal></expr> ;</expr_stmt></block></then></if>
		}</block></for>
		<if>if<condition>(<expr><name>flag</name> <operator>==</operator> <literal type="boolean">true</literal></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No\n"</literal></expr> ;</expr_stmt>
			<continue>continue ;</continue>
		}</block></then></if>
		<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt; <argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument> , <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type><name>vp</name></decl> ;</decl_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block>{
			<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="boolean">false</literal></expr> ;</expr_stmt>
				<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr> ;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
				<block>{
					<if>if<condition>(<expr><name><name>t</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
					<block>{
						<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr> ;</expr_stmt>
						<expr_stmt><expr><name>c2</name> <operator>=</operator> <name><name>t</name><index>[<expr><name>j</name></expr>]</index></name></expr> ;</expr_stmt>
						<expr_stmt><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>c2</name></expr> ;</expr_stmt>
						<expr_stmt><expr><name><name>t</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr> ;</expr_stmt>
						<expr_stmt><expr><call><name><name>vp</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name>j</name></expr> , <expr><name>j</name></expr>}</block></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
						<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr> ;</expr_stmt>
						<expr_stmt><expr><name>c2</name> <operator>=</operator> <name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr> ;</expr_stmt>
						<expr_stmt><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>c2</name></expr> ;</expr_stmt>
						<expr_stmt><expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr> ;</expr_stmt>
						<expr_stmt><expr><call><name><name>vp</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name>j</name></expr> , <expr><name>i</name></expr>}</block></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
						<expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="boolean">true</literal></expr> ;</expr_stmt>
						<break>break ;</break>
					}</block></then></if>
				}</block></for>
				<if>if<condition>(<expr><name>flag</name> <operator>==</operator> <literal type="boolean">false</literal></expr>)</condition><then>
				<block>{
					<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr> ;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
					<block>{
						<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
						<block>{
							<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr> ;</expr_stmt>
							<expr_stmt><expr><name>c2</name> <operator>=</operator> <name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr> ;</expr_stmt>
							<expr_stmt><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>c2</name></expr> ;</expr_stmt>
							<expr_stmt><expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr> ;</expr_stmt>
							<expr_stmt><expr><call><name><name>vp</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name>j</name></expr> , <expr><name>i</name></expr>}</block></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
							<expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="boolean">true</literal></expr> ;</expr_stmt>
							<break>break ;</break>
						}</block></then></if>
					}</block></for>	
				}</block></then></if>
			}</block></then></if>
		}</block></for>
		<if>if<condition>(<expr><name>s</name> <operator>==</operator> <name>t</name></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Yes\n"</literal></expr> ;</expr_stmt>
			<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name><name>vp</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&lt;&lt;</operator><literal type="string">"\n"</literal></expr> ;</expr_stmt>
			<for>for<control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>i</name> <operator>:</operator> <name>vp</name></expr></init>)</control>
				<block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>i</name><operator>.</operator><name>first</name></name><operator>+</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name><name>i</name><operator>.</operator><name>second</name></name><operator>+</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="string">"\n"</literal></expr> ;</expr_stmt></block></for>
		}</block></then>
		<else>else
			<block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No\n"</literal></expr> ;</expr_stmt></block></else></if>
	}</block></while>
	<return>return <expr><literal type="number">0</literal></expr> ;</return>
}</block></function></unit>
