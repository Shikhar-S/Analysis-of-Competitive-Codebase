<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29733508_64392016.cpp">
<comment type="block">/* #include&lt;bits/stdc++.h&gt;

 using namespace std;
 #define task "data"
 #define int long long
 const int maxn = 1e6 + 5;
 int k , n , a[maxn];
 bool np[maxn + 100];
 vector&lt;int&gt; vec;
 int getbit(int x , int k) {
     return ((x &gt;&gt; k) &amp; 1);
 }
 void eratos(){
	np[0]=np[1]=true;
	for (int i=2; i*i&lt; maxn; i++) if (!np[i])
	for (int j=i*i; j&lt;maxn; j+=i)
	np[j]=true;
}
 main() {
     ios_base::sync_with_stdio(false);
     cin.tie(NULL);
     #ifndef ONLINE_JUDGE
     freopen(task".inp","r",stdin);
     freopen(task".out","w",stdout);
     #endif // ONLINE_JUDGE

     cin &gt;&gt; n;
     int luu = n;
     for (int i = 2 ; i * i &lt;= n ; i++) {
         if(np[i] == true) continue;
         if(luu % i == 0) {
            vec.push_back(i);
            while(luu % i == 0) luu /= i;
         }
     }
     if(luu != 1) vec.push_back(luu);
     int m = vec.size();
     vector&lt;int&gt; se;
     for (int i = 1 ; i &lt; (1&lt;&lt;n) ; i++) {
        se.clear();
        for (int j = 0 ; j &lt; m ; j++)
            if(getbit(i , j)) se.push_back(vec[j])
     }
     */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ii</name></cpp:macro> <cpp:value>pair&lt;int,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Y</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name><init>=<expr><literal type="number">1004</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>test</name></decl>,<decl><type ref="prev"/><name>res</name></decl>,<decl><type ref="prev"/><name>dem</name></decl>,<decl><type ref="prev"/><name><name>d</name><index>[<expr><literal type="number">27</literal></expr>]</index><index>[<expr><literal type="number">27</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>,<decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ii</name></expr></argument>&gt;</argument_list></name></type> <name>vt</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>process</name><parameter_list>()</parameter_list> <block>{
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>kk</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
            <expr_stmt><expr><name>kk</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>kk</name><operator>--</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>kk</name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>kk</name><operator>/=</operator><literal type="number">10</literal></expr>;</expr_stmt>
            <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
            <decl_stmt><decl><type><name>bool</name></type> <name>ok</name><init>=<expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
            <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>kk</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
            <expr_stmt><expr><name>kk</name><operator>+=</operator><literal type="number">2</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>kk</name><operator>-=</operator><literal type="number">2</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>kk</name> <operator>*=</operator> <literal type="number">20</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>kk</name><operator>/=</operator><literal type="number">20</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>kk</name><operator>+=</operator><literal type="number">3</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>kk</name><operator>/=</operator><literal type="number">40</literal></expr>;</expr_stmt>
                <if>if<condition>(<expr><name><name>t</name><index>[<expr><name>j</name></expr>]</index></name><operator>==</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>vt</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>ii</name><argument_list>(<argument><expr><name>j</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>vt</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>ii</name><argument_list>(<argument><expr><name>j</name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>t</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>ok</name><operator>=</operator><literal type="boolean">true</literal></expr>;</expr_stmt>
                    <break>break;</break>
                }</block></then></if>
            }</block></for>
            <if>if<condition>(<expr><operator>!</operator><name>ok</name></expr>)</condition><then> <block>{
                <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{
                          <decl_stmt><decl><type><name>int</name></type> <name>kk</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
            <expr_stmt><expr><name>kk</name><operator>+=</operator><literal type="number">2</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>kk</name><operator>-=</operator><literal type="number">2</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>kk</name> <operator>*=</operator> <literal type="number">20</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>kk</name><operator>/=</operator><literal type="number">20</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>kk</name><operator>+=</operator><literal type="number">3</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>kk</name><operator>/=</operator><literal type="number">40</literal></expr>;</expr_stmt>
                    <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name><operator>==</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>vt</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>ii</name><argument_list>(<argument><expr><name>j</name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>ok</name><operator>=</operator><literal type="boolean">true</literal></expr>;</expr_stmt>
                        <break>break;</break>
                    }</block></then></if>
                }</block></for>
            }</block></then></if>
            <if>if<condition>(<expr><operator>!</operator><name>ok</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
                <return>return;</return>
            }</block></then></if>
        }</block></for>
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Yes"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name><name>vt</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>vt</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>vt</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>X</name><operator>+</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name><name>vt</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>Y</name><operator>+</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
        }</block></for>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <comment type="line">//freopen("A.INP","r",stdin);</comment>
    <comment type="line">//freopen("A.OUT","w",stdout);</comment>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>test</name></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>test</name><operator>--</operator></expr>)</condition> <block>{
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>s</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>vt</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>process</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></while>
}</block></function>
</unit>
