<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29734565_64391700.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>"bits/stdc++.h"</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ld</name></cpp:macro> <cpp:value>long double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Z</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(int)(c).size()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>c[Z(c)-1]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nl</name></cpp:macro> <cpp:value>"\n"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mii</name></cpp:macro> <cpp:value>map&lt;int,int&gt;</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(c).begin(),(c).end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rall</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(c).rbegin(),(c).rend()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>iv</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int (i)=(iv);(i)&lt;(n);(i)++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D1</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cerr &lt;&lt;"At line "&lt;&lt;__LINE__&lt;&lt;" "&lt;&lt;#x&lt;&lt;"="&lt;&lt;x&lt;&lt;nl</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D2</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cerr &lt;&lt;"At line "&lt;&lt;__LINE__&lt;&lt;" "&lt;&lt;#x&lt;&lt;"="&lt;&lt;x&lt;&lt;" "&lt;&lt;#y&lt;&lt;"="&lt;&lt;y&lt;&lt;nl</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cerr &lt;&lt;"At line "&lt;&lt;__LINE__&lt;&lt;" "&lt;&lt;#x&lt;&lt;"="&lt;&lt;x&lt;&lt;" "&lt;&lt;#y&lt;&lt;"="&lt;&lt;y&lt;&lt;" "&lt;&lt;#z&lt;&lt;"="&lt;&lt;z&lt;&lt;nl</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tr</name><parameter_list>(<parameter><type><name>it</name></type></parameter>,<parameter><type><name>ct</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(auto &amp;(it) : (ct))</cpp:value></cpp:define>

<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></type> <name>vi</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt; <argument><expr><name>vi</name></expr></argument> &gt;</argument_list></name></type> <name>vvi</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></type> <name>pii</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt; <argument><expr><name>pii</name></expr></argument> &gt;</argument_list></name></type> <name>vp</name>;</typedef>
<function><type><name>void</name></type> <name>swap</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>,<parameter><decl><type><name>int</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{ <decl_stmt><decl><type><name>auto</name></type> <name>tm</name><init>=<expr><name>a</name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><name>a</name><operator>=</operator><name>b</name></expr>;</expr_stmt> <expr_stmt><expr><name>b</name><operator>=</operator><name>tm</name></expr>;</expr_stmt> }</block></function>
 
  <comment type="line">//Take care of duplicates</comment>

  <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mod</name><init>=<expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mod2</name><init>=<expr><literal type="number">998244353</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>INF</name><init>=<expr><operator>(</operator><literal type="number">1LL</literal><operator>&lt;&lt;</operator><literal type="number">50</literal><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name><init>=<expr><literal type="number">2e5</literal><operator>+</operator><literal type="number">25</literal></expr></init></decl>;</decl_stmt> 
  
  <function><type><name>void</name></type> <name>bheja_fry</name><parameter_list>()</parameter_list>
  <block>{ 
     <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt> <decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>,<decl><type ref="prev"/><name>t</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>s</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
     
     <decl_stmt><decl><type><name>vi</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>vi</name></type> <name>id</name></decl>;</decl_stmt>
     <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro>
     <block>{
        <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
        <block>{ <expr_stmt><expr><call><name><name>id</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>a</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>b</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
     }</block>
    <decl_stmt><decl><type><name>int</name></type> <name><name>ct</name><index>[<expr><literal type="number">26</literal></expr>]</index></name><init>=<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <macro><name>tr</name><argument_list>(<argument>i</argument>,<argument>a</argument>)</argument_list></macro> <expr_stmt><expr><name><name>ct</name><index>[<expr><name>i</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
    <macro><name>tr</name><argument_list>(<argument>i</argument>,<argument>b</argument>)</argument_list></macro> <expr_stmt><expr><name><name>ct</name><index>[<expr><name>i</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

    <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">26</literal></argument>)</argument_list></macro><block>{
      <if>if<condition>(<expr><name><name>ct</name><index>[<expr><name>i</name></expr>]</index></name><operator>%</operator><literal type="number">2</literal></expr>)</condition><then> <block>{ <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No"</literal><operator>&lt;&lt;</operator><name>nl</name></expr>;</expr_stmt> <return>return;</return>}</block></then></if>
    }</block>
     
   <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Yes"</literal><operator>&lt;&lt;</operator><name>nl</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>vp</name></type> <name>ans</name></decl>;</decl_stmt>

    <while>while<condition>(<expr><call><name>Z</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>)</condition>
 <block>{    
      <if>if<condition>(<expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><then>
      <block>{ 
      <expr_stmt><expr><call><name><name>a</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>a</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>b</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>b</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>id</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>id</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      }</block></then></if>
     <decl_stmt><decl><type><name>int</name></type> <name>idx</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
     <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name>Z</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><if>if<condition>(<expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
          <block>{ <expr_stmt><expr><name>idx</name><operator>=</operator><name>i</name></expr>;</expr_stmt> <break>break;</break> }</block></then></if></block></for>
      <if>if<condition>(<expr><name>idx</name><operator>!=</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>b</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>a</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><block>{<expr><name><name>id</name><index>[<expr><name>idx</name></expr>]</index></name></expr>,<expr><name><name>id</name><index>[<expr><name>idx</name></expr>]</index></name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><block>{<expr><name><name>id</name><index>[<expr><name>idx</name></expr>]</index></name></expr>,<expr><name><name>id</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     
    }</block></then>
    <else>else
    <block>{
      <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name>Z</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><if>if<condition>(<expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
          <block>{ <expr_stmt><expr><name>idx</name><operator>=</operator><name>i</name></expr>;</expr_stmt> <break>break;</break> }</block></then></if></block></for>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>idx</name><operator>!=</operator><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><block>{<expr><name><name>id</name><index>[<expr><name>idx</name></expr>]</index></name></expr>,<expr><name><name>id</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <expr_stmt><expr><call><name><name>a</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>a</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>b</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>b</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>id</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>id</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></while>

    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name>Z</name><argument_list>(<argument><expr><name>ans</name></expr></argument>)</argument_list></call><operator>&lt;&lt;</operator><name>nl</name></expr>;</expr_stmt>
    
   <macro><name>tr</name><argument_list>(<argument>i</argument>,<argument>ans</argument>)</argument_list></macro> <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>i</name><operator>.</operator><name>F</name></name><operator>+</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name><name>i</name><operator>.</operator><name>S</name></name><operator>+</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>nl</name></expr>;</expr_stmt>

  }</block></function>

<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{ <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
   <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ONLINE_JUDGE</name></cpp:ifndef>
   <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"input.txt"</literal></expr></argument>,<argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
   <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"output.txt"</literal></expr></argument>,<argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"error.txt"</literal></expr></argument>,<argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  
   <decl_stmt><decl><type><name>int</name></type> <name>t</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>                         
  <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
  <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>t+<literal type="number">1</literal></argument>)</argument_list></macro>
  <block>{ <comment type="line">// cout&lt;&lt;"Case #"&lt;&lt;i&lt;&lt;": ";</comment>
   <expr_stmt><expr><call><name>bheja_fry</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<comment type="line">//   if(i&lt;t)</comment>
<comment type="line">//   cout&lt;&lt;nl;</comment>
  }</block>
  
  <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ONLINE_JUDGE</name></cpp:ifndef>
  <expr_stmt><expr><name>cerr</name><operator>&lt;&lt;</operator><operator>(</operator><literal type="number">1000</literal><operator>*</operator><call><name>clock</name><argument_list>()</argument_list></call><operator>)</operator><operator>/</operator><name>CLOCKS_PER_SEC</name><operator>&lt;&lt;</operator><literal type="string">"ms"</literal></expr>;</expr_stmt>
  <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
 <return>return <expr><literal type="number">0</literal></expr>;</return> 
}</block></function></unit>
