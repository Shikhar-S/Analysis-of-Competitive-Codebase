<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29782866_64388982.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fr</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=0;i&lt;(n);++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>foor</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=(a);i&lt;=(b);++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rf</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=(n);i--;)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>roof</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=(b);i&gt;=(a);--i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>elsif</name></cpp:macro> <cpp:value>else if</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x.begin(),x.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Sort</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>sort(all(x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Reverse</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>reverse(all(x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PQ</name></cpp:macro> <cpp:value>priority_queue</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NP</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>next_permutation(all(x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_PI</name></cpp:macro> <cpp:value>3.14159265358979323846</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>popcount</name></cpp:macro> <cpp:value>__builtin_popcount</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>            <typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></type> <name>vb</name>;</typedef> <typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vb</name></expr></argument>&gt;</argument_list></name></type>  <name>vvb</name>;</typedef>
                                <typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type>  <name>vi</name>;</typedef> <typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vi</name></expr></argument>&gt;</argument_list></name></type>  <name>vvi</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>           <typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt; <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type>  <name>vl</name>;</typedef> <typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vl</name></expr></argument>&gt;</argument_list></name></type>  <name>vvl</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ull</name>;</typedef> <typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ull</name></expr></argument>&gt;</argument_list></name></type>  <name>vu</name>;</typedef> <typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vu</name></expr></argument>&gt;</argument_list></name></type>  <name>vvu</name>;</typedef>
<typedef>typedef <type><name>double</name></type> <name>dbl</name>;</typedef>             <typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>dbl</name></expr></argument>&gt;</argument_list></name></type>  <name>vd</name>;</typedef> <typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vd</name></expr></argument>&gt;</argument_list></name></type>  <name>vvd</name>;</typedef>
<typedef>typedef <type><name>string</name></type> <name>str</name>;</typedef>             <typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>str</name></expr></argument>&gt;</argument_list></name></type>  <name>vs</name>;</typedef> <typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vs</name></expr></argument>&gt;</argument_list></name></type>  <name>vvs</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name>pii</name>;</typedef>       <typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pii</name></expr></argument>&gt;</argument_list></name></type><name>vpii</name>;</typedef> <typedef>typedef <type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name>mii</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt; <argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type><name>pll</name>;</typedef>       <typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pll</name></expr></argument>&gt;</argument_list></name></type><name>vpll</name>;</typedef> <typedef>typedef <type><name><name>map</name><argument_list type="generic">&lt; <argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type><name>mll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>dbl</name></expr></argument>,<argument><expr><name>dbl</name></expr></argument>&gt;</argument_list></name></type><name>pdd</name>;</typedef>       <typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pdd</name></expr></argument>&gt;</argument_list></name></type><name>vpdd</name>;</typedef> <typedef>typedef <type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>dbl</name></expr></argument>,<argument><expr><name>dbl</name></expr></argument>&gt;</argument_list></name></type><name>mdd</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>str</name></expr></argument>,<argument><expr><name>str</name></expr></argument>&gt;</argument_list></name></type><name>pss</name>;</typedef>       <typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pss</name></expr></argument>&gt;</argument_list></name></type><name>vpss</name>;</typedef> <typedef>typedef <type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>str</name></expr></argument>,<argument><expr><name>str</name></expr></argument>&gt;</argument_list></name></type><name>mss</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type><name>pil</name>;</typedef>       <typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pil</name></expr></argument>&gt;</argument_list></name></type><name>vpil</name>;</typedef> <typedef>typedef <type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type><name>mil</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt; <argument><expr><name>ll</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name>pli</name>;</typedef>       <typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pli</name></expr></argument>&gt;</argument_list></name></type><name>vpli</name>;</typedef> <typedef>typedef <type><name><name>map</name><argument_list type="generic">&lt; <argument><expr><name>ll</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name>mli</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>dbl</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name>pdi</name>;</typedef>       <typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pdi</name></expr></argument>&gt;</argument_list></name></type><name>vpdi</name>;</typedef> <typedef>typedef <type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>dbl</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name>mdi</name>;</typedef>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type><name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type><name>v</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>T</name></type> <name>t</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><name>v</name></expr>;</return>}</block></function>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name><name>multiset</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type><name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name><name>multiset</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type><name>m</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>T</name></type> <name>t</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><name>m</name></expr>;</return>}</block></function>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type><name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type><name>s</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>T</name></type> <name>t</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><name>s</name></expr>;</return>}</block></function>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name><name>stack</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type><name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name><name>stack</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type><name>s</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>T</name></type> <name>t</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><name>s</name></expr>;</return>}</block></function>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name><name>stack</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type><name>operator<name>&gt;&gt;</name></name><parameter_list>(<parameter><decl><type><name><name>stack</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type><name>s</name></decl></parameter>,<parameter><decl><type><name>T</name><modifier>&amp;</modifier></type><name>t</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name>t</name><operator>=</operator><call><name><name>s</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt><return>return <expr><name>s</name></expr>;</return>}</block></function>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name><name>queue</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type><name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name><name>queue</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type><name>q</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>T</name></type> <name>t</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><name>q</name></expr>;</return>}</block></function>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name><name>queue</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type><name>operator<name>&gt;&gt;</name></name><parameter_list>(<parameter><decl><type><name><name>queue</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type><name>q</name></decl></parameter>,<parameter><decl><type><name>T</name><modifier>&amp;</modifier></type><name>t</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name>t</name><operator>=</operator><call><name><name>q</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt><return>return <expr><name>q</name></expr>;</return>}</block></function>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>,<parameter><type><name>typename</name></type> <name>U</name></parameter>&gt;</parameter_list></template><type><name><name>PQ</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>,<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></expr></argument>,<argument><expr><name>U</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type><name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name><name>PQ</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>,<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></expr></argument>,<argument><expr><name>U</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type><name>q</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>T</name></type> <name>t</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><name>q</name></expr>;</return>}</block></function>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>,<parameter><type><name>typename</name></type> <name>U</name></parameter>&gt;</parameter_list></template><type><name><name>PQ</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>,<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></expr></argument>,<argument><expr><name>U</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type><name>operator<name>&gt;&gt;</name></name><parameter_list>(<parameter><decl><type><name><name>PQ</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>,<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></expr></argument>,<argument><expr><name>U</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type><name>q</name></decl></parameter>,<parameter><decl><type><name>T</name><modifier>&amp;</modifier></type><name>t</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name>t</name><operator>=</operator><call><name><name>q</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt><return>return <expr><name>q</name></expr>;</return>}</block></function>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>,<parameter><type><name>typename</name></type> <name>U</name></parameter>&gt;</parameter_list></template><type><name>istream</name><modifier>&amp;</modifier></type><name>operator<name>&gt;&gt;</name></name><parameter_list>(<parameter><decl><type><name>istream</name><modifier>&amp;</modifier></type><name>s</name></decl></parameter>,<parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>,<argument><expr><name>U</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<return>return <expr><name>s</name><operator>&gt;&gt;</operator><name><name>p</name><operator>.</operator><name>first</name></name><operator>&gt;&gt;</operator><name><name>p</name><operator>.</operator><name>second</name></name></expr>;</return>}</block></function>
<function type="operator"><type><name>istream</name><modifier>&amp;</modifier></type><name>operator<name>&gt;&gt;</name></name><parameter_list>(<parameter><decl><type><name>istream</name><modifier>&amp;</modifier></type><name>s</name></decl></parameter>,<parameter><decl><type><name>_Bit_reference</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>;</decl_stmt><expr_stmt><expr><name>s</name><operator>&gt;&gt;</operator><name>a</name></expr>;</expr_stmt><expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>a</name><operator>==</operator><literal type="number">0</literal><operator>||</operator><name>a</name><operator>==</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name>b</name><operator>=</operator><name>a</name></expr>;</expr_stmt><return>return <expr><name>s</name></expr>;</return>}</block></function>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name>istream</name><modifier>&amp;</modifier></type><name>operator<name>&gt;&gt;</name></name><parameter_list>(<parameter><decl><type><name>istream</name><modifier>&amp;</modifier></type><name>s</name></decl></parameter>,<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type><name>v</name></decl></parameter>)</parameter_list><block>{<macro><name>fr</name><argument_list>(<argument>i</argument>,<argument>v.size()</argument>)</argument_list></macro><block>{<expr_stmt><expr><name>s</name><operator>&gt;&gt;</operator><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>}</block><return>return <expr><name>s</name></expr>;</return>}</block></function>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>,<parameter><type><name>typename</name></type> <name>U</name></parameter>&gt;</parameter_list></template><type><name>ostream</name><modifier>&amp;</modifier></type><name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type><name>s</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>,<argument><expr><name>U</name></expr></argument>&gt;</argument_list></name></type><name>p</name></decl></parameter>)</parameter_list><block>{<return>return <expr><name>s</name><operator>&lt;&lt;</operator><name><name>p</name><operator>.</operator><name>first</name></name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name><name>p</name><operator>.</operator><name>second</name></name></expr>;</return>}</block></function>
<comment type="line">//template&lt;typename T&gt;ostream&amp;operator&lt;&lt;(ostream&amp;s,const vector&lt;T&gt;v){for(auto a:v){s&lt;&lt;a&lt;&lt;"\n";}return s;}</comment>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name>ostream</name><modifier>&amp;</modifier></type><name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type><name>s</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type><name>v</name></decl></parameter>)</parameter_list><block>{<macro><name>fr</name><argument_list>(<argument>i</argument>,<argument>v.size()</argument>)</argument_list></macro><block>{<expr_stmt><expr><ternary><condition><expr><name>i</name></expr>?</condition><then><expr><name>s</name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr></then><else>:<expr><name>s</name><operator>&lt;&lt;</operator><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>}</block><return>return <expr><name>s</name></expr>;</return>}</block></function>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name>ostream</name><modifier>&amp;</modifier></type><name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type><name>s</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name><name>deque</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type><name>d</name></decl></parameter>)</parameter_list><block>{<macro><name>fr</name><argument_list>(<argument>i</argument>,<argument>d.size()</argument>)</argument_list></macro><block>{<expr_stmt><expr><ternary><condition><expr><name>i</name></expr>?</condition><then><expr><name>s</name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name><name>d</name><index>[<expr><name>i</name></expr>]</index></name></expr></then><else>:<expr><name>s</name><operator>&lt;&lt;</operator><name><name>d</name><index>[<expr><name>i</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>}</block><return>return <expr><name>s</name></expr>;</return>}</block></function>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name>_Bit_reference</name></type> <name>operator<name>&amp;=</name></name><parameter_list>(<parameter><decl><type><name>_Bit_reference</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>t</name></decl></parameter>)</parameter_list><block>{<return>return <expr><name>b</name><operator>=</operator><name>b</name><operator>&amp;</operator><name>t</name></expr>;</return>}</block></function>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name>_Bit_reference</name></type> <name>operator<name>^=</name></name><parameter_list>(<parameter><decl><type><name>_Bit_reference</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>t</name></decl></parameter>)</parameter_list><block>{<return>return <expr><name>b</name><operator>=</operator><name>b</name><operator>^</operator><name>t</name></expr>;</return>}</block></function>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name>_Bit_reference</name></type> <name>operator<name>|=</name></name><parameter_list>(<parameter><decl><type><name>_Bit_reference</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>t</name></decl></parameter>)</parameter_list><block>{<return>return <expr><name>b</name><operator>=</operator><name>b</name><operator>|</operator><name>t</name></expr>;</return>}</block></function>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>,<parameter><type><name>typename</name></type> <name>U</name></parameter>&gt;</parameter_list></template><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>,<argument><expr><name>U</name></expr></argument>&gt;</argument_list></name></type><name>operator<name>+</name></name><parameter_list>(<parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>,<argument><expr><name>U</name></expr></argument>&gt;</argument_list></name></type><name>a</name></decl></parameter>,<parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>,<argument><expr><name>U</name></expr></argument>&gt;</argument_list></name></type><name>b</name></decl></parameter>)</parameter_list><block>{<return>return <expr><block>{<expr><name><name>a</name><operator>.</operator><name>first</name></name><operator>+</operator><name><name>b</name><operator>.</operator><name>first</name></name></expr>,<expr><name><name>a</name><operator>.</operator><name>second</name></name><operator>+</operator><name><name>b</name><operator>.</operator><name>second</name></name></expr>}</block></expr>;</return>}</block></function>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>,<parameter><type><name>typename</name></type> <name>U</name></parameter>&gt;</parameter_list></template><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>,<argument><expr><name>U</name></expr></argument>&gt;</argument_list></name></type><name>operator<name>-</name></name><parameter_list>(<parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>,<argument><expr><name>U</name></expr></argument>&gt;</argument_list></name></type><name>a</name></decl></parameter>,<parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>,<argument><expr><name>U</name></expr></argument>&gt;</argument_list></name></type><name>b</name></decl></parameter>)</parameter_list><block>{<return>return <expr><block>{<expr><name><name>a</name><operator>.</operator><name>first</name></name><operator>-</operator><name><name>b</name><operator>.</operator><name>first</name></name></expr>,<expr><name><name>a</name><operator>.</operator><name>second</name></name><operator>-</operator><name><name>b</name><operator>.</operator><name>second</name></name></expr>}</block></expr>;</return>}</block></function>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>,<parameter><type><name>typename</name></type> <name>U</name></parameter>&gt;</parameter_list></template><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>,<argument><expr><name>U</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type><name>operator<name>+=</name></name><parameter_list>(<parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>,<argument><expr><name>U</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type><name>a</name></decl></parameter>,<parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>,<argument><expr><name>U</name></expr></argument>&gt;</argument_list></name></type><name>b</name></decl></parameter>)</parameter_list><block>{<return>return <expr><name>a</name><operator>=</operator><name>a</name><operator>+</operator><name>b</name></expr>;</return>}</block></function>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>,<parameter><type><name>typename</name></type> <name>U</name></parameter>&gt;</parameter_list></template><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>,<argument><expr><name>U</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type><name>operator<name>-=</name></name><parameter_list>(<parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>,<argument><expr><name>U</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type><name>a</name></decl></parameter>,<parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>,<argument><expr><name>U</name></expr></argument>&gt;</argument_list></name></type><name>b</name></decl></parameter>)</parameter_list><block>{<return>return <expr><name>a</name><operator>=</operator><name>a</name><operator>-</operator><name>b</name></expr>;</return>}</block></function>
<function><type><name>void</name></type> <name>print</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"\n"</literal></expr>;</expr_stmt>}</block></function>
<function><type><name>void</name></type> <name>Print</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name>void</name></type> <name>print</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>t</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>t</name><operator>&lt;&lt;</operator><literal type="string">"\n"</literal></expr>;</expr_stmt>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name>void</name></type> <name>Print</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>t</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>t</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>,<parameter><type><name>typename</name><modifier>...</modifier></type><name>U</name></parameter>&gt;</parameter_list></template><type><name>void</name></type> <name>print</name><parameter_list>(<parameter><decl><type><name>T</name><modifier>&amp;&amp;</modifier></type><name>t</name></decl></parameter>,<parameter><decl><type><name>U</name><modifier>&amp;&amp;</modifier><modifier>...</modifier></type><name>u</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>t</name><operator>&lt;&lt;</operator><literal type="string">" "</literal></expr>;</expr_stmt><expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>U</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>,<parameter><type><name>typename</name><modifier>...</modifier></type><name>U</name></parameter>&gt;</parameter_list></template><type><name>void</name></type> <name>Print</name><parameter_list>(<parameter><decl><type><name>T</name><modifier>&amp;&amp;</modifier></type><name>t</name></decl></parameter>,<parameter><decl><type><name>U</name><modifier>&amp;&amp;</modifier><modifier>...</modifier></type><name>u</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>t</name><operator>&lt;&lt;</operator><literal type="string">" "</literal></expr>;</expr_stmt><expr_stmt><expr><call><name>Print</name><argument_list>(<argument><expr><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>U</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function>
<function><type><name>bool</name></type> <name>YN</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><ternary><condition><expr><name>b</name></expr>?</condition><then><expr><literal type="string">"YES"</literal></expr></then><else>:<expr><literal type="string">"NO"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><name>b</name></expr>;</return>}</block></function><function><type><name>bool</name></type> <name>PI</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><ternary><condition><expr><name>b</name></expr>?</condition><then><expr><literal type="string">"POSSIBLE"</literal></expr></then><else>:<expr><literal type="string">"IMPOSSIBLE"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><name>b</name></expr>;</return>}</block></function>
<function><type><name>bool</name></type> <name>Yn</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><ternary><condition><expr><name>b</name></expr>?</condition><then><expr><literal type="string">"Yes"</literal></expr></then><else>:<expr><literal type="string">"No"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><name>b</name></expr>;</return>}</block></function><function><type><name>bool</name></type> <name>Pi</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><ternary><condition><expr><name>b</name></expr>?</condition><then><expr><literal type="string">"Possible"</literal></expr></then><else>:<expr><literal type="string">"Impossible"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><name>b</name></expr>;</return>}</block></function>
<function><type><name>bool</name></type> <name>yn</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><ternary><condition><expr><name>b</name></expr>?</condition><then><expr><literal type="string">"yes"</literal></expr></then><else>:<expr><literal type="string">"no"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><name>b</name></expr>;</return>}</block></function><function><type><name>bool</name></type> <name>pi</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><ternary><condition><expr><name>b</name></expr>?</condition><then><expr><literal type="string">"possible"</literal></expr></then><else>:<expr><literal type="string">"impossible"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><name>b</name></expr>;</return>}</block></function>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>e5</name><init>=<expr><literal type="number">1e5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>e9</name><init>=<expr><literal type="number">1e9</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MD</name><init>=<expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>md</name><init>=<expr><literal type="number">998244353</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>e18</name><init>=<expr><literal type="number">1e18</literal></expr></init></decl>;</decl_stmt>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name>str</name></type> <name>to_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T</name><modifier>&amp;</modifier></type><name>n</name></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name>ostringstream</name></type> <name>s</name></decl>;</decl_stmt><expr_stmt><expr><name>s</name><operator>&lt;&lt;</operator><name>n</name></expr>;</expr_stmt><return>return <expr><call><name><name>s</name><operator>.</operator><name>str</name></name><argument_list>()</argument_list></call></expr>;</return>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name>T</name><modifier>&amp;</modifier></type><name>chmax</name><parameter_list>(<parameter><decl><type><name>T</name><modifier>&amp;</modifier></type><name>a</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<return>return <expr><name>a</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name>T</name><modifier>&amp;</modifier></type><name>chmin</name><parameter_list>(<parameter><decl><type><name>T</name><modifier>&amp;</modifier></type><name>a</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<return>return <expr><name>a</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>,<parameter><type><name>typename</name></type> <name>U</name></parameter>&gt;</parameter_list></template><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>,<argument><expr><name>U</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type><name>dijkstra</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>,<argument><expr><name>U</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type><name>E</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>U</name></type> <name>s</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>T</name></type> <name>inf</name></decl></parameter>)</parameter_list><block>{<using>using <name>P</name><init>=<type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>,<argument><expr><name>U</name></expr></argument>&gt;</argument_list></name></type></init>;</using><decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>P</name></expr></argument>&gt;</argument_list></name></type><name>d</name></decl>;</decl_stmt><macro><name>fr</name><argument_list>(<argument>i</argument>,<argument>E.size()</argument>)</argument_list></macro><block>{<expr_stmt><expr><name>d</name><operator>&lt;&lt;</operator><name>P</name><block>{<expr><name>inf</name></expr>,<expr><name>i</name></expr>}</block></expr>;</expr_stmt>}</block><decl_stmt><decl><type><name><name>PQ</name><argument_list type="generic">&lt;<argument><expr><name>P</name></expr></argument>,<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>P</name></expr></argument>&gt;</argument_list></name></expr></argument>,<argument><expr><name><name>greater</name><argument_list type="generic">&lt;<argument><expr><name>P</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type><name>pq</name></decl>;</decl_stmt><expr_stmt><expr><name>pq</name><operator>&lt;&lt;</operator><operator>(</operator><name><name>d</name><index>[<expr><name>s</name></expr>]</index></name><operator>=</operator><name>P</name><block>{<expr><literal type="number">0</literal></expr>,<expr><name>s</name></expr>}</block><operator>)</operator></expr>;</expr_stmt><while>while<condition>(<expr><call><name><name>pq</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{<decl_stmt><decl><type><name>P</name></type> <name>a</name><init>=<expr><call><name><name>pq</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt><decl_stmt><decl><type><name>U</name></type> <name>v</name><init>=<expr><name><name>a</name><operator>.</operator><name>second</name></name></expr></init></decl>;</decl_stmt><if>if<condition>(<expr><name><name>d</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><name>first</name><operator>&gt;=</operator><name><name>a</name><operator>.</operator><name>first</name></name></expr>)</condition><then><block>{<for>for<control>(<init><decl><type><name>P</name></type> <name>e</name><range>:<expr><name><name>E</name><index>[<expr><name>v</name></expr>]</index></name></expr></range></decl></init>)</control><block>{<if>if<condition>(<expr><name><name>d</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><name>first</name><operator>+</operator><name><name>e</name><operator>.</operator><name>first</name></name><operator>&lt;</operator><name><name>d</name><index>[<expr><name><name>e</name><operator>.</operator><name>second</name></name></expr>]</index></name><operator>.</operator><name>first</name></expr>)</condition><then><block>{<expr_stmt><expr><name><name>d</name><index>[<expr><name><name>e</name><operator>.</operator><name>second</name></name></expr>]</index></name><operator>=</operator><name>P</name><block>{<expr><name><name>d</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><name>first</name><operator>+</operator><name><name>e</name><operator>.</operator><name>first</name></name></expr>,<expr><name>v</name></expr>}</block></expr>;</expr_stmt><expr_stmt><expr><name>pq</name><operator>&lt;&lt;</operator><name>P</name><block>{<expr><name><name>d</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><name>first</name><operator>+</operator><name><name>e</name><operator>.</operator><name>first</name></name></expr>,<expr><name><name>e</name><operator>.</operator><name>second</name></name></expr>}</block></expr>;</expr_stmt>}</block></then></if>}</block></for>}</block></then></if>}</block></while><return>return <expr><name>d</name></expr>;</return>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>,<parameter><type><name>typename</name></type> <name>U</name></parameter>&gt;</parameter_list></template><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>U</name></expr></argument>,<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>,<argument><expr><name>U</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type><name>dijkstra</name><parameter_list>(<parameter><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>U</name></expr></argument>,<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>,<argument><expr><name>U</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type><name>E</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>U</name></type> <name>s</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>T</name></type> <name>inf</name></decl></parameter>)</parameter_list><block>{<using>using <name>P</name><init>=<type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>,<argument><expr><name>U</name></expr></argument>&gt;</argument_list></name></type></init>;</using><decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>U</name></expr></argument>,<argument><expr><name>P</name></expr></argument>&gt;</argument_list></name></type><name>d</name></decl>;</decl_stmt><for>for<control>(<init><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>U</name></expr></argument>,<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>P</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type><name>e</name><range>:<expr><name>E</name></expr></range></decl></init>)</control><block>{<expr_stmt><expr><name><name>d</name><index>[<expr><name><name>e</name><operator>.</operator><name>first</name></name></expr>]</index></name><operator>=</operator><name>P</name><block>{<expr><name>inf</name></expr>,<expr><name><name>e</name><operator>.</operator><name>first</name></name></expr>}</block></expr>;</expr_stmt>}</block></for><decl_stmt><decl><type><name><name>PQ</name><argument_list type="generic">&lt;<argument><expr><name>P</name></expr></argument>,<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>P</name></expr></argument>&gt;</argument_list></name></expr></argument>,<argument><expr><name><name>greater</name><argument_list type="generic">&lt;<argument><expr><name>P</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type><name>pq</name></decl>;</decl_stmt><expr_stmt><expr><name>pq</name><operator>&lt;&lt;</operator><operator>(</operator><name><name>d</name><index>[<expr><name>s</name></expr>]</index></name><operator>=</operator><name>P</name><block>{<expr><literal type="number">0</literal></expr>,<expr><name>s</name></expr>}</block><operator>)</operator></expr>;</expr_stmt><while>while<condition>(<expr><call><name><name>pq</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{<decl_stmt><decl><type><name>P</name></type> <name>a</name><init>=<expr><call><name><name>pq</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt><decl_stmt><decl><type><name>U</name></type> <name>v</name><init>=<expr><name><name>a</name><operator>.</operator><name>second</name></name></expr></init></decl>;</decl_stmt><if>if<condition>(<expr><name><name>d</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><name>first</name><operator>&gt;=</operator><name><name>a</name><operator>.</operator><name>first</name></name></expr>)</condition><then><block>{<for>for<control>(<init><decl><type><name>P</name></type> <name>e</name><range>:<expr><name><name>E</name><index>[<expr><name>v</name></expr>]</index></name></expr></range></decl></init>)</control><block>{<if>if<condition>(<expr><name><name>d</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><name>first</name><operator>+</operator><name><name>e</name><operator>.</operator><name>first</name></name><operator>&lt;</operator><name><name>d</name><index>[<expr><name><name>e</name><operator>.</operator><name>second</name></name></expr>]</index></name><operator>.</operator><name>first</name></expr>)</condition><then><block>{<expr_stmt><expr><name><name>d</name><index>[<expr><name><name>e</name><operator>.</operator><name>second</name></name></expr>]</index></name><operator>=</operator><name>P</name><block>{<expr><name><name>d</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><name>first</name><operator>+</operator><name><name>e</name><operator>.</operator><name>first</name></name></expr>,<expr><name>v</name></expr>}</block></expr>;</expr_stmt><expr_stmt><expr><name>pq</name><operator>&lt;&lt;</operator><name>P</name><block>{<expr><name><name>d</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><name>first</name><operator>+</operator><name><name>e</name><operator>.</operator><name>first</name></name></expr>,<expr><name><name>e</name><operator>.</operator><name>second</name></name></expr>}</block></expr>;</expr_stmt>}</block></then></if>}</block></for>}</block></then></if>}</block></while><return>return <expr><name>d</name></expr>;</return>}</block></function>
<function><type><name>ll</name></type> <name>maxflow</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>mil</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type><name>E</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>t</name></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name>ll</name></type> <name>z</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt><decl_stmt><decl><type><name>vi</name></type> <name>b</name><argument_list>(<argument><expr><call><name><name>E</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt><for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{<decl_stmt><decl><specifier>static</specifier> <type><name>auto</name></type> <name>dfs</name><init>=<expr><lambda><capture>[<argument><modifier>&amp;</modifier></argument>]</capture><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>f</name></decl></parameter>,<parameter><decl/></parameter></parameter_list>auto<ref_qualifier>&amp;</ref_qualifier><name>dfs</name></lambda></expr>)</init>-&gt;<name>ll</name><argument_list>{if<argument><expr><operator>(</operator><name>v</name><operator>==</operator><name>t</name><operator>)</operator></expr></argument><return>return <expr><name>f</name></expr>;</return></argument_list></decl></decl_stmt><expr_stmt><expr><name><name>b</name><index>[<expr><name>v</name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt><for>for<control>(<init><expr><name>auto</name><operator>&amp;</operator><name>p</name><operator>:</operator><name><name>E</name><index>[<expr><name>v</name></expr>]</index></name></expr></init>)</control><block>{<if>if<condition>(<expr><name><name>b</name><index>[<expr><name><name>p</name><operator>.</operator><name>first</name></name></expr>]</index></name><operator>&lt;</operator><name>i</name><operator>&amp;&amp;</operator><name><name>p</name><operator>.</operator><name>second</name></name></expr>)</condition><then><block>{<if>if<condition>(<decl><type><name>ll</name></type> <name>r</name><init>=<expr><call><name>dfs</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>first</name></name></expr></argument>,<argument><expr><call><name>min</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><name><name>p</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>dfs</name></expr></argument>)</argument_list></call></expr></init></decl>)</condition><then><block>{<expr_stmt><expr><name><name>p</name><operator>.</operator><name>second</name></name><operator>-=</operator><name>r</name></expr>;</expr_stmt><expr_stmt><expr><name><name>E</name><index>[<expr><name><name>p</name><operator>.</operator><name>first</name></name></expr>]</index><index>[<expr><name>v</name></expr>]</index></name><operator>+=</operator><name>r</name></expr>;</expr_stmt><return>return <expr><name>r</name></expr>;</return>}</block></then></if>}</block></then></if>}</block></for><return>return <expr><literal type="number">0</literal></expr>;</return>}</block></for><empty_stmt>;</empty_stmt><decl_stmt><decl><type><name>ll</name></type> <name>x</name><init>=<expr><call><name>dfs</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><call><name>ll</name><argument_list>(<argument><expr><literal type="number">1e18</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>dfs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><expr_stmt><expr><name>z</name><operator>+=</operator><name>x</name></expr>;</expr_stmt><if>if<condition>(<expr><name>x</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><name>z</name></expr>;</return></block></then></if>}</block></function>}
template<expr_stmt><expr><operator>&lt;</operator><name><typename>typename</typename> <name>T</name></name><operator>&gt;</operator><name>T</name> <macro><name>distsq</name><argument_list>(<argument>pair&lt;T</argument>,<argument>T&gt;a</argument>,<argument>pair&lt;T</argument>,<argument>T&gt;b</argument>)</argument_list></macro><block>{<return>return <expr><operator>(</operator><name><name>a</name><operator>.</operator><name>first</name></name><operator>-</operator><name><name>b</name><operator>.</operator><name>first</name></name><operator>)</operator><operator>*</operator><operator>(</operator><name><name>a</name><operator>.</operator><name>first</name></name><operator>-</operator><name><name>b</name><operator>.</operator><name>first</name></name><operator>)</operator><operator>+</operator><operator>(</operator><name><name>a</name><operator>.</operator><name>second</name></name><operator>-</operator><name><name>b</name><operator>.</operator><name>second</name></name><operator>)</operator><operator>*</operator><operator>(</operator><name><name>a</name><operator>.</operator><name>second</name></name><operator>-</operator><name><name>b</name><operator>.</operator><name>second</name></name><operator>)</operator></expr>;</return>}</block></expr></expr_stmt>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name>T</name></type> <name>max</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type><name>a</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>a</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt><decl_stmt><decl><type><name>T</name></type> <name>m</name><init>=<expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt><for>for<control>(<init><decl><type><name>T</name></type> <name>e</name><range>:<expr><name>a</name></expr></range></decl></init>)</control><block>{<expr_stmt><expr><name>m</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>m</name></expr></argument>,<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></for><return>return <expr><name>m</name></expr>;</return>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name>T</name></type> <name>min</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type><name>a</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>a</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt><decl_stmt><decl><type><name>T</name></type> <name>m</name><init>=<expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt><for>for<control>(<init><decl><type><name>T</name></type> <name>e</name><range>:<expr><name>a</name></expr></range></decl></init>)</control><block>{<expr_stmt><expr><name>m</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>m</name></expr></argument>,<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></for><return>return <expr><name>m</name></expr>;</return>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name>T</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>T</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<return>return <expr><ternary><condition><expr><name>a</name></expr>?</condition><then><expr><call><name>gcd</name><argument_list>(<argument><expr><name>b</name><operator>%</operator><name>a</name></expr></argument>,<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></then><else>:<expr><name>b</name></expr></else></ternary></expr>;</return>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name>T</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type><name>a</name></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name>T</name></type> <name>g</name><init>=<expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt><for>for<control>(<init><decl><type><name>T</name></type> <name>e</name><range>:<expr><name>a</name></expr></range></decl></init>)</control><block>{<expr_stmt><expr><name>g</name><operator>=</operator><call><name>gcd</name><argument_list>(<argument><expr><name>g</name></expr></argument>,<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></for><return>return <expr><name>g</name></expr>;</return>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type><name>LIS</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type><name>A</name></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type><name>B</name></decl>;</decl_stmt><for>for<control>(<init><decl><type><name>T</name></type> <name>a</name><range>:<expr><name>A</name></expr></range></decl></init>)</control><block>{<decl_stmt><decl><type><name>auto</name></type> <name>it</name><init>=<expr><call><name>lower_bound</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><if>if<condition>(<expr><name>it</name><operator>==</operator><call><name><name>B</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block>{<expr_stmt><expr><name>B</name><operator>&lt;&lt;</operator><name>a</name></expr>;</expr_stmt>}</block></then><else>else<block>{<expr_stmt><expr><operator>*</operator><name>it</name><operator>=</operator><name>a</name></expr>;</expr_stmt>}</block></else></if>}</block></for><return>return <expr><name>B</name></expr>;</return>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type><name>LCS</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type><name>A</name></decl></parameter>,<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type><name>B</name></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name>int</name></type> <name>N</name><init>=<expr><call><name><name>A</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>,<decl><type ref="prev"/><name>M</name><init>=<expr><call><name><name>B</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>pii</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type><name>d</name><argument_list>(<argument><expr><name>N</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>pii</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>M</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt><macro><name>fr</name><argument_list>(<argument>i</argument>,<argument>N</argument>)</argument_list></macro><block>{<macro><name>fr</name><argument_list>(<argument>j</argument>,<argument>M</argument>)</argument_list></macro><block>{<if>if<condition>(<expr><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name><name>B</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then><block>{<expr_stmt><expr><name><name>d</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><block>{<expr><name><name>d</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>first</name><operator>+</operator><literal type="number">1</literal></expr>,<expr><block>{<expr><name>i</name></expr>,<expr><name>j</name></expr>}</block></expr>}</block></expr>;</expr_stmt>}</block></then><else>else<block>{<expr_stmt><expr><name><name>d</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name><name>d</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>d</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></else></if>}</block>}</block><decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type><name>r</name></decl>;</decl_stmt><for>for<control>(<init><decl><type><name>pii</name></type> <name>p</name><init>=<expr><block>{<expr><name>N</name></expr>,<expr><name>M</name></expr>}</block></expr></init></decl>;</init><condition><expr><name><name>d</name><index>[<expr><name><name>p</name><operator>.</operator><name>first</name></name></expr>]</index><index>[<expr><name><name>p</name><operator>.</operator><name>second</name></name></expr>]</index></name><operator>.</operator><name>first</name></expr>;</condition><incr><expr><name>p</name><operator>=</operator><name><name>d</name><index>[<expr><name><name>p</name><operator>.</operator><name>first</name></name></expr>]</index><index>[<expr><name><name>p</name><operator>.</operator><name>second</name></name></expr>]</index></name><operator>.</operator><name>second</name></expr></incr>)</control><block>{<expr_stmt><expr><name>r</name><operator>&lt;&lt;</operator><name><name>A</name><index>[<expr><name><name>d</name><index>[<expr><name><name>p</name><operator>.</operator><name>first</name></name></expr>]</index><index>[<expr><name><name>p</name><operator>.</operator><name>second</name></name></expr>]</index></name><operator>.</operator><name><name>second</name><operator>.</operator><name>first</name></name></expr>]</index></name></expr>;</expr_stmt>}</block></for><expr_stmt><expr><call><name>Reverse</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><name>r</name></expr>;</return>}</block></function>
<function><type><name>str</name></type> <name>LCS</name><parameter_list>(<parameter><decl><type><name>str</name></type> <name>S</name></decl></parameter>,<parameter><decl><type><name>str</name></type> <name>T</name></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name></type><name>s</name><init>=<expr><call><name>LCS</name><argument_list>(<argument><expr><call><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>S</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>S</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>T</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>T</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><return>return <expr><call><name>str</name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>s</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>,<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type><name>ConvexHull</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>,<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type><name>V</name></decl></parameter>)</parameter_list><block>{<if>if<condition>(<expr><call><name><name>V</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&lt;=</operator><literal type="number">3</literal></expr>)</condition><then><block>{<return>return <expr><name>V</name></expr>;</return>}</block></then></if><expr_stmt><expr><call><name>Sort</name><argument_list>(<argument><expr><name>V</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><macro><name>rf</name><argument_list>(<argument>i</argument>,<argument>V.size()-<literal type="number">1</literal></argument>)</argument_list></macro><expr_stmt><expr><name>V</name><operator>&lt;&lt;</operator><name><name>V</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt><decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>,<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type><name>r</name></decl>;</decl_stmt><for>for<control>(<init><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>,<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type><name>p</name><range>:<expr><name>V</name></expr></range></decl></init>)</control><block>{<decl_stmt><decl><type><name>int</name></type> <name>s</name><init>=<expr><call><name><name>r</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><while>while<condition>(<expr><name>s</name><operator>&gt;=</operator><literal type="number">2</literal><operator>&amp;&amp;</operator><operator>(</operator><name><name>p</name><operator>.</operator><name>second</name></name><operator>-</operator><name><name>r</name><index>[<expr><name>s</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>second</name><operator>)</operator><operator>*</operator><operator>(</operator><name><name>p</name><operator>.</operator><name>first</name></name><operator>-</operator><name><name>r</name><index>[<expr><name>s</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>first</name><operator>)</operator><operator>&lt;</operator><operator>(</operator><name><name>p</name><operator>.</operator><name>second</name></name><operator>-</operator><name><name>r</name><index>[<expr><name>s</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>second</name><operator>)</operator><operator>*</operator><operator>(</operator><name><name>p</name><operator>.</operator><name>first</name></name><operator>-</operator><name><name>r</name><index>[<expr><name>s</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>first</name><operator>)</operator></expr>)</condition><block>{<expr_stmt><expr><call><name><name>r</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><operator>--</operator><name>s</name></expr>;</expr_stmt>}</block></while><expr_stmt><expr><name>r</name><operator>&lt;&lt;</operator><name>p</name></expr>;</expr_stmt>}</block></for><expr_stmt><expr><call><name><name>r</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt><return>return <expr><name>r</name></expr>;</return>}</block></function>
<class>class <name>UnionFind</name><block>{<private type="default"><decl_stmt><decl><type><name>vi</name></type> <name>p</name></decl>,<decl><type ref="prev"/><name>s</name></decl>;</decl_stmt><function><type><name>void</name></type> <name>extend</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>N</name></decl></parameter>)</parameter_list><block>{<macro><name>foor</name><argument_list>(<argument>i</argument>,<argument>p.size()</argument>,<argument>N</argument>)</argument_list></macro><block>{<expr_stmt><expr><name>p</name><operator>&lt;&lt;</operator><name>i</name></expr>;</expr_stmt><expr_stmt><expr><name>s</name><operator>&lt;&lt;</operator><literal type="number">1</literal></expr>;</expr_stmt>}</block>}</block></function></private><public>public:<constructor><name>UnionFind</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{}</block></constructor><constructor><name>UnionFind</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>N</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><call><name>extend</name><argument_list>(<argument><expr><name>N</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></constructor><function><type><name>int</name></type> <name>find</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><call><name>extend</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><ternary><condition><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name>i</name></expr>?</condition><then><expr><name>i</name></expr></then><else>:<expr><call><name>find</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>}</block></function><function><type><name>void</name></type> <name>unite</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><call><name>extend</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>extend</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><if>if<condition>(<expr><operator>(</operator><name>a</name><operator>=</operator><call><name>find</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call><operator>)</operator><operator>!=</operator><operator>(</operator><name>b</name><operator>=</operator><call><name>find</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><then><block>{<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>a</name></expr>]</index></name><operator>&gt;</operator><name><name>s</name><index>[<expr><name>b</name></expr>]</index></name></expr>)</condition><then><block>{<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></then></if><expr_stmt><expr><name><name>s</name><index>[<expr><name>b</name></expr>]</index></name><operator>+=</operator><name><name>s</name><index>[<expr><name>a</name></expr>]</index></name></expr>;</expr_stmt><expr_stmt><expr><name><name>p</name><index>[<expr><name>a</name></expr>]</index></name><operator>=</operator><name>b</name></expr>;</expr_stmt>}</block></then></if>}</block></function><function><type><name>void</name></type> <name>unite</name><parameter_list>(<parameter><decl><type><name>pii</name></type> <name>p</name></decl></parameter>)</parameter_list><block>{<return>return <expr><call><name>unite</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>first</name></name></expr></argument>,<argument><expr><name><name>p</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</return>}</block></function><function><type><name>bool</name></type> <name>same</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><call><name>extend</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>extend</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><call><name>find</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call><operator>==</operator><call><name>find</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>}</block></function><function><type><name>bool</name></type> <name>same</name><parameter_list>(<parameter><decl><type><name>pii</name></type> <name>p</name></decl></parameter>)</parameter_list><block>{<return>return <expr><call><name>same</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>first</name></name></expr></argument>,<argument><expr><name><name>p</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</return>}</block></function><function><type><name>int</name></type> <name>size</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><call><name>extend</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><name><name>s</name><index>[<expr><call><name>find</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</return>}</block></function></public>}</block>;</class>
<function><type><name>ll</name></type> <name>MST</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>pii</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type><name>E</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><call><name>Sort</name><argument_list>(<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><decl_stmt><decl><type><name>UnionFind</name></type> <name>uf</name></decl>;</decl_stmt><decl_stmt><decl><type><name>ll</name></type> <name>z</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt><for>for<control>(<init><expr><name>auto</name><operator>&amp;</operator><name>e</name><operator>:</operator><name>E</name></expr></init>)</control><block>{<if>if<condition>(<expr><operator>!</operator><call><name><name>uf</name><operator>.</operator><name>same</name></name><argument_list>(<argument><expr><name><name>e</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{<expr_stmt><expr><name>z</name><operator>+=</operator><name><name>e</name><operator>.</operator><name>first</name></name></expr>;</expr_stmt><expr_stmt><expr><call><name><name>uf</name><operator>.</operator><name>unite</name></name><argument_list>(<argument><expr><name><name>e</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></then></if>}</block></for><return>return <expr><name>z</name></expr>;</return>}</block></function>
<function><type><name>ll</name></type> <name>strmod</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>str</name><modifier>&amp;</modifier></type><name>s</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>m</name></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name>ll</name></type> <name>x</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt><macro><name>fr</name><argument_list>(<argument>i</argument>,<argument>s.size()</argument>)</argument_list></macro><block>{<expr_stmt><expr><name>x</name><operator>=</operator><operator>(</operator><name>x</name><operator>*</operator><literal type="number">10</literal><operator>+</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="number">48</literal><operator>)</operator><operator>%</operator><name>m</name></expr>;</expr_stmt>}</block><return>return <expr><name>x</name></expr>;</return>}</block></function>
<function><type><name>vvl</name></type> <name>mul</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vvl</name><modifier>&amp;</modifier></type><name>A</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>vvl</name><modifier>&amp;</modifier></type><name>B</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>m</name></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name>vvl</name></type> <name>C</name></decl>;</decl_stmt><macro><name>fr</name><argument_list>(<argument>y</argument>,<argument>A.size()</argument>)</argument_list></macro><block>{<expr_stmt><expr><name>C</name><operator>&lt;&lt;</operator><call><name>vl</name><argument_list>(<argument><expr><name><name>B</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block><macro><name>fr</name><argument_list>(<argument>y</argument>,<argument>C.size()</argument>)</argument_list></macro><block>{<macro><name>fr</name><argument_list>(<argument>x</argument>,<argument>C[y].size()</argument>)</argument_list></macro><block>{<macro><name>fr</name><argument_list>(<argument>i</argument>,<argument>A[<literal type="number">0</literal>].size()</argument>)</argument_list></macro><block>{<expr_stmt><expr><operator>(</operator><name><name>C</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>x</name></expr>]</index></name><operator>+=</operator><name><name>A</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><name><name>B</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>x</name></expr>]</index></name><operator>)</operator><operator>%=</operator><name>m</name></expr>;</expr_stmt>}</block>}</block>}</block><return>return <expr><name>C</name></expr>;</return>}</block></function>
<function><type><name>vvl</name></type> <name>pow</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vvl</name><modifier>&amp;</modifier></type><name>A</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>ll</name></type> <name>n</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>m</name></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name>vvl</name></type> <name>B</name></decl>;</decl_stmt><macro><name>fr</name><argument_list>(<argument>y</argument>,<argument>A.size()</argument>)</argument_list></macro><block>{<expr_stmt><expr><name>B</name><operator>&lt;&lt;</operator><call><name>vl</name><argument_list>(<argument><expr><call><name><name>A</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block><if>if<condition>(<expr><name>n</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{<macro><name>fr</name><argument_list>(<argument>i</argument>,<argument>B.size()</argument>)</argument_list></macro><block>{<expr_stmt><expr><name><name>B</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>}</block>}</block></then></if><macro><name>elsif</name><argument_list>(<argument>n%<literal type="number">2</literal></argument>)</argument_list></macro><block>{<expr_stmt><expr><name>B</name><operator>=</operator><call><name>mul</name><argument_list>(<argument><expr><name>A</name></expr></argument>,<argument><expr><call><name>pow</name><argument_list>(<argument><expr><name>A</name></expr></argument>,<argument><expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block><else>else<block>{<decl_stmt><decl><type><name>vvl</name></type> <name>C</name><init>=<expr><call><name>pow</name><argument_list>(<argument><expr><name>A</name></expr></argument>,<argument><expr><name>n</name><operator>/</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><expr_stmt><expr><name>B</name><operator>=</operator><call><name>mul</name><argument_list>(<argument><expr><name>C</name></expr></argument>,<argument><expr><name>C</name></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></else><return>return <expr><name>B</name></expr>;</return>}</block></function>
<function><type><name>ll</name></type> <name>pow</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>ll</name></type> <name>n</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>m</name></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name>ll</name></type> <name>t</name></decl>;</decl_stmt><return>return <expr><ternary><condition><expr><name>n</name></expr>?</condition><then><expr><operator>(</operator><ternary><condition><expr><name>n</name><operator>&amp;</operator><literal type="number">1</literal></expr>?</condition><then><expr><ternary><condition><expr><name>a</name><operator>&gt;=</operator><literal type="number">0</literal></expr>?</condition><then><expr><name>a</name><operator>%</operator><name>m</name></expr></then><else>:<expr><operator>(</operator><name>m</name><operator>-</operator><operator>(</operator><operator>-</operator><name>a</name><operator>%</operator><name>m</name><operator>)</operator><operator>)</operator><operator>%</operator><name>m</name></expr></else></ternary></expr></then><else>:<expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator><operator>*</operator><operator>(</operator><name>t</name><operator>=</operator><call><name>pow</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>n</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call><operator>,</operator><name>t</name><operator>*</operator><name>t</name><operator>%</operator><name>m</name><operator>)</operator><operator>%</operator><name>m</name></expr></then><else>:<expr><operator>!</operator><operator>!</operator><name>a</name></expr></else></ternary></expr>;</return>}</block></function>
<function><type><name>ll</name></type> <name>inv</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ll</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>p</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>x</name><operator>!=</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><call><name>pow</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>p</name><operator>-</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>}</block></function>
<function><type><name>ll</name></type> <name>inv</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ll</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{<return>return <expr><call><name>inv</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>MD</name></expr></argument>)</argument_list></call></expr>;</return>}</block></function>
<function><type><name>vpll</name></type> <name>fact</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>n</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>p</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>n</name><operator>&lt;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><decl_stmt><decl><type><name>vpll</name></type> <name>v</name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt><expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>first</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt><macro><name>foor</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro><block>{<expr_stmt><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name><operator>=</operator><name><name>v</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>first</name><operator>*</operator><name>i</name><operator>%</operator><name>p</name></expr>;</expr_stmt>}</block><expr_stmt><expr><name><name>v</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>second</name><operator>=</operator><call><name>inv</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>first</name></expr></argument>,<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><macro><name>roof</name><argument_list>(<argument>i</argument>,<argument>n</argument>,<argument><literal type="number">1</literal></argument>)</argument_list></macro><block>{<expr_stmt><expr><name><name>v</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>second</name><operator>=</operator><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name><operator>*</operator><name>i</name><operator>%</operator><name>p</name></expr>;</expr_stmt>}</block><return>return <expr><name>v</name></expr>;</return>}</block></function>
<class>class <name>Combination</name><block>{<private type="default"><decl_stmt><decl><type><specifier>const</specifier> <name>vpll</name></type> <name>f</name></decl>;</decl_stmt><decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>M</name></decl>;</decl_stmt></private><public>public:<constructor><name>Combination</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>m</name></decl></parameter>)</parameter_list><member_init_list>:<call><name>f</name><argument_list>(<argument><expr><call><name>fact</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>,<call><name>M</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></member_init_list><block>{}</block></constructor><constructor><name>Combination</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list><member_init_list>:<call><name>Combination</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><name>MD</name></expr></argument>)</argument_list></call></member_init_list><block>{}</block></constructor><function><type><name>ll</name></type> <name>P</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list><block>{<return>return <expr><ternary><condition><expr><name>n</name><operator>&lt;</operator><literal type="number">0</literal><operator>||</operator><name>k</name><operator>&lt;</operator><literal type="number">0</literal><operator>||</operator><name>n</name><operator>&lt;</operator><name>k</name></expr>?</condition><then><expr><literal type="number">0ll</literal></expr></then><else>:<expr><name><name>f</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>first</name><operator>*</operator><name><name>f</name><index>[<expr><name>n</name><operator>-</operator><name>k</name></expr>]</index></name><operator>.</operator><name>second</name><operator>%</operator><name>M</name></expr></else></ternary></expr>;</return>}</block></function><function><type><name>ll</name></type> <name>C</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list><block>{<return>return <expr><ternary><condition><expr><name>k</name><operator>&lt;</operator><literal type="number">0</literal></expr>?</condition><then><expr><literal type="number">0</literal></expr></then><else>:<expr><call><name>P</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><name>k</name></expr></argument>)</argument_list></call><operator>*</operator><name><name>f</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>second</name><operator>%</operator><name>M</name></expr></else></ternary></expr>;</return>}</block></function><function><type><name>ll</name></type> <name>H</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list><block>{<return>return <expr><ternary><condition><expr><name>n</name><operator>==</operator><literal type="number">0</literal><operator>&amp;&amp;</operator><name>k</name><operator>==</operator><literal type="number">0</literal></expr>?</condition><then><expr><literal type="number">1ll</literal></expr></then><else>:<expr><call><name>C</name><argument_list>(<argument><expr><name>n</name><operator>+</operator><name>k</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>}</block></function><function><type><name>ll</name></type> <name>F</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{<return>return <expr><ternary><condition><expr><name>n</name><operator>&lt;</operator><literal type="number">0</literal></expr>?</condition><then><expr><literal type="number">0</literal></expr></then><else>:<expr><name><name>f</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>first</name></expr></else></ternary></expr>;</return>}</block></function></public>}</block>;</class>
<function><type><name>ll</name></type> <name>C2</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{<return>return<expr><operator>(</operator><name>ll</name><operator>)</operator><name>n</name><operator>*</operator><operator>~</operator><operator>-</operator><name>n</name><operator>/</operator><literal type="number">2</literal></expr>;</return>}</block></function>
<function><type><name>ll</name></type> <name>sum</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vi</name></type> <name>a</name></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name>ll</name></type> <name>s</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt><for>for<control>(<init><decl><type><name>int</name></type> <name>e</name><range>:<expr><name>a</name></expr></range></decl></init>)</control><block>{<expr_stmt><expr><name>s</name><operator>+=</operator><name>e</name></expr>;</expr_stmt>}</block></for><return>return <expr><name>s</name></expr>;</return>}</block></function>
<function><type><name>ll</name></type> <name>sum</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vl</name></type> <name>a</name></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name>ll</name></type> <name>s</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt><for>for<control>(<init><decl><type><name>ll</name></type> <name>e</name><range>:<expr><name>a</name></expr></range></decl></init>)</control><block>{<expr_stmt><expr><name>s</name><operator>+=</operator><name>e</name></expr>;</expr_stmt>}</block></for><return>return <expr><name>s</name></expr>;</return>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name>int</name></type> <name>MSB</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>N</name></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name>int</name></type> <name>r</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt><for>for<control>(<init>;</init><condition><expr><name>N</name><operator>&gt;</operator><literal type="number">0</literal></expr>;</condition><incr><expr><name>N</name><operator>/=</operator><literal type="number">2</literal></expr></incr>)</control><block>{<expr_stmt><expr><operator>++</operator><name>r</name></expr>;</expr_stmt>}</block></for><return>return <expr><name>r</name></expr>;</return>}</block></function>
<class><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>class <name>SegmentTree</name><block>{<private type="default"><decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type><name>S</name></decl>;</decl_stmt><macro><name>T</name><argument_list>(<argument>*const op</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>T</name> <name>a</name><operator>,</operator><name>T</name> <name>b</name><operator>)</operator></expr>;</expr_stmt><decl_stmt><decl><type><specifier>const</specifier> <name>T</name></type> <name>zero</name></decl>;</decl_stmt><decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>B</name></decl>;</decl_stmt></private><public>public:<constructor><name>SegmentTree</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>N</name></decl></parameter>,<parameter><function_decl><type><name>T</name></type>(<modifier>*</modifier><name>f</name>)<parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list></function_decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>T</name></type> <name>zero</name></decl></parameter>)</parameter_list><member_init_list>:<call><name>S</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>&lt;&lt;</operator><call><name>MSB</name><argument_list>(<argument><expr><name>N</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>zero</name></expr></argument>)</argument_list></call>,<call><name>op</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call>,<call><name>zero</name><argument_list>(<argument><expr><name>zero</name></expr></argument>)</argument_list></call>,<call><name>B</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>&lt;&lt;</operator><call><name>MSB</name><argument_list>(<argument><expr><name>N</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></member_init_list><block>{}</block></constructor><constructor><name>SegmentTree</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type><name>v</name></decl></parameter>,<parameter><function_decl><type><name>T</name></type>(<modifier>*</modifier><name>f</name>)<parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list></function_decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>T</name></type> <name>zero</name></decl></parameter>)</parameter_list><member_init_list>:<call><name>SegmentTree</name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>f</name></expr></argument>,<argument><expr><name>zero</name></expr></argument>)</argument_list></call></member_init_list><block>{<macro><name>fr</name><argument_list>(<argument>i</argument>,<argument>v.size()</argument>)</argument_list></macro><block>{<expr_stmt><expr><name><name>S</name><index>[<expr><call><name><name>S</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">2</literal><operator>+</operator><name>i</name></expr>]</index></name><operator>=</operator><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>}</block><macro><name>roof</name><argument_list>(<argument>i</argument>,<argument>S.size()/<literal type="number">2</literal>-<literal type="number">1</literal></argument>,<argument><literal type="number">1</literal></argument>)</argument_list></macro><block>{<expr_stmt><expr><name><name>S</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><call><name>op</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block>}</block></constructor><function><type><name>T</name></type> <name>calc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name>l</name><operator>+=</operator><name>B</name></expr>;</expr_stmt><expr_stmt><expr><name>r</name><operator>+=</operator><name>B</name></expr>;</expr_stmt><if>if<condition>(<expr><name>l</name><operator>&gt;</operator><name>r</name></expr>)</condition><then><block>{<return>return <expr><name>zero</name></expr>;</return>}</block></then></if><if>if<condition>(<expr><name>l</name><operator>==</operator><name>r</name></expr>)</condition><then><block>{<return>return <expr><name><name>S</name><index>[<expr><name>l</name></expr>]</index></name></expr>;</return>}</block></then></if><decl_stmt><decl><type><name>T</name></type> <name>L</name><init>=<expr><name><name>S</name><index>[<expr><name>l</name></expr>]</index></name></expr></init></decl>,<decl><type ref="prev"/><name>R</name><init>=<expr><name><name>S</name><index>[<expr><name>r</name></expr>]</index></name></expr></init></decl>;</decl_stmt><for>for<control>(<init>;</init><condition><expr><name>l</name><operator>/</operator><literal type="number">2</literal><operator>&lt;</operator><name>r</name><operator>/</operator><literal type="number">2</literal></expr>;</condition><incr><expr><name>l</name><operator>/=</operator><literal type="number">2</literal></expr><operator>,</operator><expr><name>r</name><operator>/=</operator><literal type="number">2</literal></expr></incr>)</control><block>{<if>if<condition>(<expr><name>l</name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{<expr_stmt><expr><name>L</name><operator>=</operator><call><name>op</name><argument_list>(<argument><expr><name>L</name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></then></if><if>if<condition>(<expr><name>r</name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{<expr_stmt><expr><name>R</name><operator>=</operator><call><name>op</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr><name>r</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></then></if>}</block></for><return>return <expr><call><name>op</name><argument_list>(<argument><expr><name>L</name></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>;</return>}</block></function><function><type><name>void</name></type> <name>replace</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{<for>for<control>(<init><expr><name><name>S</name><index>[<expr><name>i</name><operator>+=</operator><name>B</name></expr>]</index></name><operator>=</operator><name>x</name></expr>;</init><condition><expr><name>i</name><operator>!=</operator><literal type="number">1</literal></expr>;</condition><incr><expr><name>i</name><operator>/=</operator><literal type="number">2</literal></expr></incr>)</control><block>{<if>if<condition>(<expr><name>i</name><operator>%</operator><literal type="number">2</literal></expr>)</condition><then><block>{<expr_stmt><expr><name><name>S</name><index>[<expr><name>i</name><operator>/</operator><literal type="number">2</literal></expr>]</index></name><operator>=</operator><call><name>op</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></then><else>else<block>{<expr_stmt><expr><name><name>S</name><index>[<expr><name>i</name><operator>/</operator><literal type="number">2</literal></expr>]</index></name><operator>=</operator><call><name>op</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></else></if>}</block></for>}</block></function><function><type><name>void</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><call><name>replace</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><call><name>op</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr><name>B</name><operator>+</operator><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function><function><type><name>T</name></type> <name>top</name><parameter_list>()</parameter_list><block>{<return>return <expr><name><name>S</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</return>}</block></function><function><type><name>T</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list><block>{<return>return <expr><name><name>S</name><index>[<expr><name>i</name><operator>+</operator><name>B</name></expr>]</index></name></expr>;</return>}</block></function></public>}</block>;</class>
<function><type><name>ll</name></type> <name>BITsum</name><parameter_list>(<parameter><decl><type><name>vl</name><modifier>&amp;</modifier></type><name>B</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name>ll</name></type> <name>z</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt><while>while<condition>(<expr><name>i</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><block>{<expr_stmt><expr><name>z</name><operator>+=</operator><name><name>B</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt><expr_stmt><expr><name>i</name><operator>-=</operator><name>i</name><operator>&amp;</operator><operator>-</operator><name>i</name></expr>;</expr_stmt>}</block></while><return>return <expr><name>z</name></expr>;</return>}</block></function>
<function><type><name>void</name></type> <name>BITadd</name><parameter_list>(<parameter><decl><type><name>vl</name><modifier>&amp;</modifier></type><name>B</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{<while>while<condition>(<expr><name>i</name><operator>&lt;</operator><call><name><name>B</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{<expr_stmt><expr><name><name>B</name><index>[<expr><name>i</name></expr>]</index></name><operator>+=</operator><name>x</name></expr>;</expr_stmt><expr_stmt><expr><name>i</name><operator>+=</operator><name>i</name><operator>&amp;</operator><operator>-</operator><name>i</name></expr>;</expr_stmt>}</block></while>}</block></function>
<function><type><name>ll</name></type> <name>fib</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ll</name></type> <name>n</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>m</name></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name>ll</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>,<decl><type ref="prev"/><name>d</name></decl>,<decl><type ref="prev"/><name>A</name></decl>,<decl><type ref="prev"/><name>B</name></decl>,<decl><type ref="prev"/><name>C</name></decl>,<decl><type ref="prev"/><name>D</name></decl>;</decl_stmt><expr_stmt><expr><name>a</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt><expr_stmt><expr><name>b</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt><expr_stmt><expr><name>c</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt><expr_stmt><expr><name>d</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt><macro><name>rf</name><argument_list>(<argument>i</argument>,<argument><literal type="number">63</literal></argument>)</argument_list></macro><block>{<expr_stmt><expr><name>A</name><operator>=</operator><name>a</name><operator>*</operator><name>a</name><operator>+</operator><name>b</name><operator>*</operator><name>c</name></expr>;</expr_stmt><expr_stmt><expr><name>B</name><operator>=</operator><name>a</name><operator>*</operator><name>b</name><operator>+</operator><name>b</name><operator>*</operator><name>d</name></expr>;</expr_stmt><expr_stmt><expr><name>C</name><operator>=</operator><name>c</name><operator>*</operator><name>a</name><operator>+</operator><name>d</name><operator>*</operator><name>c</name></expr>;</expr_stmt><expr_stmt><expr><name>D</name><operator>=</operator><name>c</name><operator>*</operator><name>b</name><operator>+</operator><name>d</name><operator>*</operator><name>d</name></expr>;</expr_stmt><if>if<condition>(<expr><name>n</name><operator>&gt;&gt;</operator><name>i</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then><block>{<expr_stmt><expr><name>a</name><operator>=</operator><name>A</name></expr>;</expr_stmt><expr_stmt><expr><name>b</name><operator>=</operator><name>B</name></expr>;</expr_stmt><expr_stmt><expr><name>c</name><operator>=</operator><name>C</name></expr>;</expr_stmt><expr_stmt><expr><name>d</name><operator>=</operator><name>D</name></expr>;</expr_stmt><expr_stmt><expr><name>A</name><operator>=</operator><name>a</name><operator>+</operator><name>b</name></expr>;</expr_stmt><expr_stmt><expr><name>B</name><operator>=</operator><name>a</name></expr>;</expr_stmt><expr_stmt><expr><name>C</name><operator>=</operator><name>c</name><operator>+</operator><name>d</name></expr>;</expr_stmt><expr_stmt><expr><name>D</name><operator>=</operator><name>c</name></expr>;</expr_stmt>}</block></then></if><expr_stmt><expr><name>a</name><operator>=</operator><name>A</name><operator>%</operator><name>m</name></expr>;</expr_stmt><expr_stmt><expr><name>b</name><operator>=</operator><name>B</name><operator>%</operator><name>m</name></expr>;</expr_stmt><expr_stmt><expr><name>c</name><operator>=</operator><name>C</name><operator>%</operator><name>m</name></expr>;</expr_stmt><expr_stmt><expr><name>d</name><operator>=</operator><name>D</name><operator>%</operator><name>m</name></expr>;</expr_stmt>}</block><return>return <expr><name>b</name></expr>;</return>}</block></function>
<function><type><name>vi</name></type> <name>primes</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name>vb</name></type> <name>b</name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt><decl_stmt><decl><type><name>vi</name></type> <name>p</name></decl>;</decl_stmt><macro><name>foor</name><argument_list>(<argument>i</argument>,<argument><literal type="number">2</literal></argument>,<argument>n</argument>)</argument_list></macro><block>{<if>if<condition>(<expr><operator>!</operator><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block>{<expr_stmt><expr><name>p</name><operator>&lt;&lt;</operator><name>i</name></expr>;</expr_stmt><for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">2</literal><operator>*</operator><name>i</name></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>+=</operator><name>i</name></expr></incr>)</control><block>{<expr_stmt><expr><name><name>b</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><literal type="boolean">true</literal></expr>;</expr_stmt>}</block></for>}</block></then></if>}</block><return>return <expr><name>p</name></expr>;</return>}</block></function>
<function><type><name>vb</name></type> <name>isprime</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name>vb</name></type> <name>v</name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></decl>;</decl_stmt><expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="boolean">false</literal></expr>;</expr_stmt><macro><name>foor</name><argument_list>(<argument>i</argument>,<argument><literal type="number">2</literal></argument>,<argument>n</argument>)</argument_list></macro><block>{<if>if<condition>(<expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block>{<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">2</literal><operator>*</operator><name>i</name></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>+=</operator><name>i</name></expr></incr>)</control><block>{<expr_stmt><expr><name><name>v</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><literal type="boolean">false</literal></expr>;</expr_stmt>}</block></for>}</block></then></if>}</block><return>return <expr><name>v</name></expr>;</return>}</block></function>
<class>class <name>LCA</name><block>{<private type="default"><decl_stmt><decl><type><name>vvi</name></type> <name>par</name></decl>;</decl_stmt><decl_stmt><decl><type><name>vi</name></type> <name>dep</name></decl>;</decl_stmt></private><public>public:<constructor><name>LCA</name><parameter_list>(<parameter><decl><type><name>vvi</name><modifier>&amp;</modifier></type><name>E</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>root</name></decl></parameter>)</parameter_list><member_init_list>:<call><name>par</name><argument_list>(<argument><expr><call><name>MSB</name><argument_list>(<argument><expr><call><name><name>E</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>vi</name><argument_list>(<argument><expr><call><name><name>E</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>,<call><name>dep</name><argument_list>(<argument><expr><call><name><name>E</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></member_init_list><block>{<expr_stmt><expr><name>function</name><operator>&lt;</operator><call><name>void</name><argument_list>(<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>)</argument_list></call><operator>&gt;</operator><name>dfs</name><operator>=</operator><lambda><capture>[<argument><modifier>&amp;</modifier></argument>]</capture><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>)</parameter_list><block>{<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><range>:<expr><name><name>E</name><index>[<expr><name>i</name></expr>]</index></name></expr></range></decl></init>)</control><block type="pseudo"><if>if<condition>(<expr><name>j</name><operator>!=</operator><name>p</name></expr>)</condition><then><block>{<expr_stmt><expr><name><name>par</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt><expr_stmt><expr><name><name>dep</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><name><name>dep</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt><expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>j</name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></then></if></block></for>}</block></lambda></expr>;</expr_stmt><expr_stmt><expr><name><name>par</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>root</name></expr>]</index></name><operator>=</operator><name>root</name></expr>;</expr_stmt><expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>root</name></expr></argument>,<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><macro><name>fr</name><argument_list>(<argument>i</argument>,<argument>par.size()-<literal type="number">1</literal></argument>)</argument_list></macro><block>{<macro><name>fr</name><argument_list>(<argument>j</argument>,<argument>par[<literal type="number">0</literal>].size()</argument>)</argument_list></macro><block>{<expr_stmt><expr><name><name>par</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><name><name>par</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name><name>par</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>}</block>}</block>}</block></constructor><function type="operator"><type><name>int</name></type> <name>operator<name>()</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<if>if<condition>(<expr><name><name>dep</name><index>[<expr><name>a</name></expr>]</index></name><operator>&gt;</operator><name><name>dep</name><index>[<expr><name>b</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if><for>for<control>(<init><decl><type><name>int</name></type> <name>t</name><init>=<expr><name><name>dep</name><index>[<expr><name>b</name></expr>]</index></name><operator>-</operator><name><name>dep</name><index>[<expr><name>a</name></expr>]</index></name></expr></init></decl>,<decl><type ref="prev"/><name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>t</name></expr>;</condition><incr><expr><name>t</name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr><operator>,</operator><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{<if>if<condition>(<expr><name>t</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then><block>{<expr_stmt><expr><name>b</name><operator>=</operator><name><name>par</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>b</name></expr>]</index></name></expr>;</expr_stmt>}</block></then></if>}</block></for><if>if<condition>(<expr><name>a</name><operator>==</operator><name>b</name></expr>)</condition><then><block type="pseudo"><return>return <expr><name>a</name></expr>;</return></block></then></if><macro><name>rf</name><argument_list>(<argument>i</argument>,<argument>par.size()</argument>)</argument_list></macro><block>{<if>if<condition>(<expr><name><name>par</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>a</name></expr>]</index></name><operator>!=</operator><name><name>par</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>b</name></expr>]</index></name></expr>)</condition><then><block>{<expr_stmt><expr><name>a</name><operator>=</operator><name><name>par</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>a</name></expr>]</index></name></expr>;</expr_stmt><expr_stmt><expr><name>b</name><operator>=</operator><name><name>par</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>b</name></expr>]</index></name></expr>;</expr_stmt>}</block></then></if>}</block><return>return <expr><name><name>par</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>a</name></expr>]</index></name></expr>;</return>}</block></function></public>}</block>;</class>
<function><type><name>vpli</name></type> <name>factor</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>N</name></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name>vpli</name></type> <name>r</name></decl>;</decl_stmt><for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>*</operator><name>i</name><operator>&lt;=</operator><name>N</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{<if>if<condition>(<expr><name>N</name><operator>%</operator><name>i</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{<expr_stmt><expr><name>r</name><operator>&lt;&lt;</operator><name>pli</name><block>{<expr><name>i</name></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>;</expr_stmt><while>while<condition>(<expr><name>N</name><operator>%</operator><name>i</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><block>{<expr_stmt><expr><name>N</name><operator>/=</operator><name>i</name></expr>;</expr_stmt><expr_stmt><expr><operator>++</operator><call><name><name>r</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>second</name></expr>;</expr_stmt>}</block></while>}</block></then></if>}</block></for><if>if<condition>(<expr><name>N</name><operator>&gt;</operator><literal type="number">1</literal></expr>)</condition><then><block>{<expr_stmt><expr><name>r</name><operator>&lt;&lt;</operator><name>pli</name><block>{<expr><name>N</name></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>;</expr_stmt>}</block></then></if><return>return <expr><name>r</name></expr>;</return>}</block></function>
<function><type><name>vl</name></type> <name>divisors</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name>vl</name></type> <name>r</name></decl>;</decl_stmt><decl_stmt><decl><type><name>ll</name></type> <name>m</name><init>=<expr><call><name>sqrt</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><macro><name>foor</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>m</argument>)</argument_list></macro><if>if<condition>(<expr><name>n</name><operator>%</operator><name>i</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>r</name><operator>&lt;&lt;</operator><call><name>ll</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if><macro><name>rf</name><argument_list>(<argument>i</argument>,<argument>r.size()-(m*m==n)</argument>)</argument_list></macro><expr_stmt><expr><name>r</name><operator>&lt;&lt;</operator><name>n</name><operator>/</operator><name><name>r</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt><return>return <expr><name>r</name></expr>;</return>}</block></function>
<function><type><name>vi</name></type> <name>SuffixArray</name><parameter_list>(<parameter><decl><type><name>str</name></type> <name>S</name></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name>int</name></type> <name>N</name><init>=<expr><call><name><name>S</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><decl_stmt><decl><type><name>vi</name></type> <name>rank</name><argument_list>(<argument><expr><name>N</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></decl>,<decl><type ref="prev"/><name>tmp</name><argument_list>(<argument><expr><name>N</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></decl>,<decl><type ref="prev"/><name>sa</name><argument_list>(<argument><expr><name>N</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt><macro><name>fr</name><argument_list>(<argument>i</argument>,<argument>N</argument>)</argument_list></macro><block>{<expr_stmt><expr><name><name>sa</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt><expr_stmt><expr><name><name>rank</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>S</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>}</block><expr_stmt><expr><name><name>sa</name><index>[<expr><name>N</name></expr>]</index></name><operator>=</operator><name>N</name></expr>;</expr_stmt><expr_stmt><expr><name><name>rank</name><index>[<expr><name>N</name></expr>]</index></name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt><decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt><decl_stmt><decl><type><name>auto</name></type> <name>cmp</name><init>=<expr><lambda><capture>[<argument><modifier>&amp;</modifier></argument>]</capture><parameter_list>(<parameter><decl><type><name>int</name><modifier>&amp;</modifier></type><name>a</name></decl></parameter>,<parameter><decl><type><name>int</name><modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list>-&gt;<type><name>bool</name></type><block>{<if>if<condition>(<expr><name><name>rank</name><index>[<expr><name>a</name></expr>]</index></name><operator>!=</operator><name><name>rank</name><index>[<expr><name>b</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><return>return <expr><name><name>rank</name><index>[<expr><name>a</name></expr>]</index></name><operator>&lt;</operator><name><name>rank</name><index>[<expr><name>b</name></expr>]</index></name></expr>;</return></block></then></if><return>return <expr><operator>(</operator><ternary><condition><expr><name>a</name><operator>+</operator><name>k</name><operator>&lt;=</operator><name>N</name></expr>?</condition><then><expr><name><name>rank</name><index>[<expr><name>a</name><operator>+</operator><name>k</name></expr>]</index></name></expr></then><else>:<expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary><operator>)</operator><operator>&lt;</operator><operator>(</operator><ternary><condition><expr><name>b</name><operator>+</operator><name>k</name><operator>&lt;=</operator><name>N</name></expr>?</condition><then><expr><name><name>rank</name><index>[<expr><name>b</name><operator>+</operator><name>k</name></expr>]</index></name></expr></then><else>:<expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</return>}</block></lambda></expr></init></decl>;</decl_stmt><for>for<control>(<init><expr><name>k</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>k</name><operator>&lt;=</operator><name>N</name></expr>;</condition><incr><expr><name>k</name><operator>*=</operator><literal type="number">2</literal></expr></incr>)</control><block>{<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name>sa</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name><name>tmp</name><index>[<expr><name><name>sa</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt><macro><name>foor</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>N</argument>)</argument_list></macro><block>{<expr_stmt><expr><name><name>tmp</name><index>[<expr><name><name>sa</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>=</operator><name><name>tmp</name><index>[<expr><name><name>sa</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>+</operator><call><name>cmp</name><argument_list>(<argument><expr><name><name>sa</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>sa</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block><expr_stmt><expr><name>rank</name><operator>=</operator><name>tmp</name></expr>;</expr_stmt>}</block></for><return>return <expr><name>sa</name></expr>;</return>}</block></function><empty_stmt>;</empty_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>N</name></decl>;</decl_stmt><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>N</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>vpli</name></type> <name>v</name><init>=<expr><call><name>factor</name><argument_list>(<argument><expr><name>N</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if>if<condition>(<expr><call><name><name>v</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
		<if>if<condition>(<expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>second</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><name>N</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then><else>else<block>{
			<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
	}</block></then><else>else<block>{
		<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
