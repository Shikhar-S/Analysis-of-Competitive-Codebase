<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29763603_64398947.cpp"><comment type="block">/*
à¤¸à¤¤à¥à¤¯à¤¾à¤¨à¥à¤¨ à¤ªà¥à¤°à¤®à¤¦à¤¿à¤¤à¤µà¥à¤¯à¤®à¥  || 
*/</comment>
 
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
 
<typedef>typedef <type><name>long</name> <name>long</name> <name>int</name></type> <name>ll</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mx</name></cpp:macro> <cpp:value>1000005</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>s</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fast_as_levi</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(false) , cin.tie(NULL);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mxi</name></cpp:macro> <cpp:value>2005</cpp:value></cpp:define>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><name>fast_as_levi</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>t</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition>
    <block>{
    	<decl_stmt><decl><type><name>ll</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
    	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
    	<decl_stmt><decl><type><name>string</name></type> <name>str1</name></decl>,<decl><type ref="prev"/><name>str2</name></decl>;</decl_stmt>
    	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>str1</name><operator>&gt;&gt;</operator><name>str2</name></expr>;</expr_stmt>
    	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>ar</name></decl>;</decl_stmt>
     	<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>vpr</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ll</name></type> <name><name>ha</name><index>[<expr><name>mx</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ll</name></type> <name>fl</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    	<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    	<block>{
    		<if>if<condition>(<expr><name><name>str1</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name><name>str2</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
    		<block>{
    			<expr_stmt><expr><call><name><name>ar</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    			<expr_stmt><expr><name><name>ha</name><index>[<expr><name><name>str1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
    			<expr_stmt><expr><name><name>ha</name><index>[<expr><name><name>str2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
			}</block></then></if>
		}</block></for>
	    <decl_stmt><decl><type><name>ll</name></type> <name>m</name> <init>= <expr><call><name><name>ar</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">30</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{
			<if>if<condition>(<expr><name><name>ha</name><index>[<expr><name>i</name></expr>]</index></name><operator>%</operator><literal type="number">2</literal><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name>fl</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No\n"</literal></expr>;</expr_stmt>
				<continue>continue;</continue>
			}</block></then></if>
		}</block></for>
		<decl_stmt><decl><type><name>ll</name></type> <name><name>hash1</name><index>[<expr><name>mx</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><operator>!</operator><name>fl</name></expr>)</condition><then>
     	<block>{	
     		<decl_stmt><decl><type><name>ll</name></type> <name>flag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
     		<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>m</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
     		<block>{
     			<if>if<condition>(<expr><name><name>str1</name><index>[<expr><name><name>ar</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>==</operator> <name><name>str2</name><index>[<expr><name><name>ar</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>)</condition><then>
     			<block type="pseudo"><continue>continue;</continue></block></then></if>
     			<expr_stmt><expr><name>fl</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
     			<for>for<control>(<init><expr><name>j</name><operator>=</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>m</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
     			<block>{
     				<if>if<condition>(<expr><name><name>str2</name><index>[<expr><name><name>ar</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>==</operator> <name><name>str2</name><index>[<expr><name><name>ar</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name></expr>)</condition><then>
     				<block>{
     					<expr_stmt><expr><name>fl</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
     					<expr_stmt><expr><call><name><name>vpr</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><block>{<expr><name><name>ar</name><index>[<expr><name>i</name></expr>]</index></name></expr>,<expr><name><name>ar</name><index>[<expr><name>j</name></expr>]</index></name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     					<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>str1</name><index>[<expr><name><name>ar</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>,<argument><expr><name><name>str2</name><index>[<expr><name><name>ar</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     					<break>break;</break>
     				}</block></then></if>
     			}</block></for>
     			<if>if<condition>(<expr><operator>!</operator><name>fl</name></expr>)</condition><then>
     			<block type="pseudo"><for>for<control>(<init><expr><name>j</name> <operator>=</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>m</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
     			<block>{
     				<if>if<condition>(<expr><name><name>str2</name><index>[<expr><name><name>ar</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>==</operator> <name><name>str1</name><index>[<expr><name><name>ar</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name></expr>)</condition><then>
     				<block>{
     					<expr_stmt><expr><name>fl</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
     					<expr_stmt><expr><call><name><name>vpr</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><block>{<expr><name><name>ar</name><index>[<expr><name>j</name></expr>]</index></name></expr>,<expr><name><name>ar</name><index>[<expr><name>j</name></expr>]</index></name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     					<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>str1</name><index>[<expr><name><name>ar</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name></expr></argument>,<argument><expr><name><name>str2</name><index>[<expr><name><name>ar</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     					<expr_stmt><expr><call><name><name>vpr</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><block>{<expr><name><name>ar</name><index>[<expr><name>i</name></expr>]</index></name></expr>,<expr><name><name>ar</name><index>[<expr><name>j</name></expr>]</index></name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     					<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>str1</name><index>[<expr><name><name>ar</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>,<argument><expr><name><name>str2</name><index>[<expr><name><name>ar</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     					<break>break;</break>
     				}</block></then></if>
     			}</block></for></block></then></if>
     			<if>if<condition>(<expr><operator>!</operator><name>fl</name></expr>)</condition><then>
     			<block>{
     				<expr_stmt><expr><name>flag</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
     				<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator><literal type="string">"No\n"</literal></expr>;</expr_stmt>
     				<break>break;</break>
     			}</block></then></if>
     		}</block></for>
     		<if>if<condition>(<expr><operator>!</operator><name>flag</name></expr>)</condition><then>
     		<block>{
         		<decl_stmt><decl><type><name>ll</name></type> <name>z</name> <init>= <expr><call><name><name>vpr</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
         		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Yes\n"</literal></expr>;</expr_stmt>
     	    	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>z</name><operator>&lt;&lt;</operator><literal type="string">"\n"</literal></expr>;</expr_stmt>
     		    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>z</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
         		<block>{
     	    		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>++</operator><name><name>vpr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>f</name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><operator>++</operator><name><name>vpr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>s</name><operator>&lt;&lt;</operator><literal type="string">"\n"</literal></expr>;</expr_stmt>
     		    }</block></for>
     		}</block></then></if>
     	}</block></then></if>
	}</block></while>
}</block></function></unit>
