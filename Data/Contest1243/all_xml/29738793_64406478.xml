<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29738793_64406478.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<comment type="block">/*#include&lt;ext/pb_ds/assoc_container.hpp&gt;
#include&lt;ext/pb_ds/tree_policy.hpp&gt;
using namespace __gnu_pbds;
/*template &lt;typename T&gt;
using ordered_set = tree&lt;T, null_type, less&lt;T&gt;, rb_tree_tag, tree_order_statistics_node_update&gt;;
*/</comment><typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ull</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>pl</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>ll</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOCAL</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dbg</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout &lt;&lt; #x &lt;&lt; " is " &lt;&lt; x &lt;&lt; "\n"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gll</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%d",&amp;x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gll2</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%d%d",&amp;x,&amp;y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gll3</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%d%d%d",&amp;x,&amp;y,&amp;z)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gllarr</name><parameter_list>(<parameter><type><name>arr</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>f(i,n) gll(arr[i]);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)x.size())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>s</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>sort(x.begin(),x.end())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>v.begin(),v.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rs</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ s(v) ; r(v) ; }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>r</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{reverse(all(v));}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=0;i&lt;n;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fr</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=n-1;i&gt;=0;i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=a;i&lt;=b;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>repr</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=a;i&gt;=b;i--)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>mod</name> <init>= <expr><operator>(</operator><name>ll</name><operator>)</operator><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>inf</name> <init>= <expr><operator>(</operator><name>ll</name><operator>)</operator><literal type="number">1e16</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ld</name></type> <name>eps</name> <init>= <expr><literal type="number">1e-12</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>N</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><literal type="number">1e5</literal> <operator>+</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>LOGN</name> <init>= <expr><literal type="number">19</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ld</name></type> <name>PI</name> <init>= <expr><literal type="number">3.14159265358979323846</literal></expr></init></decl>;</decl_stmt>
<function><specifier>inline</specifier> <type><name>ll</name></type> <name>mul</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>m</name> <init>= <expr><name>mod</name></expr></init></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call>(<name>ll</name>)<argument_list>(<argument><expr><name>a</name> <operator>*</operator> <name>b</name></expr></argument>)</argument_list></call> <operator>%</operator> <name>m</name></expr>;</return>}</block></function>
<function><specifier>inline</specifier> <type><name>ll</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>m</name> <init>= <expr><name>mod</name></expr></init></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>a</name> <operator>+=</operator> <name>b</name></expr>;</expr_stmt> <if>if<condition>(<expr><name>a</name> <operator>&gt;=</operator> <name>m</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>a</name> <operator>-=</operator> <name>m</name></expr>;</expr_stmt></block></then></if> <if>if<condition>(<expr><name>a</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>a</name> <operator>+=</operator> <name>m</name></expr>;</expr_stmt></block></then></if> <return>return <expr><name>a</name></expr>;</return>}</block></function>
<function><specifier>inline</specifier> <type><name>ll</name></type> <name>power</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>m</name> <init>= <expr><name>mod</name></expr></init></decl></parameter>)</parameter_list> <block>{ <if>if<condition>(<expr><name>b</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if> <if>if<condition>(<expr><name>b</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><operator>(</operator><name>a</name> <operator>%</operator> <name>m</name><operator>)</operator></expr>;</return></block></then></if> <decl_stmt><decl><type><name>ll</name></type> <name>x</name> <init>= <expr><call><name>power</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>mul</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <if>if<condition>(<expr><name>b</name> <operator>%</operator> <literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>mul</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if> <return>return <expr><name>x</name></expr>;</return>}</block></function>

<function><type><name>int32_t</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>LOCAL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"C:\\Users\\Dishant\\Desktop\\Collection-DEV c++\\input.txt"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"C:\\Users\\Dishant\\Desktop\\Collection-DEV c++\\output.txt"</literal></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>s</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name><name>f</name><index>[<expr><literal type="number">26</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <macro><name>f</name><argument_list>(<argument>i</argument>, <argument>n</argument>)</argument_list></macro> <block>{
            <expr_stmt><expr><name><name>f</name><index>[<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="char">'a'</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>f</name><index>[<expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="char">'a'</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>    
        }</block>
        <decl_stmt><decl><type><name>bool</name></type> <name>ok</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
        <macro><name>f</name><argument_list>(<argument>i</argument>, <argument><literal type="number">26</literal></argument>)</argument_list></macro> <block>{
            <if>if<condition>(<expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>ok</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                <break>break;</break>
            }</block></then></if>
        }</block>
        <if>if<condition>(<expr><operator>!</operator><name>ok</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No\n"</literal></expr>;</expr_stmt>
            <continue>continue;</continue>
        }</block></then></if>
        <decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>s_set</name><index>[<expr><literal type="number">26</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>t_set</name><index>[<expr><literal type="number">26</literal></expr>]</index></name></decl>;</decl_stmt>
        <macro><name>f</name><argument_list>(<argument>i</argument>, <argument>n</argument>)</argument_list></macro> <block>{
            <expr_stmt><expr><name><name>s_set</name><index>[<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="char">'a'</literal></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>t_set</name><index>[<expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="char">'a'</literal></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt; <argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>ans</name></decl>;</decl_stmt>
        <macro><name>f</name><argument_list>(<argument>i</argument>, <argument>n</argument>)</argument_list></macro> <block>{
            <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>to</name> <init>= <expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="char">'a'</literal></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>s_set</name><index>[<expr><name>to</name></expr>]</index></name><operator>.</operator><call><name>erase</name><argument_list>(<argument><expr><name><name>s_set</name><index>[<expr><name>to</name></expr>]</index></name><operator>.</operator><call><name>find</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>t_set</name><index>[<expr><name>to</name></expr>]</index></name><operator>.</operator><call><name>erase</name><argument_list>(<argument><expr><name><name>t_set</name><index>[<expr><name>to</name></expr>]</index></name><operator>.</operator><call><name>find</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <continue>continue;</continue>
            }</block></then></if>
            <decl_stmt><decl><type><name>int</name></type> <name>to</name> <init>= <expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="char">'a'</literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>s_set</name><index>[<expr><name>to</name></expr>]</index></name><operator>.</operator><call><name>erase</name><argument_list>(<argument><expr><name><name>s_set</name><index>[<expr><name>to</name></expr>]</index></name><operator>.</operator><call><name>find</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if<condition>(<expr><operator>!</operator><name><name>s_set</name><index>[<expr><name>to</name></expr>]</index></name><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>prev_t</name> <init>= <expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="char">'a'</literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><operator>*</operator><name><name>s_set</name><index>[<expr><name>to</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>s_set</name><index>[<expr><name>to</name></expr>]</index></name><operator>.</operator><call><name>erase</name><argument_list>(<argument><expr><name><name>s_set</name><index>[<expr><name>to</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>t_set</name><index>[<expr><name>prev_t</name></expr>]</index></name><operator>.</operator><call><name>erase</name><argument_list>(<argument><expr><name><name>t_set</name><index>[<expr><name>prev_t</name></expr>]</index></name><operator>.</operator><call><name>find</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>s_set</name><index>[<expr><name>prev_t</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><block>{<expr><name>pos</name></expr>, <expr><name>i</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><operator>*</operator><name><name>t_set</name><index>[<expr><name>to</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>prev_s</name> <init>= <expr><name><name>s</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>-</operator> <literal type="char">'a'</literal></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>s_set</name><index>[<expr><name>prev_s</name></expr>]</index></name><operator>.</operator><call><name>erase</name><argument_list>(<argument><expr><name><name>s_set</name><index>[<expr><name>prev_s</name></expr>]</index></name><operator>.</operator><call><name>find</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>t_set</name><index>[<expr><name>to</name></expr>]</index></name><operator>.</operator><call><name>erase</name><argument_list>(<argument><expr><name><name>t_set</name><index>[<expr><name>to</name></expr>]</index></name><operator>.</operator><call><name>find</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>s_set</name><index>[<expr><name>to</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>t_set</name><index>[<expr><name>prev_s</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>t</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><block>{<expr><name>pos</name></expr>, <expr><name>pos</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                
                <decl_stmt><decl><type><name>int</name></type> <name>prev_t</name> <init>= <expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="char">'a'</literal></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>s_set</name><index>[<expr><name>to</name></expr>]</index></name><operator>.</operator><call><name>erase</name><argument_list>(<argument><expr><name><name>s_set</name><index>[<expr><name>to</name></expr>]</index></name><operator>.</operator><call><name>find</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>t_set</name><index>[<expr><name>prev_t</name></expr>]</index></name><operator>.</operator><call><name>erase</name><argument_list>(<argument><expr><name><name>t_set</name><index>[<expr><name>prev_t</name></expr>]</index></name><operator>.</operator><call><name>find</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>s_set</name><index>[<expr><name>prev_t</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><block>{<expr><name>pos</name></expr>, <expr><name>i</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>sz</name><argument_list>(<argument><expr><name>ans</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">2</literal> <operator>*</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Yes\n"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name><name>ans</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&lt;&lt;</operator><literal type="string">"\n"</literal></expr>;</expr_stmt>
        <for>for<control>(<init><expr><name>auto</name><operator>&amp;</operator><name>it</name><operator>:</operator> <name>ans</name></expr></init>)</control> <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>it</name><operator>.</operator><name>first</name></name> <operator>+</operator> <literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="char">' '</literal><operator>&lt;&lt;</operator><name><name>it</name><operator>.</operator><name>second</name></name> <operator>+</operator> <literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="string">"\n"</literal></expr>;</expr_stmt></block></for>
    }</block></while>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
