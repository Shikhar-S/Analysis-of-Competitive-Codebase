<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29763190_64394247.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<class>class <name>Solution</name>
<block>{<private type="default">
</private><public>public:

  <constructor><name>Solution</name><parameter_list>()</parameter_list>
  <block>{
    <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
  <block>{
    <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cin</name></name> <operator>&gt;&gt;</operator> <name>T</name></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>T</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{
      <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cin</name></name> <operator>&gt;&gt;</operator> <name>N</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cin</name></name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name></expr>;</expr_stmt>
      <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>unordered_map</name><argument_list type="generic">&lt; <argument><expr><name>char</name></expr></argument>, <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></name></type> <name>have</name></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><specifier>const</specifier> <name>char</name><modifier>&amp;</modifier></type> <name>c</name> <range>: <expr><name>a</name></expr></range></decl></init>)</control>
      <block>{
        <expr_stmt><expr><name><name>have</name><index>[<expr><name>c</name></expr>]</index></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      }</block></for>
      <for>for <control>(<init><decl><type><specifier>const</specifier> <name>char</name><modifier>&amp;</modifier></type> <name>c</name> <range>: <expr><name>b</name></expr></range></decl></init>)</control>
      <block>{
        <expr_stmt><expr><name><name>have</name><index>[<expr><name>c</name></expr>]</index></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      }</block></for>
      <decl_stmt><decl><type><name>bool</name></type> <name>valid</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>i</name> <range>: <expr><name>have</name></expr></range></decl></init>)</control>
      <block>{
        <if>if <condition>(<expr><name><name>i</name><operator>.</operator><name>second</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name>valid</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        }</block></then></if>
      }</block></for>
      <if>if <condition>(<expr><name>valid</name> <operator>==</operator> <literal type="boolean">false</literal></expr>)</condition><then>
      <block>{
        <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <literal type="string">"No"</literal> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt>
        <continue>continue;</continue>
      }</block></then></if>
      <expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  }</block></function>

</public><private>private:
  <decl_stmt><decl><type><name>int</name></type> <name>T</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>N</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>a</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>b</name></decl>;</decl_stmt>

  <function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list>
  <block>{
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>unordered_map</name><argument_list type="generic">&lt; <argument><expr><name>char</name></expr></argument>, <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></name></type> <name>haveA</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <name>char</name><modifier>&amp;</modifier></type> <name>c</name> <range>: <expr><name>a</name></expr></range></decl></init>)</control>
    <block>{
      <expr_stmt><expr><name><name>haveA</name><index>[<expr><name>c</name></expr>]</index></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    }</block></for>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>unordered_map</name><argument_list type="generic">&lt; <argument><expr><name>char</name></expr></argument>, <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></name></type> <name>haveB</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <name>char</name><modifier>&amp;</modifier></type> <name>c</name> <range>: <expr><name>b</name></expr></range></decl></init>)</control>
    <block>{
      <expr_stmt><expr><name><name>haveB</name><index>[<expr><name>c</name></expr>]</index></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    }</block></for>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt; <argument><expr><name><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></name></expr></argument> &gt;</argument_list></name></name></type> <name>ans</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">1</literal></expr></incr>)</control>
    <block>{
      <if>if <condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
      <block>{
        <continue>continue;</continue>
      }</block></then></if>
      <if>if <condition>(<expr><name><name>haveB</name><index>[<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>&lt;</operator> <name><name>haveA</name><index>[<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>)</condition><then>
      <block>{
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>&amp;</modifier></type> <name>c</name> <init>= <expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>N</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name> <operator>-=</operator> <literal type="number">1</literal></expr></incr>)</control>
        <block>{
          <if>if <condition>(<expr><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>c</name></expr>)</condition><then>
          <block>{
            <expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>, <expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>haveA</name><index>[<expr><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>haveA</name><index>[<expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>haveB</name><index>[<expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>haveB</name><index>[<expr><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>swap</name></name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
          }</block></then></if>
        }</block></for>
      }</block></then>
      <elseif>else <if>if <condition>(<expr><name><name>haveA</name><index>[<expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>&lt;</operator> <name><name>haveB</name><index>[<expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>)</condition><then>
      <block>{
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>&amp;</modifier></type> <name>c</name> <init>= <expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>N</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name> <operator>-=</operator> <literal type="number">1</literal></expr></incr>)</control>
        <block>{
          <if>if <condition>(<expr><name><name>b</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>c</name></expr>)</condition><then>
          <block>{
            <expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>, <expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>haveB</name><index>[<expr><name><name>b</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>haveB</name><index>[<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>haveA</name><index>[<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>haveA</name><index>[<expr><name><name>b</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>swap</name></name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
          }</block></then></if>
        }</block></for>
      }</block></then></if></elseif>
      <else>else
      <block>{
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>&amp;</modifier></type> <name>c</name> <init>= <expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>N</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name> <operator>-=</operator> <literal type="number">1</literal></expr></incr>)</control>
        <block>{
          <if>if <condition>(<expr><name><name>b</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>c</name></expr>)</condition><then>
          <block>{
            <expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name>N</name></expr>, <expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name>N</name></expr>, <expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>haveB</name><index>[<expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>haveB</name><index>[<expr><name><name>a</name><index>[<expr><name>N</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>haveA</name><index>[<expr><name><name>a</name><index>[<expr><name>N</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>haveA</name><index>[<expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>swap</name></name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>swap</name></name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>N</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
          }</block></then></if>
        }</block></for>
      }</block></else></if>
    }</block></for>
    <if>if <condition>(<expr><call><name>int</name><argument_list>(<argument><expr><call><name><name>ans</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>N</name> <operator>+</operator> <name>N</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <literal type="string">"No"</literal> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt>
    }</block></then>
    <else>else
    <block>{
      <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <literal type="string">"Yes"</literal> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <call><name>int</name><argument_list>(<argument><expr><call><name><name>ans</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt>
      <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>i</name> <range>: <expr><name>ans</name></expr></range></decl></init>)</control>
      <block>{
        <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <name><name>i</name><operator>.</operator><name>first</name></name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal> <operator>&lt;&lt;</operator> <name><name>i</name><operator>.</operator><name>second</name></name> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt>
      }</block></for>
    }</block></else></if>
  }</block></function>
</private>}</block>;</class>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
  <expr_stmt><expr><call><name>Solution</name><argument_list>()</argument_list></call><operator>.</operator><call><name>main</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
