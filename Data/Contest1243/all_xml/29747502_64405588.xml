<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29747502_64405588.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;unordered_set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;deque&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iterator&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lli</name></cpp:macro> <cpp:value>long long int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gcd</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>__gcd(a,b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__FastIO</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(false); cin.tie(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Pi</name></cpp:macro>  <cpp:value>3.141592653589793</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fo</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(lli i=0;i&lt;(n);i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FO</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>x</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(lli i=(x);i&lt;(n);i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FQ</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>x</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(lli i=(x);i&lt;=(n);i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pf</name></cpp:macro> <cpp:value>printf</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sf</name></cpp:macro> <cpp:value>scanf</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vi</name></cpp:macro> <cpp:value>vector&lt;lli&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pi</name></cpp:macro> <cpp:value>pair&lt;lli,lli&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nl</name></cpp:macro> <cpp:value>pf("\n")</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>lli</name></type> <name>mod</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator><literal type="number">7</literal></expr></init></decl>,<decl><type ref="prev"/><name>test</name></decl>;</decl_stmt> 
<function><type><name>lli</name></type> <name>max</name><parameter_list>(<parameter><decl><type><name>lli</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>lli</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<return>return <expr><ternary><condition><expr><name>a</name><operator>&gt;</operator><name>b</name></expr>?</condition><then><expr><name>a</name></expr></then><else>:<expr><name>b</name></expr></else></ternary></expr>;</return>}</block></function>
<function><type><name>lli</name></type> <name>min</name><parameter_list>(<parameter><decl><type><name>lli</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>lli</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<return>return <expr><ternary><condition><expr><name>a</name><operator>&gt;</operator><name>b</name></expr>?</condition><then><expr><name>b</name></expr></then><else>:<expr><name>a</name></expr></else></ternary></expr>;</return>}</block></function>

<decl_stmt><decl><type><name>vi</name></type> <name>fac</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>find_fac</name><parameter_list>(<parameter><decl><type><name>lli</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{ 
    <decl_stmt><decl><type><name>lli</name></type> <name>N</name> <init>= <expr><name>n</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>lli</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
    <while>while <condition>(<expr><operator>!</operator><operator>(</operator><name>n</name> <operator>%</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition> <block>{ 
        <expr_stmt><expr><name>n</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
        <expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt> 
    }</block></while> 
    <if>if <condition>(<expr><name>count</name></expr>)</condition><then>  <block type="pseudo"><expr_stmt><expr><call><name><name>fac</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    <decl_stmt><decl><type><name>lli</name></type> <name>maxi</name> <init>= <expr><call><name>sqrt</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>lli</name></type> <name>i</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>maxi</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{ 
        <expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
        <while>while <condition>(<expr><name>n</name> <operator>%</operator> <name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{ 
            <expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt> 
            <expr_stmt><expr><name>n</name> <operator>=</operator> <name>n</name> <operator>/</operator> <name>i</name></expr>;</expr_stmt> 
        }</block></while> 
        <if>if <condition>(<expr><name>count</name></expr>)</condition><then>  <block type="pseudo"><expr_stmt><expr><call><name><name>fac</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if> 
    }</block></for>
    <if>if<condition>(<expr><name>n</name><operator>&gt;</operator><literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>n</name><operator>!=</operator> <name>N</name></expr> )</condition><then><block>{<expr_stmt><expr><call><name><name>fac</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></then></if> 
}</block></function> 
<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list><block>{
<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>,<decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lli</name></type> <name>n</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>find_fac</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">// for(lli i : fac){</comment>
<comment type="line">//     cout&lt;&lt;i&lt;&lt;endl;</comment>
<comment type="line">// }</comment>
<if>if<condition>(<expr><call><name><name>fac</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>n</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt> <return>return;</return>
}</block></then></if>
<if>if<condition>(<expr><call><name><name>fac</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>fac</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt><return>return;</return>
}</block></then></if>
<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
}</block></function>


<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name>lli</name></type> <name>t</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 
    <while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition><block>{
    <expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
