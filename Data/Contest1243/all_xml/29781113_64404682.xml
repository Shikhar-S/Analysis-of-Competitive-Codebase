<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29781113_64404682.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<function><type><name>int</name></type> <name>hmt</name><parameter_list>()</parameter_list> <block>{<decl_stmt><decl><type><name>int</name></type> <name>x</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt><decl_stmt><decl><type><name>int</name></type> <name>c</name><init>=<expr><call><name>getchar</name><argument_list>()</argument_list></call></expr></init></decl>,<decl><type ref="prev"/><name>n</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt><for>for<control>(<init>;</init><condition><expr><operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</condition><incr><expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>n</name><operator>=</operator><operator>(</operator><name>c</name><operator>==</operator><literal type="char">'-'</literal><operator>)</operator></expr>;</expr_stmt></block></for><for>for<control>(<init>;</init><condition><expr><call><name>isdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</condition><incr><expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>x</name><operator>=</operator><name>x</name><operator>*</operator><literal type="number">10</literal><operator>+</operator><name>c</name><operator>-</operator><literal type="char">'0'</literal></expr>;</expr_stmt></block></for><return>return <expr><ternary><condition><expr><name>n</name></expr>?</condition><then><expr><operator>-</operator><name>x</name></expr></then><else>:<expr><name>x</name></expr></else></ternary></expr>;</return>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>in</name></cpp:macro> <cpp:value>hmt()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>forinc</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=a;i&lt;=b;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fordec</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=a;i&gt;=b;i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>getbit</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x&gt;&gt;i)&amp;1ll)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ii</name></cpp:macro> <cpp:value>pair&lt;int,int&gt;</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name><init>=<expr><literal type="number">1e6</literal><operator>+</operator><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>E</name><index>[<expr><name>maxn</name><operator>+</operator><literal type="number">100</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>P</name><index>[<expr><name>maxn</name><operator>+</operator><literal type="number">100</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name>cnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>X</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>Y</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>poww</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>b</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init>;</init><condition><expr><name>i</name></expr>;</condition><incr><expr><name>i</name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name>a</name><operator>=</operator><name>a</name><operator>*</operator><name>a</name></expr></incr>)</control> <block type="pseudo"><if>if<condition>(<expr><name>i</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>b</name><operator>=</operator><name>b</name><operator>*</operator><name>a</name></expr>;</expr_stmt></block></then></if></block></for>
    <return>return <expr><name>b</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>snt</name><parameter_list>()</parameter_list>
<block>{
    <macro><name>forinc</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>maxn</argument>)</argument_list></macro> <expr_stmt><expr><name><name>E</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt>
    <macro><name>forinc</name><argument_list>(<argument>i</argument>,<argument><literal type="number">2</literal></argument>,<argument>maxn</argument>)</argument_list></macro> <if>if<condition>(<expr><name><name>E</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name>i</name></expr>)</condition><then>
    <block>{
        <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">2</literal><operator>*</operator><name>i</name></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>maxn</name></expr>;</condition><incr><expr><name>j</name><operator>+=</operator><name>i</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>E</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></for>
    }</block></then></if>
    <macro><name>forinc</name><argument_list>(<argument>i</argument>,<argument><literal type="number">2</literal></argument>,<argument>maxn</argument>)</argument_list></macro> <if>if<condition>(<expr><name><name>E</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name>i</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>P</name><index>[<expr><operator>++</operator><name>cnt</name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></then></if>
}</block></function>
<function><type><name>void</name></type> <name>hame</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><name>k</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>n</name><operator>&gt;</operator><literal type="number">1000000</literal></expr>)</condition>
    <block>{
        <while>while<condition>(<expr><name><name>P</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;=</operator><name>n</name><operator>/</operator><name><name>P</name><index>[<expr><name>i</name></expr>]</index></name><operator>&amp;&amp;</operator><name>n</name><operator>%</operator><name><name>P</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><literal type="number">0</literal></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block></while>
        <if>if<condition>(<expr><name><name>P</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;</operator><name>n</name><operator>/</operator><name><name>P</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>a</name><operator>=</operator><name>n</name></expr>;</expr_stmt></block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><name>a</name><operator>=</operator><name><name>P</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></else></if>
        <expr_stmt><expr><name><name>X</name><index>[<expr><operator>++</operator><name>k</name></expr>]</index></name><operator>=</operator><name>a</name></expr>;</expr_stmt><expr_stmt><expr><name><name>Y</name><index>[<expr><name>k</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
        <while>while<condition>(<expr><name>n</name><operator>%</operator><name>a</name><operator>==</operator><literal type="number">0</literal></expr>)</condition> <block type="pseudo"><expr_stmt><expr><operator>++</operator><name><name>Y</name><index>[<expr><name>k</name></expr>]</index></name></expr><operator>,</operator><expr><name>n</name><operator>/=</operator><name>a</name></expr>;</expr_stmt></block></while>
    }</block></while>
    <while>while<condition>(<expr><name>n</name><operator>&gt;</operator><literal type="number">1</literal></expr>)</condition>
    <block>{
        <expr_stmt><expr><name>a</name><operator>=</operator><name><name>E</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>X</name><index>[<expr><operator>++</operator><name>k</name></expr>]</index></name><operator>=</operator><name>a</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>Y</name><index>[<expr><name>k</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
        <while>while<condition>(<expr><name>n</name><operator>%</operator><name>a</name><operator>==</operator><literal type="number">0</literal></expr>)</condition> <block type="pseudo"><expr_stmt><expr><operator>++</operator><name><name>Y</name><index>[<expr><name>k</name></expr>]</index></name></expr><operator>,</operator><expr><name>n</name><operator>/=</operator><name>a</name></expr>;</expr_stmt></block></while>
    }</block></while>
}</block></function>
<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>s</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>s</name><operator>&lt;</operator><literal type="number">24</literal></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt></block></while>
}</block></function>
<function><name>main</name><parameter_list>()</parameter_list>
<block>{
    <comment type="line">//freopen("test.inp","r",stdin);</comment>
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>hame</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <comment type="line">// return 0;</comment>
    <macro><name>forinc</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>k</argument>)</argument_list></macro>
    <block>{
        <if>if<condition>(<expr><call><name>poww</name><argument_list>(<argument><expr><name><name>X</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>Y</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>&lt;=</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
        <decl_stmt><decl><type><name>int</name></type> <name>tm</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <macro><name>forinc</name><argument_list>(<argument>j</argument>,<argument><literal type="number">1</literal></argument>,<argument>Y[i]</argument>)</argument_list></macro> <if>if<condition>(<expr><call><name>poww</name><argument_list>(<argument><expr><name><name>X</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call><operator>&lt;=</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>tm</name><operator>=</operator><name>j</name></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name>ret</name><operator>=</operator><name>ret</name><operator>*</operator><call><name>poww</name><argument_list>(<argument><expr><name><name>X</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>Y</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ret</name></expr>;</expr_stmt>
}</block></function>
</unit>
