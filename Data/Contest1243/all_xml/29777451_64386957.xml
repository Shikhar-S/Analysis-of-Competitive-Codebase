<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29777451_64386957.cpp"><comment type="line">//#include&lt;bits/stdc++.h&gt;</comment>
<comment type="line">//</comment>
<comment type="line">//using namespace std;</comment>
<comment type="line">//const int maxn = 1000 + 10;</comment>
<comment type="line">//int a[maxn];</comment>
<comment type="line">//int n;</comment>
<comment type="line">//</comment>
<comment type="line">//bool check(int pos){</comment>
<comment type="line">//    for(int i = 1; i &lt;= n - pos + 1; i++) if(a[i] &gt;= pos) return true;</comment>
<comment type="line">//    return false;</comment>
<comment type="line">//}</comment>
<comment type="line">//</comment>
<comment type="line">//int main(){</comment>
<comment type="line">//    int T;</comment>
<comment type="line">//    cin&gt;&gt;T;</comment>
<comment type="line">//    while(T--){</comment>
<comment type="line">//        cin&gt;&gt;n;</comment>
<comment type="line">//        for(int i = 1; i &lt;= n; i++) cin&gt;&gt;a[i];</comment>
<comment type="line">//        sort(a + 1, a + 1 + n);</comment>
<comment type="line">//        int l = 1, r = n;</comment>
<comment type="line">//        int ans;</comment>
<comment type="line">//        if(a[1] == a[n]){</comment>
<comment type="line">//            cout&lt;&lt;a[1]&lt;&lt;endl;</comment>
<comment type="line">//            continue;</comment>
<comment type="line">//        }</comment>
<comment type="line">//        while(l &lt; r){</comment>
<comment type="line">//            int mid = (l + r) &gt;&gt; 1;</comment>
<comment type="line">//            if(check(mid)) ans = mid, l = mid + 1;</comment>
<comment type="line">//            else r = mid;</comment>
<comment type="line">//        }</comment>
<comment type="line">//        cout&lt;&lt;ans&lt;&lt;endl;</comment>
<comment type="line">//    }</comment>
<comment type="line">//    return 0;</comment>
<comment type="line">//}</comment>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">1e5</literal><operator>+</operator><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>esp</name> <init>= <expr><literal type="number">1e-6</literal></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sdghbfdajkdladsfhdsijkfhgdskjsfhdkjsh</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>string</name></type> <name>a</name></decl> ,<decl><type ref="prev"/><name>b</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name>q</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl> ;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>sdsjhbfgdskjjfgbsdkjfbdskjbf</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>sdnfkjdshnfikjgsdhuifygdjfndskjfdhsbnfikjdhsif</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl> ;</decl_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>a</name><operator>&gt;&gt;</operator><name>b</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>asdhfnksdjhfiufdsyfhiusdhnfidsj</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>a</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
            <decl_stmt><decl><type><name>int</name></type> <name>dafjlsdkhjfdslkjfsdifjdpskjfgoihj</name>  <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block>{<expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></then></if>
            <decl_stmt><decl><type><name>int</name></type> <name>adhnfkjdshfnkdsjfhnbksdjfdslkf</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        }</block></for>
        <if>if<condition>(<expr><call><name><name>q</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{<decl_stmt><decl><type><name>int</name></type> <name>dfjdslkfjsdoihcvzxkfjsdoh</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Yes"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt><continue>continue;</continue>}</block></then></if>
        <if>if<condition>(<expr><call><name><name>q</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>!=</operator><literal type="number">4</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No"</literal> <operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></then>
        <else>else<block>{
            <if>if<condition>(<expr><name><name>q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><name><name>q</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&amp;&amp;</operator><name><name>q</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>==</operator><name><name>q</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Yes"</literal> <operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></then>
            <else>else <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No"</literal> <operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></else></if>
        }</block></else></if>
    }</block></while>
}</block></function>

</unit>
