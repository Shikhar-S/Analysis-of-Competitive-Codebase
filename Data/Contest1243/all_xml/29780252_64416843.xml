<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29780252_64416843.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>j</name></type></parameter>, <parameter><type><name>k</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = j; i &lt;= k; i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROF</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>j</name></type></parameter>, <parameter><type><name>k</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = j; i &gt;= k; i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PB</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEM</name><parameter_list>(<parameter><type><name>n</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset((n), val, sizeof(n))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INF</name></cpp:macro> <cpp:value>1000000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MX</name></cpp:macro> <cpp:value>300010</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pi</name></cpp:macro> <cpp:value>2.0*acos(0.0)</cpp:value></cpp:define>

<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>PII</name>;</typedef>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>adjl</name><index>[<expr><literal type="number">100010</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>taken</name></decl>, <decl><type ref="prev"/><name>not_taken</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>deque</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>dq</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>  <block>{
<comment type="line">//    freopen("in.txt", "r", stdin);</comment>
<comment type="line">//    freopen("output0.txt", "w", stdout);</comment>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name></expr>;</expr_stmt>
    <macro><name>FOR</name><argument_list>(<argument>i</argument>, <argument><literal type="number">1</literal></argument>, <argument>m</argument>)</argument_list></macro>   <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>u</name> <operator>&gt;&gt;</operator> <name>v</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>adjl</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>PB</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>adjl</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>PB</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>
    <macro><name>FOR</name><argument_list>(<argument>i</argument>, <argument><literal type="number">1</literal></argument>, <argument>n</argument>)</argument_list></macro>   <block>{
        <expr_stmt><expr><name><name>adjl</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>PB</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>adjl</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>PB</name><argument_list>(<argument><expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>adjl</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>adjl</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>not_taken</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>

    <decl_stmt><decl><type><name>int</name></type> <name>tt</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <macro><name>FOR</name><argument_list>(<argument>i</argument>, <argument><literal type="number">1</literal></argument>, <argument>n</argument>)</argument_list></macro>   <block>{
        <if>if<condition>(<expr><name><name>adjl</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>!=</operator> <operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><then>    <block>{
<comment type="line">//            if(not_taken.find(i) == not_taken.end())    {</comment>
<comment type="line">//                continue;</comment>
<comment type="line">//            }</comment>
            <expr_stmt><expr><name>tt</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
            <break>break;</break>
        }</block></then></if>
    }</block>

    <expr_stmt><expr><call><name><name>dq</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>tt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>not_taken</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>tt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">//    cout &lt;&lt; "tt : " &lt;&lt; tt &lt;&lt; "\n";</comment>

    <decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <while>while<condition>(<expr><operator>!</operator><call><name><name>not_taken</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>u</name> <init>= <expr><call><name><name>dq</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>dq</name><operator>.</operator><name>pop_front</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<comment type="line">//        cout &lt;&lt; u &lt;&lt; " : ";</comment>

        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>adjl</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>   <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><name><name>adjl</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>pv</name> <init>= <expr><name><name>adjl</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<comment type="line">//            cout &lt;&lt; "(" &lt;&lt; pv &lt;&lt; "," &lt;&lt; v &lt;&lt; ") ";</comment>
            <if>if<condition>(<expr><name>pv</name> <operator>==</operator> <name>v</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><then>    <block>{
                <continue>continue;</continue>
            }</block></then></if>
            <while>while<condition>(<expr><operator>!</operator><call><name><name>not_taken</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <decl_stmt><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><call><name><name>not_taken</name><operator>.</operator><name>upper_bound</name></name><argument_list>(<argument><expr><name>pv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if<condition>(<expr><name>it</name> <operator>==</operator> <call><name><name>not_taken</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then>    <block>{
                    <break>break;</break>
                }</block></then></if>
                <decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><operator>(</operator><operator>*</operator><name>it</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<comment type="line">//                cout &lt;&lt; val &lt;&lt; " ";</comment>
                <if>if<condition>(<expr><name>val</name> <operator>&gt;=</operator> <name>v</name></expr>)</condition><then>    <block>{
                    <break>break;</break>
                }</block></then></if>

                <expr_stmt><expr><call><name><name>dq</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>not_taken</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></while>
        }</block></for>
<comment type="line">//        cout &lt;&lt; "\n";</comment>
        <if>if<condition>(<expr><call><name><name>dq</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>    <block>{
            <if>if<condition>(<expr><call><name><name>not_taken</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>    <block>{
                <continue>continue;</continue>
            }</block></then></if>
            <decl_stmt><decl><type><name>int</name></type> <name>yo</name> <init>= <expr><operator>(</operator><operator>*</operator><operator>(</operator><call><name><name>not_taken</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>dq</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>yo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>not_taken</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>yo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>
        }</block></then></if>
    }</block></while>

    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>cnt</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
