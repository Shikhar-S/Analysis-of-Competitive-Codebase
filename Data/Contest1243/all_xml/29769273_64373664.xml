<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29769273_64373664.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;malloc.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro>				<cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>double</name></cpp:macro>			<cpp:value>long double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> 				<cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> 			<cpp:value>'\n'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro>				<cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name></cpp:macro>				<cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro>				<cpp:value>(int)1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro>              <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lb</name></cpp:macro>				<cpp:value>lower_bound</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ub</name></cpp:macro>				<cpp:value>upper_bound</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ios</name></cpp:macro> 			<cpp:value>ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inf</name></cpp:macro>				<cpp:value>1e9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mem</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>		<cpp:value>for(int i=0;i&lt;(int)(sizeof(a)/sizeof(a[0]));i++) a[i] = x;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>trace</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro>		<cpp:value>cout&lt;&lt;(#a)&lt;&lt;" --&gt; "&lt;&lt;a&lt;&lt;endl</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>trace2</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>		<cpp:value>{trace(a);trace(b);}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>trace3</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>{trace(a);trace(b);trace(c);}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>trace4</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{trace(a);trace(b);trace(c);trace(d);}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_PI</name></cpp:macro>           	<cpp:value>3.14159265358979323846</cpp:value></cpp:define>


<comment type="line">//int pow(int n, int p){</comment>
<comment type="line">//	int s = 1;</comment>
<comment type="line">//	while(p&gt;0){</comment>
<comment type="line">//		if(p%2)</comment>
<comment type="line">//			s*=n;</comment>
<comment type="line">//		p/=2;</comment>
<comment type="line">//		n*=n;</comment>
<comment type="line">//	}</comment>
<comment type="line">//	return s;</comment>
<comment type="line">//}</comment>
<comment type="line">//</comment>
<comment type="line">//void buildsparse(int row){</comment>
<comment type="line">//	for(int i=0;i&lt;c;i++)</comment>
<comment type="line">//		min_sparse[i][0] = max_sparse[i][0] = i;</comment>
<comment type="line">//	for(int j=1;j&lt;=log2(c);j++){</comment>
<comment type="line">//		for(int i=0;i+pow(2,j)-1&lt;c;i++){</comment>
<comment type="line">//			if(a[row][min_sparse[i][j-1]]&lt;a[row][min_sparse[i+pow(2,j-1)][j-1]])</comment>
<comment type="line">//				min_sparse[i][j] = min_sparse[i][j-1];</comment>
<comment type="line">//			else</comment>
<comment type="line">//				min_sparse[i][j] = min_sparse[i+pow(2,j-1)][j-1];</comment>
<comment type="line">//		}</comment>
<comment type="line">//	}</comment>
<comment type="line">//	for(int j=1;j&lt;=log2(c);j++){</comment>
<comment type="line">//		for(int i=0;i+pow(2,j)-1&lt;c;i++){</comment>
<comment type="line">//			if(a[row][max_sparse[i][j-1]]&gt;a[row][max_sparse[i+pow(2,j-1)][j-1]])</comment>
<comment type="line">//				max_sparse[i][j] = max_sparse[i][j-1];</comment>
<comment type="line">//			else</comment>
<comment type="line">//				max_sparse[i][j] = max_sparse[i+pow(2,j-1)][j-1];</comment>
<comment type="line">//		}</comment>
<comment type="line">//	}</comment>
<comment type="line">//}</comment>
<comment type="line">//</comment>
<comment type="line">//int min_query(int row, int lo, int hi){</comment>
<comment type="line">//	int l = hi-lo+1;</comment>
<comment type="line">//	int k = log2(l);</comment>
<comment type="line">//	return min(a[row][min_sparse[lo][k]], a[row][min_sparse[lo+l-pow(2,k)][k]]);</comment>
<comment type="line">//}</comment>
<comment type="line">//</comment>
<comment type="line">//int max_query(int row, int lo, int hi){</comment>
<comment type="line">//	int l = hi-lo+1;</comment>
<comment type="line">//	int k = log2(l);</comment>
<comment type="line">//	return max(a[row][max_sparse[lo][k]], a[row][max_sparse[lo+l-pow(2,k)][k]]);</comment>
<comment type="line">//}</comment>

<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>


<function><type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr><name>n</name></expr>]</index></name></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
	<decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1000</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">1</literal></expr>;</condition><incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
			<if>if<condition>(<expr><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name><operator>&gt;=</operator><name>i</name></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
		}</block></for>
		<if>if<condition>(<expr><name>cnt</name> <operator>&gt;=</operator> <name>i</name></expr>)</condition><then><block>{
			<expr_stmt><expr><name>ans</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
			<break>break;</break>
		}</block></then></if>
	}</block></for>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><name>ios</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>t</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<comment type="line">//		cout&lt;&lt;"Case #"&lt;&lt;i&lt;&lt;": ", run();</comment>
	<block type="pseudo"><expr_stmt><expr><call><name>run</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></for>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>




</unit>
