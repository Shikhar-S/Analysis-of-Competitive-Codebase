<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29729738_64374822.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>num</name><index>[<expr><literal type="number">1005</literal></expr>]</index></name></decl> ;</decl_stmt>

<function><type><name>bool</name></type> <name>check</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
    <block>{
        <if>if <condition>(<expr><name><name>num</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <name>x</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><operator>++</operator><name>cnt</name></expr> ;</expr_stmt></block></then></if>
    }</block></for>
    <if>if <condition>(<expr><name>cnt</name> <operator>&gt;=</operator> <name>x</name></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr> ;</return></block></then></if>
    <return>return <expr><literal type="boolean">false</literal></expr> ;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name> <parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>T</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>scanf</name> <argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument> ,<argument><expr><operator>&amp;</operator><name>T</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <while>while <condition>(<expr><name>T</name><operator>--</operator></expr>)</condition>
    <block>{
        <expr_stmt><expr><call><name>scanf</name> <argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument> , <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
        <block>{
            <expr_stmt><expr><call><name>scanf</name> <argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument> , <argument><expr><operator>&amp;</operator><name><name>num</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        }</block></for>
        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> , <decl><type ref="prev"/><name>r</name> <init>= <expr><literal type="number">1000</literal></expr></init></decl> ;</decl_stmt>
        <while>while <condition>(<expr><name>l</name> <operator>&lt;=</operator> <name>r</name></expr>)</condition>
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>mid</name> <init>= <expr><operator>(</operator><name>l</name> <operator>+</operator> <name>r</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
            <if>if <condition>(<expr><call><name>check</name> <argument_list>(<argument><expr><name>mid</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>res</name> <operator>=</operator> <name>mid</name></expr> ;</expr_stmt>
                <expr_stmt><expr><name>l</name> <operator>=</operator> <name>mid</name> <operator>+</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
            }</block></then>
            <else>else
            <block>{
                <expr_stmt><expr><name>r</name> <operator>=</operator> <name>mid</name> <operator>-</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
            }</block></else></if>
        }</block></while>
        <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument> , <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    }</block></while>
}</block></function>
</unit>
