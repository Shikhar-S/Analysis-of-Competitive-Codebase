<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29780211_64401777.cpp"><comment type="block">/*
ãããâ« â« â«
ããããã½
ããï¼ï¼¿ã ï¼
ãï¼ï¼¿ããã ï¼
ï¼ï¼¿ï¼¿ï¼¿ï¼¿ï¼¿ï¼¿ ï¼
ãã½(Â´ï½¥Ïï½¥)ï¾ã
ãã |ã /
ãã UU
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<using>using <name>P</name> <init>= <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MOD</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>INF</name> <init>= <expr><literal type="number">1LL</literal> <operator>&lt;&lt;</operator> <literal type="number">60</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>inf</name> <init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">30</literal></expr></init></decl>;</decl_stmt>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name>bool</name></type> <name>chmax</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{ <if>if <condition>(<expr><name>a</name><operator>&lt;</operator><name>b</name></expr>)</condition><then> <block>{ <expr_stmt><expr><name>a</name><operator>=</operator><name>b</name></expr>;</expr_stmt> <return>return <expr><literal type="number">1</literal></expr>;</return> }</block></then></if> <return>return <expr><literal type="number">0</literal></expr>;</return> }</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name>bool</name></type> <name>chmin</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{ <if>if <condition>(<expr><name>b</name><operator>&lt;</operator><name>a</name></expr>)</condition><then> <block>{ <expr_stmt><expr><name>a</name><operator>=</operator><name>b</name></expr>;</expr_stmt> <return>return <expr><literal type="number">1</literal></expr>;</return> }</block></then></if> <return>return <expr><literal type="number">0</literal></expr>;</return> }</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REP</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int i = 0; i &lt; (n); i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>s</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int i = s; i &lt; (n); i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALL</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(obj).begin(), (obj).end()</cpp:value></cpp:define> <comment type="line">//ã³ã³ãããããªãã¨ä½¿ããªã!!</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cerr &lt;&lt; #x &lt;&lt; ": " &lt;&lt; x &lt;&lt; "\n";</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type> <name>os</name></decl></parameter>, <parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>V</name></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>N</name> <init>= <expr><call><name><name>V</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <macro><name>REP</name><argument_list>(<argument>i</argument>,<argument>N</argument>)</argument_list></macro><block>{
        <expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <name><name>V</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>i</name><operator>!=</operator><name>N</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt></block></then></if>
    }</block>
    <expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
    <return>return <expr><name>os</name></expr>;</return>
}</block></function>
<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type> <name>os</name></decl></parameter>, <parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>,<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier><modifier>&amp;</modifier></type><name>P</name></decl></parameter>)</parameter_list><block>{
    <expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <name><name>P</name><operator>.</operator><name>first</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <name><name>P</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt>
    <return>return <expr><name>os</name></expr>;</return>
}</block></function>
<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type> <name>os</name></decl></parameter>, <parameter><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>S</name></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name>auto</name></type> <name>it</name><init>=<expr><call><name><name>S</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>it</name><operator>!=</operator><call><name><name>S</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{
        <expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <operator>*</operator><name>it</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>it</name><operator>++</operator></expr>;</expr_stmt>
    }</block></while>
    <expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
    <return>return <expr><name>os</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>N</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>N</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>,<decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>s</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>alpha</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <macro><name>REP</name><argument_list>(<argument>i</argument>,<argument>N</argument>)</argument_list></macro><block>{
        <expr_stmt><expr><name><name>alpha</name><index>[<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>alpha</name><index>[<expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
    }</block>
    <macro><name>REP</name><argument_list>(<argument>i</argument>,<argument><literal type="number">26</literal></argument>)</argument_list></macro><block>{
        <if>if<condition>(<expr><name><name>alpha</name><index>[<expr><name>i</name></expr>]</index></name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then><block>{<comment type="line">//å¥æ°</comment>
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No\n"</literal></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>
    }</block>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Yes\n"</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>ans</name></decl>;</decl_stmt>
    <macro><name>REP</name><argument_list>(<argument>i</argument>,<argument>N</argument>)</argument_list></macro><block>{
        <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

        <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>N</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
            <if>if<condition>(<expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name><name>t</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then><block>{
                <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>t</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            }</block></then></if>
            <if>if<condition>(<expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then><block>{
                <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>t</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>t</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            }</block></then></if>
        }</block></for>
    }</block>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name><name>ans</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    <macro><name>REP</name><argument_list>(<argument>i</argument>,<argument>ans.size()</argument>)</argument_list></macro><block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    }</block>

}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>N</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>N</name></expr>;</expr_stmt>
    <macro><name>REP</name><argument_list>(<argument>q</argument>,<argument>N</argument>)</argument_list></macro><block>{
        <expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block>

}</block></function></unit>
