<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29771959_64398503.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>local</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"debug.hpp"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SZ</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)s.size())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALL</name><parameter_list>(<parameter><type><name>vec</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vec.begin(), vec.end()</cpp:value></cpp:define>
 
<using>using <name>ll</name> <init>= <type><name>long</name> <name>long</name></type></init>;</using>
<using><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> using <name>V</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>, <parameter><type><name>class</name></type> <name>U</name></parameter>&gt;</parameter_list></template> using <name>P</name> <init>= <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name>U</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
 
<namespace>namespace <name>IOTech</name> <block>{
  <function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>_R</name><parameter_list>(<parameter><decl><type><name>T</name><modifier>&amp;</modifier></type> <name>x</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>x</name></expr>;</expr_stmt> }</block></function>
  <function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>, <parameter><type><name>class</name></type> <name>U</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>_R</name><parameter_list>(<parameter><decl><type><name><name>P</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name>U</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>x</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name>_R</name><argument_list>(<argument><expr><name><name>x</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>_R</name><argument_list>(<argument><expr><name><name>x</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>_R</name><parameter_list>(<parameter><decl><type><name><name>V</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>v</name></decl></parameter>)</parameter_list> <block>{ <for>for <control>(<init><decl><type><name>T</name><modifier>&amp;</modifier></type> <name>x</name> <range>: <expr><name>v</name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><call><name>_R</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for> }</block></function>
  <function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>_W</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T</name><modifier>&amp;</modifier></type> <name>x</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>x</name></expr>;</expr_stmt> }</block></function>
  <function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>, <parameter><type><name>class</name></type> <name>U</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>_W</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>P</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name>U</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>x</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name>_W</name><argument_list>(<argument><expr><name><name>x</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>_W</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>_W</name><argument_list>(<argument><expr><name><name>x</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>_W</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>V</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>x</name></decl></parameter>)</parameter_list> <block>{ <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>SZ</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{ <expr_stmt><expr><call><name>_W</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <if>if <condition>(<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <call><name>SZ</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>_W</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if> }</block></for> }</block></function>
  <function><type><name>void</name></type> <name>R</name><parameter_list>()</parameter_list> <block>{}</block></function>
  <function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>, <parameter><type><name>class</name><modifier>...</modifier></type> <name>U</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>R</name><parameter_list>(<parameter><decl><type><name>T</name><modifier>&amp;</modifier></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>U</name><modifier>&amp;</modifier><modifier>...</modifier></type> <name>tail</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name>_R</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>R</name><argument_list>(<argument><expr><name>tail</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><type><name>void</name></type> <name>W</name><parameter_list>()</parameter_list> <block>{}</block></function>
  <function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>, <parameter><type><name>class</name><modifier>...</modifier></type> <name>U</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>W</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T</name><modifier>&amp;</modifier></type> <name>val</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>U</name><modifier>&amp;</modifier><modifier>...</modifier></type> <name>tail</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name>_W</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>_W</name><argument_list>(<argument><expr><ternary><condition><expr><sizeof type="pack">sizeof...<argument_list>(<argument><expr><name>tail</name></expr></argument>)</argument_list></sizeof></expr> ?</condition><then> <expr><literal type="char">' '</literal></expr> </then><else>: <expr><literal type="char">'\n'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>W</name><argument_list>(<argument><expr><name>tail</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
}</block></namespace>
<using>using <name><name>IOTech</name><operator>::</operator><name>R</name></name>;</using> <using>using <name><name>IOTech</name><operator>::</operator><name>W</name></name>;</using>
 
<class><template>template <parameter_list>&lt;<parameter><type><name>int</name></type> <name>MOD</name></parameter>&gt;</parameter_list></template> class <name>Moduls</name> <block>{<private type="default">
  <decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>
  <using>using <name>ll</name> <init>= <type><name>int64_t</name></type></init>;</using>
  <using>using <name>ull</name> <init>= <type><name>uint64_t</name></type></init>;</using>
 
</private><public>public:
 
  <constructor><name>Moduls</name> <parameter_list>()</parameter_list> <block>{ <expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> }</block></constructor>
  <constructor><name>Moduls</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>val</name><argument_list>(<argument><expr><name>x</name> <operator>%</operator> <name>MOD</name></expr></argument>)</argument_list></call> </member_init_list><block>{ <if>if <condition>(<expr><name>val</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>val</name> <operator>+=</operator> <name>MOD</name></expr>;</expr_stmt></block></then></if> }</block></constructor>
  <constructor><name>Moduls</name> <parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>val</name><argument_list>(<argument><expr><name>x</name> <operator>%</operator> <name>MOD</name></expr></argument>)</argument_list></call> </member_init_list><block>{ <if>if <condition>(<expr><name>val</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>val</name> <operator>+=</operator> <name>MOD</name></expr>;</expr_stmt></block></then></if> }</block></constructor>
  <constructor><name>Moduls</name> <parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>x</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>val</name><argument_list>(<argument><expr><name>x</name> <operator>%</operator> <name>MOD</name></expr></argument>)</argument_list></call> </member_init_list><block>{ <if>if <condition>(<expr><name>val</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>val</name> <operator>+=</operator> <name>MOD</name></expr>;</expr_stmt></block></then></if> }</block></constructor>
  <constructor><name>Moduls</name> <parameter_list>(<parameter><decl><type><name>ull</name></type> <name>x</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>val</name><argument_list>(<argument><expr><name>x</name> <operator>%</operator> <name>MOD</name></expr></argument>)</argument_list></call> </member_init_list><block>{ <if>if <condition>(<expr><name>val</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>val</name> <operator>+=</operator> <name>MOD</name></expr>;</expr_stmt></block></then></if> }</block></constructor>
  <constructor><name>Moduls</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Moduls</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>val</name></name></expr>;</expr_stmt> }</block></constructor>
 
  <function type="operator"><specifier>explicit</specifier> <name>operator <name>int</name></name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
    <return>return <expr><name>val</name></expr>;</return>
  }</block></function>
  <function type="operator"><type><name>Moduls</name> <modifier>&amp;</modifier></type> <name>operator <name>+=</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Moduls</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>val</name></name> <operator>+=</operator> <name><name>b</name><operator>.</operator><name>val</name></name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>val</name></name> <operator>&gt;=</operator> <name>MOD</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>val</name></name> <operator>-=</operator> <name>MOD</name></expr>;</expr_stmt></block></then></if>
    <return>return <expr><operator>*</operator><name>this</name></expr>;</return>
  }</block></function>
  <function type="operator"><type><name>Moduls</name> <modifier>&amp;</modifier></type> <name>operator <name>-=</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Moduls</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>val</name></name> <operator>-=</operator> <name><name>b</name><operator>.</operator><name>val</name></name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>val</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>val</name></name> <operator>+=</operator> <name>MOD</name></expr>;</expr_stmt></block></then></if>
    <return>return <expr><operator>*</operator><name>this</name></expr>;</return>
  }</block></function>
  <function type="operator"><type><name>Moduls</name> <modifier>&amp;</modifier></type> <name>operator <name>*=</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Moduls</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <operator>(</operator><name>ll</name><operator>)</operator><name><name>this</name><operator>-&gt;</operator><name>val</name></name> <operator>*</operator> <name><name>b</name><operator>.</operator><name>val</name></name> <operator>%</operator> <name>MOD</name></expr>;</expr_stmt>
    <return>return <expr><operator>*</operator><name>this</name></expr>;</return>
  }</block></function>
  <function type="operator"><type><name>Moduls</name> <modifier>&amp;</modifier></type> <name>operator <name>/=</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Moduls</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><operator>*</operator><name>this</name> <operator>*=</operator> <call><name><name>b</name><operator>.</operator><name>inv</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>*</operator><name>this</name></expr>;</return>
  }</block></function>
  <function><type><name>Moduls</name></type> <name>pow</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>t</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{
    <decl_stmt><decl><type><name>Moduls</name></type> <name>ret</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>a</name> <init>= <expr><operator>*</operator><name>this</name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>t</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>a</name> <operator>=</operator> <call><name><name>a</name><operator>.</operator><name>inv</name></name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><name>t</name> <operator>=</operator> <operator>-</operator><name>t</name></expr>;</expr_stmt></block></then></if>
    <for>for <control>(<init>;</init> <condition><expr><name>t</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>t</name> <operator>/=</operator> <literal type="number">2</literal></expr><operator>,</operator> <expr><name>a</name> <operator>*=</operator> <name>a</name></expr></incr>)</control> <block>{
      <if>if <condition>(<expr><name>t</name> <operator>%</operator> <literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ret</name> <operator>*=</operator> <name>a</name></expr>;</expr_stmt></block></then></if>
    }</block></for>
    <return>return <expr><name>ret</name></expr>;</return>
  }</block></function>
  <function><type><name>Moduls</name></type> <name>inv</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><name>MOD</name></expr></init></decl>, <decl><type ref="prev"/><name>b</name> <init>= <expr><name><name>this</name><operator>-&gt;</operator><name>val</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>u</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>v</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>b</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><name>a</name> <operator>/</operator> <name>b</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>a</name> <operator>-=</operator> <name>t</name> <operator>*</operator> <name>b</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>u</name> <operator>-=</operator> <name>t</name> <operator>*</operator> <name>v</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><name>u</name></expr>;</return>
  }</block></function>
  <friend>friend <function type="operator"><type><name>Moduls</name></type> <name>operator <name>+</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Moduls</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Moduls</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>Moduls</name></type> <name>ret</name> <init>= <expr><name>a</name></expr></init></decl>;</decl_stmt>
    <name>ret</name> <expr_stmt><expr><operator>+=</operator> <name>b</name></expr>;</expr_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
  }</block></function></friend>
  <friend>friend <function type="operator"><type><name>Moduls</name></type> <name>operator <name>-</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Moduls</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Moduls</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>Moduls</name></type> <name>ret</name> <init>= <expr><name>a</name></expr></init></decl>;</decl_stmt>
    <name>ret</name> <expr_stmt><expr><operator>-=</operator> <name>b</name></expr>;</expr_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
  }</block></function></friend>
  <friend>friend <function type="operator"><type><name>Moduls</name></type> <name>operator <name>*</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Moduls</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Moduls</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>Moduls</name></type> <name>ret</name> <init>= <expr><name>a</name></expr></init></decl>;</decl_stmt>
    <name>ret</name> <expr_stmt><expr><operator>*=</operator> <name>b</name></expr>;</expr_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
  }</block></function></friend>
  <friend>friend <function type="operator"><type><name>Moduls</name></type> <name>operator <name>/</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Moduls</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Moduls</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>Moduls</name></type> <name>ret</name> <init>= <expr><name>a</name></expr></init></decl>;</decl_stmt>
    <name>ret</name> <expr_stmt><expr><operator>/=</operator> <name>b</name></expr>;</expr_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
  }</block></function></friend>
  <friend>friend <function type="operator"><type><name>bool</name></type> <name>operator <name>==</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Moduls</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Moduls</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><name><name>a</name><operator>.</operator><name>val</name></name> <operator>==</operator> <name><name>b</name><operator>.</operator><name>val</name></name></expr>;</return>
  }</block></function></friend>
  <friend>friend <function type="operator"><type><name>bool</name></type> <name>operator <name>!=</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Moduls</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Moduls</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><name><name>a</name><operator>.</operator><name>val</name></name> <operator>!=</operator> <name><name>b</name><operator>.</operator><name>val</name></name></expr>;</return>
  }</block></function></friend>
  <friend>friend <function type="operator"><type><name>istream</name> <modifier>&amp;</modifier></type> <name>operator <name>&gt;&gt;</name></name> <parameter_list>(<parameter><decl><type><name>istream</name> <modifier>&amp;</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>Moduls</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt> <name>in</name> <expr_stmt><expr><operator>&gt;&gt;</operator> <name>x</name></expr><operator>,</operator> <expr><name>a</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
    <return>return <expr><name>in</name></expr>;</return>
  }</block></function></friend>
  <friend>friend <function type="operator"><type><name>ostream</name> <modifier>&amp;</modifier></type> <name>operator <name>&lt;&lt;</name></name> <parameter_list>(<parameter><decl><type><name>ostream</name> <modifier>&amp;</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Moduls</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><name>out</name> <operator>&lt;&lt;</operator> <name><name>a</name><operator>.</operator><name>val</name></name></expr>;</return>
  }</block></function></friend>
</public>}</block>;</class>
 
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mod</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<using>using <name>Mint</name> <init>= <type><name><name>Moduls</name><argument_list type="generic">&lt;<argument><expr><name>mod</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
 
<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>uniq</name><parameter_list>(<parameter><decl><type><name><name>V</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>v</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name>ALL</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name><name>v</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name>unique</name><argument_list>(<argument><expr><call><name>ALL</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>v</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>int</name></type> <name>uniq</name><parameter_list>(<parameter><decl><type><name>T</name><modifier>*</modifier></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>v</name> <operator>+</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><call><name>unique</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>v</name> <operator>+</operator> <name>n</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>v</name></expr>;</return> }</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>, <parameter><type><name>class</name></type> <name>U</name></parameter>&gt;</parameter_list></template> <type><name>bool</name></type> <name>chkmin</name><parameter_list>(<parameter><decl><type><name>T</name><modifier>&amp;</modifier></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>U</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><ternary><condition><expr><operator>(</operator><name>y</name> <operator>&lt;</operator> <name>x</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>x</name> <operator>=</operator> <name>y</name><operator>,</operator> <literal type="boolean">true</literal><operator>)</operator></expr> </then><else>: <expr><literal type="boolean">false</literal></expr></else></ternary></expr>;</return> }</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>, <parameter><type><name>class</name></type> <name>U</name></parameter>&gt;</parameter_list></template> <type><name>bool</name></type> <name>chkmax</name><parameter_list>(<parameter><decl><type><name>T</name><modifier>&amp;</modifier></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>U</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><ternary><condition><expr><operator>(</operator><name>x</name> <operator>&lt;</operator> <name>y</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>x</name> <operator>=</operator> <name>y</name><operator>,</operator> <literal type="boolean">true</literal><operator>)</operator></expr> </then><else>: <expr><literal type="boolean">false</literal></expr></else></ternary></expr>;</return> }</block></function>
<function><type><name>Mint</name></type> <name>qpow</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Mint</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>t</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name><name>a</name><operator>.</operator><name>pow</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>

<function><type><name>void</name></type> <name>Solution</name><parameter_list>()</parameter_list> <block>{
  <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>;</decl_stmt> <expr_stmt><expr><call><name>R</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
    <return>return <expr><call><name>W</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></then></if>
  <decl_stmt><decl><type><name><name>V</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>factor</name></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name> <operator>/</operator> <name>i</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
    <if>if <condition>(<expr><name>n</name> <operator>%</operator> <name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>factor</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <while>while <condition>(<expr><name>n</name> <operator>%</operator> <name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>n</name> <operator>/=</operator> <name>i</name></expr>;</expr_stmt></block></while>
    }</block></then></if>
  }</block></for>
  <if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>factor</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

  <if>if <condition>(<expr><call><name>SZ</name><argument_list>(<argument><expr><name>factor</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>W</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then> <else>else <block>{
    <expr_stmt><expr><call><name>W</name><argument_list>(<argument><expr><call><name><name>factor</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></else></if>
}</block></function>
 
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
  <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>setf</name></name><argument_list>(<argument><expr><name><name>ios_base</name><operator>::</operator><name>fixed</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name><name>cout</name><operator>.</operator><name>precision</name></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>T</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <comment type="line">// R(T); // testcase</comment>
  <while>while <condition>(<expr><name>T</name><operator>--</operator></expr>)</condition> <block type="pseudo"><expr_stmt><expr><call><name>Solution</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
}</block></function>
</unit>
