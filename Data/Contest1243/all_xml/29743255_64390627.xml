<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29743255_64390627.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<comment type="line">//int cnt[26];</comment>
<comment type="line">//int main(void) {</comment>
<comment type="line">//	int k;</comment>
<comment type="line">//	cin &gt;&gt; k;</comment>
<comment type="line">//	while (k--) {</comment>
<comment type="line">//		int n;</comment>
<comment type="line">//		cin &gt;&gt; n;</comment>
<comment type="line">//		string s, t;</comment>
<comment type="line">//		cin &gt;&gt; s &gt;&gt; t;</comment>
<comment type="line">//		for (int i = 0; i &lt; n; i++) {</comment>
<comment type="line">//			cnt[s[i] - 'a']++;</comment>
<comment type="line">//			cnt[t[i] - 'a']++;</comment>
<comment type="line">//		}</comment>
<comment type="line">//		bool can = true;</comment>
<comment type="line">//		for (int i = 0; i &lt; n; i++) {</comment>
<comment type="line">//			if (cnt[i] % 2 != 0) {</comment>
<comment type="line">//				can = false;</comment>
<comment type="line">//				break;</comment>
<comment type="line">//			}</comment>
<comment type="line">//		}</comment>
<comment type="line">//		if (can) {</comment>
<comment type="line">//			cout &lt;&lt; "Yes" &lt;&lt; endl;</comment>
<comment type="line">//			vector&lt;pair&lt;int, int&gt;&gt; p;</comment>
<comment type="line">//			for (int i = 0; i &lt; n; i++) {</comment>
<comment type="line">//				if (s[i] != t[i]) {</comment>
<comment type="line">//					p.emplace_back(s[i] - 'a', t[i] - 'a');</comment>
<comment type="line">//				}</comment>
<comment type="line">//			}</comment>
<comment type="line">//</comment>
<comment type="line">//		} else {</comment>
<comment type="line">//			cout &lt;&lt; "No" &lt;&lt; endl;</comment>
<comment type="line">//		}</comment>
<comment type="line">//	}</comment>
<comment type="line">//	return 0;</comment>
<comment type="line">//}</comment>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name> <init>= <expr><literal type="number">1000000</literal> <operator>+</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>prime</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
	
	<for>for <control>(<init><decl><type><name>long</name> <name>long</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>*</operator> <name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<if>if <condition>(<expr><name>n</name> <operator>%</operator> <name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>prime</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
			<break>break;</break>
		}</block></then></if>
	}</block></for>
	<if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>prime</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt></block></then></if>
	<if>if <condition>(<expr><name>prime</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>n</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
	}</block></then> <else>else <block>{
		<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>primes</name></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>long</name> <name>long</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>maxn</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<if>if <condition>(<expr><name>n</name> <operator>%</operator> <name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name><name>primes</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<while>while <condition>(<expr><name>n</name> <operator>%</operator> <name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{
					<expr_stmt><expr><name>n</name> <operator>/=</operator> <name>i</name></expr>;</expr_stmt>
				}</block></while>
			}</block></then></if>
		}</block></for>
		<if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>primes</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
		
		<if>if <condition>(<expr><call><name><name>primes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>primes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
		}</block></then> <else>else <block>{
			<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
		}</block></else></if>
	}</block></else></if>


	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
