<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29730845_64403714.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INF</name></cpp:macro> <cpp:value>0x3f3f3f3f</cpp:value></cpp:define>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mx</name><init>=<expr><literal type="number">110</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>,<decl><type ref="prev"/><name>n</name></decl>,<decl><type ref="prev"/><name>tot</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>s1</name><index>[<expr><name>mx</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>s2</name><index>[<expr><name>mx</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>f</name><index>[<expr><name>mx</name></expr>]</index></name></decl>;</decl_stmt>
<struct>struct <name>node</name><block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
</public>}</block><decl><name><name>s</name><index>[<expr><name>mx</name></expr>]</index></name></decl>;</struct>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>k</name><operator>--</operator></expr>)</condition><block>{
		<expr_stmt><expr><name>tot</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>,<argument><expr><name>s1</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>,<argument><expr><name>s2</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{
		   <if>if<condition>(<expr><name><name>s1</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name><name>s2</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
		   <block>{
		      <expr_stmt><expr><name><name>f</name><index>[<expr><name><name>s1</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
		      <expr_stmt><expr><name><name>f</name><index>[<expr><name><name>s2</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
		   }</block></then></if>
	    }</block></for>
	    <decl_stmt><decl><type><name>int</name></type> <name>flag</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">26</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	    <block>{
	    	<if>if<condition>(<expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>%</operator><literal type="number">2</literal><operator>!=</operator><literal type="number">0</literal></expr>)</condition><then>
	    	<block>{
	    		<expr_stmt><expr><name>flag</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
	    		<break>break;</break>
	    	}</block></then></if>
	    }</block></for>
	    <if>if<condition>(<expr><name>flag</name></expr>)</condition><then>
	    <block>{
		  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"No\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <continue>continue;</continue>
	    }</block></then></if>
	    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Yes\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">26</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	    <block>{
	    	<if>if<condition>(<expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
	    	<block>{
	    	   <decl_stmt><decl><type><name>int</name></type> <name>ans1</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>ans2</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	    	   <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
	    	   <block>{
	    	   	   <if>if<condition>(<expr><name><name>s1</name><index>[<expr><name>j</name></expr>]</index></name><operator>!=</operator><name><name>s2</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then>
	    	   	   <block>{
	    	   	      <if>if<condition>(<expr><name><name>s1</name><index>[<expr><name>j</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal><operator>==</operator><name>i</name></expr>)</condition><then>
	    	   	      <block>{
	    	   	   	    <if>if<condition>(<expr><name>ans1</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
	    	   	   	     <block type="pseudo"><expr_stmt><expr><name>ans1</name><operator>=</operator><name>j</name></expr>;</expr_stmt></block></then>
	    	   	   	     <else>else
	    	   	   	  <block>{
	    	   	   	    <expr_stmt><expr><name><name>s</name><index>[<expr><operator>++</operator><name>tot</name></expr>]</index></name><operator>.</operator><name>a</name><operator>=</operator><name>j</name></expr>;</expr_stmt>
	    	   	   	    <expr_stmt><expr><name><name>s</name><index>[<expr><name>tot</name></expr>]</index></name><operator>.</operator><name>b</name><operator>=</operator><name>ans1</name></expr>;</expr_stmt>
	                    <expr_stmt><expr><name><name>s1</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><name><name>s2</name><index>[<expr><name>ans1</name></expr>]</index></name></expr>;</expr_stmt>
	                    <expr_stmt><expr><name><name>s2</name><index>[<expr><name>ans1</name></expr>]</index></name><operator>=</operator><name><name>s1</name><index>[<expr><name>ans1</name></expr>]</index></name></expr>;</expr_stmt>
	                    <if>if<condition>(<expr><name><name>s1</name><index>[<expr><name>j</name></expr>]</index></name><operator>==</operator><name><name>s2</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then>
	                    <block type="pseudo"><expr_stmt><expr><name><name>f</name><index>[<expr><name><name>s1</name><index>[<expr><name>j</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal></expr>]</index></name><operator>-=</operator><literal type="number">2</literal></expr>;</expr_stmt></block></then></if>
	    	   	   	    <expr_stmt><expr><name>ans1</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	    	   	   	    <expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>-=</operator><literal type="number">2</literal></expr>;</expr_stmt>
	    	   	      }</block></else></if>
	    	   	     }</block></then></if>
	    	   	     <if>if<condition>(<expr><name><name>s2</name><index>[<expr><name>j</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal><operator>==</operator><name>i</name></expr>)</condition><then>
	    	   	     <block>{
	    	   	   	  <if>if<condition>(<expr><name>ans2</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
	    	   	   	   <block type="pseudo"><expr_stmt><expr><name>ans2</name><operator>=</operator><name>j</name></expr>;</expr_stmt></block></then>
	    	   	   	   <else>else
	    	   	   	  <block>{
	    	   	   	   <expr_stmt><expr><name><name>s</name><index>[<expr><operator>++</operator><name>tot</name></expr>]</index></name><operator>.</operator><name>a</name><operator>=</operator><name>ans2</name></expr>;</expr_stmt>
	    	   	   	   <expr_stmt><expr><name><name>s</name><index>[<expr><name>tot</name></expr>]</index></name><operator>.</operator><name>b</name><operator>=</operator><name>j</name></expr>;</expr_stmt>
	    	   	   	   <expr_stmt><expr><name><name>s2</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><name><name>s1</name><index>[<expr><name>ans2</name></expr>]</index></name></expr>;</expr_stmt>
	    	   	   	   <expr_stmt><expr><name><name>s1</name><index>[<expr><name>ans2</name></expr>]</index></name><operator>=</operator><name><name>s2</name><index>[<expr><name>ans2</name></expr>]</index></name></expr>;</expr_stmt>
	    	   	   	   <if>if<condition>(<expr><name><name>s2</name><index>[<expr><name>j</name></expr>]</index></name><operator>==</operator><name><name>s1</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then>
	    	   	   	   <block type="pseudo"><expr_stmt><expr><name><name>f</name><index>[<expr><name><name>s2</name><index>[<expr><name>j</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal></expr>]</index></name><operator>-=</operator><literal type="number">2</literal></expr>;</expr_stmt></block></then></if>
	    	   	   	   <expr_stmt><expr><name>ans2</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	    	   	   	   <expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>-=</operator><literal type="number">2</literal></expr>;</expr_stmt>
	    	   	     }</block></else></if>
	    	   	   }</block></then></if>
	    	      }</block></then></if>
	    	   }</block></for>
	    	   <if>if<condition>(<expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><literal type="number">0</literal></expr>)</condition><then>
	    	   <block>{
	    	   	  <expr_stmt><expr><name><name>s</name><index>[<expr><operator>++</operator><name>tot</name></expr>]</index></name><operator>.</operator><name>a</name><operator>=</operator><name>ans1</name></expr>;</expr_stmt>
	    	   	  <expr_stmt><expr><name><name>s</name><index>[<expr><name>tot</name></expr>]</index></name><operator>.</operator><name>b</name><operator>=</operator><name>ans1</name></expr>;</expr_stmt>
	    	   	  <expr_stmt><expr><name><name>s</name><index>[<expr><operator>++</operator><name>tot</name></expr>]</index></name><operator>.</operator><name>a</name><operator>=</operator><name>ans2</name></expr>;</expr_stmt>
	    	   	  <expr_stmt><expr><name><name>s</name><index>[<expr><name>tot</name></expr>]</index></name><operator>.</operator><name>b</name><operator>=</operator><name>ans1</name></expr>;</expr_stmt>
	    	   	  <expr_stmt><expr><name><name>s1</name><index>[<expr><name>ans1</name></expr>]</index></name><operator>=</operator><name><name>s2</name><index>[<expr><name>ans1</name></expr>]</index></name></expr>;</expr_stmt>
	    	   	  <expr_stmt><expr><name><name>s2</name><index>[<expr><name>ans1</name></expr>]</index></name><operator>=</operator><name><name>s1</name><index>[<expr><name>ans2</name></expr>]</index></name></expr>;</expr_stmt>
	    	   	  <expr_stmt><expr><name><name>s1</name><index>[<expr><name>ans2</name></expr>]</index></name><operator>=</operator><name><name>s2</name><index>[<expr><name>ans2</name></expr>]</index></name></expr>;</expr_stmt>
	    	   	  <if>if<condition>(<expr><name><name>s1</name><index>[<expr><name>ans1</name></expr>]</index></name><operator>==</operator><name><name>s2</name><index>[<expr><name>ans1</name></expr>]</index></name></expr>)</condition><then>
	    	   	  <block type="pseudo"><expr_stmt><expr><name><name>f</name><index>[<expr><name><name>s1</name><index>[<expr><name>ans1</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal></expr>]</index></name><operator>-=</operator><literal type="number">2</literal></expr>;</expr_stmt></block></then></if>
	    	   	  <expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>-=</operator><literal type="number">2</literal></expr>;</expr_stmt>
	    	   }</block></then></if>
	        }</block></then></if>
	    }</block></for>
	    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>,<argument><expr><name>tot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>tot</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	    <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d\n"</literal></expr></argument>,<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>a</name></expr></argument>,<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	}</block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
	    
	    	
	    
	</unit>
