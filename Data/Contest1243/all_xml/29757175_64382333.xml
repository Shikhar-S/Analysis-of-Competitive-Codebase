<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29757175_64382333.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iterator&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;deque&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ull</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<function><type><name>ull</name></type> <name>min</name><parameter_list>(<parameter><decl><type><name>ull</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>ull</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{ <if>if <condition>(<expr><name>x</name><operator>&lt;</operator><name>y</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>x</name></expr>;</return></block></then></if> <return>return <expr><name>y</name></expr>;</return>}</block></function>
<function><type><name>ull</name></type> <name>max</name><parameter_list>(<parameter><decl><type><name>ull</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>ull</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{ <if>if <condition>(<expr><name>x</name><operator>&lt;</operator><name>y</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>y</name></expr>;</return></block></then></if> <return>return <expr><name>x</name></expr>;</return>}</block></function>
<function><type><name>ll</name></type> <name>min</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{ <if>if <condition>(<expr><name>x</name><operator>&lt;</operator><name>y</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>x</name></expr>;</return></block></then></if> <return>return <expr><name>y</name></expr>;</return>}</block></function>
<function><type><name>ll</name></type> <name>max</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{ <if>if <condition>(<expr><name>x</name><operator>&lt;</operator><name>y</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>y</name></expr>;</return></block></then></if> <return>return <expr><name>x</name></expr>;</return>}</block></function>
<function><type><name>double</name></type> <name>min</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{ <if>if <condition>(<expr><name>x</name><operator>&lt;</operator><name>y</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>x</name></expr>;</return></block></then></if> <return>return <expr><name>y</name></expr>;</return>}</block></function>
<function><type><name>double</name></type> <name>max</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{ <if>if <condition>(<expr><name>x</name><operator>&lt;</operator><name>y</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>y</name></expr>;</return></block></then></if> <return>return <expr><name>x</name></expr>;</return>}</block></function>
<function><type><name>ull</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>ull</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>ull</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{
    <if>if <condition>(<expr><operator>!</operator><name>x</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>y</name></expr>;</return></block></then></if>
    <if>if <condition>(<expr><operator>!</operator><name>y</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>x</name></expr>;</return></block></then></if>
    <if>if <condition>(<expr><name>x</name><operator>&gt;</operator><name>y</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    <return>return <expr><call><name>gcd</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name><operator>%</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>ull</name></type> <name>inv</name><parameter_list>(<parameter><decl><type><name>ull</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ull</name></type> <name>c</name></decl></parameter>)</parameter_list><block>{ <comment type="line">// a,c are coprime and a&lt;c</comment>
    <if>if <condition>(<expr><name>a</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    }</block></then></if>
    <return>return <expr><operator>(</operator><operator>(</operator><name>c</name><operator>-</operator><operator>(</operator><name>c</name><operator>/</operator><name>a</name><operator>)</operator><operator>)</operator><operator>*</operator><call><name>inv</name><argument_list>(<argument><expr><name>c</name><operator>%</operator><name>a</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator><operator>%</operator><name>c</name></expr>;</return>
}</block></function>


<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
 
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>k</name></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>k</name><operator>--</operator></expr>)</condition><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>s</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>, <argument><expr><name>char</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>mp</name></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
            <if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block>{
                <expr_stmt><expr><name><name>mp</name><index>[<expr><call><name>make_pair</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
        <decl_stmt><decl><type><name>int</name></type> <name>f</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>, <argument><expr><name>char</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></name></type> <name>it</name> <init>= <expr><call><name><name>mp</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>it</name> <operator>!=</operator> <call><name><name>mp</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>it</name><operator>++</operator></expr></incr>)</control><block>{
            <expr_stmt><expr><name>f</name> <operator>+=</operator> <operator>(</operator><name><name>it</name><operator>-&gt;</operator><name>second</name></name><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>cnt</name> <operator>+=</operator> <operator>(</operator><name><name>it</name><operator>-&gt;</operator><name>second</name></name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</expr_stmt>
        }</block></for>
        <if>if <condition>(<expr><operator>(</operator><name>f</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>cnt</name><operator>&gt;</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><then><block>{
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No"</literal></expr>;</expr_stmt>
        }</block></then>
        <else>else<block>{
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Yes"</literal></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"\n"</literal></expr>;</expr_stmt>
    }</block></while>

    
}</block></function>



</unit>
