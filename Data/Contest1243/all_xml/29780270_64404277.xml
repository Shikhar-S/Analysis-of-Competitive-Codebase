<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29780270_64404277.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>				<comment type="line">//Written by ThiDaiLoc</comment>
<using>using <namespace>namespace <name>std</name>;</namespace></using>				<comment type="line">//Team Three Wolves</comment>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ull</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>pll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>pll</name></expr></argument>&gt;</argument_list></name></type> <name>trp</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pll</name></expr></argument>&gt;</argument_list></name></type> <name>vp</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fu</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>for(ll i=a;i&lt;=b;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f1</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>     <cpp:value>for(ll i=1;i&lt;=n;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fs</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro>     <cpp:value>for(ll i=0;i+1&lt;=s.length();i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fd</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>for(ll i=b;i&gt;=a;i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fuv</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>for(ll i=0;i&lt;a.size();i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fdv</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>for(ll i=(ll)a.size()-1;i&gt;=0;i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ms</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>     <cpp:value>memset(a, x, sizeof a)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>prec</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>     <cpp:value>fixed&lt;&lt;setprecision(n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>uni</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro>      <cpp:value>(a).erase(unique(all(a)), (a).end())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro>       <cpp:value>push_back(i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>popb</name><parameter_list>()</parameter_list></cpp:macro>      <cpp:value>pop_back()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sc</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro>       <cpp:value>cin&gt;&gt;a</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sc2</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>cin&gt;&gt;a&gt;&gt;b</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pr</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro>       <cpp:value>cout&lt;&lt;a&lt;&lt;endl</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pr2</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>cout&lt;&lt;a&lt;&lt;" "&lt;&lt;b&lt;&lt;endl</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rpr</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro>      <cpp:value>return cout&lt;&lt;a&lt;&lt;endl,0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>prY</name></cpp:macro>         <cpp:value>cout&lt;&lt;"YES"&lt;&lt;endl</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>prN</name></cpp:macro>         <cpp:value>cout&lt;&lt;"NO"&lt;&lt;endl</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit</name><parameter_list>(<parameter><type><name>n</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>(((n)&gt;&gt;(i))&amp;1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lowb</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>n</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>lower_bound(a,a+n,x) -a</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lowb2</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>lower_bound(all(a),x) -a.begin()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>      <cpp:value>(x).begin(), (x).end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro>       <cpp:value>(ll)a.size()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>le</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro>       <cpp:value>(ll)s.length()</cpp:value></cpp:define>		
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ast</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>assert(x&gt;=a and x&lt;=b)</cpp:value></cpp:define>				
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>re</name></cpp:macro>          <cpp:value>return</cpp:value></cpp:define> 	
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>mp</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>     <cpp:value>make_pair(a,b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>mp3</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>make_pair(a,make_pair(b,c))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro>          <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro>          <cpp:value>first</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sse</name></cpp:macro>         <cpp:value>second.second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sfi</name></cpp:macro>         <cpp:value>second.first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>cerr &lt;&lt; #x &lt;&lt; " = " &lt;&lt; x &lt;&lt; endl</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INPUT</name></cpp:macro>       <cpp:value>freopen("locin.txt", "r", stdin)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OUTPUT</name></cpp:macro>      <cpp:value>freopen("locout.txt", "w", stdout)</cpp:value></cpp:define>
<function><specifier>inline</specifier> <type><name>ll</name></type> <name>isqrt</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>k</name></decl></parameter>)</parameter_list> <block>{<decl_stmt><decl><type><name>ll</name></type> <name>r</name> <init>= <expr><call><name>sqrt</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt> <while>while <condition>(<expr><name>r</name> <operator>*</operator> <name>r</name> <operator>&gt;</operator> <name>k</name></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>r</name><operator>--</operator></expr>;</expr_stmt></block></while> <return>return <expr><name>r</name></expr>;</return>}</block></function>
<function><specifier>inline</specifier> <type><name>ll</name></type> <name>icbrt</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>k</name></decl></parameter>)</parameter_list> <block>{<decl_stmt><decl><type><name>ll</name></type> <name>r</name> <init>= <expr><call><name>cbrt</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt> <while>while <condition>(<expr><name>r</name> <operator>*</operator> <name>r</name> <operator>*</operator> <name>r</name> <operator>&gt;</operator> <name>k</name></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>r</name><operator>--</operator></expr>;</expr_stmt></block></while> <return>return <expr><name>r</name></expr>;</return>}</block></function>
<function><specifier>inline</specifier> <type><name>ll</name></type> <name>mnz</name><parameter_list>(<parameter><decl><type><name>ll</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<return>return <expr><name>a</name><operator>=</operator><operator>(</operator><ternary><condition><expr><name>a</name><operator>&gt;</operator><name>b</name></expr>?</condition><then><expr><name>b</name></expr></then><else>:<expr><name>a</name></expr></else></ternary><operator>)</operator></expr>;</return>}</block></function>
<function><specifier>inline</specifier> <type><name>ll</name></type> <name>mxz</name><parameter_list>(<parameter><decl><type><name>ll</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<return>return <expr><name>a</name><operator>=</operator><operator>(</operator><ternary><condition><expr><name>a</name><operator>&lt;</operator><name>b</name></expr>?</condition><then><expr><name>b</name></expr></then><else>:<expr><name>a</name></expr></else></ternary><operator>)</operator></expr>;</return>}</block></function>
<function><specifier>inline</specifier> <type><name>string</name></type> <name>toString</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<decl_stmt><decl><type><name>stringstream</name></type> <name>ss</name></decl>;</decl_stmt> <expr_stmt><expr><name>ss</name> <operator>&lt;&lt;</operator> <name>n</name></expr>;</expr_stmt><return>return <expr><call><name><name>ss</name><operator>.</operator><name>str</name></name><argument_list>()</argument_list></call></expr>;</return>}</block></function>
<decl_stmt><decl><type><name>double</name> <specifier>const</specifier></type> <name>eps</name> <init>= <expr><literal type="number">1e-6</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name> <specifier>const</specifier></type> <name>Base</name><init>=<expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>,<decl><type ref="prev"/><name>oo</name><init>=<expr><literal type="number">1e17</literal></expr></init></decl>,<decl><type ref="prev"/><name>MAXN</name><init>=<expr><literal type="number">1e6</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>ll</name></type> <name><name>A</name><index>[<expr><name>MAXN</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>bitset</name><argument_list type="generic">&lt;<argument><expr><name>MAXN</name><operator>+</operator><literal type="number">5</literal></expr></argument>&gt;</argument_list></name></type> <name>bi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vi</name></type> <name><name>dske</name><index>[<expr><name>MAXN</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>ll</name></type> <name>Solves</name><parameter_list>()</parameter_list><block>{
	
	<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name>cnt</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>,<decl><type ref="prev"/><name>q</name></decl>,<decl><type ref="prev"/><name>c</name></decl>,<decl><type ref="prev"/><name>sum</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>v</name></decl>,<decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
	<comment type="line">// PROCESS IN HERE</comment>
	<expr_stmt><expr><call><name>sc2</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>m</name><operator>--</operator></expr>)</condition><block>{
		<expr_stmt><expr><call><name>sc2</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>dske</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>dske</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></while>
	<decl_stmt><decl><type><name>vi</name></type> <name>vecnot</name></decl>;</decl_stmt>
	<macro><name>f1</name><argument_list>(<argument>i</argument>,<argument>n</argument>)</argument_list></macro><expr_stmt><expr><name><name>dske</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><call><name>sort</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name><name>dske</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>fd</name><argument_list>(<argument>i</argument>,<argument>n</argument>,<argument><literal type="number">1</literal></argument>)</argument_list></macro><expr_stmt><expr><call><name><name>vecnot</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>queue</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>qu</name></decl>;</decl_stmt>
	<while>while<condition>(<expr><call><name>sz</name><argument_list>(<argument><expr><name>vecnot</name></expr></argument>)</argument_list></call></expr>)</condition><block>{
		<if>if<condition>(<expr><call><name>sz</name><argument_list>(<argument><expr><name>qu</name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
			<expr_stmt><expr><name>x</name><operator>=</operator><call><name><name>qu</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>qu</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt><comment type="line">//	debug("qu"); debug(x);</comment>
		}</block></then>
		<else>else<block>{	
			<expr_stmt><expr><name>x</name><operator>=</operator><call><name><name>vecnot</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">//	debug("not"); debug(x);</comment>
			<expr_stmt><expr><name><name>bi</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>vecnot</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>ans</name><operator>++</operator></expr>;</expr_stmt>
		}</block></else></if>
		<decl_stmt><decl><type><name><name>stack</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>st</name></decl>;</decl_stmt>	
		<macro><name>fuv</name><argument_list>(<argument>i</argument>,<argument>dske[x]</argument>)</argument_list></macro><block>{
			<while>while<condition>(<expr><call><name>sz</name><argument_list>(<argument><expr><name>vecnot</name></expr></argument>)</argument_list></call> <operator>and</operator> <name><name>bi</name><index>[<expr><call><name><name>vecnot</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr>)</condition><block type="pseudo"><expr_stmt><expr><call><name><name>vecnot</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
			<while>while<condition>(<expr><call><name>sz</name><argument_list>(<argument><expr><name>vecnot</name></expr></argument>)</argument_list></call> <operator>and</operator> <call><name><name>vecnot</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>&lt;</operator><name><name>dske</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block>{
				<expr_stmt><expr><name><name>bi</name><index>[<expr><call><name><name>vecnot</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>qu</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><call><name><name>vecnot</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line">//	debug("add"); debug(vecnot.back());</comment>
				<expr_stmt><expr><call><name><name>vecnot</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></while>
			<if>if<condition>(<expr><call><name>sz</name><argument_list>(<argument><expr><name>vecnot</name></expr></argument>)</argument_list></call> <operator>and</operator> <call><name><name>vecnot</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>==</operator><name><name>dske</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block>{
				<expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><call><name><name>vecnot</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>vecnot</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block>
		<while>while<condition>(<expr><call><name>sz</name><argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>)</condition><block>{
			<expr_stmt><expr><call><name><name>vecnot</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><call><name><name>st</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line">//	debug(st.top());</comment>
			<expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></while>
		<while>while<condition>(<expr><call><name>sz</name><argument_list>(<argument><expr><name>vecnot</name></expr></argument>)</argument_list></call> <operator>and</operator> <name><name>bi</name><index>[<expr><call><name><name>vecnot</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr>)</condition><block type="pseudo"><expr_stmt><expr><call><name><name>vecnot</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
	}</block></while>
	<expr_stmt><expr><call><name>pr</name><argument_list>(<argument><expr><name>ans</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<expr_stmt><expr><name>re</name> <literal type="number">0</literal></expr>;</expr_stmt>
	<comment type="line">// Hack it if you can :)</comment>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<comment type="line">//INPUT;</comment>
	<if>if<condition>(<expr><call><name>fopen</name><argument_list>(<argument><expr><literal type="string">"locin.txt"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>INPUT</name></expr>;</expr_stmt></block></then></if>
	<decl_stmt><decl><type><name>ll</name></type> <name>JUDGE_ONLINE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>test</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<comment type="line">//	sc(test);</comment>
	<macro><name>fu</name><argument_list>(<argument>T</argument>,<argument><literal type="number">1</literal></argument>,<argument>test</argument>)</argument_list></macro><block>{
<comment type="line">//		cout&lt;&lt;"Case #"&lt;&lt;T&lt;&lt;": ";</comment>
		<expr_stmt><expr><call><name>Solves</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block>
	<if>if <condition>(<expr><operator>!</operator><name>JUDGE_ONLINE</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"\nTime elapsed: "</literal> <operator>&lt;&lt;</operator> <literal type="number">1000</literal> <operator>*</operator> <call><name>clock</name><argument_list>()</argument_list></call> <operator>/</operator> <name>CLOCKS_PER_SEC</name> <operator>&lt;&lt;</operator> <literal type="string">"ms\n"</literal></expr>;</expr_stmt></block></then></if>  
		
}</block></function>
</unit>
