<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29773899_64375478.cpp">                    <cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
                    <using>using <namespace>namespace <name>std</name>;</namespace></using>
                     
                    <typedef>typedef <type><name>long</name> <name>long</name> <name>int</name></type> <name>ll</name>;</typedef>
                    <typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>vec</name>;</typedef>
                     
                    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long int</cpp:value></cpp:define>
                    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LM</name></cpp:macro> <cpp:value>LLONG_MAX</cpp:value></cpp:define>
                     
                    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
                    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ss</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
                     
                    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FAST</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);</cpp:value></cpp:define>
                    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>"\n"</cpp:value></cpp:define>
                    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
                     
                    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
                    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX</name></cpp:macro> <cpp:value>200005</cpp:value></cpp:define>
                    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name></cpp:macro> <cpp:value>size()</cpp:value></cpp:define>
                     
                    
                     
                    <function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>, <parameter><type><name>typename</name></type> <name>S</name></parameter>&gt;</parameter_list></template>
                    <type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name>S</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
                        <expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <name><name>x</name><operator>.</operator><name>first</name></name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal> <operator>&lt;&lt;</operator> <name><name>x</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt>
                        <return>return <expr><name>out</name></expr>;</return>
                    }</block></function>
                     
                    <function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
                    <type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
                        <for>for <control>(<init><decl><type><specifier>const</specifier> <name>T</name><modifier>&amp;</modifier></type> <name>a</name> <range>: <expr><name>x</name></expr></range></decl></init>)</control> <block>{
                            <expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <name>a</name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
                        }</block></for>
                        <return>return <expr><name>out</name></expr>;</return>
                    }</block></function>
                     
                    <function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
                    <type><name>istream</name><modifier>&amp;</modifier></type> <name>operator<name>&gt;&gt;</name></name><parameter_list>(<parameter><decl><type><name>istream</name><modifier>&amp;</modifier></type> <name>in</name></decl></parameter>, <parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
                        <for>for <control>(<init><decl><type><name>T</name><modifier>&amp;</modifier></type> <name>a</name> <range>: <expr><name>x</name></expr></range></decl></init>)</control> <block>{
                            <expr_stmt><expr><name>in</name> <operator>&gt;&gt;</operator> <name>a</name></expr>;</expr_stmt>
                        }</block></for>
                        <return>return <expr><name>in</name></expr>;</return>
                    }</block></function>
                     
                    <function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>, <parameter><type><name>typename</name></type> <name>S</name></parameter>&gt;</parameter_list></template>
                    <type><name>istream</name><modifier>&amp;</modifier></type> <name>operator<name>&gt;&gt;</name></name><parameter_list>(<parameter><decl><type><name>istream</name><modifier>&amp;</modifier></type> <name>in</name></decl></parameter>, <parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name>S</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
                        <expr_stmt><expr><name>in</name> <operator>&gt;&gt;</operator> <name><name>x</name><operator>.</operator><name>first</name></name> <operator>&gt;&gt;</operator> <name><name>x</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt>
                        <return>return <expr><name>in</name></expr>;</return>
                    }</block></function>
                    <function><type><name>bool</name></type> <name>prime</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>)</parameter_list>
                    <block>{
                    	<if>if<condition>(<expr><name>n</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then>
                    	<block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>
                    		<if>if<condition>(<expr><name>n</name><operator>==</operator><literal type="number">1</literal>  <operator>||</operator> <name>n</name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
                    	<block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
                    	<for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name><init>=<expr><literal type="number">3</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>*</operator><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>+=</operator><literal type="number">2</literal></expr></incr>)</control>
                    	<block>{
                    		<if>if<condition>(<expr><name>n</name><operator>%</operator><name>i</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
                    		<block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
                    	}</block></for>
                    	<return>return <expr><literal type="boolean">true</literal></expr>;</return>
                    }</block></function>
                    <function><type><name>ll</name></type> <name>power</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>)</parameter_list>
                    <block>{
                        <if>if<condition>(<expr><name>n</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><then>
                        <block>{
                            <return>return <expr><literal type="number">1</literal></expr>;</return>
                        }</block></then></if>
                        <if>if<condition>(<expr><name>n</name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
                        <block>{
                            <return>return <expr><call><name>power</name><argument_list>(<argument><expr><name>a</name><operator>*</operator><name>a</name></expr></argument>,<argument><expr><name>n</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return>
                            
                        }</block></then>
                        <else>else
                        <block type="pseudo"><return>return <expr><name>a</name><operator>*</operator><call><name>power</name><argument_list>(<argument><expr><name>a</name><operator>*</operator><name>a</name></expr></argument>,<argument><expr><name>n</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return></block></else></if>
                    }</block></function>
    <decl_stmt><decl><type><name>ll</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
  
    <function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list>
    <block>{
                   
        <expr_stmt><expr><name>FAST</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ll</name></type> <name>q</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>q</name></expr>;</expr_stmt>
        <while>while<condition>(<expr><name>q</name><operator>--</operator></expr>)</condition>
        <block>{
        	<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>;</decl_stmt>
        	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
        	<decl_stmt><decl><type><name>vec</name></type> <name>v</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>v</name></expr>;</expr_stmt>
        	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>v</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        	<decl_stmt><decl><type><name>ll</name></type> <name>cnt</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        	<for>for<control>(<init><expr><name>i</name><operator>=</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition><incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
        	<block>{
        		<if>if<condition>(<expr><name>cnt</name><operator>&lt;=</operator><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
        		<block>{
        			<expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>
        		}</block></then>
        		<else>else
        		<block type="pseudo"><break>break;</break></block></else></if>
        	}</block></for>
        	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>cnt</name><operator>-</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
        }</block></while>
        
    }</block></function></unit>
