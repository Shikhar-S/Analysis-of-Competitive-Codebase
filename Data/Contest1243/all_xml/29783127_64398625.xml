<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29783127_64398625.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>bool</name></type> <name>isPrime</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>N</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>p</name></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>N</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
    <for>for<control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>p</name> <operator>*</operator> <name>p</name> <operator>&lt;=</operator> <name>N</name></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control>
        <block type="pseudo"><if>if<condition>(<expr><name>N</name> <operator>%</operator> <name>p</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if></block></for>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
}</block></function>

<function><type><name>long</name> <name>long</name></type> <name>pDiv</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>N</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>p</name></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>p</name> <operator>*</operator> <name>p</name> <operator>&lt;=</operator> <name>N</name></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control>
        <block type="pseudo"><if>if<condition>(<expr><name>N</name> <operator>%</operator> <name>p</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><name>p</name></expr>;</return></block></then></if></block></for>
}</block></function>

<function><type><name>void</name></type> <name>Run</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>N</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>M</name></decl>, <decl><type ref="prev"/><name>rem</name></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>N</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <call><name>isPrime</name><argument_list>(<argument><expr><name>N</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>, <argument><expr><name>N</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    }</block></then></if>
    
    <expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>pDiv</name><argument_list>(<argument><expr><name>N</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>M</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>M</name> <operator>*</operator> <name>a</name> <operator>&lt;=</operator> <name>N</name></expr>)</condition>
        <block type="pseudo"><expr_stmt><expr><name>M</name> <operator>=</operator> <name>M</name> <operator>*</operator> <name>a</name></expr>;</expr_stmt></block></while>
    <if>if<condition>(<expr><name>M</name> <operator>==</operator> <name>N</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    }</block></then>
    <else>else
    <block>{
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"1\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    }</block></else></if>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>N</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>N</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Run</name><argument_list>(<argument><expr><name>N</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
