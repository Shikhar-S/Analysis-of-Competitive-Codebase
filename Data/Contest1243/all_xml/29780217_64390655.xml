<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29780217_64390655.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mylonglongint</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<function><type><name>void</name></type> <name>adfljeoif</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"alfiejfoefjweofjwf\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type> <name>afiejfolefkjiefe</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"foeifjeoijfoewjfiewfj\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type> <name>fvaewifjoejm</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"oiefmfoiefjew\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type> <name>pojefijefief</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"jfoeijfoefj\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>mylonglongint</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>mylonglongint</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>mylonglongint</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
	<while>while<condition>(<expr><name>a</name><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>b</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><block>{
		<if>if<condition>(<expr><name>a</name><operator>&gt;</operator><name>b</name></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>a</name><operator>%=</operator><name>b</name></expr>;</expr_stmt></block></then>
		<else>else
			<block type="pseudo"><expr_stmt><expr><name>b</name><operator>%=</operator><name>a</name></expr>;</expr_stmt></block></else></if>
	}</block></while>
	<return>return <expr><operator>(</operator><name>a</name><operator>+</operator><name>b</name><operator>)</operator></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>mylonglongint</name></type> <name>n</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>mylonglongint</name></type> <name>g</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>mylonglongint</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>flag</name><init>=<expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">2</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><operator>(</operator><call><name>sqrt</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<if>if<condition>(<expr><name>n</name><operator>%</operator><name>i</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name>g</name><operator>=</operator><call><name>gcd</name><argument_list>(<argument><expr><name>g</name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>g</name><operator>=</operator><call><name>gcd</name><argument_list>(<argument><expr><name>g</name></expr></argument>,<argument><expr><name>n</name><operator>/</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>flag</name><operator>=</operator><literal type="boolean">false</literal></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
	<if>if<condition>(<expr><name>flag</name></expr>)</condition><then>
		<block type="pseudo"><expr_stmt><expr><name>g</name><operator>=</operator><name>n</name></expr>;</expr_stmt></block></then></if>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>g</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>

}</block></function></unit>
