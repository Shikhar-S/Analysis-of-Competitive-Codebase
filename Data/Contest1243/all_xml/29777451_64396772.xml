<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29777451_64396772.cpp"><comment type="line">//#include&lt;bits/stdc++.h&gt;</comment>
<comment type="line">//</comment>
<comment type="line">//using namespace std;</comment>
<comment type="line">//const int maxn = 1000 + 10;</comment>
<comment type="line">//int a[maxn];</comment>
<comment type="line">//int n;</comment>
<comment type="line">//</comment>
<comment type="line">//bool check(int pos){</comment>
<comment type="line">//    for(int i = 1; i &lt;= n - pos + 1; i++) if(a[i] &gt;= pos) return true;</comment>
<comment type="line">//    return false;</comment>
<comment type="line">//}</comment>
<comment type="line">//</comment>
<comment type="line">//int main(){</comment>
<comment type="line">//    int T;</comment>
<comment type="line">//    cin&gt;&gt;T;</comment>
<comment type="line">//    while(T--){</comment>
<comment type="line">//        cin&gt;&gt;n;</comment>
<comment type="line">//        for(int i = 1; i &lt;= n; i++) cin&gt;&gt;a[i];</comment>
<comment type="line">//        sort(a + 1, a + 1 + n);</comment>
<comment type="line">//        int l = 1, r = n;</comment>
<comment type="line">//        int ans;</comment>
<comment type="line">//        if(a[1] == a[n]){</comment>
<comment type="line">//            cout&lt;&lt;a[1]&lt;&lt;endl;</comment>
<comment type="line">//            continue;</comment>
<comment type="line">//        }</comment>
<comment type="line">//        while(l &lt; r){</comment>
<comment type="line">//            int mid = (l + r) &gt;&gt; 1;</comment>
<comment type="line">//            if(check(mid)) ans = mid, l = mid + 1;</comment>
<comment type="line">//            else r = mid;</comment>
<comment type="line">//        }</comment>
<comment type="line">//        cout&lt;&lt;ans&lt;&lt;endl;</comment>
<comment type="line">//    }</comment>
<comment type="line">//    return 0;</comment>
<comment type="line">//}</comment>

 <comment type="block">/*cout&lt;&lt;"âââââââââââââââââââââââââ"&lt;&lt;endl;
    cout&lt;&lt;"ââââââââââââââââââââââââââ"&lt;&lt;endl;
    cout&lt;&lt;"ââââââââââââââââââââââââââ"&lt;&lt;endl;
    cout&lt;&lt;"ââââââââââââââââââââââââââ"&lt;&lt;endl;
    cout&lt;&lt;"ââââââââââââââââââââââââââ"&lt;&lt;endl;
    cout&lt;&lt;"ââââââââââââââââââââââââââ"&lt;&lt;endl;
    cout&lt;&lt;"âââââââââââââââââââââââââââmuch speed"&lt;&lt;endl;
    cout&lt;&lt;"âââââââââââââââââââââââââââ"&lt;&lt;endl;
    cout&lt;&lt;"ââââââââââââââââââââââââââââ"&lt;&lt;endl;
    cout&lt;&lt;"ââââââââââââââââââââââââââââ"&lt;&lt;endl;
    cout&lt;&lt;"ââââââââââââââââââââââââââââ Wow"&lt;&lt;endl;
    cout&lt;&lt;"âââââââââââââââââââââââââââââ"&lt;&lt;endl;
    cout&lt;&lt;"ââââââââââââââââââââââââââââ"&lt;&lt;endl;
    cout&lt;&lt;"ââââââââââââââââââââââââââââgood macro"&lt;&lt;endl;
    cout&lt;&lt;"âââââââââââââââââââââââââââ"&lt;&lt;endl;
    cout&lt;&lt;"âââââââââââââââââââââââââââ"&lt;&lt;endl;
    cout&lt;&lt;"ââââââââââââââââââââââââââ"&lt;&lt;endl;
    cout&lt;&lt;"ââââââââââââââââââââââââ"&lt;&lt;endl;
    cout&lt;&lt;"âââââââââââââââââââââ"&lt;&lt;endl;*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name> <init>= <expr><literal type="number">1000000</literal></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>prime</name><index>[<expr><name>maxn</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl> ;</decl_stmt>

<function><type><name>void</name></type> <name>getPrime</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>prime</name></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument> , <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>prime</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <for>for <control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>maxn</name></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
        <if>if <condition>(<expr><operator>!</operator><name><name>prime</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>prime</name><index>[<expr><operator>++</operator><name><name>prime</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>i</name></expr> ;</expr_stmt></block></then></if>
        <for>for <control>(<init><decl><type><name>ll</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name><name>prime</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>prime</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&lt;=</operator> <name>maxn</name> <operator>/</operator> <name>i</name></expr> ;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block>{
            <expr_stmt><expr><name><name>prime</name><index>[<expr><name><name>prime</name><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
            <if>if <condition>(<expr><name>i</name> <operator>%</operator> <name><name>prime</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><break>break ;</break></block></then></if>
        }</block></for>
    }</block></for>
}</block></function>

<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>ans</name><index>[<expr><literal type="number">100</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>cnt</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>asjhdfikjashfkdhjsdgfidshgbf</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<function><type><name>ll</name></type> <name>solve</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{
    <expr_stmt><expr><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>asdsjhfdksjhfdskjhfsdkjhfijdksfjkds</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>tmp</name> <init>= <expr><name>x</name></expr></init></decl> ;</decl_stmt>
    <for>for <control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name><name>prime</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;=</operator> <name>tmp</name> <operator>/</operator> <name><name>prime</name><index>[<expr><name>i</name></expr>]</index></name></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
        <expr_stmt><expr><name><name>ans</name><index>[<expr><name>cnt</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>asjdhasijdhdaskjhfghsdjhkfgdsijhf</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>tmp</name> <operator>%</operator> <name><name>prime</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name><name>ans</name><index>[<expr><name>cnt</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>prime</name><index>[<expr><name>i</name></expr>]</index></name></expr> ;</expr_stmt>
            <while>while <condition>(<expr><name>tmp</name> <operator>%</operator> <name><name>prime</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<expr_stmt><expr><name><name>ans</name><index>[<expr><name>cnt</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>++</operator></expr> ;</expr_stmt><expr_stmt><expr><name>tmp</name> <operator>/=</operator> <name><name>prime</name><index>[<expr><name>i</name></expr>]</index></name></expr> ;</expr_stmt>}</block></while>
            <expr_stmt><expr><name>cnt</name><operator>++</operator></expr> ;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><name>int</name></type> <name>sdjhfkjsdhfodskjjfodsuihf</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    }</block></for>
    <if>if <condition>(<expr><name>tmp</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><then><block>{<expr_stmt><expr><name><name>ans</name><index>[<expr><name>cnt</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>tmp</name></expr> ;</expr_stmt><expr_stmt><expr><name><name>ans</name><index>[<expr><name>cnt</name><operator>++</operator></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>}</block></then></if>
    <return>return <expr><name>cnt</name></expr> ;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name> <parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name>getPrime</name><argument_list>()</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>asdjhfdkjsdhfkjdshfiudj</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>tmp</name> <init>= <expr><call><name>solve</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <if>if <condition>(<expr><name>tmp</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>n</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></then>
    <elseif>else <if>if <condition>(<expr><name>tmp</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>ans</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></then></if></elseif>
    <else>else <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></else></if>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>


</unit>
