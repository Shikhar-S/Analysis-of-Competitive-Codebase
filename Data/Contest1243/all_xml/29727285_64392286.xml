<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29727285_64392286.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>S</name></parameter>, <parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>S</name></expr></argument>, <argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>p</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <literal type="string">"("</literal> <operator>&lt;&lt;</operator> <name><name>p</name><operator>.</operator><name>first</name></name> <operator>&lt;&lt;</operator> <literal type="string">","</literal> <operator>&lt;&lt;</operator> <name><name>p</name><operator>.</operator><name>second</name></name> <operator>&lt;&lt;</operator> <literal type="string">")"</literal></expr>;</expr_stmt>
    <return>return <expr><name>out</name></expr>;</return>
}</block></function>

<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
    <for>for <control>(<init><decl><type><name>auto</name></type> <name>a</name><range>: <expr><name>v</name></expr></range></decl></init>)</control>
        <block type="pseudo"><expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <name>a</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt></block></for>
    <return>return <expr><name>out</name></expr>;</return>
}</block></function>

<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>S</name></decl></parameter>)</parameter_list> <block>{
    <for>for <control>(<init><decl><type><name>auto</name></type> <name>a</name><range>: <expr><name>S</name></expr></range></decl></init>)</control>
        <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>a</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt></block></for>
    <return>return <expr><name>out</name></expr>;</return>
}</block></function>

<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>multiset</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>S</name></decl></parameter>)</parameter_list> <block>{
    <for>for <control>(<init><decl><type><name>auto</name></type> <name>a</name><range>: <expr><name>S</name></expr></range></decl></init>)</control>
        <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>a</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt></block></for>
    <return>return <expr><name>out</name></expr>;</return>
}</block></function>

<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>S</name></parameter>, <parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>S</name></expr></argument>, <argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>M</name></decl></parameter>)</parameter_list> <block>{
    <for>for <control>(<init><decl><type><name>auto</name></type> <name>m</name><range>: <expr><name>M</name></expr></range></decl></init>)</control>
        <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"("</literal> <operator>&lt;&lt;</operator> <name><name>m</name><operator>.</operator><name>first</name></name> <operator>&lt;&lt;</operator> <literal type="string">"-&gt;"</literal> <operator>&lt;&lt;</operator> <name><name>m</name><operator>.</operator><name>second</name></name> <operator>&lt;&lt;</operator> <literal type="string">") "</literal></expr>;</expr_stmt></block></for>
    <return>return <expr><name>out</name></expr>;</return>
}</block></function>

<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>S</name></parameter>, <parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>S</name></expr></argument>, <argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>operator<name>+</name></name><parameter_list>(<parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>S</name></expr></argument>, <argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>S</name></expr></argument>, <argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>make_pair</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>first</name></name> <operator>+</operator> <name><name>b</name><operator>.</operator><name>first</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>second</name></name> <operator>+</operator> <name><name>b</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>S</name></parameter>, <parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>S</name></expr></argument>, <argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>operator<name>-</name></name><parameter_list>(<parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>S</name></expr></argument>, <argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>S</name></expr></argument>, <argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>make_pair</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>first</name></name> <operator>-</operator> <name><name>b</name><operator>.</operator><name>first</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>second</name></name> <operator>-</operator> <name><name>b</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<struct>struct <name>PrimeFactory</name> <block>{<public type="default">
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>random_device</name></name></type> <name>rd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>prime</name></decl>;</decl_stmt>

    <constructor><name>PrimeFactory</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>A</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><if>if <condition>(<expr><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
                <block type="pseudo"><for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name> <operator>+</operator> <name>i</name></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <name>i</name></expr></incr>)</control>
                    <block type="pseudo"><expr_stmt><expr><name><name>A</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></for></block></then></if></block></for>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><if>if <condition>(<expr><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><call><name><name>prime</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></block></for>
        <comment type="line">// cout &lt;&lt; "prime: " &lt;&lt; prime &lt;&lt; endl;</comment>
    }</block></constructor>

    <function><type><name>long</name> <name>long</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>b</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><name>a</name></expr>;</return></block></then></if>
        <return>return <expr><call><name>gcd</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name> <operator>%</operator> <name>b</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>long</name> <name>long</name></type> <name>mul_mod</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>m</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>a</name> <operator>%=</operator> <name>m</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>b</name> <operator>%=</operator> <name>m</name></expr>;</expr_stmt>

        <while>while <condition>(<expr><name>b</name></expr>)</condition> <block>{
            <if>if <condition>(<expr><name>b</name> <operator>&amp;</operator> <literal type="number">1ll</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>ans</name> <operator>=</operator> <name>ans</name> <operator>+</operator> <name>a</name></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>ans</name> <operator>&gt;=</operator> <name>m</name></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>-=</operator> <name>m</name></expr>;</expr_stmt></block></then></if>
            }</block></then></if>
            <expr_stmt><expr><name>a</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>a</name> <operator>&gt;=</operator> <name>m</name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>a</name> <operator>-=</operator> <name>m</name></expr>;</expr_stmt></block></then></if>
            <expr_stmt><expr><name>b</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        }</block></while>

        <return>return <expr><name>ans</name></expr>;</return>
    }</block></function>

    <function><type><name>long</name> <name>long</name></type> <name>pow_mod</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>m</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>ans</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

        <while>while <condition>(<expr><name>n</name></expr>)</condition> <block>{
            <if>if <condition>(<expr><name>n</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>ans</name> <operator>=</operator> <call><name>mul_mod</name><argument_list>(<argument><expr><name>ans</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><name>n</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>mul_mod</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>

        <return>return <expr><name>ans</name></expr>;</return>
    }</block></function>

    <function><type><name>int</name></type> <name>fermat_prime_test</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>uniform_int_distribution</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></name></type> <name>dist</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>max</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">2</literal> <operator>||</operator> <name>n</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>

        <if>if <condition>(<expr><name>n</name> <operator>%</operator> <literal type="number">2</literal>  <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>

        <if>if <condition>(<expr><name>n</name> <operator>%</operator> <literal type="number">3</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>

        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
            <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>a</name> <init>= <expr><call><name>dist</name><argument_list>(<argument><expr><name>rd</name></expr></argument>)</argument_list></call> <operator>%</operator> <operator>(</operator><name>n</name> <operator>-</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>val</name> <init>= <expr><call><name>pow_mod</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>n</name> <operator>-</operator><literal type="number">1</literal></expr></argument> , <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>val</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><then>
                <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
        }</block></for>

        <return>return <expr><literal type="number">1</literal></expr>;</return>
    }</block></function>

    <function><type><name>long</name> <name>long</name></type> <name>pollard_rho</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>x</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>, <decl><type ref="prev"/><name>y</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>d</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

        <while>while <condition>(<expr><name>d</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{
            <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><call><name>mul_mod</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>c</name><operator>)</operator> <operator>%</operator> <name>n</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><call><name>mul_mod</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>c</name><operator>)</operator> <operator>%</operator> <name>n</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><call><name>mul_mod</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>c</name><operator>)</operator> <operator>%</operator> <name>n</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>gcd</name><argument_list>(<argument><expr><call><name>abs</name><argument_list>(<argument><expr><name>x</name> <operator>-</operator> <name>y</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>

        <return>return <expr><name>d</name></expr>;</return>
    }</block></function>

    <function><type><name>long</name> <name>long</name></type> <name>pollard_one_factor</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>d</name> <init>= <expr><name>n</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>c</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>d</name> <operator>==</operator> <name>n</name></expr>)</condition>
            <block type="pseudo"><expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>pollard_rho</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>c</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></while>
        <return>return <expr><name>d</name></expr>;</return>
    }</block></function>

    <function><type><name>void</name></type> <name>factor</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>M</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>M</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>prime</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name><name>prime</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;=</operator> <call><name>sqrt</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
            <while>while <condition>(<expr><name>n</name> <operator>%</operator> <name><name>prime</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{
                <expr_stmt><expr><name><name>M</name><index>[<expr><name><name>prime</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>n</name> <operator>/=</operator> <name><name>prime</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            }</block></while>
        }</block></for>
        <if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name><name>M</name><index>[<expr><name>n</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block></then></if>
    }</block></function>

    <function><type><name>void</name></type> <name>factor</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>F</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>F</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>prime</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name><name>prime</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;=</operator> <call><name>sqrt</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
            <while>while <condition>(<expr><name>n</name> <operator>%</operator> <name><name>prime</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{
                <expr_stmt><expr><call><name><name>F</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>prime</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>n</name> <operator>/=</operator> <name><name>prime</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            }</block></while>
        }</block></for>
        <if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>F</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></function>

    <decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>_M</name></decl>;</decl_stmt>
    <function><type><name>long</name> <name>long</name></type> <name>euler_totient</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>M</name> <init>= <expr><name>_M</name></expr></init></decl>;</decl_stmt> <comment type="line">// memoery reuse</comment>
        <expr_stmt><expr><call><name>factor</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>M</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>auto</name></type> <name>p</name><range>: <expr><name>M</name></expr></range></decl></init>)</control>
            <block type="pseudo"><expr_stmt><expr><name>n</name> <operator>=</operator> <name>n</name> <operator>/</operator> <name><name>p</name><operator>.</operator><name>first</name></name> <operator>*</operator> <operator>(</operator><name><name>p</name><operator>.</operator><name>first</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block></for>
        <return>return <expr><name>n</name></expr>;</return>
    }</block></function>

    <function><type><name>void</name></type> <name>pollard_factor</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>M</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></type> <name>F</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>factor</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>F</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><operator>!</operator><call><name>fermat_prime_test</name><argument_list>(<argument><expr><call><name><name>F</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>a</name> <init>= <expr><call><name><name>F</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>F</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>b</name> <init>= <expr><call><name>pollard_one_factor</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>F</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>F</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>a</name> <operator>/</operator> <name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><call><name><name>M</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>auto</name></type> <name>a</name><range>: <expr><name>F</name></expr></range></decl></init>)</control>
            <block type="pseudo"><expr_stmt><expr><name><name>M</name><index>[<expr><name>a</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block></for>
    }</block></function>
</public>}</block>;</struct>

<decl_stmt><decl><type><name>PrimeFactory</name></type> <name>factory</name><argument_list>(<argument><expr><literal type="number">1e6</literal> <operator>+</operator> <literal type="number">100</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></type> <name>F</name></decl>;</decl_stmt>
<function><type><name>long</name> <name>long</name></type> <name>solve</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
    <expr_stmt><expr><call><name><name>factory</name><operator>.</operator><name>factor</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>F</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>F</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>F</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>F</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name>unique</name><argument_list>(<argument><expr><call><name><name>F</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>F</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>F</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/*
    cout &lt;&lt; "n: " &lt;&lt; n &lt;&lt; endl;
    cout &lt;&lt; "F: " &lt;&lt; F &lt;&lt; endl;
    */</comment>
    <if>if <condition>(<expr><call><name><name>F</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><name><name>F</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return></block></then></if>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>ans</name> <init>= <expr><call><name>solve</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
