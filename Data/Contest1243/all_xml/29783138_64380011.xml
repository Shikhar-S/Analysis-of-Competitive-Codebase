<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29783138_64380011.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pfi</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>printf("%d",a);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pfl</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>printf("%lld",a);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pfin</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>printf("%d\n",a);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pfln</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>printf("%lld\n",a);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sfi</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%d",&amp;a);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sfl</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%lld",&amp;a);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=a;i&lt;b;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>M</name><init>=<expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name><init>=<expr><literal type="number">5e5</literal><operator>+</operator><literal type="number">5</literal></expr></init></decl>;</decl_stmt>


 
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
 <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 	
 	<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
 	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>

 	<while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition><block>{
 		<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
 		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>

 		<decl_stmt><decl><type><name>string</name></type> <name>s1</name></decl>,<decl><type ref="prev"/><name>s2</name></decl>;</decl_stmt>
 		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>s1</name><operator>&gt;&gt;</operator><name>s2</name></expr>;</expr_stmt>

 		<decl_stmt><decl><type><name>int</name></type> <name>cnt</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

 		<decl_stmt><decl><type><name>int</name></type> <name>fi</name></decl>,<decl><type ref="prev"/><name>si</name></decl>;</decl_stmt>

 		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
 			<if>if<condition>(<expr><name><name>s1</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name><name>s2</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block>{
 				<expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>
 				<if>if<condition>(<expr><name>cnt</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
 					<expr_stmt><expr><name>fi</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
 				}</block></then>
	 			<elseif>else <if>if<condition>(<expr><name>cnt</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then><block>{
	 				<expr_stmt><expr><name>si</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
	 			}</block></then></if></elseif>
	 			<else>else<block>{
	 				<break>break;</break>
	 			}</block></else></if>
 			}</block></then></if>
 			
 		}</block></for>
 		<comment type="line">//cout&lt;&lt;cnt&lt;&lt;endl;</comment>
 		<if>if<condition>(<expr><name>cnt</name><operator>!=</operator><literal type="number">2</literal></expr>)</condition><then><block>{
 			<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
 		}</block></then>
 		<else>else<block>{
 			<comment type="line">//cout&lt;&lt;fi&lt;&lt;" "&lt;&lt;si&lt;&lt;endl;</comment>
 			<if>if<condition>(<expr><name><name>s1</name><index>[<expr><name>fi</name></expr>]</index></name><operator>==</operator><name><name>s1</name><index>[<expr><name>si</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>s2</name><index>[<expr><name>fi</name></expr>]</index></name><operator>==</operator><name><name>s2</name><index>[<expr><name>si</name></expr>]</index></name></expr>)</condition><then><block>{
 				<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Yes"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
 			}</block></then>
 			<else>else<block>{
 				<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
 			}</block></else></if>
 		}</block></else></if>
 	}</block></while>
 	
 	
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
