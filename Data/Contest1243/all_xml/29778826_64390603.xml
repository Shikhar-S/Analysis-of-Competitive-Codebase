<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29778826_64390603.cpp"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_CRT_SECURE_NO_WARNINGS</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;int,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fill</name><parameter_list>(<parameter><type><name>space</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(space,a,sizeof(space))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>"\n"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>optimize</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>ios_base::sync_with_stdio(0);</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name>tt</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name>optimize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ONLINE_JUDGE</name></cpp:ifndef>
	<expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"input.txt"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>tt</name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>tt</name><operator>--</operator></expr>)</condition> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>s</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>pii</name></expr></argument>&gt;</argument_list></name></type> <name>moves</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>pos1</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>pos2</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>
				<if>if <condition>(<expr><name>cnt</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><then> <block>{
					<break>break;</break>
				}</block></then></if>
				<if>if <condition>(<expr><name>pos1</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
					<expr_stmt><expr><name>pos1</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
				}</block></then>
				<elseif>else <if>if <condition>(<expr><name>pos2</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
					<expr_stmt><expr><name>pos2</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
				}</block></then></if></elseif></if>
			}</block></then></if>
		}</block></for>
		<if>if <condition>(<expr><name>cnt</name> <operator>==</operator> <literal type="number">3</literal> <operator>||</operator> <name>cnt</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
		}</block></then>
		<else>else <block>{
			<if>if <condition>(<expr><name><name>s</name><index>[<expr><name>pos1</name></expr>]</index></name> <operator>==</operator> <name><name>s</name><index>[<expr><name>pos2</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>t</name><index>[<expr><name>pos1</name></expr>]</index></name> <operator>==</operator> <name><name>t</name><index>[<expr><name>pos2</name></expr>]</index></name></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Yes"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
			}</block></then>
			<else>else <block>{
				<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
			}</block></else></if>
		}</block></else></if>

		<comment type="line">//for (i = 0; i &lt; n; i++) {</comment>
		<comment type="line">//	if (s[i] == t[i])</comment>
		<comment type="line">//		continue;</comment>
		<comment type="line">//	else {</comment>
		<comment type="line">//		int pos = -1;</comment>
		<comment type="line">//		for (int j = i + 1; j &lt; n; j++) {</comment>
		<comment type="line">//			if (t[j] == t[i]) {</comment>
		<comment type="line">//				pos = j;</comment>
		<comment type="line">//				break;</comment>
		<comment type="line">//			}</comment>
		<comment type="line">//		}</comment>
		<comment type="line">//		if (pos == -1) {</comment>
		<comment type="line">//			for (int j = i + 1; j &lt; n; j++) {</comment>
		<comment type="line">//				if (s[j] == t[i]) {</comment>
		<comment type="line">//					pos = j;</comment>
		<comment type="line">//					break;</comment>
		<comment type="line">//				}</comment>
		<comment type="line">//			}</comment>
		<comment type="line">//			if (pos == -1) {</comment>
		<comment type="line">//				break;</comment>
		<comment type="line">//			}</comment>
		<comment type="line">//			else {</comment>
		<comment type="line">//				swap(s[pos], t[pos]);</comment>
		<comment type="line">//				moves.pb({ pos + 1,pos + 1 });</comment>
		<comment type="line">//				swap(s[i], t[pos]);</comment>
		<comment type="line">//				moves.pb({ i + 1,pos + 1 });</comment>
		<comment type="line">//			}</comment>
		<comment type="line">//		}</comment>
		<comment type="line">//		else {</comment>
		<comment type="line">//			swap(s[i], t[pos]);</comment>
		<comment type="line">//			moves.pb({ i + 1,pos + 1 });</comment>
		<comment type="line">//		}</comment>
		<comment type="line">//	}</comment>
		<comment type="line">//}</comment>
		<comment type="line">//if (i == n) {</comment>
		<comment type="line">//	if ((int)moves.size() == 1) {</comment>
		<comment type="line">//		cout &lt;&lt; "Yes" &lt;&lt; endl;</comment>
		<comment type="line">//	}</comment>
		<comment type="line">//	else {</comment>
		<comment type="line">//		cout &lt;&lt; "No" &lt;&lt; endl;</comment>
		<comment type="line">//	}</comment>
		<comment type="line">//	//cout &lt;&lt; "Yes" &lt;&lt; endl;</comment>
		<comment type="line">//	/*cout &lt;&lt; int)moves.size() &lt;&lt; endl;</comment>
		<comment type="line">//	for (int i = 0; i &lt; (int)moves.size(); i++) {</comment>
		<comment type="line">//		cout &lt;&lt; moves[i].first &lt;&lt; " " &lt;&lt; moves[i].second &lt;&lt; endl;</comment>
		<comment type="line">//	}*/</comment>
		<comment type="line">//}</comment>
		<comment type="line">//else {</comment>
		<comment type="line">//	cout &lt;&lt; "No" &lt;&lt; endl;</comment>
		<comment type="line">//}</comment>
	}</block></while>


	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
