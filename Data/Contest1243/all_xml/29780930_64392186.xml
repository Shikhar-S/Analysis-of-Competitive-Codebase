<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29780930_64392186.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x.begin(), x.end()</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>LL</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>LL</name></expr></argument>, <argument><expr><name>LL</name></expr></argument>&gt;</argument_list></name></type> <name>pll</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>LL</name></type> <name>llinf</name><init>=<expr><literal type="number">987654321987654321</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>inf</name><init>=<expr><literal type="number">987654321</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>q</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name><name>num</name><index>[<expr><literal type="number">60</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>re</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pii</name></type> <name><name>print</name><index>[<expr><literal type="number">200</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>str1</name><index>[<expr><literal type="number">100010</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>str2</name><index>[<expr><literal type="number">100010</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>num1</name><index>[<expr><literal type="number">30</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>num2</name><index>[<expr><literal type="number">30</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>u</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>u</name><operator>&lt;=</operator><name>q</name></expr>;</condition> <incr><expr><name>u</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s %s"</literal></expr></argument>, <argument><expr><name>str1</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>str2</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name><name>diffnum</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>diff</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ans</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>diffnum</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>diffnum</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
            <if>if<condition>(<expr><name><name>str1</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name><name>str2</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block>{
                <expr_stmt><expr><name>diff</name><operator>++</operator></expr>;</expr_stmt>
                <if>if<condition>(<expr><name>diff</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name><name>diffnum</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></then>
                <else>else <block type="pseudo"><expr_stmt><expr><name><name>diffnum</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></else></if>
            }</block></then></if>
        }</block></for>
        <if>if<condition>(<expr><name>diff</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"Yes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        }</block></then></if>
        <if>if<condition>(<expr><name>diff</name><operator>==</operator><literal type="number">2</literal><operator>&amp;&amp;</operator><name><name>str1</name><index>[<expr><name><name>diffnum</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>==</operator><name><name>str1</name><index>[<expr><name><name>diffnum</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>&amp;&amp;</operator><name><name>str2</name><index>[<expr><name><name>diffnum</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>==</operator><name><name>str2</name><index>[<expr><name><name>diffnum</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr>)</condition><then><block>{
            <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"Yes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        }</block></then></if>
        <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"No"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
}</block></function>
</unit>
