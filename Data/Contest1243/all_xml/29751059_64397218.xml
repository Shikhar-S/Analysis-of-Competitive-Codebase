<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29751059_64397218.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>renew</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(x, 0, sizeof x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>in</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%d", &amp;x)</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name> <init>= <expr><literal type="number">1e6</literal> <operator>+</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>e1</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>e2</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>idx1</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>idx2</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name><name>mark</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>adj</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>g</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>comp</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name>s1</name></decl>, <decl><type ref="prev"/><name>s2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>mat_s1</name></decl>, <decl><type ref="prev"/><name>mat_s2</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ind</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><name><name>mark</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr><operator>,</operator> <expr><name><name>comp</name><index>[<expr><name>ind</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>v</name> <range>: <expr><name><name>g</name><index>[<expr><name>u</name></expr>]</index></name></expr></range></decl></init>)</control>
        <block type="pseudo"><if>if <condition>(<expr><operator>!</operator><name><name>mark</name><index>[<expr><name>v</name></expr>]</index></name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>ind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></block></for>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>in</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>in</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><call><name>in</name><argument_list>(<argument><expr><name><name>e1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>in</name><argument_list>(<argument><expr><name><name>e2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>adj</name><index>[<expr><name><name>e1</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name><name>e2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>adj</name><index>[<expr><name><name>e2</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name><name>e1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <decl_stmt><decl><type><name>int</name></type> <name>delta</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><if>if <condition>(<expr><name><name>adj</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <name><name>adj</name><index>[<expr><name>delta</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>delta</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block></then></if></block></for>

    <decl_stmt><decl><type><name>int</name></type> <name>delta_n</name> <init>= <expr><name><name>adj</name><index>[<expr><name>delta</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>mat_s1</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><name>delta_n</name> <operator>+</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><call><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>delta_n</name> <operator>+</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>mat_s2</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><name>delta_n</name> <operator>+</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><call><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>n</name> <operator>-</operator> <name>delta_n</name> <operator>+</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>v</name> <range>: <expr><name><name>adj</name><index>[<expr><name>delta</name></expr>]</index></name></expr></range></decl></init>)</control>
        <block type="pseudo"><expr_stmt><expr><name><name>mark</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt></block></for>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><if>if <condition>(<expr><name><name>mark</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>s1</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
        <else>else
            <block type="pseudo"><expr_stmt><expr><call><name><name>s2</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if></block></for>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>s1</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name><name>idx1</name><index>[<expr><name><name>s1</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block></for>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>s2</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name><name>idx2</name><index>[<expr><name><name>s2</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block></for>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>u</name> <init>= <expr><name><name>e1</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>v</name> <init>= <expr><name><name>e2</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name><name>mark</name><index>[<expr><name>u</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>mark</name><index>[<expr><name>v</name></expr>]</index></name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>u</name> <operator>=</operator> <name><name>idx1</name><index>[<expr><name>u</name></expr>]</index></name></expr><operator>,</operator> <expr><name>v</name> <operator>=</operator> <name><name>idx1</name><index>[<expr><name>v</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>mat_s1</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <name><name>mat_s1</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        }</block></then>
        <elseif>else <if>if <condition>(<expr><name><name>mark</name><index>[<expr><name>u</name></expr>]</index></name> <operator>||</operator> <name><name>mark</name><index>[<expr><name>v</name></expr>]</index></name></expr>)</condition><then>
        <block>{
            <if>if <condition>(<expr><name><name>mark</name><index>[<expr><name>u</name></expr>]</index></name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>u</name> <operator>=</operator> <name><name>idx1</name><index>[<expr><name>u</name></expr>]</index></name></expr><operator>,</operator> <expr><name>v</name> <operator>=</operator> <name><name>idx2</name><index>[<expr><name>v</name></expr>]</index></name></expr>;</expr_stmt></block></then>
            <else>else
                <block type="pseudo"><expr_stmt><expr><name>u</name> <operator>=</operator> <name><name>idx2</name><index>[<expr><name>u</name></expr>]</index></name></expr><operator>,</operator> <expr><name>v</name> <operator>=</operator> <name><name>idx1</name><index>[<expr><name>v</name></expr>]</index></name></expr><operator>,</operator> <expr><call><name>swap</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
            <expr_stmt><expr><name><name>mat_s2</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        }</block></then></if></elseif></if>
    }</block></for>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>u</name> <range>: <expr><name>s1</name></expr></range></decl></init>)</control>
        <block type="pseudo"><for>for <control>(<init><decl><type><name>int</name></type> <name>v</name> <range>: <expr><name>s2</name></expr></range></decl></init>)</control>
            <block type="pseudo"><if>if <condition>(<expr><operator>!</operator><name><name>mat_s2</name><index>[<expr><name><name>idx1</name><index>[<expr><name>u</name></expr>]</index></name></expr>]</index><index>[<expr><name><name>idx2</name><index>[<expr><name>v</name></expr>]</index></name></expr>]</index></name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name><name>g</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name><name>g</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></block></for></block></for>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>u</name> <range>: <expr><name>s1</name></expr></range></decl></init>)</control>
        <block type="pseudo"><for>for <control>(<init><decl><type><name>int</name></type> <name>v</name> <range>: <expr><name>s1</name></expr></range></decl></init>)</control>
            <block type="pseudo"><if>if <condition>(<expr><name>u</name> <operator>&gt;</operator> <name>v</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>mat_s1</name><index>[<expr><name><name>idx1</name><index>[<expr><name>u</name></expr>]</index></name></expr>]</index><index>[<expr><name><name>idx1</name><index>[<expr><name>v</name></expr>]</index></name></expr>]</index></name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name><name>g</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name><name>g</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></block></for></block></for>

    <expr_stmt><expr><call><name>renew</name><argument_list>(<argument><expr><name>mark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ind</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>u</name> <range>: <expr><name>s2</name></expr></range></decl></init>)</control>
        <block type="pseudo"><if>if <condition>(<expr><operator>!</operator><name><name>mark</name><index>[<expr><name>u</name></expr>]</index></name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>ind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></block></for>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>u</name> <range>: <expr><name>s1</name></expr></range></decl></init>)</control>
        <block type="pseudo"><if>if <condition>(<expr><operator>!</operator><name><name>mark</name><index>[<expr><name>u</name></expr>]</index></name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><operator>++</operator><name>ind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></block></for>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><name>ind</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
