<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29773533_64404935.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define> 
<function><type><name>int32_t</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>t</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition><block>{
      <decl_stmt><decl><type><name>int</name></type> <name>N</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>N</name></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>string</name></type> <name>A</name></decl>,<decl><type ref="prev"/><name>B</name></decl>;</decl_stmt><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>A</name><operator>&gt;&gt;</operator><name>B</name></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>op</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>string</name></type> <name>ans</name> <init>= <expr><literal type="string">"Yes"</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type><name>temp</name></decl>;</decl_stmt>
      <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>N</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
          <if>if<condition>(<expr><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name><name>B</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
          <block>{
              <continue>continue;</continue>
          }</block></then>
          <else>else
          <block>{
              <comment type="line">//Search in i+1 to N for A[i]</comment>
              <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
              <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>N</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
                  <if>if<condition>(<expr><name><name>A</name><index>[<expr><name>j</name></expr>]</index></name><operator>==</operator><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name><operator>&amp;&amp;</operator><name><name>A</name><index>[<expr><name>j</name></expr>]</index></name><operator>!=</operator><name><name>B</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then>
                  <block>{
                      <comment type="line">//Swap now</comment>
                      <if>if<condition>(<expr><name>index</name><operator>!=</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
                      <block>{
                      <if>if<condition>(<expr><name><name>B</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name><name>B</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then>
                      <block>{
                          <expr_stmt><expr><name>index</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
                      }</block></then></if>
                      }</block></then>
                      <else>else
                      <block>{
                          <expr_stmt><expr><name>index</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
                      }</block></else></if>
                  }</block></then></if>
              }</block></for>
              <if>if<condition>(<expr><name>index</name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
              <block>{
                  <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>N</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
                      <if>if<condition>(<expr><name><name>A</name><index>[<expr><name>j</name></expr>]</index></name><operator>!=</operator><name><name>B</name><index>[<expr><name>j</name></expr>]</index></name><operator>&amp;&amp;</operator><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name><name>B</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then>
                      <block>{
                          <decl_stmt><decl><type><name>char</name></type> <name>ch</name> <init>= <expr><name><name>A</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                          <expr_stmt><expr><name><name>A</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>B</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
                          <expr_stmt><expr><name><name>B</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>
                          <expr_stmt><expr><name>op</name><operator>++</operator></expr>;</expr_stmt>
                          <expr_stmt><expr><name>index</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
                          <expr_stmt><expr><call><name><name>temp</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name>j</name></expr>,<expr><name>j</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                          <break>break;</break>
                      }</block></then></if>
                  }</block></for>
              }</block></then></if>
              <if>if<condition>(<expr><name>index</name><operator>!=</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
              <block>{
                  <expr_stmt><expr><call><name><name>temp</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name>index</name></expr>,<expr><name>i</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                      <decl_stmt><decl><type><name>char</name></type> <name>ch</name> <init>= <expr><name><name>B</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                      <expr_stmt><expr><name><name>B</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>A</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</expr_stmt>
                      <expr_stmt><expr><name><name>A</name><index>[<expr><name>index</name></expr>]</index></name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>
                      <expr_stmt><expr><name>op</name><operator>++</operator></expr>;</expr_stmt>
              }</block></then>
              <else>else
              <block>{
                  <expr_stmt><expr><name>ans</name> <operator>=</operator> <literal type="string">"No"</literal></expr>;</expr_stmt>
                  <break>break;</break>
              }</block></else></if>
          }</block></else></if>
      }</block></for>
          <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
         
          <if>if<condition>(<expr><name>ans</name><operator>==</operator><literal type="string">"Yes"</literal></expr>)</condition><then>
          <block>{
               <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>op</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
              <for>for<control>(<init><decl><type><name>auto</name></type> <name>x</name><range>:<expr><name>temp</name></expr></range></decl></init>)</control>
              <block>{
                  <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>x</name><operator>.</operator><name>first</name></name><operator>+</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name><name>x</name><operator>.</operator><name>second</name></name><operator>+</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
              }</block></for>
          }</block></then></if>
    }</block></while>
}</block></function></unit>
