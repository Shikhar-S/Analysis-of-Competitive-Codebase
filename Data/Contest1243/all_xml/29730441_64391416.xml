<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29730441_64391416.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name> ;</namespace></using>

<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>V1</name></decl> , <decl><type ref="prev"/><name>V2</name></decl> ;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><literal type="number">10004</literal></expr>]</index></name></decl> , <decl><type ref="prev"/><name><name>t</name><index>[<expr><literal type="number">10005</literal></expr>]</index></name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>cnts</name><index>[<expr><literal type="number">27</literal></expr>]</index></name></decl> , <decl><type ref="prev"/><name><name>cntt</name><index>[<expr><literal type="number">27</literal></expr>]</index></name></decl> ;</decl_stmt>
<function><type><name>int</name></type> <name>main</name> <parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>dasdsadaslfssafasfafadfsdlgsfgsdaggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggsdagsag</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>T</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>scanf</name> <argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument> , <argument><expr><operator>&amp;</operator><name>T</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <while>while <condition>(<expr><name>T</name><operator>--</operator></expr>)</condition>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>dasdsadaslfssafasfafadfsdlgsfgsdaggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggsdagsagdasdsadaslfssafasfafadfsdlgsfgsdaggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggsdagsagdasdsadaslfssafasfafadfsdlgsfgsdaggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggsdagsagdasdsadaslfssafasfafadfsdlgsfgsdaggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggsdagsag</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>V1</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name><name>V2</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr> ;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>dsasdadasfadfkfhasjdhfjkasdhkfjhaskjdfhkjasdhfjkasdhjkfhjkadhffkjashdfkjhzsdkjfhajksdhfjkadshfkjasdhfkjahsdkjfhasjkdhfkasjdhfjkasdhkjffhasjkhfkjasdhfkjasdhh</name> <init>= <expr><literal type="number">444</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'+'</literal></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>scanf</name> <argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument> , <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>scanf</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument> , <argument><expr><name>s</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>scanf</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument> , <argument><expr><name>t</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>aslfjalkdsjflkasdjgjadslkgjaslkddjglkasjlgkjalksjdlkfjaslkgjlkasjgksajglkjaslkgjaksl</name><init>= <expr><literal type="number">6</literal></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
                <block type="pseudo"><continue>continue ;</continue></block></then></if>
            <decl_stmt><decl><type><name>int</name></type> <name>dasklflkasjflkajflksjdlkgjasdlkddgjlkasdjglksjglkasjlkgjlkasjglkasjgklasjdlkgjsdlkjflkasdjdlkgjaslkglkasjglkasjglkasdjglkasjlkgjaslkjglkasjgklajs</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>bool</name></type> <name>flag</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl> ;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>n</name></expr> ;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
            <block>{
                <if>if <condition>(<expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><call><name><name>V1</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <expr_stmt><expr><call><name><name>V2</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument> , <argument><expr><name><name>t</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                }</block></then></if>
                <decl_stmt><decl><type><name>int</name></type> <name>adklalkdfjlkasdjflkasdjflkasjdlkfjaslkdjflkasjdlkfjasdlkfjlksdajdflkasjdkfjasdkfjalskdjflkadsjflkasdjlkasjdlkfjasdlkgjglkasjglkasddjflkfasdlkfmsdlkafmlak</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name><name>t</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><call><name><name>V1</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <expr_stmt><expr><call><name><name>V2</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> , <argument><expr><name><name>t</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="boolean">false</literal></expr> ;</expr_stmt>
                    <break>break ;</break>
                }</block></then></if>
            }</block></for>
            <if>if <condition>(<expr><name>flag</name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'-'</literal></expr> ;</expr_stmt>
                <break>break ;</break>
            }</block></then></if>
<comment type="line">//            printf ("s : %s\n" , s + 1) ;</comment>
<comment type="line">//            printf ("t : %s\n" , t + 1) ;</comment>
        }</block></for>
        <if>if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"No\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <continue>continue ;</continue>
        }</block></then></if>
        <decl_stmt><decl><type><name>int</name></type> <name>daslkfjsaklfjlkasjflkajdkgjasdlkdjflkadjflkadjglkjasdlkgjjaslkjglkasjglkasjlkgjaslkgjlakfjglkasdjglkjaslkjgjlkasjgalk</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Yes\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument> , <argument><expr><call><name><name>V1</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>V1</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
        <block>{
            <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%d %d\n"</literal></expr></argument> , <argument><expr><name><name>V1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> , <argument><expr><name><name>V2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        }</block></for>
        <decl_stmt><decl><type><name>int</name></type> <name>asdaslkfjlaksjflkasdjlkgjadlkjglkadsjflkjadslkfjlkasdjfjlkasdjflkasjdlkfjasdlkfjelkjflkasdjflkmadlkfmlkawemfklamkldfmldamflkadmsflk</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>;</decl_stmt>
    }</block></while>
}</block></function>

<comment type="block">/*

#include&lt;bits/stdc++.h&gt;

using namespace std;
const int maxn = 1000 + 10;
int a[maxn];
int n;

bool check(int pos){
    for(int i = 1; i &lt;= n - pos + 1; i++) if(a[i] &gt;= pos) return true;
    return false;
}

int main(){
    int T;
    cin&gt;&gt;T;
    while(T--){
        cin&gt;&gt;n;
        for(int i = 1; i &lt;= n; i++) cin&gt;&gt;a[i];
        sort(a + 1, a + 1 + n);
        int l = 1, r = n;
        int ans;
        if(a[1] == a[n]){
            cout&lt;&lt;a[1]&lt;&lt;endl;
            continue;
        }
        while(l &lt; r){
            int mid = (l + r) &gt;&gt; 1;
            if(check(mid)) ans = mid, l = mid + 1;
            else r = mid;
        }
        cout&lt;&lt;ans&lt;&lt;endl;
    }
    return 0;
}
*/</comment>
</unit>
