<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29784906_64377647.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>boost</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(false), cin.tie(NULL);</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">1e6</literal> <operator>+</operator> <literal type="number">55</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mod</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>long</name> <name>long</name></type> <name>INF</name> <init>= <expr><literal type="number">1e18</literal> <operator>+</operator> <literal type="number">12</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>inf</name> <init>= <expr><literal type="number">1e9</literal></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name> <parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><name>boost</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>x</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>x</name></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><literal type="number">0</literal></expr>;</return></block></then></if>
	<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></type> <name>v</name></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>long</name> <name>long</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>*</operator> <name>i</name> <operator>&lt;=</operator> <name>x</name></expr> ;</condition> <incr><expr><operator>++</operator> <name>i</name></expr></incr>)</control> <block>{
		<if>if <condition>(<expr><name>x</name> <operator>%</operator> <name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>push_back</name></name> <argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<while>while <condition>(<expr><name>x</name> <operator>%</operator> <name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{
				<expr_stmt><expr><name>x</name> <operator>/=</operator> <name>i</name></expr>;</expr_stmt>
			}</block></while>
		}</block></then></if>
	}</block></for>
	<if>if <condition>(<expr><name>x</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>push_back</name></name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>p</name> <init>= <expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>long</name> <name>long</name></type> <name>i</name> <range>: <expr><name>v</name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>__gcd</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>p</name></expr>;</expr_stmt>
}</block></function></unit>
