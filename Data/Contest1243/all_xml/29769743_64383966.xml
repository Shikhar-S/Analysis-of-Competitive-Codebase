<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29769743_64383966.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>input</name></cpp:macro>   <cpp:value>std::cin</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>output</name></cpp:macro>  <cpp:value>std::cout</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>num</name></cpp:macro>     <cpp:value>long long</cpp:value></cpp:define>

<function><type><name>num</name></type> <name>totient</name><parameter_list>(<parameter><decl><type><name>num</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>num</name></type> <name>result</name> <init>= <expr><name>n</name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>num</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>*</operator> <name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <if>if<condition>(<expr><name>n</name> <operator>%</operator> <name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <while>while<condition>(<expr><name>n</name> <operator>%</operator> <name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
                <block type="pseudo"><expr_stmt><expr><name>n</name> <operator>/=</operator> <name>i</name></expr>;</expr_stmt></block></while>
            <expr_stmt><expr><name>result</name> <operator>-=</operator> <name>result</name> <operator>/</operator> <name>i</name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></for>
    <if>if<condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>result</name> <operator>-=</operator> <name>result</name> <operator>/</operator> <name>n</name></expr>;</expr_stmt></block></then></if>
    <return>return <expr><name>result</name></expr>;</return>
}</block></function>

<function><type><name>num</name></type> <name>minimumPrime</name><parameter_list>(<parameter><decl><type><name>num</name></type> <name>X</name></decl></parameter>)</parameter_list> <block>{
    <for>for <control>(<init><decl><type><name>num</name></type> <name>d</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>d</name><operator>*</operator><name>d</name><operator>&lt;=</operator><name>X</name></expr>;</condition> <incr><expr><operator>++</operator><name>d</name></expr></incr>)</control>
        <block type="pseudo"><if>if <condition>(<expr><name>X</name><operator>%</operator><name>d</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>d</name></expr>;</return></block></then></if></block></for>
    <return>return <expr><name>X</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>num</name></type> <name>N</name></decl>;</decl_stmt>  <expr_stmt><expr><name>input</name> <operator>&gt;&gt;</operator> <name>N</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>num</name></type> <name>X</name> <init>= <expr><name>N</name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>N</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>output</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <decl_stmt><decl><type><name>num</name></type> <name>pf</name> <init>= <expr><call><name>minimumPrime</name><argument_list>(<argument><expr><name>X</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>X</name><operator>%</operator><name>pf</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>X</name><operator>/=</operator><name>pf</name></expr>;</expr_stmt></block></while>

        <if>if <condition>(<expr><name>X</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>output</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt></block></then>
        <else>else        <block type="pseudo"><expr_stmt><expr><name>output</name> <operator>&lt;&lt;</operator> <name>pf</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt></block></else></if>
    }</block></else></if>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
