<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29743551_64396317.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>int</name></type> <name><name>cnt1</name><index>[<expr><literal type="number">26</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>cnt2</name><index>[<expr><literal type="number">26</literal></expr>]</index></name></decl>;</decl_stmt>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>tt</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>tt</name></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>tt</name><operator>--</operator></expr>)</condition>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>,<decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>s</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name>vec</name></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">26</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>cnt1</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>cnt2</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></for>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><call><name><name>vec</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></block></for>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>vec</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <expr_stmt><expr><name><name>cnt1</name><index>[<expr><name><name>s</name><index>[<expr><name><name>vec</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>cnt2</name><index>[<expr><name><name>t</name><index>[<expr><name><name>vec</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
        }</block></for>
        <decl_stmt><decl><type><name>bool</name></type> <name>f</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">26</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><if>if<condition>(<expr><operator>(</operator><name><name>cnt1</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>cnt2</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>%</operator><literal type="number">2</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>f</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></then></if></block></for>
        <if>if<condition>(<expr><operator>!</operator><name>f</name></expr>)</condition><then> <block>{<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No\n"</literal></expr>;</expr_stmt><continue>continue;</continue>}</block></then></if>
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Yes\n"</literal></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pii</name></expr></argument>&gt;</argument_list></name></type><name>ans</name></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">26</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name><name>tp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
            <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><call><name><name>vec</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
            <block>{
                <if>if<condition>(<expr><name><name>s</name><index>[<expr><name><name>vec</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name><operator>==</operator><name><name>t</name><index>[<expr><name><name>vec</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
                <if>if<condition>(<expr><name><name>s</name><index>[<expr><name><name>vec</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal><operator>==</operator><name>i</name></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name><name>tp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name><name>vec</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
                <if>if<condition>(<expr><name><name>t</name><index>[<expr><name><name>vec</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal><operator>==</operator><name>i</name></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name><name>tp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name><name>vec</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
            }</block></for>
            <decl_stmt><decl><type><name>int</name></type> <name>sz0</name><init>=<expr><name><name>tp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></init></decl>,<decl><type ref="prev"/><name>sz1</name><init>=<expr><name><name>tp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name>sz0</name><operator>&gt;</operator><literal type="number">1</literal></expr>)</condition><then>
            <block>{
                <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><operator>(</operator><name>sz0</name><operator>-</operator><literal type="number">2</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
                <block>{
                    <expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>pii</name><argument_list>(<argument><expr><name><name>tp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>tp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>sz0</name><operator>-</operator><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name><name>tp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name></expr></argument>,<argument><expr><name><name>t</name><index>[<expr><name><name>tp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>sz0</name><operator>-</operator><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>
            }</block></then></if>
            <if>if<condition>(<expr><name>sz1</name><operator>&gt;</operator><literal type="number">1</literal></expr>)</condition><then>
            <block>{
                <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><operator>(</operator><name>sz1</name><operator>-</operator><literal type="number">2</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
                <block>{
                    <expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>pii</name><argument_list>(<argument><expr><name><name>tp</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>sz1</name><operator>-</operator><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>tp</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>t</name><index>[<expr><name><name>tp</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name></expr></argument>,<argument><expr><name><name>s</name><index>[<expr><name><name>tp</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>sz1</name><operator>-</operator><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>
            }</block></then></if>
            <if>if<condition>(<expr><name>sz0</name><operator>%</operator><literal type="number">2</literal></expr>)</condition><then>
            <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>pos1</name><init>=<expr><name><name>tp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>sz0</name><operator>/</operator><literal type="number">2</literal></expr>]</index></name></expr></init></decl>,<decl><type ref="prev"/><name>pos2</name><init>=<expr><name><name>tp</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>sz1</name><operator>/</operator><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>pii</name><argument_list>(<argument><expr><name>pos1</name></expr></argument>,<argument><expr><name>pos1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>pii</name><argument_list>(<argument><expr><name>pos2</name></expr></argument>,<argument><expr><name>pos1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>pos1</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>t</name><index>[<expr><name>pos1</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>pos2</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>t</name><index>[<expr><name>pos1</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name><name>ans</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>ans</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fi</name><operator>+</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="char">' '</literal><operator>&lt;&lt;</operator><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>se</name><operator>+</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></for>
    }</block></while>
}</block></function>
</unit>
