<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29780449_64375085.cpp"><comment type="line">//In the name of Allah</comment>
<comment type="line">//In the name of the compassionate of the merciful</comment>
<comment type="line">//Ya Ali!</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ext/pb_ds/assoc_container.hpp&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<using>using <namespace>namespace <name>__gnu_pbds</name>;</namespace></using>

<typedef>typedef <type><name>int</name></type> <name>ll</name> ;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name> ;</typedef>
<typedef>typedef <type><name><name>tree</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>null_type</name></expr></argument>, <argument><expr><name><name>less</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>rb_tree_tag</name></expr></argument>, <argument><expr><name>tree_order_statistics_node_update</name></expr></argument>&gt;</argument_list></name></type> <name>ordered_set</name>;</typedef>

<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>maxn</name> <init>= <expr><literal type="number">1000</literal> <operator>*</operator> <literal type="number">101</literal></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>INF2</name> <init>= <expr><literal type="number">1e9</literal></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>INF</name> <init>= <expr><literal type="number">1e18</literal></expr></init></decl> ;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>s</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pub</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>puf</name></cpp:macro> <cpp:value>push_front</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pob</name></cpp:macro> <cpp:value>pop_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pof</name></cpp:macro> <cpp:value>pop_front</cpp:value></cpp:define>

<comment type="line">// cout &lt;&lt; *ss.find_by_order(index) ; -&gt; return the value that indexed in index position</comment>
<comment type="line">// cout &lt;&lt; ss.order_of_key(value) ; -&gt; lower_bound in ordered_set</comment>

<decl_stmt><decl><type><name>ll</name></type> <name>mod</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl> , <decl><type ref="prev"/><name>p1</name> <init>= <expr><literal type="number">999999929</literal></expr></init></decl> , <decl><type ref="prev"/><name>p2</name> <init>= <expr><literal type="number">999999937</literal></expr></init></decl> ;</decl_stmt>

<decl_stmt><decl><type><name>ll</name></type> <name>q</name></decl> ;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
<expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>q</name></expr> ;</expr_stmt>
<while>while<condition>(<expr><name>q</name><operator>--</operator></expr>)</condition><block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl> , <decl><type ref="prev"/><name>ans</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>a</name></decl> ;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr> ;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr> ;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control><block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>x</name></decl> ;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>x</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>a</name><operator>.</operator><name>pub</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>a</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument> , <argument><expr><call><name><name>a</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ;</condition> <incr><expr><name>i</name> <operator>--</operator></expr></incr>)</control><block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>x</name> <init>= <expr><name>n</name><operator>-</operator><name>i</name></expr></init></decl> ;</decl_stmt>
        <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <name>x</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>=</operator> <name>x</name></expr> ;</expr_stmt></block></then></if>
    }</block></for>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr> ;</expr_stmt>
}</block></while>
 <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
<comment type="block">/*
                  _     _   __
            /_\  (_    (_)  __)
           /   \  _) . (_) (__
*/</comment>
</unit>
