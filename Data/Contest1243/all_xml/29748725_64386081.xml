<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29748725_64386081.cpp"><comment type="block">/*Author: ADITYA SHETH*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>PI</name><init>=<expr><call><name>acos</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>t1</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>             <cpp:value>cerr&lt;&lt;#x&lt;&lt;"="&lt;&lt;x&lt;&lt;endl</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>t2</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro>          <cpp:value>cerr&lt;&lt;#x&lt;&lt;"="&lt;&lt;x&lt;&lt;" "&lt;&lt;#y&lt;&lt;"="&lt;&lt;y&lt;&lt;endl</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>t3</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro>       <cpp:value>cerr&lt;&lt;#x&lt;&lt;"=" &lt;&lt;x&lt;&lt;" "&lt;&lt;#y&lt;&lt;"="&lt;&lt;y&lt;&lt;" "&lt;&lt;#z&lt;&lt;"="&lt;&lt;z&lt;&lt;endl</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>t4</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro>       <cpp:value>cerr&lt;&lt;#a&lt;&lt;"="&lt;&lt;a&lt;&lt;" "&lt;&lt;#b&lt;&lt;"="&lt;&lt;b&lt;&lt;" "&lt;&lt;#c&lt;&lt;"="&lt;&lt;c&lt;&lt;" "&lt;&lt;#d&lt;&lt;"="&lt;&lt;d&lt;&lt;endl</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>t5</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro>     <cpp:value>cerr&lt;&lt;#a&lt;&lt;"="&lt;&lt;a&lt;&lt;" "&lt;&lt;#b&lt;&lt;"="&lt;&lt;b&lt;&lt;" "&lt;&lt;#c&lt;&lt;"="&lt;&lt;c&lt;&lt;" "&lt;&lt;#d&lt;&lt;"="&lt;&lt;d&lt;&lt;" "&lt;&lt;#e&lt;&lt;"="&lt;&lt;e&lt;&lt;endl</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>t6</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>e</name></type></parameter>,<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>cerr&lt;&lt;#a&lt;&lt;"="&lt;&lt;a&lt;&lt;" "&lt;&lt;#b&lt;&lt;"="&lt;&lt;b&lt;&lt;" "&lt;&lt;#c&lt;&lt;"="&lt;&lt;c&lt;&lt;" "&lt;&lt;#d&lt;&lt;"="&lt;&lt;d&lt;&lt;" "&lt;&lt;#e&lt;&lt;"="&lt;&lt;e&lt;&lt;" "&lt;&lt;#f&lt;&lt;"="&lt;&lt;f&lt;&lt;endl</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_MACRO</name><parameter_list>(<parameter><type><name>_1</name></type></parameter>,<parameter><type><name>_2</name></type></parameter>,<parameter><type><name>_3</name></type></parameter>,<parameter><type><name>_4</name></type></parameter>,<parameter><type><name>_5</name></type></parameter>,<parameter><type><name>_6</name></type></parameter>,<parameter><type><name>NAME</name></type></parameter>,<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NAME</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>t</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GET_MACRO(__VA_ARGS__,t6,t5, t4, t3, t2, t1)(__VA_ARGS__)</cpp:value></cpp:define>
<comment type="line">//freopen("output.txt","w",stdout);</comment>
<comment type="line">//freopen("input.txt","r",stdin);</comment>
<comment type="block">/*-------------------------------------------------------------------------------------------------------------------------------------*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>"\n"</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define> <comment type="line">// remove when constraints are tight.</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inf</name></cpp:macro> <cpp:value>1e18</cpp:value></cpp:define>
<comment type="block">/*-------------------------------------------------------------------------------------------------------------------------------------*/</comment>
<comment type="block">/*
Don't use mod=1e9+7, instead write modulo=1e9+7
*/</comment>

<comment type="line">// Integer factorization in O(N^{1/4}</comment>
<comment type="line">// uses squfof from msieve https://github.com/radii/msieve</comment>
<comment type="line">// with fixes to work for n = p^3</comment>
<comment type="line">// works up to 2*10^18</comment>
<comment type="line">// probably fails on 5003^5 which is ~10^{18.5}</comment>

<namespace>namespace <name>NT</name><block>{
    <struct><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
    struct <name>bigger_type</name><block>{<public type="default"/>}</block>;</struct>
    <using><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> using <name>bigger_type_t</name> <init>= <type><name><typename>typename</typename> <name><name>bigger_type</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></name></type></init>;</using>
    <struct><template>template<parameter_list>&lt;&gt;</parameter_list></template> struct <name><name>bigger_type</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><block>{<public type="default"><using>using <name>type</name> <init>= <type><name>long</name> <name>long</name></type></init>;</using></public>}</block>;</struct>
    <struct><template>template<parameter_list>&lt;&gt;</parameter_list></template> struct <name><name>bigger_type</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>int</name></expr></argument>&gt;</argument_list></name><block>{<public type="default"><using>using <name>type</name> <init>= <type><name>unsigned</name> <name>long</name> <name>long</name></type></init>;</using></public>}</block>;</struct>
    <comment type="line">//template&lt;&gt; struct bigger_type&lt;int64_t&gt;{using type = __int128;};</comment>
    <comment type="line">//template&lt;&gt; struct bigger_type&lt;uint64_t&gt;{using type = unsigned __int128;};</comment>

    <struct><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>int_t</name> <init>= <expr><name>unsigned</name> <parameter><type><name>long</name></type> <name>long</name></parameter></expr></init></parameter>&gt;</parameter_list></template>
    struct <name>Mod_Int</name><block>{<public type="default">
        <function><specifier>static</specifier> <specifier>inline</specifier> <type><name>int_t</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>int_t</name> <specifier>const</specifier><modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int_t</name> <specifier>const</specifier><modifier>&amp;</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>int_t</name> <specifier>const</specifier><modifier>&amp;</modifier></type><name>mod</name></decl></parameter>)</parameter_list><block>{
            <decl_stmt><decl><type><name>int_t</name></type> <name>ret</name> <init>= <expr><name>a</name><operator>+</operator><name>b</name></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name>ret</name><operator>&gt;=</operator><name>mod</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ret</name><operator>-=</operator><name>mod</name></expr>;</expr_stmt></block></then></if>
            <return>return <expr><name>ret</name></expr>;</return>
        }</block></function>
        <function><specifier>static</specifier> <specifier>inline</specifier> <type><name>int_t</name></type> <name>sub</name><parameter_list>(<parameter><decl><type><name>int_t</name> <specifier>const</specifier><modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int_t</name> <specifier>const</specifier><modifier>&amp;</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>int_t</name> <specifier>const</specifier><modifier>&amp;</modifier></type><name>mod</name></decl></parameter>)</parameter_list><block>{
            <return>return <expr><call><name>add</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>mod</name><operator>-</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
        <function><specifier>static</specifier> <specifier>inline</specifier> <type><name>int_t</name></type> <name>mul</name><parameter_list>(<parameter><decl><type><name>int_t</name> <specifier>const</specifier><modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int_t</name> <specifier>const</specifier><modifier>&amp;</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>int_t</name> <specifier>const</specifier><modifier>&amp;</modifier></type><name>mod</name></decl></parameter>)</parameter_list><block>{
            <decl_stmt><decl><type><name>uint64_t</name></type> <name>ret</name> <init>= <expr><name>a</name> <operator>*</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>b</name> <operator>-</operator> <call>(<name>uint64_t</name>)<argument_list>(<argument><expr><operator>(</operator><name>long</name> <name>double</name><operator>)</operator><name>a</name> <operator>*</operator> <name>b</name> <operator>/</operator> <name>mod</name> <operator>-</operator> <literal type="number">1.1</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>mod</name></expr></init></decl>;</decl_stmt>
			<if>if<condition>(<expr><operator>-</operator><name>ret</name> <operator>&lt;</operator> <name>ret</name></expr>)</condition><then><block>{
				<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>mod</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><operator>(</operator><operator>-</operator><name>ret</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt>
			}</block></then> <else>else <block>{
				<expr_stmt><expr><name>ret</name><operator>%=</operator><name>mod</name></expr>;</expr_stmt>
			}</block></else></if>
				
			<comment type="line">//ret = min(ret, ret+mod);</comment>
			<decl_stmt><decl><type><name>int64_t</name></type> <name>out</name> <init>= <expr><name>ret</name></expr></init></decl>;</decl_stmt>
			<comment type="block">/*if(out != a*(__int128) b % mod){
				cerr &lt;&lt; (long double)a * b / mod &lt;&lt; " " &lt;&lt; (uint64_t)((long double)a * b / mod - 0.1) &lt;&lt; "\n";
				cerr &lt;&lt; mod &lt;&lt; " " &lt;&lt; ret &lt;&lt; " " &lt;&lt; ret+mod &lt;&lt; " " &lt;&lt; out &lt;&lt; " " &lt;&lt; (int64_t)(a*(__int128) b % mod) &lt;&lt; "\n";
				assert(0);
			}*/</comment>
			<return>return <expr><name>out</name></expr>;</return>
            <comment type="line">//return a*static_cast&lt;bigger_type_t&lt;int_t&gt;&gt;(b)%mod;</comment>
        }</block></function>
        <function><specifier>static</specifier> <specifier>inline</specifier> <type><name>int_t</name></type> <name>pow</name><parameter_list>(<parameter><decl><type><name>int_t</name> <specifier>const</specifier><modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int_t</name> <specifier>const</specifier><modifier>&amp;</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>int_t</name> <specifier>const</specifier><modifier>&amp;</modifier></type><name>mod</name></decl></parameter>)</parameter_list><block>{
            <decl_stmt><decl><type><name>int_t</name></type> <name>ret</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int_t</name></type> <name>base</name> <init>= <expr><name>a</name></expr></init></decl>;</decl_stmt>
            <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>b</name><operator>&gt;&gt;</operator><name>i</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
                <if>if<condition>(<expr><operator>(</operator><name>b</name><operator>&gt;&gt;</operator><name>i</name><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mul</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
                <expr_stmt><expr><name>base</name> <operator>=</operator> <call><name>mul</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
            <return>return <expr><name>ret</name></expr>;</return>
        }</block></function>
    </public>}</block>;</struct>

    <function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
    <type><name><typename>typename</typename> <name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></name></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></name></type> <name>is_prime</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{
        <if>if<condition>(<expr><name>x</name><operator>&lt;</operator><call><name>T</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>x</name><operator>&gt;</operator><call><name>T</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
        <for>for<control>(<init><decl><type><name>T</name></type> <name>i</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>*</operator><name>i</name><operator>&lt;=</operator><name>x</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
            <if>if<condition>(<expr><name>x</name><operator>%</operator><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
        }</block></for>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></function>

    <function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
    <type><name><typename>typename</typename> <name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></name></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></name></type> <name>miller_rabin_single</name><parameter_list>(<parameter><decl><type><name>T</name> <specifier>const</specifier><modifier>&amp;</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>base</name></decl></parameter>)</parameter_list><block>{
        <if>if<condition>(<expr><name>x</name><operator>&lt;</operator><call><name>T</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>x</name><operator>&gt;</operator><call><name>T</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
        <if>if<condition>(<expr><name>x</name><operator>%</operator><literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
        <expr_stmt><expr><name>base</name><operator>%=</operator><name>x</name></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>base</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>

        <decl_stmt><decl><type><name>T</name></type> <name>xm1</name> <init>= <expr><name>x</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>T</name></type> <name>d</name> <init>= <expr><name>xm1</name><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
        <while>while<condition>(<expr><name>d</name><operator>%</operator><literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{ <comment type="line">// could use __builtin_ctz</comment>
            <expr_stmt><expr><name>d</name><operator>/=</operator><literal type="number">2</literal></expr>;</expr_stmt>
            <expr_stmt><expr><operator>++</operator><name>j</name></expr>;</expr_stmt>
        }</block></while>
        <decl_stmt><decl><type><name>T</name></type> <name>t</name> <init>= <expr><call><name><name><name>Mod_Int</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>pow</name></name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>t</name><operator>==</operator><call><name>T</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>||</operator> <name>t</name><operator>==</operator><call><name>T</name><argument_list>(<argument><expr><name>xm1</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>k</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>k</name><operator>&lt;</operator><name>j</name></expr>;</condition><incr><expr><operator>++</operator><name>k</name></expr></incr>)</control><block>{
            <expr_stmt><expr><name>t</name> <operator>=</operator> <call><name><name><name>Mod_Int</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>mul</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>t</name> <operator>==</operator> <name>xm1</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>
            <if>if<condition>(<expr><name>t</name><operator>&lt;=</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
        }</block></for>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    }</block></function>

    <function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
    <type><name><typename>typename</typename> <name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></name></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></name></type> <name>miller_rabin_multi</name><parameter_list>(<parameter><decl><type><name>T</name> <specifier>const</specifier><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list><block>{<return>return <expr><literal type="boolean">true</literal></expr>;</return>}</block></function>
    <function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>, <parameter><type><name>typename</name><modifier>...</modifier></type> <name>S</name></parameter>&gt;</parameter_list></template>
    <type><name><typename>typename</typename> <name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></name></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></name></type> <name>miller_rabin_multi</name><parameter_list>(<parameter><decl><type><name>T</name> <specifier>const</specifier><modifier>&amp;</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>T</name> <specifier>const</specifier><modifier>&amp;</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>S</name> <specifier>const</specifier><modifier>&amp;</modifier><modifier>...</modifier></type><name>bases</name></decl></parameter>)</parameter_list><block>{
        <if>if<condition>(<expr><operator>!</operator><call><name>miller_rabin_single</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
        <return>return <expr><call><name>miller_rabin_multi</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>bases</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
    <type><name><typename>typename</typename> <name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></name></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></name></type> <name>miller_rabin</name><parameter_list>(<parameter><decl><type><name>T</name> <specifier>const</specifier><modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list><block>{
        <if>if<condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">316349281</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><call><name>miller_rabin_multi</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><call><name>T</name><argument_list>(<argument><expr><literal type="number">11000544</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>T</name><argument_list>(<argument><expr><literal type="number">31481107</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
        <if>if<condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">4759123141ull</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><call><name>miller_rabin_multi</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><call><name>T</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>T</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>T</name><argument_list>(<argument><expr><literal type="number">61</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
        <return>return <expr><call><name>miller_rabin_multi</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><call><name>T</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>T</name><argument_list>(<argument><expr><literal type="number">325</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>T</name><argument_list>(<argument><expr><literal type="number">9375</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>T</name><argument_list>(<argument><expr><literal type="number">28178</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>T</name><argument_list>(<argument><expr><literal type="number">450775</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>T</name><argument_list>(<argument><expr><literal type="number">9780504</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>T</name><argument_list>(<argument><expr><literal type="number">1795265022</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
    <type><name><typename>typename</typename> <name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></name></expr></argument>, <argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></name></type> <name>isqrt</name><parameter_list>(<parameter><decl><type><name>T</name> <specifier>const</specifier><modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list><block>{
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>x</name><operator>&gt;=</operator><call><name>T</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>T</name></type> <name>ret</name> <init>= <expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><call><name>sqrtl</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></cast></expr></init></decl>;</decl_stmt>
        <while>while<condition>(<expr><name>ret</name><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ret</name><operator>*</operator><name>ret</name><operator>&gt;</operator><name>x</name></expr>)</condition> <block type="pseudo"><expr_stmt><expr><operator>--</operator><name>ret</name></expr>;</expr_stmt></block></while>
        <while>while<condition>(<expr><name>x</name><operator>-</operator><name>ret</name><operator>*</operator><name>ret</name><operator>&gt;</operator><literal type="number">2</literal><operator>*</operator><name>ret</name></expr>)</condition>
            <block type="pseudo"><expr_stmt><expr><operator>++</operator><name>ret</name></expr>;</expr_stmt></block></while>
        <return>return <expr><name>ret</name></expr>;</return>
    }</block></function>
    <function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
    <type><name><typename>typename</typename> <name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></name></expr></argument>, <argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></name></type> <name>icbrt</name><parameter_list>(<parameter><decl><type><name>T</name> <specifier>const</specifier><modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list><block>{
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>x</name><operator>&gt;=</operator><call><name>T</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>T</name></type> <name>ret</name> <init>= <expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><call><name>cbrt</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></cast></expr></init></decl>;</decl_stmt>
        <while>while<condition>(<expr><name>ret</name><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ret</name><operator>*</operator><name>ret</name><operator>*</operator><name>ret</name><operator>&gt;</operator><name>x</name></expr>)</condition> <block type="pseudo"><expr_stmt><expr><operator>--</operator><name>ret</name></expr>;</expr_stmt></block></while>
        <while>while<condition>(<expr><name>x</name><operator>-</operator><name>ret</name><operator>*</operator><name>ret</name><operator>*</operator><name>ret</name><operator>&gt;</operator><literal type="number">3</literal><operator>*</operator><name>ret</name><operator>*</operator><operator>(</operator><name>ret</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition>
            <block type="pseudo"><expr_stmt><expr><operator>++</operator><name>ret</name></expr>;</expr_stmt></block></while>
        <return>return <expr><name>ret</name></expr>;</return>
    }</block></function>
    <comment type="block">/*uint64_t isqrt(unsigned __int128 const&amp;x){
        unsigned __int128 ret = sqrtl(x);
        while(ret&gt;0 &amp;&amp; ret*ret&gt;x) --ret;
        while(x-ret*ret&gt;2*ret)
            ++ret;
        return ret;
    }*/</comment>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint16_t</name></expr></argument>&gt;</argument_list></name></type> <name>saved</name></decl>;</decl_stmt>
    <comment type="line">// fast prime factorization from</comment>
    <comment type="line">// https://github.com/radii/msieve</comment>
    <function><type><name>uint64_t</name></type> <name>squfof_iter_better</name><parameter_list>(<parameter><decl><type><name>uint64_t</name> <specifier>const</specifier><modifier>&amp;</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <specifier>const</specifier><modifier>&amp;</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <specifier>const</specifier><modifier>&amp;</modifier></type><name>it_max</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>cutoff_div</name></decl></parameter>)</parameter_list><block>{
        <if>if<condition>(<expr><call><name>__gcd</name><argument_list>(<argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>k</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>!=</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><call><name>__gcd</name><argument_list>(<argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>k</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
        <comment type="line">//cerr &lt;&lt; "try: " &lt;&lt; x &lt;&lt; " " &lt;&lt; k &lt;&lt; "\n";</comment>
        <expr_stmt><expr><call><name><name>saved</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>uint64_t</name></type> <name>scaledn</name> <init>= <expr><name>k</name><operator>*</operator><name>x</name></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>scaledn</name><operator>&gt;&gt;</operator><literal type="number">62</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
        <decl_stmt><decl><type><name>uint32_t</name></type> <name>sqrtn</name> <init>= <expr><call><name>isqrt</name><argument_list>(<argument><expr><name>scaledn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>uint32_t</name></type> <name>cutoff</name> <init>= <expr><call><name>isqrt</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name>sqrtn</name></expr></argument>)</argument_list></call><operator>/</operator><name>cutoff_div</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>uint32_t</name></type> <name>q0</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>uint32_t</name></type> <name>p1</name> <init>= <expr><name>sqrtn</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>uint32_t</name></type> <name>q1</name> <init>= <expr><name>scaledn</name><operator>-</operator><name>p1</name><operator>*</operator><name>p1</name></expr></init></decl>;</decl_stmt>

        <if>if<condition>(<expr><name>q1</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
            <decl_stmt><decl><type><name>uint64_t</name></type> <name>factor</name> <init>= <expr><call><name>__gcd</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>p1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><ternary><condition><expr><name>factor</name><operator>==</operator><name>x</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr></then><else>:<expr><name>factor</name></expr></else></ternary></expr>;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name>uint32_t</name></type> <name>multiplier</name> <init>= <expr><literal type="number">2</literal><operator>*</operator><name>k</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>uint32_t</name></type> <name>coarse_cutoff</name> <init>= <expr><name>cutoff</name> <operator>*</operator> <name>multiplier</name></expr></init></decl>;</decl_stmt>
        <comment type="line">//cerr &lt;&lt; "at: " &lt;&lt; multiplier &lt;&lt; "\n";</comment>

        <decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>uint32_t</name></type> <name>p0</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>uint32_t</name></type> <name>sqrtq</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>it_max</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>q</name></decl>, <decl><type ref="prev"/><name>bits</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>

            <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>sqrtn</name> <operator>+</operator> <name>p1</name> <operator>-</operator> <name>q1</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>q</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>tmp</name> <operator>&gt;=</operator> <name>q1</name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>q</name> <operator>+=</operator> <name>tmp</name> <operator>/</operator> <name>q1</name></expr>;</expr_stmt></block></then></if>

            <expr_stmt><expr><name>p0</name> <operator>=</operator> <name>q</name> <operator>*</operator> <name>q1</name> <operator>-</operator> <name>p1</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>q0</name> <operator>=</operator> <name>q0</name> <operator>+</operator> <operator>(</operator><name>p1</name> <operator>-</operator> <name>p0</name><operator>)</operator> <operator>*</operator> <name>q</name></expr>;</expr_stmt>

            <if>if <condition>(<expr><name>q1</name> <operator>&lt;</operator> <name>coarse_cutoff</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>q1</name> <operator>/</operator> <call><name>__gcd</name><argument_list>(<argument><expr><name>q1</name></expr></argument>, <argument><expr><name>multiplier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if>if <condition>(<expr><name>tmp</name> <operator>&lt;</operator> <name>cutoff</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>saved</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>

            <expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>q0</name></expr>;</expr_stmt>
            <while>while<condition>(<expr><operator>!</operator><operator>(</operator><name>tmp</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{
                <expr_stmt><expr><name>bits</name><operator>++</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>tmp</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            }</block></while>
            <if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>bits</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>tmp</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><then> <block>{

                <expr_stmt><expr><name>sqrtq</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>isqrt</name><argument_list>(<argument><expr><name>q0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if>if <condition>(<expr><name>sqrtq</name> <operator>*</operator> <name>sqrtq</name> <operator>==</operator> <name>q0</name></expr>)</condition><then> <block>{
                    <for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>j</name><operator>&lt;</operator><call><name><name>saved</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block>{
                        <if>if<condition>(<expr><name><name>saved</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>sqrtq</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
                    }</block></for>
                    <if>if<condition>(<expr><name>j</name> <operator>==</operator> <call><name><name>saved</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
                    <comment type="line">//else cerr &lt;&lt; "skip " &lt;&lt; i &lt;&lt; "\n";;</comment>
                }</block></then></if>
            }</block></then></if>
            <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>sqrtn</name> <operator>+</operator> <name>p0</name> <operator>-</operator> <name>q0</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>q</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>tmp</name> <operator>&gt;=</operator> <name>q0</name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>q</name> <operator>+=</operator> <name>tmp</name> <operator>/</operator> <name>q0</name></expr>;</expr_stmt></block></then></if>

            <expr_stmt><expr><name>p1</name> <operator>=</operator> <name>q</name> <operator>*</operator> <name>q0</name> <operator>-</operator> <name>p0</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>q1</name> <operator>=</operator> <name>q1</name> <operator>+</operator> <operator>(</operator><name>p0</name> <operator>-</operator> <name>p1</name><operator>)</operator> <operator>*</operator> <name>q</name></expr>;</expr_stmt>

            <if>if <condition>(<expr><name>q0</name> <operator>&lt;</operator> <name>coarse_cutoff</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>q0</name> <operator>/</operator> <call><name>__gcd</name><argument_list>(<argument><expr><name>q0</name></expr></argument>, <argument><expr><name>multiplier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if>if <condition>(<expr><name>tmp</name> <operator>&lt;</operator> <name>cutoff</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>saved</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator> <name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
        }</block></for>

        <if>if<condition>(<expr><name>sqrtq</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{ <return>return <expr><literal type="number">1</literal></expr>;</return>}</block></then></if>
        <if>if<condition>(<expr><name>i</name> <operator>==</operator> <name>it_max</name></expr>)</condition><then> <block>{ <return>return <expr><literal type="number">1</literal></expr>;</return>}</block></then></if>

        <expr_stmt><expr><name>q0</name> <operator>=</operator> <name>sqrtq</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>p1</name> <operator>=</operator> <name>p0</name> <operator>+</operator> <name>sqrtq</name> <operator>*</operator> <operator>(</operator><operator>(</operator><name>sqrtn</name> <operator>-</operator> <name>p0</name><operator>)</operator> <operator>/</operator> <name>sqrtq</name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>q1</name> <operator>=</operator> <operator>(</operator><name>scaledn</name> <operator>-</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>p1</name> <operator>*</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>p1</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>q0</name></expr>;</expr_stmt>

        <for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>it_max</name></expr>;</condition><incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>q</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>

            <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>sqrtn</name> <operator>+</operator> <name>p1</name> <operator>-</operator> <name>q1</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>q</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>tmp</name> <operator>&gt;=</operator> <name>q1</name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>q</name> <operator>+=</operator> <name>tmp</name> <operator>/</operator> <name>q1</name></expr>;</expr_stmt></block></then></if>

            <expr_stmt><expr><name>p0</name> <operator>=</operator> <name>q</name> <operator>*</operator> <name>q1</name> <operator>-</operator> <name>p1</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>q0</name> <operator>=</operator> <name>q0</name> <operator>+</operator> <operator>(</operator><name>p1</name> <operator>-</operator> <name>p0</name><operator>)</operator> <operator>*</operator> <name>q</name></expr>;</expr_stmt>

            <if>if <condition>(<expr><name>p0</name> <operator>==</operator> <name>p1</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>q0</name> <operator>=</operator> <name>q1</name></expr>;</expr_stmt>
                <break>break;</break>
            }</block></then></if>

            <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>sqrtn</name> <operator>+</operator> <name>p0</name> <operator>-</operator> <name>q0</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>q</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>tmp</name> <operator>&gt;=</operator> <name>q0</name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>q</name> <operator>+=</operator> <name>tmp</name> <operator>/</operator> <name>q0</name></expr>;</expr_stmt></block></then></if>

            <expr_stmt><expr><name>p1</name> <operator>=</operator> <name>q</name> <operator>*</operator> <name>q0</name> <operator>-</operator> <name>p0</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>q1</name> <operator>=</operator> <name>q1</name> <operator>+</operator> <operator>(</operator><name>p0</name> <operator>-</operator> <name>p1</name><operator>)</operator> <operator>*</operator> <name>q</name></expr>;</expr_stmt>

            <if>if <condition>(<expr><name>p0</name> <operator>==</operator> <name>p1</name></expr>)</condition><then>
                <block type="pseudo"><break>break;</break></block></then></if>
        }</block></for>
        <if>if<condition>(<expr><name>j</name><operator>==</operator><name>it_max</name></expr>)</condition><then> <block>{<expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <literal type="string">"RNG\n"</literal></expr>;</expr_stmt> <return>return <expr><literal type="number">1</literal></expr>;</return>}</block></then></if> <comment type="line">// random fail</comment>

        <decl_stmt><decl><type><name>uint64_t</name></type> <name>factor</name> <init>= <expr><call><name>__gcd</name><argument_list>(<argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>q0</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>factor</name> <operator>==</operator> <name>x</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>factor</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
        <return>return <expr><name>factor</name></expr>;</return>
    }</block></function>
    <function><type><name>uint64_t</name></type> <name>squfof</name><parameter_list>(<parameter><decl><type><name>uint64_t</name> <specifier>const</specifier><modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list><block>{
        <decl_stmt><decl><specifier>static</specifier> <type><name><name>array</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>&gt;</argument_list></name></type> <name>multipliers</name><argument_list>{<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">3</literal><operator>*</operator><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">3</literal><operator>*</operator><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">3</literal><operator>*</operator><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">5</literal><operator>*</operator><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">5</literal><operator>*</operator><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">7</literal><operator>*</operator><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">3</literal><operator>*</operator><literal type="number">5</literal><operator>*</operator><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">3</literal><operator>*</operator><literal type="number">5</literal><operator>*</operator><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">3</literal><operator>*</operator><literal type="number">7</literal><operator>*</operator><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">5</literal><operator>*</operator><literal type="number">7</literal><operator>*</operator><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">3</literal><operator>*</operator><literal type="number">5</literal><operator>*</operator><literal type="number">7</literal><operator>*</operator><literal type="number">11</literal></expr></argument>}</argument_list></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>uint64_t</name></type> <name>cbrt_x</name> <init>= <expr><call><name>icbrt</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>cbrt_x</name><operator>*</operator><name>cbrt_x</name><operator>*</operator><name>cbrt_x</name> <operator>==</operator> <name>x</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>cbrt_x</name></expr>;</return></block></then></if>

        <comment type="line">//uint32_t iter_lim = isqrt(isqrt(x))+10;</comment>
        <decl_stmt><decl><type><name>uint32_t</name></type> <name>iter_lim</name> <init>= <expr><literal type="number">300</literal></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>uint32_t</name></type> <name>iter_fact</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>iter_fact</name><operator>&lt;</operator><literal type="number">20000</literal></expr>;</condition><incr><expr><name>iter_fact</name><operator>*=</operator><literal type="number">4</literal></expr></incr>)</control><block>{
            <for>for<control>(<init><decl><type><name>uint32_t</name> <specifier>const</specifier><modifier>&amp;</modifier></type><name>k</name> <range>: <expr><name>multipliers</name></expr></range></decl></init>)</control><block>{
                <if>if<condition>(<expr><call><name><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>max</name></name><argument_list>()</argument_list></call><operator>/</operator><name>k</name><operator>&lt;=</operator><name>x</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if> <comment type="line">//would overflow</comment>
                <decl_stmt><decl><type><name>uint32_t</name> <specifier>const</specifier></type> <name>it_max</name> <init>= <expr><name>iter_fact</name><operator>*</operator><name>iter_lim</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>uint64_t</name></type> <name>factor</name> <init>= <expr><call><name>squfof_iter_better</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>it_max</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if<condition>(<expr><name>factor</name><operator>==</operator><literal type="number">1</literal> <operator>||</operator> <name>factor</name><operator>==</operator><name>x</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
                <return>return <expr><name>factor</name></expr>;</return>
            }</block></for>
        }</block></for>
        <expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <literal type="string">"failed to factor: "</literal> <operator>&lt;&lt;</operator> <name>x</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    }</block></function>

    <function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
    <type><name><typename>typename</typename> <name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></name></expr></argument>, <argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></name></type> <name>factorize_brute</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{
        <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>ret</name></decl>;</decl_stmt>
        <while>while<condition>(<expr><name>x</name><operator>%</operator><literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{
            <expr_stmt><expr><name>x</name><operator>/=</operator><literal type="number">2</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>
        <for>for<control>(<init><decl><type><name>uint32_t</name></type> <name>i</name><init>=<expr><literal type="number">3</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>*</operator><operator>(</operator><name>T</name><operator>)</operator><name>i</name> <operator>&lt;=</operator> <name>x</name></expr>;</condition><incr><expr><name>i</name><operator>+=</operator><literal type="number">2</literal></expr></incr>)</control><block>{
            <while>while<condition>(<expr><name>x</name><operator>%</operator><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{
                <expr_stmt><expr><name>x</name><operator>/=</operator><name>i</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></while>
        }</block></for>
        <if>if<condition>(<expr><name>x</name><operator>&gt;</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <return>return <expr><name>ret</name></expr>;</return>
    }</block></function>

    <function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
    <type><name><typename>typename</typename> <name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></name></expr></argument>, <argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></name></type> <name>factorize</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{
        <comment type="line">//cerr &lt;&lt; "factor: " &lt;&lt; x &lt;&lt; "\n";</comment>
        <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>ret</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>trial_limit</name> <init>= <expr><literal type="number">5000</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>auto</name></type> <name>trial</name> <init>= <expr><lambda><capture>[<argument><modifier>&amp;</modifier></argument>]</capture><parameter_list>(<parameter><decl><type><name>uint32_t</name> <specifier>const</specifier><modifier>&amp;</modifier></type><name>i</name></decl></parameter>)</parameter_list><block>{
			<while>while<condition>(<expr><name>x</name><operator>%</operator><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{
                <expr_stmt><expr><name>x</name><operator>/=</operator><name>i</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></while>
		}</block></lambda></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>trial</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>trial</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>uint32_t</name></type> <name>i</name><init>=<expr><literal type="number">5</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>trial_limit</name> <operator>&amp;&amp;</operator> <name>i</name><operator>*</operator><name>i</name> <operator>&lt;=</operator> <name>x</name></expr>;</condition><incr><expr><name>i</name><operator>+=</operator><name>j</name></expr><operator>,</operator> <expr><name>j</name><operator>=</operator><literal type="number">6</literal><operator>-</operator><name>j</name></expr></incr>)</control><block>{
            <expr_stmt><expr><call><name>trial</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <if>if<condition>(<expr><name>x</name><operator>&gt;</operator><literal type="number">1</literal></expr>)</condition><then><block>{
            <decl_stmt><decl><specifier>static</specifier> <type><name><name>stack</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>s</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <while>while<condition>(<expr><operator>!</operator><call><name><name>s</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{
                <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name><name>s</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <if>if<condition>(<expr><operator>!</operator><call><name>miller_rabin</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
                    <decl_stmt><decl><type><name>T</name></type> <name>factor</name> <init>= <expr><call><name>squfof</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if<condition>(<expr><name>factor</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>factor</name> <operator>==</operator> <name>x</name></expr>)</condition><then><block>{<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>ret</name></expr>;</return>}</block></then></if>
                    <comment type="line">//cerr &lt;&lt; x &lt;&lt; " -&gt; " &lt;&lt; factor &lt;&lt; "\n";</comment>
                    <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>factor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>x</name><operator>/</operator><name>factor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></while>
        }</block></then></if>
        <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>ret</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>ret</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>ret</name></expr>;</return>
    }</block></function>
}</block></namespace>
<comment type="block">/*
 * How to Use: 
 * auto x= NT::factorize(n);// x is a data structure(i guess vector) containing list of primes. ex 12= 2,2,3 
 * for(auto itr: x)
 * {
 * 	print itr;
 * }
 * */</comment>
<function><type><name>bool</name></type> <name>isPrime</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> 
<block>{ 
    <comment type="line">// Corner cases </comment>
    <if>if <condition>(<expr><name>n</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><then>  <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if> 
    <if>if <condition>(<expr><name>n</name> <operator>&lt;=</operator> <literal type="number">3</literal></expr>)</condition><then>  <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if> 
  
    <comment type="line">// This is checked so that we can skip  </comment>
    <comment type="line">// middle five numbers in below loop </comment>
    <if>if <condition>(<expr><name>n</name><operator>%</operator><literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>n</name><operator>%</operator><literal type="number">3</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if> 
  
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">5</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>*</operator><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>=</operator><name>i</name><operator>+</operator><literal type="number">6</literal></expr></incr>)</control> 
        <block type="pseudo"><if>if <condition>(<expr><name>n</name><operator>%</operator><name>i</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>n</name><operator>%</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">2</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> 
           <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if></block></for> 
  
    <return>return <expr><literal type="boolean">true</literal></expr>;</return> 
}</block></function> 

<function><type><name>int32_t</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
	<if>if<condition>(<expr><name>n</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></then></if>
	<if>if<condition>(<expr><call><name>isPrime</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>n</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></then></if>
	<decl_stmt><decl><type><name>auto</name></type> <name>v</name><init>=<expr><call><name><name>NT</name><operator>::</operator><name>factorize</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>mp</name></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>auto</name></type> <name>x</name><range>: <expr><name>v</name></expr></range></decl></init>)</control>
	<block>{
		<expr_stmt><expr><name><name>mp</name><index>[<expr><name>x</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
	}</block></for>
	<if>if<condition>(<expr><call><name><name>mp</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&gt;=</operator><literal type="number">2</literal></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	}</block></then>
	<else>else
	<block>{
		<decl_stmt><decl><type><name>auto</name></type> <name>x</name><init>=<expr><operator>*</operator><operator>(</operator><call><name><name>mp</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>x</name><operator>.</operator><name>first</name></name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	}</block></else></if>
	
}</block></function>
</unit>
