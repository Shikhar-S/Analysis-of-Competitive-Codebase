<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29782321_64402866.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
 
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mkp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAXN</name> <init>= <expr><literal type="number">5</literal> <operator>*</operator> <literal type="number">100100</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name><name>uf</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>sz</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name>comp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>g</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name><name>s</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
 
<function><specifier>inline</specifier> <type><name>int</name></type> <name>find</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><ternary><condition><expr><name><name>uf</name><index>[<expr><name>x</name></expr>]</index></name></expr> ?</condition><then> <expr><name><name>uf</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>find</name><argument_list>(<argument><expr><name><name>uf</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>x</name></expr></else></ternary></expr>;</return> }</block></function>
<function><type><name>void</name></type> <name>join</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{
	<if>if<condition>(<expr><operator>(</operator><name>x</name> <operator>=</operator> <call><name>find</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>(</operator><name>y</name> <operator>=</operator> <call><name>find</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <operator>!</operator><name>x</name> <operator>||</operator> <operator>!</operator><name>y</name></expr>)</condition><then>
		<block type="pseudo"><return>return;</return></block></then></if>
	<expr_stmt><expr><name>comp</name><operator>--</operator></expr>;</expr_stmt>
	<if>if<condition>(<expr><name><name>sz</name><index>[<expr><name>x</name></expr>]</index></name> <operator>&lt;</operator> <name><name>sz</name><index>[<expr><name>y</name></expr>]</index></name></expr>)</condition><then>
		<block type="pseudo"><expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
	<expr_stmt><expr><name><name>uf</name><index>[<expr><name>y</name></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>g</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sz</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+=</operator> <name><name>sz</name><index>[<expr><name>y</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
}</block></function>
 
<struct>struct <name>no</name>
<block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>beg</name></decl>, <decl><type ref="prev"/><name>end</name></decl>, <decl><type ref="prev"/><name>mid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>q</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>no</name> <modifier>*</modifier></type><name>l</name></decl>, <modifier>*</modifier><decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
	<constructor><name>no</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>beg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>beg</name><argument_list>(<argument><expr><name>beg</name></expr></argument>)</argument_list></call>, <call><name>end</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call>, <call><name>mid</name><argument_list>(<argument><expr><operator>(</operator><name>beg</name> <operator>+</operator> <name>end</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call>, <call><name>q</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>
	</member_init_list><block>{
		<if>if<condition>(<expr><name>beg</name> <operator>!=</operator> <name>end</name></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>l</name> <operator>=</operator> <operator>new</operator> <call><name>no</name><argument_list>(<argument><expr><name>beg</name></expr></argument>, <argument><expr><name>mid</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name>r</name> <operator>=</operator> <operator>new</operator> <call><name>no</name><argument_list>(<argument><expr><name>mid</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
	}</block></constructor>
	<function><type><name>void</name></type> <name>upd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list>
	<block>{
		<if>if<condition>(<expr><name>b</name> <operator>&lt;</operator> <name>beg</name> <operator>||</operator> <name>end</name> <operator>&lt;</operator> <name>a</name></expr>)</condition><then>
			<block type="pseudo"><return>return;</return></block></then></if>
		<if>if<condition>(<expr><name>a</name> <operator>&lt;=</operator> <name>beg</name> <operator>&amp;&amp;</operator> <name>end</name> <operator>&lt;=</operator> <name>b</name></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><call><name>join</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>swap</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
		<expr_stmt><expr><call><name><name>l</name><operator>-&gt;</operator><name>upd</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name><name>r</name><operator>-&gt;</operator><name>upd</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	<function><type><name>void</name></type> <name>dfs</name><parameter_list>()</parameter_list>
	<block>{
		<if>if<condition>(<expr><name>beg</name> <operator>==</operator> <name>end</name></expr>)</condition><then>
			<block type="pseudo"><return>return;</return></block></then></if>
		<expr_stmt><expr><call><name>join</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>q</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>join</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>q</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>l</name><operator>-&gt;</operator><name>dfs</name></name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name><name>r</name><operator>-&gt;</operator><name>dfs</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>
</public>}</block>;</struct>
 
<function><type><name>void</name></type> <name>f</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><call><name>prev</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>lower_bound</name><argument_list>(<argument><expr><call><name>mkp</name><argument_list>(<argument><expr><name>v</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>p</name> <init>= <expr><operator>*</operator><name>it</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>s</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>erase</name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if<condition>(<expr><name><name>p</name><operator>.</operator><name>first</name></name> <operator>&lt;=</operator> <name>v</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><then>
		<block type="pseudo"><expr_stmt><expr><name><name>s</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>emplace</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>first</name></name></expr></argument>, <argument><expr><name>v</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
	<if>if<condition>(<expr><name>v</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;=</operator> <name><name>p</name><operator>.</operator><name>second</name></name></expr>)</condition><then>
		<block type="pseudo"><expr_stmt><expr><name><name>s</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>emplace</name><argument_list>(<argument><expr><name>v</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
 
}</block></function>

<function><type><name>void</name></type> <name>printAns</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d "</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><specifier>const</specifier> <name>int</name><modifier>&amp;</modifier></type> <name>x</name> <range>: <expr><name><name>g</name><index>[<expr><name>v</name></expr>]</index></name></expr></range></decl></init>)</control>
		<block type="pseudo"><expr_stmt><expr><call><name>printAns</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name>comp</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>no</name></type> <name>seg</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>emplace</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>u</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>m</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>u</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block type="pseudo"><for>for<control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier></type><modifier>&amp;</modifier>[<name>beg</name></decl>, <decl><type ref="prev"/><name>end</name>] <range>: <expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></range></decl></init>)</control>
			<block type="pseudo"><expr_stmt><expr><call><name><name>seg</name><operator>.</operator><name>upd</name></name><argument_list>(<argument><expr><name>beg</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for></block></for>
	<expr_stmt><expr><call><name><name>seg</name><operator>.</operator><name>dfs</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><name>comp</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function></unit>
