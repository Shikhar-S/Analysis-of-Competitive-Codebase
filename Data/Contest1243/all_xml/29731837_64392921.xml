<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29731837_64392921.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = a; i &lt; (b); ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>trav</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(auto&amp; a : x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>allin</name><parameter_list>(<parameter><type><name>a</name></type></parameter> , <parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(auto a : x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>begin(x), end(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(int)(x).size()</cpp:value></cpp:define>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>

<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T1</name></parameter>, <parameter><type><name>class</name></type> <name>T2</name></parameter>&gt;</parameter_list></template>
<type><name>istream</name> <modifier>&amp;</modifier></type><name>operator<name>&gt;&gt;</name></name><parameter_list>(<parameter><decl><type><name>istream</name> <modifier>&amp;</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>T1</name></expr></argument>, <argument><expr><name>T2</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>P</name></decl></parameter>)</parameter_list><block>{
	<expr_stmt><expr><name>in</name> <operator>&gt;&gt;</operator> <name><name>P</name><operator>.</operator><name>first</name></name> <operator>&gt;&gt;</operator> <name><name>P</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt>
	<return>return <expr><name>in</name></expr>;</return>
}</block></function>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T1</name></parameter>, <parameter><type><name>class</name></type> <name>T2</name></parameter>&gt;</parameter_list></template>
<type><name>ostream</name> <modifier>&amp;</modifier></type><name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name> <modifier>&amp;</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>T1</name></expr></argument>, <argument><expr><name>T2</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>P</name></decl></parameter>)</parameter_list><block>{
	<expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <literal type="string">"("</literal> <operator>&lt;&lt;</operator> <name><name>P</name><operator>.</operator><name>first</name></name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal> <operator>&lt;&lt;</operator> <name><name>P</name><operator>.</operator><name>second</name></name> <operator>&lt;&lt;</operator> <literal type="string">")"</literal></expr>;</expr_stmt>
	<return>return <expr><name>out</name></expr>;</return>
}</block></function>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name>istream</name> <modifier>&amp;</modifier></type><name>operator<name>&gt;&gt;</name></name><parameter_list>(<parameter><decl><type><name>istream</name> <modifier>&amp;</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>arr</name></decl></parameter>)</parameter_list><block>{
	<for>for<control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>x</name><operator>:</operator> <name>arr</name></expr></init>)</control> <block type="pseudo"><expr_stmt><expr><name>in</name> <operator>&gt;&gt;</operator> <name>x</name></expr>;</expr_stmt></block></for>
	<return>return <expr><name>in</name></expr>;</return>
}</block></function>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name>ostream</name> <modifier>&amp;</modifier></type><name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name> <modifier>&amp;</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>arr</name></decl></parameter>)</parameter_list><block>{
	<for>for<control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>x</name><operator>:</operator> <name>arr</name></expr></init>)</control> <block type="pseudo"><expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <name>x</name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block></for> <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
	<return>return <expr><name>out</name></expr>;</return>
}</block></function>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name>istream</name> <modifier>&amp;</modifier></type><name>operator<name>&gt;&gt;</name></name><parameter_list>(<parameter><decl><type><name>istream</name> <modifier>&amp;</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name><name>deque</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>arr</name></decl></parameter>)</parameter_list><block>{
	<for>for<control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>x</name><operator>:</operator> <name>arr</name></expr></init>)</control> <block type="pseudo"><expr_stmt><expr><name>in</name> <operator>&gt;&gt;</operator> <name>x</name></expr>;</expr_stmt></block></for>
	<return>return <expr><name>in</name></expr>;</return>
}</block></function>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name>ostream</name> <modifier>&amp;</modifier></type><name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name> <modifier>&amp;</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>deque</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>arr</name></decl></parameter>)</parameter_list><block>{
	<for>for<control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>x</name><operator>:</operator> <name>arr</name></expr></init>)</control> <block type="pseudo"><expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <name>x</name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block></for> <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
	<return>return <expr><name>out</name></expr>;</return>
}</block></function>


<function><type><name>int32_t</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> <operator>,</operator> <expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>k</name></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>k</name><operator>--</operator></expr>)</condition><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>string</name></type> <name>a</name></decl> , <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>a</name><operator>&gt;&gt;</operator><name>b</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>dif</name></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control><block>{
			<if>if<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>dif</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
		}</block></for>
		<decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument> ,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>F</name></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>auto</name></type> <name>w</name> <range>: <expr><name>dif</name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><name><name>F</name><index>[<expr><name><name>a</name><index>[<expr><name>w</name></expr>]</index></name></expr>]</index></name> <operator>++</operator></expr> <operator>,</operator> <expr><name><name>F</name><index>[<expr><name><name>b</name><index>[<expr><name>w</name></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block></for>
		<decl_stmt><decl><type><name>bool</name></type> <name>can</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>auto</name></type> <name>w</name> <range>: <expr><name>F</name></expr></range></decl></init>)</control><block>{
			<if>if<condition>(<expr><name><name>w</name><operator>.</operator><name>S</name></name> <operator>%</operator><literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>can</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt></block></then></if> 
		}</block></for>
		<if>if<condition>(<expr><call><name><name>dif</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Yes"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
		}</block></then>
		<elseif>else <if>if<condition>(<expr><name>can</name></expr>)</condition><then><block>{
			<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pii</name></expr></argument>&gt;</argument_list></name></type> <name>moves</name></decl>;</decl_stmt>
			<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control><block>{
				<if>if<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block>{
					<decl_stmt><decl><type><name>bool</name></type> <name>jf</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
					<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name> <operator>+</operator><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>j</name> <operator>++</operator></expr></incr>)</control><block>{
						<if>if<condition>(<expr><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <name><name>b</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>a</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block>{
							<expr_stmt><expr><call><name><name>moves</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>pii</name><argument_list>(<argument><expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr></argument> , <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> , <argument><expr><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><name>jf</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
						}</block></then></if>
						<if>if<condition>(<expr><name>jf</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
					}</block></for>
					<if>if<condition>(<expr><name>jf</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
					<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>j</name> <operator>++</operator></expr></incr>)</control><block>{
						<if>if<condition>(<expr><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <name><name>b</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>b</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block>{
							<expr_stmt><expr><call><name><name>moves</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>pii</name><argument_list>(<argument><expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr></argument> , <argument><expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument> , <argument><expr><name><name>b</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name>moves</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>pii</name><argument_list>(<argument><expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr></argument> , <argument><expr><name>i</name> <operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> , <argument><expr><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><name>jf</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
						}</block></then></if>
						<if>if<condition>(<expr><name>jf</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
					}</block></for>
					<if>if<condition>(<expr><name>jf</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
				}</block></then></if>
			}</block></for>
			<if>if<condition>(<expr><name>a</name> <operator>!=</operator> <name>b</name></expr>)</condition><then><block>{
				<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
			}</block></then>
			<else>else<block>{
				<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Yes"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name><name>moves</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
				<for>for<control>(<init><decl><type><name>auto</name></type> <name>w</name> <range>: <expr><name>moves</name></expr></range></decl></init>)</control><block>{
					<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>w</name><operator>.</operator><name>F</name></name><operator>&lt;&lt;</operator><literal type="string">" "</literal> <operator>&lt;&lt;</operator><name><name>w</name><operator>.</operator><name>S</name></name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
				}</block></for>
			}</block></else></if>
		}</block></then></if></elseif>
		<else>else<block>{
			<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
		}</block></else></if>
	}</block></while>
}</block></function></unit>
