<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29728338_64377779.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x).begin(), (x).end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rall</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x).rbegin(), (x).rend()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sq</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) * (x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRECISION</name></cpp:macro> <cpp:value>30</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>int</name></type> <name>check_mod</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><ternary><condition><expr><operator>(</operator><name>a</name> <operator>%</operator> <name>b</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return> }</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>maxi</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return;</return> }</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>mini</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return;</return> }</block></function>

<function><type><name>void</name></type> <name>sieve</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>prime</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>range</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>prime</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>range</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>prime</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>prime</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>*</operator> <name>i</name> <operator>&lt;=</operator> <name>range</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><if>if <condition>(<expr><name><name>prime</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>range</name></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <name>i</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>prime</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></for></block></then></if></block></for> <return>return;</return> }</block></function>
<function><type><name>void</name></type> <name>sieve</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>prime</name></decl></parameter>, <parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>prime_list</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>range</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>prime</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>range</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>prime</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>prime</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>*</operator> <name>i</name> <operator>&lt;=</operator> <name>range</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><if>if <condition>(<expr><name><name>prime</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block>{ <expr_stmt><expr><call><name><name>prime_list</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>range</name></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <name>i</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>prime</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></for> }</block></then></if></block></for> <return>return;</return> }</block></function>
<function><type><name>void</name></type> <name>sieve</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>prime</name></decl></parameter>, <parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>prime_list</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>range</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>prime</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>range</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>prime</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>prime</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <for>for <control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>*</operator> <name>i</name> <operator>&lt;=</operator> <name>range</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><if>if <condition>(<expr><name><name>prime</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block>{ <expr_stmt><expr><call><name><name>prime_list</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <for>for <control>(<init><decl><type><name>ll</name></type> <name>j</name> <init>= <expr><operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <operator>(</operator><name>ll</name><operator>)</operator><name>range</name></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <name>i</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>prime</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></for> }</block></then></if></block></for> <return>return;</return> }</block></function>
<function><type><name>bool</name></type> <name>is_letter</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{ <if>if <condition>(<expr><operator>(</operator><literal type="char">'a'</literal> <operator>&lt;=</operator> <name>a</name> <operator>&amp;&amp;</operator> <name>a</name> <operator>&lt;=</operator> <literal type="char">'z'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><literal type="char">'A'</literal> <operator>&lt;=</operator> <name>a</name> <operator>&amp;&amp;</operator> <name>a</name> <operator>&lt;=</operator> <literal type="char">'Z'</literal><operator>)</operator></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if> <return>return <expr><literal type="boolean">false</literal></expr>;</return> }</block></function>
<function><type><name>bool</name></type> <name>is_vowel</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>string</name></type> <name>vowels</name> <init>= <expr><literal type="string">"aeiouyAEIOUY"</literal></expr></init></decl>;</decl_stmt> <for>for <control>(<init><decl><type><name>char</name></type> <name>c</name> <range>: <expr><name>vowels</name></expr></range></decl></init>)</control> <block type="pseudo"><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>a</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if></block></for> <return>return <expr><literal type="boolean">false</literal></expr>;</return> }</block></function>
<function><type><name>bool</name></type> <name>is_valid</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>N</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>M</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><literal type="number">0</literal> <operator>&lt;=</operator> <name>i</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>N</name> <operator>&amp;&amp;</operator> <literal type="number">0</literal> <operator>&lt;=</operator> <name>j</name> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;</operator> <name>M</name></expr>;</return> }</block></function>
<function><type><name>bool</name></type> <name>all_adjacents_valid</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>N</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>M</name></decl></parameter>)</parameter_list> <block>{ <for>for <control>(<init><decl><type><name>int</name></type> <name>di</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>di</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>di</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><for>for <control>(<init><decl><type><name>int</name></type> <name>dj</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>dj</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>dj</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><if>if <condition>(<expr><call><name>sq</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>sq</name><argument_list>(<argument><expr><name>dj</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_valid</name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <name>di</name></expr></argument>, <argument><expr><name>j</name> <operator>+</operator> <name>dj</name></expr></argument>, <argument><expr><name>N</name></expr></argument>, <argument><expr><name>M</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if></block></for></block></for> <return>return <expr><literal type="boolean">true</literal></expr>;</return> }</block></function>
<function><type><name>bool</name></type> <name>is_prime</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{ <if>if <condition>(<expr><name>a</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if> <if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>a</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator> <name>a</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if> <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>*</operator> <name>i</name> <operator>&lt;=</operator> <name>a</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block type="pseudo"><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>a</name> <operator>%</operator> <name>i</name><operator>)</operator></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if></block></for> <return>return <expr><literal type="boolean">true</literal></expr>;</return> }</block></function>
<function><type><name>bool</name></type> <name>is_prime</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{ <if>if <condition>(<expr><name>a</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if> <if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>a</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator> <name>a</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if> <for>for <control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>*</operator> <name>i</name> <operator>&lt;=</operator> <name>a</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block type="pseudo"><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>a</name> <operator>%</operator> <name>i</name><operator>)</operator></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if></block></for> <return>return <expr><literal type="boolean">true</literal></expr>;</return> }</block></function>
<function><type><name>bool</name></type> <name>is_palindrome</name><parameter_list>(<parameter><decl><type><name>string</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name><name>s</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>mid</name> <init>= <expr><name>len</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt> <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>mid</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>s</name><index>[<expr><name>len</name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if></block></for> <return>return <expr><literal type="boolean">true</literal></expr>;</return> }</block></function>
<function><type><name>bool</name></type> <name>is_palindrome</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>mid</name> <init>= <expr><name>len</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt> <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>mid</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>s</name><index>[<expr><name>len</name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if></block></for> <return>return <expr><literal type="boolean">true</literal></expr>;</return> }</block></function>
<function><type><name>int</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <while>while <condition>(<expr><name>b</name></expr>)</condition> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>mod</name> <init>= <expr><name>a</name> <operator>%</operator> <name>b</name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt> <expr_stmt><expr><name>b</name> <operator>=</operator> <name>mod</name></expr>;</expr_stmt> }</block></while> <return>return <expr><name>a</name></expr>;</return> }</block></function>
<function><type><name>int</name></type> <name>lcm</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name>a</name> <operator>/</operator> <call><name>gcd</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>b</name></expr>;</return> }</block></function>
<function><type><name>int</name></type> <name>binpow</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> <while>while <condition>(<expr><name>b</name></expr>)</condition> <block>{ <if>if <condition>(<expr><name>b</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>res</name> <operator>*=</operator> <name>a</name></expr>;</expr_stmt></block></then></if> <expr_stmt><expr><name>a</name> <operator>*=</operator> <name>a</name></expr>;</expr_stmt> <expr_stmt><expr><name>b</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt> }</block></while> <return>return <expr><name>res</name></expr>;</return> }</block></function>
<function><type><name>int</name></type> <name>binpow</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>MODULO</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> <while>while <condition>(<expr><name>b</name></expr>)</condition> <block>{ <if>if <condition>(<expr><name>b</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{ <expr_stmt><expr><name>res</name> <operator>*=</operator> <name>a</name></expr>;</expr_stmt> <expr_stmt><expr><name>res</name> <operator>%=</operator> <name>MODULO</name></expr>;</expr_stmt> }</block></then></if> <expr_stmt><expr><name>a</name> <operator>*=</operator> <name>a</name></expr>;</expr_stmt>  <expr_stmt><expr><name>a</name> <operator>%=</operator> <name>MODULO</name></expr>;</expr_stmt> <expr_stmt><expr><name>b</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt> }</block></while> <return>return <expr><name>res</name></expr>;</return> }</block></function>
<function><type><name>ll</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <while>while <condition>(<expr><name>b</name></expr>)</condition> <block>{ <decl_stmt><decl><type><name>ll</name></type> <name>mod</name> <init>= <expr><name>a</name> <operator>%</operator> <name>b</name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt> <expr_stmt><expr><name>b</name> <operator>=</operator> <name>mod</name></expr>;</expr_stmt> }</block></while> <return>return <expr><name>a</name></expr>;</return> }</block></function>
<function><type><name>ll</name></type> <name>lcm</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name>a</name> <operator>/</operator> <call><name>gcd</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>b</name></expr>;</return> }</block></function>
<function><type><name>ll</name></type> <name>binpow</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>ll</name></type> <name>res</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> <while>while <condition>(<expr><name>b</name></expr>)</condition> <block>{ <if>if <condition>(<expr><name>b</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>res</name> <operator>*=</operator> <name>a</name></expr>;</expr_stmt></block></then></if> <expr_stmt><expr><name>a</name> <operator>*=</operator> <name>a</name></expr>;</expr_stmt> <expr_stmt><expr><name>b</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt> }</block></while> <return>return <expr><name>res</name></expr>;</return> }</block></function>
<function><type><name>ll</name></type> <name>binpow</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>MODULO</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>ll</name></type> <name>res</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> <while>while <condition>(<expr><name>b</name></expr>)</condition> <block>{ <if>if <condition>(<expr><name>b</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{ <expr_stmt><expr><name>res</name> <operator>*=</operator> <name>a</name></expr>;</expr_stmt> <expr_stmt><expr><name>res</name> <operator>%=</operator> <name>MODULO</name></expr>;</expr_stmt> }</block></then></if> <expr_stmt><expr><name>a</name> <operator>*=</operator> <name>a</name></expr>;</expr_stmt>  <expr_stmt><expr><name>a</name> <operator>%=</operator> <name>MODULO</name></expr>;</expr_stmt> <expr_stmt><expr><name>b</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt> }</block></while> <return>return <expr><name>res</name></expr>;</return> }</block></function>
<function><type><name>double</name></type> <name>distance</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>X1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>Y1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>X2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>Y2</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>sqrt</name><argument_list>(<argument><expr><call><name>sq</name><argument_list>(<argument><expr><name>X1</name> <operator>-</operator> <name>X2</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>sq</name><argument_list>(<argument><expr><name>Y1</name> <operator>-</operator> <name>Y2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
<function><type><name>double</name></type> <name>distance</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>X1</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>Y1</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>X2</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>Y2</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>sqrt</name><argument_list>(<argument><expr><call><name>sq</name><argument_list>(<argument><expr><name>X1</name> <operator>-</operator> <name>X2</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>sq</name><argument_list>(<argument><expr><name>Y1</name> <operator>-</operator> <name>Y2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
<function><type><name>double</name></type> <name>distance</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>X1</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>Y1</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>X2</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>Y2</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>sqrt</name><argument_list>(<argument><expr><call><name>sq</name><argument_list>(<argument><expr><name>X1</name> <operator>-</operator> <name>X2</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>sq</name><argument_list>(<argument><expr><name>Y1</name> <operator>-</operator> <name>Y2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
<function><type><name>string</name></type> <name>binary</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>N</name></decl></parameter>)</parameter_list> <block>{ <if>if <condition>(<expr><operator>!</operator><name>N</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="string">"0"</literal></expr>;</return></block></then></if> <decl_stmt><decl><type><name>string</name></type> <name>bin</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt> <while>while <condition>(<expr><name>N</name></expr>)</condition> <block>{ <expr_stmt><expr><name>bin</name> <operator>+=</operator> <literal type="char">'0'</literal> <operator>+</operator> <operator>(</operator><name>N</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>N</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt> }</block></while> <expr_stmt><expr><call><name>reverse</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>bin</name></expr>;</return> }</block></function>
<function><type><name>string</name></type> <name>binary</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>N</name></decl></parameter>)</parameter_list> <block>{ <if>if <condition>(<expr><operator>!</operator><name>N</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="string">"0"</literal></expr>;</return></block></then></if> <decl_stmt><decl><type><name>string</name></type> <name>bin</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt> <while>while <condition>(<expr><name>N</name></expr>)</condition> <block>{ <expr_stmt><expr><name>bin</name> <operator>+=</operator> <literal type="char">'0'</literal> <operator>+</operator> <operator>(</operator><name>N</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>N</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt> }</block></while> <expr_stmt><expr><call><name>reverse</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>bin</name></expr>;</return> }</block></function>
<function><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name></type> <name>binary_v</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>N</name></decl></parameter>)</parameter_list> <block>{ <if>if <condition>(<expr><operator>!</operator><name>N</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><block>{ <expr><literal type="char">'0'</literal></expr> }</block></expr>;</return></block></then></if> <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name></type> <name>bin</name></decl>;</decl_stmt> <while>while <condition>(<expr><name>N</name></expr>)</condition> <block>{ <expr_stmt><expr><call><name><name>bin</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="char">'0'</literal> <operator>+</operator> <operator>(</operator><name>N</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>N</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt> }</block></while> <expr_stmt><expr><call><name>reverse</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>bin</name></expr>;</return> }</block></function>
<function><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name></type> <name>binary_v</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>N</name></decl></parameter>)</parameter_list> <block>{ <if>if <condition>(<expr><operator>!</operator><name>N</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><block>{ <expr><literal type="char">'0'</literal></expr> }</block></expr>;</return></block></then></if> <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name></type> <name>bin</name></decl>;</decl_stmt> <while>while <condition>(<expr><name>N</name></expr>)</condition> <block>{ <expr_stmt><expr><call><name><name>bin</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="char">'0'</literal> <operator>+</operator> <operator>(</operator><name>N</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>N</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt> }</block></while> <expr_stmt><expr><call><name>reverse</name> <argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>bin</name></expr>;</return> }</block></function>
           
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>INF</name> <init>= <expr><literal type="number">2147483547</literal></expr></init></decl>;</decl_stmt>           <comment type="line">// Max int value - 100 so it will not overflow</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MODULO</name> <init>= <expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>_MODULO</name> <init>= <expr><literal type="number">998244353</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>INF64</name> <init>= <expr><literal type="number">9223372036854775707</literal></expr></init></decl>;</decl_stmt> <comment type="line">// Max long long value - 100 so it will not overflow</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>MODULO64</name> <init>= <expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>_MODULO64</name> <init>= <expr><literal type="number">998244353</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>epsilon</name> <init>= <expr><literal type="number">10e-6</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>PI</name> <init>= <expr><call><name>acos</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>                                   
<block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LOCAL</name></cpp:ifdef>
	<expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"input.txt"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>auto</name></type> <name>t1</name> <init>= <expr><call><name><name>chrono</name><operator>::</operator><name>high_resolution_clock</name><operator>::</operator><name>now</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cerr &lt;&lt; #x &lt;&lt; " = " &lt;&lt; x &lt;&lt; "\n";</cpp:value></cpp:define>                        
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>tt</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>tt</name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>tt</name><operator>--</operator></expr>)</condition> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>s</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>a</name></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
			<block type="pseudo"><if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>a</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></block></for>
		<if>if <condition>(<expr><call><name><name>a</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"NO"</literal> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
			<continue>continue;</continue>
		}</block></then></if>
		<expr_stmt><expr><call><name>debug</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>debug</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name><name>t</name><index>[<expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>!=</operator> <name><name>t</name><index>[<expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>||</operator> <name><name>s</name><index>[<expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>!=</operator> <name><name>s</name><index>[<expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"NO"</literal> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt></block></then>
		<else>else
			<block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES"</literal> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt></block></else></if>
	}</block></while>                                                                                                                  
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LOCAL</name></cpp:ifdef>
	<decl_stmt><decl><type><name>auto</name></type> <name>t2</name> <init>= <expr><call><name><name>chrono</name><operator>::</operator><name>high_resolution_clock</name><operator>::</operator><name>now</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <literal type="string">"Running time "</literal> <operator>&lt;&lt;</operator> <call><name><name>chrono</name><operator>::</operator><name><name>duration_cast</name><argument_list type="generic">&lt;<argument><expr><name><name>chrono</name><operator>::</operator><name>nanoseconds</name></name></expr></argument>&gt;</argument_list></name></name><argument_list>(<argument><expr><name>t2</name> <operator>-</operator> <name>t1</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>count</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">" nanoseconds"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
