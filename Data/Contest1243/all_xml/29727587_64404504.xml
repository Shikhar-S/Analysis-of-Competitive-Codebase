<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29727587_64404504.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ss</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pll</name></cpp:macro> <cpp:value>pair&lt;ll,ll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>v.begin(),v.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mx</name></cpp:macro> <cpp:value>1000005</cpp:value></cpp:define>

<decl_stmt><decl><type><name>ll</name></type> <name><name>prime</name><index>[<expr><name>mx</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>vis</name><index>[<expr><name>mx</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>sieve</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><name><name>prime</name><index>[<expr><name>k</name><operator>++</operator></expr>]</index></name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">4</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>mx</name></expr>;</condition><incr><expr><name>i</name><operator>+=</operator><literal type="number">2</literal></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>vis</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">3</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>*</operator><name>i</name><operator>&lt;=</operator><name>mx</name></expr>;</condition><incr><expr><name>i</name><operator>+=</operator><literal type="number">2</literal></expr></incr>)</control><block>{
        <if>if<condition>(<expr><operator>!</operator><name><name>vis</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block>{
            <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><name>i</name><operator>*</operator><name>i</name></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>mx</name></expr>;</condition><incr><expr><name>j</name><operator>+=</operator><literal type="number">2</literal><operator>*</operator><name>i</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>vis</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></for>
        }</block></then></if>
    }</block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">3</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>mx</name></expr>;</condition><incr><expr><name>i</name><operator>+=</operator><literal type="number">2</literal></expr></incr>)</control> <block type="pseudo"><if>if<condition>(<expr><operator>!</operator><name><name>vis</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>prime</name><index>[<expr><name>k</name><operator>++</operator></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></then></if></block></for>
}</block></function>


<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>()</argument_list></call></expr><operator>,</operator><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sieve</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="line">//cout&lt;&lt;prime[k-1]&lt;&lt;endl;</comment>
    <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>x</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>k</name> <operator>&amp;&amp;</operator> <name><name>prime</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <if>if<condition>(<expr><name>n</name><operator>%</operator><name><name>prime</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name>x</name><operator>=</operator><name><name>prime</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            <break>break;</break>
        }</block></then></if>
    }</block></for>
    <if>if<condition>(<expr><name>x</name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>n</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></then>
    <else>else<block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>z</name><init>=<expr><name>n</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ll</name></type> <name>y</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <while>while<condition>(<expr><name>z</name><operator>%</operator><name>x</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><block>{
            <expr_stmt><expr><name>z</name><operator>/=</operator><name>x</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>y</name><operator>*=</operator><name>x</name></expr>;</expr_stmt>
        }</block></while>
        <if>if<condition>(<expr><name>y</name><operator>==</operator><name>n</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>x</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></else></if>
    }</block></else></if>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
