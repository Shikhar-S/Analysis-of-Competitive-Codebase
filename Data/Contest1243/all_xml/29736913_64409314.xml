<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29736913_64409314.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
 
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name><init>=<expr><literal type="number">102020</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>unordered_map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></name></type><name>vi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>a</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>b</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<struct>struct <name>edge</name><block>{<public type="default">
    <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
</public>}</block><decl><name><name>d</name><index>[<expr><name>maxn</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name></decl>;</struct>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LOCAL</name></cpp:ifdef>
	<expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"input.txt"</literal></expr></argument>,<argument><expr><literal type="string">"r"</literal></expr></argument>,<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition>
	<block>{
		<expr_stmt><expr><call><name><name>vi</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%s%s"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>vi</name><index>[<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>++</operator></expr><operator>,</operator><expr><name><name>vi</name><index>[<expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block></for>
		<decl_stmt><decl><type><name>int</name></type> <name>f</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>auto</name></type> <name>i</name><init>=<expr><literal type="char">'a'</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="char">'z'</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><if>if<condition>(<expr><name><name>vi</name><index>[<expr><name>i</name></expr>]</index></name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>f</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if></block></for>
        <if>if<condition>(<expr><name>f</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"No"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
        <else>else
        <block>{
        	<decl_stmt><decl><type><name>int</name></type> <name>cnt</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt><expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"Yes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        	<block>{
        		<if>if<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
        		<block>{
        			<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
                    <block>{
                        <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then>
                        <block>{
                            <expr_stmt><expr><name><name>d</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>.</operator><name>x</name><operator>=</operator><name>j</name></expr>;</expr_stmt><expr_stmt><expr><name><name>d</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>.</operator><name>y</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>swap</name></name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>
                            <break>break;</break>
                        }</block></then>
                        <elseif>else <if>if<condition>(<expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name><name>b</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then>
                        <block>{
                            <expr_stmt><expr><name><name>d</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>.</operator><name>x</name><operator>=</operator><name>i</name></expr>;</expr_stmt><expr_stmt><expr><name><name>d</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>.</operator><name>y</name><operator>=</operator><name>j</name></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>swap</name></name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>b</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>
                            <break>break;</break>
                        }</block></then></if></elseif>
                        <elseif>else <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name><name>b</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then>
                        <block>{
                            <expr_stmt><expr><name><name>d</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>.</operator><name>x</name><operator>=</operator><name>j</name></expr>;</expr_stmt><expr_stmt><expr><name><name>d</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>.</operator><name>y</name><operator>=</operator><name>j</name></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>swap</name></name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>b</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>
                            <expr_stmt><expr><name><name>d</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>.</operator><name>x</name><operator>=</operator><name>j</name></expr>;</expr_stmt><expr_stmt><expr><name><name>d</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>.</operator><name>y</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>swap</name></name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>
                            <break>break;</break>
                        }</block></then></if></elseif>
                        <elseif>else <if>if<condition>(<expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then>
                        <block>{
                            <expr_stmt><expr><name><name>d</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>.</operator><name>x</name><operator>=</operator><name>j</name></expr>;</expr_stmt><expr_stmt><expr><name><name>d</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>.</operator><name>y</name><operator>=</operator><name>j</name></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>swap</name></name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>b</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>
                            <expr_stmt><expr><name><name>d</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>.</operator><name>x</name><operator>=</operator><name>i</name></expr>;</expr_stmt><expr_stmt><expr><name><name>d</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>.</operator><name>y</name><operator>=</operator><name>j</name></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>swap</name></name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>b</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>
                            <break>break;</break>
                        }</block></then></if></elseif></if> 
                    }</block></for>
        		}</block></then></if>
        	}</block></for>
        	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>,<argument><expr><name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>cnt</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block>{
                <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d\n"</literal></expr></argument>,<argument><expr><name><name>d</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name><name>d</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></else></if>
	}</block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
