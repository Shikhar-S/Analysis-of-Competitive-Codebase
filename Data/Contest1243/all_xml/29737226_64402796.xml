<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29737226_64402796.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>haha</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x.begin(),x.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>emplace_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pp</name></cpp:macro> <cpp:value>pop_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>"\n"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>s</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>K</name><init>=<expr><literal type="number">3e5</literal><operator>+</operator><literal type="number">100</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>arr</name><index>[<expr><name>K</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>hell</name><index>[<expr><name>K</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>ttt</name></decl>,<decl><type ref="prev"/><name>n</name></decl>,<decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>		<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>,<decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>ttt</name></expr>;</expr_stmt>
      <while>while<condition>(<expr><name>ttt</name><operator>--</operator></expr>)</condition><block>{
            <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
            
            <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>s</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type><name>v</name></decl>;</decl_stmt>
            <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
                <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block>{
                    <expr_stmt><expr><name><name>hell</name><index>[<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>hell</name><index>[<expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt> 
                    <expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></for>
            <decl_stmt><decl><type><name>bool</name></type> <name>flex</name><init>=<expr><literal type="boolean">false</literal></expr></init></decl>,<decl><type ref="prev"/><name>br</name><init>=<expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt><empty_stmt>;</empty_stmt>
            <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">30</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
                <if>if<condition>(<expr><name><name>hell</name><index>[<expr><name>i</name></expr>]</index></name><operator>%</operator><literal type="number">2</literal></expr>)</condition><then>
                <block>{ <expr_stmt><expr><name>flex</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No\n"</literal></expr>;</expr_stmt> <break>break;</break> }</block></then></if>
            }</block></for>
            <if>if<condition>(<expr><name>flex</name></expr>)</condition><then>
                <block type="pseudo"><continue>continue;</continue></block></then></if>
            <decl_stmt><decl><type><name>ll</name></type> <name>j</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ll</name></type> <name>x</name><init>=<expr><operator>(</operator><name>ll</name><operator>)</operator><call><name><name>v</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type><name>p</name></decl>;</decl_stmt>
            <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>x</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
                <if>if<condition>(<expr><name><name>s</name><index>[<expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>==</operator><name><name>t</name><index>[<expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>)</condition><then>
                    <block type="pseudo"><continue>continue;</continue></block></then></if>
                <expr_stmt><expr><name>flex</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
                <for>for<control>(<init><expr><name>j</name><operator>=</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>x</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
                    <if>if<condition>(<expr><name><name>t</name><index>[<expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>==</operator><name><name>t</name><index>[<expr><name><name>v</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name></expr>)</condition><then><block>{
                    <expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>v</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>,<argument><expr><name><name>t</name><index>[<expr><name><name>v</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>flex</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt> <break>break;</break>
                    }</block></then></if>
                }</block></for>
                <if>if<condition>(<expr><name>flex</name></expr>)</condition><then>
                    <block type="pseudo"><continue>continue;</continue></block></then></if>
                <for>for<control>(<init><expr><name>j</name><operator>=</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>x</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
                <block>{
                    <if>if<condition>(<expr><name><name>t</name><index>[<expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>==</operator><name><name>s</name><index>[<expr><name><name>v</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name></expr>)</condition><then><block>{
	                    <expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>v</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name><name>v</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name></expr></argument>,<argument><expr><name><name>t</name><index>[<expr><name><name>v</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	                    <expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>v</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>,<argument><expr><name><name>t</name><index>[<expr><name><name>v</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	                    <expr_stmt><expr><name>flex</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
	                    <break>break;</break>
                    }</block></then></if>
                }</block></for>
                <if>if<condition>(<expr><name>flex</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
                      <expr_stmt><expr><name>br</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No\n"</literal></expr>;</expr_stmt> <break>break;</break> }</block></then></if>
            }</block></for>
            <if>if<condition>(<expr><name>br</name></expr>)</condition><then>
                <block type="pseudo"><continue>continue;</continue></block></then></if>
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Yes\n"</literal><operator>&lt;&lt;</operator><operator>(</operator><name>ll</name><operator>)</operator><call><name><name>p</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
            <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>p</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
                <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>+</operator><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>+</operator><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>s</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
            }</block></for>
    }</block></while>}</block></function></unit>
