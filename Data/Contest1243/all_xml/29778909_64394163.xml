<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29778909_64394163.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>target</name><name>(</name><cpp:literal>"avx2"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimization</name> <name>(</name><cpp:literal>"O3"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimization</name> <name>(</name><cpp:literal>"unrolled-loops"</cpp:literal><name>)</name></cpp:pragma>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<comment type="block">/*---------------------Define--------------------*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inp</name></cpp:macro> <cpp:value>"TestCode.inp"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>out</name></cpp:macro> <cpp:value>"TestCode.out"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pi</name></cpp:macro> <cpp:value>acos(-1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>'\n'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Y</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;int,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hash</name></cpp:macro> <cpp:value>lolo</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>y1</name></cpp:macro> <cpp:value>MustDefeatGKT1</cpp:value></cpp:define>
<comment type="block">/*-----------------------------------------------*/</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>long</name> <name>long</name></type> <name>mod</name><init>=<expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>long</name> <name>long</name></type> <name>mod2</name><init>=<expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">9</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>long</name> <name>long</name></type> <name>INF</name><init>=<expr><literal type="number">1e12</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>long</name> <name>long</name></type> <name>oo</name><init>=<expr><literal type="number">1e18</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>test</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<comment type="block">/*-----------------------------------------------*/</comment>
<function><type><name>void</name></type> <name>Varvalian</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>ifstream</name> <modifier>*</modifier></type><name>fi</name> <init>= <expr><operator>new</operator> <call><name>ifstream</name> <argument_list>(<argument><expr><name>inp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ofstream</name> <modifier>*</modifier></type><name>fo</name> <init>= <expr><operator>new</operator> <call><name>ofstream</name> <argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><operator>*</operator><name>fi</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>rdbuf</name></name><argument_list>( <argument><expr><call><name><name>fi</name><operator>-&gt;</operator><name>rdbuf</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>rdbuf</name></name><argument_list>( <argument><expr><call><name><name>fo</name><operator>-&gt;</operator><name>rdbuf</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

}</block></function>
<function_decl><type><name>void</name></type> <name>db</name><parameter_list>()</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<comment type="block">/*-------------------Global----------------------*/</comment>
<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>di</name></decl>;</decl_stmt>
<comment type="block">/*------------------Functions--------------------*/</comment>
<function><type><name>ll</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>r</name></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>b</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition>
    <block>{
        <expr_stmt><expr><name>r</name> <operator>=</operator> <name>a</name><operator>%</operator><name>b</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>a</name><operator>=</operator><name>b</name></expr>;</expr_stmt><expr_stmt><expr><name>b</name><operator>=</operator><name>r</name></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><name>a</name></expr>;</return>
}</block></function>
<function><type><name>ll</name></type> <name>lcm</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
    <return>return <expr><name>a</name><operator>/</operator><call><name>gcd</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>*</operator><name>b</name></expr>;</return>
}</block></function>
<comment type="block">/*-----------------------------------------------*/</comment>

<function><type><name>void</name></type> <name>In</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name>Solve</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name>In</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><call><name>sqrt</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><if>if<condition>(<expr><name>n</name><operator>/</operator><name>i</name><operator>*</operator><name>i</name><operator>==</operator><name>n</name></expr>)</condition><then>
        <block>{
            <comment type="line">//cout&lt;&lt;i&lt;&lt;endl;</comment>
            <expr_stmt><expr><call><name><name>di</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>di</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>n</name><operator>/</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></block></for>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>di</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>di</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">//for(int i=0;i&lt;di.size();i++)</comment>
    <comment type="line">//    cout&lt;&lt;di[i]&lt;&lt;" ";</comment>
    <comment type="line">//cout&lt;&lt;endl;</comment>
    <decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>di</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>=</operator> <call><name>lcm</name><argument_list>(<argument><expr><name>ans</name></expr></argument>, <argument><expr><name><name>di</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    <comment type="line">//cout&lt;&lt;ans&lt;&lt;endl;</comment>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>n</name><operator>/</operator><name>ans</name></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name>db</name><parameter_list>()</parameter_list>
<block>{

}</block></function>

<function><type><name>int32_t</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name>Varvalian</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">//cin&gt;&gt;test;while(test--)</comment>
    <expr_stmt><expr><call><name>Solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
