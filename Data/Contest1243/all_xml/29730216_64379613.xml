<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29730216_64379613.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name> ;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name> ;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name> <init>= <expr><literal type="number">1e4</literal> <operator>+</operator> <literal type="number">5</literal></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><name>maxn</name></expr>]</index></name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>t</name><index>[<expr><name>maxn</name></expr>]</index></name></decl> ;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl> ;</decl_stmt>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument> , <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
	<while>while<condition>(<expr><name>k</name> <operator>--</operator></expr>)</condition>
	<block>{
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument> , <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument> , <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument> , <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>f1</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl> , <decl><type ref="prev"/><name>f2</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl> , <decl><type ref="prev"/><name>f3</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr> ;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control>
		<block>{
			<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
			  <block type="pseudo"><continue>continue ;</continue></block></then>
			<elseif>else <if>if<condition>(<expr><name>f1</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
			  <block type="pseudo"><expr_stmt><expr><name>f1</name> <operator>=</operator> <name>i</name></expr> ;</expr_stmt></block></then></if></elseif>
			<elseif>else <if>if<condition>(<expr><name>f2</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
			  <block type="pseudo"><expr_stmt><expr><name>f2</name> <operator>=</operator> <name>i</name></expr> ;</expr_stmt></block></then></if></elseif>
			<else>else
			  <block type="pseudo"><expr_stmt><expr><name>f3</name> <operator>=</operator> <name>i</name></expr> ;</expr_stmt></block></else></if>
		}</block></for>
		<if>if<condition>(<expr><name>f3</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>f1</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>f2</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
		  <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"NO\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block></then>
		<elseif>else <if>if<condition>(<expr><name>f1</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
		  <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"YES\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block></then></if></elseif>
		<else>else
		<block>{
			<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>f1</name></expr>]</index></name> <operator>==</operator> <name><name>s</name><index>[<expr><name>f2</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>t</name><index>[<expr><name>f1</name></expr>]</index></name> <operator>==</operator> <name><name>t</name><index>[<expr><name>f2</name></expr>]</index></name></expr>)</condition><then>
			  <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"YES\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block></then>
			<else>else
			  <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"NO\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block></else></if>
		}</block></else></if>
	}</block></while>
}</block></function></unit>
