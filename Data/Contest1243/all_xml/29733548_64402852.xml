<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29733548_64402852.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mod</name> <init>= <expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>INF</name> <init>= <expr><literal type="number">0x3f3f3f3f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>llINF</name> <init>= <expr><literal type="number">0x3f3f3f3f3f3f3f3f</literal></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=(a);i&lt;=(b);i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=(a);i&gt;=(b);i--)</cpp:value></cpp:define>
<function><specifier>inline</specifier> <type><name>bool</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>ll</name> <modifier>&amp;</modifier></type><name>num</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>char</name></type> <name>in</name></decl>;</decl_stmt><decl_stmt><decl><type><name>bool</name></type> <name>IsN</name><init>=<expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>in</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>in</name><operator>==</operator><name>EOF</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
    <while>while<condition>(<expr><name>in</name><operator>!=</operator><literal type="char">'-'</literal><operator>&amp;&amp;</operator><operator>(</operator><name><name>in</name><argument_list type="generic">&lt;<argument><expr><literal type="char">'0'</literal><operator>||</operator><name>in</name></expr></argument>&gt;</argument_list></name><literal type="char">'9'</literal><operator>)</operator></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>in</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
    <if>if<condition>(<expr><name>in</name><operator>==</operator><literal type="char">'-'</literal></expr>)</condition><then><block>{ <expr_stmt><expr><name>IsN</name><operator>=</operator><literal type="boolean">true</literal></expr>;</expr_stmt><expr_stmt><expr><name>num</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>}</block></then>
    <else>else <block type="pseudo"><expr_stmt><expr><name>num</name><operator>=</operator><name>in</name><operator>-</operator><literal type="char">'0'</literal></expr>;</expr_stmt></block></else></if>
    <while>while<condition>(<expr><name>in</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr><operator>,</operator><expr><name>in</name><operator>&gt;=</operator><literal type="char">'0'</literal><operator>&amp;&amp;</operator><name>in</name><operator>&lt;=</operator><literal type="char">'9'</literal></expr>)</condition><block>{
            <expr_stmt><expr><name>num</name><operator>*=</operator><literal type="number">10</literal></expr><operator>,</operator><expr><name>num</name><operator>+=</operator><name>in</name><operator>-</operator><literal type="char">'0'</literal></expr>;</expr_stmt>
    }</block></while> 
    <if>if<condition>(<expr><name>IsN</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>num</name><operator>=</operator><operator>-</operator><name>num</name></expr>;</expr_stmt></block></then></if>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">10000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>,<decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<struct>struct <name>node</name><block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
</public>}</block><decl><name><name>a</name><index>[<expr><name>N</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name></decl>;</struct>
<decl_stmt><decl><type><name><name>unordered_map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type>  <name>mmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>t</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list><block>{
 	<expr_stmt><expr><call><name><name>mmp</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>s</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
			<expr_stmt><expr><name><name>mmp</name><index>[<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>mmp</name><index>[<expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
		}</block></for>
		<decl_stmt><decl><type><name>bool</name></type> <name>flag</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>char</name></type> <name>i</name><init>=<expr><literal type="char">'a'</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="char">'z'</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
			<if>if<condition>(<expr><name><name>mmp</name><index>[<expr><name>i</name></expr>]</index></name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
                 <expr_stmt><expr><name>flag</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt><break>break;</break>
            }</block></then></if>
		}</block></for>
		<if>if<condition>(<expr><name>flag</name></expr>)</condition><then><block>{
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
        }</block></then>
		<else>else<block>{
			<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Yes"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>operations</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
			<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
				<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block>{
					<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
						<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then><block>{
							<expr_stmt><expr><name><name>a</name><index>[<expr><name>operations</name></expr>]</index></name><operator>.</operator><name>x</name><operator>=</operator><name>j</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>a</name><index>[<expr><name>operations</name></expr>]</index></name><operator>.</operator><name>y</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
							<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>operations</name><operator>++</operator></expr>;</expr_stmt>
							<break>break;</break>
						}</block></then>
						<elseif>else <if>if<condition>(<expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name><name>t</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then><block>{
							<expr_stmt><expr><name><name>a</name><index>[<expr><name>operations</name></expr>]</index></name><operator>.</operator><name>x</name><operator>=</operator><name>i</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>a</name><index>[<expr><name>operations</name></expr>]</index></name><operator>.</operator><name>y</name><operator>=</operator><name>j</name></expr>;</expr_stmt>
							<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>t</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>operations</name><operator>++</operator></expr>;</expr_stmt>
							<break>break;</break>
						}</block></then></if></elseif>
						<elseif>else <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name><name>t</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then><block>{
							<expr_stmt><expr><name><name>a</name><index>[<expr><name>operations</name></expr>]</index></name><operator>.</operator><name>x</name><operator>=</operator><name>j</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>a</name><index>[<expr><name>operations</name></expr>]</index></name><operator>.</operator><name>y</name><operator>=</operator><name>j</name></expr>;</expr_stmt>
							<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>t</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>operations</name><operator>++</operator></expr>;</expr_stmt>

							<expr_stmt><expr><name><name>a</name><index>[<expr><name>operations</name></expr>]</index></name><operator>.</operator><name>x</name><operator>=</operator><name>j</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>a</name><index>[<expr><name>operations</name></expr>]</index></name><operator>.</operator><name>y</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
							<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>operations</name><operator>++</operator></expr>;</expr_stmt>
							<break>break;</break>
						}</block></then></if></elseif>
						<elseif>else <if>if<condition>(<expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then><block>{
							<expr_stmt><expr><name><name>a</name><index>[<expr><name>operations</name></expr>]</index></name><operator>.</operator><name>x</name><operator>=</operator><name>j</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>a</name><index>[<expr><name>operations</name></expr>]</index></name><operator>.</operator><name>y</name><operator>=</operator><name>j</name></expr>;</expr_stmt>
							<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>t</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>operations</name><operator>++</operator></expr>;</expr_stmt>

							<expr_stmt><expr><name><name>a</name><index>[<expr><name>operations</name></expr>]</index></name><operator>.</operator><name>x</name><operator>=</operator><name>i</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>a</name><index>[<expr><name>operations</name></expr>]</index></name><operator>.</operator><name>y</name><operator>=</operator><name>j</name></expr>;</expr_stmt>
							<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>t</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>operations</name><operator>++</operator></expr>;</expr_stmt>
							<break>break;</break>
						}</block></then></if></elseif></if>
					}</block></for>
				}</block></then></if>
			}</block></for>
			<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>operations</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
			<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>operations</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
                <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name><operator>+</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="char">' '</literal><operator>&lt;&lt;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name><operator>+</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
			}</block></for>
		}</block></else></if>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>k</name></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>k</name><operator>--</operator></expr>)</condition> <block type="pseudo"><expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
