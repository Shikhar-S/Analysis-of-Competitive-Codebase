<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29771830_64417550.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;list&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_map&gt;</cpp:file></cpp:include>

<using>using <name>ll</name> <init>= <type><name>long</name> <name>long</name></type></init>;</using>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name><name>unordered_map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>noes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>unordered_set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name><name>visited</name><index>[<expr><literal type="number">100001</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>DFSUtil</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{
    <comment type="line">// Mark the current node as visited and print it </comment>
    <expr_stmt><expr><name><name>visited</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>

    <comment type="line">// Recur for aint the vertices </comment>
    <comment type="line">// adjacent to this vertex </comment>

    <decl_stmt><decl><type><name>auto</name></type> <name>basecopy</name> <init>= <expr><name>base</name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name><name>noes</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name><name>noes</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <block type="pseudo"><for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>j</name> <range>: <expr><call><name><name>noes</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control>
            <block type="pseudo"><expr_stmt><expr><call><name><name>basecopy</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for></block></then></if>

    <for>for <control>(<init><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><call><name><name>basecopy</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>it</name> <operator>!=</operator> <call><name><name>basecopy</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>it</name></expr></incr>)</control>
        <block type="pseudo"><if>if <condition>(<expr><operator>!</operator><name><name>visited</name><index>[<expr><operator>*</operator><name>it</name></expr>]</index></name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name>DFSUtil</name><argument_list>(<argument><expr><operator>*</operator><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></block></for>
}</block></function>

<function><type><name>int</name></type> <name>connectedComponents</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>v</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>v</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>v</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <if>if <condition>(<expr><name><name>visited</name><index>[<expr><name>v</name></expr>]</index></name> <operator>==</operator> <literal type="boolean">false</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name>DFSUtil</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><operator>++</operator><name>count</name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></for>

    <return>return <expr><name>count</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>m</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name></expr>;</expr_stmt>
    
    <decl_stmt><decl><type><name><name>unordered_set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>maxbase</name></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>auto</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><name><name>visited</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>maxbase</name><operator>.</operator><name>emplace</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <for>for <control>(<init><decl><type><name>auto</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>m</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>noes</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><call><name>emplace_back</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>noes</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><call><name>emplace_back</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <decl_stmt><decl><type><name>auto</name></type> <name>minIndex</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>auto</name></type> <name>minCount</name> <init>= <expr><literal type="number">100001</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>auto</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
    <block>{
        <if>if <condition>(<expr><name><name>noes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <name>minCount</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>minIndex</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>minCount</name> <operator>=</operator> <name><name>noes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></for>

    <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>no</name> <range>: <expr><name><name>noes</name><index>[<expr><name>minIndex</name></expr>]</index></name></expr></range></decl></init>)</control>
    <block>{
        <expr_stmt><expr><name><name>visited</name><index>[<expr><name>no</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>base</name><operator>.</operator><name>emplace</name></name><argument_list>(<argument><expr><name>no</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>maxbase</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>no</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>yes</name> <range>: <expr><name>maxbase</name></expr></range></decl></init>)</control>
        <block type="pseudo"><expr_stmt><expr><call><name>DFSUtil</name><argument_list>(<argument><expr><name>yes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>

    <decl_stmt><decl><type><name>auto</name></type> <name>count</name> <init>= <expr><call><name>connectedComponents</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>count</name></expr>;</expr_stmt>
}</block></function>
</unit>
