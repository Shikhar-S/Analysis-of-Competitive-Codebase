<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29782777_64391427.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>a</name><index>[<expr><literal type="number">10007</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>b</name><index>[<expr><literal type="number">10007</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>nn</name><index>[<expr><literal type="number">26</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>aa</name><index>[<expr><literal type="number">20007</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>bb</name><index>[<expr><literal type="number">20007</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tot</name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>solve</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name><operator>&amp;&amp;</operator><operator>(</operator><name><name>a</name><index>[<expr><name>x</name></expr>]</index></name><operator>==</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>||</operator><name><name>a</name><index>[<expr><name>x</name></expr>]</index></name><operator>==</operator><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>)</condition><then><block>{
            <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>x</name></expr>]</index></name><operator>==</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block>{
                <expr_stmt><expr><name><name>aa</name><index>[<expr><name>tot</name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>bb</name><index>[<expr><name>tot</name></expr>]</index></name><operator>=</operator><name>x</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>b</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>tot</name><operator>++</operator></expr>;</expr_stmt>
                <return>return;</return>
            }</block></then>
            <else>else<block>{
                <expr_stmt><expr><name><name>aa</name><index>[<expr><name>tot</name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>bb</name><index>[<expr><name>tot</name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>tot</name><operator>++</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>aa</name><index>[<expr><name>tot</name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>bb</name><index>[<expr><name>tot</name></expr>]</index></name><operator>=</operator><name>x</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>b</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>tot</name><operator>++</operator></expr>;</expr_stmt>
                <return>return;</return>
            }</block></else></if>
        }</block></then></if>
    }</block></for>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>T</name></decl>;</decl_stmt><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>T</name><operator>--</operator></expr>)</condition><block>{
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>nn</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof <name>nn</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>tot</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%s%s"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
            <expr_stmt><expr><name><name>nn</name><index>[<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>nn</name><index>[<expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
        }</block></for>
        <decl_stmt><decl><type><name>int</name></type> <name>flag</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">26</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
            <if>if<condition>(<expr><name><name>nn</name><index>[<expr><name>i</name></expr>]</index></name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>flag</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
        }</block></for>
        <if>if<condition>(<expr><name>flag</name></expr>)</condition><then><block>{
            <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"No"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        }</block></then>
        <else>else<block>{
            <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"Yes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
            <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block>{
                <expr_stmt><expr><call><name>solve</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>,<argument><expr><name>tot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>tot</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d\n"</literal></expr></argument>,<argument><expr><name><name>aa</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name><name>bb</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
<comment type="line">//        printf("----%s\n----%s\n",a,b);</comment>
    }</block></while>
}</block></function></unit>
