<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29781364_64388115.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>taskname</name></cpp:macro> <cpp:value>"TEST"</cpp:value></cpp:define>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>
<typedef>typedef <type><name><name>pair</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>ii</name>;</typedef>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>INF</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">1e5</literal> <operator>+</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name><name>cnt</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>d</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>set</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>a</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>inp</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list> <block>{
    <while>while <condition>(<expr><name>m</name><operator>--</operator></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>x</name> <operator>&gt;&gt;</operator> <name>y</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>a</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>a</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cnt</name><index>[<expr><name>x</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name><name>cnt</name><index>[<expr><name>y</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
    }</block></while>
    <decl_stmt><decl><type><name>ll</name></type> <name>minn</name> <init>= <expr><name>INF</name></expr></init></decl>, <decl><type ref="prev"/><name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><if>if <condition>(<expr><name>minn</name> <operator>&gt;</operator> <name><name>cnt</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>minn</name> <operator>=</operator> <name><name>cnt</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>r</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
        }</block></then></if></block></for>
    <decl_stmt><decl><type><name><name>multiset</name> <argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>S</name></decl>;</decl_stmt> <expr_stmt><expr><call><name><name>S</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>r</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>S</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></block></for>
    <decl_stmt><decl><type><name><name>priority_queue</name> <argument_list type="generic">&lt;<argument><expr><name>ii</name></expr></argument>, <argument><expr><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>ii</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>greater</name> <argument_list type="generic">&lt;<argument><expr><name>ii</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>Q</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>Q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><call><name>ii</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fill</name><argument_list>(<argument><expr><name>d</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>d</name> <operator>+</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>INF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>d</name><index>[<expr><name>r</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <while>while <condition>(<expr><operator>not</operator> <call><name><name>Q</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>u</name> <init>= <expr><call><name><name>Q</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call><operator>.</operator><name>second</name></expr></init></decl>, <decl><type ref="prev"/><name>du</name> <init>= <expr><call><name><name>Q</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call><operator>.</operator><name>first</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Q</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>du</name> <operator>!=</operator> <name><name>d</name><index>[<expr><name>u</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
        <expr_stmt><expr><name>res</name> <operator>+=</operator> <name><name>d</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>d</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>V</name></decl>;</decl_stmt> <expr_stmt><expr><call><name><name>V</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>auto</name></type> <name>v</name> <range>: <expr><name>S</name></expr></range></decl></init>)</control> <block type="pseudo"><if>if <condition>(<expr><name><name>a</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>find</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>a</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name><name>d</name><index>[<expr><name>v</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>d</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><call><name>ii</name><argument_list>(<argument><expr><name><name>d</name><index>[<expr><name>v</name></expr>]</index></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>V</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></block></for>
        <for>for <control>(<init><decl><type><name>auto</name></type> <name>it</name> <range>: <expr><name>V</name></expr></range></decl></init>)</control> <block type="pseudo"><if>if <condition>(<expr><call><name><name>S</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name><name>S</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>S</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>S</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></block></for>
        <for>for <control>(<init><decl><type><name>auto</name></type> <name>v</name> <range>: <expr><name><name>a</name><index>[<expr><name>u</name></expr>]</index></name></expr></range></decl></init>)</control> <block type="pseudo"><if>if <condition>(<expr><name><name>d</name><index>[<expr><name>v</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>d</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><call><name>ii</name><argument_list>(<argument><expr><name><name>d</name><index>[<expr><name>v</name></expr>]</index></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></block></for>
    }</block></while>
}</block></function>
<function><type><name>void</name></type> <name>out</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>res</name></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">//  freopen(taskname".INP", "r", stdin);</comment>
  <comment type="line">//  freopen(taskname".OUT", "w", stdout);</comment>
    <expr_stmt><expr><call><name>inp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>out</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
