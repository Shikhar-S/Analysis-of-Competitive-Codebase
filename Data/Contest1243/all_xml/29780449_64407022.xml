<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29780449_64407022.cpp"><comment type="line">//In the name of Allah</comment>
<comment type="line">//Ya Ali!</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name> ;</typedef>

<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>maxn</name> <init>= <expr><literal type="number">1000</literal> <operator>*</operator> <literal type="number">101</literal></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>INF</name> <init>= <expr><literal type="number">1e18</literal></expr></init></decl> ;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>s</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>

<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl> , <decl><type ref="prev"/><name>m</name></decl> , <decl><type ref="prev"/><name><name>mark</name><index>[<expr><name>maxn</name></expr>]</index></name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name><name>g</name><index>[<expr><name>maxn</name></expr>]</index></name></decl> , <decl><type ref="prev"/><name><name>mo</name><index>[<expr><name>maxn</name></expr>]</index></name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>ve</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name> <operator>::</operator> <name>iterator</name></name></type> <name>it</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>ea</name></decl> ;</decl_stmt>

<function><type><name>void</name></type> <name>del</name><parameter_list>()</parameter_list><block>{

  <while>while<condition>(<expr><call><name><name>ea</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{
    <decl_stmt><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>p</name> <init>= <expr><call><name><name>ea</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><name>it</name> <operator>=</operator> <call><name><name>ve</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name><name>ve</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name><name>ea</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr> ;</expr_stmt>
  }</block></while>

}</block></function>

<function><type><name>bool</name></type> <name>ch</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>v</name></decl></parameter> , <parameter><decl><type><name>ll</name></type> <name>u</name></decl></parameter>)</parameter_list><block>{
 <decl_stmt><decl><type><name>ll</name></type> <name>x</name> <init>= <expr><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>g</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument> , <argument><expr><name><name>g</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument> , <argument><expr><name>v</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>g</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl> ;</decl_stmt>

 <if>if<condition>(<expr><name>x</name> <operator>&gt;=</operator> <name><name>g</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>||</operator> <name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr> ;</return></block></then>

 <elseif>else <if>if<condition>(<expr><name><name>g</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>!=</operator> <name>v</name></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr> ;</return></block></then></if></elseif>

 <else>else <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr> ;</return></block></else></if>
}</block></function>

<function><type><name>void</name></type> <name>solve</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>ind</name></decl></parameter>)</parameter_list><block>{

 <expr_stmt><expr><name><name>mo</name><index>[<expr><name>ind</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
 <expr_stmt><expr><name><name>mark</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>

 <expr_stmt><expr><call><name><name>ve</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><block>{<expr><name><name>g</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr> , <expr><name>v</name></expr>}</block></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

 <decl_stmt><decl><type><name><name>queue</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>qu</name></decl> ;</decl_stmt>

 <for>for<control>(<init><expr><name>it</name> <operator>=</operator> <call><name><name>ve</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr> ;</init> <condition><expr><name>it</name> <operator>!=</operator> <call><name><name>ve</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr> ;</condition> <incr><expr><name>it</name> <operator>++</operator></expr></incr>)</control><block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>u</name> <init>= <expr><name><operator>(</operator><operator>*</operator><name>it</name><operator>)</operator><operator>.</operator><name>s</name></name></expr></init></decl> ;</decl_stmt>
    <if>if<condition>(<expr><operator>!</operator><call><name>ch</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
        <comment type="line">//cout &lt;&lt; v &lt;&lt; " " &lt;&lt; u &lt;&lt; " " &lt;&lt; ch(v ,u) &lt;&lt; endl ;</comment>
        <expr_stmt><expr><call><name><name>qu</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>mo</name><index>[<expr><name>ind</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>mark</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name><name>ea</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name><operator>(</operator><operator>*</operator><name>it</name><operator>)</operator><operator>.</operator><name>f</name></name></expr> , <expr><name><operator>(</operator><operator>*</operator><name>it</name><operator>)</operator><operator>.</operator><name>s</name></name></expr>}</block></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    }</block></then></if>
 }</block></for>

 <expr_stmt><expr><call><name>del</name><argument_list>()</argument_list></call></expr> ;</expr_stmt>

 <while>while<condition>(<expr><call><name><name>qu</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{

    <decl_stmt><decl><type><name>ll</name></type> <name>p</name> <init>= <expr><call><name><name>qu</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name><name>qu</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr> ;</expr_stmt>

    <for>for<control>(<init><expr><name>it</name> <operator>=</operator> <call><name><name>ve</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr> ;</init> <condition><expr><name>it</name> <operator>!=</operator> <call><name><name>ve</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr> ;</condition> <incr><expr><name>it</name> <operator>++</operator></expr></incr>)</control><block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>u</name> <init>= <expr><name><operator>(</operator><operator>*</operator><name>it</name><operator>)</operator><operator>.</operator><name>s</name></name></expr></init></decl> ;</decl_stmt>
        <if>if<condition>(<expr><operator>!</operator><call><name>ch</name><argument_list>(<argument><expr><name>p</name></expr></argument> , <argument><expr><name>u</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>mark</name><index>[<expr><name>u</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name><name>mark</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name><name>qu</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>mo</name><index>[<expr><name>ind</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name><name>ea</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name><operator>(</operator><operator>*</operator><name>it</name><operator>)</operator><operator>.</operator><name>f</name></name></expr> , <expr><name><operator>(</operator><operator>*</operator><name>it</name><operator>)</operator><operator>.</operator><name>s</name></name></expr>}</block></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        }</block></then></if>
    }</block></for>

    <expr_stmt><expr><call><name>del</name><argument_list>()</argument_list></call></expr> ;</expr_stmt>
 }</block></while>

}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
<expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name></expr> ;</expr_stmt>
<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>m</name></expr> ;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control><block>{

    <decl_stmt><decl><type><name>ll</name></type> <name>v</name></decl> , <decl><type ref="prev"/><name>u</name></decl> ;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>v</name> <operator>&gt;&gt;</operator> <name>u</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>g</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>g</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
}</block></for>

<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr> ;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>g</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument> , <argument><expr><name><name>g</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block></for>

<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr> ;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><call><name><name>ve</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><block>{<expr><name><name>g</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr> , <expr><name>i</name></expr>}</block></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block></for>

<decl_stmt><decl><type><name>ll</name></type> <name>ind</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
<while>while<condition>(<expr><call><name><name>ve</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{
    <expr_stmt><expr><name>it</name> <operator>=</operator> <call><name><name>ve</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>v</name> <init>= <expr><name><operator>(</operator><operator>*</operator><name>it</name><operator>)</operator><operator>.</operator><name>s</name></name></expr></init></decl> ;</decl_stmt>
    <if>if<condition>(<expr><operator>!</operator><name><name>mark</name><index>[<expr><name>v</name></expr>]</index></name></expr>)</condition><then><block>{
      <expr_stmt><expr><name>ind</name> <operator>++</operator></expr> ;</expr_stmt>
      <expr_stmt><expr><call><name>solve</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>ind</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    }</block></then></if>
}</block></while>

<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ind</name><operator>-</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr> ;</expr_stmt>

 <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
<comment type="block">/*
                  _     _   __
            /_\  (_    (_)  __)
           /   \  _) . (_) (__
*/</comment>
</unit>
