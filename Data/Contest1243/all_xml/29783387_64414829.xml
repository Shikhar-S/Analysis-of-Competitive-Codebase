<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29783387_64414829.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><cpp:literal>"Ofast"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><cpp:literal>"unroll-loops"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><cpp:literal>"fast-math"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><cpp:literal>"no-stack-protector"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>target</name><name>(</name><cpp:literal>"sse,sse2,sse3,ssse3,mmx,abm,popcnt"</cpp:literal><name>)</name></cpp:pragma>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fs</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sc</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>
<decl_stmt><decl><type><name>mt19937</name></type> <name>rng</name><argument_list>(<argument><expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name> <init>= <expr><literal type="number">1e5</literal> <operator>+</operator> <literal type="number">100</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mod</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>inf</name> <init>= <expr><literal type="number">1e9</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ld</name></type> <name>eps</name> <init>= <expr><literal type="number">1e-9</literal></expr></init></decl>;</decl_stmt>

<function><type><name>bool</name></type> <name>solve</name><parameter_list>(<parameter><decl><type><name>string</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>string</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name> <modifier>&amp;</modifier></type><name>ans</name></decl></parameter>)</parameter_list> <block>{
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>pos</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>,<argument><expr><call><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
		<expr_stmt><expr><name><name>pos</name><index>[<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><block>{<expr><name>i</name></expr>,<expr><literal type="number">0</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pos</name><index>[<expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><block>{<expr><name>i</name></expr>,<expr><literal type="number">1</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<decl_stmt><decl><type><name>bool</name></type> <name>f</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">26</literal></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> 
		<block type="pseudo"><if>if <condition>(<expr><name><name>pos</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>%</operator><literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></then></if></block></for>
	<if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">26</literal></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
		<comment type="line">// cout &lt;&lt; s&lt;&lt; endl &lt;&lt;t&lt;&lt;endl&lt;&lt;endl;</comment>
		<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>pos</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>pos</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><name><name>pos</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>j</name><operator>+=</operator><literal type="number">2</literal></expr></incr>)</control> <block>{
			<if>if <condition>(<expr><name><name>pos</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>fs</name> <operator>==</operator> <name><name>pos</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fs</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
			<if>if <condition>(<expr><name><name>pos</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>sc</name> <operator>!=</operator> <name><name>pos</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sc</name></expr>)</condition><then> <block>{
				<if>if <condition>(<expr><name><name>s</name><index>[<expr><name><name>pos</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fs</name></expr>]</index></name> <operator>!=</operator> <name><name>t</name><index>[<expr><name><name>pos</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fs</name></expr>]</index></name></expr>)</condition><then> <block>{
					<decl_stmt><decl><type><name>int</name></type> <name>p</name> <init>= <expr><name><name>pos</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fs</name></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name>p</name></expr>,<expr><name>p</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<for>for <control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>h</name> <operator>:</operator> <name><name>pos</name><index>[<expr><name><name>s</name><index>[<expr><name>p</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal></expr>]</index></name></expr></init>)</control> <block>{
						<if>if <condition>(<expr><name><name>h</name><operator>.</operator><name>fs</name></name> <operator>==</operator> <name>p</name> <operator>&amp;&amp;</operator> <name><name>h</name><operator>.</operator><name>sc</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
							<expr_stmt><expr><name><name>h</name><operator>.</operator><name>sc</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
							<break>break;</break>
						}</block></then></if>
					}</block></for>
					<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>pos</name><index>[<expr><name><name>s</name><index>[<expr><name>p</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>pos</name><index>[<expr><name><name>s</name><index>[<expr><name>p</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<for>for <control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>h</name> <operator>:</operator> <name><name>pos</name><index>[<expr><name><name>t</name><index>[<expr><name>p</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal></expr>]</index></name></expr></init>)</control> <block>{
						<if>if <condition>(<expr><name><name>h</name><operator>.</operator><name>fs</name></name> <operator>==</operator> <name>p</name> <operator>&amp;&amp;</operator> <name><name>h</name><operator>.</operator><name>sc</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
							<expr_stmt><expr><name><name>h</name><operator>.</operator><name>sc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
							<break>break;</break>
						}</block></then></if>
					}</block></for>
					<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>pos</name><index>[<expr><name><name>t</name><index>[<expr><name>p</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>pos</name><index>[<expr><name><name>t</name><index>[<expr><name>p</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>t</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then></if>
			<decl_stmt><decl><type><name>int</name></type> <name>lv</name> <init>= <expr><name><name>pos</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>sc</name></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>lv</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name><name>pos</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fs</name></expr>, <expr><name><name>pos</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>fs</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>int</name></type> <name>p2</name> <init>= <expr><name><name>pos</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fs</name></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>int</name></type> <name>p1</name> <init>= <expr><name><name>pos</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>fs</name></expr></init></decl>;</decl_stmt>
				<for>for <control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>h</name> <operator>:</operator> <name><name>pos</name><index>[<expr><name><name>t</name><index>[<expr><name>p1</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal></expr>]</index></name></expr></init>)</control> <block>{
					<if>if <condition>(<expr><name><name>h</name><operator>.</operator><name>fs</name></name> <operator>==</operator> <name>p1</name> <operator>&amp;&amp;</operator> <name><name>h</name><operator>.</operator><name>sc</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
						<expr_stmt><expr><name><name>h</name><operator>.</operator><name>fs</name></name> <operator>=</operator> <name>p2</name></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>h</name><operator>.</operator><name>sc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
						<break>break;</break>
					}</block></then></if>
				}</block></for>
				<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>pos</name><index>[<expr><name><name>t</name><index>[<expr><name>p1</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>pos</name><index>[<expr><name><name>t</name><index>[<expr><name>p1</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<for>for <control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>h</name> <operator>:</operator> <name><name>pos</name><index>[<expr><name><name>s</name><index>[<expr><name>p2</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal></expr>]</index></name></expr></init>)</control> <block>{
					<if>if <condition>(<expr><name><name>h</name><operator>.</operator><name>fs</name></name> <operator>==</operator> <name>p2</name> <operator>&amp;&amp;</operator> <name><name>h</name><operator>.</operator><name>sc</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
						<expr_stmt><expr><name><name>h</name><operator>.</operator><name>fs</name></name> <operator>=</operator> <name>p1</name></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>h</name><operator>.</operator><name>sc</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
						<break>break;</break>
					}</block></then></if>
				}</block></for>
				<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>pos</name><index>[<expr><name><name>s</name><index>[<expr><name>p2</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>pos</name><index>[<expr><name><name>s</name><index>[<expr><name>p2</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>p2</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>t</name><index>[<expr><name>p1</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then>
			<else>else <block>{
				<expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name><name>pos</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>fs</name></expr>, <expr><name><name>pos</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fs</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>int</name></type> <name>p1</name> <init>= <expr><name><name>pos</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>fs</name></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>int</name></type> <name>p2</name> <init>= <expr><name><name>pos</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fs</name></expr></init></decl>;</decl_stmt>
				<for>for <control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>h</name> <operator>:</operator> <name><name>pos</name><index>[<expr><name><name>s</name><index>[<expr><name>p1</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal></expr>]</index></name></expr></init>)</control> <block>{
					<if>if <condition>(<expr><name><name>h</name><operator>.</operator><name>fs</name></name> <operator>==</operator> <name>p1</name> <operator>&amp;&amp;</operator> <name><name>h</name><operator>.</operator><name>sc</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
						<expr_stmt><expr><name><name>h</name><operator>.</operator><name>fs</name></name> <operator>=</operator> <name>p2</name></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>h</name><operator>.</operator><name>sc</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
						<break>break;</break>
					}</block></then></if>
				}</block></for>
				<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>pos</name><index>[<expr><name><name>s</name><index>[<expr><name>p1</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>pos</name><index>[<expr><name><name>s</name><index>[<expr><name>p1</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<for>for <control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>h</name> <operator>:</operator> <name><name>pos</name><index>[<expr><name><name>t</name><index>[<expr><name>p2</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal></expr>]</index></name></expr></init>)</control> <block>{
					<if>if <condition>(<expr><name><name>h</name><operator>.</operator><name>fs</name></name> <operator>==</operator> <name>p2</name> <operator>&amp;&amp;</operator> <name><name>h</name><operator>.</operator><name>sc</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
						<expr_stmt><expr><name><name>h</name><operator>.</operator><name>fs</name></name> <operator>=</operator> <name>p1</name></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>h</name><operator>.</operator><name>sc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
						<break>break;</break>
					}</block></then></if>
				}</block></for>
				<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>pos</name><index>[<expr><name><name>t</name><index>[<expr><name>p2</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>pos</name><index>[<expr><name><name>t</name><index>[<expr><name>p2</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>p1</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>t</name><index>[<expr><name>p2</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
 		}</block></for>
	}</block></for>
	<return>return <expr><literal type="number">1</literal></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>st</name><parameter_list>()</parameter_list> <block>{
	<for>for <control>(<init><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>n</name><operator>&lt;=</operator><literal type="number">10</literal></expr>;</condition><incr><expr><operator>++</operator><name>n</name></expr></incr>)</control> <block>{
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">100</literal></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
			<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>,<decl><type ref="prev"/><name>t</name></decl>, <decl><type ref="prev"/><name>_s</name></decl>, <decl><type ref="prev"/><name>_t</name></decl>;</decl_stmt>
			<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{
				<expr_stmt><expr><name>s</name> <operator>+=</operator> <literal type="char">'a'</literal> <operator>+</operator> <call><name>rng</name><argument_list>()</argument_list></call><operator>%</operator><literal type="number">3</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>t</name> <operator>+=</operator> <literal type="char">'a'</literal> <operator>+</operator> <call><name>rng</name><argument_list>()</argument_list></call><operator>%</operator><literal type="number">3</literal></expr>;</expr_stmt>
			}</block></for>
			<expr_stmt><expr><name>_s</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>_t</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
			<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>ans</name></decl>;</decl_stmt>
			<if>if <condition>(<expr><call><name>solve</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>t</name></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
				<if>if <condition>(<expr><call><name><name>ans</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">2</literal><operator>*</operator><name>n</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"j1!!!"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></then></if>
				<for>for <control>(<init><decl><type><name>auto</name></type> <name>j</name> <range>: <expr><name>ans</name></expr></range></decl></init>)</control> <block>{
					<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name><name>j</name><operator>.</operator><name>fs</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>t</name><index>[<expr><name><name>j</name><operator>.</operator><name>sc</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></for>
				<if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name>t</name></expr>)</condition><then> <block>{
					<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"j2!!!"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>n</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator><name>_s</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name>_t</name> <operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name><name>ans</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
					<for>for <control>(<init><decl><type><name>auto</name></type>  <name>j</name> <range>: <expr><name>ans</name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>j</name><operator>.</operator><name>fs</name></name><operator>+</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name><name>j</name><operator>.</operator><name>sc</name></name><operator>+</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></for>
					<return>return ;</return>
				}</block></then></if>
			}</block></then></if>
		}</block></for>
	}</block></for>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{	
	<expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ONLINE_JUDGE</name></cpp:ifndef>
	<expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"input.txt"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"output.txt"</literal></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>k</name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>k</name><operator>--</operator></expr>)</condition> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>,<decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>s</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>ans</name></decl>;</decl_stmt>
		<if>if <condition>(<expr><operator>!</operator><call><name>solve</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>t</name></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No\n"</literal></expr>;</expr_stmt></block></then>
		<else>else <block>{
			<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Yes\n"</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name><name>ans</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&lt;&lt;</operator><literal type="string">"\n"</literal></expr>;</expr_stmt>
			<for>for <control>(<init><decl><type><name>auto</name></type> <name>i</name> <range>: <expr><name>ans</name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>i</name><operator>.</operator><name>fs</name></name><operator>+</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name><name>i</name><operator>.</operator><name>sc</name></name><operator>+</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="string">"\n"</literal></expr>;</expr_stmt></block></for>
		}</block></else></if>
	}</block></while>
	
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
