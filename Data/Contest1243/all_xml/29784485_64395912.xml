<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29784485_64395912.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>For</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int a=b;a&lt;=c;++a)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Ford</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int a=b;a&gt;=c;--a)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Fv</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(auto &amp;a:b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ii</name></cpp:macro> <cpp:value>pair&lt;int,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vt</name></cpp:macro> <cpp:value>vector&lt;int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vpi</name></cpp:macro> <cpp:value>vector&lt;pair&lt;int,int&gt;&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(int)(x.size())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a.begin(),a.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>reset</name><parameter_list>(<parameter><type><name>f</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(f,x,sizeof(f))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x&gt;&gt;i&amp;1ll)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>on</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x|(1ll&lt;&lt;i))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>off</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x&amp;~(1ll&lt;&lt;i))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>task</name></cpp:macro> <cpp:value>"1243c"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name><init>=<expr><literal type="number">1e5</literal><operator>+</operator><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name><name>id</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>vis</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>cc</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>d</name></decl>,<decl><type ref="prev"/><name>cnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name><name>ad</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>gr</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vpi</name></type> <name>E</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>root</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{<return>return <expr><ternary><condition><expr><name><name>id</name><index>[<expr><name>x</name></expr>]</index></name><operator>==</operator><name>x</name></expr>?</condition><then><expr><name>x</name></expr></then><else>:<expr><name><name>id</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><call><name>root</name><argument_list>(<argument><expr><name><name>id</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>}</block></function>
<function><type><name>void</name></type> <name>bfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name><name>queue</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name>q</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>id</name><index>[<expr><name>s</name></expr>]</index></name><operator>=</operator><call><name>root</name><argument_list>(<argument><expr><name>s</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>gr</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cc</name><index>[<expr><name>s</name></expr>]</index></name><operator>=</operator><name>cnt</name></expr>;</expr_stmt>
    <while>while<condition>(<expr><operator>!</operator><call><name><name>q</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>x</name><init>=<expr><call><name><name>q</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <macro><name>Fv</name><argument_list>(<argument>v</argument>,<argument>ad[x]</argument>)</argument_list></macro><block>{
            <expr_stmt><expr><name><name>vis</name><index>[<expr><name>v</name></expr>]</index></name><operator>=</operator><name>x</name></expr>;</expr_stmt>
        }</block>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><call><name>root</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name> <operator>=</operator> <call><name>root</name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{
            <if>if<condition>(<expr><name><name>vis</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name>x</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>id</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><call><name>root</name><argument_list>(<argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><call><name><name>q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><name><name>gr</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><name><name>cc</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>cnt</name></expr>;</expr_stmt></block></then></if>
        }</block></for>
    }</block></while>
    <expr_stmt><expr><operator>++</operator><name>cnt</name></expr>;</expr_stmt>
}</block></function>
<decl_stmt><decl><type><name>string</name></type> <name><name>ss</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>upd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list><block>{<macro><name>Fv</name><argument_list>(<argument>v</argument>,<argument>gr[i]</argument>)</argument_list></macro><expr_stmt><expr><name><name>ss</name><index>[<expr><name>id</name></expr>]</index><index>[<expr><name>v</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name>c</name></expr>;</expr_stmt>}</block></function>
<function><type><name>void</name></type> <name>get2</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name>d</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>id</name></expr></argument>,<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><if>if<condition>(<expr><name>x</name><operator>==</operator><literal type="number">1</literal><operator>||</operator><name>x</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then><block type="pseudo"><return>return;</return></block></then></if><expr_stmt><expr><call><name>get2</name><argument_list>(<argument><expr><name>x</name><operator>/</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>id</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>get2</name><argument_list>(<argument><expr><name>x</name><operator>-</operator><name>x</name><operator>/</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>id</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{
  <if>if<condition>(<expr><name>x</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
        <return>return;</return>
  }</block></then>
  <elseif>else <if>if<condition>(<expr><name>x</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
    <comment type="line">//upd(j, '0', id);</comment>
    <expr_stmt><expr><call><name>upd</name><argument_list>(<argument><expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="char">'1'</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">//for(int i = id + 1 ; i &lt; d ; ++i) upd(j, '0', i), upd(j + 1, '0', i);</comment>
  }</block></then></if></elseif>
  <else>else <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>xx</name> <init>= <expr><name>x</name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <comment type="line">//for(int i = 0 ; i &lt; xx ; ++i) upd(j + i, '0', id);</comment>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>xx</name></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>x</name></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>upd</name><argument_list>(<argument><expr><name>j</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="char">'1'</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><call><name>get</name><argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>xx</name></expr></argument>, <argument><expr><name>id</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>get</name><argument_list>(<argument><expr><name>j</name> <operator>+</operator> <name>xx</name></expr></argument>, <argument><expr><name>x</name> <operator>-</operator> <name>xx</name></expr></argument>, <argument><expr><name>id</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></else></if>
}</block></function>

<function><name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>m</name></expr>;</expr_stmt>
    <macro><name>For</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>m</argument>)</argument_list></macro><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>u</name></decl>,<decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>u</name><operator>&gt;&gt;</operator><name>v</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ad</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name><name>ad</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>
    <macro><name>For</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n+<literal type="number">1</literal></argument>)</argument_list></macro><expr_stmt><expr><name><name>id</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>=</operator><call><name>root</name><argument_list>(<argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>bfs</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><call><name>get2</name><argument_list>(<argument><expr><name>cnt</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>d</name><operator>++</operator></expr>;</expr_stmt>
    <macro><name>For</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n-<literal type="number">1</literal></argument>)</argument_list></macro> <expr_stmt><expr><name><name>ss</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>For</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>d-<literal type="number">1</literal></argument>)</argument_list></macro> <expr_stmt><expr><name><name>ss</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>ss</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>get</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>cnt</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>cnt</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
}</block></function>
</unit>
