<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29784039_64387472.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<decl_stmt><decl><type><name>int</name></type> <name>ttttttttttttttttttttttttttttttttttttttt</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fhihuhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh</name><init>=<expr><literal type="number">12</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>jjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjj</name><init>=<expr><literal type="number">13</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>string</name></type> <name>a</name></decl> ,<decl><type ref="prev"/><name>b</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name>q</name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>solv</name><parameter_list>()</parameter_list><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl> ;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr> ;</expr_stmt>
    <while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition>
    <block>{
        <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl> ;</decl_stmt><decl_stmt><decl><type><name>int</name></type> <name>hhhhhhhhhhhhhhsss</name><init>=<expr><literal type="number">12</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr> ;</expr_stmt><decl_stmt><decl><type><name>int</name></type> <name>jjjjjjjjjjjjjjjjjj</name><init>=<expr><literal type="number">12</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name><operator>&gt;&gt;</operator><name>b</name></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>a</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
        <decl_stmt><decl><type><name>int</name></type> <name>hioooooooooooo</name><init>=<expr><literal type="number">15</literal></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><call><name><name>q</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Yes"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
            <continue>continue;</continue>
        }</block></then></if>
        <if>if<condition>(<expr><call><name><name>q</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>!=</operator><literal type="number">4</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No"</literal> <operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
        }</block></then>
        <else>else
        <block>{
<decl_stmt><decl><type><name>int</name></type> <name>yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy</name><init>=<expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name><name>q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><name><name>q</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&amp;&amp;</operator><name><name>q</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>==</operator><name><name>q</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Yes"</literal> <operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
            }</block></then>
            <else>else<comment type="line">//gerhguigiu</comment>
                <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No"</literal> <operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></else></if>
        }</block></else></if>
    }</block></while>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>ttttttttttttttttttttttttttttttttttttttttttttttttttt</name><init>=<expr><literal type="number">00</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>solv</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>
<comment type="block">/*    int t ;
    cin &gt;&gt; t ;
    while(t--)
    {
        q.clear();
        int n ;
        cin &gt;&gt; n ;
        cin &gt;&gt; a&gt;&gt;b;
        for(int i = 0 ; i &lt; a.size() ; i++)
        {
            if(a[i]!=b[i])
            {
                q.push_back(a[i]-'a');
                q.push_back(b[i]-'a');
            }
        }
        if(q.size()==0)
        {
            cout &lt;&lt; "Yes"&lt;&lt;endl;
            continue;
        }
        if(q.size()!=4)
        {
            cout &lt;&lt; "No" &lt;&lt;endl;
        }
        else
        {
           // cout &lt;&lt; "Dsa" &lt;&lt;endl;
            //sort(q.begin() , q.end());
            if(q[0]==q[2]&amp;&amp;q[1]==q[3])
            {
                cout &lt;&lt; "Yes" &lt;&lt;endl;
            }
            else
                cout &lt;&lt; "No" &lt;&lt;endl;
        }
    }
    */</comment>
</unit>
