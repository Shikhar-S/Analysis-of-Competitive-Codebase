<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29742158_64417943.cpp"><cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><cpp:literal>"Ofast"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><cpp:literal>"O3"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><cpp:literal>"unroll-loops"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>target</name><name>(</name><cpp:literal>"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native"</cpp:literal><name>)</name></cpp:pragma>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long int</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<comment type="line">//Solution generated by Ashish on 06-11-2019 at 20:36:34</comment>

<function><type><name>void</name></type> <name>desperate_optimization</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>submitting</name><init>=<expr><literal type="boolean">true</literal></expr></init></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>precision</name><init>=<expr><literal type="number">10</literal></expr></init></decl></parameter>)</parameter_list>
<block>{
  <if>if<condition>(<expr><operator>!</operator><name>submitting</name></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then></if>
  <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>setf</name></name><argument_list>(<argument><expr><name><name>ios</name><operator>::</operator><name>fixed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>setf</name></name><argument_list>(<argument><expr><name><name>ios</name><operator>::</operator><name>showpoint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>precision</name></name><argument_list>(<argument><expr><name>precision</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name><init>=<expr><literal type="number">100005</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>g</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>unvisited</name></decl>;</decl_stmt>
<function><type><name>int32_t</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
  <expr_stmt><expr><call><name>desperate_optimization</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>m</name></expr>;</expr_stmt>
  <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>m</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
  <block>{
  	<decl_stmt><decl><type><name>int</name></type> <name>u</name></decl>,<decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
  	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>u</name><operator>&gt;&gt;</operator><name>v</name></expr>;</expr_stmt>
  	<expr_stmt><expr><name>u</name><operator>--</operator></expr>;</expr_stmt>
  	<expr_stmt><expr><name>v</name><operator>--</operator></expr>;</expr_stmt>
  	<expr_stmt><expr><name><name>g</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  	<expr_stmt><expr><name><name>g</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>
  <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name><name>unvisited</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
  <decl_stmt><decl><type><name>int</name></type> <name>sizeSum</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>answer</name><init>=<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
  <block>{
  	<if>if<condition>(<expr><call><name><name>unvisited</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
  	<comment type="line">//For component with 0 weighted edges containing node i</comment>
  	<expr_stmt><expr><call><name><name>unvisited</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  	<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>currentSubset</name></decl>;</decl_stmt>
  	<expr_stmt><expr><call><name><name>currentSubset</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  	<while>while<condition>(<expr><call><name><name>currentSubset</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition>
  	<block>{
			<decl_stmt><decl><type><name>int</name></type> <name>x</name><init>=<expr><operator>*</operator><operator>(</operator><call><name><name>currentSubset</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>currentSubset</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>todelete</name></decl>;</decl_stmt>
			<for>for<control>(<init><decl><type><name>auto</name></type> <name>itr</name><range>:<expr><name>unvisited</name></expr></range></decl></init>)</control>
			<block>{
				<if>if<condition>(<expr><name><name>g</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>count</name><argument_list>(<argument><expr><name>itr</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
				<expr_stmt><expr><call><name><name>currentSubset</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>itr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="line">// unvisited.erase(itr);</comment>
				<expr_stmt><expr><call><name><name>todelete</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>itr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>answer</name><operator>--</operator></expr>;</expr_stmt>
			}</block></for>	  		
			<for>for<control>(<init><decl><type><name>auto</name></type> <name>itr</name><range>:<expr><name>todelete</name></expr></range></decl></init>)</control>
				<block type="pseudo"><expr_stmt><expr><call><name><name>unvisited</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>itr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
  	}</block></while>
  }</block></for>
  <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>answer</name></expr>;</expr_stmt>






  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
