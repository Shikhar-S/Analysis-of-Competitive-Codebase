<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29727690_64374544.cpp"><comment type="line">// TY Swistakk </comment>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><cpp:literal>"Ofast"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><cpp:literal>"unroll-loops"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>target</name><name>(</name><cpp:literal>"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native"</cpp:literal><name>)</name></cpp:pragma>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ss</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fastio</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(0); cin.tie(0)</cpp:value></cpp:define>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>
 
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>N</name> <init>= <expr><literal type="number">200050</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>N1</name> <init>= <expr><literal type="number">100500</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>mod</name> <init>= <expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>
 
<using>using <namespace>namespace <name>std</name>;</namespace></using>
 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRACE</name></cpp:macro></cpp:define>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TRACE</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>trace</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__f(#__VA_ARGS__, __VA_ARGS__)</cpp:value></cpp:define>
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>Arg1</name></parameter>&gt;</parameter_list></template>
<type><name>void</name></type> <name>__f</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>Arg1</name><modifier>&amp;&amp;</modifier></type> <name>arg1</name></decl></parameter>)</parameter_list> <block>{
  <expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <name>name</name> <operator>&lt;&lt;</operator> <literal type="string">" : "</literal> <operator>&lt;&lt;</operator> <name>arg1</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>}</block></function>
 
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>Arg1</name></parameter>, <parameter><type><name>typename</name><modifier>...</modifier></type> <name>Args</name></parameter>&gt;</parameter_list></template>
<type><name>void</name></type> <name>__f</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>names</name></decl></parameter>, <parameter><decl><type><name>Arg1</name><modifier>&amp;&amp;</modifier></type> <name>arg1</name></decl></parameter>, <parameter><decl><type><name>Args</name><modifier>&amp;&amp;</modifier><modifier>...</modifier></type> <name>args</name></decl></parameter>)</parameter_list> <block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>comma</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>names</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>cerr</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>names</name></expr></argument>, <argument><expr><name>comma</name> <operator>-</operator> <name>names</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">" : "</literal> <operator>&lt;&lt;</operator> <name>arg1</name><operator>&lt;&lt;</operator><literal type="string">" | "</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>__f</name><argument_list>(<argument><expr><name>comma</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>args</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>trace</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>xd</name></decl>;</decl_stmt>

<function><type><name>bool</name></type> <name>cumple</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>)</parameter_list><block>{
	<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><call><name><name>xd</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>cuan</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>l</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<if>if<condition>(<expr><name><name>xd</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <name>w</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cuan</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
	}</block></for>

	<if>if<condition>(<expr><name>cuan</name> <operator>&gt;=</operator> <name>w</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then>
	<else>else <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></else></if>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{

	<expr_stmt><expr><name>fastio</name></expr>;</expr_stmt>
  	<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
  	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>

  	<while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition><block>{
  		<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
  		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
  		<expr_stmt><expr><call><name><name>xd</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
  			<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>;</decl_stmt>
  			<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name></expr>;</expr_stmt>
  			<expr_stmt><expr><call><name><name>xd</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  		}</block></for>

  		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>n</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block>{
  			<if>if<condition>(<expr><call><name>cumple</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>i</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt> <break>break;</break>}</block></then></if>
  		}</block></for>
  	}</block></while>

  	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

</unit>
