<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29782949_64404611.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro>          <cpp:value>long long int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>uu</name></cpp:macro>          <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vv</name></cpp:macro>          <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro>         <cpp:value>pair&lt;int,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INF</name></cpp:macro>         <cpp:value>1e9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD</name></cpp:macro>         <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fastRead</name></cpp:macro>    <cpp:value>ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0)</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAX</name> <init>= <expr><literal type="number">1e7</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>mark</name><index>[<expr><name>MAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type><name>prm</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>seive</name><parameter_list>()</parameter_list> <block>{

    
    <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>=<expr><literal type="number">2</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>*</operator><name>i</name> <operator>&lt;</operator><name>MAX</name></expr> ;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{
        
        <if>if<condition>(<expr><name><name>mark</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

        <for>for<control>(<init><decl><type><name>ll</name></type> <name>j</name> <init>= <expr><name>i</name><operator>*</operator><name>i</name></expr></init></decl> ;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>MAX</name></expr> ;</condition> <incr><expr><name>j</name><operator>+=</operator><name>i</name></expr></incr> )</control> <block type="pseudo"><expr_stmt><expr><name><name>mark</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></for>
    }</block></for>
    
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control> <block>{
        
        <if>if<condition>(<expr><name><name>mark</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>prm</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></for>
    
<comment type="line">//    for(int i =0 ; i &lt; 100 ; i++ ) cout&lt;&lt;prm[i]&lt;&lt;" ";</comment>
<comment type="line">//    cout&lt;&lt;'\n';</comment>
<comment type="line">//</comment>
<comment type="line">//    for(auto x: prm) cout&lt;&lt;x&lt;&lt;" ";</comment>
<comment type="line">//    cout&lt;&lt;'\n';</comment>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><name>fastRead</name></expr>;</expr_stmt>
<comment type="line">//    seive();    </comment>
    <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>;</decl_stmt>
    
    
<comment type="line">//    ll ret = 1;</comment>
<comment type="line">//    while(ret*3 &lt; 1e12) ret *=3;</comment>
<comment type="line">//    cout&lt;&lt;ret&lt;&lt;'\n';</comment>
<comment type="line">//    return 0;</comment>
<comment type="line">//    for(int j =1 ; j &lt;=20 ; j++ ) {</comment>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>nn</name> <init>= <expr><name>n</name></expr></init></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><name>ll</name></type> <name>till</name> <init>= <expr><call><name>sqrt</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>till</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>till</name></expr></argument> , <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type><name>vec</name></decl>;</decl_stmt>
    
    <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>till</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>  <block>{
        
        <if>if<condition>(<expr><name>n</name><operator>%</operator><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><then> <block>{
            <expr_stmt><expr><call><name><name>vec</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>vec</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>n</name><operator>/</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></for>
    
    <if>if<condition>(<expr><call><name><name>vec</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>n</name><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt></block></then>
    <else>else <block>{
        
        <decl_stmt><decl><type><name>ll</name></type> <name>gcd</name> <init>= <expr><name><name>vec</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>auto</name></type> <name>x</name> <range>: <expr><name>vec</name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><name>gcd</name> <operator>=</operator> <call><name>__gcd</name><argument_list>(<argument><expr><name>gcd</name></expr></argument> , <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
        
        <if>if<condition>(<expr><name>gcd</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt></block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>gcd</name><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt></block></else></if>
    }</block></else></if>
    
    
<comment type="line">//    }</comment>
    
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
