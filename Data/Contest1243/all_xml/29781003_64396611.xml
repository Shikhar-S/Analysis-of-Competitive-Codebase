<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29781003_64396611.cpp"><comment type="line">// clang-format off</comment>
<comment type="block">/* Shivam Sharma
	`They call me Hei$enBerg (~_^)`
	ABV-Indian Institute of Information Technology and Management, Gwalior
	*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt; <argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>vvi</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<typedef>typedef <type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>msi</name>;</typedef>
<typedef>typedef <type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>si</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt; <argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>vpii</name>;</typedef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T</name><parameter_list>()</parameter_list></cpp:macro> 	<cpp:value>ll t;	cin&gt;&gt;t;		while(t--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>p_b</name></cpp:macro>		 <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>p_f</name></cpp:macro> 		<cpp:value>push_front</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pop_b</name></cpp:macro> 		<cpp:value>pop_back()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pop_f</name></cpp:macro> 		<cpp:value>pop_front()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>m_p</name></cpp:macro>		<cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>l_b</name><parameter_list>(<parameter><type><name>v</name></type></parameter>,<parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro>     <cpp:value>lower_bound (v.begin(), v.end(), l)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>u_b</name><parameter_list>(<parameter><type><name>v</name></type></parameter>,<parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro>   	 <cpp:value>upper_bound (v.begin(), v.end(), l)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>min_pos</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro>		 <cpp:value>min_element(a.begin(),a.end())-a.begin()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>max_pos</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> 		 <cpp:value>max_element(a.begin(),a.end())-a.begin()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>min_el</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> 		 <cpp:value>*min_element(a.begin(),a.end())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>max_el</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro>		 <cpp:value>*max_element(a.begin(),a.end())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cnt</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> 		 <cpp:value>count(a.begin(),a.end(),l)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sort_a</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> 		 <cpp:value>sort(a.begin(),a.end())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sort_d</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> 		 <cpp:value>sort(a.begin(),a.end(),greater&lt;ll&gt;() )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>summ</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro>  	 <cpp:value>accumulate(a.begin(),a.end(),0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x.begin(),x.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inf</name></cpp:macro>      <cpp:value>1e9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SS</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>      <cpp:value>for(ll i=(ll)(a);i&lt;(ll)(b);i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rrep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>      <cpp:value>for(ll i=(ll)(a);i&gt;=(ll)(b);i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mset</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>    	<cpp:value>memset(a,b,sizeof(a));</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fast</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>     <cpp:macro><name>endl</name></cpp:macro>            <cpp:value>'\n'</cpp:value></cpp:define>
<comment type="line" format="doxygen">///==========INPUT=============///</comment>
	<cpp:define>#<cpp:directive>define</cpp:directive>     <cpp:macro><name>sc</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro>           <cpp:value>scanf("%lld",&amp;a);</cpp:value></cpp:define>
	<cpp:define>#<cpp:directive>define</cpp:directive>     <cpp:macro><name>sc2</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>        <cpp:value>scanf("%lld%lld",&amp;a,&amp;b);</cpp:value></cpp:define>
	<cpp:define>#<cpp:directive>define</cpp:directive>     <cpp:macro><name>sc3</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro>      <cpp:value>scanf("%lld%lld%lld",&amp;a,&amp;b,&amp;c);</cpp:value></cpp:define>
	<cpp:define>#<cpp:directive>define</cpp:directive>     <cpp:macro><name>sc4</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>scanf("%lld%lld%lld%lld",&amp;a,&amp;b,&amp;c,&amp;d);</cpp:value></cpp:define>
<comment type="line" format="doxygen">///==========PRINTING=============///</comment>
	<cpp:define>#<cpp:directive>define</cpp:directive>     <cpp:macro><name>prarr</name><parameter_list>(<parameter><type><name>arr</name></type></parameter>)</parameter_list></cpp:macro>      <cpp:value>rep(i,0,sizeof(arr)/sizeof(ll)) cout&lt;&lt;arr[i]&lt;&lt;" "; nl</cpp:value></cpp:define>
	<cpp:define>#<cpp:directive>define</cpp:directive>     <cpp:macro><name>prvec</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro>        <cpp:value>rep(i,0,v.size()) cout&lt;&lt;v[i]&lt;&lt;" "; nl</cpp:value></cpp:define>
	<cpp:define>#<cpp:directive>define</cpp:directive>     <cpp:macro><name>pr</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>           <cpp:value>cout&lt;&lt;x&lt;&lt;"\n";</cpp:value></cpp:define>
	<cpp:define>#<cpp:directive>define</cpp:directive>     <cpp:macro><name>pr2</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro>       <cpp:value>cout&lt;&lt;x&lt;&lt;" "&lt;&lt;y&lt;&lt;"\n";</cpp:value></cpp:define>
	<cpp:define>#<cpp:directive>define</cpp:directive>     <cpp:macro><name>pr3</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>cout&lt;&lt;x&lt;&lt;" "&lt;&lt;y&lt;&lt;" "&lt;&lt;z&lt;&lt;"\n";</cpp:value></cpp:define>
<comment type="line" format="doxygen">///==========DEBUGGING=============///</comment>
    <cpp:define>#<cpp:directive>define</cpp:directive> 	<cpp:macro><name>debug</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> 		<cpp:value>cout&lt;&lt;"*"&lt;&lt;a&lt;&lt;endl;</cpp:value></cpp:define>
   	<cpp:define>#<cpp:directive>define</cpp:directive> 	<cpp:macro><name>debug2</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> 	<cpp:value>cout&lt;&lt;"$"&lt;&lt;a&lt;&lt;" "&lt;&lt;b&lt;&lt;endl;</cpp:value></cpp:define>
   	<cpp:define>#<cpp:directive>define</cpp:directive> 	<cpp:macro><name>debug3</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> 	<cpp:value>cout&lt;&lt;"$"&lt;&lt;a&lt;&lt;" "&lt;&lt;b&lt;&lt;" "&lt;&lt;c&lt;&lt;endl;</cpp:value></cpp:define>
	<cpp:define>#<cpp:directive>define</cpp:directive> 	<cpp:macro><name>bug</name></cpp:macro> 			<cpp:value>cout&lt;&lt;"#"&lt;&lt;endl;</cpp:value></cpp:define>
   	<cpp:define>#<cpp:directive>define</cpp:directive> 	<cpp:macro><name>nl</name></cpp:macro> 				<cpp:value>cout&lt;&lt;'\n';</cpp:value></cpp:define>
<function><type><name>ll</name></type> <name>powermod</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>_a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>_b</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>_m</name></decl></parameter>)</parameter_list>    <block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>_r</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> <while>while<condition>(<expr><name>_b</name></expr>)</condition> <block>{<if>if<condition>(<expr><name>_b</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>_r</name> <operator>=</operator> <operator>(</operator> <name>_r</name> <operator>*</operator> <name>_a</name> <operator>)</operator> <operator>%</operator> <name>_m</name></expr>;</expr_stmt></block></then></if> <expr_stmt><expr><name>_b</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <expr_stmt><expr><name>_a</name> <operator>=</operator> <operator>(</operator> <name>_a</name> <operator>*</operator> <name>_a</name> <operator>)</operator> <operator>%</operator> <name>_m</name></expr>;</expr_stmt>}</block></while> <return>return <expr><name>_r</name></expr>;</return>
    }</block></function>
	<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro> <cpp:value>1e9+7;</cpp:value></cpp:define>

<comment type="line">// clang-format off</comment>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><name>fast</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>vi</name></type> <name>v</name></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>*</operator><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<if>if<condition>(<expr><name>n</name><operator>%</operator><name>i</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>p_b</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<while>while<condition>(<expr><name>n</name><operator>%</operator><name>i</name><operator>==</operator><literal type="number">0</literal></expr>)</condition>
					<block>{
						<expr_stmt><expr><name>n</name><operator>/=</operator><name>i</name></expr>;</expr_stmt>
					}</block></while>
		}</block></then></if>
			
		
	}</block></for>
	<if>if<condition>(<expr><name>n</name><operator>!=</operator><literal type="number">1</literal></expr>)</condition><then>
		<block type="pseudo"><expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>p_b</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
	<if>if<condition>(<expr><call><name><name>v</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
		<block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block></then>
	<else>else
		<block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="number">1</literal></expr>;</expr_stmt></block></else></if>

}</block></function>

</unit>
