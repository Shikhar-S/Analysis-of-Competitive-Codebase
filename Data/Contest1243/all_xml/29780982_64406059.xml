<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29780982_64406059.cpp"><comment type="line">//AUTHOR : TIRTH JARSANIA</comment>
<comment type="line">//COLLEGE : DAIICT</comment>
 
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INF</name></cpp:macro> <cpp:value>LONG_LONG_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MINF</name></cpp:macro> <cpp:value>LONG_LONG_MIN</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pi</name></cpp:macro> <cpp:value>acos(-1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bp</name></cpp:macro> <cpp:value>__builtin_popcount</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ld</name></cpp:macro> <cpp:value>long double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;ll,ll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>For</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(ll i=a;i&lt;b;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Fori</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(ll i=a;i&lt;b;i+=p)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Ror</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(ll i=a;i&gt;b;i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Rori</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(ll i=a;i&gt;b;i-=p)</cpp:value></cpp:define>
 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>precision</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout&lt;&lt;fixed&lt;&lt;setprecision(d)&lt;&lt;x</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>minQueue</name></cpp:macro> <cpp:value>priority_queue&lt;ll,vector&lt;ll&gt;,greater&lt;ll&gt; &gt;</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>maxQueue</name></cpp:macro> <cpp:value>priority_queue&lt;ll&gt;</cpp:value></cpp:define> 
 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pf</name></cpp:macro> <cpp:value>push_front</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ss</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILL</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset((a),(b),sizeof((a)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FAST</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(false),cin.tie(0),cout.tie(0);srand(time(NULL))</cpp:value></cpp:define>
 
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>nax</name> <init>= <expr><literal type="number">1e5</literal><operator>+</operator><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>pii</name></expr></argument>,<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></type> <name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>set</name> <argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>conn</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>g</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>auto</name></type> <name>it</name> <range>: <expr><name>s</name></expr></range></decl></init>)</control> <block type="pseudo"><if>if<condition>(<expr><call><name><name>m</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><block>{<expr><name>v</name></expr>,<expr><name>it</name></expr>}</block></expr></argument>)</argument_list></call> <operator>==</operator> <call><name><name>m</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>g</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></block></for>
    <for>for <control>(<init><decl><type><name>auto</name></type> <name>it</name> <range>: <expr><name>g</name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    <for>for <control>(<init><decl><type><name>auto</name></type> <name>it</name> <range>: <expr><name>g</name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    <return>return ;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><name>FAST</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl> , <decl><type ref="prev"/><name>mm</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>mm</name></expr>;</expr_stmt>
    <macro><name>For</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n+<literal type="number">1</literal></argument>)</argument_list></macro>    <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>For</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>mm</argument>)</argument_list></macro>
    <block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>u</name></decl> , <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>u</name> <operator>&gt;&gt;</operator> <name>v</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>m</name><index>[<expr><block>{<expr><name>u</name></expr>,<expr><name>v</name></expr>}</block></expr>]</index></name> <operator>=</operator> <name><name>m</name><index>[<expr><block>{<expr><name>v</name></expr>,<expr><name>u</name></expr>}</block></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    }</block>
    <for>for<control>( <init><decl><type><name>ll</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
    <block>{
        <if>if<condition>( <expr><call><name><name>s</name><operator>.</operator><name>find</name></name><argument_list>( <argument><expr><name>i</name></expr></argument> )</argument_list></call> <operator>!=</operator> <call><name><name>s</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr> )</condition><then>
        <block>{
            <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>conn</name><operator>++</operator></expr>;</expr_stmt>
        }</block></then></if>
    }</block></for>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>conn</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
}</block></function></unit>
