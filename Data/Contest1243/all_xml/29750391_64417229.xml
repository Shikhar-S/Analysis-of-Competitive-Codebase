<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29750391_64417229.cpp"><comment type="line">//IOI 2021</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ss</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAXN</name> <init>= <expr><literal type="number">15</literal> <operator>+</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name><name>path</name><index>[<expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>MAXN</name><operator>)</operator></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>c</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>g</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>sum</name></decl>, <decl><type ref="prev"/><name><name>sa</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>a</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>mp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name><name>dp</name><index>[<expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>MAXN</name><operator>)</operator></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>mark</name><index>[<expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>MAXN</name><operator>)</operator></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>mem</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>)</parameter_list> <block>{
	<if>if <condition>(<expr><name>mask</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
		<block type="pseudo"><expr_stmt><expr><name><name>dp</name><index>[<expr><name>mask</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt></block></then></if> 
	<if>if <condition>(<expr><name><name>mark</name><index>[<expr><name>mask</name></expr>]</index></name> <operator>||</operator> <name>mask</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
		<block type="pseudo"><return>return;</return></block></then></if>
	<expr_stmt><expr><name><name>mark</name><index>[<expr><name>mask</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>last</name> <init>= <expr><call><name>__builtin_ctz</name><argument_list>(<argument><expr><name>mask</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<if>if <condition>(<expr><name><name>sa</name><index>[<expr><name>last</name></expr>]</index></name> <operator>==</operator> <name>sum</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>mem</name><argument_list>(<argument><expr><name>mask</name> <operator>^</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>last</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>dp</name><index>[<expr><name>mask</name></expr>]</index></name> <operator>=</operator> <name><name>dp</name><index>[<expr><name>mask</name> <operator>^</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>last</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>path</name><index>[<expr><name>mask</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<return>return;</return>
	}</block></then></if>
	<decl_stmt><decl><type><name>int</name></type> <name>maskpr</name> <init>= <expr><name>mask</name> <operator>^</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>last</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>auto</name></type> <name>i</name> <range>: <expr><name><name>a</name><index>[<expr><name>last</name></expr>]</index></name></expr></range></decl></init>)</control> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>tmp</name> <init>= <expr><name>last</name></expr></init></decl>, <decl><type ref="prev"/><name>p</name> <init>= <expr><name>i</name></expr></init></decl>, <decl><type ref="prev"/><name>maskp</name> <init>= <expr><name>maskpr</name></expr></init></decl>, <decl><type ref="prev"/><name>dade</name> <init>= <expr><name>i</name></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>sum</name> <operator>-</operator> <operator>(</operator><name><name>sa</name><index>[<expr><name>tmp</name></expr>]</index></name> <operator>-</operator> <name>dade</name><operator>)</operator> <operator>==</operator> <name>p</name></expr>)</condition><then>
			<block type="pseudo"><continue>continue;</continue></block></then></if>
		<decl_stmt><decl><type><name>bool</name></type> <name>flag</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
		<while>while <condition>(<expr><name>flag</name></expr>)</condition> <block>{
			<decl_stmt><decl><type><name>ll</name></type> <name>need</name> <init>= <expr><name>sum</name> <operator>-</operator> <operator>(</operator><name><name>sa</name><index>[<expr><name>tmp</name></expr>]</index></name> <operator>-</operator> <name>dade</name><operator>)</operator></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>need</name> <operator>&gt;</operator> <literal type="number">1e9</literal> <operator>||</operator> <call><name><name>mp</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name>need</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><operator>(</operator><name>maskp</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>mp</name><index>[<expr><name>need</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>need</name> <operator>!=</operator> <name>p</name><operator>)</operator></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
				<break>break;</break>
			}</block></then></if>
			<if>if <condition>(<expr><name>need</name> <operator>==</operator> <name>p</name></expr>)</condition><then> <block>{
				<break>break;</break>
			}</block></then></if>
			<expr_stmt><expr><name>dade</name> <operator>=</operator> <name>need</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>mp</name><index>[<expr><name>need</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>maskp</name> <operator>^=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>mp</name><index>[<expr><name>need</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
		}</block></while>
		<if>if <condition>(<expr><name>flag</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>mem</name><argument_list>(<argument><expr><name>maskp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>dp</name><index>[<expr><name>mask</name></expr>]</index></name> <operator>=</operator> <name><name>dp</name><index>[<expr><name>maskp</name></expr>]</index></name></expr>;</expr_stmt>
		}</block></then></if>
		<if>if <condition>(<expr><name><name>dp</name><index>[<expr><name>mask</name></expr>]</index></name></expr>)</condition><then> <block>{
			<expr_stmt><expr><name><name>path</name><index>[<expr><name>mask</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
			<return>return;</return>
		}</block></then></if>
	}</block></for>
}</block></function>

<function><type><name>void</name></type> <name>pp</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>)</parameter_list> <block>{
	<if>if <condition>(<expr><name>mask</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
		<block type="pseudo"><return>return;</return></block></then></if>
	<decl_stmt><decl><type><name>int</name></type> <name>last</name> <init>= <expr><call><name>__builtin_ctz</name><argument_list>(<argument><expr><name>mask</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<if>if <condition>(<expr><name><name>path</name><index>[<expr><name>mask</name></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
		<expr_stmt><expr><name><name>c</name><index>[<expr><name>last</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><index>[<expr><name>last</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>g</name><index>[<expr><name>last</name></expr>]</index></name> <operator>=</operator> <name>last</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pp</name><argument_list>(<argument><expr><name>mask</name> <operator>^</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>last</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	}</block></then></if>
	<decl_stmt><decl><type><name>int</name></type> <name>tmp</name> <init>= <expr><name>last</name></expr></init></decl>, <decl><type ref="prev"/><name>p</name> <init>= <expr><name><name>path</name><index>[<expr><name>mask</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>maskp</name> <init>= <expr><name>mask</name> <operator>^</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>last</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></init></decl>, <decl><type ref="prev"/><name>dade</name> <init>= <expr><name><name>path</name><index>[<expr><name>mask</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>c</name><index>[<expr><name>last</name></expr>]</index></name> <operator>=</operator> <name><name>path</name><index>[<expr><name>mask</name></expr>]</index></name></expr>;</expr_stmt>
	<while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{

		<decl_stmt><decl><type><name>ll</name></type> <name>need</name> <init>= <expr><name>sum</name> <operator>-</operator> <operator>(</operator><name><name>sa</name><index>[<expr><name>tmp</name></expr>]</index></name> <operator>-</operator> <name>dade</name><operator>)</operator></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>need</name> <operator>==</operator> <name>p</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><name><name>g</name><index>[<expr><name>last</name></expr>]</index></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
			<break>break;</break>
		}</block></then></if>
		<expr_stmt><expr><name><name>g</name><index>[<expr><name><name>mp</name><index>[<expr><name>need</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>c</name><index>[<expr><name><name>mp</name><index>[<expr><name>need</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>need</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>dade</name> <operator>=</operator> <name>need</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>mp</name><index>[<expr><name>need</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>maskp</name> <operator>^=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>mp</name><index>[<expr><name>need</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
	}</block></while>
	<expr_stmt><expr><call><name>pp</name><argument_list>(<argument><expr><name>maskp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>ni</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>ni</name></expr>;</expr_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>ni</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
			<block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr><operator>,</operator> <expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name>sum</name> <operator>+=</operator> <name>t</name></expr><operator>,</operator> <expr><name><name>sa</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name>t</name></expr><operator>,</operator> <expr><name><name>mp</name><index>[<expr><name>t</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block></for>
	}</block></for>
	<if>if <condition>(<expr><name>sum</name> <operator>%</operator> <name>n</name></expr>)</condition><then>
		<block type="pseudo"><return>return <expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No\n"</literal></expr><operator>,</operator> <expr><literal type="number">0</literal></expr>;</return></block></then></if>
	<expr_stmt><expr><name>sum</name> <operator>/=</operator> <name>n</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>mem</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>n</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><operator>!</operator><name><name>dp</name><index>[<expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>n</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><then>
		<block type="pseudo"><return>return <expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No\n"</literal></expr><operator>,</operator> <expr><literal type="number">0</literal></expr>;</return></block></then></if>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Yes\n"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pp</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>n</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>c</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal> <operator>&lt;&lt;</operator> <name><name>g</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt></block></for>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
