<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29770963_64398973.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{

    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>


    <decl_stmt><decl><type><name>int</name></type> <name>T</name></decl> ;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>T</name></expr> ;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>t2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>t2</name> <operator>&lt;</operator> <name>T</name></expr>;</condition> <incr><expr><name>t2</name><operator>++</operator></expr></incr>)</control><block>{

        <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl> ;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr> ;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>, <decl><type ref="prev"/><name>t</name></decl> ;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>s</name> <operator>&gt;&gt;</operator> <name>t</name></expr> ;</expr_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>can</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>moves</name></decl> ;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{

          <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
            <block type="pseudo"><continue>continue ;</continue></block></then></if>
          <decl_stmt><decl><type><name>int</name></type> <name>ind</name> <init>= <expr><name>i</name></expr></init></decl> ;</decl_stmt>
          <while>while<condition>(<expr><name>ind</name> <operator>&lt;</operator> <name>n</name> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><name>ind</name></expr>]</index></name> <operator>!=</operator> <name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
            <block type="pseudo"><expr_stmt><expr><name>ind</name><operator>++</operator></expr> ;</expr_stmt></block></while>
          <if>if<condition>(<expr><name>ind</name> <operator>==</operator> <name>n</name></expr>)</condition><then><block>{

            <expr_stmt><expr><name>ind</name> <operator>=</operator> <name>i</name><operator>+</operator><literal type="number">1</literal></expr> ;</expr_stmt>
            <while>while<condition>(<expr><name>ind</name> <operator>&lt;</operator> <name>n</name> <operator>&amp;&amp;</operator> <name><name>t</name><index>[<expr><name>ind</name></expr>]</index></name> <operator>!=</operator> <name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
              <block type="pseudo"><expr_stmt><expr><name>ind</name><operator>++</operator></expr> ;</expr_stmt></block></while>
            <if>if<condition>(<expr><name>ind</name> <operator>==</operator> <name>n</name></expr>)</condition><then><block>{

              <expr_stmt><expr><name>can</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>

            }</block></then><else>else<block>{

              <expr_stmt><expr><name>ans</name><operator>++</operator></expr> ;</expr_stmt>
              <expr_stmt><expr><call><name><name>moves</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>, <expr><name>ind</name><operator>+</operator><literal type="number">1</literal></expr>}</block></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
              <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>t</name><index>[<expr><name>ind</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            }</block></else></if>

          }</block></then><else>else<block>{

            <expr_stmt><expr><name>ans</name><operator>++</operator></expr> ;</expr_stmt>
            <expr_stmt><expr><name>ans</name><operator>++</operator></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name><name>moves</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name>ind</name><operator>+</operator><literal type="number">1</literal></expr>,<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>}</block></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>ind</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>t</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name><name>moves</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>,<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>}</block></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>t</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

          }</block></else></if>

        }</block></for>
        <if>if<condition>(<expr><name>can</name></expr>)</condition><then><block>{
          <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Yes\n"</literal> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr> ;</expr_stmt>
          <for>for<control>(<init><decl><type><name>auto</name></type> <name>i</name><range>:<expr><name>moves</name></expr></range></decl></init>)</control>
            <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>i</name><operator>.</operator><name>first</name></name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal> <operator>&lt;&lt;</operator> <name><name>i</name><operator>.</operator><name>second</name></name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr> ;</expr_stmt></block></for>
        }</block></then><else>else<block>{

          <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No\n"</literal></expr> ;</expr_stmt>

        }</block></else></if>

    }</block></for>

}</block></function>
</unit>
