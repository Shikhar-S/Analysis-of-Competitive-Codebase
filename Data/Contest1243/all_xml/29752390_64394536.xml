<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29752390_64394536.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>j</name></type></parameter>,<parameter><type><name>k</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=(j);i&lt;=(k);++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>j</name></type></parameter>,<parameter><type><name>k</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=(j);i&gt;=(k);--i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>it</name></type></parameter>,<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(auto it=s.begin();it!=s.end();++it)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PB</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ull</name>;</typedef>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<namespace>namespace <name>IO</name><block>{
    <function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
    <specifier>inline</specifier> <type><name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list><block>{
        <expr_stmt><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt><decl_stmt><decl><type><name>int</name></type> <name>f</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt><decl_stmt><decl><type><name>char</name></type> <name>ch</name><init>=<expr><call><name>getchar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while<condition>(<expr><name><name>ch</name><argument_list type="generic">&lt;<argument><expr><literal type="char">'0'</literal><operator>||</operator><name>ch</name></expr></argument>&gt;</argument_list></name><literal type="char">'9'</literal></expr>)</condition><block>{<if>if<condition>(<expr><name>ch</name><operator>==</operator><literal type="char">'-'</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>f</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if><expr_stmt><expr><name>ch</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>}</block></while>
        <while>while<condition>(<expr><name>ch</name><operator>&lt;=</operator><literal type="char">'9'</literal><operator>&amp;&amp;</operator><name>ch</name><operator>&gt;=</operator><literal type="char">'0'</literal></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>x</name><operator>=</operator><name>x</name><operator>*</operator><literal type="number">10</literal><operator>+</operator><name>ch</name><operator>-</operator><literal type="char">'0'</literal></expr><operator>,</operator><expr><name>ch</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
    }</block></function>
}</block></namespace><empty_stmt>;</empty_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name><init>=<expr><literal type="number">55</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>Time</name></decl>,<decl><type ref="prev"/><name>n</name></decl>,<decl><type ref="prev"/><name>tot</name></decl>,<decl><type ref="prev"/><name><name>num</name><index>[<expr><literal type="number">30</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>ans</name><index>[<expr><literal type="number">1000</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>S</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>T</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
   <comment type="line">// freopen("txt.in","r",stdin);freopen("txt.out","w",stdout);</comment>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>Time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>Time</name><operator>--</operator></expr>)</condition><block>{
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>num</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>tot</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s\n%s\n"</literal></expr></argument>,<argument><expr><name>S</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>T</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>F</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro><expr_stmt><expr><name><name>num</name><index>[<expr><name><name>S</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
        <macro><name>F</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro><expr_stmt><expr><name><name>num</name><index>[<expr><name><name>T</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>flag</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <macro><name>F</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">25</literal></argument>)</argument_list></macro><block>{
            <if>if<condition>(<expr><name><name>num</name><index>[<expr><name>i</name></expr>]</index></name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then><block>{<expr_stmt><expr><name>flag</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt><break>break;</break>}</block></then></if>
        }</block>
        <if>if<condition>(<expr><name>flag</name></expr>)</condition><then><block>{
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Yes\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <macro><name>F</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro><block>{
                <if>if<condition>(<expr><name><name>S</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name><name>T</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
                <decl_stmt><decl><type><name>int</name></type> <name>tag</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                <macro><name>F</name><argument_list>(<argument>j</argument>,<argument>i+<literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro><block>{
                    <if>if<condition>(<expr><name><name>S</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name><name>S</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then><block>{
                        <comment type="line">//printf("%d %d\n",j,i);</comment>
                        <expr_stmt><expr><name><name>ans</name><index>[<expr><operator>++</operator><name>tot</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name>j</name></expr><operator>,</operator><expr><name><name>ans</name><index>[<expr><name>tot</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>T</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tag</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt><break>break;</break>
                    }</block></then></if>
                }</block>
                <if>if<condition>(<expr><name>tag</name></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
                <macro><name>F</name><argument_list>(<argument>j</argument>,<argument>i+<literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro><block>{
                    <if>if<condition>(<expr><name><name>S</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name><name>T</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then><block>{
                        <comment type="line">//printf("%d %d\n",j,j);</comment>
                        <expr_stmt><expr><name><name>ans</name><index>[<expr><operator>++</operator><name>tot</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name>j</name></expr><operator>,</operator><expr><name><name>ans</name><index>[<expr><name>tot</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name>j</name></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>T</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <comment type="line">//printf("%d %d\n",j,i);</comment>
                        <expr_stmt><expr><name><name>ans</name><index>[<expr><operator>++</operator><name>tot</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name>j</name></expr><operator>,</operator><expr><name><name>ans</name><index>[<expr><name>tot</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>T</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>
                    }</block></then></if>
                }</block>
            }</block>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>,<argument><expr><name>tot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <macro><name>F</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>tot</argument>)</argument_list></macro><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d\n"</literal></expr></argument>,<argument><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"No\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
    }</block></while>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
