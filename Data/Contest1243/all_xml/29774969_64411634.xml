<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29774969_64411634.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ld</name></cpp:macro> <cpp:value>long double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>v</name></cpp:macro> <cpp:value>vector</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x.begin(),x.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rALL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x.rbegin(),x.rend()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>'\n'</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>mod</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ld</name></type> <name>PI</name> <init>= <expr><call><name>acos</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<struct><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> struct <name>DSU</name> <block>{<public type="default">
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>parent</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>T</name></type> <name>numComponents</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<constructor><name>DSU</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list> <block>{
		<if>if<condition>(<expr><name>n</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><call><name>init</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
	}</block></constructor>
	<function><type><name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>parent</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>size</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>numComponents</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
		<for>for <control>(<init><decl><type><name>T</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block type="pseudo"><expr_stmt><expr><name><name>parent</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block></for>
	}</block></function>
	<function><type><name>T</name></type> <name>getParent</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><ternary><condition><expr><operator>(</operator><name>x</name> <operator>==</operator> <name><name>parent</name><index>[<expr><name>x</name></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><name>x</name></expr> </then><else>: <expr><name><name>parent</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>getParent</name><argument_list>(<argument><expr><name><name>parent</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
	}</block></function>
	<function><type><name>bool</name></type> <name>merge</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>getParent</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>getParent</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>x</name> <operator>==</operator> <name>y</name></expr>)</condition><then> <block>{
			<return>return <expr><literal type="boolean">false</literal></expr>;</return>
		}</block></then></if> 
		<if>if <condition>(<expr><name><name>size</name><index>[<expr><name>x</name></expr>]</index></name> <operator>&lt;</operator> <name><name>size</name><index>[<expr><name>y</name></expr>]</index></name></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><name><name>parent</name><index>[<expr><name>y</name></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>size</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+=</operator> <name><name>size</name><index>[<expr><name>y</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>numComponents</name><operator>--</operator></expr>;</expr_stmt>
		<return>return <expr><literal type="boolean">true</literal></expr>;</return>
	}</block></function>
</public>}</block>;</struct>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>v</name><argument_list type="generic">&lt;<argument><expr><name><name>v</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>g</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>toCompute</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{
		<expr_stmt><expr><name><name>toCompute</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	}</block></for>
	<for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{
		<decl_stmt><decl><type><name>ll</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>g</name><index>[<expr><name>a</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>b</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>g</name><index>[<expr><name>b</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>a</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<decl_stmt><decl><type><name><name>DSU</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>uf</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{
		<decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>toMerge</name></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>auto</name></type> <name>j</name> <range>: <expr><name><name>g</name><index>[<expr><name>i</name></expr>]</index></name></expr></range></decl></init>)</control> <block>{
			<if>if<condition>(<expr><call><name><name>toCompute</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><call><name><name>uf</name><operator>.</operator><name>getParent</name></name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
				<expr_stmt><expr><name><name>toCompute</name><index>[<expr><call><name><name>uf</name><operator>.</operator><name>getParent</name></name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>++</operator></expr>;</expr_stmt>
			}</block></then></if>
		}</block></for>
		<decl_stmt><decl><type><name>ll</name></type> <name>toPut</name> <init>= <expr><name>i</name></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>auto</name></type> <name>j</name> <range>: <expr><name>toCompute</name></expr></range></decl></init>)</control> <block>{
			<if>if<condition>(<expr><name><name>j</name><operator>.</operator><name>second</name></name> <operator>&lt;</operator> <name><name>uf</name><operator>.</operator><name>size</name><index>[<expr><name><name>j</name><operator>.</operator><name>first</name></name></expr>]</index></name></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name><name>uf</name><operator>.</operator><name>merge</name></name><argument_list>(<argument><expr><name>toPut</name></expr></argument>, <argument><expr><name><name>j</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>toPut</name> <operator>=</operator> <call><name><name>uf</name><operator>.</operator><name>getParent</name></name><argument_list>(<argument><expr><name>toPut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then>
			<else>else <block type="pseudo"><expr_stmt><expr><name><name>toMerge</name><index>[<expr><name><name>j</name><operator>.</operator><name>first</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></else></if>
		}</block></for>
		<expr_stmt><expr><name>toCompute</name> <operator>=</operator> <name>toMerge</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>toCompute</name><index>[<expr><name>toPut</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>uf</name><operator>.</operator><name>numComponents</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
