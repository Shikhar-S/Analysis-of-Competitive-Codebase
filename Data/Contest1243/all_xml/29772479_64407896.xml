<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29772479_64407896.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name><init>=<expr><literal type="number">1e6</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>prime</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name>cnt</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name><name>isprime</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>get_prime</name><parameter_list>()</parameter_list>
<block>{
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>N</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<if>if<condition>(<expr><operator>!</operator><name><name>isprime</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>	<block type="pseudo"><expr_stmt><expr><name><name>prime</name><index>[<expr><operator>++</operator><name>cnt</name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></then></if>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>cnt</name><operator>&amp;&amp;</operator><name>i</name><operator>*</operator><name><name>prime</name><index>[<expr><name>j</name></expr>]</index></name><operator>&lt;=</operator><name>N</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
		<block>{
			<expr_stmt><expr><name><name>isprime</name><index>[<expr><name>i</name><operator>*</operator><name><name>prime</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<if>if<condition>(<expr><name>i</name><operator>%</operator><name><name>prime</name><index>[<expr><name>j</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>	<block type="pseudo"><break>break;</break></block></then></if>
		}</block></for>
	}</block></for>
}</block></function>
<comment type="block">/*r(int i=0;i&lt;n;i++){
            if(str1[i]!=str2[i]){
                cnt++;
                pos[k++]=i;
            }
            if(cnt&gt;2){
                flag=1; brea**/</comment>
                
                


<function><type><name>bool</name></type> <name>Isprime</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{
	<if>if<condition>(<expr><name>n</name><operator>&lt;=</operator><literal type="number">3</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><name>n</name></expr>;</return></block></then></if>
	<if>if<condition>(<expr><name>n</name><operator>%</operator><literal type="number">6</literal><operator>!=</operator><literal type="number">1</literal><operator>&amp;&amp;</operator><name>n</name><operator>%</operator><literal type="number">6</literal><operator>!=</operator><literal type="number">5</literal></expr>)</condition><then>
	<block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
	<decl_stmt><decl><type><name>int</name></type> <name>t</name><init>=<expr><call><name>sqrt</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>t</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">6</literal></expr></incr>)</control> <block>{
        <if>if <condition>(<expr><name>n</name> <operator>%</operator> <name>i</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>n</name> <operator>%</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        }</block></then></if>
    }</block></for>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return><comment type="block">/*
    r(int i=0;i&lt;n;i++){
            if(str1[i]!=str2[i]){
                cnt++;
                pos[k++]=i;
            }
            if(cnt&gt;2){
                flag=1; brea*/</comment>
}</block></function>
<function><type><name>int</name></type> <name>cmp4</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
	<return>return <expr><name>a</name><operator>&gt;</operator><name>b</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>qmi4</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
	<decl_stmt><decl><type><name>int</name></type> <name>res</name><init>=<expr><literal type="number">21</literal></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>b</name></expr>)</condition><block>{
		<if>if<condition>(<expr><name>b</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then>	<block type="pseudo"><expr_stmt><expr><name>res</name><operator>=</operator><name>res</name><operator>*</operator><name>a</name></expr>;</expr_stmt></block></then></if>
		<expr_stmt><expr><name>b</name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>a</name><operator>=</operator><name>a</name><operator>*</operator><name>a</name></expr>;</expr_stmt>
	}</block></while>
	<return>return <expr><name>res</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>qmi12</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
	<decl_stmt><decl><type><name>int</name></type> <name>res</name><init>=<expr><literal type="number">21</literal></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>b</name></expr>)</condition><block>{
		<if>if<condition>(<expr><name>b</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then>	<block type="pseudo"><expr_stmt><expr><name>res</name><operator>=</operator><name>res</name><operator>*</operator><name>a</name></expr>;</expr_stmt></block></then></if>
		<expr_stmt><expr><name>b</name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>a</name><operator>=</operator><name>a</name><operator>*</operator><name>a</name></expr>;</expr_stmt>
	}</block></while>
	<return>return <expr><name>res</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>f</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>t</name><init>=<expr><call><name>sqrt</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=
	<comment type="block">/*r(int i=0;i&lt;n;i++){
            if(str1[i]!=str2[i]){
                cnt++;
                pos[k++]=i;
            }
            if(cnt&gt;2){
                flag=1; brea
				*/</comment><expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name><name>prime</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;=</operator><name>t</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<if>if<condition>(<expr><name>n</name><operator>%</operator><name><name>prime</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
		<block>{
			<while>while<condition>(<expr><name>n</name><operator>%</operator><name><name>prime</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr>)</condition>
			<block>{
				<comment type="block">/*r(int i=0;i&lt;n;i++){
            if(str1[i]!=str2[i]){
                cnt++;
                pos[k++]=i;
            }
            if(cnt&gt;2){
                flag=1; brea
                */</comment>
				<expr_stmt><expr><name>n</name><operator>/=</operator><name><name>prime</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
			}</block></while>
			<if>if<condition>(<expr><name>n</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><name><name>prime</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return></block></then>
			<else>else <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></else></if>
		}</block></then></if>
	}</block></for><comment type="block">/*r(int i=0;i&lt;n;i++){
            if(str1[i]!=str2[i]){
                cnt++;
                pos[k++]=i;
            }
            if(cnt&gt;2){
                flag=1; brea
                */</comment>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name>get_prime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/*r(int i=0;i&lt;n;i++){
            if(str1[i]!=str2[i]){
                cnt++;
                pos[k++]=i;
            }
            if(cnt&gt;2){
                flag=1; brea
                */</comment>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
	<if>if<condition>(<expr><call><name>Isprime</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>n</name></expr>;</expr_stmt></block></then>
	<else>else <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name>f</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
 }</block></function></unit>
