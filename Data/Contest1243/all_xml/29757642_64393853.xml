<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29757642_64393853.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>y1</name></cpp:macro> <cpp:value>theboatman</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>make_struct</name><parameter_list>(<parameter><type><name>args</name><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{args}</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">1e6</literal> <operator>+</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>inf</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>long</name> <name>long</name></type> <name>INF</name> <init>= <expr><literal type="number">1e18</literal> <operator>+</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>

<struct>struct <name>tree</name> <block>{<public type="default">
    <decl_stmt><decl><type><name>int</name></type> <name>v</name></decl>, <decl><type ref="prev"/><name>tl</name></decl>, <decl><type ref="prev"/><name>tr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>t</name></decl>;</decl_stmt>

    <function><type><name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>tl</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>tr</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>n</name> <operator>*</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>void</name></type> <name>inc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>tl</name> <operator>==</operator> <name>tr</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name><name>t</name><index>[<expr><name>v</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block></then>
        <else>else <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>tm</name> <init>= <expr><name>tl</name> <operator>+</operator> <name>tr</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>pos</name> <operator>&lt;=</operator> <name>tm</name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><call><name>inc</name><argument_list>(<argument><expr><name>v</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>tl</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
            <else>else
                <block type="pseudo"><expr_stmt><expr><call><name>inc</name><argument_list>(<argument><expr><name>v</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal> <operator>|</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>tm</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>tr</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>

            <expr_stmt><expr><name><name>t</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>t</name><index>[<expr><name>v</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>t</name><index>[<expr><name>v</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal> <operator>|</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <function><type><name>void</name></type> <name>inc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>inc</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>tl</name></expr></argument>, <argument><expr><name>tr</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>int</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tr</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>tl</name> <operator>==</operator> <name>tr</name></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><operator>(</operator><ternary><condition><expr><name><name>t</name><index>[<expr><name>v</name></expr>]</index></name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>tl</name></expr></else></ternary><operator>)</operator></expr>;</return></block></then></if>

        <decl_stmt><decl><type><name>int</name></type> <name>tm</name> <init>= <expr><name>tl</name> <operator>+</operator> <name>tr</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>t</name><index>[<expr><name>v</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal> <operator>|</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><call><name>dfs</name><argument_list>(<argument><expr><name>v</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>tl</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>;</return></block></then>
        <else>else
            <block type="pseudo"><return>return <expr><call><name>dfs</name><argument_list>(<argument><expr><name>v</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal> <operator>|</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>tm</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>tr</name></expr></argument>)</argument_list></call></expr>;</return></block></else></if>
    }</block></function>

    <function><type><name>int</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>l</name> <operator>&gt;</operator> <name>r</name></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block></then></if>

        <if>if <condition>(<expr><name>tl</name> <operator>==</operator> <name>l</name> <operator>&amp;&amp;</operator> <name>tr</name> <operator>==</operator> <name>r</name></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><call><name>dfs</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>tl</name></expr></argument>, <argument><expr><name>tr</name></expr></argument>)</argument_list></call></expr>;</return></block></then></if>

        <decl_stmt><decl><type><name>int</name></type> <name>tm</name> <init>= <expr><name>tl</name> <operator>+</operator> <name>tr</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>ql</name> <init>= <expr><call><name>get</name><argument_list>(<argument><expr><name>v</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>tl</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><call><name>min</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>qr</name> <init>= <expr><call><name>get</name><argument_list>(<argument><expr><name>v</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal> <operator>|</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>tm</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>tr</name></expr></argument>, <argument><expr><call><name>max</name><argument_list>(<argument><expr><name>tm</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <return>return <expr><call><name>max</name><argument_list>(<argument><expr><name>ql</name></expr></argument>, <argument><expr><name>qr</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>int</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name>get</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>tl</name></expr></argument>, <argument><expr><name>tr</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
</public>}</block>;</struct>

<struct>struct <name>dsu</name> <block>{<public type="default">
    <decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>p</name></decl>;</decl_stmt>

    <function><type><name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
            <expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <function><type><name>int</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>p</name><index>[<expr><name>v</name></expr>]</index></name> <operator>==</operator> <name>v</name></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><name>v</name></expr>;</return></block></then></if>

        <return>return <expr><name><name>p</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <call><name>get</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>v</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>bool</name></type> <name>unite</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>get</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>get</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>a</name> <operator>!=</operator> <name>b</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>p</name><index>[<expr><name>a</name></expr>]</index></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
        }</block></then></if>

        <return>return <expr><name>a</name> <operator>!=</operator> <name>b</name></expr>;</return>
    }</block></function>
</public>}</block>;</struct>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name><name>pair</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>edge</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>temp_g</name><argument_list>(<argument><expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>temp_g</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>temp_g</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>edge</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name><name>pair</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>g</name><argument_list>(<argument><expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><name><name>temp_g</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>temp_g</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>temp_g</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>auto</name></type> <name>x</name> <range>: <expr><name><name>temp_g</name><index>[<expr><name>i</name></expr>]</index></name></expr></range></decl></init>)</control> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><name>x</name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>l</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;=</operator> <name>r</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>g</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name>l</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>r</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <expr_stmt><expr><name>l</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
        }</block></for>
    }</block></for>

    <decl_stmt><decl><type><name>tree</name></type> <name>str</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dsu</name></type> <name>osu</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>str</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>osu</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <if>if <condition>(<expr><call><name><name>str</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name><name>queue</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>que</name></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name>que</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>str</name><operator>.</operator><name>inc</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>cmp</name></decl>;</decl_stmt>
            <while>while<condition>(<expr><call><name><name>que</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="boolean">false</literal></expr>)</condition> <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><call><name><name>que</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>que</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name><name>cmp</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <for>for<control>(<init><decl><type><name>auto</name></type> <name>to</name> <range>: <expr><name><name>g</name><index>[<expr><name>v</name></expr>]</index></name></expr></range></decl></init>)</control> <block>{
                    <decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><name><name>to</name><operator>.</operator><name>first</name></name></expr></init></decl>, <decl><type ref="prev"/><name>r</name> <init>= <expr><name><name>to</name><operator>.</operator><name>second</name></name></expr></init></decl>;</decl_stmt>

                    <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><call><name><name>str</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <while>while<condition>(<expr><name>x</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{
                        <expr_stmt><expr><call><name><name>que</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>str</name><operator>.</operator><name>inc</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name><name>str</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></while>
                }</block></for>
            }</block></while>

            <decl_stmt><decl><type><name>int</name></type> <name>last</name> <init>= <expr><call><name><name>cmp</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for<control>(<init><decl><type><name>auto</name></type> <name>v</name> <range>: <expr><name>cmp</name></expr></range></decl></init>)</control> <block>{
                <expr_stmt><expr><call><name><name>osu</name><operator>.</operator><name>unite</name></name><argument_list>(<argument><expr><name>last</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>last</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
            }</block></for>

        }</block></then></if>
    }</block></for>

    <decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>auto</name></type> <name>i</name> <range>: <expr><name>edge</name></expr></range></decl></init>)</control> <block>{
        <if>if <condition>(<expr><call><name><name>osu</name><operator>.</operator><name>unite</name></name><argument_list>(<argument><expr><name><name>i</name><operator>.</operator><name>first</name></name></expr></argument>, <argument><expr><name><name>i</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>ans</name><operator>++</operator></expr>;</expr_stmt>
        }</block></then></if>
    }</block></for>

    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
<comment type="block">/*
*/</comment>
</unit>
