<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29769458_64388623.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>pll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>double</name></expr></argument>,<argument><expr><name>double</name></expr></argument>&gt;</argument_list></name></type> <name>pdd</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>vl</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>double</name></expr></argument>&gt;</argument_list></name></type> <name>vd</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>&gt;</argument_list></name></type> <name>vs</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pll</name></expr></argument>&gt;</argument_list></name></type> <name>vll</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pdd</name></expr></argument>&gt;</argument_list></name></type> <name>vdd</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vl</name></expr></argument>&gt;</argument_list></name></type> <name>vvl</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vd</name></expr></argument>&gt;</argument_list></name></type> <name>vvd</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mod</name> <init>= <expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>vi</name></type> <name>mods</name> <init>= <expr><block>{<expr><literal type="number">998244353</literal></expr>,<expr><literal type="number">1000000007</literal></expr>,<expr><literal type="number">1000000009</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>inf</name> <init>= <expr><literal type="number">3e18</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>pi</name> <init>= <expr><call><name>acos</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>eps</name> <init>= <expr><literal type="number">0.0000001</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mt19937</name></type> <name>rng</name><argument_list>(<argument><expr><call><name><name>chrono</name><operator>::</operator><name>steady_clock</name><operator>::</operator><name>now</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>time_since_epoch</name><argument_list>()</argument_list></call><operator>.</operator><call><name>count</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(ll i=(a);i&lt;(b);++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>trav</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(auto&amp;a:x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>begin(x),end(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)(x).size())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fll</name><parameter_list>(<parameter><type><name>xs</name></type></parameter>,<parameter><type><name>x</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>fill(&amp;x,&amp;x+sizeof(xs)/sizeof(x),a)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>has</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x.find(a)!=end(x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pc</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_popcountll(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<using><template>template<parameter_list>&lt;<parameter><type><name>class</name><modifier>...</modifier></type><name>K</name></parameter>&gt;</parameter_list></template> using <name>umap</name> <init>= <type><name><name>unordered_map</name><argument_list type="generic">&lt;<argument><expr><name>K</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using><template>template<parameter_list>&lt;<parameter><type><name>class</name><modifier>...</modifier></type><name>K</name></parameter>&gt;</parameter_list></template> using <name>uset</name> <init>= <type><name><name>unordered_set</name><argument_list type="generic">&lt;<argument><expr><name>K</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name></type></init>;</using>

<decl_stmt><decl><type><name>ll</name></type> <name>q</name></decl>,<decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>,<decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>umap</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name><name>uset</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type><name>loc_s</name></decl>,<decl><type ref="prev"/><name>loc_t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vll</name></type> <name>res</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>sw</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>i</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>j</name></decl></parameter>)</parameter_list><block>{
  <expr_stmt><expr><name><name>loc_s</name><index>[<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal></expr>]</index></name><operator>.</operator><call><name>erase</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>loc_s</name><index>[<expr><name><name>t</name><index>[<expr><name>j</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>loc_t</name><index>[<expr><name><name>t</name><index>[<expr><name>j</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal></expr>]</index></name><operator>.</operator><call><name>erase</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>loc_t</name><index>[<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>t</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>res</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><block>{<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>,<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
  <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>precision</name></name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>q</name></expr>;</expr_stmt>
  <macro><name>rep</name><argument_list>(<argument>_q</argument>,<argument><literal type="number">0</literal></argument>,<argument>q</argument>)</argument_list></macro><block>{
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>s</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>loc_s</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr><operator>,</operator><expr><call><name><name>loc_t</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>res</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro><block>{
      <expr_stmt><expr><name><name>loc_s</name><index>[<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>loc_t</name><index>[<expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>
    <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro><block>{
      <decl_stmt><decl><type><name>ll</name></type> <name>sm_s</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>sm_t</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <comment type="line">// trav(_,loc_s)sm_s+=sz(_.se);</comment>
      <comment type="line">// trav(_,loc_t)sm_t+=sz(_.se);</comment>
      <comment type="line">// cout&lt;&lt;"T "&lt;&lt;sm_s&lt;&lt;" "&lt;&lt;sm_t&lt;&lt;endl;</comment>
      <decl_stmt><decl><type><name>ll</name></type> <name>c_s</name><init>=<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal></expr></init></decl>,<decl><type ref="prev"/><name>c_t</name><init>=<expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>loc_s</name><index>[<expr><name>c_s</name></expr>]</index></name><operator>.</operator><call><name>erase</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block>{
        <if>if<condition>(<expr><call><name>sz</name><argument_list>(<argument><expr><name><name>loc_s</name><index>[<expr><name>c_s</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
          <comment type="line">// cout&lt;&lt;"across\n";</comment>
          <expr_stmt><expr><call><name>sw</name><argument_list>(<argument><expr><operator>*</operator><call><name>begin</name><argument_list>(<argument><expr><name><name>loc_s</name><index>[<expr><name>c_s</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <comment type="line">// check last ineq</comment>
        <elseif>else <if>if<condition>(<expr><call><name>sz</name><argument_list>(<argument><expr><name><name>loc_t</name><index>[<expr><name>c_s</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
          <comment type="line">// cout&lt;&lt;"zig\n";</comment>
          <expr_stmt><expr><call><name>sw</name><argument_list>(<argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>*</operator><call><name>begin</name><argument_list>(<argument><expr><name><name>loc_t</name><index>[<expr><name>c_s</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sw</name><argument_list>(<argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></elseif>
        <else>else<block>{
          <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No\n"</literal></expr>;</expr_stmt>
          <goto>goto <name>outer</name>;</goto>
        }</block></else></if>
      }</block></then></if>
      <expr_stmt><expr><name><name>loc_t</name><index>[<expr><name>c_s</name></expr>]</index></name><operator>.</operator><call><name>erase</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Yes\n"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name>sz</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call><operator>&lt;&lt;</operator><literal type="string">"\n"</literal></expr>;</expr_stmt>
    <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>sz(res)</argument>)</argument_list></macro><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>res</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fi</name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name><name>res</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>se</name><operator>&lt;&lt;</operator><literal type="string">"\n"</literal></expr>;</expr_stmt>
    <label><name>outer</name>:</label><empty_stmt>;</empty_stmt>
  }</block>
  
  
  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
