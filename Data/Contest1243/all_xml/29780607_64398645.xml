<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29780607_64398645.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>

	<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>divisors</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>ll</name></type> <name>d</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><name>d</name><operator>*</operator><name>d</name> <operator>&lt;=</operator> <name>n</name></expr>)</condition> <block>{
		<if>if <condition>(<expr><name>n</name><operator>%</operator><name>d</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>divisors</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if <condition>(<expr><name>d</name> <operator>*</operator> <name>d</name> <operator>!=</operator> <name>n</name></expr>)</condition><then> <block>{ <expr_stmt><expr><call><name><name>divisors</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>n</name> <operator>/</operator> <name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></then></if>
		}</block></then></if>
		<expr_stmt><expr><name>d</name><operator>++</operator></expr>;</expr_stmt>
	}</block></while>

	<if>if <condition>(<expr><call><name><name>divisors</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{ <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>n</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return> }</block></then></if>

	<decl_stmt><decl><type><name>bool</name></type> <name>odd</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>, <decl><type ref="prev"/><name>even</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>divisors</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<if>if <condition>(<expr><name><name>divisors</name><index>[<expr><name>i</name></expr>]</index></name> <operator>%</operator> <literal type="number">2ll</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>even</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
		}</block></then>
		<else>else <block>{
			<expr_stmt><expr><name>odd</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
		}</block></else></if>
	}</block></for>

	<if>if <condition>(<expr><name>even</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>odd</name></expr>)</condition><then> <block>{ <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt> }</block></then>
	<elseif>else <if>if <condition>(<expr><name>even</name> <operator>&amp;&amp;</operator> <name>odd</name></expr>)</condition><then> <block>{	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt> }</block></then></if></elseif>
	<elseif>else <if>if <condition>(<expr><operator>!</operator><name>even</name> <operator>&amp;&amp;</operator> <name>odd</name></expr>)</condition><then> <block>{ 
		<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>curPrimes</name></decl>;</decl_stmt>

		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>divisors</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<if>if <condition>(<expr><name>n</name><operator>%</operator><name><name>divisors</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name><name>curPrimes</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>divisors</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<while>while <condition>(<expr><name>n</name><operator>%</operator><name><name>divisors</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{
					<expr_stmt><expr><name>n</name> <operator>/=</operator> <name><name>divisors</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
				}</block></while>
			}</block></then></if>
		}</block></for>

		<if>if <condition>(<expr><call><name><name>curPrimes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{ <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>curPrimes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt> }</block></then>
		<else>else <block>{ <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt> }</block></else></if>
	}</block></then></if></elseif></if>
}</block></function></unit>
