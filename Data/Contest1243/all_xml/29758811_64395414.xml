<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1243/all/29758811_64395414.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ext/pb_ds/assoc_container.hpp&gt;</cpp:file></cpp:include>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><name>-</name><name>O3</name><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><name>Ofast</name><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><cpp:literal>"unroll-loops"</cpp:literal><name>)</name></cpp:pragma>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x.begin(), x.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sqr</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) * (x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PB</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<using>using <namespace>namespace <name>__gnu_pbds</name>;</namespace></using>

<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>N</name> <init>= <expr><literal type="number">3e5</literal> <operator>+</operator> <literal type="number">200</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>MOD</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mt19937_64</name></type> <name>rnd</name><argument_list>(<argument><expr><call><name><name>chrono</name><operator>::</operator><name>system_clock</name><operator>::</operator><name>now</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>time_since_epoch</name><argument_list>()</argument_list></call><operator>.</operator><call><name>count</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<using><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
using <name>_set</name> <init>= <type><name><name>tree</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name>null_type</name></expr></argument>, <argument><expr><name><name>less</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>rb_tree_tag</name></expr></argument>, <argument><expr><name>tree_order_statistics_node_update</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<comment type="line">//ll n,ans[N],x,step;</comment>
<comment type="line">//vector&lt;ll&gt; v;</comment>
<comment type="line">//queue&lt;ll&gt; q;</comment>
<comment type="line">//void add(ll i)</comment>
<comment type="line">//{</comment>
<comment type="line">//    if(i &lt; 1 || i &gt; n || ans[i]) return;</comment>
<comment type="line">//    ans[i] = step;</comment>
<comment type="line">//    q.push(i);</comment>
<comment type="line">//}</comment>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">//    for(n = 1; n &lt;= 100; n++)</comment>
<comment type="line">//    {</comment>
<comment type="line">//        step = 0;</comment>
<comment type="line">//        v.clear();</comment>
<comment type="line">//        for(int i = 2; i * i &lt;= n; i++)</comment>
<comment type="line">//            if(n % i == 0)</comment>
<comment type="line">//            {</comment>
<comment type="line">//                v.PB(i);</comment>
<comment type="line">//                if(n / i != i) v.PB(n / i);</comment>
<comment type="line">//            }</comment>
<comment type="line">//        for(int i = 1; i &lt;= n; i++) ans[i] = 0;</comment>
<comment type="line">//        for(int i = 1; i &lt;= n; i++) if(ans[i] == 0)</comment>
<comment type="line">//            {</comment>
<comment type="line">//                step++;</comment>
<comment type="line">//                add(i);</comment>
<comment type="line">//                while(!q.empty())</comment>
<comment type="line">//                {</comment>
<comment type="line">//                    for(auto x : v)</comment>
<comment type="line">//                    {</comment>
<comment type="line">//                        add(q.front() + x);</comment>
<comment type="line">//                        add(q.front() - x);</comment>
<comment type="line">//                    }</comment>
<comment type="line">//                    q.pop();</comment>
<comment type="line">//                }</comment>
<comment type="line">//            }</comment>
<comment type="line" format="doxygen">////        for(int i = 1; i &lt;= n; i++) cout&lt;&lt;ans[i]&lt;&lt;" ";</comment>
<comment type="line">//        if(!v.empty()&amp;&amp; step &gt; 1) cout&lt;&lt;n&lt;&lt;" - "&lt;&lt;step&lt;&lt;endl;</comment>
<comment type="line">//    }</comment>
    <decl_stmt><decl><type><name>ll</name></type> <name>top</name></decl>,<decl><type ref="prev"/><name>edd</name></decl>,<decl><type ref="prev"/><name>x</name></decl>,<decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>top</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>*</operator> <name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><if>if<condition>(<expr><name>n</name> <operator>%</operator> <name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>top</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
        <break>break;</break>
    }</block></then></if></block></for>
    <if>if<condition>(<expr><name>top</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>top</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt></block></then></if>
    <expr_stmt><expr><name>x</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>edd</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>cout</name><operator>&lt;&lt;</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">0</literal></expr>;</return></block></then></if>
    <while>while<condition>(<expr><name>x</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{
        <if>if<condition>(<expr><name>x</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
        <if>if<condition>(<expr><name>x</name> <operator>%</operator> <name>top</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>edd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name>x</name> <operator>/=</operator> <name>top</name></expr>;</expr_stmt>
    }</block></while>
    <if>if<condition>(<expr><name>edd</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>top</name></expr>;</expr_stmt></block></then>
    <else>else <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
