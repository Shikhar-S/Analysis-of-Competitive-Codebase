/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author ExplodingFreeze
 */

#include <iostream>
#include <fstream>

#include <bits/stdc++.h>
#define int long long
#define f(i,a,b) for(int i=(a);i<(b);i++)
const int MOD=1e9+7;
using pii=std::pair<int,int>;
//mt19937 rng(chrono::steady_clock::now().time_since_epoch().count()); <-- PUT IN main()/solve()!

using namespace std;

int n,u,v,c[3][100005],visited[100005]={0},ordering[100005],invordering[100005];
vector<int> adj[100005];
class DPaintTheTree {
public:
	void solve(std::istream& in, std::ostream& out) {
		in >> n;
		f(i,0,3)
			f(j,0,n)
				in >> c[i][j];
		f(i,0,n-1)
		{
			in >> u >> v;
			u--;v--;
			adj[u].push_back(v);
			adj[v].push_back(u);
		}
		int start=0;
		f(i,0,n)
		{
			if(adj[i].size()>2)
			{
				out << "-1\n";
				return;
			}
			if(adj[i].size()==1)
				start=i;
		}
		/*f(i,0,3)
		{
			f(j,0,n)
				out << c[i][j] << " ";
			out << "\n";
		}*/
		dfs(start,0);
		int sequences[6][3]={{0,1,2},{0,2,1},{1,0,2},{1,2,0},{2,0,1},{2,1,0}};
		int best=(int)1e18, bestindex=-1;
		f(i,0,6)
		{
			int tempans=0;
			f(j,0,n)
				tempans+=c[sequences[i][j%3]][ordering[j]];
			if(tempans<best)
			{
				best=tempans;
				bestindex=i;
			}
		}
		out << best << "\n";
		f(i,0,n)
			out << sequences[bestindex][invordering[i]%3]+1 << " ";
		out << "\n";

	}
	void dfs(int x, int step)
	{
		visited[x]=1;
		ordering[step]=x;
		invordering[x]=step;
		for(auto v : adj[x])
			if(!visited[v])
				dfs(v,step+1);
	}
};


int32_t main() {
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	DPaintTheTree solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
