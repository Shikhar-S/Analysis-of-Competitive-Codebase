<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28909307_62481252.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_N</name></cpp:macro> <cpp:value>100005</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_M</name></cpp:macro> <cpp:value>55</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>eb</name></cpp:macro> <cpp:value>emplace_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>V</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(V).begin(),(V).end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>reset</name><parameter_list>(<parameter><type><name>V</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(V).clear();(V).resize(0);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sq</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x)*(x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>abs</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x)&gt;0?(x):(-(x)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL_inf</name></cpp:macro> <cpp:value>(1LL&lt;&lt;40)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>full_inf</name></cpp:macro> <cpp:value>0x7fffffff</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>half_inf</name></cpp:macro> <cpp:value>0x3fffffff</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inf</name></cpp:macro> <cpp:value>(1LL&lt;&lt;60)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cpx_mod</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((LD)(((LL)x.real())%MOD)),((LD)(((LL)x.imag())%MOD)))</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>LL</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>LD</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>LL</name></expr></argument>,<argument><expr><name>LL</name></expr></argument>&gt;</argument_list></name></type> <name>pil</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>LL</name></expr></argument>,<argument><expr><name>string</name></expr></argument>&gt;</argument_list></name></type> <name>pls</name>;</typedef>
<typedef>typedef <type><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>LD</name></expr></argument>&gt;</argument_list></name></type> <name>Complex</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>LD</name>;</typedef>
<decl_stmt><decl><type><name>LL</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name><name>ans</name><index>[<expr><name>MAX_N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>go</name><index>[<expr><name>MAX_N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LL</name></type> <name><name>cost</name><index>[<expr><name>MAX_N</name></expr>]</index><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>adj</name><index>[<expr><name>MAX_N</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>LL</name></type> <name>get_ans</name><parameter_list>(<parameter><decl><type><name>LL</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>LL</name></type> <name>p</name></decl></parameter>,<parameter><decl><type><name>LL</name></type> <name>q</name></decl></parameter>)</parameter_list><block>{
	<expr_stmt><expr><name><name>ans</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <literal type="number">6</literal><operator>-</operator><name>p</name><operator>-</operator><name>q</name></expr>;</expr_stmt>
	<if>if<condition>(<expr><name><name>adj</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>	<block type="pseudo"><return>return <expr><name><name>cost</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">6</literal><operator>-</operator><name>p</name><operator>-</operator><name>q</name></expr>]</index></name></expr>;</return></block></then></if>
	<return>return <expr><name><name>cost</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">6</literal><operator>-</operator><name>p</name><operator>-</operator><name>q</name></expr>]</index></name> <operator>+</operator> <call><name>get_ans</name><argument_list>(<argument><expr><name><name>go</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>,<argument><expr><name>q</name></expr></argument>,<argument><expr><literal type="number">6</literal><operator>-</operator><name>p</name><operator>-</operator><name>q</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>LL</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>j</name><operator>&lt;=</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
		<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
			<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>cost</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
	}</block></for>
	<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld %lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>adj</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>eb</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name><name>adj</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>eb</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<if>if<condition>(<expr><name><name>adj</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>	<block type="pseudo"><expr_stmt><expr><name>x</name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></then></if>
		<if>if<condition>(<expr><name><name>adj</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>&gt;</operator><literal type="number">2</literal></expr>)</condition><then>	<block type="pseudo"><return>return <expr><operator>!</operator><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-1\n"</literal></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
	}</block></for>
	<expr_stmt><expr><name>y</name><operator>=</operator><name>x</name></expr>;</expr_stmt>
	<while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition><block>{
		<expr_stmt><expr><name><name>cost</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>i</name><operator>=</operator><name>y</name></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>LL</name></type> <name>p</name><range>:<expr><name><name>adj</name><index>[<expr><name>y</name></expr>]</index></name></expr></range></decl></init>)</control><block>{
			<if>if<condition>(<expr><name><name>cost</name><index>[<expr><name>p</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><then>	<block type="pseudo"><continue>continue;</continue></block></then></if>
			<expr_stmt><expr><name>i</name><operator>=</operator><name>p</name></expr>;</expr_stmt>
		}</block></for>
		<if>if<condition>(<expr><name>y</name> <operator>==</operator> <name>i</name></expr>)</condition><then>	<block type="pseudo"><break>break;</break></block></then></if>
		<expr_stmt><expr><name><name>go</name><index>[<expr><name>y</name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>y</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
	}</block></while>
	<decl_stmt><decl><type><name>LL</name></type> <name>a</name> <init>= <expr><name>inf</name></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>j</name><operator>&lt;=</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
			<if>if<condition>(<expr><name>i</name><operator>==</operator><name>j</name></expr>)</condition><then>	<block type="pseudo"><continue>continue;</continue></block></then></if>
			<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>cost</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>cost</name><index>[<expr><name><name>go</name><index>[<expr><name>x</name></expr>]</index></name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <call><name>get_ans</name><argument_list>(<argument><expr><name><name>go</name><index>[<expr><name><name>go</name><index>[<expr><name>x</name></expr>]</index></name></expr>]</index></name></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if<condition>(<expr><name>a</name> <operator>&gt;</operator> <name>y</name></expr>)</condition><then><block>{
				<expr_stmt><expr><name>a</name><operator>=</operator><name>y</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>ans</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>ans</name><index>[<expr><name><name>go</name><index>[<expr><name>x</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
			}</block></then></if>
		}</block></for>
	}</block></for>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>,<argument><expr><name><name>cost</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name><name>ans</name><index>[<expr><name>x</name></expr>]</index></name></expr>]</index></name> <operator>+</operator> <name><name>cost</name><index>[<expr><name><name>go</name><index>[<expr><name>x</name></expr>]</index></name></expr>]</index><index>[<expr><name><name>ans</name><index>[<expr><name><name>go</name><index>[<expr><name>x</name></expr>]</index></name></expr>]</index></name></expr>]</index></name> <operator>+</operator> <call><name>get_ans</name><argument_list>(<argument><expr><name><name>go</name><index>[<expr><name><name>go</name><index>[<expr><name>x</name></expr>]</index></name></expr>]</index></name></expr></argument>,<argument><expr><name><name>ans</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>ans</name><index>[<expr><name><name>go</name><index>[<expr><name>x</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>	<block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld "</literal></expr></argument>,<argument><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
