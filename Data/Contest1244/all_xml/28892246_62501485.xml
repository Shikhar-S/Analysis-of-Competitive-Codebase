<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28892246_62501485.cpp"><comment type="line">//#pragma GCC optimize("Ofast")</comment>
<comment type="line">//#pragma GCC optimize ("unroll-loops")</comment>
<comment type="line">//#pragma GCC target("avx,avx2,fma")</comment>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;ext/pb_ds/assoc_container.hpp&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;ext/pb_ds/tree_policy.hpp&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>__gnu_pbds</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;int,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>'\n'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pll</name></cpp:macro> <cpp:value>pair&lt;long long,long long&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LONGLONG_MAX</name></cpp:macro> <cpp:value>10000000000000000</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<using><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
using <name>ordered_set</name> <init>= <type><name><name>tree</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name>null_type</name></expr></argument>, <argument><expr><name><name>less</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>rb_tree_tag</name></expr></argument>, <argument><expr><name>tree_order_statistics_node_update</name></expr></argument>&gt;</argument_list></name></type></init>;</using>



<function><type><name>int32_t</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>k</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr><name>n</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name>m</name></decl>,<decl><type ref="prev"/><name>m1</name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
    	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>a</name><operator>+</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
    	<expr_stmt><expr><name><name>m</name><index>[<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt>
    	<if>if<condition>(<expr><call><name><name>m1</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>==</operator><call><name><name>m1</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name><name>m1</name><index>[<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></then></if>
    }</block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name><init>=<expr><name><name>m</name><index>[<expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>j</name><init>=<expr><name><name>m1</name><index>[<expr><name><name>a</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>x</name><init>=<expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>,<decl><type ref="prev"/><name>z</name><init>=<expr><name><name>a</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>i</name><operator>&lt;=</operator><name>j</name><operator>+</operator><literal type="number">1</literal><operator>&amp;&amp;</operator><name>k</name><operator>&gt;=</operator><call><name>min</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>n</name><operator>-</operator><name>j</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block>{
        <comment type="line">//cout&lt;&lt;i&lt;&lt;" "&lt;&lt;j&lt;&lt;endl;</comment>
    	<if>if<condition>(<expr><name>i</name><operator>&lt;</operator><name>n</name><operator>-</operator><name>j</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block>{
    		<decl_stmt><decl><type><name>int</name></type> <name>y</name><init>=<expr><call><name>min</name><argument_list>(<argument><expr><name>k</name></expr></argument>,<argument><expr><operator>(</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name>x</name><operator>)</operator><operator>*</operator><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    		<expr_stmt><expr><name>x</name><operator>+=</operator><name>y</name><operator>/</operator><name>i</name></expr>;</expr_stmt>
    		<expr_stmt><expr><name>k</name><operator>-=</operator><name>y</name></expr>;</expr_stmt>
    		<expr_stmt><expr><name>i</name><operator>=</operator><name><name>m</name><index>[<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
    	}</block></then>
    	<else>else<block>{
    		<decl_stmt><decl><type><name>int</name></type> <name>y</name><init>=<expr><call><name>min</name><argument_list>(<argument><expr><name>k</name></expr></argument>,<argument><expr><operator>(</operator><name>z</name><operator>-</operator><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator><operator>*</operator><operator>(</operator><name>n</name><operator>-</operator><name>j</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    		<expr_stmt><expr><name>z</name><operator>-=</operator><name>y</name><operator>/</operator><operator>(</operator><name>n</name><operator>-</operator><name>j</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
    		<expr_stmt><expr><name>k</name><operator>-=</operator><name>y</name></expr>;</expr_stmt>
    		<expr_stmt><expr><name>j</name><operator>=</operator><name><name>m1</name><index>[<expr><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    	}</block></else></if>
    }</block></while>
    <comment type="line">//cout&lt;&lt;i&lt;&lt;" "&lt;&lt;j;</comment>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>z</name><operator>-</operator><name>x</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
