<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28924921_62481010.cpp"><comment type="block" format="doxygen">/***************************************************************
	File name: E.cpp
	Author: ljfcnyali
	Create time: 2019å¹´10æ13æ¥ æææ¥ 17æ¶29å07ç§
***************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REP</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for ( int i = (a), _end_ = (b); i &lt;= _end_; ++ i )</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mem</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset ( (a), 0, sizeof ( a ) )</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>str</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>strlen ( a )</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;int, int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>LL</name>;</typedef>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name> <init>= <expr><literal type="number">100010</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>INF</name> <init>= <expr><literal type="number">1000000000</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name><name>a</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name>ans</name></decl>, <decl><type ref="prev"/><name><name>sum</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>

<function><specifier>inline</specifier> <type><name>int</name></type> <name>calc1</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><name><name>a</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <name>x</name> <operator>-</operator> <name><name>sum</name><index>[<expr><name>x</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>s</name></expr>;</return>
}</block></function>

<function><specifier>inline</specifier> <type><name>int</name></type> <name>calc2</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><name><name>sum</name><index>[<expr><name>n</name></expr>]</index></name> <operator>-</operator> <name><name>sum</name><index>[<expr><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>a</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>n</name> <operator>-</operator> <name>x</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>s</name></expr>;</return>
}</block></function>

<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ONLINE_JUDGE</name></cpp:ifndef>
    <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"input.txt"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"output.txt"</literal></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%I64d%I64d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>REP</name><argument_list>(<argument>i</argument>, <argument><literal type="number">1</literal></argument>, <argument>n</argument>)</argument_list></macro> <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%I64d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>a</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>a</name> <operator>+</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>REP</name><argument_list>(<argument>i</argument>, <argument><literal type="number">1</literal></argument>, <argument>n</argument>)</argument_list></macro> <expr_stmt><expr><name><name>sum</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>sum</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ans</name> <operator>=</operator> <name><name>a</name><index>[<expr><name>n</name></expr>]</index></name> <operator>-</operator> <name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>L</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>R</name> <init>= <expr><name>n</name></expr></init></decl>;</decl_stmt>
    <while>while <condition>( <expr><name><name>a</name><index>[<expr><name>L</name></expr>]</index></name> <operator>==</operator> <name><name>a</name><index>[<expr><name>L</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr> )</condition> <block type="pseudo"><expr_stmt><expr><operator>++</operator> <name>L</name></expr>;</expr_stmt></block></while>
    <while>while <condition>( <expr><name><name>a</name><index>[<expr><name>R</name></expr>]</index></name> <operator>==</operator> <name><name>a</name><index>[<expr><name>R</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr> )</condition> <block type="pseudo"><expr_stmt><expr><operator>--</operator> <name>R</name></expr>;</expr_stmt></block></while>
    <decl_stmt><decl><type><name>int</name></type> <name>sum1</name> <init>= <expr><call><name>calc1</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>sum2</name> <init>= <expr><call><name>calc2</name><argument_list>(<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>( <expr><name>k</name> <operator>&amp;&amp;</operator> <name>L</name> <operator>&lt;</operator> <name>R</name></expr> )</condition> 
    <block>{
        <if>if <condition>( <expr><name>L</name> <operator>&lt;</operator> <operator>(</operator><name>n</name> <operator>-</operator> <name>R</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr> )</condition><then> 
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name><name>a</name><index>[<expr><name>L</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>a</name><index>[<expr><name>L</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if>if <condition>( <expr><name>k</name> <operator>&gt;=</operator> <name>x</name> <operator>*</operator> <name>L</name></expr> )</condition><then> <block>{ <expr_stmt><expr><name>k</name> <operator>-=</operator> <name>x</name> <operator>*</operator> <name>L</name></expr>;</expr_stmt> <expr_stmt><expr><operator>++</operator> <name>L</name></expr>;</expr_stmt> }</block></then>
            <else>else <block>{ <expr_stmt><expr><name><name>a</name><index>[<expr><name>L</name></expr>]</index></name> <operator>+=</operator> <name>k</name> <operator>/</operator> <name>L</name></expr>;</expr_stmt> <break>break ;</break> }</block></else></if>
        }</block></then>
        <else>else 
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name><name>a</name><index>[<expr><name>R</name></expr>]</index></name> <operator>-</operator> <name><name>a</name><index>[<expr><name>R</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if>if <condition>( <expr><name>k</name> <operator>&gt;=</operator> <name>x</name> <operator>*</operator> <operator>(</operator><name>n</name> <operator>-</operator> <name>R</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr> )</condition><then> <block>{ <expr_stmt><expr><name>k</name> <operator>-=</operator> <name>x</name> <operator>*</operator> <operator>(</operator><name>n</name> <operator>-</operator> <name>R</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><operator>--</operator> <name>R</name></expr>;</expr_stmt> }</block></then>
            <else>else <block>{ <expr_stmt><expr><name><name>a</name><index>[<expr><name>R</name></expr>]</index></name> <operator>-=</operator> <name>k</name> <operator>/</operator> <operator>(</operator><name>n</name> <operator>-</operator> <name>R</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt> <break>break ;</break> }</block></else></if>
        }</block></else></if>
        <continue>continue ;</continue>
        <expr_stmt><expr><operator>++</operator> <name>num</name></expr>;</expr_stmt> <if>if <condition>( <expr><name>num</name> <operator>&gt;</operator> <name>n</name></expr> )</condition><then> <block type="pseudo"><break>break ;</break></block></then></if> 
        <if>if <condition>( <expr><name>sum1</name> <operator>&lt;=</operator> <name>sum2</name></expr> )</condition><then> 
        <block>{
            <expr_stmt><expr><name>ans</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>ans</name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><name>R</name></expr>]</index></name> <operator>-</operator> <name><name>a</name><index>[<expr><name>L</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>k</name> <operator>-=</operator> <name>sum1</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>++</operator> <name>L</name></expr>;</expr_stmt> <decl_stmt><decl><type><name>int</name></type> <name>now</name> <init>= <expr><name>L</name></expr></init></decl>;</decl_stmt> 
            <while>while <condition>( <expr><name><name>a</name><index>[<expr><name>L</name></expr>]</index></name> <operator>==</operator> <name><name>a</name><index>[<expr><name>now</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name>L</name> <operator>&lt;=</operator> <name>R</name></expr> )</condition> <block type="pseudo"><expr_stmt><expr><operator>++</operator> <name>L</name></expr>;</expr_stmt></block></while>
            <expr_stmt><expr><operator>--</operator> <name>L</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>sum1</name> <operator>=</operator> <call><name>calc1</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>sum1</name></expr>;</expr_stmt>
        }</block></then>
        <else>else
        <block>{
            <expr_stmt><expr><name>ans</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>ans</name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><name>R</name></expr>]</index></name> <operator>-</operator> <name><name>a</name><index>[<expr><name>L</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>k</name> <operator>-=</operator> <name>sum2</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>--</operator> <name>R</name></expr>;</expr_stmt> <decl_stmt><decl><type><name>int</name></type> <name>now</name> <init>= <expr><name>R</name></expr></init></decl>;</decl_stmt> 
            <while>while <condition>( <expr><name><name>a</name><index>[<expr><name>R</name></expr>]</index></name> <operator>==</operator> <name><name>a</name><index>[<expr><name>now</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name>R</name> <operator>&gt;=</operator> <name>L</name></expr> )</condition> <block type="pseudo"><expr_stmt><expr><operator>--</operator> <name>R</name></expr>;</expr_stmt></block></while>
            <expr_stmt><expr><operator>++</operator> <name>R</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>sum2</name> <operator>=</operator> <call><name>calc2</name><argument_list>(<argument><expr><name>R</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>sum2</name></expr>;</expr_stmt>
        }</block></else></if>
    }</block></while>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%I64d\n"</literal></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><name>R</name></expr>]</index></name> <operator>-</operator> <name><name>a</name><index>[<expr><name>L</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
