<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28893580_62502010.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>'\n'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(v).begin(),v.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rall</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(v).rbegin(),v.rend()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(int)(v).size()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ch</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(c - 'a')</cpp:value></cpp:define>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pi</name>;</typedef>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">112345</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>arr</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
  <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ONLINE_JUDGE</name></cpp:ifndef>
  <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"test.in"</literal></expr></argument>, <argument><expr><literal type="string">"rt"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ll</name></type> <name>k</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
    <block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
  <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>arr</name></expr></argument>, <argument><expr><name>arr</name> <operator>+</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name> <init>= <expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>st</name> <init>= <expr><name><name>arr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>en</name> <init>= <expr><name><name>arr</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><name>en</name> <operator>-</operator> <name>st</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>max</name><argument_list>(<argument><expr><literal type="number">0LL</literal></expr></argument>, <argument><expr><name>d</name> <operator>-</operator> <name>k</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  }</block></then></if>
  <expr_stmt><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>j</name><operator>--</operator></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>ll</name></type> <name>f1</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>f2</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>ok</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>ok</name></expr>)</condition> <block>{
    <expr_stmt><expr><name>ok</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>d</name> <init>= <expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name>st</name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>d</name> <operator>*</operator> <name>f1</name> <operator>&lt;=</operator> <name>k</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>st</name> <operator>+=</operator> <name>d</name></expr><operator>,</operator> <expr><name>k</name> <operator>-=</operator> <name>f1</name> <operator>*</operator> <name>d</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>ok</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>f1</name><operator>++</operator></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <decl_stmt><decl><type><name>ll</name></type> <name>rem</name> <init>= <expr><name>k</name> <operator>/</operator> <name>f1</name></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>rem</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>st</name> <operator>+=</operator> <name>rem</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>k</name> <operator>-=</operator> <name>rem</name> <operator>*</operator> <name>f1</name></expr>;</expr_stmt>
      }</block></then></if>
    }</block></else></if>
    <if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <name>j</name></expr>)</condition><then>
      <block type="pseudo"><break>break;</break></block></then></if>
    <expr_stmt><expr><name>d</name> <operator>=</operator> <name>en</name> <operator>-</operator> <name><name>arr</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>d</name> <operator>*</operator> <name>f2</name> <operator>&lt;=</operator> <name>k</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>en</name> <operator>-=</operator> <name>d</name></expr><operator>,</operator> <expr><name>k</name> <operator>-=</operator> <name>f2</name> <operator>*</operator> <name>d</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>ok</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>f2</name><operator>++</operator></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <decl_stmt><decl><type><name>ll</name></type> <name>rem</name> <init>= <expr><name>k</name> <operator>/</operator> <name>f2</name></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>rem</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>en</name> <operator>-=</operator> <name>rem</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>k</name> <operator>-=</operator> <name>rem</name> <operator>*</operator> <name>f2</name></expr>;</expr_stmt>
      }</block></then></if>
    }</block></else></if>
<comment type="line">//    cout &lt;&lt; st &lt;&lt; " " &lt;&lt; en &lt;&lt; endl;</comment>
    <expr_stmt><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>j</name><operator>--</operator></expr>;</expr_stmt>
  }</block></while>
  <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>en</name> <operator>-</operator> <name>st</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
