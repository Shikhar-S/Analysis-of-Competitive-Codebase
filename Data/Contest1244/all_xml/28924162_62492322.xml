<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28924162_62492322.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro>                  <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dl</name></cpp:macro>                 <cpp:value>double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro>                <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro>                  <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name></cpp:macro>                  <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro>              <cpp:value>"\n"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>       <cpp:value>for(i=a;i&lt;b;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro>             <cpp:value>v.begin(),v.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>allr</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro>            <cpp:value>v.rbegin(),v.rend()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro>              <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CIN</name><parameter_list>(<parameter><type><name>V</name></type></parameter>,<parameter><type><name>s</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>      <cpp:value>for(int i=s;i&lt;n;i++){cin &gt;&gt; V[i];}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COUT</name><parameter_list>(<parameter><type><name>V</name></type></parameter>,<parameter><type><name>s</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>{for(int i=s;i&lt;n;i++){cout &lt;&lt;  V[i] &lt;&lt; " "  ;} cout &lt;&lt; endl;}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fast</name></cpp:macro>               <cpp:value>ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLEAR</name><parameter_list>(<parameter><type><name>V</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>;      for(ll i=0;i&lt;V.size();i++) V[i] = 0;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N</name></cpp:macro>                  <cpp:value>500005LL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tmod</name></cpp:macro>            <cpp:value>998244353</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>bool</name></type> <name>sBs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{   <return>return <expr><operator>(</operator><name><name>a</name><operator>.</operator><name>second</name></name> <operator>&lt;</operator> <name><name>b</name><operator>.</operator><name>second</name></name><operator>)</operator></expr>;</return>   }</block></function>

<function_decl><type><name>ll</name></type> <name>SUMD</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ll</name></type> <name>BS</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>PS</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>s</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>e</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>ser</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ll</name></type> <name>MI</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>m</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>bool</name></type> <name><name>P</name><index>[<expr><name>N</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> <name>Sieve</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name><init>=<expr><name>N</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ll</name></type> <name>Powb</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>ll</name></type> <name>DFS</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name> <modifier>&amp;</modifier></type><name>G</name></decl></parameter>,<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name> <modifier>&amp;</modifier></type><name>DP</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>s</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>p</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>it</name></decl></parameter>,<parameter><decl><type><name>string</name> <modifier>&amp;</modifier></type><name>s1</name></decl></parameter>)</parameter_list>
<block>{
   <comment type="line">// if(G[s].size()==1 and s!=p) return 0;</comment>
    <for>for<control>(<init><decl><type><name>auto</name></type> <name>it2</name><range>:<expr><name><name>G</name><index>[<expr><name>s</name></expr>]</index></name></expr></range></decl></init>)</control>
    <block>{
        <if>if<condition>(<expr><name>it2</name><operator>!=</operator><name>p</name></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><operator>(</operator><name><name>DP</name><index>[<expr><name><name>s1</name><index>[<expr><name>it</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal></expr>]</index><index>[<expr><name>s</name></expr>]</index></name> <operator>+</operator> <call><name>DFS</name><argument_list>(<argument><expr><name>G</name></expr></argument>,<argument><expr><name>DP</name></expr></argument>,<argument><expr><name>it2</name></expr></argument>,<argument><expr><name>s</name></expr></argument>,<argument><expr><operator>(</operator><name>it</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><literal type="number">3</literal></expr></argument>,<argument><expr><name>s1</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>
    }</block></for>
    <return>return <expr><name><name>DP</name><index>[<expr><name><name>s1</name><index>[<expr><name>it</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal></expr>]</index><index>[<expr><name>s</name></expr>]</index></name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
<comment type="line">//fast;</comment>
<decl_stmt><decl><type><name>ll</name></type> <name>q</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
<comment type="line">//cin &gt;&gt; q;</comment>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>
<while>while<condition>(<expr><name>q</name><operator>--</operator></expr>)</condition>
<block>{

    <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>l</name></decl>,<decl><type ref="prev"/><name>r</name></decl>,<decl><type ref="prev"/><name>c</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>a</name></decl>,<decl><type ref="prev"/><name>g</name></decl>,<decl><type ref="prev"/><name>counter</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>u</name></decl>,<decl><type ref="prev"/><name>v</name></decl>,<decl><type ref="prev"/><name>d</name></decl>,<decl><type ref="prev"/><name>e</name></decl>,<decl><type ref="prev"/><name>w</name></decl>,<decl><type ref="prev"/><name>p</name></decl>,<decl><type ref="prev"/><name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>,<decl><type ref="prev"/><name>z</name></decl>,<decl><type ref="prev"/><name>flag</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <comment type="line">//n=m=i=j=l=r=a=t=b=c=u=v=w=p=x=y=0;</comment>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr> ;</expr_stmt> <comment type="line">//cout &lt;&lt; "n";</comment>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>DP</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><call><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name> <argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block type="pseudo"><for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>DP</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block></for></block></for>

    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>G</name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>u</name> <operator>&gt;&gt;</operator> <name>v</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>G</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>G</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <decl_stmt><decl><type><name>ll</name></type> <name>s</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>c1</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <if>if<condition>(<expr><name><name>G</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>&gt;</operator><literal type="number">2</literal></expr>)</condition><then> <block>{<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return>}</block></then></if>
        <if>if<condition>(<expr><name><name>G</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block>{<expr_stmt><expr><name>c1</name><operator>++</operator></expr>;</expr_stmt><expr_stmt><expr><name>s</name><operator>=</operator><name>i</name></expr>;</expr_stmt><if>if<condition>(<expr><name>c1</name><operator>&gt;</operator><literal type="number">2</literal></expr>)</condition><then> <block>{<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal></expr> ;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return>}</block></then></if>}</block></then></if>
    }</block></for>
    <comment type="line">//cout &lt;&lt; "yes" &lt;&lt; " ";</comment>
    <decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><literal type="number">1e17</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>string</name></type> <name>s1</name><init>= <expr><literal type="string">"012"</literal></expr></init></decl>,<decl><type ref="prev"/><name>sa</name><init>=<expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
    <do>do<block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>pc</name> <init>= <expr><call><name>DFS</name><argument_list>(<argument><expr><name>G</name></expr></argument>,<argument><expr><name>DP</name></expr></argument>,<argument><expr><name>s</name></expr></argument>,<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>pc</name><operator>&lt;</operator><name>ans</name></expr>)</condition><then> <block>{<expr_stmt><expr><name>ans</name> <operator>=</operator> <name>pc</name></expr>;</expr_stmt> <expr_stmt><expr><name>sa</name> <operator>=</operator> <name>s1</name></expr>;</expr_stmt>}</block></then></if>
        <comment type="line">//cout &lt;&lt; s1 &lt;&lt; " ";</comment>
    }</block>while<condition>(<expr><call><name>next_permutation</name><argument_list>(<argument><expr><call><name><name>s1</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>s1</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>;</do>

    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name>  <operator>=</operator> <name>s</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>Col</name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <while>while<condition>(<expr><name><name>G</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>!=</operator><literal type="number">1</literal> <operator>or</operator> <name>s</name><operator>==</operator><name>p</name></expr>)</condition>
    <block>{
        <expr_stmt><expr><name><name>Col</name><index>[<expr><name>s</name></expr>]</index></name> <operator>=</operator> <name><name>sa</name><index>[<expr><name>i</name><operator>%</operator><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>i</name><operator>++</operator></expr> ;</expr_stmt>
        <for>for<control>(<init><decl><type><name>auto</name></type> <name>it</name><range>:<expr><name><name>G</name><index>[<expr><name>s</name></expr>]</index></name></expr></range></decl></init>)</control>
        <block>{
            <if>if<condition>(<expr><name>it</name><operator>!=</operator><name>p</name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>s</name> <operator>=</operator> <name>it</name></expr>;</expr_stmt><break>break;</break>
            }</block></then></if>
        }</block></for>
    }</block></while>
    <expr_stmt><expr><name><name>Col</name><index>[<expr><name>s</name></expr>]</index></name> <operator>=</operator> <name><name>sa</name><index>[<expr><name>i</name><operator>%</operator><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>Col</name><index>[<expr><name>i</name></expr> ]</index></name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr> ;</expr_stmt></block></for>

}</block></while>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

<comment type="line">//*****************************************************************************************************************************************</comment>

<function><type><name>ll</name></type> <name>Powb</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><name>n</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1LL</literal></expr>;</return></block></then></if>
    <if>if<condition>(<expr><name>n</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>b</name></expr>;</return></block></then></if>
    <decl_stmt><decl><type><name>ll</name></type> <name>temp</name> <init>= <expr><call><name>Powb</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>n</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>n</name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{<return>return <expr><operator>(</operator><name>temp</name><operator>*</operator><name>temp</name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</return>}</block></then>
    <else>else<block>{<return>return <expr><operator>(</operator><name>b</name><operator>*</operator><operator>(</operator><operator>(</operator><name>temp</name><operator>*</operator><name>temp</name><operator>)</operator><operator>%</operator><name>mod</name><operator>)</operator><operator>)</operator><operator>%</operator><name>mod</name></expr>;</return>}</block></else></if>
}</block></function>

<function><type><name>ll</name></type> <name>SUMD</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{   <decl_stmt><decl><type><name>ll</name></type> <name>sum</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>n</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><block>{<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name>n</name><operator>%</operator><literal type="number">10</literal></expr>;</expr_stmt><expr_stmt><expr><name>n</name> <operator>=</operator> <name>n</name><operator>/</operator><literal type="number">10</literal></expr>;</expr_stmt>}</block></while>
    <return>return <expr><name>sum</name></expr>;</return>

}</block></function>
<function><type><name>ll</name></type> <name>BS</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>PS</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>s</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>e</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>ser</name></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><name>s</name><operator>&gt;</operator><name>e</name></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><name>s</name></expr>;</return></block></then></if>
    <decl_stmt><decl><type><name>ll</name></type> <name>mid</name> <init>= <expr><operator>(</operator><name>s</name><operator>+</operator><name>e</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><name><name>PS</name><index>[<expr><name>mid</name></expr>]</index></name><operator>==</operator><name>ser</name></expr>)</condition><then>
    <block>{
        <return>return <expr><name>mid</name></expr>;</return>
    }</block></then>
    <elseif>else <if>if<condition>(<expr><name><name>PS</name><index>[<expr><name>mid</name></expr>]</index></name> <operator>&gt;</operator> <name>ser</name></expr>)</condition><then>
    <block>{
        <return>return <expr><call><name>BS</name><argument_list>(<argument><expr><name>PS</name></expr></argument>,<argument><expr><name>s</name></expr></argument>,<argument><expr><name>mid</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>ser</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if></elseif>
    <else>else
        <block type="pseudo"><return>return <expr><call><name>BS</name><argument_list>(<argument><expr><name>PS</name></expr></argument>,<argument><expr><name>mid</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>ser</name></expr></argument>)</argument_list></call></expr>;</return></block></else></if>
}</block></function>
<function><type><name>ll</name></type> <name>MI</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>m</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>m0</name> <init>= <expr><name>m</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>x</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>m</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
      <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
    <while>while <condition>(<expr><name>a</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>q</name> <init>= <expr><name>a</name> <operator>/</operator> <name>m</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ll</name></type> <name>t</name> <init>= <expr><name>m</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>m</name> <operator>=</operator> <name>a</name> <operator>%</operator> <name>m</name></expr><operator>,</operator> <expr><name>a</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>y</name> <operator>=</operator> <name>x</name> <operator>-</operator> <name>q</name> <operator>*</operator> <name>y</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>x</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
    }</block></while>
    <if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then>
       <block type="pseudo"><expr_stmt><expr><name>x</name> <operator>+=</operator> <name>m0</name></expr>;</expr_stmt></block></then></if>
    <return>return <expr><name>x</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>Sieve</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>P</name></expr></argument>,<argument><expr><literal type="boolean">true</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>P</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>P</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>P</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>*</operator><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <if>if<condition>(<expr><name><name>P</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
        <block>{
            <for>for<control>(<init><decl><type><name>ll</name></type> <name>j</name><init>=<expr><name>i</name><operator>*</operator><name>i</name></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>+=</operator><name>i</name></expr></incr>)</control>
            <block>{
                <expr_stmt><expr><name><name>P</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><literal type="boolean">false</literal></expr>;</expr_stmt>
            }</block></for>
        }</block></then></if>
    }</block></for>

}</block></function>
</unit>
