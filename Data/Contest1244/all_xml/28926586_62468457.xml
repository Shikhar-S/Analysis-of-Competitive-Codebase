<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28926586_62468457.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N</name></cpp:macro> <cpp:value>()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cerr&lt;&lt;#x&lt;&lt;" : "&lt;&lt;x&lt;&lt;endl</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bitdebug</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cerr&lt;&lt;bitset&lt;8&gt;(x)&lt;&lt;endl</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CM</name></cpp:macro> <cpp:value>cerr&lt;&lt;(&amp;MOP2-&amp;MOP1)/1024.0/1024.0&lt;&lt;endl</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>T</name></type> <name>Min</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{
	<return>return <expr><ternary><condition><expr><name>x</name><operator>&lt;</operator><name>y</name></expr>?</condition><then><expr><name>x</name></expr></then><else>:<expr><name>y</name></expr></else></ternary></expr>;</return>
}</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>T</name></type> <name>Max</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{
	<return>return <expr><ternary><condition><expr><name>x</name><operator>&gt;</operator><name>y</name></expr>?</condition><then><expr><name>x</name></expr></then><else>:<expr><name>y</name></expr></else></ternary></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name>bool</name></type> <name>MOP1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>,<decl><type ref="prev"/><name>d</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>MOP2</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition> <block>{
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d%d%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>A</name><init>=<expr><operator>(</operator><name>a</name><operator>+</operator><name>c</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><name>c</name></expr></init></decl>,<decl><type ref="prev"/><name>B</name><init>=<expr><operator>(</operator><name>b</name><operator>+</operator><name>d</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><name>d</name></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>A</name><operator>+</operator><name>B</name><operator>&gt;</operator><name>k</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d\n"</literal></expr></argument>,<argument><expr><name>A</name></expr></argument>,<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>

	}</block></while>
}</block></function>

</unit>
