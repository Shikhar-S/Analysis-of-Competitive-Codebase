<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28931985_62500903.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fs</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sc</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout&lt;&lt;#x&lt;&lt;" = "&lt;&lt;(x)&lt;&lt;endl</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INF</name></cpp:macro> <cpp:value>1e18</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALPHABET_SIZE</name></cpp:macro> <cpp:value>26</cpp:value></cpp:define>


<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>

<comment type="block">/* Look for:
* the exact constraints (multiple sets are too slow for n=10^6 :( ) 
* special cases (n=1?)
* overflow (ll vs int?)
* array bounds
* if you have no idea just guess the appropriate well-known algo instead of doing nothing :/
*/</comment>

<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>a</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>pref</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>long</name> <name>long</name></type> <name>hitung</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>kiri</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>kanan</name></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>pos1</name> <init>= <expr><call><name>lower_bound</name><argument_list>(<argument><expr><name>a</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>a</name> <operator>+</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>kiri</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>a</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>pos2</name> <init>= <expr><call><name>upper_bound</name><argument_list>(<argument><expr><name>a</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>a</name> <operator>+</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>kanan</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>a</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>ret</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>kiri</name> <operator>*</operator> <operator>(</operator><name>pos1</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <name><name>pref</name><index>[<expr><name>pos1</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ret</name> <operator>+</operator> <operator>(</operator><name><name>pref</name><index>[<expr><name>n</name></expr>]</index></name> <operator>-</operator> <name><name>pref</name><index>[<expr><name>pos2</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>-</operator> <name>kanan</name> <operator>*</operator> <operator>(</operator><name>n</name> <operator>-</operator> <name>pos2</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

    <return>return <expr><name>ret</name></expr>;</return>
}</block></function>

<function><type><name>long</name> <name>long</name></type> <name>solve</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>now</name></decl></parameter>)</parameter_list><block>{

    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>l</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>r</name> <init>= <expr><literal type="number">1e9</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>ret</name> <init>= <expr><literal type="number">1e18</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>l</name> <operator>+</operator> <literal type="number">3</literal> <operator>&lt;=</operator> <name>r</name></expr>)</condition><block>{
        <comment type="line">// cout &lt;&lt; l &lt;&lt; " " &lt;&lt; r &lt;&lt; " ini\n";</comment>
        <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>mid1</name> <init>= <expr><operator>(</operator><name>l</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>r</name><operator>)</operator> <operator>/</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>mid2</name> <init>= <expr><operator>(</operator><name>r</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>l</name><operator>)</operator> <operator>/</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>a</name> <init>= <expr><call><name>hitung</name><argument_list>(<argument><expr><name>mid1</name></expr></argument>, <argument><expr><name>mid1</name> <operator>+</operator> <name>now</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>b</name> <init>= <expr><call><name>hitung</name><argument_list>(<argument><expr><name>mid2</name></expr></argument>, <argument><expr><name>mid2</name> <operator>+</operator> <name>now</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if<condition>(<expr><name>a</name> <operator>&lt;</operator> <name>b</name></expr>)</condition><then><block>{
            <expr_stmt><expr><name>r</name> <operator>=</operator> <name>mid2</name></expr>;</expr_stmt>
        }</block></then><else>else<block>{
            <expr_stmt><expr><name>l</name> <operator>=</operator> <name>mid1</name></expr>;</expr_stmt>
        }</block></else></if>
    }</block></while>
    <for>for<control>(<init><decl><type><name>long</name> <name>long</name></type> <name>i</name> <init>= <expr><name>l</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>r</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <comment type="line">// cout &lt;&lt; i &lt;&lt; " " &lt;&lt; i + now &lt;&lt; " " &lt;&lt; hitung(i, i + now) &lt;&lt; " oi\n";</comment>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><call><name>hitung</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <name>now</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <return>return <expr><name>ret</name></expr>;</return>

}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pref</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></for>

    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>a</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>a</name> <operator>+</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block>{
        <expr_stmt><expr><name><name>pref</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>pref</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></for>

        

    <comment type="line">//binser answer</comment>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>r</name> <init>= <expr><literal type="number">1e9</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>ans</name> <init>= <expr><literal type="number">1e18</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>l</name> <operator>&lt;=</operator> <name>r</name></expr>)</condition><block>{
        <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>mid</name> <init>= <expr><operator>(</operator><name>l</name> <operator>+</operator> <name>r</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>now</name> <init>= <expr><call><name>solve</name><argument_list>(<argument><expr><name>mid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// cout &lt;&lt; now &lt;&lt; " " &lt;&lt; mid &lt;&lt; " here\n";</comment>
        <if>if<condition>(<expr><name>now</name> <operator>&lt;=</operator> <name>k</name></expr>)</condition><then><block>{
            <expr_stmt><expr><name>ans</name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>r</name> <operator>=</operator> <name>mid</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        }</block></then><else>else<block>{
            <expr_stmt><expr><name>l</name> <operator>=</operator> <name>mid</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        }</block></else></if>
    }</block></while>

    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>

}</block></function>
</unit>
