<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28928236_62477736.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>p</name></decl>,<decl><type ref="prev"/><name>w</name></decl>,<decl><type ref="prev"/><name>d</name></decl>,<decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld%lld%lld%lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>w</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>x</name><operator>&lt;</operator><name>w</name> <operator>&amp;&amp;</operator> <name>x</name><operator>*</operator><name>d</name><operator>&lt;=</operator><name>p</name> <operator>&amp;&amp;</operator> <name>x</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>x</name><operator>++</operator></expr></incr>)</control>
    <block>{
    	<if>if<condition>(<expr><operator>(</operator><name>p</name><operator>-</operator><name>x</name><operator>*</operator><name>d</name><operator>)</operator><operator>%</operator><name>w</name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>x</name><operator>+</operator><operator>(</operator><name>p</name><operator>-</operator><name>x</name><operator>*</operator><name>d</name><operator>)</operator><operator>/</operator><name>w</name><operator>&lt;=</operator><name>n</name></expr>)</condition><then>
    	<block>{
    		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld %lld %lld\n"</literal></expr></argument>,<argument><expr><operator>(</operator><name>p</name><operator>-</operator><name>x</name><operator>*</operator><name>d</name><operator>)</operator><operator>/</operator><name>w</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>n</name><operator>-</operator><operator>(</operator><name>x</name><operator>+</operator><operator>(</operator><name>p</name><operator>-</operator><name>x</name><operator>*</operator><name>d</name><operator>)</operator><operator>/</operator><name>w</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    		<return>return <expr><literal type="number">0</literal></expr>;</return>
		}</block></then></if>
	}</block></for>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-1\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
