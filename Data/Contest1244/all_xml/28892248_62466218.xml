<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28892248_62466218.cpp"><comment type="line">// Author : Abdallah Hemdan</comment>
<comment type="block">/*Dear online judge:
* I've read the problem, and tried to solve it.
* Even if you don't accept my solution, you should respect my effort.
* I hope my code compiles and gets accepted.
*  ___   __
* |\  \|\  \
* \ \  \_\  \
*  \ \   ___ \emdan
*   \ \  \\ \ \
*    \ \__\\ \_\
*     \|__| \|__|
*/</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_MSC_VER</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_CRT_SECURE_NO_WARNINGS</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iomanip&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;deque&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sstream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdlib&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctime&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;complex&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;list&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;climits&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cctype&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bitset&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;numeric&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;array&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tuple&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdexcept&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;functional&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;locale&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PB</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>eb</name></cpp:macro> <cpp:value>emplace_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>'\n'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xx</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yy</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name></cpp:macro> <cpp:value>size()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vi</name></cpp:macro> <cpp:value>vector&lt;int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vll</name></cpp:macro> <cpp:value>vector&lt;ll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ul</name></cpp:macro> <cpp:value>unsigned long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vs</name></cpp:macro> <cpp:value>vector&lt;string&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>si</name></cpp:macro> <cpp:value>set&lt;int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sll</name></cpp:macro> <cpp:value>set&lt;ll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IO</name></cpp:macro> <cpp:value>ios::sync_with_stdio(0); cin.tie(0); cout.tie(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((v).begin()), ((v).end())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rall</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((v).rbegin()), ((v).rend())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Ceil</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x + y - 1) / y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lop</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (ll i =(b)-((b)&gt;(e));i!=(e)-((b)&gt;(e));i += 1-2*((b)&gt;(e)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lopi</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>init</name></type></parameter>, <parameter><type><name>n</name></type></parameter>, <parameter><type><name>incr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (ll i = init; i &lt; n; i += incr)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Even</name><parameter_list>(<parameter><type><name>Num</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Num % 2 == 0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mms</name><parameter_list>(<parameter><type><name>Arr</name></type></parameter>, <parameter><type><name>Value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(Arr, Value, sizeof(Arr))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SetPre</name><parameter_list>(<parameter><type><name>Ans</name></type></parameter>, <parameter><type><name>num</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>fixed &lt;&lt; setprecision(num) &lt;&lt; (Ans)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>clr</name></cpp:macro> <cpp:value>clear()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>re</name></cpp:macro> <cpp:value>return</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>print</name><parameter_list>(<parameter><type><name>ans</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout &lt;&lt; ans &lt;&lt; endl</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>print2</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout &lt;&lt; a &lt;&lt; ' ' &lt;&lt; b &lt;&lt; endl</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vpii</name></cpp:macro> <cpp:value>vector&lt;pair&lt;int, int&gt; &gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vpll</name></cpp:macro> <cpp:value>vector&lt;pair&lt;ll, ll&gt; &gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pll</name></cpp:macro> <cpp:value>pair&lt;ll, ll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;int,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pi</name></cpp:macro> <cpp:value>acos(-1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fix</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>k</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ll(a) % ll(k) + k) % k</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>in</name></cpp:macro> <cpp:value>insert</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sc</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cin &gt;&gt; n</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sc2</name><parameter_list>(<parameter><type><name>n</name></type></parameter>,<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cin &gt;&gt; n &gt;&gt; m</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sc3</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cin &gt;&gt; a &gt;&gt; b &gt;&gt; c</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sc4</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cin &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>watch</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout &lt;&lt; (#x) &lt;&lt; " is " &lt;&lt; (x) &lt;&lt; endl</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>stringToLower</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>transform(all(s), s.begin(), ::tolower);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>stringToUpper</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>transform(all(s), s.begin(), ::toupper);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>noOfDigits</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>(1+floor(log10(n)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>isOn</name><parameter_list>(<parameter><type><name>S</name></type></parameter>, <parameter><type><name>j</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(S &amp; (1 &lt;&lt; j))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>setBit</name><parameter_list>(<parameter><type><name>S</name></type></parameter>, <parameter><type><name>j</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(S |= (1 &lt;&lt; j))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>clearBit</name><parameter_list>(<parameter><type><name>S</name></type></parameter>, <parameter><type><name>j</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(S &amp;= ~(1 &lt;&lt; j))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>toggleBit</name><parameter_list>(<parameter><type><name>S</name></type></parameter>, <parameter><type><name>j</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(S ^= (1 &lt;&lt; j))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lowBit</name><parameter_list>(<parameter><type><name>S</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(S &amp; (-S))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>setAll</name><parameter_list>(<parameter><type><name>S</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(S = (1 &lt;&lt; n) - 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>modulo</name><parameter_list>(<parameter><type><name>S</name></type></parameter>, <parameter><type><name>N</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((S) &amp; (N - 1))</cpp:value></cpp:define>   <comment type="line">// returns S % N, where N is a power of 2</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>isPowerOfTwo</name><parameter_list>(<parameter><type><name>S</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(!(S &amp; (S - 1)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nearestPowerOfTwo</name><parameter_list>(<parameter><type><name>S</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)pow(2.0, (int)((log((double)S) / log(2.0)) + 0.5)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>turnOffLastBit</name><parameter_list>(<parameter><type><name>S</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((S) &amp; (S - 1))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>turnOnLastZero</name><parameter_list>(<parameter><type><name>S</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((S) | (S + 1))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>turnOffLastConsecutiveBits</name><parameter_list>(<parameter><type><name>S</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((S) &amp; (S + 1))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>turnOnLastConsecutiveZeroes</name><parameter_list>(<parameter><type><name>S</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((S) | (S - 1))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>posOfFirstSetBit</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(log2(n &amp; -n) + 1);</cpp:value></cpp:define>

<typedef>typedef <type><name>long</name> <name>long</name> <name>int</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>
<typedef>typedef <type><name>int8_t</name></type> <name>i8</name>;</typedef>
<typedef>typedef <type><name>uint8_t</name></type> <name>ui8</name>;</typedef>
<typedef>typedef <type><name>int16_t</name></type> <name>i16</name>;</typedef>
<typedef>typedef <type><name>uint16_t</name></type> <name>ui16</name>;</typedef>
<typedef>typedef <type><name>int32_t</name></type> <name>i32</name>;</typedef>
<typedef>typedef <type><name>uint32_t</name></type> <name>ui32</name>;</typedef>
<typedef>typedef <type><name>int64_t</name></type> <name>i64</name>;</typedef>
<typedef>typedef <type><name>uint64_t</name></type> <name>ui64</name>;</typedef>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_MSC_VER</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;intrin.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__builtin_popcount</name></cpp:macro> <cpp:value>__popcnt</cpp:value></cpp:define>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN64</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__builtin_popcountll</name></cpp:macro> <cpp:value>__popcnt64</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><specifier>inline</specifier> <type><name>int</name></type> <name>__builtin_popcountll</name><parameter_list>(<parameter><decl><type><name>__int64</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{
	<return>return <expr><call><name>__builtin_popcount</name><argument_list>(<argument><expr><operator>(</operator><name>ui32</name><operator>)</operator><name>a</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>__builtin_popcount</name><argument_list>(<argument><expr><name>a</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>MOD</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>EPS</name> <init>= <expr><literal type="number">1e-9</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>oo</name> <init>= <expr><name>INT_MAX</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>OO</name> <init>= <expr><literal type="number">1e18</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>monthly</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>,<expr><literal type="number">31</literal></expr>,<expr><literal type="number">28</literal></expr>,<expr><literal type="number">31</literal></expr>,<expr><literal type="number">30</literal></expr>,<expr><literal type="number">31</literal></expr>,<expr><literal type="number">30</literal></expr>,<expr><literal type="number">31</literal></expr>,<expr><literal type="number">31</literal></expr>,<expr><literal type="number">30</literal></expr>,<expr><literal type="number">31</literal></expr>,<expr><literal type="number">30</literal></expr>,<expr><literal type="number">31</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>alldx</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>alldy</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>dx</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>dy</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>dz</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>string</name></type> <name>Letters</name> <init>= <expr><literal type="string">"0123456789ABCDEF"</literal></expr></init></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>toInt</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>re</name></type> <name><name>Letters</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></decl>;</decl_stmt> }</block></function>
<function><type><name>ll</name></type> <name>FromAnyBaseToDecimal</name><parameter_list>(<parameter><decl><type><name>string</name></type> <name>inp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>base</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>ll</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>  <macro><name>lop</name><argument_list>(<argument>i</argument>, <argument><literal type="number">0</literal></argument>, <argument>inp.sz</argument>)</argument_list></macro> <block>{ <expr_stmt><expr><name>res</name> <operator>*=</operator> <name>base</name></expr>;</expr_stmt> <expr_stmt><expr><name>res</name> <operator>+=</operator> <call><name>toInt</name><argument_list>(<argument><expr><name><name>inp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block> <decl_stmt><decl><type><name>re</name></type> <name>res</name></decl>;</decl_stmt> }</block></function>
<function><type><name>string</name></type> <name>FromDecimalToAnyBase</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>base</name></decl></parameter>)</parameter_list> <block>{ <if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>re</name> <literal type="string">"0"</literal></expr>;</expr_stmt></block></then></if>  <decl_stmt><decl><type><name>string</name></type> <name>ans</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt> <while>while <condition>(<expr><name>n</name></expr>)</condition> <block>{ <expr_stmt><expr><name>ans</name> <operator>=</operator> <name><name>Letters</name><index>[<expr><name>n</name><operator>%</operator><name>base</name></expr>]</index></name> <operator>+</operator> <name>ans</name></expr>;</expr_stmt>  <expr_stmt><expr><name>n</name> <operator>/=</operator> <name>base</name></expr>;</expr_stmt> }</block></while> <decl_stmt><decl><type><name>re</name></type> <name>ans</name></decl>;</decl_stmt> }</block></function>
<function><type><name>ll</name></type> <name>GCD</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name>re</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><operator>!</operator><name>b</name><operator>)</operator></expr> ?</condition><then> <expr><name>a</name></expr> </then><else>: <expr><call><name>GCD</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name><operator>%</operator><name>b</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
<function><type><name>ll</name></type> <name>LCM</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>re</name> <name>a</name> <operator>/</operator> <operator>(</operator><call><name>GCD</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>)</operator><operator>*</operator><name>b</name></expr>;</expr_stmt> }</block></function>
<function><type><name>ll</name></type> <name>nCr</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>r</name></decl></parameter>)</parameter_list> <block>{ <if>if <condition>(<expr><name>n</name><operator>&lt;</operator><name>r</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>re</name> <literal type="number">0</literal></expr>;</expr_stmt></block></then></if> <if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>re</name> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if> <decl_stmt><decl><type><name>re</name> <name>n</name><modifier>*</modifier></type><name>nCr</name><argument_list>(<argument><expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>r</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list> / <name>r</name></decl>;</decl_stmt> }</block></function>
<function><type><name>ll</name></type> <name>PowMod</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>bs</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>ex</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>M</name></decl></parameter>)</parameter_list> <block>{ <if>if <condition>(<expr><operator>!</operator><name>ex</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>re</name> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if> <decl_stmt><decl><type><name>ll</name></type> <name>p</name> <init>= <expr><call><name>PowMod</name><argument_list>(<argument><expr><operator>(</operator><name>bs</name><operator>*</operator><name>bs</name><operator>)</operator> <operator>%</operator> <name>M</name></expr></argument>, <argument><expr><name>ex</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <expr_stmt><expr><ternary><condition><expr><call><name>re</name><argument_list>(<argument><expr><name>ex</name> <operator>&amp;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><operator>(</operator><name>p</name><operator>*</operator><name>bs</name><operator>)</operator> <operator>%</operator> <name>M</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr>;</expr_stmt> }</block></function>
<function><type><name>ll</name></type> <name>fastpow</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{ <if>if <condition>(<expr><operator>!</operator><name>e</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>re</name> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if> <if>if <condition>(<expr><name>e</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><decl_stmt><decl><type><name>re</name> <name>b</name> <modifier>*</modifier></type> <name>fastpow</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>e</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt></block></then></if> <decl_stmt><decl><type><name>ll</name></type> <name>x</name> <init>= <expr><call><name>fastpow</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>e</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <decl_stmt><decl><type><name>re</name> <name>x</name> <modifier>*</modifier></type> <name>x</name></decl>;</decl_stmt> }</block></function>
<function><type><name>ll</name></type> <name>ModInverse</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>re</name></type> <name>PowMod</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>MOD</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>MOD</name></expr></argument>)</argument_list></decl>;</decl_stmt> }</block></function>
<function><type><name>ll</name></type> <name>ExtGCD</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>ll</name><modifier>&amp;</modifier></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>ll</name><modifier>&amp;</modifier></type> <name>y</name></decl></parameter>)</parameter_list> <block>{ <if>if <condition>(<expr><operator>!</operator><name>b</name></expr>)</condition><then> <block>{ <expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <decl_stmt><decl><type><name>re</name></type> <name>a</name></decl>;</decl_stmt> }</block></then></if> <decl_stmt><decl><type><name>ll</name></type> <name>r</name> <init>= <expr><call><name>ExtGCD</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name><operator>%</operator><name>b</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <expr_stmt><expr><name>y</name> <operator>-=</operator> <name>a</name> <operator>/</operator> <name>b</name><operator>*</operator><name>x</name></expr>;</expr_stmt> <decl_stmt><decl><type><name>re</name></type> <name>r</name></decl>;</decl_stmt> }</block></function>
<function><type><name>ll</name></type> <name>mult</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name>re</name><argument_list>(<argument><expr><literal type="number">1LL</literal> <operator>*</operator> <name>a</name> <operator>*</operator> <name>b</name></expr></argument>)</argument_list></call> <operator>%</operator> <name>MOD</name></expr>;</expr_stmt> }</block></function>
<function><type><name>ll</name></type> <name>SumOfOdd</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>r</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>ll</name></type> <name>Rsm</name> <init>= <expr><operator>(</operator><name>r</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt> <expr_stmt><expr><name>Rsm</name> <operator>*=</operator> <name>Rsm</name></expr>;</expr_stmt> <expr_stmt><expr><name>l</name><operator>--</operator></expr>;</expr_stmt> <decl_stmt><decl><type><name>ll</name></type> <name>Lsm</name> <init>= <expr><operator>(</operator><name>l</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt> <expr_stmt><expr><name>Lsm</name> <operator>*=</operator> <name>Lsm</name></expr>;</expr_stmt> <expr_stmt><expr><name>re</name> <name>Rsm</name> <operator>-</operator> <name>Lsm</name></expr>;</expr_stmt> }</block></function>
<function><type><name>ll</name></type> <name>NoOfOdd</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>L</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>R</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>ll</name></type> <name>N</name> <init>= <expr><operator>(</operator><name>R</name> <operator>-</operator> <name>L</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt> <if>if <condition>(<expr><name>R</name> <operator>%</operator> <literal type="number">2</literal> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>L</name> <operator>%</operator> <literal type="number">2</literal> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>N</name><operator>++</operator></expr>;</expr_stmt></block></then></if> <decl_stmt><decl><type><name>re</name></type> <name>N</name></decl>;</decl_stmt> }</block></function>
<function><type><name>ll</name></type> <name>NoOfEven</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>L</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>R</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name>re</name><argument_list>(<argument><expr><operator>(</operator><name>R</name> <operator>-</operator> <name>L</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <call><name>NoOfOdd</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>R</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
<function><type><name>bool</name></type> <name>PointInRectangle</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x1</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>y1</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>x2</name></decl></parameter>,
	<parameter><decl><type><name>ll</name></type> <name>y2</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{
	<expr_stmt><expr><call><name>re</name><argument_list>(<argument><expr><name>x</name> <operator>&gt;=</operator> <name>x1</name> <operator>&amp;&amp;</operator> <name>x</name> <operator>&lt;=</operator> <name>x2</name> <operator>&amp;&amp;</operator> <name>y</name> <operator>&gt;=</operator> <name>y1</name> <operator>&amp;&amp;</operator> <name>y</name> <operator>&lt;=</operator> <name>y2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>bool</name></type> <name>isPrime</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{ <if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>re</name> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if> <if>if <condition>(<expr><name>n</name><operator>&lt;</operator><literal type="number">2</literal> <operator>||</operator> <name>n</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>re</name> <literal type="number">0</literal></expr>;</expr_stmt></block></then></if> <for>for <control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>*</operator><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control><block type="pseudo"><if>if <condition>(<expr><name>n</name><operator>%</operator><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>re</name> <literal type="number">0</literal></expr>;</expr_stmt></block></then></if></block></for> <expr_stmt><expr><name>re</name> <literal type="number">1</literal></expr>;</expr_stmt> }</block></function>
<function><type><name>bool</name></type> <name>isPalindrome</name><parameter_list>(<parameter><decl><type><name>string</name></type> <name>str</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>ll</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <decl_stmt><decl><type><name>ll</name></type> <name>h</name> <init>= <expr><name><name>str</name><operator>.</operator><name>sz</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt> <while>while <condition>(<expr><name>h</name> <operator>&gt;</operator> <name>l</name></expr>)</condition> <block>{ <if>if <condition>(<expr><name><name>str</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>!=</operator> <name><name>str</name><index>[<expr><name>h</name><operator>--</operator></expr>]</index></name></expr>)</condition><then> <block>{ <expr_stmt><expr><name>re</name> <literal type="number">0</literal></expr>;</expr_stmt> }</block></then></if> }</block></while> <expr_stmt><expr><name>re</name> <literal type="number">1</literal></expr>;</expr_stmt> }</block></function>
<function><type><name>bool</name></type> <name>isPerfectSquare</name><parameter_list>(<parameter><decl><type><name>ld</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>ld</name></type> <name>sr</name> <init>= <expr><call><name>sqrt</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <expr_stmt><expr><call><name>re</name><argument_list>(<argument><expr><operator>(</operator><name>sr</name> <operator>-</operator> <call><name>floor</name><argument_list>(<argument><expr><name>sr</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
<function><type><name>bool</name></type> <name>isPerfectCube</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>ll</name></type> <name>curoot</name> <init>= <expr><call><name>round</name><argument_list>(<argument><expr><call><name>pow</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">1.0</literal> <operator>/</operator> <literal type="number">3.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <expr_stmt><expr><call><name>re</name><argument_list>(<argument><expr><call><name>pow</name><argument_list>(<argument><expr><name>curoot</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
<function><type><name>double</name></type> <name>distance</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x1</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>y1</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>x2</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>y2</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>re</name></type> <name>hypot</name><argument_list>(<argument><expr><call><name>fabs</name><argument_list>(<argument><expr><name>x1</name> <operator>-</operator> <name>x2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>fabs</name><argument_list>(<argument><expr><name>y1</name> <operator>-</operator> <name>y2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt> }</block></function>

<function><type><name>void</name></type> <name>GetAC</name><parameter_list>()</parameter_list> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt> <expr_stmt><expr><call><name>sc</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>lop</name><argument_list>(<argument>i</argument>, <argument><literal type="number">0</literal></argument>, <argument>n</argument>)</argument_list></macro> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>sc4</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>sc</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><call><name>ceil</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>a</name> <operator>/</operator> <name>c</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>y</name> <init>= <expr><call><name>ceil</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>b</name> <operator>/</operator> <name>d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>x</name> <operator>+</operator> <name>y</name> <operator>&lt;=</operator> <name>k</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>x</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name>y</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
	}</block>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ONLINE_JUDGE</name></cpp:ifndef>
	<expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"In.txt"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">// freopen("Out.txt", "w", stdout);</comment>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<comment type="line">// freopen("input.txt", "r", stdin);</comment>
	<comment type="line">// freopen("output.txt", "w", stdout);</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name>IO</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>GetAC</name><argument_list>()</argument_list></call></expr>;</expr_stmt>




}</block></function>

</unit>
