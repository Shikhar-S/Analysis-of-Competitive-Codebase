<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28935015_62493682.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>forn</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=0; i&lt;(n); i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>printVec</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(auto e: v){cout &lt;&lt; e &lt;&lt; " ";} cout &lt;&lt; endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>s</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>double</name></type> <name>ld</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>lld</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>pll</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>vl</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pii</name></expr></argument>&gt;</argument_list></name></type> <name>vpi</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pll</name></expr></argument>&gt;</argument_list></name></type> <name>vpl</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vi</name></expr></argument>&gt;</argument_list></name></type> <name>vii</name>;</typedef>

<comment type="line">//Printing pairs and vectors</comment>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>A</name></parameter>, <parameter><type><name>typename</name></type> <name>B</name></parameter>&gt;</parameter_list></template> <type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name> <modifier>&amp;</modifier></type><name>cout</name></decl></parameter>, <parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier> <modifier>&amp;</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"("</literal> <operator>&lt;&lt;</operator> <name><name>p</name><operator>.</operator><name>f</name></name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal> <operator>&lt;&lt;</operator> <name><name>p</name><operator>.</operator><name>s</name></name> <operator>&lt;&lt;</operator> <literal type="string">")"</literal></expr>;</return> }</block></function>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>A</name></parameter>&gt;</parameter_list></template> <type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name> <modifier>&amp;</modifier></type><name>cout</name></decl></parameter>, <parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>A</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier> <modifier>&amp;</modifier></type><name>v</name></decl></parameter>)</parameter_list> <block>{
  <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"["</literal></expr>;</expr_stmt> <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>v</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<if>if <condition>(<expr><name>i</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal></expr>;</expr_stmt></block></then></if> <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>}</block></for> <return>return <expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"]"</literal></expr>;</return>
}</block></function>

<comment type="line">//2 147 483 647 int max</comment>
<comment type="line">//9 223 372 036 854 775 807 ll max</comment>
<function><type><name>void</name></type> <name>fast_io</name><parameter_list>()</parameter_list><block>{
   <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name>fast_io</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>p</name> <operator>&gt;&gt;</operator> <name>w</name> <operator>&gt;&gt;</operator> <name>d</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>a</name> <init>= <expr><name>p</name><operator>/</operator><name>w</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt><comment type="line">// min(max((p-n*(w-d))/d - 5,ll(-1)),n);</comment>
    <decl_stmt><decl><type><name>ll</name></type> <name>tried</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><literal type="boolean">true</literal></expr>)</condition><block>{
        <expr_stmt><expr><name>a</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>tried</name><operator>++</operator></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>a</name><operator>&gt;</operator><name>n</name> <operator>||</operator> <name>tried</name> <operator>&gt;</operator> <name>w</name><operator>-</operator><name>d</name><operator>+</operator><literal type="number">5</literal></expr>)</condition><then><block>{
            <break>break;</break>
        }</block></then></if>
        <if>if<condition>(<expr><operator>(</operator><name>p</name><operator>-</operator><name>a</name><operator>*</operator><name>d</name><operator>)</operator> <operator>%</operator> <operator>(</operator><name>w</name><operator>-</operator><name>d</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
            <decl_stmt><decl><type><name>ll</name></type> <name>x</name> <init>= <expr><operator>(</operator><name>p</name><operator>-</operator><name>a</name><operator>*</operator><name>d</name><operator>)</operator><operator>/</operator><operator>(</operator><name>w</name><operator>-</operator><name>d</name><operator>)</operator></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ll</name></type> <name>y</name> <init>= <expr><name>a</name><operator>-</operator><name>x</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ll</name></type> <name>z</name> <init>= <expr><name>n</name><operator>-</operator><name>a</name></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name>x</name><operator>&gt;</operator><name>n</name> <operator>||</operator> <name><name>x</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal> <operator>||</operator> <name>y</name></expr></argument>&gt;</argument_list></name><name>n</name> <operator>||</operator> <name><name>y</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal> <operator>||</operator> <name>z</name></expr></argument>&gt;</argument_list></name><name>n</name> <operator>||</operator> <name>z</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then><block>{
                <continue>continue;</continue>
            }</block></then><else>else<block>{
                <break>break;</break>

            }</block></else></if>
        }</block></then></if>
    }</block></while>

    <if>if<condition>(<expr><operator>(</operator><name>p</name><operator>-</operator><name>a</name><operator>*</operator><name>d</name><operator>)</operator> <operator>%</operator> <operator>(</operator><name>w</name><operator>-</operator><name>d</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>x</name> <init>= <expr><operator>(</operator><name>p</name><operator>-</operator><name>a</name><operator>*</operator><name>d</name><operator>)</operator><operator>/</operator><operator>(</operator><name>w</name><operator>-</operator><name>d</name><operator>)</operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ll</name></type> <name>y</name> <init>= <expr><name>a</name><operator>-</operator><name>x</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ll</name></type> <name>z</name> <init>= <expr><name>n</name><operator>-</operator><name>a</name></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>x</name><operator>&gt;</operator><name>n</name> <operator>||</operator> <name><name>x</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal> <operator>||</operator> <name>y</name></expr></argument>&gt;</argument_list></name><name>n</name> <operator>||</operator> <name><name>y</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal> <operator>||</operator> <name>z</name></expr></argument>&gt;</argument_list></name><name>n</name> <operator>||</operator> <name>z</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
        }</block></then><else>else<block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>x</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name>y</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name>z</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>

        }</block></else></if>

    }</block></then><else>else<block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    }</block></else></if>
}</block></function>
</unit>
