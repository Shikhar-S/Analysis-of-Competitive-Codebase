<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28934692_62489126.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name><init>=<expr><literal type="number">100500</literal></expr></init></decl>;</decl_stmt>
<struct>struct <name>gg</name> <block>{<public type="default">
    <decl_stmt><decl><type><name>int</name></type> <name>u</name></decl>,<decl><type ref="prev"/><name>v</name></decl>,<decl><type ref="prev"/><name>next</name></decl>;</decl_stmt>
</public>}</block><decl><name><name>side</name><index>[<expr><name>maxn</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name></decl>;</struct>
<decl_stmt><decl><type><name>int</name></type> <name><name>head</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name>cnt</name></decl>,<decl><type ref="prev"/><name><name>in</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>c</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name>n</name></decl>,<decl><type ref="prev"/><name><name>col</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name>s1</name></decl>,<decl><type ref="prev"/><name>s2</name></decl>,<decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<function><type><name>void</name></type> <name>insert</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>struct</name> <name>gg</name></name></type> <name>add</name><init>=<expr><block>{<expr><name>u</name></expr>,<expr><name>v</name></expr>,<expr><name><name>head</name><index>[<expr><name>u</name></expr>]</index></name></expr>}</block></expr></init></decl>;</decl_stmt><expr_stmt><expr><name><name>side</name><index>[<expr><operator>++</operator><name>cnt</name></expr>]</index></name><operator>=</operator><name>add</name></expr>;</expr_stmt><expr_stmt><expr><name><name>head</name><index>[<expr><name>u</name></expr>]</index></name><operator>=</operator><name>cnt</name></expr>;</expr_stmt>
}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>int</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><if>if<condition>(<expr><name>i</name><operator>!=</operator><name>b</name><operator>&amp;&amp;</operator><name>i</name><operator>!=</operator><name>a</name></expr>)</condition><then><block type="pseudo"><return>return <expr><name>i</name></expr>;</return></block></then></if></block></for>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

<function><type><name>ll</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>now</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>fa</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>nowc</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>nextc</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>ans</name><init>=<expr><name><name>c</name><index>[<expr><name>nowc</name></expr>]</index><index>[<expr><name>now</name></expr>]</index></name></expr></init></decl>;</decl_stmt><expr_stmt><expr><name><name>col</name><index>[<expr><name>now</name></expr>]</index></name><operator>=</operator><name>nowc</name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name><name>head</name><index>[<expr><name>now</name></expr>]</index></name></expr></init></decl>;</init><condition><expr><name>i</name></expr>;</condition><incr><expr><name>i</name><operator>=</operator><name><name>side</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>next</name></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>v</name><init>=<expr><name><name>side</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v</name></expr></init></decl>;</decl_stmt><if>if<condition>(<expr><name>v</name><operator>==</operator><name>fa</name></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
        <expr_stmt><expr><name>ans</name><operator>+=</operator><call><name>dfs</name><argument_list>(<argument><expr><name>v</name></expr></argument>,<argument><expr><name>now</name></expr></argument>,<argument><expr><name>nextc</name></expr></argument>,<argument><expr><call><name>get</name><argument_list>(<argument><expr><name>nowc</name></expr></argument>,<argument><expr><name>nextc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <return>return <expr><name>ans</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>ans</name><init>=<expr><literal type="number">1e18</literal><operator>+</operator><literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block></for>
    }</block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>u</name></decl>,<decl><type ref="prev"/><name>v</name></decl>;</decl_stmt><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>u</name><operator>&gt;&gt;</operator><name>v</name></expr>;</expr_stmt><if>if<condition>(<expr><name><name>in</name><index>[<expr><name>u</name></expr>]</index></name><operator>==</operator><literal type="number">2</literal><operator>||</operator><name><name>in</name><index>[<expr><name>v</name></expr>]</index></name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then><block>{<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"-1"</literal></expr>;</expr_stmt><return>return <expr><literal type="number">0</literal></expr>;</return>}</block></then></if>
        <expr_stmt><expr><call><name>insert</name><argument_list>(<argument><expr><name>u</name></expr></argument>,<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>insert</name><argument_list>(<argument><expr><name>v</name></expr></argument>,<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name><name>in</name><index>[<expr><name>u</name></expr>]</index></name><operator>++</operator></expr><operator>,</operator><expr><name><name>in</name><index>[<expr><name>v</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
    }</block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><if>if<condition>(<expr><name><name>in</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>s</name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></then></if></block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{
            <if>if<condition>(<expr><name>i</name><operator>==</operator><name>j</name></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
            <decl_stmt><decl><type><name>ll</name></type> <name>val</name><init>=<expr><call><name>dfs</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name>val</name><operator>&lt;</operator><name>ans</name></expr>)</condition><then><block>{<expr_stmt><expr><name>ans</name><operator>=</operator><name>val</name></expr>;</expr_stmt><expr_stmt><expr><name>s1</name><operator>=</operator><name>i</name></expr><operator>,</operator><expr><name>s2</name><operator>=</operator><name>j</name></expr>;</expr_stmt>}</block></then></if>
        }</block></for>
    }</block></for>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name>dfs</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>s1</name></expr></argument>,<argument><expr><name>s2</name></expr></argument>)</argument_list></call><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>col</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;&lt;</operator><literal type="char">' '</literal></expr>;</expr_stmt></block></for>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
