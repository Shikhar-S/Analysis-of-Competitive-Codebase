<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28927891_62495337.cpp"><cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><name>3</name><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><name>2</name><name>)</name></cpp:pragma>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>reaD</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>read()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mst</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(a,b,sizeof(a))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>foR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>k</name></type></parameter>, <parameter><type><name>j</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(register int i = (k); i &gt;= (j); i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>For</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>k</name></type></parameter>, <parameter><type><name>j</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(register int i = (k); i &lt;= (j); i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG</name></cpp:macro> <cpp:value>printf("Running on Line %d in Function %s\n",__LINE__,__FUNCTION__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>ckmax</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>ckmin</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function>
<function><specifier>inline</specifier> <type><name>int</name></type> <name>read</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>num</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>flag</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt><decl_stmt><decl><type><name>char</name></type> <name>c</name><init>=<expr><literal type="char">' '</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init>;</init><condition><expr><name>c</name><operator>&gt;</operator><literal type="char">'9'</literal><operator>||</operator><name>c</name><operator>&lt;</operator><literal type="char">'0'</literal></expr>;</condition><incr><expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr></incr>)</control> <block type="pseudo"><if>if<condition>(<expr><name>c</name><operator>==</operator><literal type="char">'-'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>flag</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if></block></for>
    <for>for<control>(<init>;</init><condition><expr><name>c</name><operator>&gt;=</operator><literal type="char">'0'</literal><operator>&amp;&amp;</operator><name>c</name><operator>&lt;=</operator><literal type="char">'9'</literal></expr>;</condition><incr><expr><name>num</name><operator>=</operator><operator>(</operator><name>num</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><operator>(</operator><name>num</name><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator><operator>+</operator><name>c</name><operator>-</operator><literal type="number">48</literal></expr><operator>,</operator><expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr></incr>)</control><block type="pseudo"><empty_stmt>;</empty_stmt></block></for>
    <return>return <expr><name>num</name><operator>*</operator><name>flag</name></expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXN</name></cpp:macro> <cpp:value>1000005</cpp:value></cpp:define>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr><literal type="number">1000005</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
	<if>if<condition>(<expr><name>k</name> <operator>&lt;</operator> <name>n</name> <operator>*</operator> <operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-1\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></then></if>
	<macro><name>For</name><argument_list>(<argument>i</argument>, <argument><literal type="number">1</literal></argument>, <argument>n</argument>)</argument_list></macro> <expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
	
	<decl_stmt><decl><type><name>int</name></type> <name>sum</name> <init>= <expr><name>n</name> <operator>*</operator> <operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>del</name> <init>= <expr><name>k</name> <operator>-</operator> <name>sum</name></expr></init></decl>, <decl><type ref="prev"/><name>ans</name> <init>= <expr><name>sum</name></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>n</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <operator>(</operator><name>n</name><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{
		<if>if<condition>(<expr><name>i</name> <operator>-</operator> <operator>(</operator><name>n</name><operator>-</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>&lt;=</operator> <name>del</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>del</name> <operator>-=</operator> <operator>(</operator><name>i</name> <operator>-</operator> <operator>(</operator><name>n</name> <operator>-</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><name>n</name><operator>-</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else>else <block>{
			<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><name>i</name> <operator>-</operator> <name>del</name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>del</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<break>break;</break>
		}</block></else></if>
	}</block></for>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>k</name> <operator>-</operator> <name>del</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
	<macro><name>For</name><argument_list>(<argument>i</argument>, <argument><literal type="number">1</literal></argument>, <argument>n</argument>)</argument_list></macro> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d "</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>For</name><argument_list>(<argument>i</argument>, <argument><literal type="number">1</literal></argument>, <argument>n</argument>)</argument_list></macro> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d "</literal></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>


</unit>
