<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28910340_62473403.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name> ;</namespace></using>
<function><template>template <parameter_list>&lt; <parameter><type><name>class</name></type> <name>R</name></parameter> &gt;</parameter_list></template> <specifier>inline</specifier> <type><name>void</name></type> <name>Readin</name><parameter_list>( <parameter><decl><type><name>R</name> <modifier>&amp;</modifier></type><name>K</name></decl></parameter> )</parameter_list> <block>{<decl_stmt><decl><type><name>bool</name></type> <name>F</name><init>=<expr><name>K</name><operator>=</operator><literal type="number">0</literal></expr></init></decl>;</decl_stmt><decl_stmt><decl><type><name>char</name></type> <name>C</name><init>=<expr><call><name>getchar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><while>while<condition>(<expr><name><name>C</name><argument_list type="generic">&lt;<argument><expr><literal type="char">'0'</literal><operator>||</operator><name>C</name></expr></argument>&gt;</argument_list></name><literal type="char">'9'</literal></expr>)</condition>
<block>{<if>if<condition>(<expr><name>C</name><operator>==</operator><literal type="char">'-'</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>F</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if><expr_stmt><expr><name>C</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>}</block></while><while>while<condition>(<expr><name>C</name><operator>&lt;=</operator><literal type="char">'9'</literal><operator>&amp;&amp;</operator><name>C</name><operator>&gt;=</operator><literal type="char">'0'</literal></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>K</name><operator>=</operator><operator>(</operator><name>K</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><operator>(</operator><name>K</name><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator><operator>+</operator><name>C</name><operator>-</operator><literal type="char">'0'</literal></expr><operator>,</operator><expr><name>C</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while><if>if<condition>(<expr><name>F</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>K</name><operator>=</operator><operator>-</operator><name>K</name></expr>;</expr_stmt></block></then></if>}</block></function>
<function><template>template <parameter_list>&lt; <parameter><type><name>class</name></type> <name>R</name></parameter> &gt;</parameter_list></template> <specifier>inline</specifier> <type><name>bool</name></type> <name>Checkmax</name><parameter_list>( <parameter><decl><type><name>R</name> <modifier>&amp;</modifier></type><name>A</name></decl></parameter> , <parameter><decl><type><name>R</name></type> <name>B</name></decl></parameter> )</parameter_list> <block>{ <return>return <expr><ternary><condition><expr><name>A</name> <operator>&lt;</operator> <name>B</name></expr> ?</condition><then> <expr><name>A</name> <operator>=</operator> <name>B</name></expr></then></ternary></expr> <operator>,</operator> <expr><literal type="number">1</literal> <operator>:</operator> <literal type="number">0</literal></expr> ;</return> }</block></function>
<function><template>template <parameter_list>&lt; <parameter><type><name>class</name></type> <name>R</name></parameter> &gt;</parameter_list></template> <specifier>inline</specifier> <type><name>bool</name></type> <name>Checkmin</name><parameter_list>( <parameter><decl><type><name>R</name> <modifier>&amp;</modifier></type><name>A</name></decl></parameter> , <parameter><decl><type><name>R</name></type> <name>B</name></decl></parameter> )</parameter_list> <block>{ <return>return <expr><ternary><condition><expr><name>A</name> <operator>&gt;</operator> <name>B</name></expr> ?</condition><then> <expr><name>A</name> <operator>=</operator> <name>B</name></expr></then></ternary></expr> <operator>,</operator> <expr><literal type="number">1</literal> <operator>:</operator> <literal type="number">0</literal></expr> ;</return> }</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MaxN</name> <init>= <expr><literal type="number">200000</literal> <operator>+</operator> <literal type="number">10</literal></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>N</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>L</name><index>[<expr><name>MaxN</name></expr>]</index></name></decl> , <decl><type ref="prev"/><name><name>R</name><index>[<expr><name>MaxN</name></expr>]</index></name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>Cost</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>MaxN</name></expr>]</index></name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>Dp</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>MaxN</name></expr>]</index></name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name><name>Vis</name><index>[<expr><name>MaxN</name></expr>]</index></name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>Nods</name><index>[<expr><name>MaxN</name></expr>]</index></name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>Col</name><index>[<expr><name>MaxN</name></expr>]</index></name></decl> ;</decl_stmt>
<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><call><name>Readin</name><argument_list>( <argument><expr><name>N</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt>
	<for>for<control>(<init><decl><type><specifier>register</specifier> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><operator>++</operator><name>i</name> <operator>&lt;=</operator> <name>N</name></expr> ;</condition> <incr/>)</control>
		<block type="pseudo"><expr_stmt><expr><call><name>Readin</name><argument_list>( <argument><expr><name><name>Cost</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr> ;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><specifier>register</specifier> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><operator>++</operator><name>i</name> <operator>&lt;=</operator> <name>N</name></expr> ;</condition> <incr/>)</control>
		<block type="pseudo"><expr_stmt><expr><call><name>Readin</name><argument_list>( <argument><expr><name><name>Cost</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr> ;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><specifier>register</specifier> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><operator>++</operator><name>i</name> <operator>&lt;=</operator> <name>N</name></expr> ;</condition> <incr/>)</control>
		<block type="pseudo"><expr_stmt><expr><call><name>Readin</name><argument_list>( <argument><expr><name><name>Cost</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr> ;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><specifier>register</specifier> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><operator>++</operator><name>i</name> <operator>&lt;</operator> <name>N</name></expr> ;</condition> <incr/>)</control> <block>{
		<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>U</name></decl> , <decl><type ref="prev"/><name>V</name></decl> ;</decl_stmt>
		<expr_stmt><expr><call><name>Readin</name><argument_list>( <argument><expr><name>U</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt>
		<expr_stmt><expr><call><name>Readin</name><argument_list>( <argument><expr><name>V</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt>
		<if>if<condition>( <expr><name><name>R</name><index>[<expr><name>U</name></expr>]</index></name> <operator>or</operator> <name><name>R</name><index>[<expr><name>V</name></expr>]</index></name></expr> )</condition><then> <block type="pseudo"><return>return <expr><operator>not</operator> <call><name>printf</name><argument_list>( <argument><expr><literal type="string">"-1\n"</literal></expr></argument> )</argument_list></call></expr> ;</return></block></then></if>
		<if>if<condition>( <expr><name><name>L</name><index>[<expr><name>U</name></expr>]</index></name></expr> )</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>R</name><index>[<expr><name>U</name></expr>]</index></name> <operator>=</operator> <name>V</name></expr> ;</expr_stmt></block></then> <else>else <block type="pseudo"><expr_stmt><expr><name><name>L</name><index>[<expr><name>U</name></expr>]</index></name> <operator>=</operator> <name>V</name></expr> ;</expr_stmt></block></else></if>
		<if>if<condition>( <expr><name><name>L</name><index>[<expr><name>V</name></expr>]</index></name></expr> )</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>R</name><index>[<expr><name>V</name></expr>]</index></name> <operator>=</operator> <name>U</name></expr> ;</expr_stmt></block></then> <else>else <block type="pseudo"><expr_stmt><expr><name><name>L</name><index>[<expr><name>V</name></expr>]</index></name> <operator>=</operator> <name>U</name></expr> ;</expr_stmt></block></else></if>
	}</block></for>
	<decl_stmt><decl><type><name>int</name></type> <name>Nod</name></decl> ;</decl_stmt>
	<for>for<control>(<init><decl><type><specifier>register</specifier> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><operator>++</operator><name>i</name> <operator>&lt;=</operator> <name>N</name></expr> ;</condition> <incr/>)</control> <block>{
		<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>i</name> <operator>!=</operator> <name>N</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt>
		<if>if<condition>( <expr><name><name>R</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><then> <block>{
			<expr_stmt><expr><name>Nod</name> <operator>=</operator> <name>i</name></expr> ;</expr_stmt>
			<break>break ;</break>
		}</block></then></if>
	}</block></for>
	<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>Dp</name></expr></argument> , <argument><expr><literal type="number">127</literal></expr></argument> , <argument><expr><sizeof>sizeof <name>Dp</name></sizeof></expr></argument> )</argument_list></call></expr> ;</expr_stmt>
	<for>for<control>(<init><decl><type><specifier>register</specifier> <name>int</name></type> <name>a</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>a</name> <operator>&lt;</operator> <literal type="number">3</literal></expr> ;</condition> <incr><expr><operator>++</operator><name>a</name></expr></incr> )</control>
		<block type="pseudo"><for>for<control>(<init><decl><type><specifier>register</specifier> <name>int</name></type> <name>b</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>b</name> <operator>&lt;</operator> <literal type="number">3</literal></expr> ;</condition> <incr><expr><operator>++</operator><name>b</name></expr></incr> )</control>
			<block type="pseudo"><if>if<condition>( <expr><name>a</name> <operator>!=</operator> <name>b</name></expr> )</condition><then>
				<block type="pseudo"><expr_stmt><expr><name><name>Dp</name><index>[<expr><name>a</name></expr>]</index><index>[<expr><name>b</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>Cost</name><index>[<expr><name>a</name></expr>]</index><index>[<expr><name>Nod</name></expr>]</index></name> <operator>+</operator> <name><name>Cost</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><name><name>L</name><index>[<expr><name>Nod</name></expr>]</index></name></expr>]</index></name></expr> ;</expr_stmt></block></then></if></block></for></block></for>
	<for>for<control>(<init><decl><type><specifier>register</specifier> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><operator>++</operator><name>i</name> <operator>&lt;=</operator> <name>N</name></expr> ;</condition> <incr/>)</control> <block>{
		<expr_stmt><expr><name><name>Vis</name><index>[<expr><name>Nod</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr> ;</expr_stmt>
		<if>if<condition>( <expr><name>i</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr> )</condition><then> <block>{
			<for>for<control>(<init><decl><type><specifier>register</specifier> <name>int</name></type> <name>a</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>a</name> <operator>&lt;</operator> <literal type="number">3</literal></expr> ;</condition> <incr><expr><operator>++</operator><name>a</name></expr></incr> )</control>
				<block type="pseudo"><for>for<control>(<init><decl><type><specifier>register</specifier> <name>int</name></type> <name>b</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>b</name> <operator>&lt;</operator> <literal type="number">3</literal></expr> ;</condition> <incr><expr><operator>++</operator><name>b</name></expr></incr> )</control>
					<block type="pseudo"><for>for<control>(<init><decl><type><specifier>register</specifier> <name>int</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <literal type="number">3</literal></expr> ;</condition> <incr><expr><operator>++</operator><name>c</name></expr></incr> )</control>
						<block type="pseudo"><if>if<condition>( <expr><name>a</name> <operator>!=</operator> <name>b</name> <operator>and</operator> <name>b</name> <operator>!=</operator> <name>c</name> <operator>and</operator> <name>a</name> <operator>!=</operator> <name>c</name></expr> )</condition><then>
							<block type="pseudo"><expr_stmt><expr><call><name>Checkmin</name><argument_list>( <argument><expr><name><name>Dp</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument> , <argument><expr><name><name>Dp</name><index>[<expr><name>a</name></expr>]</index><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>Cost</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>Nod</name></expr>]</index></name></expr></argument> )</argument_list></call></expr> ;</expr_stmt></block></then></if></block></for></block></for></block></for>
		}</block></then></if>
		<expr_stmt><expr><name><name>Nods</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>Nod</name></expr> ;</expr_stmt>
		<expr_stmt><expr><name>Nod</name> <operator>=</operator> <ternary><condition><expr><name><name>Vis</name><index>[<expr><name><name>L</name><index>[<expr><name>Nod</name></expr>]</index></name></expr>]</index></name></expr> ?</condition><then> <expr><name><name>R</name><index>[<expr><name>Nod</name></expr>]</index></name></expr> </then><else>: <expr><name><name>L</name><index>[<expr><name>Nod</name></expr>]</index></name></expr></else></ternary></expr> ;</expr_stmt>
	}</block></for>
	<decl_stmt><decl><type><name>int</name></type> <name>Ans</name> <init>= <expr><literal type="number">1ll</literal> <operator>&lt;&lt;</operator> <literal type="number">60</literal></expr></init></decl> , <decl><type ref="prev"/><name>A</name></decl> , <decl><type ref="prev"/><name>B</name></decl> ;</decl_stmt>
	<for>for<control>(<init><decl><type><specifier>register</specifier> <name>int</name></type> <name>a</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>a</name> <operator>&lt;</operator> <literal type="number">3</literal></expr> ;</condition> <incr><expr><operator>++</operator><name>a</name></expr></incr> )</control>
		<block type="pseudo"><for>for<control>(<init><decl><type><specifier>register</specifier> <name>int</name></type> <name>b</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>b</name> <operator>&lt;</operator> <literal type="number">3</literal></expr> ;</condition> <incr><expr><operator>++</operator><name>b</name></expr></incr> )</control>
			<block type="pseudo"><if>if<condition>( <expr><name>a</name> <operator>!=</operator> <name>b</name></expr> )</condition><then>
				<block type="pseudo"><if>if<condition>( <expr><call><name>Checkmin</name><argument_list>( <argument><expr><name>Ans</name></expr></argument> , <argument><expr><name><name>Dp</name><index>[<expr><name>a</name></expr>]</index><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>N</name></expr>]</index></name></expr></argument> )</argument_list></call></expr> )</condition><then> <block>{
					<expr_stmt><expr><name>A</name> <operator>=</operator> <name>a</name></expr> ;</expr_stmt>
					<expr_stmt><expr><name>B</name> <operator>=</operator> <name>b</name></expr> ;</expr_stmt>
				}</block></then></if></block></then></if></block></for></block></for>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>Ans</name> <operator>&lt;&lt;</operator> <name>endl</name></expr> ;</expr_stmt>
	<expr_stmt><expr><name><name>Col</name><index>[<expr><name><name>Nods</name><index>[<expr><name>N</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>B</name></expr> ;</expr_stmt>
	<expr_stmt><expr><name><name>Col</name><index>[<expr><name><name>Nods</name><index>[<expr><name>N</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>A</name></expr> ;</expr_stmt>
	<for>for<control>(<init><decl><type><specifier>register</specifier> <name>int</name></type> <name>i</name> <init>= <expr><name>N</name> <operator>-</operator> <literal type="number">2</literal></expr></init></decl> ;</init> <condition><expr><name>i</name></expr> ;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr> )</control> <block>{
		<expr_stmt><expr><name><name>Col</name><index>[<expr><name><name>Nods</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal> <operator>-</operator> <name>A</name> <operator>-</operator> <name>B</name></expr> ;</expr_stmt>
		<expr_stmt><expr><name>B</name> <operator>=</operator> <name>A</name></expr> ;</expr_stmt>
		<expr_stmt><expr><name>A</name> <operator>=</operator> <name><name>Col</name><index>[<expr><name><name>Nods</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr> ;</expr_stmt>
	}</block></for>
	<for>for<control>(<init><decl><type><specifier>register</specifier> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><operator>++</operator><name>i</name> <operator>&lt;=</operator> <name>N</name></expr> ;</condition> <incr/>)</control>
		<block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">"%d "</literal></expr></argument> , <argument><expr><name><name>Col</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt></block></for>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>endl</name></expr> ;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr> ;</return>
}</block></function></unit>
