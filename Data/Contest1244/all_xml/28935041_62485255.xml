<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28935041_62485255.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;functional&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;deque&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nmax_def</name></cpp:macro> <cpp:value>110000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Cmax_def</name></cpp:macro> <cpp:value>2200</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int (i)=0;(i)&lt;(n);(i)++)</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>pll</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>vl</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>graph_from1</name></cpp:macro> <cpp:value>true</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>graph_tree</name></cpp:macro> <cpp:value>true</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>graph_weight</name></cpp:macro> <cpp:value>false</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>graph_digraph</name></cpp:macro> <cpp:value>false</cpp:value></cpp:define>

<class>class <name>Graph_func</name>
<block>{<private type="default">
</private><public>public:
	<decl_stmt><decl><type><name>int</name></type> <name>Vnum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>Enum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>edgelist</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>edgeweight</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>adjlist</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>adjlistweight</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>adjnum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vl</name></expr></argument>&gt;</argument_list></name></type> <name>vertex_costs</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>xdist</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></type> <name>x_visited</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>x_prqarr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></type> <name>x_filled</name></decl>;</decl_stmt>

	<function_decl><type><name>void</name></type> <name>read_edge</name><parameter_list>()</parameter_list>;</function_decl>
	<function_decl><type><name>void</name></type> <name>adjini</name><parameter_list>()</parameter_list>;</function_decl>
	<function_decl><type><name>void</name></type> <name>visited_ini</name><parameter_list>()</parameter_list>;</function_decl>
	<function_decl><type><name>void</name></type> <name>adjsort</name><parameter_list>()</parameter_list>;</function_decl>
	<function_decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></type> <name>graph_num_BFS</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>BFS_ini</name></decl></parameter>, <parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></type> <name>filled</name></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><name>int</name></type> <name>graph_num</name><parameter_list>()</parameter_list>;</function_decl>
	<function_decl><type><name>void</name></type> <name>graph_BFS</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>BFS_ini</name></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><name>void</name></type> <name>graph_DFS</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>DFS_ini</name></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><name>void</name></type> <name>xydist_fill</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>dist_tmp</name></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><name>void</name></type> <name>xydist_tree</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>dist_tmp</name></decl></parameter>)</parameter_list>;</function_decl>   <comment type="line">// ex. xydist_tree(3, 0)</comment>
	<function_decl><type><name>void</name></type> <name>xydist</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>;</function_decl>   <comment type="line">// ex. xydist(3, 0)</comment>
	<function_decl><type><name>ll</name></type> <name>diameter</name><parameter_list>()</parameter_list>;</function_decl>
	<function_decl><type><name>int</name></type> <name>leaf</name><parameter_list>()</parameter_list>;</function_decl>

	<decl_stmt><decl><type><name>bool</name></type> <name>xydist_def</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>can</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>vl</name></type> <name>colorlist</name></decl>;</decl_stmt>

</public>}</block>;</class>

<function><type><name>void</name></type> <name><name>Graph_func</name><operator>::</operator><name>read_edge</name></name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>Vnum</name></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>graph_tree</name></expr>)</condition><then>
		<block type="pseudo"><expr_stmt><expr><name>Enum</name> <operator>=</operator> <name>Vnum</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then><comment type="line">// graph</comment>
	<else>else
		<block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>Enum</name></expr>;</expr_stmt></block></else></if>
	<expr_stmt><expr><call><name><name>edgelist</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>Enum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>edgeweight</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>Enum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>adjnum</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>Vnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>xdist</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>Vnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>adjlist</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>Vnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>graph_weight</name></expr>)</condition><then>
		<block type="pseudo"><expr_stmt><expr><call><name><name>adjlistweight</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>Vnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
	<expr_stmt><expr><call><name><name>colorlist</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>Vnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>rep</name><argument_list>(<argument>i</argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro> <block>{
		<decl_stmt><decl><type><name>vl</name></type> <name>ctmp</name></decl>;</decl_stmt>
		<macro><name>rep</name><argument_list>(<argument>j</argument>, <argument>Vnum</argument>)</argument_list></macro> <block>{
			<decl_stmt><decl><type><name>ll</name></type> <name>c</name></decl>;</decl_stmt>
			<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>c</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>ctmp</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block>
		<expr_stmt><expr><call><name><name>vertex_costs</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>ctmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>Enum</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<if>if <condition>(<expr><name>graph_weight</name></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>edgelist</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>&gt;&gt;</operator> <name><name>edgelist</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name> <operator>&gt;&gt;</operator> <name><name>edgeweight</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></then>
		<else>else
			<block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>edgelist</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>&gt;&gt;</operator> <name><name>edgelist</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr>;</expr_stmt></block></else></if>
		<if>if <condition>(<expr><name>graph_from1</name></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name><name>edgelist</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name><operator>--</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>edgelist</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name><operator>--</operator></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
	<return>return;</return>
}</block></function>

<function><type><name>void</name></type> <name><name>Graph_func</name><operator>::</operator><name>adjini</name></name><parameter_list>()</parameter_list>
<block>{
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>Vnum</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><name><name>adjnum</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></for>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>Enum</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name><name>edgelist</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name><name>edgelist</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>adjlist</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><operator>!</operator><name>graph_digraph</name></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name><name>adjlist</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
		<if>if <condition>(<expr><name>graph_weight</name></expr>)</condition><then>
		<block>{
			<decl_stmt><decl><type><name>ll</name></type> <name>xyweight</name> <init>= <expr><name><name>edgeweight</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name><name>adjlistweight</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>xyweight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if <condition>(<expr><operator>!</operator><name>graph_digraph</name></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><name><name>adjlistweight</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>xyweight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
		}</block></then></if>
		<expr_stmt><expr><name><name>adjnum</name><index>[<expr><name>x</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
		<if>if <condition>(<expr><operator>!</operator><name>graph_digraph</name></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name><name>adjnum</name><index>[<expr><name>y</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block></then></if>
	}</block></for>
	<expr_stmt><expr><call><name><name>x_visited</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>Vnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>Vnum</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><name><name>x_visited</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt></block></for>

	<return>return;</return>
}</block></function>

<function><type><name>void</name></type> <name><name>Graph_func</name><operator>::</operator><name>visited_ini</name></name><parameter_list>()</parameter_list>
<block>{
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>Vnum</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><name><name>x_visited</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt></block></for>
}</block></function>

<function><type><name>void</name></type> <name><name>Graph_func</name><operator>::</operator><name>adjsort</name></name><parameter_list>()</parameter_list>
<block>{
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>Vnum</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>adjlist</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>adjlist</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>less</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<return>return;</return>
}</block></function>

<function><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></type> <name><name>Graph_func</name><operator>::</operator><name>graph_num_BFS</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>BFS_ini</name></decl></parameter>, <parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></type> <name>filled</name></decl></parameter>)</parameter_list> <comment type="line">// ex. graph_num_BFS(i, filled);</comment>
<block>{
	<expr_stmt><expr><call><name><name>x_prqarr</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>BFS_ini</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>x_visited</name><index>[<expr><name>BFS_ini</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>

	<while>while <condition>(<expr><operator>!</operator><call><name><name>x_prqarr</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>Ntmp</name> <init>= <expr><call><name><name>x_prqarr</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>a</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>a</name> <operator>&lt;</operator> <name>Ntmp</name></expr>;</condition> <incr><expr><name>a</name><operator>++</operator></expr></incr>)</control>
		<block>{
			<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name><name>x_prqarr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>x_prqarr</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>x_prqarr</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>adjnum</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block>{
				<decl_stmt><decl><type><name>int</name></type> <name>x_new</name> <init>= <expr><name><name>adjlist</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><operator>!</operator><name><name>x_visited</name><index>[<expr><name>x_new</name></expr>]</index></name></expr>)</condition><then>
				<block>{
					<expr_stmt><expr><call><name><name>x_prqarr</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>x_new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>x_visited</name><index>[<expr><name>x_new</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>filled</name><index>[<expr><name>x_new</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
				}</block></then></if>
			}</block></for>
		}</block></for>
	}</block></while>
	<return>return <expr><name>filled</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name><name>Graph_func</name><operator>::</operator><name>graph_num</name></name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>anstmp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></type> <name>filled</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name>filled</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>Vnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>Vnum</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><name><name>filled</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt></block></for>
	<decl_stmt><decl><type><name>bool</name></type> <name>end</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><operator>!</operator><name>end</name></expr>)</condition>
	<block>{
		<if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>Vnum</name></expr>)</condition><then>
			<block type="pseudo"><break>break;</break></block></then></if>
		<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition>
		<block>{
			<if>if <condition>(<expr><operator>!</operator><name><name>filled</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
				<block type="pseudo"><break>break;</break></block></then></if>
			<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
			<if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>Vnum</name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name>end</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
				<break>break;</break>
			}</block></then></if>
		}</block></while>
		<if>if <condition>(<expr><name>end</name></expr>)</condition><then>
			<block type="pseudo"><break>break;</break></block></then></if>
		<expr_stmt><expr><name><name>filled</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>filled</name> <operator>=</operator> <call><name>graph_num_BFS</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>filled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>anstmp</name><operator>++</operator></expr>;</expr_stmt>
	}</block></while>
	<return>return <expr><name>anstmp</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name><name>Graph_func</name><operator>::</operator><name>graph_BFS</name></name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>BFS_ini</name></decl></parameter>)</parameter_list>
<block>{
	<expr_stmt><expr><call><name><name>x_prqarr</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>BFS_ini</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>x_visited</name><index>[<expr><name>BFS_ini</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<while>while <condition>(<expr><operator>!</operator><call><name><name>x_prqarr</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>Ntmp</name> <init>= <expr><call><name><name>x_prqarr</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>a</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>a</name> <operator>&lt;</operator> <name>Ntmp</name></expr>;</condition> <incr><expr><name>a</name><operator>++</operator></expr></incr>)</control>
		<block>{
			<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name><name>x_prqarr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name><name>colorlist</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>count</name> <operator>%</operator> <literal type="number">3</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>x_prqarr</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>x_prqarr</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>adjnum</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block>{
				<decl_stmt><decl><type><name>int</name></type> <name>x_new</name> <init>= <expr><name><name>adjlist</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><operator>!</operator><name><name>x_visited</name><index>[<expr><name>x_new</name></expr>]</index></name></expr>)</condition><then>
				<block>{
					<expr_stmt><expr><call><name><name>x_prqarr</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>x_new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>x_visited</name><index>[<expr><name>x_new</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
				}</block></then></if>
			}</block></for>
		}</block></for>
	}</block></while>
	<return>return;</return>
}</block></function>

<function><type><name>void</name></type> <name><name>Graph_func</name><operator>::</operator><name>graph_DFS</name></name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>DFS_ini</name></decl></parameter>)</parameter_list>
<block>{
	<expr_stmt><expr><call><name><name>x_prqarr</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>DFS_ini</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>x_visited</name><index>[<expr><name>DFS_ini</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>xdist</name><index>[<expr><name>DFS_ini</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<while>while <condition>(<expr><operator>!</operator><call><name><name>x_prqarr</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>Ntmp</name> <init>= <expr><call><name><name>x_prqarr</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>a</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>a</name> <operator>&lt;</operator> <name>Ntmp</name></expr>;</condition> <incr><expr><name>a</name><operator>++</operator></expr></incr>)</control>
		<block>{
			<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name><name>x_prqarr</name><index>[<expr><call><name><name>x_prqarr</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>x_prqarr</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>adjnum</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block>{
				<decl_stmt><decl><type><name>int</name></type> <name>x_new</name> <init>= <expr><name><name>adjlist</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><operator>!</operator><name><name>x_visited</name><index>[<expr><name>x_new</name></expr>]</index></name></expr>)</condition><then>
				<block>{
					<expr_stmt><expr><name><name>xdist</name><index>[<expr><name>x_new</name></expr>]</index></name> <operator>=</operator> <name><name>xdist</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>x_prqarr</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>x_new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>x_visited</name><index>[<expr><name>x_new</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
				}</block></then></if>
			}</block></for>
		}</block></for>
	}</block></while>
	<return>return;</return>
}</block></function>

<function><type><name>void</name></type> <name><name>Graph_func</name><operator>::</operator><name>xydist_fill</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>dist_tmp</name></decl></parameter>)</parameter_list>
<block>{
	<expr_stmt><expr><name><name>xdist</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>dist_tmp</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>x_visited</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name><name>Graph_func</name><operator>::</operator><name>xydist_tree</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>dist_tmp</name></decl></parameter>)</parameter_list>  <comment type="line">// ex. xydist_tree(3, 0), DFS</comment>
<block>{
	<if>if <condition>(<expr><operator>!</operator><name>xydist_def</name></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><name>xydist_def</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>xydist_fill</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>adjnum</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>x_new</name> <init>= <expr><name><name>adjlist</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><operator>!</operator><name><name>x_visited</name><index>[<expr><name>x_new</name></expr>]</index></name></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><call><name>xydist_fill</name><argument_list>(<argument><expr><name>x_new</name></expr></argument>, <argument><expr><name>dist_tmp</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>xydist_tree</name><argument_list>(<argument><expr><name>x_new</name></expr></argument>, <argument><expr><name>dist_tmp</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
	<return>return;</return>
}</block></function>

<function><type><name>void</name></type> <name><name>Graph_func</name><operator>::</operator><name>xydist</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>  <comment type="line">// ex. xydist(3), Dijkstra's algorithm</comment>
<block>{
	<decl_stmt><decl><type><name><name>priority_queue</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></expr></argument>, <argument><expr><name><name>greater</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>xdist_que</name></decl>;</decl_stmt> <comment type="line">//Alive_vertices</comment>
	<decl_stmt><decl><type><name>ll</name></type> <name>max_tmp</name> <init>= <expr><call><name>pow</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>Vnum</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><name><name>xdist</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>max_tmp</name></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><name><name>xdist</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>xdist_que_tmp</name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>xdist_que_tmp</name><operator>.</operator><name>first</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>xdist_que_tmp</name><operator>.</operator><name>second</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>xdist_que</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>xdist_que_tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><operator>!</operator><call><name><name>xdist_que</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{
		<expr_stmt><expr><name>xdist_que_tmp</name> <operator>=</operator> <call><name><name>xdist_que</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>xdist_que</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>ll</name></type> <name>xdist_tmp</name> <init>= <expr><name><name>xdist_que_tmp</name><operator>.</operator><name>first</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>x_tmp</name> <init>= <expr><name><name>xdist_que_tmp</name><operator>.</operator><name>second</name></name></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name><name>xdist</name><index>[<expr><name>x_tmp</name></expr>]</index></name> <operator>==</operator> <name>xdist_tmp</name></expr>)</condition><then>
		<block>{
			<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>adjnum</name><index>[<expr><name>x_tmp</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block>{
				<decl_stmt><decl><type><name>int</name></type> <name>x_new</name> <init>= <expr><name><name>adjlist</name><index>[<expr><name>x_tmp</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>ll</name></type> <name>dist_diff</name></decl>;</decl_stmt>
				<if>if <condition>(<expr><name>graph_weight</name></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><name>dist_diff</name> <operator>=</operator> <name><name>adjlistweight</name><index>[<expr><name>x_tmp</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></then>
				<else>else <block type="pseudo"><expr_stmt><expr><name>dist_diff</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
				<if>if <condition>(<expr><name><name>xdist</name><index>[<expr><name>x_new</name></expr>]</index></name> <operator>&gt;</operator> <name><name>xdist</name><index>[<expr><name>x_tmp</name></expr>]</index></name> <operator>+</operator> <name>dist_diff</name></expr>)</condition><then>
				<block>{
					<expr_stmt><expr><name><name>xdist</name><index>[<expr><name>x_new</name></expr>]</index></name> <operator>=</operator> <name><name>xdist</name><index>[<expr><name>x_tmp</name></expr>]</index></name> <operator>+</operator> <name>dist_diff</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>xdist_que_tmp</name><operator>.</operator><name>first</name></name> <operator>=</operator> <name><name>xdist</name><index>[<expr><name>x_new</name></expr>]</index></name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>xdist_que_tmp</name><operator>.</operator><name>second</name></name> <operator>=</operator> <name>x_new</name></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>xdist_que</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>xdist_que_tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
			}</block></for>
		}</block></then></if>
	}</block></while>
}</block></function>

<function><type><name>ll</name></type> <name><name>Graph_func</name><operator>::</operator><name>diameter</name></name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>ll</name></type> <name>anstmp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>anstmp_i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>longest</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>xydist_tree</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>Vnum</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<if>if <condition>(<expr><name><name>xdist</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name>anstmp</name></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>anstmp</name> <operator>=</operator> <name><name>xdist</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>anstmp_i</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
	<expr_stmt><expr><name><name>longest</name><operator>.</operator><name>first</name></name> <operator>=</operator> <name>anstmp_i</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>anstmp</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>anstmp_i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>visited_ini</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>xydist_tree</name><argument_list>(<argument><expr><name><name>longest</name><operator>.</operator><name>first</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>Vnum</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<if>if <condition>(<expr><name><name>xdist</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name>anstmp</name></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>anstmp</name> <operator>=</operator> <name><name>xdist</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>anstmp_i</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
	<expr_stmt><expr><name><name>longest</name><operator>.</operator><name>second</name></name> <operator>=</operator> <name>anstmp_i</name></expr>;</expr_stmt>
	<return>return <expr><name>anstmp</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name><name>Graph_func</name><operator>::</operator><name>leaf</name></name><parameter_list>()</parameter_list> <comment type="line">// included adjini()</comment>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>anstmp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>Vnum</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><name><name>adjnum</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></for>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>Enum</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name><name>edgelist</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name><name>edgelist</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>adjlist</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>adjlist</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>adjnum</name><index>[<expr><name>x</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>adjnum</name><index>[<expr><name>y</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
	}</block></for>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>Vnum</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<if>if <condition>(<expr><name><name>adjnum</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>can</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
	}</block></for>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>Vnum</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<if>if <condition>(<expr><name><name>adjnum</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><name>i</name></expr>;</return></block></then></if>
	}</block></for>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>Graph_func</name></type> <name>graph</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>ans</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name>graph</name><operator>.</operator><name>read_edge</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>graph</name><operator>.</operator><name>adjini</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>Vnum</name> <init>= <expr><name><name>graph</name><operator>.</operator><name>Vnum</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>Enum</name> <init>= <expr><name><name>graph</name><operator>.</operator><name>Enum</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>leaf</name> <init>= <expr><call><name><name>graph</name><operator>.</operator><name>leaf</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name>graph</name><operator>.</operator><name>graph_BFS</name></name><argument_list>(<argument><expr><name>leaf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ans</name> <operator>=</operator> <call><name>pow</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>vi</name></type> <name>anslist</name></decl>;</decl_stmt>
	<macro><name>rep</name><argument_list>(<argument>i</argument>, <argument><literal type="number">6</literal></argument>)</argument_list></macro> <block>{
		<decl_stmt><decl><type><name>ll</name></type> <name>anstmp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>vi</name></type> <name>new_color</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>new_color</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<switch>switch <condition>(<expr><name>i</name></expr>)</condition>
		<block>{
		<case>case <expr><literal type="number">0</literal></expr>:</case>
			<expr_stmt><expr><name><name>new_color</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>new_color</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>new_color</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="number">1</literal></expr>:</case>
			<expr_stmt><expr><name><name>new_color</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>new_color</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>new_color</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="number">2</literal></expr>:</case>
			<expr_stmt><expr><name><name>new_color</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>new_color</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>new_color</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="number">3</literal></expr>:</case>
			<expr_stmt><expr><name><name>new_color</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>new_color</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>new_color</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="number">4</literal></expr>:</case>
			<expr_stmt><expr><name><name>new_color</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>new_color</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>new_color</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="number">5</literal></expr>:</case>
			<expr_stmt><expr><name><name>new_color</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>new_color</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>new_color</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<break>break;</break>
		}</block></switch>
		<macro><name>rep</name><argument_list>(<argument>x</argument>, <argument>Vnum</argument>)</argument_list></macro> <block>{
			<decl_stmt><decl><type><name>int</name></type> <name>colortmp</name> <init>= <expr><operator>(</operator><name><name>new_color</name><index>[<expr><name><name>graph</name><operator>.</operator><name>colorlist</name><index>[<expr><name>x</name></expr>]</index></name></expr>]</index></name><operator>)</operator><operator>%</operator><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>anstmp</name> <operator>+=</operator> <name><name>graph</name><operator>.</operator><name>vertex_costs</name><index>[<expr><name>colortmp</name></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
		}</block>
		<if>if <condition>(<expr><name>ans</name> <operator>&gt;</operator> <name>anstmp</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>ans</name> <operator>=</operator> <name>anstmp</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>anslist</name> <operator>=</operator> <name>new_color</name></expr>;</expr_stmt>
		}</block></then></if>
	}</block>
	<if>if <condition>(<expr><operator>!</operator><name><name>graph</name><operator>.</operator><name>can</name></name></expr>)</condition><then>
		<block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"-1"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></then>
	<else>else <block>{
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
		<macro><name>rep</name><argument_list>(<argument>x</argument>, <argument>Vnum</argument>)</argument_list></macro> <block>{
			<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>anslist</name><index>[<expr><name><name>graph</name><operator>.</operator><name>colorlist</name><index>[<expr><name>x</name></expr>]</index></name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt>
		}</block>
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
	}</block></else></if>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
