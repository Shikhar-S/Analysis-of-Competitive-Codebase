<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28936371_62493812.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ld</name></cpp:macro> <cpp:value>double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ull</name></cpp:macro> <cpp:value>unsigned long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;int,int &gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>iiii</name></cpp:macro> <cpp:value>pair&lt;int,pii &gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INF</name></cpp:macro> <cpp:value>1000000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int (i)=0;(i)&lt;(x);(i)++)</cpp:value></cpp:define>
<function><specifier>inline</specifier> <type><name>int</name></type> <name>getint</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>int</name></type> <name>x</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>p</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt><decl_stmt><decl><type><name>char</name></type> <name>c</name><init>=<expr><call><name>getchar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><name>c</name><operator>&lt;=</operator><literal type="number">32</literal></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
	<if>if<condition>(<expr><name>c</name><operator>==</operator><literal type="number">45</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>p</name><operator>=</operator><operator>-</operator><name>p</name></expr><operator>,</operator><expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
	<while>while <condition>(<expr><name>c</name><operator>&gt;</operator><literal type="number">32</literal></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>x</name><operator>=</operator><name>x</name><operator>*</operator><literal type="number">10</literal><operator>+</operator><name>c</name><operator>-</operator><literal type="number">48</literal></expr><operator>,</operator><expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
	<return>return <expr><name>x</name><operator>*</operator><name>p</name></expr>;</return>
}</block></function>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<comment type="line">//ruogu</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name><init>=<expr><literal type="number">1e5</literal><operator>+</operator><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>c</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name><name>a</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>deque</name><argument_list type="generic">&lt;<argument><expr><name>pii</name></expr></argument> &gt;</argument_list></name></type><name>dq</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>k</name></decl>;</decl_stmt>
<comment type="line">//</comment>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><name>n</name><operator>=</operator><call><name>getint</name><argument_list>()</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>k</name></expr>;</expr_stmt>
	<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument>n</argument>)</argument_list></macro><expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><call><name>getint</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument>n</argument>)</argument_list></macro><expr_stmt><expr><call><name><name>id</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>id</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>id</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>id</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><call><name>unique</name><argument_list>(<argument><expr><call><name><name>id</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>id</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>-</operator><call><name><name>id</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument>n</argument>)</argument_list></macro><expr_stmt><expr><name><name>c</name><index>[<expr><call><name>lower_bound</name><argument_list>(<argument><expr><call><name><name>id</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>id</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>-</operator><call><name><name>id</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
	<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument>id.size()</argument>)</argument_list></macro><expr_stmt><expr><call><name><name>dq</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name><name>id</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while<condition>(<expr><call><name><name>dq</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&gt;</operator><literal type="number">1</literal><operator>&amp;&amp;</operator><name>k</name></expr>)</condition><block>{
	<comment type="line">//	cout&lt;&lt;k&lt;&lt;endl;</comment>
		<decl_stmt><decl><type><name>int</name></type> <name>mn</name><init>=<expr><call><name>min</name><argument_list>(<argument><expr><name><name>dq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>second</name></expr></argument>,<argument><expr><call><name><name>dq</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>second</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>k</name><operator>&lt;</operator><name>mn</name></expr>)</condition><then><block type="pseudo"><break>break;</break></block></then></if>
		<if>if<condition>(<expr><name><name>dq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>second</name><operator>==</operator><name>mn</name></expr>)</condition><then><block>{
			
			<decl_stmt><decl><type><name>ll</name></type> <name>x</name><init>=<expr><call><name>min</name><argument_list>(<argument><expr><name>k</name><operator>/</operator><name><name>dq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>second</name></expr></argument>,<argument><expr><literal type="number">1ll</literal><operator>*</operator><name><name>dq</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>first</name><operator>-</operator><name><name>dq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>first</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="line">//	cout&lt;&lt;2&lt;&lt;endl;</comment>
			<expr_stmt><expr><name><name>dq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>first</name><operator>+=</operator><name>x</name></expr>;</expr_stmt><expr_stmt><expr><name>k</name><operator>-=</operator><literal type="number">1ll</literal><operator>*</operator><name>x</name><operator>*</operator><name><name>dq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>second</name></expr>;</expr_stmt>
			<if>if<condition>(<expr><name><name>dq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>first</name><operator>==</operator><name><name>dq</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>first</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name><name>dq</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>second</name><operator>+=</operator><name><name>dq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>second</name></expr><operator>,</operator><expr><call><name><name>dq</name><operator>.</operator><name>pop_front</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
		<comment type="line">//	cout&lt;&lt;x&lt;&lt;endl;</comment>
		}</block></then>
		<else>else<block>{
			<decl_stmt><decl><type><name>ll</name></type> <name>x</name><init>=<expr><call><name>min</name><argument_list>(<argument><expr><name>k</name><operator>/</operator><name><name>dq</name><index>[<expr><call><name><name>dq</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>second</name></expr></argument>,<argument><expr><literal type="number">1ll</literal><operator>*</operator><name><name>dq</name><index>[<expr><call><name><name>dq</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>first</name><operator>-</operator><name><name>dq</name><index>[<expr><call><name><name>dq</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>first</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name><name>dq</name><index>[<expr><call><name><name>dq</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>first</name><operator>-=</operator><name>x</name></expr>;</expr_stmt><expr_stmt><expr><name>k</name><operator>-=</operator><literal type="number">1ll</literal><operator>*</operator><name>x</name><operator>*</operator><name><name>dq</name><index>[<expr><call><name><name>dq</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>second</name></expr>;</expr_stmt>
			<if>if<condition>(<expr><name><name>dq</name><index>[<expr><call><name><name>dq</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>first</name><operator>==</operator><name><name>dq</name><index>[<expr><call><name><name>dq</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>first</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name><name>dq</name><index>[<expr><call><name><name>dq</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>second</name><operator>+=</operator><name><name>dq</name><index>[<expr><call><name><name>dq</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>second</name></expr><operator>,</operator><expr><call><name><name>dq</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
		}</block></else></if>
	}</block></while>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>,<argument><expr><call><name><name>dq</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>first</name><operator>-</operator><name><name>dq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
