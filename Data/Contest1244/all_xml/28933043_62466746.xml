<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28933043_62466746.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fr</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=x;i&lt;y;i++)</cpp:value></cpp:define>
<comment type="line">//#define int long long</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name><init>=<expr><literal type="number">1e6</literal></expr></init></decl>,<decl><type ref="prev"/><name>INF</name><init>=<expr><literal type="number">1e9</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>mas</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>,<decl><type ref="prev"/><name>d</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>a</name><operator>&gt;&gt;</operator><name>b</name><operator>&gt;&gt;</operator><name>c</name><operator>&gt;&gt;</operator><name>d</name><operator>&gt;&gt;</operator><name>k</name></expr>;</expr_stmt>
	<if>if<condition>(<expr><name>a</name><operator>/</operator><name>c</name><operator>+</operator><call>(<name>int</name>)<argument_list>(<argument><expr><name>a</name><operator>%</operator><name>c</name><operator>&gt;</operator><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>+</operator><name>b</name><operator>/</operator><name>d</name><operator>+</operator><call><name>int</name><argument_list>(<argument><expr><name>b</name><operator>%</operator><name>d</name><operator>&gt;</operator><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>&lt;=</operator><name>k</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>(</operator><name>a</name><operator>/</operator><name>c</name><operator>)</operator><operator>+</operator><call><name>int</name><argument_list>(<argument><expr><name>a</name><operator>%</operator><name>c</name><operator>&gt;</operator><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>&lt;&lt;</operator><literal type="char">' '</literal><operator>&lt;&lt;</operator><name>b</name><operator>/</operator><name>d</name><operator>+</operator><call><name>int</name><argument_list>(<argument><expr><name>b</name><operator>%</operator><name>d</name><operator>&gt;</operator><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt></block></then>
	<else>else <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>-</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt></block></else></if>
}</block></function>
 <function><name>main</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition><block type="pseudo"><expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
}</block></function></unit>
