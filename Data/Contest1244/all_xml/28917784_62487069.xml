<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28917784_62487069.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_IO</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>N</name><init>=<expr><literal type="number">1e5</literal><operator>+</operator><literal type="number">9</literal></expr></init></decl>,<decl><type ref="prev"/><name>inf</name><init>=<expr><literal type="number">1e18</literal></expr></init></decl>,<decl><type ref="prev"/><name>mod</name><init>=<expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type><name><name>vc</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>cost</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name>n</name></decl>,<decl><type ref="prev"/><name><name>col</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>ll</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>id</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>p</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>c</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>lv</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>ret</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>lv</name><operator>%</operator><literal type="number">3</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>ret</name><operator>=</operator><name><name>cost</name><index>[<expr><name>a</name></expr>]</index><index>[<expr><name>id</name></expr>]</index></name></expr>;</expr_stmt></block></then>
    <elseif>else <if>if<condition>(<expr><name>lv</name><operator>%</operator><literal type="number">3</literal><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>ret</name><operator>=</operator><name><name>cost</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>id</name></expr>]</index></name></expr>;</expr_stmt></block></then></if></elseif>
    <else>else
        <block type="pseudo"><expr_stmt><expr><name>ret</name><operator>=</operator><name><name>cost</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>id</name></expr>]</index></name></expr>;</expr_stmt></block></else></if>
    <for>for<control>(<init><decl><type><name>auto</name></type> <name>x</name><range>: <expr><name><name>vc</name><index>[<expr><name>id</name></expr>]</index></name></expr></range></decl></init>)</control>
    <block>{
        <if>if<condition>(<expr><name>x</name><operator>==</operator><name>p</name></expr>)</condition><then>
            <block type="pseudo"><continue>continue;</continue></block></then></if>
        <expr_stmt><expr><name>ret</name><operator>+=</operator><call><name>dfs</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>id</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>lv</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <return>return <expr><name>ret</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>setcol</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>id</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>p</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>c</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>lv</name></decl></parameter>)</parameter_list>
<block>{
   <if>if<condition>(<expr><name>lv</name><operator>%</operator><literal type="number">3</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name><name>col</name><index>[<expr><name>id</name></expr>]</index></name><operator>=</operator><name>a</name></expr>;</expr_stmt></block></then>
    <elseif>else <if>if<condition>(<expr><name>lv</name><operator>%</operator><literal type="number">3</literal><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name><name>col</name><index>[<expr><name>id</name></expr>]</index></name><operator>=</operator><name>b</name></expr>;</expr_stmt></block></then></if></elseif>
    <else>else
       <block type="pseudo"><expr_stmt><expr><name><name>col</name><index>[<expr><name>id</name></expr>]</index></name><operator>=</operator><name>c</name></expr>;</expr_stmt></block></else></if>
    <for>for<control>(<init><decl><type><name>auto</name></type> <name>x</name><range>: <expr><name><name>vc</name><index>[<expr><name>id</name></expr>]</index></name></expr></range></decl></init>)</control>
    <block>{
        <if>if<condition>(<expr><name>x</name><operator>==</operator><name>p</name></expr>)</condition><then>
            <block type="pseudo"><continue>continue;</continue></block></then></if>
        <expr_stmt><expr><call><name>setcol</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>id</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>lv</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><name>_IO</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>cost</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>cost</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>cost</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>u</name></decl>,<decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>u</name><operator>&gt;&gt;</operator><name>v</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>vc</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>vc</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <decl_stmt><decl><type><name>ll</name></type> <name>mx</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>cnt</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>id</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>p</name><init>=<expr><name><name>vc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>mx</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>mx</name></expr></argument>,<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr><name><name>vc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>id</name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></then></if>
    }</block></for>

    <if>if<condition>(<expr><name>mx</name><operator>&gt;</operator><literal type="number">2</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>-</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="string">"\n"</literal></expr>;</expr_stmt></block></then>
    <else>else
    <block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>mn</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>c1</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>c2</name><init>=<expr><literal type="number">2</literal></expr></init></decl>,<decl><type ref="prev"/><name>c3</name><init>=<expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ll</name></type> <name>x</name><init>=<expr><call><name>dfs</name><argument_list>(<argument><expr><name>id</name></expr></argument>,<argument><expr><name>id</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>mn</name><operator>=</operator><name>x</name></expr>;</expr_stmt>

        <expr_stmt><expr><name>x</name><operator>=</operator><call><name>dfs</name><argument_list>(<argument><expr><name>id</name></expr></argument>,<argument><expr><name>id</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if<condition>(<expr><name>x</name><operator>&lt;</operator><name>mn</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>mn</name><operator>=</operator><name>x</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>c1</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt><expr_stmt><expr><name>c2</name><operator>=</operator><literal type="number">3</literal></expr>;</expr_stmt><expr_stmt><expr><name>c3</name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name>x</name><operator>=</operator><call><name>dfs</name><argument_list>(<argument><expr><name>id</name></expr></argument>,<argument><expr><name>id</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>x</name><operator>&lt;</operator><name>mn</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>mn</name><operator>=</operator><name>x</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>c1</name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt><expr_stmt><expr><name>c2</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt><expr_stmt><expr><name>c3</name><operator>=</operator><literal type="number">3</literal></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name>x</name><operator>=</operator><call><name>dfs</name><argument_list>(<argument><expr><name>id</name></expr></argument>,<argument><expr><name>id</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>x</name><operator>&lt;</operator><name>mn</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>mn</name><operator>=</operator><name>x</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>c1</name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt><expr_stmt><expr><name>c2</name><operator>=</operator><literal type="number">3</literal></expr>;</expr_stmt><expr_stmt><expr><name>c3</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name>x</name><operator>=</operator><call><name>dfs</name><argument_list>(<argument><expr><name>id</name></expr></argument>,<argument><expr><name>id</name></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>x</name><operator>&lt;</operator><name>mn</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>mn</name><operator>=</operator><name>x</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>c1</name><operator>=</operator><literal type="number">3</literal></expr>;</expr_stmt><expr_stmt><expr><name>c2</name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt><expr_stmt><expr><name>c3</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name>x</name><operator>=</operator><call><name>dfs</name><argument_list>(<argument><expr><name>id</name></expr></argument>,<argument><expr><name>id</name></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>x</name><operator>&lt;</operator><name>mn</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>mn</name><operator>=</operator><name>x</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>c1</name><operator>=</operator><literal type="number">3</literal></expr>;</expr_stmt><expr_stmt><expr><name>c2</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt><expr_stmt><expr><name>c3</name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>mn</name><operator>&lt;&lt;</operator><literal type="string">"\n"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setcol</name><argument_list>(<argument><expr><name>id</name></expr></argument>,<argument><expr><name>id</name></expr></argument>,<argument><expr><name>c1</name></expr></argument>,<argument><expr><name>c2</name></expr></argument>,<argument><expr><name>c3</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>col</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;&lt;</operator><literal type="string">" "</literal></expr>;</expr_stmt></block></for>

    }</block></else></if>


}</block></function>
</unit>
