<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28906849_62497194.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>"\n"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ss</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>trace1</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>                <cpp:value>cout&lt;&lt;#x&lt;&lt;": "&lt;&lt;x&lt;&lt;endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>trace2</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro>             <cpp:value>cout&lt;&lt;#x&lt;&lt;": "&lt;&lt;x&lt;&lt;" | "&lt;&lt;#y&lt;&lt;": "&lt;&lt;y&lt;&lt;endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>trace3</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro>          <cpp:value>cout&lt;&lt;#x&lt;&lt;":" &lt;&lt;x&lt;&lt;" | "&lt;&lt;#y&lt;&lt;": "&lt;&lt;y&lt;&lt;" | "&lt;&lt;#z&lt;&lt;": "&lt;&lt;z&lt;&lt;endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>trace4</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro>       <cpp:value>cout&lt;&lt;#a&lt;&lt;": "&lt;&lt;a&lt;&lt;" | "&lt;&lt;#b&lt;&lt;": "&lt;&lt;b&lt;&lt;" | "&lt;&lt;#c&lt;&lt;": "&lt;&lt;c&lt;&lt;" | "&lt;&lt;#d&lt;&lt;": "&lt;&lt;d&lt;&lt;endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>trace5</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter>, <parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>cout&lt;&lt;#a&lt;&lt;": "&lt;&lt;a&lt;&lt;" | "&lt;&lt;#b&lt;&lt;": "&lt;&lt;b&lt;&lt;" | "&lt;&lt;#c&lt;&lt;": "&lt;&lt;c&lt;&lt;" | "&lt;&lt;#d&lt;&lt;": "&lt;&lt;d&lt;&lt;" | "&lt;&lt;#e&lt;&lt; ": "&lt;&lt;e&lt;&lt;endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>trace6</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter>, <parameter><type><name>e</name></type></parameter>, <parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout&lt;&lt;#a&lt;&lt;": "&lt;&lt;a&lt;&lt;" | "&lt;&lt;#b&lt;&lt;": "&lt;&lt;b&lt;&lt;" | "&lt;&lt;#c&lt;&lt;": "&lt;&lt;c&lt;&lt;" | "&lt;&lt;#d&lt;&lt;": "&lt;&lt;d&lt;&lt;" | "&lt;&lt;#e&lt;&lt; ": "&lt;&lt;e&lt;&lt;" | "&lt;&lt;#f&lt;&lt;": "&lt;&lt;f&lt;&lt;endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fio</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(false);cin.tie(NULL);</cpp:value></cpp:define>

<typedef>typedef <type><name>long</name> <name>long</name> <name>int</name></type> <name>lli</name>;</typedef>
<typedef>typedef <type><name>lli</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>lli</name></expr></argument>, <argument><expr><name>lli</name></expr></argument>&gt;</argument_list></name></type> <name>plli</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vi</name></expr></argument>&gt;</argument_list></name></type> <name>vvi</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>vpii</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>lli</name></expr></argument>, <argument><expr><name>lli</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>vplli</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>lli</name></expr></argument>&gt;</argument_list></name></type> <name>vlli</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vlli</name></expr></argument>&gt;</argument_list></name></type> <name>vvlli</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name></type> <name>vc</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vc</name></expr></argument>&gt;</argument_list></name></type> <name>vvc</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></type> <name>vb</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vb</name></expr></argument>&gt;</argument_list></name></type> <name>vvb</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PI</name></cpp:macro> <cpp:value>3.141592653589793</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro> <cpp:value>(lli)(1000*1000*1000+7)</cpp:value></cpp:define>

<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>T</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <if>if <condition>(<expr><name>a</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>b</name></expr>;</return></block></then></if> <return>return <expr><call><name>gcd</name><argument_list>(<argument><expr><name>b</name> <operator>%</operator> <name>a</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>T</name></type> <name>pow</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>lli</name></type> <name>m</name></decl></parameter>)</parameter_list> <block>{<decl_stmt><decl><type><name>T</name></type> <name>ans</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> <while>while <condition>(<expr><name>b</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{ <if>if <condition>(<expr><name>b</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>ans</name> <operator>%</operator> <name>m</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>a</name> <operator>%</operator> <name>m</name><operator>)</operator><operator>)</operator> <operator>%</operator> <name>m</name></expr>;</expr_stmt></block></then></if> <expr_stmt><expr><name>b</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>a</name> <operator>%</operator> <name>m</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>a</name> <operator>%</operator> <name>m</name><operator>)</operator><operator>)</operator> <operator>%</operator> <name>m</name></expr>;</expr_stmt> }</block></while> <return>return <expr><name>ans</name> <operator>%</operator> <name>m</name></expr>;</return> }</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>tracev</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{ <for>for<control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>i</name><operator>:</operator><name>a</name></expr></init>)</control> <block>{ <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>i</name><operator>&lt;&lt;</operator><literal type="char">' '</literal></expr>;</expr_stmt> }</block></for> <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt> }</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>tracevv</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{ <for>for<control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>i</name><operator>:</operator><name>a</name></expr></init>)</control> <block>{ <expr_stmt><expr><call><name>tracev</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></for> }</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>tracevp</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{ <for>for<control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>i</name><operator>:</operator><name>a</name></expr></init>)</control> <block>{ <expr_stmt><expr><call><name>trace2</name><argument_list>(<argument><expr><name><name>i</name><operator>.</operator><name>ff</name></name></expr></argument>, <argument><expr><name><name>i</name><operator>.</operator><name>ss</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></for> <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt> }</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{

	<decl_stmt><decl><type><name>lli</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>k</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>vlli</name></type> <name>a</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>a</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>a</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>deque</name><argument_list type="generic">&lt;<argument><expr><name>plli</name></expr></argument>&gt;</argument_list></name></type> <name>q</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr> ;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<if>if<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>a</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><then><block>{
			<expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<else>else<block>{
			<decl_stmt><decl><type><name>lli</name></type> <name>occ</name> <init>= <expr><call><name><name>q</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>ss</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>occ</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
	}</block></for>
	<while>while<condition>(<expr><call><name><name>q</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block>{
		<comment type="line">// trace2(q.front().ff, q.front().ss)</comment>
		<comment type="line">// trace2(q.back().ff, q.back().ss);</comment>
		<comment type="line">// trace1(k);</comment>
		<if>if<condition>(<expr><call><name><name>q</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call><operator>.</operator><name>ss</name> <operator>&lt;=</operator> <call><name><name>q</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>ss</name> <operator>&amp;&amp;</operator> <name>k</name> <operator>&gt;=</operator> <call><name><name>q</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call><operator>.</operator><name>ss</name></expr>)</condition><then><block>{
			
			<decl_stmt><decl><type><name>plli</name></type> <name>w</name> <init>= <expr><call><name><name>q</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>pop_front</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

			<decl_stmt><decl><type><name>lli</name></type> <name>m</name> <init>= <expr><name>k</name><operator>/</operator><name><name>w</name><operator>.</operator><name>ss</name></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>lli</name></type> <name>next</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name><name>w</name><operator>.</operator><name>ff</name></name><operator>+</operator><name>m</name></expr></argument>, <argument><expr><call><name><name>q</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call><operator>.</operator><name>ff</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><name>k</name> <operator>-=</operator> <name><name>w</name><operator>.</operator><name>ss</name></name><operator>*</operator><operator>(</operator><name>next</name><operator>-</operator><name><name>w</name><operator>.</operator><name>ff</name></name><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>w</name><operator>.</operator><name>ff</name></name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
			
			<if>if<condition>(<expr><name><name>w</name><operator>.</operator><name>ff</name></name> <operator>==</operator> <call><name><name>q</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call><operator>.</operator><name>ff</name></expr>)</condition><then><block>{
				<expr_stmt><expr><name><name>w</name><operator>.</operator><name>ss</name></name> <operator>+=</operator> <call><name><name>q</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call><operator>.</operator><name>ss</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>pop_front</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push_front</name></name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then>
			<else>else<block>{
				<expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push_front</name></name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
		}</block></then>
		<elseif>else <if>if<condition>(<expr><name>k</name> <operator>&gt;=</operator> <call><name><name>q</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>ss</name></expr>)</condition><then><block>{
			<decl_stmt><decl><type><name>plli</name></type> <name>w</name> <init>= <expr><call><name><name>q</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

			<decl_stmt><decl><type><name>lli</name></type> <name>m</name> <init>= <expr><name>k</name><operator>/</operator><name><name>w</name><operator>.</operator><name>ss</name></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>lli</name></type> <name>next</name> <init>= <expr><call><name>max</name><argument_list>(<argument><expr><name><name>w</name><operator>.</operator><name>ff</name></name><operator>-</operator><name>m</name></expr></argument>, <argument><expr><call><name><name>q</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>ff</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><name>k</name> <operator>-=</operator> <name><name>w</name><operator>.</operator><name>ss</name></name><operator>*</operator><operator>(</operator><name><name>w</name><operator>.</operator><name>ff</name></name><operator>-</operator><name>next</name><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>w</name><operator>.</operator><name>ff</name></name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>

			<if>if<condition>(<expr><name><name>w</name><operator>.</operator><name>ff</name></name> <operator>==</operator> <call><name><name>q</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>ff</name></expr>)</condition><then><block>{
				<expr_stmt><expr><name><name>w</name><operator>.</operator><name>ss</name></name> <operator>+=</operator> <call><name><name>q</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>ss</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if></elseif></if>
		<if>if<condition>(<expr><name>k</name> <operator>&lt;</operator> <call><name><name>q</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call><operator>.</operator><name>ss</name> <operator>&amp;&amp;</operator> <name>k</name> <operator>&lt;</operator> <call><name><name>q</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>ss</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
	}</block></while>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name><name>q</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>ff</name><operator>-</operator><call><name><name>q</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call><operator>.</operator><name>ff</name></expr>;</expr_stmt>


	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
