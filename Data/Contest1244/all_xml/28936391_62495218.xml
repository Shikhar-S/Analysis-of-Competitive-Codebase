<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28936391_62495218.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>LL</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M</name></cpp:macro> <cpp:value>200005</cpp:value></cpp:define>
<decl_stmt><decl><type><name>char</name></type> <name><name>S</name><index>[<expr><name>M</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>vis</name><index>[<expr><name>M</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>F</name><index>[<expr><name>M</name></expr>]</index></name></decl>;</decl_stmt>
<struct>struct <name>Node</name><block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>dr</name></decl>;</decl_stmt>
</public>}</block><decl><name><name>Q</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>M</name><operator>&lt;&lt;</operator><literal type="number">3</literal></expr>]</index></name></decl>;</struct>
<function><type><name>int</name></type> <name>Col</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list><block>{
	<return>return <expr><name>c</name><operator>==</operator><literal type="char">'W'</literal></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name>int</name></type> <name><name>mark</name><index>[<expr><name>M</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name>Ti</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>K</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>K</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>a</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>b</name><init>=<expr><name>n</name></expr></init></decl>,<decl><type ref="prev"/><name>len</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>,<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if<condition>(<expr><name><name>S</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><name><name>S</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><then><block>{
		<expr_stmt><expr><name><name>vis</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name><name>vis</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>F</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name><name>F</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><call><name>Col</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<while>while<condition>(<expr><name>a</name><operator>+</operator><literal type="number">1</literal><operator>&lt;</operator><name>n</name><operator>&amp;&amp;</operator><name><name>S</name><index>[<expr><name>a</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><name><name>S</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>a</name><operator>++</operator></expr><operator>,</operator><expr><name><name>vis</name><index>[<expr><name>a</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name><name>F</name><index>[<expr><name>a</name></expr>]</index></name><operator>=</operator><call><name>Col</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></while>
		<while>while<condition>(<expr><name>b</name><operator>-</operator><literal type="number">1</literal><operator>&gt;=</operator><literal type="number">0</literal><operator>&amp;&amp;</operator><name><name>S</name><index>[<expr><name>b</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><name><name>S</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>b</name><operator>--</operator></expr><operator>,</operator><expr><name><name>vis</name><index>[<expr><name>b</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name><name>F</name><index>[<expr><name>b</name></expr>]</index></name><operator>=</operator><call><name>Col</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></while>
		<if>if<condition>(<expr><name>a</name><operator>&gt;=</operator><name>b</name></expr>)</condition><then><block type="pseudo"><return>return <expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>,<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><literal type="number">0</literal></expr>;</return></block></then></if>
		<expr_stmt><expr><name><name>Q</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><operator>++</operator><name>len</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>Node</name><operator>)</operator><block>{<expr><name>a</name></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>Q</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><operator>++</operator><name>len</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>Node</name><operator>)</operator><block>{<expr><name>b</name></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>;</expr_stmt>
	}</block></then></if>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>a</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>b</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>j</name><init>=<expr><name>i</name></expr></init></decl>;</decl_stmt>
		<while>while<condition>(<expr><name>j</name><operator>+</operator><literal type="number">1</literal><operator>&lt;</operator><name>b</name><operator>&amp;&amp;</operator><name><name>S</name><index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><name><name>S</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt></block></while>
		<if>if<condition>(<expr><name>i</name><operator>!=</operator><name>j</name></expr>)</condition><then><block>{
			<for>for<control>(<init><decl><type><name>int</name></type> <name>k</name><init>=<expr><name>i</name></expr></init></decl>;</init><condition><expr><name>k</name><operator>&lt;=</operator><name>j</name></expr>;</condition><incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name><name>vis</name><index>[<expr><name>k</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name><name>F</name><index>[<expr><name>k</name></expr>]</index></name><operator>=</operator><call><name>Col</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
			<expr_stmt><expr><name><name>Q</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><operator>++</operator><name>len</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>Node</name><operator>)</operator><block>{<expr><name>i</name></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>Q</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><operator>++</operator><name>len</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>Node</name><operator>)</operator><block>{<expr><name>j</name></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><name>i</name><operator>=</operator><name>j</name></expr>;</expr_stmt>
	}</block></for>
	<decl_stmt><decl><type><name>int</name></type> <name>cur</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>hv</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<comment type="line">//		for(int i=1;i&lt;=len;i++)</comment>
<comment type="line">//			cout&lt;&lt;Q[cur][i].x&lt;&lt;' '&lt;&lt;Q[cur][i].dr&lt;&lt;endl;</comment>
<comment type="line">//		cout&lt;&lt;endl;</comment>
	<while>while<condition>(<expr><name>K</name><operator>&amp;&amp;</operator><name>len</name></expr>)</condition><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>Len</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt><expr_stmt><expr><name>Ti</name><operator>++</operator></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>len</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
			<decl_stmt><decl><type><name>int</name></type> <name>x</name><init>=<expr><operator>(</operator><name><name>Q</name><index>[<expr><name>cur</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name><operator>+</operator><name><name>Q</name><index>[<expr><name>cur</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dr</name><operator>+</operator><name>n</name><operator>)</operator><operator>%</operator><name>n</name></expr></init></decl>;</decl_stmt>
			<if>if<condition>(<expr><name><name>vis</name><index>[<expr><name>x</name></expr>]</index></name></expr>)</condition><then><block>{
				<if>if<condition>(<expr><name><name>mark</name><index>[<expr><name>x</name></expr>]</index></name><operator>==</operator><name>Ti</name></expr>)</condition><then><block>{
					<if>if<condition>(<expr><name><name>F</name><index>[<expr><name>x</name></expr>]</index></name><operator>==</operator><name><name>F</name><index>[<expr><name><name>Q</name><index>[<expr><name>cur</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
					<decl_stmt><decl><type><name>int</name></type> <name>be</name><init>=<expr><call><name>Col</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>^</operator><name>hv</name></expr></init></decl>;</decl_stmt>
					<if>if<condition>(<expr><name>be</name><operator>==</operator><name><name>F</name><index>[<expr><name>x</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name><name>F</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><name>x</name></expr>;</expr_stmt></block></then>
					<else>else <block type="pseudo"><expr_stmt><expr><name><name>F</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><name><name>F</name><index>[<expr><name><name>Q</name><index>[<expr><name>cur</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr>]</index></name></expr>;</expr_stmt></block></else></if>
				}</block></then><else>else <block type="pseudo"><continue>continue;</continue></block></else></if>
			}</block></then></if>
<comment type="line">//			cout&lt;&lt;x&lt;&lt;endl;</comment>
			<expr_stmt><expr><name><name>vis</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name><name>mark</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><name>Ti</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>F</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><name><name>F</name><index>[<expr><name><name>Q</name><index>[<expr><name>cur</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>Q</name><index>[<expr><operator>!</operator><name>cur</name></expr>]</index><index>[<expr><operator>++</operator><name>Len</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>Node</name><operator>)</operator><block>{<expr><name>x</name></expr>,<expr><name><name>Q</name><index>[<expr><name>cur</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dr</name></expr>}</block></expr>;</expr_stmt>
		}</block></for>
		<expr_stmt><expr><name>hv</name><operator>^=</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>len</name><operator>=</operator><name>Len</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>cur</name><operator>^=</operator><literal type="number">1</literal></expr>;</expr_stmt>
<comment type="line">//		break;</comment>
		<expr_stmt><expr><name>K</name><operator>--</operator></expr>;</expr_stmt>
	}</block></while>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><if>if<condition>(<expr><name><name>vis</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block>{
			<if>if<condition>(<expr><name><name>F</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"W"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
			<else>else <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"B"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
		}</block></then><else>else <block>{
			<decl_stmt><decl><type><name>int</name></type> <name>col</name><init>=<expr><call><name>Col</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>^</operator><name>hv</name></expr></init></decl>;</decl_stmt>
			<if>if<condition>(<expr><name>col</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"W"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
			<else>else <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"B"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
		}</block></else></if></block></for>
	<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
