<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28934989_62491168.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name> <init>= <expr><literal type="number">1e5</literal><operator>+</operator><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>inf</name> <init>= <expr><literal type="number">1e15</literal></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>read</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>int</name></type> <name>x</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>f</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name>c</name><init>=<expr><call><name>getchar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<if>if<condition>(<expr><name>c</name><operator>==</operator><literal type="char">'-'</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>f</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if><expr_stmt><expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>}</block></while>
	<while>while<condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<expr_stmt><expr><name>x</name><operator>=</operator><operator>(</operator><name>x</name><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator><operator>+</operator><operator>(</operator><name>x</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><name>c</name><operator>-</operator><literal type="number">48</literal></expr>;</expr_stmt><expr_stmt><expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>}</block></while>
	<return>return <expr><name>x</name><operator>*</operator><name>f</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><name>int</name></type> <name><name>to</name><index>[<expr><name>maxn</name><operator>&lt;&lt;</operator><literal type="number">1</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>net</name><index>[<expr><name>maxn</name><operator>&lt;&lt;</operator><literal type="number">1</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>h</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name>e</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{
	<expr_stmt><expr><name><name>to</name><index>[<expr><operator>++</operator><name>e</name></expr>]</index></name><operator>=</operator><name>y</name></expr>;</expr_stmt><expr_stmt><expr><name><name>net</name><index>[<expr><name>e</name></expr>]</index></name><operator>=</operator><name><name>h</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt><expr_stmt><expr><name><name>h</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><name>e</name></expr>;</expr_stmt>
}</block></function>

<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>cost</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>deg</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>v</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>anss</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name>ans</name><init>=<expr><name>inf</name></expr></init></decl>,<decl><type ref="prev"/><name>summ</name></decl>,<decl><type ref="prev"/><name>x1</name></decl>,<decl><type ref="prev"/><name>x2</name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>c1</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>c2</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>sum</name></decl></parameter>)</parameter_list><block>{
	<decl_stmt><decl><type><name>int</name></type> <name>flag</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><specifier>register</specifier> <name>int</name></type> <name>i</name><init>=<expr><name><name>h</name><index>[<expr><name>x</name></expr>]</index></name></expr></init></decl>;</init><condition><expr><name>i</name></expr>;</condition><incr><expr><name>i</name><operator>=</operator><name><name>net</name><index>[<expr><name>i</name></expr>]</index></name></expr></incr>)</control><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>y</name><init>=<expr><name><name>to</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name><name>v</name><index>[<expr><name>y</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
		<expr_stmt><expr><name><name>v</name><index>[<expr><name>y</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><specifier>register</specifier> <name>int</name></type> <name>c</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>c</name><operator>&lt;=</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>c</name><operator>++</operator></expr></incr>)</control><block>{
			<if>if<condition>(<expr><name>c</name><operator>==</operator><name>c1</name> <operator>||</operator> <name>c</name><operator>==</operator><name>c2</name></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
			<expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>y</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>c1</name></expr></argument>,<argument><expr><name>sum</name><operator>+</operator><name><name>cost</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
		<expr_stmt><expr><name>flag</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	}</block></for>	
	<if>if<condition>(<expr><name>flag</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>summ</name><operator>=</operator><name>sum</name></expr>;</expr_stmt></block></then></if>
	<return>return ;</return>
}</block></function>

<function><type><name>void</name></type> <name>dfs2</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>c1</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>c2</name></decl></parameter>)</parameter_list><block>{
	<expr_stmt><expr><name><name>anss</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><name>c1</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><specifier>register</specifier> <name>int</name></type> <name>i</name><init>=<expr><name><name>h</name><index>[<expr><name>x</name></expr>]</index></name></expr></init></decl>;</init><condition><expr><name>i</name></expr>;</condition><incr><expr><name>i</name><operator>=</operator><name><name>net</name><index>[<expr><name>i</name></expr>]</index></name></expr></incr>)</control><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>y</name><init>=<expr><name><name>to</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name><name>v</name><index>[<expr><name>y</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
		<expr_stmt><expr><name><name>v</name><index>[<expr><name>y</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><specifier>register</specifier> <name>int</name></type> <name>c</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>c</name><operator>&lt;=</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>c</name><operator>++</operator></expr></incr>)</control><block>{
			<if>if<condition>(<expr><name>c</name><operator>==</operator><name>c1</name> <operator>||</operator> <name>c</name><operator>==</operator><name>c2</name></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
			<expr_stmt><expr><call><name>dfs2</name><argument_list>(<argument><expr><name>y</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
	}</block></for>
	<return>return;</return>
}</block></function>

<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><name>n</name><operator>=</operator><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><specifier>register</specifier> <name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><for>for<control>(<init><decl><type><specifier>register</specifier> <name>int</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
			<block type="pseudo"><expr_stmt><expr><name><name>cost</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></for></block></for>
	<for>for<control>(<init><decl><type><specifier>register</specifier> <name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>x</name><init>=<expr><call><name>read</name><argument_list>()</argument_list></call></expr></init></decl>,<decl><type ref="prev"/><name>y</name><init>=<expr><call><name>read</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>y</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>deg</name><index>[<expr><name>x</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt><expr_stmt><expr><name><name>deg</name><index>[<expr><name>y</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
	}</block></for>
	<for>for<control>(<init><decl><type><specifier>register</specifier> <name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<if>if<condition>(<expr><name><name>deg</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;</operator><literal type="number">2</literal></expr>)</condition><then><block>{<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><literal type="number">0</literal></expr>;</return>}</block></then></if>
	}</block></for>
	<for>for<control>(<init><decl><type><specifier>register</specifier> <name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<if>if<condition>(<expr><name><name>deg</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
			<for>for<control>(<init><decl><type><specifier>register</specifier> <name>int</name></type> <name>u</name><init>=<expr><name><name>h</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</init><condition><expr><name>u</name></expr>;</condition><incr><expr><name>u</name><operator>=</operator><name><name>net</name><index>[<expr><name>u</name></expr>]</index></name></expr></incr>)</control><block>{
				<decl_stmt><decl><type><name>int</name></type> <name>y</name><init>=<expr><name><name>to</name><index>[<expr><name>u</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
				<for>for<control>(<init><decl><type><specifier>register</specifier> <name>int</name></type> <name>c</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>c</name><operator>&lt;=</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>c</name><operator>++</operator></expr></incr>)</control><block>{
					<for>for<control>(<init><decl><type><specifier>register</specifier> <name>int</name></type> <name>c2</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>c2</name><operator>&lt;=</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>c2</name><operator>++</operator></expr></incr>)</control><block>{
						<if>if<condition>(<expr><name>c</name><operator>==</operator><name>c2</name></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
						<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>v</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>v</name><index>[<expr><name>y</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>y</name></expr></argument>,<argument><expr><name>c2</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>cost</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>cost</name><index>[<expr><name>c2</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<if>if<condition>(<expr><name>ans</name><operator>&gt;</operator><name>summ</name></expr>)</condition><then><block>{
							<expr_stmt><expr><name>ans</name><operator>=</operator><name>summ</name></expr>;</expr_stmt>
							<expr_stmt><expr><name>x1</name><operator>=</operator><name>c</name></expr>;</expr_stmt><expr_stmt><expr><name>x2</name><operator>=</operator><name>c2</name></expr>;</expr_stmt>
						}</block></then></if>
					}</block></for>
				}</block></for>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>,<argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>v</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>v</name><index>[<expr><name>y</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>anss</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>x1</name></expr>;</expr_stmt><expr_stmt><expr><name><name>anss</name><index>[<expr><name>y</name></expr>]</index></name><operator>=</operator><name>x2</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>dfs2</name><argument_list>(<argument><expr><name>y</name></expr></argument>,<argument><expr><name>x2</name></expr></argument>,<argument><expr><name>x1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<for>for<control>(<init><decl><type><specifier>register</specifier> <name>int</name></type> <name>now</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>now</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>now</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld "</literal></expr></argument>,<argument><expr><name><name>anss</name><index>[<expr><name>now</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
				<return>return <expr><literal type="number">0</literal></expr>;</return>
			}</block></for>
		}</block></then></if>
	}</block></for>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
