<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28933665_62487035.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<comment type="line">// macros</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>overload_rep</name><parameter_list>(<parameter><type><name>_1</name></type></parameter>, <parameter><type><name>_2</name></type></parameter> ,<parameter><type><name>_3</name></type></parameter> ,<parameter><type><name>name</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>name</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>re_p</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = 0; i &lt; (n); ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>r_ep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = (x); i &lt;= (y); ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>overload_rep(__VA_ARGS__, r_ep, re_p,)(__VA_ARGS__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a.begin(), a.end()</cpp:value></cpp:define>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>STOP_DEBUG</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro>\
    <cpp:value>do { cerr &lt;&lt; boolalpha &lt;&lt; "[" &lt;&lt; #__VA_ARGS__ &lt;&lt; "]:";\
    debug_cerr(__VA_ARGS__); cerr &lt;&lt; noboolalpha; } while (0)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="line">// functions</comment>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>bool</name></type> <name>chmax</name><parameter_list>(<parameter><decl><type><name>T</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <if>if <condition>(<expr><name>a</name> <operator>&lt;</operator> <name>b</name></expr>)</condition><then> <block>{ <expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt> <return>return <expr><literal type="number">1</literal></expr>;</return> }</block></then></if> <return>return <expr><literal type="number">0</literal></expr>;</return> }</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>bool</name></type> <name>chmin</name><parameter_list>(<parameter><decl><type><name>T</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <if>if <condition>(<expr><name>a</name> <operator>&gt;</operator> <name>b</name></expr>)</condition><then> <block>{ <expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt> <return>return <expr><literal type="number">1</literal></expr>;</return> }</block></then></if> <return>return <expr><literal type="number">0</literal></expr>;</return> }</block></function>
<function><type><name>void</name></type> <name>debug_cerr</name><parameter_list>()</parameter_list><block>{ <expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt> }</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>Head</name></parameter>, <parameter><type><name>class</name><modifier>...</modifier></type> <name>Tail</name></parameter>&gt;</parameter_list></template>
<type><name>void</name></type> <name>debug_cerr</name><parameter_list>(<parameter><decl><type><name>Head</name></type> <name>head</name></decl></parameter>, <parameter><decl><type><name>Tail</name><modifier>...</modifier></type> <name>tail</name></decl></parameter>)</parameter_list><block>{
    <expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal> <operator>&lt;&lt;</operator> <name>head</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>debug_cerr</name><argument_list>(<argument><expr><name>tail</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="line">// cin/cout setup</comment>
<struct>struct <name>IoSetup</name><block>{<public type="default">
    <constructor><name>IoSetup</name><parameter_list>()</parameter_list><block>{
        <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>fixed</name> <operator>&lt;&lt;</operator> <call><name>setprecision</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
</public>}</block> <decl><name>iosetup</name></decl>;</struct>

<comment type="line">// Codeforces Round #592 (Div. 2)</comment>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<decl_stmt><decl><type><name>int</name></type> <name>N</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">100000</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>ans</name><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">100000</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>to</name><index>[<expr><literal type="number">100000</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>draw</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p2</name></decl></parameter>)</parameter_list><block>{
    <expr_stmt><expr><name><name>ans</name><index>[<expr><name>pos</name></expr>]</index><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal> <operator>-</operator> <name><name>ans</name><index>[<expr><name>pos</name></expr>]</index><index>[<expr><name>p1</name></expr>]</index></name> <operator>-</operator> <name><name>ans</name><index>[<expr><name>pos</name></expr>]</index><index>[<expr><name>p2</name></expr>]</index></name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>u</name> <range>: <expr><name><name>to</name><index>[<expr><name>v</name></expr>]</index></name></expr></range></decl></init>)</control><block type="pseudo"><if>if<condition>(<expr><name>u</name> <operator>!=</operator> <name>p1</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>draw</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></block></for>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>N</name></expr>;</expr_stmt>
    <macro><name>rep</name><argument_list>(<argument>i</argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro><macro><name>rep</name><argument_list>(<argument>j</argument>, <argument>N</argument>)</argument_list></macro><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>c</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
    <macro><name>rep</name><argument_list>(<argument>i</argument>, <argument>N - <literal type="number">1</literal></argument>)</argument_list></macro><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>a</name><operator>--</operator></expr>;</expr_stmt> <expr_stmt><expr><name>b</name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>to</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>to</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>

    <macro><name>rep</name><argument_list>(<argument>i</argument>, <argument>N</argument>)</argument_list></macro><block>{
        <if>if<condition>(<expr><name><name>to</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"-1\n"</literal></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        }</block></then></if>
    }</block>

    <decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><name><name>to</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>front</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>ans</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>ans</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ans</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>ans</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ans</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>ans</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ans</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>ans</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ans</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>ans</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ans</name><index>[<expr><literal type="number">5</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>ans</name><index>[<expr><literal type="number">5</literal></expr>]</index><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>ll</name></type> <name>comp</name> <init>= <expr><literal type="number">1e18</literal></expr></init></decl>, <decl><type ref="prev"/><name>tmp</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <macro><name>rep</name><argument_list>(<argument>i</argument>, <argument><literal type="number">6</literal></argument>)</argument_list></macro><block>{
        <expr_stmt><expr><name>pos</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ll</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>u</name> <range>: <expr><name><name>to</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></range></decl></init>)</control><block>{
            <if>if<condition>(<expr><name>u</name> <operator>!=</operator> <name>v</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>draw</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        }</block></for>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>u</name> <range>: <expr><name><name>to</name><index>[<expr><name>v</name></expr>]</index></name></expr></range></decl></init>)</control><block>{
            <if>if<condition>(<expr><name>u</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>draw</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        }</block></for>
        <macro><name>rep</name><argument_list>(<argument>j</argument>, <argument>N</argument>)</argument_list></macro><expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>c</name><index>[<expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
        <if>if<condition>(<expr><call><name>chmin</name><argument_list>(<argument><expr><name>comp</name></expr></argument>, <argument><expr><name>sum</name></expr></argument>)</argument_list></call></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block></then></if>
    }</block>

    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>comp</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
    <macro><name>rep</name><argument_list>(<argument>i</argument>, <argument>N</argument>)</argument_list></macro><block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>ans</name><index>[<expr><name>tmp</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><ternary><condition><expr><name>i</name> <operator>==</operator> <name>N</name> <operator>-</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="string">"\n"</literal></expr> </then><else>: <expr><literal type="string">" "</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
    }</block>

}</block></function></unit>
