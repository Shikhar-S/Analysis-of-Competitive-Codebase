<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28899054_62485714.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name>bool</name></type> <name>Reduce</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>,<parameter><decl><type><name>T</name> <specifier>const</specifier> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><ternary><condition><expr><name>a</name><operator>&gt;</operator><name>b</name></expr>?</condition><then><expr><name>a</name><operator>=</operator><name>b</name></expr></then></ternary></expr><operator>,</operator><expr><literal type="number">1</literal><operator>:</operator><literal type="number">0</literal></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>XN</name><init>=<expr><literal type="number">1e5</literal><operator>+</operator><literal type="number">11</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>long</name> <name>long</name></type> <name>INF</name><init>=<expr><literal type="number">1e18</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>w</name><index>[<expr><name>XN</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></name></type> <name><name>G</name><index>[<expr><name>XN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name><name>ud</name><index>[<expr><name>XN</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>vis</name><index>[<expr><name>XN</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>Solve</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>)</parameter_list> <block>{
    <while>while<condition>(<expr><name><name>G</name><index>[<expr><name>pos</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>!=</operator><literal type="number">1</literal></expr>)</condition> <block>{
        <expr_stmt><expr><name><name>ud</name><index>[<expr><name>pos</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>u</name> <range>: <expr><name><name>G</name><index>[<expr><name>pos</name></expr>]</index></name></expr></range></decl></init>)</control>
            <block type="pseudo"><if>if<condition>(<expr><operator>!</operator><name><name>ud</name><index>[<expr><name>u</name></expr>]</index></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>pos</name><operator>=</operator><name>u</name></expr>;</expr_stmt>
                <break>break;</break>
            }</block></then></if></block></for>
    }</block></while>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></name></type> <name>s</name><argument_list>{<argument><expr><literal type="number">0</literal></expr></argument>}</argument_list></decl>;</decl_stmt>
    <do>do <block>{
        <expr_stmt><expr><name><name>vis</name><index>[<expr><name>pos</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>u</name> <range>: <expr><name><name>G</name><index>[<expr><name>pos</name></expr>]</index></name></expr></range></decl></init>)</control>
            <block type="pseudo"><if>if<condition>(<expr><operator>!</operator><name><name>vis</name><index>[<expr><name>u</name></expr>]</index></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>pos</name><operator>=</operator><name>u</name></expr>;</expr_stmt>
                <break>break;</break>
            }</block></then></if></block></for>
    }</block>while<condition>(<expr><name><name>G</name><index>[<expr><name>pos</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>!=</operator><literal type="number">1</literal></expr>)</condition>;</do>
    <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><specifier>static</specifier> <type><name>long</name> <name>long</name></type> <name><name>f</name><index>[<expr><name>XN</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>static</specifier> <type><name><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></name></type> <name><name>pre</name><index>[<expr><name>XN</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>cnt</name><init>=<expr><call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>cnt</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
        <for>for<control>(<init><decl><type><name>int</name></type> <name>s1</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>s1</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition><incr><expr><operator>++</operator><name>s1</name></expr></incr>)</control>
            <block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>s2</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>s2</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition><incr><expr><operator>++</operator><name>s2</name></expr></incr>)</control>
                <block type="pseudo"><expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>s1</name></expr>]</index><index>[<expr><name>s2</name></expr>]</index></name><operator>=</operator><name>INF</name></expr>;</expr_stmt></block></for></block></for>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>s1</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>s1</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition><incr><expr><operator>++</operator><name>s1</name></expr></incr>)</control> 
            <block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>s2</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>s2</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition><incr><expr><operator>++</operator><name>s2</name></expr></incr>)</control> <block type="pseudo"><if>if<condition>(<expr><name>s1</name><operator>!=</operator><name>s2</name></expr>)</condition><then>
                <block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>s3</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>s3</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition><incr><expr><operator>++</operator><name>s3</name></expr></incr>)</control> <block type="pseudo"><if>if<condition>(<expr><name>s1</name><operator>!=</operator><name>s3</name> <operator>&amp;&amp;</operator> <name>s2</name><operator>!=</operator><name>s3</name></expr>)</condition><then>
                    <block type="pseudo"><if>if<condition>(<expr><call><name>Reduce</name><argument_list>(<argument><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>s2</name></expr>]</index><index>[<expr><name>s3</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>f</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>s1</name></expr>]</index><index>[<expr><name>s2</name></expr>]</index></name><operator>+</operator><name><name>w</name><index>[<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index><index>[<expr><name>s3</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then>
                        <block type="pseudo"><expr_stmt><expr><name><name>pre</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>s2</name></expr>]</index><index>[<expr><name>s3</name></expr>]</index></name><operator>=</operator><block>{<expr><name>s1</name></expr>,<expr><name>s2</name></expr>}</block></expr>;</expr_stmt></block></then></if></block></then></if></block></for></block></then></if></block></for></block></for>
    }</block></for>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>res</name><init>=<expr><name>INF</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></name></type> <name>p</name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>s1</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>s1</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition><incr><expr><operator>++</operator><name>s1</name></expr></incr>)</control>
        <block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>s2</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>s2</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition><incr><expr><operator>++</operator><name>s2</name></expr></incr>)</control>
            <block type="pseudo"><if>if<condition>(<expr><call><name>Reduce</name><argument_list>(<argument><expr><name>res</name></expr></argument>,<argument><expr><name><name>f</name><index>[<expr><name>cnt</name></expr>]</index><index>[<expr><name>s1</name></expr>]</index><index>[<expr><name>s2</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>p</name><operator>=</operator><block>{<expr><name>s1</name></expr>,<expr><name>s2</name></expr>}</block></expr>;</expr_stmt></block></then></if></block></for></block></for>
    <decl_stmt><decl><specifier>static</specifier> <type><name>int</name></type> <name><name>color</name><index>[<expr><name>XN</name></expr>]</index></name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>cnt</name></expr></init></decl>;</init><condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">1</literal></expr>;</condition><incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{
        <expr_stmt><expr><name><name>color</name><index>[<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>=</operator><name><name>p</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name><operator>=</operator><name><name>pre</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name><name>p</name><operator>.</operator><name>first</name></name></expr>]</index><index>[<expr><name><name>p</name><operator>.</operator><name>second</name></name></expr>]</index></name></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name><operator>&lt;&lt;</operator><name>res</name><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name><operator>&lt;&lt;</operator><operator>(</operator><name><name>color</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>&lt;&lt;</operator><operator>(</operator><ternary><condition><expr><name>i</name><operator>==</operator><name>n</name></expr>?</condition><then><expr><literal type="char">'\n'</literal></expr></then><else>:<expr><literal type="char">' '</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block></for>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cin</name></name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name><name>std</name><operator>::</operator><name>cin</name></name><operator>&gt;&gt;</operator><name><name>w</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name><name>std</name><operator>::</operator><name>cin</name></name><operator>&gt;&gt;</operator><name><name>w</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name><name>std</name><operator>::</operator><name>cin</name></name><operator>&gt;&gt;</operator><name><name>w</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt></block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt><expr_stmt><expr><name><name>std</name><operator>::</operator><name>cin</name></name><operator>&gt;&gt;</operator><name>x</name><operator>&gt;&gt;</operator><name>y</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>G</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>G</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <decl_stmt><decl><type><name>bool</name></type> <name>tak</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name>tak</name><operator>&amp;=</operator><name><name>G</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>&lt;=</operator><literal type="number">2</literal></expr>;</expr_stmt></block></for>
    <if>if<condition>(<expr><operator>!</operator><name>tak</name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name><operator>&lt;&lt;</operator><operator>-</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt></block></then>
    <else>else <block>{
        <expr_stmt><expr><call><name>Solve</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

</unit>
