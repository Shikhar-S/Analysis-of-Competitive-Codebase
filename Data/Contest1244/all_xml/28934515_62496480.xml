<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28934515_62496480.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
 
<using>using <name>ll</name> <init>= <type><name>long</name> <name>long</name></type></init>;</using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">1e5</literal> <operator>+</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>
 
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <comment type="line">//ios_base::sync_with_stdio(0);cin.tie(NULL);cout.tie(NULL);</comment>
    <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>s</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>mp</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>x</name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>++</operator><name><name>mp</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <while>while<condition>(<expr><name>k</name></expr>)</condition><block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>v1</name> <init>= <expr><operator>*</operator><call><name><name>s</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ll</name></type> <name>v2</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>--</operator><call><name><name>s</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>v1</name> <operator>==</operator> <name>v2</name></expr>)</condition><then>    <block type="pseudo"><break>break;</break></block></then></if>
        <if>if<condition>(<expr><name><name>mp</name><index>[<expr><name>v1</name></expr>]</index></name> <operator>&lt;</operator> <name><name>mp</name><index>[<expr><name>v2</name></expr>]</index></name></expr>)</condition><then><block>{
            <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>ll</name></type> <name>v3</name> <init>= <expr><operator>*</operator><call><name><name>s</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><operator>(</operator><name>v3</name> <operator>-</operator> <name>v1</name><operator>)</operator> <operator>*</operator> <name><name>mp</name><index>[<expr><name>v1</name></expr>]</index></name> <operator>&lt;=</operator> <name>k</name></expr>)</condition><then><block>{
                <expr_stmt><expr><name><name>mp</name><index>[<expr><name>v3</name></expr>]</index></name> <operator>+=</operator> <name><name>mp</name><index>[<expr><name>v1</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>k</name> <operator>-=</operator> <operator>(</operator><name>v3</name> <operator>-</operator> <name>v1</name><operator>)</operator> <operator>*</operator> <name><name>mp</name><index>[<expr><name>v1</name></expr>]</index></name></expr>;</expr_stmt>
            }</block></then>
            <else>else<block>{
                <expr_stmt><expr><name>v1</name> <operator>+=</operator> <name>k</name> <operator>/</operator> <name><name>mp</name><index>[<expr><name>v1</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>v1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
            }</block></else></if>
        }</block></then>
        <else>else<block>{
            <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><operator>--</operator><call><name><name>s</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>ll</name></type> <name>v3</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>--</operator><call><name><name>s</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><operator>(</operator><name>v2</name> <operator>-</operator> <name>v3</name><operator>)</operator> <operator>*</operator> <name><name>mp</name><index>[<expr><name>v2</name></expr>]</index></name> <operator>&lt;=</operator> <name>k</name></expr>)</condition><then><block>{
                <expr_stmt><expr><name><name>mp</name><index>[<expr><name>v3</name></expr>]</index></name> <operator>+=</operator> <name><name>mp</name><index>[<expr><name>v2</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>k</name> <operator>-=</operator> <operator>(</operator><name>v2</name> <operator>-</operator> <name>v3</name><operator>)</operator> <operator>*</operator> <name><name>mp</name><index>[<expr><name>v2</name></expr>]</index></name></expr>;</expr_stmt>
            }</block></then>
            <else>else<block>{
                <expr_stmt><expr><name>v2</name> <operator>-=</operator> <name>k</name> <operator>/</operator> <name><name>mp</name><index>[<expr><name>v2</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>v2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></else></if>
    }</block></while>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>*</operator><operator>(</operator><operator>--</operator><call><name><name>s</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>-</operator> <operator>*</operator><call><name><name>s</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
}</block></function></unit>
