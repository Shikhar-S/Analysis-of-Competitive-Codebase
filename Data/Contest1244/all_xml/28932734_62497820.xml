<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28932734_62497820.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>p</name> <operator>&gt;&gt;</operator> <name>w</name> <operator>&gt;&gt;</operator> <name>d</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>solved</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>solW</name></decl>, <decl><type ref="prev"/><name>solD</name></decl>, <decl><type ref="prev"/><name>solL</name></decl>;</decl_stmt>

    <for>for<control>(<init><decl><type><name>long</name> <name>long</name></type> <name>draws</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>draws</name> <operator>&lt;=</operator> <call><name>min</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><literal type="number">1000000</literal></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>draws</name><operator>++</operator></expr></incr>)</control><block>{
        <if>if<condition>(<expr><name>d</name><operator>*</operator><name>draws</name> <operator>&gt;</operator> <name>p</name></expr>)</condition><then>
            <block type="pseudo"><break>break;</break></block></then></if>

        <if>if<condition>(<expr><operator>(</operator><name>p</name> <operator>-</operator> <name>d</name><operator>*</operator><name>draws</name><operator>)</operator> <operator>%</operator> <name>w</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
            <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>posD</name> <init>= <expr><name>draws</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>posW</name> <init>= <expr><operator>(</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>d</name><operator>*</operator><name>draws</name><operator>)</operator> <operator>/</operator> <name>w</name><operator>)</operator></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name>posW</name> <operator>+</operator> <name>posD</name> <operator>&gt;</operator> <name>n</name></expr>)</condition><then>
                <block type="pseudo"><continue>continue;</continue></block></then></if>

            <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>posL</name> <init>= <expr><operator>(</operator><name>n</name> <operator>-</operator> <operator>(</operator><name>posD</name> <operator>+</operator> <name>posW</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name>solved</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>solW</name> <operator>=</operator> <name>posW</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>solD</name> <operator>=</operator> <name>posD</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>solL</name> <operator>=</operator> <name>posL</name></expr>;</expr_stmt>
            <break>break;</break>
        }</block></then></if>
    }</block></for>

    <if>if<condition>(<expr><name>solved</name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>solW</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name>solD</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name>solL</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></then>
    <else>else
        <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></else></if>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
