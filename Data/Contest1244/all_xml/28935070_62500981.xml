<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28935070_62500981.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name> <name>int</name></type> <name>llint</name>;</typedef>
<decl_stmt><decl><type><name>llint</name></type> <name><name>arr</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>map</name> <argument_list type="generic">&lt;<argument><expr><name>llint</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>llint</name></expr></argument>&gt;</argument_list></name></type> <name>v</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>llint</name></type> <name>k</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>m</name><index>[<expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>+=</operator><literal type="number">1</literal></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>arr</name></expr></argument>,<argument><expr><name>arr</name><operator>+</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>v</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name>unique</name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>v</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name><name>v</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if<condition>(<expr><call><name><name>v</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">2</literal></expr>)</condition><then> <block>{
		<decl_stmt><decl><type><name>llint</name></type> <name>raz</name><init>=<expr><operator>(</operator><name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>raz</name><operator>-=</operator><name>k</name><operator>/</operator><call><name>min</name><argument_list>(<argument><expr><name><name>m</name><index>[<expr><name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr></argument>,<argument><expr><name><name>m</name><index>[<expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>raz</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>raz</name></expr>;</expr_stmt></block></else></if>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></then></if>
	<decl_stmt><decl><type><name>llint</name></type> <name>mini</name><init>=<expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>,<decl><type ref="prev"/><name>maxi</name><init>=<expr><name><name>v</name><index>[<expr><call><name><name>v</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>,<decl><type ref="prev"/><name>ind1</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>ind2</name><init>=<expr><call><name><name>v</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
	<if>if<condition>(<expr><name>maxi</name><operator>-</operator><name>mini</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block>{
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></then></if>
	<while>while<condition>(<expr><name>k</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition> <block>{
		<comment type="line">//cout &lt;&lt; k &lt;&lt; "\n";</comment>
		<decl_stmt><decl><type><name>llint</name></type> <name>a</name><init>=<expr><operator>(</operator><name><name>v</name><index>[<expr><name>ind1</name></expr>]</index></name><operator>-</operator><name>mini</name><operator>)</operator><operator>*</operator><name><name>m</name><index>[<expr><name>mini</name></expr>]</index></name></expr></init></decl>,<decl><type ref="prev"/><name>b</name><init>=<expr><operator>(</operator><name>maxi</name><operator>-</operator><name><name>v</name><index>[<expr><name>ind2</name></expr>]</index></name><operator>)</operator><operator>*</operator><name><name>m</name><index>[<expr><name>maxi</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>llint</name></type> <name>x</name><init>=<expr><call><name>min</name><argument_list>(<argument><expr><name>k</name><operator>/</operator><name><name>m</name><index>[<expr><name>mini</name></expr>]</index></name></expr></argument>,<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>llint</name></type> <name>y</name><init>=<expr><call><name>min</name><argument_list>(<argument><expr><name>k</name><operator>/</operator><name><name>m</name><index>[<expr><name>maxi</name></expr>]</index></name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="line">//cout &lt;&lt; x &lt;&lt; " " &lt;&lt; y &lt;&lt; "\n";</comment>
		<comment type="line">//cout &lt;&lt; "a\n";</comment>
		<if>if<condition>(<expr><name><name>m</name><index>[<expr><name>mini</name></expr>]</index></name><operator>&lt;</operator><name><name>m</name><index>[<expr><name>maxi</name></expr>]</index></name></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>llint</name></type> <name>mini2</name><init>=<expr><name>mini</name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>mini</name><operator>+=</operator><call><name>min</name><argument_list>(<argument><expr><name>k</name><operator>/</operator><name><name>m</name><index>[<expr><name>mini</name></expr>]</index></name></expr></argument>,<argument><expr><name>a</name><operator>/</operator><name><name>m</name><index>[<expr><name>mini</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>k</name><operator>-=</operator><call><name>min</name><argument_list>(<argument><expr><name>k</name></expr></argument>,<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>ind1</name><operator>+=</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>m</name><index>[<expr><name>mini</name></expr>]</index></name><operator>+=</operator><name><name>m</name><index>[<expr><name>mini2</name></expr>]</index></name></expr>;</expr_stmt>
			<comment type="line">//cout &lt;&lt; "min\n";</comment>
			<comment type="line">//cout &lt;&lt; mini &lt;&lt; " " &lt;&lt; maxi &lt;&lt; " " &lt;&lt; k &lt;&lt; "\n";</comment>
			<if>if<condition>(<expr><name>k</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
		}</block></then>
		<else>else <block>{
			<decl_stmt><decl><type><name>llint</name></type> <name>maxi2</name><init>=<expr><name>maxi</name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>maxi</name><operator>-=</operator><call><name>min</name><argument_list>(<argument><expr><name>k</name><operator>/</operator><name><name>m</name><index>[<expr><name>maxi</name></expr>]</index></name></expr></argument>,<argument><expr><name>b</name><operator>/</operator><name><name>m</name><index>[<expr><name>maxi</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>k</name><operator>-=</operator><call><name>min</name><argument_list>(<argument><expr><name>k</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>ind2</name><operator>-=</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>m</name><index>[<expr><name>maxi</name></expr>]</index></name><operator>+=</operator><name><name>m</name><index>[<expr><name>maxi2</name></expr>]</index></name></expr>;</expr_stmt>
			<comment type="line">//cout &lt;&lt; "max\n";</comment>
			<comment type="line">//cout &lt;&lt; mini &lt;&lt; " " &lt;&lt; maxi &lt;&lt; " " &lt;&lt; k &lt;&lt; "\n";</comment>
			<if>if<condition>(<expr><name>k</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
		}</block></else></if>
		<if>if<condition>(<expr><name>maxi</name><operator>==</operator><name>mini</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
		<comment type="line">//cout &lt;&lt; "b\n";</comment>
	}</block></while>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>maxi</name><operator>-</operator><name>mini</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
