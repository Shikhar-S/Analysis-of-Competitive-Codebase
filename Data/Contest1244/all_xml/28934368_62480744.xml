<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28934368_62480744.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pll</name></cpp:macro> <cpp:value>pair&lt;ll, ll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vl</name></cpp:macro> <cpp:value>vector&lt;ll&gt;</cpp:value></cpp:define>


<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> 
<block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name> <operator>&gt;&gt;</operator> <name>c</name> <operator>&gt;&gt;</operator> <name>d</name></expr>;</expr_stmt>
    
    <decl_stmt><decl><type><name>ll</name></type> <name>x1</name> <init>= <expr><name>b</name> <operator>/</operator> <name>c</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>x2</name> <init>= <expr><name>b</name> <operator>%</operator> <name>c</name></expr></init></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><name>ll</name></type> <name>k</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    
    <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;</operator> <name>c</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><if>if<condition>(<expr><operator>(</operator><name>i</name> <operator>*</operator> <name>d</name><operator>)</operator> <operator>%</operator> <name>c</name> <operator>==</operator> <name>x2</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>k</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>i</name> <operator>*</operator> <name>d</name><operator>)</operator> <operator>-</operator> <name>x2</name><operator>)</operator> <operator>/</operator> <name>c</name></expr>;</expr_stmt>
            <break>break;</break>
        }</block></then></if></block></for>
    
    <if>if<condition>(<expr><name>k</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>k</name> <operator>&gt;</operator> <name>x1</name> <operator>||</operator> <operator>(</operator><name>k</name> <operator>*</operator> <name>c</name> <operator>+</operator> <name>x2</name><operator>)</operator> <operator>/</operator> <name>d</name> <operator>+</operator> <name>x1</name> <operator>-</operator> <name>k</name> <operator>&gt;</operator> <name>a</name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then>
    <else>else
        <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>x1</name> <operator>-</operator> <name>k</name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>k</name> <operator>*</operator> <name>c</name> <operator>+</operator> <name>x2</name><operator>)</operator> <operator>/</operator> <name>d</name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal> <operator>&lt;&lt;</operator> <name>a</name> <operator>-</operator> <name>x1</name> <operator>+</operator> <name>k</name> <operator>-</operator> <operator>(</operator><name>k</name> <operator>*</operator> <name>c</name> <operator>+</operator> <name>x2</name><operator>)</operator> <operator>/</operator> <name>d</name></expr>;</expr_stmt></block></else></if>
    
}</block></function></unit>
