<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28933884_62495547.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>t</name><operator>--</operator></expr>)</condition> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator><name>s</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>sol</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>a</name><init>=<expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>a</name><operator>&lt;=</operator><call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr> ;</condition> <incr><expr><name>a</name><operator>++</operator></expr></incr>)</control> <block>{
			<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>br1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>br2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
			<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>a</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
				<expr_stmt><expr><name>br1</name> <operator>+=</operator> <operator>(</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'1'</literal><operator>)</operator></expr>;</expr_stmt>
				<if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'1'</literal> <operator>and</operator> <name>l</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
					<expr_stmt><expr><name>l</name> <operator>=</operator> <name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
				}</block></then></if>
			}</block></for>
			<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>a</name><operator>-</operator><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
				<expr_stmt><expr><name>br2</name> <operator>+=</operator> <operator>(</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'1'</literal><operator>)</operator></expr>;</expr_stmt>
				<if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'1'</literal></expr>)</condition><then> <block>{
					<expr_stmt><expr><name>r</name> <operator>=</operator> <name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
				}</block></then></if>
			}</block></for>
			<if>if <condition>(<expr><name>l</name><operator>!=</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>sol</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>sol</name></expr></argument>, <argument><expr><call><name>max</name><argument_list>(<argument><expr><name>a</name><operator>-</operator><name>l</name><operator>+</operator><literal type="number">1</literal><operator>+</operator><call><name>max</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><name>l</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>a</name><operator>+</operator><name>br1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<if>if <condition>(<expr><name>r</name><operator>!=</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>sol</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>sol</name></expr></argument>, <argument><expr><call><name>max</name><argument_list>(<argument><expr><name>r</name><operator>-</operator><name>a</name><operator>+</operator><literal type="number">1</literal><operator>+</operator><call><name>max</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><name>r</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><name>a</name><operator>+</operator><literal type="number">1</literal><operator>+</operator><name>br2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></for>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><name>sol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
