<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28909082_62488571.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gc</name></cpp:macro> <cpp:value>getchar</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>re</name></cpp:macro> <cpp:value>register</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>s</name></type></parameter>,<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(re int i=s;i&lt;=t;++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>reb</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>s</name></type></parameter>,<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(re int i=s;i&gt;=t;--i)</cpp:value></cpp:define>

<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template><specifier>inline</specifier> <type><name>void</name></type> <name>Readin</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>X</name></decl></parameter>)</parameter_list><block>{
	<expr_stmt><expr><name>X</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><specifier>register</specifier> <name>bool</name></type> <name>F</name><init>=<expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>register</specifier> <name>char</name></type> <name>C</name><init>=<expr><call><name>gc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name><name>C</name><argument_list type="generic">&lt;<argument><expr><literal type="char">'0'</literal> <operator>or</operator> <name>C</name></expr></argument>&gt;</argument_list></name><literal type="char">'9'</literal></expr>)</condition><block>{<if>if<condition>(<expr><name>C</name><operator>==</operator><literal type="char">'-'</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>F</name><operator>=</operator><literal type="boolean">true</literal></expr>;</expr_stmt></block></then></if><expr_stmt><expr><name>C</name><operator>=</operator><call><name>gc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>}</block></while>
	<while>while<condition>(<expr><name>C</name><operator>&lt;=</operator><literal type="char">'9'</literal> <operator>and</operator> <name>C</name><operator>&gt;=</operator><literal type="char">'0'</literal></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>X</name><operator>=</operator><operator>(</operator><name>X</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><operator>(</operator><name>X</name><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator><operator>+</operator><operator>(</operator><name>C</name><operator>&amp;</operator><literal type="number">15</literal><operator>)</operator></expr><operator>,</operator><expr><name>C</name><operator>=</operator><call><name>gc</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
	<if>if<condition>(<expr><name>F</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>X</name><operator>=</operator><operator>-</operator><name>X</name></expr>;</expr_stmt></block></then></if>
}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template><specifier>inline</specifier> <type><name>void</name></type> <name>Prt</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>X</name></decl></parameter>)</parameter_list><block>{
	<if>if<condition>(<expr><name>X</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><name>X</name><operator>=</operator><operator>-</operator><name>X</name></expr>;</expr_stmt></block></then></if>
	<if>if<condition>(<expr><name>X</name><operator>&gt;</operator><literal type="number">9</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>Prt</name><argument_list>(<argument><expr><name>X</name><operator>/</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
	<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><name>X</name><operator>%</operator><literal type="number">10</literal><operator>+</operator><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name><init>=<expr><literal type="number">1e5</literal><operator>+</operator><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name><name>A</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>Ans</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>k</name></decl>,<decl><type ref="prev"/><name>rem</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name>Readin</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><call><name>Readin</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro><expr_stmt><expr><call><name>Readin</name><argument_list>(<argument><expr><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>A</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>A</name><operator>+</operator><literal type="number">1</literal><operator>+</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rem</name><operator>=</operator><name>k</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>Ans</name><operator>=</operator><name><name>A</name><index>[<expr><name>n</name></expr>]</index></name><operator>-</operator><name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>L</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>R</name><init>=<expr><name>n</name></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>L</name><operator>&lt;</operator><name>R</name></expr>)</condition><block>{
		<if>if<condition>(<expr><name>L</name><operator>&lt;</operator><name>n</name><operator>-</operator><name>R</name><operator>+</operator><literal type="number">1</literal></expr>)</condition><then><block>{
			<if>if<condition>(<expr><literal type="number">1ll</literal><operator>*</operator><operator>(</operator><name><name>A</name><index>[<expr><name>L</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>A</name><index>[<expr><name>L</name></expr>]</index></name><operator>)</operator><operator>*</operator><name>L</name><operator>&gt;</operator><name>rem</name></expr>)</condition><then><block type="pseudo"><return>return <expr><operator>not</operator> <call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%I64d"</literal></expr></argument>,<argument><expr><name>Ans</name><operator>-</operator><operator>(</operator><name>rem</name><operator>/</operator><operator>(</operator><name>ll</name><operator>)</operator><name>L</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return></block></then>
			<else>else <block type="pseudo"><expr_stmt><expr><name>rem</name><operator>-=</operator><literal type="number">1ll</literal><operator>*</operator><operator>(</operator><name><name>A</name><index>[<expr><name>L</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>A</name><index>[<expr><name>L</name></expr>]</index></name><operator>)</operator><operator>*</operator><name>L</name></expr>;</expr_stmt></block></else></if>
			<expr_stmt><expr><operator>++</operator><name>L</name></expr>;</expr_stmt>
		}</block></then>
		<else>else<block>{
			<if>if<condition>(<expr><literal type="number">1ll</literal><operator>*</operator><operator>(</operator><name><name>A</name><index>[<expr><name>R</name></expr>]</index></name><operator>-</operator><name><name>A</name><index>[<expr><name>R</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>*</operator><operator>(</operator><name>n</name><operator>-</operator><name>R</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>&gt;</operator><name>rem</name></expr>)</condition><then><block type="pseudo"><return>return <expr><operator>not</operator> <call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%I64d"</literal></expr></argument>,<argument><expr><name>Ans</name><operator>-</operator><operator>(</operator><name>rem</name><operator>/</operator><call>(<name>ll</name>)<argument_list>(<argument><expr><name>n</name><operator>-</operator><name>R</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return></block></then>
			<else>else <block type="pseudo"><expr_stmt><expr><name>rem</name><operator>-=</operator><literal type="number">1ll</literal><operator>*</operator><operator>(</operator><name><name>A</name><index>[<expr><name>R</name></expr>]</index></name><operator>-</operator><name><name>A</name><index>[<expr><name>R</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>*</operator><operator>(</operator><name>n</name><operator>-</operator><name>R</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block></else></if>
			<expr_stmt><expr><operator>--</operator><name>R</name></expr>;</expr_stmt>
		}</block></else></if>
		<expr_stmt><expr><name>Ans</name><operator>=</operator><name><name>A</name><index>[<expr><name>R</name></expr>]</index></name><operator>-</operator><name><name>A</name><index>[<expr><name>L</name></expr>]</index></name></expr>;</expr_stmt>
	}</block></while>
	<return>return <expr><operator>not</operator> <call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%I64d"</literal></expr></argument>,<argument><expr><name>Ans</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
</unit>
