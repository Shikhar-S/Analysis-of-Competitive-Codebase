<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28933112_62478603.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<using>using <name>ll</name><init>=<type><name>long</name> <name>long</name></type></init>;</using>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>MOD</name><init>=<expr><operator>(</operator><name>ll</name><operator>)</operator><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<function><type><name>ll</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><name>a</name><operator>%</operator><name>b</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>b</name></expr>;</return></block></then>
    <else>else <block type="pseudo"><return>return <expr><call><name>gcd</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>a</name><operator>%</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</return></block></else></if>
}</block></function>

<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>p</name></decl>,<decl><type ref="prev"/><name>w</name></decl>,<decl><type ref="prev"/><name>d</name></decl>;</decl_stmt> <comment type="line">//w&gt;=d</comment>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>p</name><operator>&gt;&gt;</operator><name>w</name><operator>&gt;&gt;</operator><name>d</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>g</name><init>=<expr><call><name>gcd</name><argument_list>(<argument><expr><name>w</name></expr></argument>,<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>p</name><operator>%</operator><name>g</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then><block>{
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>-</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
        <return>return;</return>
    }</block></then></if>
    <expr_stmt><expr><name>p</name><operator>/=</operator><name>g</name></expr>;</expr_stmt> <expr_stmt><expr><name>w</name><operator>/=</operator><name>g</name></expr>;</expr_stmt> <expr_stmt><expr><name>d</name><operator>/=</operator><name>g</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>cnt</name><init>=<expr><literal type="number">0ll</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>p</name><operator>&gt;=</operator><literal type="number">0</literal></expr>)</condition><block>{
        <if>if<condition>(<expr><name>p</name><operator>%</operator><name>w</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
            <if>if<condition>(<expr><name>cnt</name><operator>+</operator><name>p</name><operator>/</operator><name>w</name><operator>&lt;=</operator><name>n</name></expr>)</condition><then><block>{
                <decl_stmt><decl><type><name>ll</name></type> <name>l</name><init>=<expr><name>n</name><operator>-</operator><name>p</name><operator>/</operator><name>w</name><operator>-</operator><name>cnt</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>p</name><operator>/</operator><name>w</name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name>cnt</name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name>l</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
            }</block></then><else>else<block>{
                <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>-</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
            }</block></else></if>
            <return>return;</return>
        }</block></then></if>
        <expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name><operator>-=</operator><name>d</name></expr>;</expr_stmt>
    }</block></while>

    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>-</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>

    <return>return;</return>
}</block></function>


<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
