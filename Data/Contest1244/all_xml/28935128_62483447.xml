<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28935128_62483447.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PB</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>push_back(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>make_pair(x,y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>boost</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(false),cin.tie(NULL);</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MOD</name> <init>= <expr><literal type="number">998244353</literal></expr></init></decl>;</decl_stmt>
<comment type="line">//#include &lt;ext/pb_ds/assoc_container.hpp&gt; // Common file </comment>
<comment type="line">//#include &lt;ext/pb_ds/tree_policy.hpp&gt;  </comment>
<comment type="line">//using namespace __gnu_pbds; </comment>
<comment type="line">//stringstream ss; string temp; ss&lt;&lt;str(original string) ss&gt;&gt;temp;</comment>
<decl_stmt><decl><type><name>int</name></type> <name><name>deg</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name> <init>= <expr><literal type="number">100005</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>c1</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>c2</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>c3</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name><name>g</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name>ver</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>par</name></decl></parameter>)</parameter_list>
<block>{
	<expr_stmt><expr><call><name><name>ver</name><operator>.</operator><name>PB</name></name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>auto</name></type> <name>x</name> <range>: <expr><name><name>g</name><index>[<expr><name>u</name></expr>]</index></name></expr></range></decl></init>)</control>
	<block>{
		<if>if<condition>(<expr><name>x</name><operator>!=</operator><name>par</name></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
}</block></function>

<function><type><name>int32_t</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{	
	<decl_stmt><decl><type><name>boost</name></type>
    <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ONLINE_JUDGE</name></cpp:ifndef>
        <name>freopen</name><argument_list>(<argument><expr><literal type="string">"input.txt"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"output.txt"</literal></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
  	
  	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
  	<block>{
  		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>c1</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
  	}</block></for>
  	<comment type="line">//int c2[n+1];</comment>
  	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
  	<block>{
  		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>c2</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
  	}</block></for>
  	<comment type="line">//int c3[n+1];</comment>
  	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
  	<block>{
  		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>c3</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
  	}</block></for>
  	<decl_stmt><decl><type><name>int</name></type> <name>flg</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
  	<block>{
  		<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>x</name><operator>&gt;&gt;</operator><name>y</name></expr>;</expr_stmt>
  		<expr_stmt><expr><name><name>g</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>PB</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  		<expr_stmt><expr><name><name>g</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>PB</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  		<expr_stmt><expr><name><name>deg</name><index>[<expr><name>x</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
  		<expr_stmt><expr><name><name>deg</name><index>[<expr><name>y</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
  		<if>if<condition>(<expr><name><name>deg</name><index>[<expr><name>x</name></expr>]</index></name><operator>&gt;</operator><literal type="number">2</literal> <operator>||</operator> <name><name>deg</name><index>[<expr><name>y</name></expr>]</index></name><operator>&gt;</operator><literal type="number">2</literal></expr>)</condition><then>
  		<block>{
  			<expr_stmt><expr><name>flg</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
  		}</block></then></if>
  	}</block></for>
  	<if>if<condition>(<expr><name>flg</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
  	<block>{
  		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"-1"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
  		<return>return <expr><literal type="number">0</literal></expr>;</return>
  	}</block></then>
  	<else>else
  	<block>{
  		<decl_stmt><decl><type><name>int</name></type> <name>d1</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
  		<block>{
  			<if>if<condition>(<expr><name><name>deg</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
  			<block>{
  				<expr_stmt><expr><name>d1</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
  				<break>break;</break>
  			}</block></then></if>
  		}</block></for>
  		<expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>d1</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  		<decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><literal type="number">1e18</literal></expr></init></decl>;</decl_stmt>
  		<decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name>mp</name></decl>;</decl_stmt>
  		<decl_stmt><decl><type><name>int</name></type> <name>flag</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  		<decl_stmt><decl><type><name>int</name></type> <name>cost</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
  		<block>{
  			<if>if<condition>(<expr><name>i</name><operator>%</operator><literal type="number">3</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
  				<block type="pseudo"><expr_stmt><expr><name>cost</name><operator>+=</operator><name><name>c1</name><index>[<expr><name><name>ver</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block></then>
  			<elseif>else <if>if<condition>(<expr><name>i</name><operator>%</operator><literal type="number">3</literal><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
  				<block type="pseudo"><expr_stmt><expr><name>cost</name><operator>+=</operator><name><name>c2</name><index>[<expr><name><name>ver</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block></then></if></elseif>
  			<else>else
  				<block type="pseudo"><expr_stmt><expr><name>cost</name><operator>+=</operator><name><name>c3</name><index>[<expr><name><name>ver</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block></else></if>
  		}</block></for>
  		<if>if<condition>(<expr><name>ans</name> <operator>&gt;</operator> <name>cost</name></expr>)</condition><then>
  		<block>{
  			<expr_stmt><expr><name>ans</name> <operator>=</operator> <name>cost</name></expr>;</expr_stmt>
  			<expr_stmt><expr><name>flag</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
  		}</block></then></if>
  		<expr_stmt><expr><name>cost</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
  		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
  		<block>{
  			<if>if<condition>(<expr><name>i</name><operator>%</operator><literal type="number">3</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
  				<block type="pseudo"><expr_stmt><expr><name>cost</name><operator>+=</operator><name><name>c1</name><index>[<expr><name><name>ver</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block></then>
  			<elseif>else <if>if<condition>(<expr><name>i</name><operator>%</operator><literal type="number">3</literal><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
  				<block type="pseudo"><expr_stmt><expr><name>cost</name><operator>+=</operator><name><name>c3</name><index>[<expr><name><name>ver</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block></then></if></elseif>
  			<else>else
  				<block type="pseudo"><expr_stmt><expr><name>cost</name><operator>+=</operator><name><name>c2</name><index>[<expr><name><name>ver</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block></else></if>
  		}</block></for>
  		<if>if<condition>(<expr><name>ans</name> <operator>&gt;</operator> <name>cost</name></expr>)</condition><then>
  		<block>{
  			<expr_stmt><expr><name>ans</name> <operator>=</operator> <name>cost</name></expr>;</expr_stmt>
  			<expr_stmt><expr><name>flag</name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt>
  		}</block></then></if>
  		<expr_stmt><expr><name>cost</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
  		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
  		<block>{
  			<if>if<condition>(<expr><name>i</name><operator>%</operator><literal type="number">3</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
  				<block type="pseudo"><expr_stmt><expr><name>cost</name><operator>+=</operator><name><name>c2</name><index>[<expr><name><name>ver</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block></then>
  			<elseif>else <if>if<condition>(<expr><name>i</name><operator>%</operator><literal type="number">3</literal><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
  				<block type="pseudo"><expr_stmt><expr><name>cost</name><operator>+=</operator><name><name>c1</name><index>[<expr><name><name>ver</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block></then></if></elseif>
  			<else>else
  				<block type="pseudo"><expr_stmt><expr><name>cost</name><operator>+=</operator><name><name>c3</name><index>[<expr><name><name>ver</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block></else></if>
  		}</block></for>
  		<if>if<condition>(<expr><name>ans</name> <operator>&gt;</operator> <name>cost</name></expr>)</condition><then>
  		<block>{
  			<expr_stmt><expr><name>ans</name> <operator>=</operator> <name>cost</name></expr>;</expr_stmt>
  			<expr_stmt><expr><name>flag</name><operator>=</operator><literal type="number">3</literal></expr>;</expr_stmt>
  		}</block></then></if>
  		<expr_stmt><expr><name>cost</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
  		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
  		<block>{
  			<if>if<condition>(<expr><name>i</name><operator>%</operator><literal type="number">3</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
  				<block type="pseudo"><expr_stmt><expr><name>cost</name><operator>+=</operator><name><name>c2</name><index>[<expr><name><name>ver</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block></then>
  			<elseif>else <if>if<condition>(<expr><name>i</name><operator>%</operator><literal type="number">3</literal><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
  				<block type="pseudo"><expr_stmt><expr><name>cost</name><operator>+=</operator><name><name>c3</name><index>[<expr><name><name>ver</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block></then></if></elseif>
  			<else>else
  				<block type="pseudo"><expr_stmt><expr><name>cost</name><operator>+=</operator><name><name>c1</name><index>[<expr><name><name>ver</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block></else></if>
  		}</block></for>
  		<if>if<condition>(<expr><name>ans</name> <operator>&gt;</operator> <name>cost</name></expr>)</condition><then>
  		<block>{
  			<expr_stmt><expr><name>ans</name> <operator>=</operator> <name>cost</name></expr>;</expr_stmt>
  			<expr_stmt><expr><name>flag</name><operator>=</operator><literal type="number">4</literal></expr>;</expr_stmt>
  		}</block></then></if>
  		<expr_stmt><expr><name>cost</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
  		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
  		<block>{
  			<if>if<condition>(<expr><name>i</name><operator>%</operator><literal type="number">3</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
  				<block type="pseudo"><expr_stmt><expr><name>cost</name><operator>+=</operator><name><name>c3</name><index>[<expr><name><name>ver</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block></then>
  			<elseif>else <if>if<condition>(<expr><name>i</name><operator>%</operator><literal type="number">3</literal><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
  				<block type="pseudo"><expr_stmt><expr><name>cost</name><operator>+=</operator><name><name>c1</name><index>[<expr><name><name>ver</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block></then></if></elseif>
  			<else>else
  				<block type="pseudo"><expr_stmt><expr><name>cost</name><operator>+=</operator><name><name>c2</name><index>[<expr><name><name>ver</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block></else></if>
  		}</block></for>
  		<if>if<condition>(<expr><name>ans</name> <operator>&gt;</operator> <name>cost</name></expr>)</condition><then>
  		<block>{
  			<expr_stmt><expr><name>ans</name> <operator>=</operator> <name>cost</name></expr>;</expr_stmt>
  			<expr_stmt><expr><name>flag</name><operator>=</operator><literal type="number">5</literal></expr>;</expr_stmt>
  		}</block></then></if>
  		<expr_stmt><expr><name>cost</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
  		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
  		<block>{
  			<if>if<condition>(<expr><name>i</name><operator>%</operator><literal type="number">3</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
  				<block type="pseudo"><expr_stmt><expr><name>cost</name><operator>+=</operator><name><name>c3</name><index>[<expr><name><name>ver</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block></then>
  			<elseif>else <if>if<condition>(<expr><name>i</name><operator>%</operator><literal type="number">3</literal><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
  				<block type="pseudo"><expr_stmt><expr><name>cost</name><operator>+=</operator><name><name>c2</name><index>[<expr><name><name>ver</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block></then></if></elseif>
  			<else>else
  				<block type="pseudo"><expr_stmt><expr><name>cost</name><operator>+=</operator><name><name>c1</name><index>[<expr><name><name>ver</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block></else></if>
  		}</block></for>
  		<if>if<condition>(<expr><name>ans</name> <operator>&gt;</operator> <name>cost</name></expr>)</condition><then>
  		<block>{
  			<expr_stmt><expr><name>ans</name> <operator>=</operator> <name>cost</name></expr>;</expr_stmt>
  			<expr_stmt><expr><name>flag</name><operator>=</operator><literal type="number">6</literal></expr>;</expr_stmt>
  		}</block></then></if>
  		<expr_stmt><expr><name>cost</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
  		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>

  		<if>if<condition>(<expr><name>flag</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
  		<block>{
  			<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	  		<block>{
	  			<if>if<condition>(<expr><name>i</name><operator>%</operator><literal type="number">3</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
	  				<block type="pseudo"><expr_stmt><expr><name><name>mp</name><index>[<expr><name><name>ver</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then>
	  			<elseif>else <if>if<condition>(<expr><name>i</name><operator>%</operator><literal type="number">3</literal><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
	  				<block type="pseudo"><expr_stmt><expr><name><name>mp</name><index>[<expr><name><name>ver</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block></then></if></elseif>
	  			<else>else
	  				<block type="pseudo"><expr_stmt><expr><name><name>mp</name><index>[<expr><name><name>ver</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>=</operator><literal type="number">3</literal></expr>;</expr_stmt></block></else></if>
	  		}</block></for>
  		}</block></then>
  		<elseif>else <if>if<condition>(<expr><name>flag</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then>
  		<block>{
  			<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	  		<block>{
	  			<if>if<condition>(<expr><name>i</name><operator>%</operator><literal type="number">3</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
	  				<block type="pseudo"><expr_stmt><expr><name><name>mp</name><index>[<expr><name><name>ver</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then>
	  			<elseif>else <if>if<condition>(<expr><name>i</name><operator>%</operator><literal type="number">3</literal><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
	  				<block type="pseudo"><expr_stmt><expr><name><name>mp</name><index>[<expr><name><name>ver</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block></then></if></elseif>
	  			<else>else
	  				<block type="pseudo"><expr_stmt><expr><name><name>mp</name><index>[<expr><name><name>ver</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt></block></else></if>
	  		}</block></for>
  		}</block></then></if></elseif>
  		<elseif>else <if>if<condition>(<expr><name>flag</name><operator>==</operator><literal type="number">3</literal></expr>)</condition><then>
  		<block>{
  			<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	  		<block>{
	  			<if>if<condition>(<expr><name>i</name><operator>%</operator><literal type="number">3</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
	  				<block type="pseudo"><expr_stmt><expr><name><name>mp</name><index>[<expr><name><name>ver</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block></then>
	  			<elseif>else <if>if<condition>(<expr><name>i</name><operator>%</operator><literal type="number">3</literal><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
	  				<block type="pseudo"><expr_stmt><expr><name><name>mp</name><index>[<expr><name><name>ver</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if></elseif>
	  			<else>else
	  				<block type="pseudo"><expr_stmt><expr><name><name>mp</name><index>[<expr><name><name>ver</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>=</operator><literal type="number">3</literal></expr>;</expr_stmt></block></else></if>
	  		}</block></for>
  		}</block></then></if></elseif>
  		<elseif>else <if>if<condition>(<expr><name>flag</name><operator>==</operator><literal type="number">4</literal></expr>)</condition><then>
  		<block>{
  			<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	  		<block>{
	  			<if>if<condition>(<expr><name>i</name><operator>%</operator><literal type="number">3</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
	  				<block type="pseudo"><expr_stmt><expr><name><name>mp</name><index>[<expr><name><name>ver</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block></then>
	  			<elseif>else <if>if<condition>(<expr><name>i</name><operator>%</operator><literal type="number">3</literal><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
	  				<block type="pseudo"><expr_stmt><expr><name><name>mp</name><index>[<expr><name><name>ver</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block></then></if></elseif>
	  			<else>else
	  				<block type="pseudo"><expr_stmt><expr><name><name>mp</name><index>[<expr><name><name>ver</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
	  		}</block></for>
  		}</block></then></if></elseif>
  		<elseif>else <if>if<condition>(<expr><name>flag</name><operator>==</operator><literal type="number">5</literal></expr>)</condition><then>
  		<block>{
  			<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	  		<block>{
	  			<if>if<condition>(<expr><name>i</name><operator>%</operator><literal type="number">3</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
	  				<block type="pseudo"><expr_stmt><expr><name><name>mp</name><index>[<expr><name><name>ver</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block></then>
	  			<elseif>else <if>if<condition>(<expr><name>i</name><operator>%</operator><literal type="number">3</literal><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
	  				<block type="pseudo"><expr_stmt><expr><name><name>mp</name><index>[<expr><name><name>ver</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if></elseif>
	  			<else>else
	  				<block type="pseudo"><expr_stmt><expr><name><name>mp</name><index>[<expr><name><name>ver</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt></block></else></if>
	  		}</block></for>
  		}</block></then></if></elseif>
  		<else>else
  		<block>{
  			<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	  		<block>{
	  			<if>if<condition>(<expr><name>i</name><operator>%</operator><literal type="number">3</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
	  				<block type="pseudo"><expr_stmt><expr><name><name>mp</name><index>[<expr><name><name>ver</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block></then>
	  			<elseif>else <if>if<condition>(<expr><name>i</name><operator>%</operator><literal type="number">3</literal><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
	  				<block type="pseudo"><expr_stmt><expr><name><name>mp</name><index>[<expr><name><name>ver</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block></then></if></elseif>
	  			<else>else
	  				<block type="pseudo"><expr_stmt><expr><name><name>mp</name><index>[<expr><name><name>ver</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
	  		}</block></for>
  		}</block></else></if>

  		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
  		<block>{
  			<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>mp</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;&lt;</operator><literal type="string">" "</literal></expr>;</expr_stmt>
  		}</block></for>
  		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
  	}</block></else></if>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function> 
</unit>
