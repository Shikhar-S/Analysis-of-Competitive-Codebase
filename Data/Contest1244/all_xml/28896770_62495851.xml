<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28896770_62495851.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<using>using <name><name>std</name><operator>::</operator><name>sort</name></name>;</using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name><init>=<expr><literal type="number">1e5</literal><operator>+</operator><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<struct>struct <name>X</name><block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>z</name></decl>,<decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>
	<function type="operator"><type><name>bool</name></type> <name>operator<name>&lt;</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>X</name> <modifier>&amp;</modifier></type><name>t</name></decl></parameter>)</parameter_list><specifier>const</specifier><block>{
		<return>return <expr><name>z</name><operator>&lt;</operator><name><name>t</name><operator>.</operator><name>z</name></name></expr>;</return>
	}</block></function>
</public>}</block><decl><name><name>a</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</struct>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>k</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>z</name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>s</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></for>
	<decl_stmt><decl><type><name>int</name></type> <name>l</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>r</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>a</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>a</name><operator>+</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block type="pseudo"><if>if<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>z</name><operator>==</operator><name><name>a</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><name>z</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><operator>++</operator><name><name>a</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><name>s</name></expr>;</expr_stmt></block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><name><name>a</name><index>[<expr><operator>++</operator><name>r</name></expr>]</index></name><operator>=</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></else></if></block></for>
	<expr_stmt><expr><name>n</name><operator>=</operator><name>r</name></expr>;</expr_stmt>
	<for>for<control>(<init>;</init><condition><expr><name>l</name><operator>!=</operator><name>r</name><operator>&amp;&amp;</operator><name>k</name></expr>;</condition><incr/>)</control><block>{
		<if>if<condition>(<expr><name><name>a</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>s</name><operator>&lt;=</operator><name><name>a</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><name>s</name></expr>)</condition><then><block>{
			<if>if<condition>(<expr><name>k</name><operator>&gt;=</operator><operator>(</operator><name><name>a</name><index>[<expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>z</name><operator>-</operator><name><name>a</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>z</name><operator>)</operator><operator>*</operator><operator>(</operator><name>ll</name><operator>)</operator><name><name>a</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>s</name></expr>)</condition><then><block>{
				<expr_stmt><expr><name>k</name><operator>-=</operator><operator>(</operator><name><name>a</name><index>[<expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>z</name><operator>-</operator><name><name>a</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>z</name><operator>)</operator><operator>*</operator><operator>(</operator><name>ll</name><operator>)</operator><name><name>a</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>s</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>a</name><index>[<expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>s</name><operator>+=</operator><name><name>a</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>s</name></expr>;</expr_stmt><expr_stmt><expr><operator>++</operator><name>l</name></expr>;</expr_stmt>
			}</block></then>
			<else>else<block>{
				<expr_stmt><expr><name><name>a</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>z</name><operator>+=</operator><name>k</name><operator>/</operator><name><name>a</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>s</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>k</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
			}</block></else></if>
		}</block></then>
		<else>else<block>{
			<if>if<condition>(<expr><name>k</name><operator>&gt;=</operator><operator>(</operator><name><name>a</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><name>z</name><operator>-</operator><name><name>a</name><index>[<expr><name>r</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>z</name><operator>)</operator><operator>*</operator><operator>(</operator><name>ll</name><operator>)</operator><name><name>a</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><name>s</name></expr>)</condition><then><block>{
				<expr_stmt><expr><name>k</name><operator>-=</operator><operator>(</operator><name><name>a</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><name>z</name><operator>-</operator><name><name>a</name><index>[<expr><name>r</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>z</name><operator>)</operator><operator>*</operator><operator>(</operator><name>ll</name><operator>)</operator><name><name>a</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><name>s</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>a</name><index>[<expr><name>r</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>s</name><operator>+=</operator><name><name>a</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><name>s</name></expr>;</expr_stmt><expr_stmt><expr><operator>--</operator><name>r</name></expr>;</expr_stmt>
			}</block></then>
			<else>else<block>{
				<expr_stmt><expr><name><name>a</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><name>z</name><operator>-=</operator><name>k</name><operator>/</operator><name><name>a</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><name>s</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>k</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
			}</block></else></if>
		}</block></else></if>
	}</block></for>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><name><name>a</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><name>z</name><operator>-</operator><name><name>a</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
