<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28934108_62494843.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name><name>a</name><index>[<expr><literal type="number">100010</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>poz1</name></decl>, <decl><type ref="prev"/><name>poz2</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>cautbin1</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>st</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>dr</name><init>=<expr><name>n</name></expr></init></decl>,<decl><type ref="prev"/><name>mid</name></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>st</name><operator>&lt;=</operator><name>dr</name></expr>)</condition>
    <block>{
        <expr_stmt><expr><name>mid</name><operator>=</operator><operator>(</operator><name>st</name><operator>+</operator><name>dr</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
        <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>mid</name></expr>]</index></name> <operator>&lt;=</operator> <name>x</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>st</name><operator>=</operator><name>mid</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><name>dr</name><operator>=</operator><name>mid</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
    }</block></while>
    <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>dr</name></expr>]</index></name><operator>==</operator><name>x</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>dr</name></expr>;</return></block></then></if>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>cautbin2</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>st</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>dr</name><init>=<expr><name>n</name></expr></init></decl>,<decl><type ref="prev"/><name>mid</name></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>st</name><operator>&lt;=</operator><name>dr</name></expr>)</condition>
    <block>{
        <expr_stmt><expr><name>mid</name><operator>=</operator><operator>(</operator><name>st</name><operator>+</operator><name>dr</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
        <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>mid</name></expr>]</index></name><operator>&lt;</operator><name>x</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>st</name><operator>=</operator><name>mid</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><name>dr</name><operator>=</operator><name>mid</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
    }</block></while>
    <return>return <expr><name>st</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{

    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>k</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>st</name></decl>, <decl><type ref="prev"/><name>fn</name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>a</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>a</name><operator>+</operator><literal type="number">1</literal><operator>+</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>st</name> <operator>=</operator> <name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>fn</name> <operator>=</operator> <name><name>a</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>k</name> <operator>&amp;&amp;</operator> <name>st</name> <operator>&lt;</operator> <name>fn</name></expr>)</condition><block>{
        <expr_stmt><expr><name>poz1</name> <operator>=</operator> <call><name>cautbin1</name><argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>poz2</name> <operator>=</operator> <call><name>cautbin2</name><argument_list>(<argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>poz1</name> <operator>&lt;</operator> <operator>(</operator><name>n</name> <operator>-</operator> <name>poz2</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><then><block>{
            <if>if<condition>(<expr><name>k</name> <operator>&gt;=</operator> <operator>(</operator><name><name>a</name><index>[<expr><name>poz1</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name>st</name><operator>)</operator><operator>*</operator><name>poz1</name></expr> )</condition><then><block>{
                <expr_stmt><expr><name>k</name><operator>-=</operator><operator>(</operator><name><name>a</name><index>[<expr><name>poz1</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name>st</name><operator>)</operator><operator>*</operator><name>poz1</name></expr> ;</expr_stmt>
                <expr_stmt><expr><name>st</name> <operator>=</operator> <name><name>a</name><index>[<expr><name>poz1</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
            }</block></then>
            <else>else
            <block>{

                <expr_stmt><expr><name>st</name> <operator>+=</operator><name>k</name><operator>/</operator><name>poz1</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then>
        <else>else <block>{
            <if>if<condition>( <expr><name>k</name> <operator>&gt;=</operator> <operator>(</operator><name>fn</name> <operator>-</operator> <name><name>a</name><index>[<expr><name>poz2</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>*</operator><operator>(</operator><name>n</name> <operator>-</operator> <name>poz2</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr> )</condition><then><block>{
                <expr_stmt><expr><name>k</name> <operator>-=</operator> <operator>(</operator><name>fn</name> <operator>-</operator> <name><name>a</name><index>[<expr><name>poz2</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>*</operator><operator>(</operator><name>n</name> <operator>-</operator> <name>poz2</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>fn</name> <operator>=</operator> <name><name>a</name><index>[<expr><name>poz2</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{

                <expr_stmt><expr><name>fn</name> <operator>-=</operator> <name>k</name><operator>/</operator><operator>(</operator><name>n</name> <operator>-</operator> <name>poz2</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>k</name> <operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
            }</block></else></if>
        }</block></else></if>
    }</block></while>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>fn</name> <operator>-</operator> <name>st</name></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>


</unit>
