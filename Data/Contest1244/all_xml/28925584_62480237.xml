<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28925584_62480237.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>reg</name></cpp:macro> <cpp:value>register</cpp:value></cpp:define>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(reg int i=a,i##end=b;i&lt;=i##end;++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>drep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(reg int i=a,i##end=b;i&gt;=i##end;--i)</cpp:value></cpp:define>

<decl_stmt><decl><type><name>char</name></type> <name>IO</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>rd</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>int</name></type> <name>s</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>f</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><name>IO</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block type="pseudo"><if>if<condition>(<expr><name>IO</name><operator>==</operator><literal type="char">'-'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>f</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if></block></while>
	<do>do <block type="pseudo"><expr_stmt><expr><name>s</name><operator>=</operator><operator>(</operator><name>s</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><operator>(</operator><name>s</name><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator><operator>+</operator><operator>(</operator><name>IO</name><operator>^</operator><literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt></block>
	while<condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><name>IO</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>;</do>
	<return>return <expr><ternary><condition><expr><name>f</name></expr>?</condition><then><expr><operator>-</operator><name>s</name></expr></then><else>:<expr><name>s</name></expr></else></ternary></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name><init>=<expr><literal type="number">1e3</literal><operator>+</operator><literal type="number">10</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>p</name></decl>,<decl><type ref="prev"/><name>w</name></decl>,<decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>

<function><type><name>ll</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{ <return>return <expr><ternary><condition><expr><name>b</name><operator>==</operator><literal type="number">0</literal></expr>?</condition><then><expr><name>a</name></expr></then><else>:<expr><call><name>gcd</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>a</name><operator>%</operator><name>b</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return> }</block></function>
<function><type><name>void</name></type> <name>Exgcd</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>ll</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>,<parameter><decl><type><name>ll</name> <modifier>&amp;</modifier></type><name>y</name></decl></parameter>)</parameter_list> <block>{
	<if>if<condition>(<expr><name>b</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>x</name><operator>=</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></then>
	<else>else <block type="pseudo"><expr_stmt><expr><call><name>Exgcd</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>a</name><operator>%</operator><name>b</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><name>y</name><operator>-=</operator><name>a</name><operator>/</operator><name>b</name><operator>*</operator><name>x</name></expr>;</expr_stmt></block></else></if>
}</block></function>



<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>p</name><operator>&gt;&gt;</operator><name>w</name><operator>&gt;&gt;</operator><name>d</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>fl</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<if>if<condition>(<expr><name>w</name><operator>&gt;</operator><name>d</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>w</name></expr></argument>,<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>fl</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
	}</block></then></if>
	<decl_stmt><decl><type><name>ll</name></type> <name>g</name><init>=<expr><call><name>gcd</name><argument_list>(<argument><expr><name>d</name></expr></argument>,<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if>if<condition>(<expr><name>p</name><operator>%</operator><name>g</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><literal type="number">0</literal></expr>;</return></block></then></if>
	<expr_stmt><expr><name>p</name><operator>/=</operator><name>g</name></expr><operator>,</operator><expr><name>w</name><operator>/=</operator><name>g</name></expr><operator>,</operator><expr><name>d</name><operator>/=</operator><name>g</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>Exgcd</name><argument_list>(<argument><expr><name>w</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>x</name><operator>%=</operator><name>d</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>x</name><operator>=</operator><name>x</name><operator>*</operator><operator>(</operator><name>p</name><operator>%</operator><name>d</name><operator>)</operator><operator>%</operator><name>d</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>x</name><operator>=</operator><operator>(</operator><name>x</name><operator>%</operator><name>d</name><operator>+</operator><name>d</name><operator>)</operator><operator>%</operator><name>d</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>y</name><operator>=</operator><operator>(</operator><name>p</name><operator>-</operator><name>w</name><operator>*</operator><name>x</name><operator>)</operator><operator>/</operator><name>d</name></expr>;</expr_stmt>
	<comment type="line">//cout&lt;&lt;"#"&lt;&lt;x&lt;&lt;' '&lt;&lt;y&lt;&lt;endl;</comment>
	<if>if<condition>(<expr><name>x</name><operator>&gt;=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>y</name><operator>&gt;=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>x</name><operator>+</operator><name>y</name><operator>&lt;=</operator><name>n</name></expr>)</condition><then> <block>{
		<if>if<condition>(<expr><name>fl</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>x</name><operator>&lt;&lt;</operator><literal type="char">' '</literal><operator>&lt;&lt;</operator><name>y</name><operator>&lt;&lt;</operator><literal type="char">' '</literal><operator>&lt;&lt;</operator><name>n</name><operator>-</operator><name>x</name><operator>-</operator><name>y</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	}</block></then>
	<else>else <block type="pseudo"><expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
}</block></function>






</unit>
