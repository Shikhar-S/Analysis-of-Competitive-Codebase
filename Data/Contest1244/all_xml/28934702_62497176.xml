<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28934702_62497176.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fstream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdlib&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
 
<using>using <namespace>namespace <name>std</name>;</namespace></using>
 
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
 
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>INF</name> <init>= <expr><literal type="number">1e9</literal></expr></init></decl>, <decl><type ref="prev"/><name>MOD</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>, <decl><type ref="prev"/><name>MOD2</name> <init>= <expr><literal type="number">1e6</literal> <operator>+</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ll</name></type> <name><name>a</name><index>[<expr><literal type="number">1000000</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name><name>p_l</name><index>[<expr><literal type="number">1000000</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>p_r</name><index>[<expr><literal type="number">1000000</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>ans</name> <init>= <expr><literal type="number">1e18</literal></expr></init></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
 
<function><type><name>int</name></type> <name>main</name> <parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>

	<for>for <control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<expr_stmt><expr><call><name>scanf</name> <argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>

	<expr_stmt><expr><call><name>sort</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>a</name> <operator>+</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<expr_stmt><expr><name><name>p_l</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>p_l</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>i</name> <operator>*</operator> <operator>(</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>a</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
	}</block></for>

	<for>for <control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><name>n</name> <operator>-</operator> <literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{
		<expr_stmt><expr><name><name>p_r</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>p_r</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>n</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>i</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>a</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
	}</block></for>

	<for>for <control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<decl_stmt><decl><type><name>ll</name></type> <name>left</name> <init>= <expr><name>k</name> <operator>-</operator> <name><name>p_r</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>left</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
		<decl_stmt><decl><type><name>ll</name></type> <name>v</name> <init>= <expr><call><name>upper_bound</name> <argument_list>(<argument><expr><name>p_l</name></expr></argument>, <argument><expr><name>p_l</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><name>left</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>p_l</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>v</name><operator>--</operator></expr>;</expr_stmt>

		<expr_stmt><expr><name>left</name> <operator>-=</operator> <name><name>p_l</name><index>[<expr><name>v</name></expr>]</index></name></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>ll</name></type> <name>r</name> <init>= <expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ll</name></type> <name>l</name> <init>= <expr><name><name>a</name><index>[<expr><name>v</name></expr>]</index></name> <operator>+</operator> <name>left</name> <operator>/</operator> <operator>(</operator><name>v</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>ans</name> <operator>=</operator> <call><name>min</name> <argument_list>(<argument><expr><name>ans</name></expr></argument>, <argument><expr><call><name>max</name> <argument_list>(<argument><expr><literal type="number">0LL</literal></expr></argument>, <argument><expr><name>r</name> <operator>-</operator> <name>l</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>

	<expr_stmt><expr><call><name>reverse</name> <argument_list>(<argument><expr><name>p_r</name></expr></argument>, <argument><expr><name>p_r</name> <operator>+</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<decl_stmt><decl><type><name>ll</name></type> <name>left</name> <init>= <expr><name>k</name> <operator>-</operator> <name><name>p_l</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>left</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
		<decl_stmt><decl><type><name>ll</name></type> <name>v</name> <init>= <expr><call><name>upper_bound</name> <argument_list>(<argument><expr><name>p_r</name></expr></argument>, <argument><expr><name>p_r</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><name>left</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>p_r</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>v</name><operator>--</operator></expr>;</expr_stmt>


		<expr_stmt><expr><name>left</name> <operator>-=</operator> <name><name>p_r</name><index>[<expr><name>v</name></expr>]</index></name></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>ll</name></type> <name>r</name> <init>= <expr><name><name>a</name><index>[<expr><name>n</name> <operator>-</operator> <name>v</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name>left</name> <operator>/</operator> <operator>(</operator><name>v</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ll</name></type> <name>l</name> <init>= <expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>ans</name> <operator>=</operator> <call><name>min</name> <argument_list>(<argument><expr><name>ans</name></expr></argument>, <argument><expr><call><name>max</name> <argument_list>(<argument><expr><literal type="number">0LL</literal></expr></argument>, <argument><expr><name>r</name> <operator>-</operator> <name>l</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>

	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name></expr>;</expr_stmt>
}</block></function></unit>
