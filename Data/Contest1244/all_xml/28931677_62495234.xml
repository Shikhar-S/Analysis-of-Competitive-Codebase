<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28931677_62495234.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fs</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sc</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mx</name></cpp:macro> <cpp:value>100005</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;int, int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mkp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a.begin(),a.end()</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>k</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name><name>a</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name><name>cum</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>a</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name>INT_MAX</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>a</name><operator>+</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cum</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>n</name><operator>-</operator><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><name><name>cum</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>cum</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><name><name>cum</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><operator>(</operator><literal type="number">1ll</literal> <operator>&lt;&lt;</operator> <literal type="number">60</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<comment type="line">// for(int i = 0; i&lt;=n; i++)</comment>
	<comment type="line">// 	cout &lt;&lt; a[i] &lt;&lt; " ";</comment>
	<comment type="line">// cout &lt;&lt; endl;</comment>
	<comment type="line">// for(int i = 0; i&lt;=n; i++)</comment>
	<comment type="line">// 	cout &lt;&lt; cum[i] &lt;&lt; " ";</comment>
	<comment type="line">// cout &lt;&lt; endl;</comment>
		<comment type="line">// cout &lt;&lt; cum[0]-(n-0)*a[0] &lt;&lt; endl;</comment>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><name>sum</name> <operator>=</operator> <literal type="number">1ll</literal> <operator>*</operator> <operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <operator>(</operator><name><name>cum</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>cum</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>ll</name></type> <name>nwk</name> <init>= <expr><name>k</name><operator>-</operator><name>sum</name></expr></init></decl>;</decl_stmt>
		<comment type="line">// cout &lt;&lt; sum &lt;&lt; " - " &lt;&lt; nwk &lt;&lt; endl;</comment>
		<if>if<condition>(<expr><name>nwk</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
		<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><name>i</name></expr></init></decl>, <decl><type ref="prev"/><name>r</name> <init>= <expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 
		<while>while<condition>(<expr><name>l</name> <operator>&lt;=</operator> <name>r</name></expr>)</condition><block>{
			<decl_stmt><decl><type><name>int</name></type> <name>mid</name> <init>= <expr><operator>(</operator><name>l</name> <operator>+</operator> <name>r</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
			<if>if<condition>(<expr><name><name>cum</name><index>[<expr><name>mid</name></expr>]</index></name><operator>-</operator><literal type="number">1ll</literal><operator>*</operator><operator>(</operator><name>n</name><operator>-</operator><name>mid</name><operator>)</operator><operator>*</operator><name><name>a</name><index>[<expr><name>mid</name></expr>]</index></name> <operator>&lt;=</operator> <name>nwk</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>r</name> <operator>=</operator> <name>mid</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then>
			<else>else <block type="pseudo"><expr_stmt><expr><name>l</name> <operator>=</operator> <name>mid</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
		}</block></while>
		<expr_stmt><expr><name>r</name><operator>++</operator></expr>;</expr_stmt>
		<comment type="line">// cout &lt;&lt; i &lt;&lt; " " &lt;&lt; r &lt;&lt; " " &lt;&lt; cum[r] - (n-r)*a[r] &lt;&lt; endl;</comment>
		<if>if<condition>(<expr><name>r</name> <operator>&lt;</operator> <name>n</name></expr>)</condition><then><block>{
			<decl_stmt><decl><type><name>ll</name></type> <name>baki</name> <init>= <expr><name>nwk</name> <operator>-</operator> <operator>(</operator><name><name>cum</name><index>[<expr><name>r</name></expr>]</index></name> <operator>-</operator> <literal type="number">1ll</literal><operator>*</operator><operator>(</operator><name>n</name><operator>-</operator><name>r</name><operator>)</operator><operator>*</operator><name><name>a</name><index>[<expr><name>r</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
			<comment type="line">// cout &lt;&lt; i &lt;&lt; " " &lt;&lt; r &lt;&lt; " " &lt;&lt; baki &lt;&lt; endl;</comment>
			<expr_stmt><expr><name>ans</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>ans</name></expr></argument>, <argument><expr><call><name>max</name><argument_list>(<argument><expr><literal type="number">0ll</literal></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><name>r</name></expr>]</index></name> <operator>-</operator> <call><name>min</name><argument_list>(<argument><expr><ternary><condition><expr><name>i</name><operator>&lt;</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr>?</condition><then><expr><name><name>a</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></then><else>:<expr><name>INT_MAX</name></expr></else></ternary></expr></argument>, <argument><expr><name>baki</name><operator>/</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>ans</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>ans</name></expr></argument>, <argument><expr><call><name>max</name><argument_list>(<argument><expr><literal type="number">0ll</literal></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><name>r</name></expr>]</index></name> <operator>-</operator> <call><name>min</name><argument_list>(<argument><expr><ternary><condition><expr><name>r</name></expr>?</condition><then><expr><name><name>a</name><index>[<expr><name>r</name></expr>]</index></name><operator>-</operator><name><name>a</name><index>[<expr><name>r</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></then><else>:<expr><name>INT_MAX</name></expr></else></ternary></expr></argument>, <argument><expr><name>baki</name><operator>/</operator><operator>(</operator><name>n</name><operator>-</operator><name>r</name><operator>)</operator></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>

	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><name>sum</name> <operator>=</operator> <name><name>cum</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">1ll</literal><operator>*</operator><operator>(</operator><name>n</name><operator>-</operator><name>i</name><operator>)</operator> <operator>*</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>ll</name></type> <name>nwk</name> <init>= <expr><name>k</name><operator>-</operator><name>sum</name></expr></init></decl>;</decl_stmt>
		<comment type="line">// cout &lt;&lt; sum &lt;&lt; " - " &lt;&lt; nwk &lt;&lt; endl;</comment>
		<if>if<condition>(<expr><name>nwk</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
		<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>r</name> <init>= <expr><name>i</name></expr></init></decl>;</decl_stmt> 
		<while>while<condition>(<expr><name>l</name> <operator>&lt;=</operator> <name>r</name></expr>)</condition><block>{
			<decl_stmt><decl><type><name>int</name></type> <name>mid</name> <init>= <expr><operator>(</operator><name>l</name> <operator>+</operator> <name>r</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
			<if>if<condition>(<expr><operator>(</operator><name>mid</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name><name>a</name><index>[<expr><name>mid</name></expr>]</index></name> <operator>-</operator> <operator>(</operator><name><name>cum</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>cum</name><index>[<expr><name>mid</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&lt;=</operator> <name>nwk</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>l</name> <operator>=</operator> <name>mid</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then>
			<else>else <block type="pseudo"><expr_stmt><expr><name>r</name> <operator>=</operator> <name>mid</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
		}</block></while>
		<expr_stmt><expr><name>l</name><operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>r</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
		<comment type="line">// cout &lt;&lt; i &lt;&lt; " " &lt;&lt; r &lt;&lt; " " &lt;&lt; cum[r] - (n-r)*a[r] &lt;&lt; endl;</comment>
		<if>if<condition>(<expr><name>r</name> <operator>&lt;</operator> <name>n</name></expr>)</condition><then><block>{
			<decl_stmt><decl><type><name>ll</name></type> <name>baki</name> <init>= <expr><name>nwk</name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>r</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name><name>a</name><index>[<expr><name>r</name></expr>]</index></name> <operator>-</operator> <operator>(</operator><name><name>cum</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>cum</name><index>[<expr><name>r</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
			<comment type="line">// cout &lt;&lt; i &lt;&lt; " " &lt;&lt; r &lt;&lt; " " &lt;&lt; baki &lt;&lt; endl;</comment>
			<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>ans</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>ans</name></expr></argument>, <argument><expr><call><name>max</name><argument_list>(<argument><expr><literal type="number">0ll</literal></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><name>r</name></expr>]</index></name> <operator>-</operator> <call><name>min</name><argument_list>(<argument><expr><ternary><condition><expr><name>i</name><operator>&lt;</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr>?</condition><then><expr><name><name>a</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></then><else>:<expr><name>INT_MAX</name></expr></else></ternary></expr></argument>, <argument><expr><name>baki</name><operator>/</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>ans</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>ans</name></expr></argument>, <argument><expr><call><name>max</name><argument_list>(<argument><expr><literal type="number">0ll</literal></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><name>r</name></expr>]</index></name> <operator>-</operator> <call><name>min</name><argument_list>(<argument><expr><ternary><condition><expr><name>r</name></expr>?</condition><then><expr><name><name>a</name><index>[<expr><name>r</name></expr>]</index></name><operator>-</operator><name><name>a</name><index>[<expr><name>r</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></then><else>:<expr><name>INT_MAX</name></expr></else></ternary></expr></argument>, <argument><expr><name>baki</name><operator>/</operator><operator>(</operator><name>n</name><operator>-</operator><name>r</name><operator>)</operator></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>, <argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
