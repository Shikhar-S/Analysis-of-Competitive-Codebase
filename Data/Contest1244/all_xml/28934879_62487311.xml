<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28934879_62487311.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R</name></cpp:macro> <cpp:value>register</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">2e6</literal><operator>+</operator><literal type="number">200</literal></expr></init></decl>;</decl_stmt>
<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>Ruby</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>Ruby</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list>
<block>{
	<expr_stmt><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name>ch</name><init>=<expr><call><name>getchar</name><argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>w</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>w</name><operator>=</operator><operator>(</operator><name>ch</name><operator>==</operator><literal type="char">'-'</literal><operator>)</operator></expr><operator>,</operator> <expr><name>ch</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
	<while>while<condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>x</name><operator>=</operator><operator>(</operator><name>x</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><operator>(</operator><name>x</name><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator><operator>+</operator><operator>(</operator><name>ch</name><operator>^</operator><literal type="number">48</literal><operator>)</operator></expr><operator>,</operator> <expr><name>ch</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
	<expr_stmt><expr><name>x</name><operator>=</operator><ternary><condition><expr><name>w</name></expr>?</condition><then><expr><operator>-</operator><name>x</name></expr></then><else>:<expr><name>x</name></expr></else></ternary></expr>;</expr_stmt>
}</block></function>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name><name>deg</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name>root</name></decl>, <decl><type ref="prev"/><name>node3</name></decl>, <decl><type ref="prev"/><name>node2</name></decl>, <decl><type ref="prev"/><name><name>hd</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>nxt</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>to</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name>bs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>cost</name><index>[<expr><name>N</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ll</name></type> <name><name>chose</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>color</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>maxx</name><init>=<expr><literal type="number">1e17</literal></expr></init></decl>, <decl><type ref="prev"/><name>now</name></decl>;</decl_stmt>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>addedg</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>qa</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>qb</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name><name>nxt</name><index>[<expr><operator>++</operator><name>bs</name></expr>]</index></name><operator>=</operator><name><name>hd</name><index>[<expr><name>qa</name></expr>]</index></name></expr><operator>,</operator> <expr><name><name>to</name><index>[<expr><name>bs</name></expr>]</index></name><operator>=</operator><name>qb</name></expr><operator>,</operator> <expr><name><name>hd</name><index>[<expr><name>qa</name></expr>]</index></name><operator>=</operator><name>bs</name></expr>;</expr_stmt>
}</block></function>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>father</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>color1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>color2</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>tmp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name><name>vis</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt> <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>vis</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>vis</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>vis</name><index>[<expr><name>color1</name></expr>]</index></name><operator>=</operator><name><name>vis</name><index>[<expr><name>color2</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>R</name> <name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;=</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<if>if<condition>(<expr><operator>!</operator><name><name>vis</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>now</name><operator>+=</operator><name><name>cost</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt> 
			<expr_stmt><expr><name>tmp</name><operator>=</operator><name>j</name></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>	
	<for>for<control>(<init><decl><type><name>R</name> <name>int</name></type> <name>i</name><init>=<expr><name><name>hd</name><index>[<expr><name>u</name></expr>]</index></name></expr></init></decl>;</init> <condition><expr><name>i</name></expr>;</condition> <incr><expr><name>i</name><operator>=</operator><name><name>nxt</name><index>[<expr><name>i</name></expr>]</index></name></expr></incr>)</control>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>v</name><init>=<expr><name><name>to</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt> <if>if<condition>(<expr><name>v</name><operator>==</operator><name>father</name></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
		<expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>color2</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	
	}</block></for>
}</block></function>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>getnode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>father</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dep</name></decl></parameter>)</parameter_list>
<block>{
	<if>if<condition>(<expr><name>dep</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>node2</name><operator>=</operator><name>u</name></expr>;</expr_stmt></block></then></if> <if>if<condition>(<expr><name>dep</name><operator>==</operator><literal type="number">3</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>node3</name><operator>=</operator><name>u</name></expr>;</expr_stmt></block></then></if>
	<if>if<condition>(<expr><name>dep</name><operator>&gt;</operator><literal type="number">3</literal></expr>)</condition><then><block type="pseudo"><return>return;</return></block></then></if>
	<for>for<control>(<init><decl><type><name>R</name> <name>int</name></type> <name>i</name><init>=<expr><name><name>hd</name><index>[<expr><name>u</name></expr>]</index></name></expr></init></decl>;</init> <condition><expr><name>i</name></expr>;</condition> <incr><expr><name>i</name><operator>=</operator><name><name>nxt</name><index>[<expr><name>i</name></expr>]</index></name></expr></incr>)</control>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>v</name><init>=<expr><name><name>to</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt> <if>if<condition>(<expr><name>v</name><operator>==</operator><name>father</name></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
		<expr_stmt><expr><call><name>getnode</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>dep</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
}</block></function>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>dfs2</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>father</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>color1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>color2</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>tmp</name></decl>;</decl_stmt><comment type="line">// cout&lt;&lt;u&lt;&lt;" "&lt;&lt;color1&lt;&lt;" "&lt;&lt;color2&lt;&lt;endl;</comment>
	<decl_stmt><decl><type><name>int</name></type> <name><name>vis</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt> <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>vis</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>vis</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name><name>vis</name><index>[<expr><name>color1</name></expr>]</index></name><operator>=</operator><name><name>vis</name><index>[<expr><name>color2</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>R</name> <name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;=</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<if>if<condition>(<expr><operator>!</operator><name><name>vis</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name><name>chose</name><index>[<expr><name>u</name></expr>]</index></name><operator>=</operator><name>j</name></expr>;</expr_stmt> <expr_stmt><expr><name>tmp</name><operator>=</operator><name>j</name></expr>;</expr_stmt>
<comment type="line">//			cout&lt;&lt;u&lt;&lt;" "&lt;&lt;color1&lt;&lt;" cnm "&lt;&lt;color2&lt;&lt;" "&lt;&lt;j&lt;&lt;endl;	</comment>
		}</block></then></if>
	}</block></for>	
	<for>for<control>(<init><decl><type><name>R</name> <name>int</name></type> <name>i</name><init>=<expr><name><name>hd</name><index>[<expr><name>u</name></expr>]</index></name></expr></init></decl>;</init> <condition><expr><name>i</name></expr>;</condition> <incr><expr><name>i</name><operator>=</operator><name><name>nxt</name><index>[<expr><name>i</name></expr>]</index></name></expr></incr>)</control>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>v</name><init>=<expr><name><name>to</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt> <if>if<condition>(<expr><name>v</name><operator>==</operator><name>father</name></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
			<expr_stmt><expr><call><name>dfs2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>color2</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>R</name> <name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;=</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
	<block type="pseudo"><for>for<control>(<init><decl><type><name>R</name> <name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name><name>cost</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for></block></for>
	<for>for<control>(<init><decl><type><name>R</name> <name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>qa</name></decl>, <decl><type ref="prev"/><name>qb</name></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>qa</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>read</name><argument_list>(<argument><expr><name>qb</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>addedg</name><argument_list>(<argument><expr><name>qa</name></expr></argument>, <argument><expr><name>qb</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>addedg</name><argument_list>(<argument><expr><name>qb</name></expr></argument>, <argument><expr><name>qa</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name><name>deg</name><index>[<expr><name>qa</name></expr>]</index></name><operator>++</operator></expr><operator>,</operator> <expr><name><name>deg</name><index>[<expr><name>qb</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>R</name> <name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<if>if<condition>(<expr><name><name>deg</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>root</name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></then></if>
		<if>if<condition>(<expr><name><name>deg</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;</operator><literal type="number">2</literal></expr>)</condition><then><block>{<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-1\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><literal type="number">0</literal></expr>;</return>}</block></then></if>
	}</block></for>
	<expr_stmt><expr><call><name>getnode</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line">// cout&lt;&lt;root&lt;&lt;" "&lt;&lt;node2&lt;&lt;" "&lt;&lt;node3&lt;&lt;endl;</comment>
	<for>for<control>(<init><decl><type><name>R</name> <name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<for>for<control>(<init><decl><type><name>R</name> <name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;=</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
		<block>{
			<expr_stmt><expr><name>now</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt> 
			<if>if<condition>(<expr><name>i</name><operator>!=</operator><name>j</name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name>now</name><operator>+=</operator><name><name>cost</name><index>[<expr><name>root</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>cost</name><index>[<expr><name>node2</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>node3</name></expr></argument>, <argument><expr><name>node2</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if>if<condition>(<expr><name>now</name><operator>&lt;</operator><name>maxx</name></expr>)</condition><then>
				<block>{
					<expr_stmt><expr><name>maxx</name><operator>=</operator><name>now</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>color</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name>i</name></expr><operator>,</operator> <expr><name><name>color</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name>j</name></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then></if>
		}</block></for>
	}</block></for>
	<expr_stmt><expr><name><name>chose</name><index>[<expr><name>root</name></expr>]</index></name><operator>=</operator><name><name>color</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr><operator>,</operator> <expr><name><name>chose</name><index>[<expr><name>node2</name></expr>]</index></name><operator>=</operator><name><name>color</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<comment type="line">//	cout&lt;&lt;color[0]&lt;&lt;" ?? "&lt;&lt;color[1]&lt;&lt;endl;</comment>
	<expr_stmt><expr><call><name>dfs2</name><argument_list>(<argument><expr><name>node3</name></expr></argument>, <argument><expr><name>node2</name></expr></argument>, <argument><expr><name><name>color</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>color</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%I64d\n"</literal></expr></argument>, <argument><expr><name>maxx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>R</name> <name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d "</literal></expr></argument>, <argument><expr><name><name>chose</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
