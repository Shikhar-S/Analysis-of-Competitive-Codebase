<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28926354_62481687.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<class>class <name>Triplet</name>
<block>{<private type="default">
	</private><public>public:
	<decl_stmt><decl><type><name>ll</name></type>  <name>x</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>y</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>GCD</name></decl>;</decl_stmt>
</public>}</block>;</class>

<function><type><name>Triplet</name></type> <name>EuclidAlgo</name> <parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list>      
<block>{
	<if>if<condition>(<expr><name>b</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
	<block>{
		<decl_stmt><decl><type><name>Triplet</name></type> <name>t</name></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>t</name><operator>.</operator><name>GCD</name></name><operator>=</operator><name>a</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>t</name><operator>.</operator><name>x</name></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>t</name><operator>.</operator><name>y</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
		<return>return <expr><name>t</name></expr>;</return>
	}</block></then></if>
	<decl_stmt><decl><type><name>Triplet</name></type> <name>smallAns</name><init>=<expr><call><name>EuclidAlgo</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>a</name><operator>%</operator><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Triplet</name></type> <name>t</name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>t</name><operator>.</operator><name>GCD</name></name><operator>=</operator><name><name>smallAns</name><operator>.</operator><name>GCD</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>t</name><operator>.</operator><name>x</name></name><operator>=</operator><name><name>smallAns</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>t</name><operator>.</operator><name>y</name></name><operator>=</operator><name><name>smallAns</name><operator>.</operator><name>x</name></name><operator>-</operator><operator>(</operator><name>a</name><operator>/</operator><name>b</name><operator>)</operator><operator>*</operator><name><name>smallAns</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
	<return>return <expr><name>t</name></expr>;</return>
}</block></function>
<function><type><name>ll</name></type> <name>MultiplicativeModuloInverse</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>m</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>Triplet</name></type> <name>t</name><init>=<expr><call><name>EuclidAlgo</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<return>return <expr><operator>(</operator><name><name>t</name><operator>.</operator><name>x</name></name><operator>%</operator><name>m</name> <operator>+</operator> <name>m</name><operator>)</operator><operator>%</operator> <name>m</name></expr>;</return>
}</block></function>

<function><type><name>ll</name></type> <name>findAns</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>d</name></decl></parameter>)</parameter_list>       <comment type="line">// a=2 b=5 d=3</comment>
<block>{
  	<decl_stmt><decl><type><name>ll</name></type> <name>k</name><init>=<expr><call><name>MultiplicativeModuloInverse</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  	<decl_stmt><decl><type><name>ll</name></type> <name>y1</name><init>=<expr><operator>(</operator><name>d</name> <operator>%</operator> <name>a</name> <operator>*</operator>  <name>k</name><operator>)</operator> <operator>%</operator> <name>a</name></expr></init></decl>;</decl_stmt>
  	<return>return <expr><name>y1</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>p</name></decl>,<decl><type ref="prev"/><name>w</name></decl>,<decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>p</name><operator>&gt;&gt;</operator><name>w</name><operator>&gt;&gt;</operator><name>d</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>g</name><init>=<expr><call><name>__gcd</name><argument_list>(<argument><expr><name>w</name></expr></argument>,<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if>if<condition>(<expr><name>p</name><operator>%</operator><name>g</name><operator>!=</operator><literal type="number">0</literal></expr>)</condition><then><block>{
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>-</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></then></if>
	<decl_stmt><decl><type><name>ll</name></type> <name>y</name><init>=<expr><call><name>findAns</name><argument_list>(<argument><expr><name>w</name><operator>/</operator><name>g</name></expr></argument>,<argument><expr><name>d</name><operator>/</operator><name>g</name></expr></argument>,<argument><expr><name>p</name><operator>/</operator><name>g</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>x</name><init>=<expr><operator>(</operator><name>p</name><operator>-</operator><name>y</name><operator>*</operator><name>d</name><operator>)</operator><operator>/</operator><name>w</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>z</name><init>=<expr><name>n</name><operator>-</operator><operator>(</operator><name>x</name><operator>+</operator><name>y</name><operator>)</operator></expr></init></decl>;</decl_stmt>
	<if>if<condition>(<expr><name>x</name><operator>&lt;</operator><literal type="number">0</literal> <operator>||</operator> <name>y</name><operator>&lt;</operator><literal type="number">0</literal> <operator>||</operator> <name>z</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>-</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></then>
	<else>else <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>x</name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name>y</name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name>z</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></else></if>

}</block></function>
</unit>
