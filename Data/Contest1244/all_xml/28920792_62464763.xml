<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28920792_62464763.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
 
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<using>using <name>LL</name> <init>= <type><name>long</name> <name>long</name> <name>int</name></type></init>;</using> 

<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>TH</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>_dbg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sdbg</name></decl></parameter>, <parameter><decl><type><name>TH</name></type> <name>h</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name>cerr</name><operator>&lt;&lt;</operator><name>sdbg</name><operator>&lt;&lt;</operator><literal type="string">"="</literal><operator>&lt;&lt;</operator><name>h</name><operator>&lt;&lt;</operator><literal type="string">"\n"</literal></expr>;</expr_stmt>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>TH</name></parameter>, <parameter><type><name>class</name><modifier>...</modifier></type> <name>TA</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>_dbg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sdbg</name></decl></parameter>, <parameter><decl><type><name>TH</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>TA</name><modifier>...</modifier></type> <name>a</name></decl></parameter>)</parameter_list> <block>{
  <while>while<condition>(<expr><operator>*</operator><name>sdbg</name><operator>!=</operator><literal type="char">','</literal></expr>)</condition>
    <block type="pseudo"><expr_stmt><expr><name>cerr</name><operator>&lt;&lt;</operator><operator>*</operator><name>sdbg</name><operator>++</operator></expr>;</expr_stmt></block></while>
  <expr_stmt><expr><name>cerr</name><operator>&lt;&lt;</operator><literal type="string">"="</literal><operator>&lt;&lt;</operator><name>h</name><operator>&lt;&lt;</operator><literal type="string">","</literal></expr>;</expr_stmt> 
  <expr_stmt><expr><call><name>_dbg</name><argument_list>(<argument><expr><name>sdbg</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>a</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
 
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>ostream</name> <modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name> <modifier>&amp;</modifier></type> <name>os</name></decl></parameter>, <parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>V</name></decl></parameter>)</parameter_list><block>{
  <expr_stmt><expr><name>os</name><operator>&lt;&lt;</operator><literal type="string">"["</literal></expr>;</expr_stmt>
  <for>for<control>(<init><decl><type><name>auto</name></type> <name>vv</name><range>: <expr><name>V</name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <name>vv</name> <operator>&lt;&lt;</operator><literal type="string">","</literal></expr>;</expr_stmt></block></for>
  <return>return <expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">"]"</literal></expr>;</return>
}</block></function>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>L</name></parameter>, <parameter><type><name>class</name></type> <name>R</name></parameter>&gt;</parameter_list></template> <type><name>ostream</name> <modifier>&amp;</modifier></type> <name>operator <name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name> <modifier>&amp;</modifier></type> <name>os</name></decl></parameter>, <parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>L</name></expr></argument>,<argument><expr><name>R</name></expr></argument>&gt;</argument_list></name></type> <name>P</name></decl></parameter>)</parameter_list><block>{
  <return>return <expr><name>os</name> <operator>&lt;&lt;</operator><literal type="string">"("</literal><operator>&lt;&lt;</operator><name><name>P</name><operator>.</operator><name>st</name></name> <operator>&lt;&lt;</operator><literal type="string">","</literal><operator>&lt;&lt;</operator><name><name>P</name><operator>.</operator><name>nd</name></name> <operator>&lt;&lt;</operator><literal type="string">")"</literal></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>z</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>z</name></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>z</name><operator>--</operator></expr>)</condition> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name> <operator>&gt;&gt;</operator> <name>c</name> <operator>&gt;&gt;</operator> <name>d</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><call><name>ceil</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>a</name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><call><name>ceil</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>b</name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name>d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>x</name> <operator>+</operator> <name>y</name> <operator>&lt;=</operator> <name>k</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>x</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name>y</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    }</block></else></if>
  }</block></while>
}</block></function></unit>
