<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28936447_62483462.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cerr&lt;&lt;#x&lt;&lt;": "&lt;&lt;x&lt;&lt;endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fgx</name></cpp:macro> <cpp:value>cerr&lt;&lt;"--------------"&lt;&lt;endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dgx</name></cpp:macro> <cpp:value>cerr&lt;&lt;"=============="&lt;&lt;endl;</cpp:value></cpp:define>

<function><specifier>inline</specifier> <type><name>LL</name></type> <name>read</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>LL</name></type> <name>x</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>f</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt><decl_stmt><decl><type><name>char</name></type> <name>c</name><init>=<expr><call><name>getchar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init>;</init><condition><expr><operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</condition><incr><expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr></incr>)</control> <block type="pseudo"><if>if<condition>(<expr><name>c</name><operator>==</operator><literal type="char">'-'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>f</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if></block></for>
	<for>for<control>(<init>;</init><condition><expr><call><name>isdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</condition><incr><expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>x</name><operator>=</operator><name>x</name><operator>*</operator><literal type="number">10</literal><operator>+</operator><name>c</name><operator>-</operator><literal type="char">'0'</literal></expr>;</expr_stmt></block></for>
	<return>return <expr><name>x</name><operator>*</operator><name>f</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>const</specifier> <name>LL</name></type> <name>INF</name> <init>= <expr><literal type="number">2147483600</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>LL</name></type> <name>MAXN</name> <init>= <expr><literal type="number">100010</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LL</name></type> <name>N</name></decl>,<decl><type ref="prev"/><name>P</name></decl>,<decl><type ref="prev"/><name>W</name></decl>,<decl><type ref="prev"/><name>D</name></decl>;</decl_stmt>
<function><specifier>inline</specifier> <type><name>LL</name></type> <name>exgcd</name><parameter_list>(<parameter><decl><type><name>LL</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>LL</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>LL</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>,<parameter><decl><type><name>LL</name> <modifier>&amp;</modifier></type><name>y</name></decl></parameter>)</parameter_list><block>{
	<if>if<condition>(<expr><operator>!</operator><name>b</name></expr>)</condition><then> <block>{ <expr_stmt><expr><name>x</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>  <return>return <expr><name>a</name></expr>;</return> }</block></then></if>
	<decl_stmt><decl><type><name>LL</name></type> <name>d</name><init>=<expr><call><name>exgcd</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>a</name><operator>%</operator><name>b</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <expr_stmt><expr><name>y</name><operator>-=</operator><operator>(</operator><name>a</name><operator>/</operator><name>b</name><operator>)</operator><operator>*</operator><name>x</name></expr>;</expr_stmt> <return>return <expr><name>d</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<comment type="line">//freopen(".in","r",stdin);</comment>
	<comment type="line">//freopen(".out","w",stdout);</comment>
	<expr_stmt><expr><name>N</name><operator>=</operator><call><name>read</name><argument_list>()</argument_list></call></expr><operator>,</operator><expr><name>P</name><operator>=</operator><call><name>read</name><argument_list>()</argument_list></call></expr><operator>,</operator><expr><name>W</name><operator>=</operator><call><name>read</name><argument_list>()</argument_list></call></expr><operator>,</operator><expr><name>D</name><operator>=</operator><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>W</name></expr></argument>,<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <decl_stmt><decl><type><name>LL</name></type> <name>X</name></decl>,<decl><type ref="prev"/><name>Y</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LL</name></type> <name>d</name><init>=<expr><call><name>exgcd</name><argument_list>(<argument><expr><name>W</name></expr></argument>,<argument><expr><name>D</name></expr></argument>,<argument><expr><name>X</name></expr></argument>,<argument><expr><name>Y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if>if<condition>(<expr><name>P</name><operator>%</operator><name>d</name></expr>)</condition><then> <block>{ <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return> }</block></then></if>
	<decl_stmt><decl><type><name>LL</name></type> <name>T</name><init>=<expr><name>D</name><operator>/</operator><name>d</name></expr></init></decl>,<decl><type ref="prev"/><name>G</name><init>=<expr><operator>(</operator><name>P</name><operator>/</operator><name>d</name><operator>)</operator><operator>%</operator><name>T</name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><name>X</name><operator>=</operator><name>X</name><operator>*</operator><name>G</name><operator>%</operator><name>T</name></expr>;</expr_stmt> 
	<expr_stmt><expr><name>X</name><operator>=</operator><operator>(</operator><name>X</name><operator>%</operator><name>T</name><operator>+</operator><name>T</name><operator>)</operator><operator>%</operator><name>T</name></expr>;</expr_stmt> <expr_stmt><expr><name>Y</name><operator>=</operator><operator>(</operator><name>P</name><operator>-</operator><name>X</name><operator>*</operator><name>W</name><operator>)</operator><operator>/</operator><name>D</name></expr>;</expr_stmt>
	<if>if<condition>(<expr><name>X</name><operator>+</operator><name>Y</name><operator>&gt;</operator><name>N</name><operator>||</operator><name>X</name><operator>&lt;</operator><literal type="number">0</literal><operator>||</operator><name>Y</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then><block>{ <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return> }</block></then></if>
	<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>X</name></expr></argument>,<argument><expr><name>Y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>X</name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name>Y</name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name>N</name><operator>-</operator><name>X</name><operator>-</operator><name>Y</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
