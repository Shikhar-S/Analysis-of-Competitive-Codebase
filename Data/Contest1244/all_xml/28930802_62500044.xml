<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28930802_62500044.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tri</name></cpp:macro> <cpp:value>pair&lt;int, pair&lt;int, int&gt; &gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRI</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(make_pair(a,make_pair(b,c)))</cpp:value></cpp:define>
 
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>

<function><type><name>ll</name></type> <name>powmod</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>m</name><init>=<expr><name>M</name></expr></init></decl></parameter>)</parameter_list>
<block>{
	<if>if<condition>(<expr><name>y</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
	<decl_stmt><decl><type><name>ll</name></type> <name>ret</name> <init>= <expr><call><name>powmod</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>ret</name><operator>*</operator><name>ret</name><operator>)</operator><operator>%</operator><name>m</name></expr>;</expr_stmt>
	<if>if<condition>(<expr><name>y</name><operator>%</operator><literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ret</name><operator>=</operator><operator>(</operator><name>ret</name><operator>*</operator><name>x</name><operator>)</operator><operator>%</operator><name>m</name></expr>;</expr_stmt></block></then></if>
	<return>return <expr><name>ret</name></expr>;</return>
}</block></function>

<function><type><name>ll</name></type> <name>gcdExtended</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>ll</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>ll</name> <modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list>  
<block>{
    <if>if <condition>(<expr><name>a</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>  
    <block>{  
        <expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>  
        <expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>  
        <return>return <expr><name>b</name></expr>;</return>  
    }</block></then></if>  
  
    <decl_stmt><decl><type><name>ll</name></type> <name>x1</name></decl>, <decl><type ref="prev"/><name>y1</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>gcd</name> <init>= <expr><call><name>gcdExtended</name><argument_list>(<argument><expr><name>b</name><operator>%</operator><name>a</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  

    <expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <name>y1</name> <operator>-</operator> <operator>(</operator><name>b</name><operator>/</operator><name>a</name><operator>)</operator> <operator>*</operator> <name>x1</name></expr>;</expr_stmt>  
    <expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <name>x1</name></expr>;</expr_stmt>  
  
    <return>return <expr><name>gcd</name></expr>;</return>  
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> 
<block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>p</name><operator>&gt;&gt;</operator><name>w</name><operator>&gt;&gt;</operator><name>d</name></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>p</name><operator>%</operator><name>w</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>p</name><operator>/</operator><name>w</name> <operator>&lt;=</operator> <name>n</name></expr>)</condition><then>
    <block>{
    	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>p</name><operator>/</operator><name>w</name><operator>&lt;&lt;</operator><literal type="string">" 0 "</literal><operator>&lt;&lt;</operator><name>n</name><operator>-</operator><name>p</name><operator>/</operator><name>w</name></expr>;</expr_stmt>
    	<return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then>
    <elseif>else <if>if<condition>(<expr><name>p</name><operator>%</operator><name>d</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>p</name><operator>/</operator><name>d</name> <operator>&lt;=</operator> <name>n</name></expr>)</condition><then>
    <block>{
    	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"0 "</literal><operator>&lt;&lt;</operator><name>p</name><operator>/</operator><name>d</name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name>n</name><operator>-</operator><name>p</name><operator>/</operator><name>d</name></expr>;</expr_stmt>
    	<return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if></elseif></if>
    <decl_stmt><decl><type><name>ll</name></type> <name>g</name> <init>= <expr><call><name>__gcd</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>p</name><operator>%</operator><name>g</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then>
    <block>{
    	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    	<return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name>w</name><operator>/=</operator><name>g</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>d</name><operator>/=</operator><name>g</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name><operator>/=</operator><name>g</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>g</name> <operator>=</operator> <call><name>gcdExtended</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name><operator>+</operator><name>w</name><operator>*</operator><name>w</name><operator>)</operator><operator>%</operator><name>w</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><name>x</name><operator>*</operator><operator>(</operator><name>p</name><operator>%</operator><name>w</name><operator>)</operator><operator>)</operator><operator>%</operator><name>w</name></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>d</name><operator>*</operator><name>y</name> <operator>&gt;</operator> <name>p</name></expr>)</condition><then>
    <block>{
    	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    	<return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>p</name><operator>-</operator><name>d</name><operator>*</operator><name>y</name><operator>)</operator><operator>/</operator><name>w</name></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>x</name><operator>+</operator><name>y</name> <operator>&gt;</operator> <name>n</name> <operator>||</operator> <name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then>
    <block>{
    	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    	<return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>x</name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name>y</name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name>n</name><operator>-</operator><name>x</name><operator>-</operator><name>y</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
