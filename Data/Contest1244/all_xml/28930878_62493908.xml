<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28930878_62493908.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name> <init>= <expr><literal type="number">1e5</literal><operator>+</operator><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>line</name></cpp:macro><cpp:value>; printf("========\n");</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>'\n'</cpp:value></cpp:define>
<decl_stmt><decl><type><name>ll</name></type> <name><name>a</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>b</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>c</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>num</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>vis</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name>res</name></decl>, <decl><type ref="prev"/><name>ans</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>color</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name><name>edge</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>f</name></decl>, <decl><type ref="prev"/><name>e</name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>z</name></decl></parameter>)</parameter_list> <block>{
<comment type="line">//	printf("%d %d %d\n", x, y, z);</comment>
	<expr_stmt><expr><name><name>vis</name><index>[<expr><name>z</name></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
	<if>if<condition>(<expr><name>x</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
	<block type="pseudo"><expr_stmt><expr><name>res</name> <operator>+=</operator> <name><name>a</name><index>[<expr><name>z</name></expr>]</index></name></expr>;</expr_stmt></block></then>
	<elseif>else <if>if<condition>(<expr><name>x</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then>
	<block type="pseudo"><expr_stmt><expr><name>res</name> <operator>+=</operator> <name><name>b</name><index>[<expr><name>z</name></expr>]</index></name></expr>;</expr_stmt></block></then></if></elseif>
	<else>else 
	<block type="pseudo"><expr_stmt><expr><name>res</name> <operator>+=</operator> <name><name>c</name><index>[<expr><name>z</name></expr>]</index></name></expr>;</expr_stmt></block></else></if>
	<decl_stmt><decl><type><name>int</name></type> <name>dd</name></decl>;</decl_stmt>
	<if>if<condition>(<expr><name>x</name><operator>+</operator><name>y</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><then> <block>{
		<expr_stmt><expr><name>dd</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
	}</block></then> <elseif>else <if>if<condition>(<expr><name>x</name><operator>+</operator><name>y</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><then> <block>{
		<expr_stmt><expr><name>dd</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	}</block></then></if></elseif> <else>else <block>{
		<expr_stmt><expr><name>dd</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	}</block></else></if>
	<if>if<condition>(<expr><name><name>vis</name><index>[<expr><name><name>edge</name><index>[<expr><name>z</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>dd</name></expr></argument>,<argument><expr><name><name>edge</name><index>[<expr><name>z</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then> <elseif>else <if>if<condition>(<expr><name><name>edge</name><index>[<expr><name>z</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>vis</name><index>[<expr><name><name>edge</name><index>[<expr><name>z</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
		<expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>dd</name></expr></argument>,<argument><expr><name><name>edge</name><index>[<expr><name>z</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if></elseif></if>
}</block></function>
<function><type><name>void</name></type> <name>solve</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
	<for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<expr_stmt><expr><name><name>vis</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">//	printf("%d %d %d\n", res, a,b);</comment>
	<if>if<condition>(<expr><name>ans</name> <operator>&gt;</operator> <name>res</name></expr>)</condition><then> <block>{
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<expr_stmt><expr><name><name>color</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>vis</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		}</block></for>
		<expr_stmt><expr><name>ans</name> <operator>=</operator> <name>res</name></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<comment type="line">//printf("%lld\n", a[i]);</comment>
	}</block></for>
	<for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	<comment type="line">//	printf("%lld\n", b[i]);</comment>
	}</block></for>
	<for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	<comment type="line">//	printf("%lld\n", c[i]);</comment>
	}</block></for>
	<decl_stmt><decl><type><name>ll</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>x</name><operator>&gt;&gt;</operator><name>y</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>edge</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>edge</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>num</name><index>[<expr><name>x</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>num</name><index>[<expr><name>y</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><name>f</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr><operator>,</operator> <expr><name>e</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
<comment type="line">//		cout&lt;&lt;i&lt;&lt;" ";</comment>
		<if>if<condition>(<expr><name><name>num</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"-1"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		}</block></then></if>
		<if>if<condition>(<expr><name>f</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>num</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>f</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
		}</block></then></if>
		<if>if<condition>(<expr><name>f</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator><name><name>num</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>e</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
	<expr_stmt><expr><name>ans</name> <operator>=</operator> <literal type="number">1000000000000000LL</literal></expr>;</expr_stmt>
<comment type="line">//	printf("%lld\n", ans);</comment>
	<expr_stmt><expr><call><name>solve</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">//	line;</comment>
	<expr_stmt><expr><call><name>solve</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>solve</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>solve</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>solve</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>solve</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>color</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;&lt;</operator><literal type="string">" "</literal></expr>;</expr_stmt>
	}</block></for>


	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
