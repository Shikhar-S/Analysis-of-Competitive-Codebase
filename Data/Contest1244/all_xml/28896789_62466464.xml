<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28896789_62466464.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>maxn</name></cpp:macro> <cpp:value>200005</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;int,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pll</name></cpp:macro> <cpp:value>pair&lt;ll,ll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>


<function><type><name>ll</name></type> <name>digni</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><name>y</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
    <if>if<condition>(<expr><name>y</name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
    <block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>res</name><init>=<expr><call><name>digni</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><operator>(</operator><name>res</name><operator>*</operator><name>res</name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</return>
    }</block></then></if>
    <return>return <expr><operator>(</operator><call><name>digni</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>*</operator><name>x</name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</return>
}</block></function>



<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>lec</name></decl>,<decl><type ref="prev"/><name>prac</name></decl>,<decl><type ref="prev"/><name>pen</name></decl>,<decl><type ref="prev"/><name>pencil</name></decl>,<decl><type ref="prev"/><name>pernica</name></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>t</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition>
    <block>{
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>lec</name><operator>&gt;&gt;</operator><name>prac</name><operator>&gt;&gt;</operator><name>pen</name><operator>&gt;&gt;</operator><name>pencil</name><operator>&gt;&gt;</operator><name>pernica</name></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>min_pen</name><init>=<expr><operator>(</operator><name>lec</name><operator>+</operator><name>pen</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><name>pen</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>min_pencil</name><init>=<expr><operator>(</operator><name>prac</name><operator>+</operator><name>pencil</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><name>pencil</name></expr></init></decl>;</decl_stmt>

        <if>if<condition>(<expr><name>min_pen</name><operator>+</operator><name>min_pencil</name><operator>&lt;=</operator><name>pernica</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>min_pen</name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name>min_pencil</name><operator>&lt;&lt;</operator><literal type="string">"\n"</literal></expr>;</expr_stmt>
        }</block></then>
        <else>else
        <block>{
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"-1\n"</literal></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name>t</name><operator>--</operator></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
