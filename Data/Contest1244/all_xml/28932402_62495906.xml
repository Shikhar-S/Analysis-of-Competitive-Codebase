<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28932402_62495906.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>"\n"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">100707</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>set</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>map</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>mp</name></decl>;</decl_stmt>
<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">//freopen("input.txt","r",stdin);</comment>
    <comment type="line">//freopen("diameter.in", "r", stdin);</comment>
    <comment type="line">//freopen("diameter.out", "w", stdout);</comment>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mp</name><index>[<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
    }</block></for>

    <decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><operator>*</operator><call><name><name>st</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><operator>*</operator><call><name><name>st</name><operator>.</operator><name>rbegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>coll</name> <init>= <expr><name><name>mp</name><index>[<expr><name>l</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>colr</name> <init>= <expr><name><name>mp</name><index>[<expr><name>r</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>l</name></expr>)</condition><then><block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="number">0</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name><name>st</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while>while <condition>(<expr><name>r</name> <operator>&gt;</operator> <name>l</name></expr>)</condition><block>{
        <if>if <condition>(<expr><call><name><name>st</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
            <if>if <condition>(<expr><name>coll</name> <operator>&lt;=</operator> <name>colr</name></expr>)</condition><then><block>{
                <expr_stmt><expr><name>l</name> <operator>=</operator> <name>l</name> <operator>+</operator> <name>k</name> <operator>/</operator> <name>coll</name></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>l</name> <operator>&gt;=</operator> <name>r</name></expr>)</condition><then><block>{
                    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="number">0</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
                    <return>return <expr><literal type="number">0</literal></expr>;</return>
                }</block></then>
                <else>else <block>{
                    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>r</name> <operator>-</operator> <name>l</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
                    <return>return <expr><literal type="number">0</literal></expr>;</return>
                }</block></else></if>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><name>r</name> <operator>=</operator> <name>r</name> <operator>-</operator> <name>k</name> <operator>/</operator> <name>colr</name></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>l</name> <operator>&gt;=</operator> <name>r</name></expr>)</condition><then><block>{
                    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="number">0</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
                    <return>return <expr><literal type="number">0</literal></expr>;</return>
                }</block></then>
                <else>else <block>{
                    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>r</name> <operator>-</operator> <name>l</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
                    <return>return <expr><literal type="number">0</literal></expr>;</return>
                }</block></else></if>
            }</block></else></if>
        }</block></then></if>
        <if>if <condition>(<expr><name>coll</name> <operator>&lt;=</operator> <name>colr</name></expr>)</condition><then><block>{
            <decl_stmt><decl><type><name>int</name></type> <name>nxt</name> <init>= <expr><operator>*</operator><call><name><name>st</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>need</name> <init>= <expr><name>nxt</name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><operator>(</operator><name>nxt</name> <operator>-</operator> <name>l</name><operator>)</operator> <operator>*</operator> <name>coll</name> <operator>&lt;=</operator> <name>k</name></expr>)</condition><then><block>{
                <expr_stmt><expr><name>k</name> <operator>=</operator> <name>k</name> <operator>-</operator> <operator>(</operator><name>nxt</name> <operator>-</operator> <name>l</name><operator>)</operator> <operator>*</operator> <name>coll</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>l</name> <operator>=</operator> <name>nxt</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>coll</name> <operator>=</operator> <name>coll</name> <operator>+</operator> <name><name>mp</name><index>[<expr><name>nxt</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>nxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><name>l</name> <operator>=</operator> <name>l</name> <operator>+</operator> <name>k</name> <operator>/</operator> <name>coll</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>r</name> <operator>-</operator> <name>l</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
                <return>return <expr><literal type="number">0</literal></expr>;</return>
            }</block></else></if>
        }</block></then>
        <else>else <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>nxt</name> <init>= <expr><operator>*</operator><call><name><name>st</name><operator>.</operator><name>rbegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>need</name> <init>= <expr><name>nxt</name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>-</operator> <name>nxt</name><operator>)</operator> <operator>*</operator> <name>colr</name> <operator>&lt;=</operator> <name>k</name></expr>)</condition><then><block>{
                <expr_stmt><expr><name>k</name> <operator>=</operator> <name>k</name> <operator>-</operator> <operator>(</operator><name>r</name> <operator>-</operator> <name>nxt</name><operator>)</operator> <operator>*</operator> <name>colr</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>r</name> <operator>=</operator> <name>nxt</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>colr</name> <operator>=</operator> <name>colr</name> <operator>+</operator> <name><name>mp</name><index>[<expr><name>nxt</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>nxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><name>r</name> <operator>=</operator> <name>r</name> <operator>-</operator> <name>k</name> <operator>/</operator> <name>colr</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>r</name> <operator>-</operator> <name>l</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
                <return>return <expr><literal type="number">0</literal></expr>;</return>
            }</block></else></if>
        }</block></else></if>
    }</block></while>

    <if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>l</name></expr>)</condition><then><block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="number">0</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
