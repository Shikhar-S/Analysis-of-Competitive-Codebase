<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28934660_62494878.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;unordered_map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;unordered_set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;deque&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstdlib&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;ctime&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iomanip&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>st</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nd</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>boost</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(false);cin.tie();cout.tie();</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>k</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = k ; i &lt; n ; ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REP</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>k</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = k ; i &lt;= n ; ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(int)x.size()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VAR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>#x &lt;&lt; " " &lt;&lt; x</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(v).begin(), (v).end()</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>pil</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pli</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>pll</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pii</name></expr></argument>&gt;</argument_list></name></type> <name>vii</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>vll</name>;</typedef>

<decl_stmt><decl><type><name>vi</name></type> <name>t</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>il</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><name>boost</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>k</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
		<decl_stmt><decl><type><name>ll</name></type> <name>a</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>

	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>il</name><index>[<expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block></for>

	<decl_stmt><decl><type><name>ll</name></type> <name>ileZurz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>roz</name> <init>= <expr><call><name><name>t</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><name><name>ileZurz</name> <argument_list type="generic">&lt; <argument><expr><name>k</name> <operator>&amp;&amp;</operator> <name>roz</name></expr></argument> &gt;</argument_list></name> <literal type="number">0</literal></expr>)</condition> <block>{
		<if>if <condition>(<expr><call><name><name>il</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>second</name> <operator>&lt;</operator> <call><name><name>il</name><operator>.</operator><name>rbegin</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>second</name></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>ll</name></type> <name>cnt</name> <init>= <expr><call><name><name>il</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>second</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>co</name> <init>= <expr><call><name><name>il</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>first</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>co2</name> <init>= <expr><call><name>next</name><argument_list>(<argument><expr><call><name><name>il</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>first</name></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><call>(<name>ll</name>)<argument_list>(<argument><expr><name>co2</name> <operator>-</operator> <name>co</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>cnt</name> <operator>+</operator> <name>ileZurz</name> <operator>&lt;=</operator> <name>k</name></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>ileZurz</name> <operator>+=</operator> <call>(<name>ll</name>)<argument_list>(<argument><expr><name>co2</name> <operator>-</operator> <name>co</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>cnt</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>il</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>il</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>il</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>second</name> <operator>+=</operator> <name>cnt</name></expr>;</expr_stmt>
			}</block></then> <else>else <block>{
				<expr_stmt><expr><call><name><name>il</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>il</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>il</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><block>{<expr><name>co</name> <operator>+</operator> <operator>(</operator><name>k</name><operator>-</operator><name>ileZurz</name><operator>)</operator><operator>/</operator><call>(<name>ll</name>)<argument_list>(<argument><expr><name>cnt</name></expr></argument>)</argument_list></call></expr>, <expr><name>cnt</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>ileZurz</name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
			}</block></else></if>
		}</block></then> <else>else <block>{
			<decl_stmt><decl><type><name>ll</name></type> <name>cnt</name> <init>= <expr><call><name>prev</name><argument_list>(<argument><expr><call><name><name>il</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>second</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>ll</name></type> <name>co</name> <init>= <expr><call><name>prev</name><argument_list>(<argument><expr><call><name><name>il</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>first</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>ll</name></type> <name>co2</name> <init>= <expr><call><name>prev</name><argument_list>(<argument><expr><call><name>prev</name><argument_list>(<argument><expr><call><name><name>il</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>first</name></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><call>(<name>ll</name>)<argument_list>(<argument><expr><name>co</name> <operator>-</operator> <name>co2</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>cnt</name> <operator>+</operator> <name>ileZurz</name> <operator>&lt;=</operator> <name>k</name></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>ileZurz</name> <operator>+=</operator> <call>(<name>ll</name>)<argument_list>(<argument><expr><name>co</name> <operator>-</operator> <name>co2</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>cnt</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>il</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name>prev</name><argument_list>(<argument><expr><call><name><name>il</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>prev</name><argument_list>(<argument><expr><call><name><name>il</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>second</name> <operator>+=</operator> <name>cnt</name></expr>;</expr_stmt>
			}</block></then> <else>else <block>{
				<expr_stmt><expr><call><name><name>il</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name>prev</name><argument_list>(<argument><expr><call><name><name>il</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>il</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><block>{<expr><name>co</name> <operator>-</operator> <operator>(</operator><name>k</name><operator>-</operator><name>ileZurz</name><operator>)</operator><operator>/</operator><call>(<name>ll</name>)<argument_list>(<argument><expr><name>cnt</name></expr></argument>)</argument_list></call></expr>, <expr><name>cnt</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>ileZurz</name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
			}</block></else></if>
		}</block></else></if>

		<expr_stmt><expr><name>roz</name> <operator>=</operator> <call><name><name>il</name><operator>.</operator><name>rbegin</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>first</name> <operator>-</operator> <call><name><name>il</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>first</name></expr>;</expr_stmt>
	}</block></while>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>roz</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
}</block></function></unit>
