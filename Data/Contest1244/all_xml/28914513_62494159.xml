<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28914513_62494159.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	
	<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ONLINE_JUDGE</name></cpp:ifndef>
    	<expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"input"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    	<expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"output"</literal></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  	<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  	<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>;</decl_stmt>
  	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>

  	<decl_stmt><decl><type><name>ll</name></type> <name><name>a</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
  	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
  		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
  	}</block></for>

  	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
  		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
  	}</block></for>

  	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
  		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
  	}</block></for>

  	<decl_stmt><decl><type><name>ll</name></type> <name><name>arr</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
  	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
  		<expr_stmt><expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name><name>arr</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  	}</block></for>

  	<decl_stmt><decl><type><name>ll</name></type> <name>u</name></decl>,<decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
  	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
  		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>u</name><operator>&gt;&gt;</operator><name>v</name></expr>;</expr_stmt>
  		<expr_stmt><expr><name>u</name><operator>--</operator></expr>;</expr_stmt>
  		<expr_stmt><expr><name>v</name><operator>--</operator></expr>;</expr_stmt>

  		<if>if<condition>(<expr><name><name>arr</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block>{
  			<expr_stmt><expr><name><name>arr</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name>v</name></expr>;</expr_stmt>
  		}</block></then>
  		<elseif>else <if>if <condition>(<expr><name><name>arr</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block>{
  			<expr_stmt><expr><name><name>arr</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name>v</name></expr>;</expr_stmt>
  		}</block></then></if></elseif>
  		<else>else<block>{
  			<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>-</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
  			<return>return <expr><literal type="number">0</literal></expr>;</return>
  		}</block></else></if>

  		<if>if<condition>(<expr><name><name>arr</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block>{
  			<expr_stmt><expr><name><name>arr</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name>u</name></expr>;</expr_stmt>
  		}</block></then>
  		<elseif>else <if>if <condition>(<expr><name><name>arr</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block>{
  			<expr_stmt><expr><name><name>arr</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name>u</name></expr>;</expr_stmt>
  		}</block></then></if></elseif>
  		<else>else<block>{
  			<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>-</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
  			<return>return <expr><literal type="number">0</literal></expr>;</return>
  		}</block></else></if>
  	}</block></for>

  	<decl_stmt><decl><type><name>int</name></type> <name>first</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
  		<if>if<condition>(<expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block>{
  			<expr_stmt><expr><name>first</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
  			<break>break;</break>
  		}</block></then></if>
  	}</block></for>

  	<decl_stmt><decl><type><name>ll</name></type> <name><name>next</name><index>[<expr><name>n</name></expr>]</index></name></decl>;</decl_stmt>
  	<expr_stmt><expr><name><name>next</name><index>[<expr><name>first</name></expr>]</index></name><operator>=</operator><name><name>arr</name><index>[<expr><name>first</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
  	<decl_stmt><decl><type><name>ll</name></type> <name>prev</name><init>=<expr><name>first</name></expr></init></decl>;</decl_stmt>
  	<decl_stmt><decl><type><name>ll</name></type> <name>curr</name><init>=<expr><name><name>next</name><index>[<expr><name>first</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
  		<if>if<condition>(<expr><name><name>arr</name><index>[<expr><name>curr</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><name>prev</name></expr>)</condition><then><block>{
  			<expr_stmt><expr><name><name>next</name><index>[<expr><name>curr</name></expr>]</index></name><operator>=</operator><name><name>arr</name><index>[<expr><name>curr</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
  		}</block></then>
  		<else>else<block>{
  			<expr_stmt><expr><name><name>next</name><index>[<expr><name>curr</name></expr>]</index></name><operator>=</operator><name><name>arr</name><index>[<expr><name>curr</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>  			
  		}</block></else></if>
  		<expr_stmt><expr><name>prev</name><operator>=</operator><name>curr</name></expr>;</expr_stmt>
  		<expr_stmt><expr><name>curr</name><operator>=</operator><name><name>next</name><index>[<expr><name>curr</name></expr>]</index></name></expr>;</expr_stmt>
  	}</block></for>

  	<decl_stmt><decl><type><name>ll</name></type> <name>ans</name><init>=<expr><name>LLONG_MAX</name></expr></init></decl>;</decl_stmt>

  	<comment type="line">// cout&lt;&lt;first&lt;&lt;endl;</comment>
  	<decl_stmt><decl><type><name>ll</name></type> <name><name>color</name><index>[<expr><name>n</name></expr>]</index></name></decl>;</decl_stmt>
  	<decl_stmt><decl><type><name>ll</name></type> <name><name>minicolor</name><index>[<expr><name>n</name></expr>]</index></name></decl>;</decl_stmt>

  	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
  		<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
  			<if>if<condition>(<expr><name>i</name><operator>==</operator><name>j</name></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
  			<decl_stmt><decl><type><name>ll</name></type> <name>minians</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  			<decl_stmt><decl><type><name>ll</name></type> <name>prev1</name></decl>,<decl><type ref="prev"/><name>prev2</name></decl>;</decl_stmt>
  			<expr_stmt><expr><name>prev1</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
  			<expr_stmt><expr><name>prev2</name><operator>=</operator><name>j</name></expr>;</expr_stmt>
  			<expr_stmt><expr><name>minians</name><operator>+=</operator><name><name>a</name><index>[<expr><name>first</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
  			<expr_stmt><expr><name>minians</name><operator>+=</operator><name><name>a</name><index>[<expr><name><name>next</name><index>[<expr><name>first</name></expr>]</index></name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
  			<decl_stmt><decl><type><name>ll</name></type> <name>curr</name><init>=<expr><name><name>next</name><index>[<expr><name><name>next</name><index>[<expr><name>first</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  			<decl_stmt><decl><type><name>ll</name></type> <name>newone</name></decl>;</decl_stmt>

  			<expr_stmt><expr><name><name>minicolor</name><index>[<expr><name>first</name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt>
  			<expr_stmt><expr><name><name>minicolor</name><index>[<expr><name><name>next</name><index>[<expr><name>first</name></expr>]</index></name></expr>]</index></name><operator>=</operator><name>j</name></expr>;</expr_stmt>

  			<for>for<control>(<init><decl><type><name>int</name></type> <name>z</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</init><condition><expr><name>z</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>z</name><operator>++</operator></expr></incr>)</control><block>{
  				<expr_stmt><expr><name>newone</name><operator>=</operator><literal type="number">3</literal><operator>-</operator><operator>(</operator><name>prev1</name><operator>+</operator><name>prev2</name><operator>)</operator></expr>;</expr_stmt>
  				<expr_stmt><expr><name>minians</name><operator>+=</operator><name><name>a</name><index>[<expr><name>curr</name></expr>]</index><index>[<expr><name>newone</name></expr>]</index></name></expr>;</expr_stmt>
  				<comment type="line">// cout&lt;&lt;z&lt;&lt;" "&lt;&lt;newone&lt;&lt;endl;</comment>
  				<expr_stmt><expr><name>prev1</name><operator>=</operator><name>prev2</name></expr>;</expr_stmt>
  				<expr_stmt><expr><name>prev2</name><operator>=</operator><name>newone</name></expr>;</expr_stmt>
  				<expr_stmt><expr><name><name>minicolor</name><index>[<expr><name>curr</name></expr>]</index></name><operator>=</operator><name>newone</name></expr>;</expr_stmt>
  				<expr_stmt><expr><name>curr</name><operator>=</operator><name><name>next</name><index>[<expr><name>curr</name></expr>]</index></name></expr>;</expr_stmt>
  			}</block></for>

  			<comment type="line">// cout&lt;&lt;i&lt;&lt;" "&lt;&lt;j&lt;&lt;" "&lt;&lt;minians&lt;&lt;endl;</comment>

  			<if>if<condition>(<expr><name>minians</name><operator>&lt;</operator><name>ans</name></expr>)</condition><then><block>{
  				<expr_stmt><expr><name>ans</name><operator>=</operator><name>minians</name></expr>;</expr_stmt>
  				<for>for<control>(<init><decl><type><name>int</name></type> <name>z</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>z</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>z</name><operator>++</operator></expr></incr>)</control><block>{
  					<expr_stmt><expr><name><name>color</name><index>[<expr><name>z</name></expr>]</index></name><operator>=</operator><name><name>minicolor</name><index>[<expr><name>z</name></expr>]</index></name></expr>;</expr_stmt>
  				}</block></for>
  			}</block></then></if>

  			<comment type="line">// ans=min(ans,minians);</comment>
  		}</block></for>
  	}</block></for>
  	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
  	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
  		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>color</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="string">" "</literal></expr>;</expr_stmt>
  	}</block></for>
  	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
}</block></function></unit>
