<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28936273_62490098.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mx</name></cpp:macro> <cpp:value>200000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>

<decl_stmt><decl><type><name>ll</name></type> <name><name>dp</name><index>[<expr><name>mx</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>ans</name><index>[<expr><name>mx</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type><name>vc</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>run</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>diff</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>thrs</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>po</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <while>while<condition>(<expr><name>po</name><operator>&lt;=</operator><name>i</name></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>po</name><operator>++</operator></expr>;</expr_stmt></block></while>
        <while>while<condition>(<expr><name>po</name><operator>&lt;=</operator><name>n</name><operator>&amp;&amp;</operator><name><name>vc</name><index>[<expr><name>po</name></expr>]</index></name><operator>-</operator><name><name>vc</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;=</operator><name>diff</name></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>po</name><operator>++</operator></expr>;</expr_stmt></block></while>
        <if>if<condition>(<expr><name>po</name><operator>&lt;=</operator><name>n</name></expr>)</condition><then>
        <block>{
           <expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>+=</operator><operator>(</operator><name><name>dp</name><index>[<expr><name>n</name></expr>]</index></name><operator>-</operator><name><name>dp</name><index>[<expr><name>po</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>-</operator><operator>(</operator><operator>(</operator><name>n</name><operator>-</operator><name>po</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><operator>(</operator><name><name>vc</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name>diff</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>+=</operator><literal type="number">1LL</literal><operator>*</operator><operator>(</operator><name>i</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name><name>vc</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>dp</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
        <comment type="line">//if(po&gt;n)continue;</comment>
        <comment type="line">//ans[i]+=vc[n]-vc[po-1];</comment>
    }</block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <if>if<condition>(<expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;=</operator><name>thrs</name></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
    }</block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><name>po</name><operator>=</operator><name>n</name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>n</name></expr></init></decl>;</init><condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">1</literal></expr>;</condition><incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
    <block>{
        <while>while<condition>(<expr><name>po</name><operator>&gt;=</operator><name>i</name></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>po</name><operator>--</operator></expr>;</expr_stmt></block></while>
        <while>while<condition>(<expr><name>po</name><operator>&gt;=</operator><literal type="number">1</literal><operator>&amp;&amp;</operator><name><name>vc</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>vc</name><index>[<expr><name>po</name></expr>]</index></name><operator>&lt;=</operator><name>diff</name></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>po</name><operator>--</operator></expr>;</expr_stmt></block></while>
        <if>if<condition>(<expr><name>po</name><operator>&gt;=</operator><literal type="number">1</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>+=</operator><operator>(</operator><name><name>vc</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name>diff</name><operator>)</operator><operator>*</operator><name>po</name><operator>-</operator><name><name>dp</name><index>[<expr><name>po</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></then></if>
        <if>if<condition>(<expr><name>i</name><operator>&lt;</operator><name>n</name></expr>)</condition><then>
        <block>{
           <expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>+=</operator><operator>(</operator><name><name>dp</name><index>[<expr><name>n</name></expr>]</index></name><operator>-</operator><name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>-</operator><literal type="number">1LL</literal><operator>*</operator><operator>(</operator><name>n</name><operator>-</operator><name>i</name><operator>)</operator><operator>*</operator><name><name>vc</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></for>
      <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <if>if<condition>(<expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;=</operator><name>thrs</name></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
    }</block></for>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{

    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name>l</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>vc</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>Kth</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>Kth</name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>vc</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>vc</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>vc</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>dp</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>vc</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></for>
    <decl_stmt><decl><type><name>ll</name></type> <name>lo</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>high</name><init>=<expr><literal type="number">1e9</literal></expr></init></decl>,<decl><type ref="prev"/><name>ans</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
 <comment type="line">//   vc.pb(2e9);</comment>
    <while>while<condition>(<expr><name>lo</name><operator>&lt;=</operator><name>high</name></expr>)</condition>
    <block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>mid</name><init>=<expr><operator>(</operator><name>lo</name><operator>+</operator><name>high</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><call><name>run</name><argument_list>(<argument><expr><name>mid</name></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><name>Kth</name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
           <expr_stmt><expr><name>ans</name><operator>=</operator><name>mid</name></expr>;</expr_stmt>
           <expr_stmt><expr><name>high</name><operator>=</operator><name>mid</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        }</block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><name>lo</name><operator>=</operator><name>mid</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
    }</block></while>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>



}</block></function>
</unit>
