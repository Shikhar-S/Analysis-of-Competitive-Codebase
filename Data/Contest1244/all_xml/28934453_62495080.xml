<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28934453_62495080.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>a</name><index>[<expr><literal type="number">131072</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name>n</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>deque</name><argument_list type="generic">&lt; <argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>,<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type><name>d</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>k</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>,<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></type><name>p</name></decl>,<decl><type ref="prev"/><name>p1</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>a</name><operator>+</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>.</operator><name>first</name></name><operator>=</operator><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>.</operator><name>second</name></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name><name>p</name><operator>.</operator><name>first</name></name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name><name>p</name><operator>.</operator><name>second</name></name><operator>++</operator></expr>;</expr_stmt>
        }</block></then>
        <else>else
        <block>{
            <expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>p</name><operator>.</operator><name>first</name></name><operator>=</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>p</name><operator>.</operator><name>second</name></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
        }</block></else></if>
    }</block></for>
    <expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition>
    <block>{
        <if>if<condition>(<expr><call><name><name>d</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">1</literal><operator>||</operator><name>k</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><break>break;</break></block></then></if>
        <if>if<condition>(<expr><call><name><name>d</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call><operator>.</operator><name>second</name><operator>&lt;</operator><call><name><name>d</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>second</name></expr>)</condition><then>
        <block>{
            <comment type="line">//cout&lt;&lt;"line35\n";</comment>
            <expr_stmt><expr><name>p</name><operator>=</operator><call><name><name>d</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>pop_front</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>p1</name><operator>=</operator><call><name><name>d</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>k</name><operator>&gt;=</operator><name><name>p</name><operator>.</operator><name>second</name></name><operator>*</operator><operator>(</operator><name><name>p1</name><operator>.</operator><name>first</name></name><operator>-</operator><name><name>p</name><operator>.</operator><name>first</name></name><operator>)</operator></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>k</name><operator>-=</operator><operator>(</operator><name><name>p</name><operator>.</operator><name>second</name></name><operator>*</operator><operator>(</operator><name><name>p1</name><operator>.</operator><name>first</name></name><operator>-</operator><name><name>p</name><operator>.</operator><name>first</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call><operator>.</operator><name>second</name><operator>+=</operator><name><name>p</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt>
            }</block></then>
            <else>else
            <block>{
                <expr_stmt><expr><name><name>p</name><operator>.</operator><name>first</name></name><operator>+=</operator><operator>(</operator><name>k</name><operator>/</operator><name><name>p</name><operator>.</operator><name>second</name></name><operator>)</operator></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>push_front</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            }</block></else></if>
            <comment type="line">//cout&lt;&lt;k&lt;&lt;endl;</comment>
        }</block></then>
        <else>else
        <block>{
            <comment type="line">//cout&lt;&lt;"line54\n";</comment>
            <expr_stmt><expr><name>p</name><operator>=</operator><call><name><name>d</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>p1</name><operator>=</operator><call><name><name>d</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>k</name><operator>&gt;=</operator><name><name>p</name><operator>.</operator><name>second</name></name><operator>*</operator><operator>(</operator><name><name>p</name><operator>.</operator><name>first</name></name><operator>-</operator><name><name>p1</name><operator>.</operator><name>first</name></name><operator>)</operator></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>k</name><operator>-=</operator><operator>(</operator><name><name>p</name><operator>.</operator><name>second</name></name><operator>*</operator><operator>(</operator><name><name>p</name><operator>.</operator><name>first</name></name><operator>-</operator><name><name>p1</name><operator>.</operator><name>first</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>second</name><operator>+=</operator><name><name>p</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt>
            }</block></then>
            <else>else
            <block>{
                <expr_stmt><expr><name><name>p</name><operator>.</operator><name>first</name></name><operator>-=</operator><operator>(</operator><name>k</name><operator>/</operator><name><name>p</name><operator>.</operator><name>second</name></name><operator>)</operator></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            }</block></else></if>
            <comment type="line">//cout&lt;&lt;k&lt;&lt;endl;</comment>
        }</block></else></if>
    }</block></while>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name><name>d</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>first</name><operator>-</operator><call><name><name>d</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call><operator>.</operator><name>first</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
