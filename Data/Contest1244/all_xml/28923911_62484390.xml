<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28923911_62484390.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>


<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ull</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>ll</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rand</name></cpp:macro> <cpp:value>shittttty_shit</cpp:value></cpp:define>
<decl_stmt><decl><type><name>mt19937</name></type> <name>rng</name><argument_list>(<argument><expr><call><name><name>chrono</name><operator>::</operator><name>steady_clock</name><operator>::</operator><name>now</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>time_since_epoch</name><argument_list>()</argument_list></call><operator>.</operator><call><name>count</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mt19937_64</name></type> <name>rng_64</name><argument_list>(<argument><expr><call><name><name>chrono</name><operator>::</operator><name>steady_clock</name><operator>::</operator><name>now</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>time_since_epoch</name><argument_list>()</argument_list></call><operator>.</operator><call><name>count</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>


<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>, <argument><expr><name>string</name></expr></argument>&gt;</argument_list></name></type> <name>pst</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>pii</name></expr></argument>, <argument><expr><name>pii</name></expr></argument>&gt;</argument_list></name></type> <name>piii</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>piii</name></expr></argument>&gt;</argument_list></name></type> <name>vpii</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>pll</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt; <argument><expr><name>vi</name></expr></argument> &gt;</argument_list></name></type> <name>vvi</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt; <argument><expr><name>vvi</name></expr></argument> &gt;</argument_list></name></type> <name>vvvi</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pii</name></expr></argument>&gt;</argument_list></name></type> <name>vpi</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>short</name></expr></argument>&gt;</argument_list></name></type> <name>vs</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vs</name></expr></argument>&gt;</argument_list></name></type> <name>vvs</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vvs</name></expr></argument>&gt;</argument_list></name></type> <name>vvvs</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>vl</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vl</name></expr></argument>&gt;</argument_list></name></type> <name>vvl</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vvl</name></expr></argument>&gt;</argument_list></name></type> <name>vvvl</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ld</name></expr></argument>&gt;</argument_list></name></type> <name>vld</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vld</name></expr></argument>&gt;</argument_list></name></type> <name>vvld</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vvld</name></expr></argument>&gt;</argument_list></name></type> <name>vvvld</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>&gt;</argument_list></name></type> <name>vst</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vst</name></expr></argument>&gt;</argument_list></name></type> <name>vvst</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ld</name></expr></argument>, <argument><expr><name>ld</name></expr></argument>&gt;</argument_list></name></type> <name>pld</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>pld</name></expr></argument>, <argument><expr><name>pld</name></expr></argument>&gt;</argument_list></name></type> <name>pldd</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pld</name></expr></argument>&gt;</argument_list></name></type> <name>vpd</name>;</typedef>
<typedef>typedef <type><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>double</name></expr></argument>&gt;</argument_list></name></type> <name>base</name>;</typedef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inmin</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a = min(a, (b))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inmax</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a = max(a, (b))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>my_abs</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((a) &gt;= 0) ? (a) : -(a))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>make_pair(a, (b))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALL</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a.begin(),a.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RALL</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a.rbegin(),a.rend()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sqr</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) * (x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fori</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = 0; i &lt; int(n); ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SZ</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)((a).size()))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MODIK</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(a &gt;= M ? a - M : a)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>triple</name><parameter_list>(<parameter><type><name>T</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>tuple&lt;T, T, T&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>quad</name><parameter_list>(<parameter><type><name>T</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>tuple&lt;T, T, T, T&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>watch</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout &lt;&lt; (#x) &lt;&lt; " = " &lt;&lt; x &lt;&lt; endl;</cpp:value></cpp:define>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MAX_HOME</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cerr</name></cpp:macro> <cpp:value>cout</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cerr</name></cpp:macro> <cpp:value>if (false) cerr</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>PI</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <call><name>acos</name><argument_list>(<argument><expr><literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>string</name></type> <name>DIGITS</name> <init>= <expr><literal type="string">"0123456789"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>string</name></type> <name>ALPH</name> <init>= <expr><literal type="string">"abcdefghijklmnopqrstuvwxyz"</literal></expr></init></decl>;</decl_stmt>

<function type="operator"><type><name>istream</name> <modifier>&amp;</modifier></type><name>operator <name>&gt;&gt;</name></name> <parameter_list>(<parameter><decl><type><name>istream</name> <modifier>&amp;</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>pii</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><name>in</name> <operator>&gt;&gt;</operator> <name><name>a</name><operator>.</operator><name>first</name></name> <operator>&gt;&gt;</operator> <name><name>a</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt>
    <return>return <expr><name>in</name></expr>;</return>
}</block></function>


<function type="operator"><type><name>ostream</name> <modifier>&amp;</modifier></type><name>operator <name>&lt;&lt;</name></name> <parameter_list>(<parameter><decl><type><name>ostream</name> <modifier>&amp;</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>pii</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <name><name>a</name><operator>.</operator><name>first</name></name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal> <operator>&lt;&lt;</operator> <name><name>a</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt>
    <return>return <expr><name>out</name></expr>;</return>
}</block></function>


<function type="operator"><type><name>istream</name> <modifier>&amp;</modifier></type><name>operator <name>&gt;&gt;</name></name> <parameter_list>(<parameter><decl><type><name>istream</name> <modifier>&amp;</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>pld</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><name>in</name> <operator>&gt;&gt;</operator> <name><name>a</name><operator>.</operator><name>first</name></name> <operator>&gt;&gt;</operator> <name><name>a</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt>
    <return>return <expr><name>in</name></expr>;</return>
}</block></function>


<function type="operator"><type><name>ostream</name> <modifier>&amp;</modifier></type><name>operator <name>&lt;&lt;</name></name> <parameter_list>(<parameter><decl><type><name>ostream</name> <modifier>&amp;</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>pld</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <name><name>a</name><operator>.</operator><name>first</name></name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal> <operator>&lt;&lt;</operator> <name><name>a</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt>
    <return>return <expr><name>out</name></expr>;</return>
}</block></function>


<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T0</name></parameter>, <parameter><type><name>class</name></type> <name>T1</name></parameter>&gt;</parameter_list></template>
<specifier>inline</specifier> <type><name>ostream</name> <modifier>&amp;</modifier></type> <name>operator <name>&lt;&lt;</name></name> <parameter_list>(<parameter><decl><type><name>ostream</name> <modifier>&amp;</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>T0</name></expr></argument>, <argument><expr><name>T1</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><name>out</name> <operator>&lt;&lt;</operator> <literal type="string">"{"</literal> <operator>&lt;&lt;</operator> <name><name>a</name><operator>.</operator><name>first</name></name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal> <operator>&lt;&lt;</operator> <name><name>a</name><operator>.</operator><name>second</name></name> <operator>&lt;&lt;</operator> <literal type="string">"}"</literal></expr>;</return>
}</block></function>

<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T0</name></parameter>, <parameter><type><name>class</name></type> <name>T1</name></parameter>, <parameter><type><name>class</name></type> <name>T2</name></parameter>&gt;</parameter_list></template>
<specifier>inline</specifier> <type><name>ostream</name> <modifier>&amp;</modifier></type> <name>operator <name>&lt;&lt;</name></name> <parameter_list>(<parameter><decl><type><name>ostream</name> <modifier>&amp;</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>T0</name></expr></argument>, <argument><expr><name>T1</name></expr></argument>, <argument><expr><name>T2</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><name>out</name> <operator>&lt;&lt;</operator> <literal type="string">"{"</literal> <operator>&lt;&lt;</operator> <call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">", "</literal> <operator>&lt;&lt;</operator> <call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">", "</literal> <operator>&lt;&lt;</operator> <call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">"}"</literal></expr>;</return>
}</block></function>

<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T0</name></parameter>, <parameter><type><name>class</name></type> <name>T1</name></parameter>, <parameter><type><name>class</name></type> <name>T2</name></parameter>, <parameter><type><name>class</name></type> <name>T3</name></parameter>&gt;</parameter_list></template>
<specifier>inline</specifier> <type><name>ostream</name> <modifier>&amp;</modifier></type> <name>operator <name>&lt;&lt;</name></name> <parameter_list>(<parameter><decl><type><name>ostream</name> <modifier>&amp;</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>T0</name></expr></argument>, <argument><expr><name>T1</name></expr></argument>, <argument><expr><name>T2</name></expr></argument>, <argument><expr><name>T3</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><name>out</name> <operator>&lt;&lt;</operator> <literal type="string">"{"</literal> <operator>&lt;&lt;</operator> <call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">", "</literal> <operator>&lt;&lt;</operator> <call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator>
               <literal type="string">", "</literal> <operator>&lt;&lt;</operator> <call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">", "</literal> <operator>&lt;&lt;</operator>  <call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">3</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">"}"</literal></expr>;</return>
}</block></function>

<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<specifier>inline</specifier> <type><name>ostream</name> <modifier>&amp;</modifier></type> <name>operator <name>&lt;&lt;</name></name> <parameter_list>(<parameter><decl><type><name>ostream</name> <modifier>&amp;</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <literal type="string">"["</literal></expr>;</expr_stmt>
    <macro><name>fori</name> <argument_list>(<argument>i</argument>, <argument>a.size()</argument>)</argument_list></macro>
        <expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>&gt;</argument_list></name><block>{<expr><literal type="string">", "</literal></expr>, <expr><literal type="string">"]  "</literal></expr>}</block><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <call><name><name>a</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></expr>;</expr_stmt>
    <return>return <expr><name>out</name></expr>;</return>
}</block></function>


<function><type><name>void</name></type> <name>print</name><parameter_list>(<parameter><decl><type><name>vi</name></type> <name>kek</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>ofstream</name></type> <name>cout</name><argument_list>(<argument><expr><literal type="string">"output.txt"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>SZ</name><argument_list>(<argument><expr><name>kek</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="char">' '</literal> <operator>&lt;&lt;</operator> <name>k</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>auto</name></type> <name>p</name> <range>: <expr><name>kek</name></expr></range></decl></init>)</control> <block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>p</name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>


<function_decl><type><name>void</name></type> <name>smain</name><parameter_list>()</parameter_list>;</function_decl>

<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ART_HOME</name></cpp:ifdef>
    <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"input.txt"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>clock_t</name></type> <name>start</name> <init>= <expr><call><name>clock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>setprecision</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>fixed</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>smain</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ART_HOME</name></cpp:ifdef>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"\n\n\n\nTOTAL EXECUTION TIME: "</literal> <operator>&lt;&lt;</operator> <call><name>float</name><argument_list>( <argument><expr><call><name>clock</name> <argument_list>()</argument_list></call> <operator>-</operator> <name>start</name></expr></argument> )</argument_list></call> <operator>/</operator>  <name>CLOCKS_PER_SEC</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>


<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>M1</name> <init>= <expr><literal type="number">1000000093</literal></expr></init></decl>, <decl><type ref="prev"/><name>p1</name> <init>= <expr><literal type="number">27162</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>M2</name> <init>= <expr><literal type="number">1000000087</literal></expr></init></decl>, <decl><type ref="prev"/><name>p2</name> <init>= <expr><literal type="number">241</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ld</name></type> <name>pi</name> <init>= <expr><call><name>atan2l</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>, <decl><type ref="prev"/><name>EPS</name> <init>= <expr><literal type="number">1e-8</literal></expr></init></decl>, <decl><type ref="prev"/><name>PEPS</name> <init>= <expr><literal type="number">1e-7</literal></expr></init></decl>, <decl><type ref="prev"/><name>oo</name> <init>= <expr><literal type="number">1e12</literal> <operator>+</operator> <literal type="number">100</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">1e6</literal> <operator>+</operator> <literal type="number">100</literal></expr></init></decl>, <decl><type ref="prev"/><name>B</name> <init>= <expr><literal type="number">50</literal></expr></init></decl>, <decl><type ref="prev"/><name>M</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>, <decl><type ref="prev"/><name>K</name> <init>= <expr><literal type="number">110</literal></expr></init></decl>, <decl><type ref="prev"/><name>psze</name> <init>= <expr><literal type="number">17</literal></expr></init></decl>;</decl_stmt>


<function><type><name>int</name></type> <name>gcd</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>&amp;</modifier></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>&amp;</modifier></type> <name>y</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>a</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <return>return <expr><name>b</name></expr>;</return>
    }</block></then></if>
    <decl_stmt><decl><type><name>int</name></type> <name>x1</name></decl>, <decl><type ref="prev"/><name>y1</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><call><name>gcd</name> <argument_list>(<argument><expr><name>b</name><operator>%</operator><name>a</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>x</name> <operator>=</operator> <name>y1</name> <operator>-</operator> <operator>(</operator><name>b</name> <operator>/</operator> <name>a</name><operator>)</operator> <operator>*</operator> <name>x1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>y</name> <operator>=</operator> <name>x1</name></expr>;</expr_stmt>
    <return>return <expr><name>d</name></expr>;</return>
}</block></function>

<function><type><name>bool</name></type> <name>find_any_solution</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>&amp;</modifier></type> <name>x0</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>&amp;</modifier></type> <name>y0</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>&amp;</modifier></type> <name>g</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name>g</name> <operator>=</operator> <call><name>gcd</name> <argument_list>(<argument><expr><call><name>abs</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>abs</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>x0</name></expr></argument>, <argument><expr><name>y0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>c</name> <operator>%</operator> <name>g</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
    <expr_stmt><expr><name>x0</name> <operator>*=</operator> <name>c</name> <operator>/</operator> <name>g</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>y0</name> <operator>*=</operator> <name>c</name> <operator>/</operator> <name>g</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>a</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then>   <block type="pseudo"><expr_stmt><expr><name>x0</name> <operator>*=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
    <if>if <condition>(<expr><name>b</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then>   <block type="pseudo"><expr_stmt><expr><name>y0</name> <operator>*=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
}</block></function>


<function><type><name>bool</name></type> <name>stupid</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>d</name></decl></parameter>)</parameter_list>
<block>{
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
        <block type="pseudo"><for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>+</operator> <name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
        <block>{
            <if>if <condition>(<expr><name>i</name> <operator>*</operator> <name>w</name> <operator>+</operator> <name>j</name> <operator>*</operator> <name>d</name> <operator>==</operator> <name>p</name></expr>)</condition><then>
                <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
        }</block></for></block></for>

    <return>return <expr><literal type="number">1</literal></expr>;</return>
}</block></function>


<function><type><name>void</name></type> <name>smain</name><parameter_list>()</parameter_list> <block>{

    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>p</name> <operator>&gt;&gt;</operator> <name>w</name> <operator>&gt;&gt;</operator> <name>d</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>pii</name></type> <name>ans</name> <init>= <expr><call><name>mp</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <call><name>min</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
    <block>{
        <if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>-</operator> <name>d</name> <operator>*</operator> <name>i</name><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then>
            <block type="pseudo"><break>break;</break></block></then></if>

        <if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>-</operator> <name>d</name> <operator>*</operator> <name>i</name><operator>)</operator> <operator>%</operator> <name>w</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then>
            <block type="pseudo"><continue>continue;</continue></block></then></if>

        <expr_stmt><expr><name>ans</name> <operator>=</operator> <call><name>mp</name><argument_list>(<argument><expr><operator>(</operator><name>p</name> <operator>-</operator> <name>d</name> <operator>*</operator> <name>i</name><operator>)</operator> <operator>/</operator> <name>w</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    }</block></for>

    <if>if <condition>(<expr><name><name>ans</name><operator>.</operator><name>first</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>ans</name><operator>.</operator><name>first</name></name> <operator>+</operator> <name><name>ans</name><operator>.</operator><name>second</name></name> <operator>&lt;=</operator> <name>n</name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal> <operator>&lt;&lt;</operator> <name>n</name> <operator>-</operator> <name><name>ans</name><operator>.</operator><name>first</name></name> <operator>-</operator> <name><name>ans</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt></block></then>
    <else>else
        <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"-1\n"</literal></expr>;</expr_stmt></block></else></if>
}</block></function></unit>
