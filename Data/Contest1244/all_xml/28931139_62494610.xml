<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28931139_62494610.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro> <cpp:value>998244353</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inf</name></cpp:macro> <cpp:value>0x3f3f3f3f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>linf</name></cpp:macro> <cpp:value>0x3f3f3f3f3f3f3f3fll</cpp:value></cpp:define>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ull</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name><init>=<expr><literal type="number">1e5</literal><operator>+</operator><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>dp</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>tmp</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>fr</name><index>[<expr><name>maxn</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>g</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>fa</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>to</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>lst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name><name>vis</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>queue</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>que</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>col</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>build</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{
	<expr_stmt><expr><call><name><name>que</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while<condition>(<expr><operator>!</operator><call><name><name>que</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>y</name><init>=<expr><call><name><name>que</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>que</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>lst</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>vis</name><index>[<expr><name>y</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>g</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block type="pseudo"><if>if<condition>(<expr><operator>!</operator><name><name>vis</name><index>[<expr><name><name>g</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><call><name><name>que</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name><name>g</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if></block></for>
	}</block></while>
}</block></function>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>upd</name><parameter_list>(<parameter><decl><type><name>ll</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
	<if>if<condition>(<expr><name>b</name><operator>&lt;</operator><name>a</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>a</name><operator>=</operator><name>b</name></expr>;</expr_stmt></block></then></if>
}</block></function>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>cs</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
			<block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%I64d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>g</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>emplace_back</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>g</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>emplace_back</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><if>if<condition>(<expr><name><name>g</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>&gt;</operator><literal type="number">2</literal></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-1\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		}</block></then></if></block></for>
	<decl_stmt><decl><type><name>int</name></type> <name>rt</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><if>if<condition>(<expr><name><name>g</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>rt</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
			<break>break;</break>
		}</block></then></if></block></for>
	<if>if<condition>(<expr><operator>!</operator><name>rt</name></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-1\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></then></if>
	<expr_stmt><expr><call><name>build</name><argument_list>(<argument><expr><name>rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dp</name></expr></argument>,<argument><expr><literal type="number">0x3f</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>c1</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>c1</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>c1</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>c2</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>c2</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>c2</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><if>if<condition>(<expr><name>c1</name><operator>!=</operator><name>c2</name></expr>)</condition><then>
		<block type="pseudo"><expr_stmt><expr><call><name>upd</name><argument_list>(<argument><expr><name><name>dp</name><index>[<expr><name>c1</name></expr>]</index><index>[<expr><name>c2</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>c</name><index>[<expr><name>c1</name></expr>]</index><index>[<expr><name><name>lst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>+</operator><name><name>c</name><index>[<expr><name>c2</name></expr>]</index><index>[<expr><name><name>lst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></block></for></block></for>
		
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">3</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>,<argument><expr><literal type="number">0x3f</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>c1</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>c1</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>c1</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>c2</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>c2</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>c2</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><if>if<condition>(<expr><name>c1</name><operator>!=</operator><name>c2</name><operator>&amp;&amp;</operator><name><name>dp</name><index>[<expr><name>c1</name></expr>]</index><index>[<expr><name>c2</name></expr>]</index></name><operator>&lt;</operator><name>linf</name></expr>)</condition><then>
			<block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>c3</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>c3</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>c3</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><if>if<condition>(<expr><name>c3</name><operator>!=</operator><name>c1</name><operator>&amp;&amp;</operator><name>c3</name><operator>!=</operator><name>c2</name></expr>)</condition><then>
			<block>{
				<if>if<condition>(<expr><operator>(</operator><name><name>dp</name><index>[<expr><name>c1</name></expr>]</index><index>[<expr><name>c2</name></expr>]</index></name><operator>+</operator><name><name>c</name><index>[<expr><name>c3</name></expr>]</index><index>[<expr><name><name>lst</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>)</operator><operator>&lt;</operator><name><name>tmp</name><index>[<expr><name>c2</name></expr>]</index><index>[<expr><name>c3</name></expr>]</index></name></expr>)</condition><then>
				<block>{
					<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>c2</name></expr>]</index><index>[<expr><name>c3</name></expr>]</index></name><operator>=</operator><name><name>dp</name><index>[<expr><name>c1</name></expr>]</index><index>[<expr><name>c2</name></expr>]</index></name><operator>+</operator><name><name>c</name><index>[<expr><name>c3</name></expr>]</index><index>[<expr><name><name>lst</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>fr</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>c2</name></expr>]</index><index>[<expr><name>c3</name></expr>]</index></name><operator>=</operator><name>c1</name></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then></if></block></for></block></then></if></block></for></block></for>
			
		<for>for<control>(<init><decl><type><name>int</name></type> <name>c1</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>c1</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>c1</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>c2</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>c2</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>c2</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name><name>dp</name><index>[<expr><name>c1</name></expr>]</index><index>[<expr><name>c2</name></expr>]</index></name><operator>=</operator><name><name>tmp</name><index>[<expr><name>c1</name></expr>]</index><index>[<expr><name>c2</name></expr>]</index></name></expr>;</expr_stmt></block></for></block></for>
	}</block></for>
	<decl_stmt><decl><type><name>ll</name></type> <name>ans</name><init>=<expr><name>linf</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>b1</name></decl>,<decl><type ref="prev"/><name>b2</name></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>c1</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>c1</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>c1</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>c2</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>c2</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>c2</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><if>if<condition>(<expr><name>c1</name><operator>!=</operator><name>c2</name></expr>)</condition><then>
	<block>{
		<if>if<condition>(<expr><name><name>dp</name><index>[<expr><name>c1</name></expr>]</index><index>[<expr><name>c2</name></expr>]</index></name><operator>&lt;</operator><name>ans</name></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>ans</name><operator>=</operator><name><name>dp</name><index>[<expr><name>c1</name></expr>]</index><index>[<expr><name>c2</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>b1</name><operator>=</operator><name>c1</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>b2</name><operator>=</operator><name>c2</name></expr>;</expr_stmt>
		}</block></then></if>
	}</block></then></if></block></for></block></for>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>n</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>col</name><index>[<expr><name><name>lst</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>=</operator><name>b2</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>col</name><index>[<expr><name><name>lst</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr>]</index></name><operator>=</operator><name>b1</name></expr>;</expr_stmt>
<comment type="line">//	cs.push_back(b2);</comment>
<comment type="line">//	cs.push_back(b1);</comment>
	<while>while<condition>(<expr><name>i</name><operator>&gt;</operator><literal type="number">2</literal></expr>)</condition>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>t</name><init>=<expr><name><name>fr</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>b1</name></expr>]</index><index>[<expr><name>b2</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>t</name><operator>==</operator><name>b1</name><operator>||</operator><name>t</name><operator>==</operator><name>b2</name><operator>||</operator><name>b1</name><operator>==</operator><name>b2</name></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-1\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		}</block></then></if>
		<expr_stmt><expr><name>b2</name><operator>=</operator><name>b1</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>b1</name><operator>=</operator><name>t</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>col</name><index>[<expr><name><name>lst</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">3</literal></expr>]</index></name></expr>]</index></name><operator>=</operator><name>t</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>cs</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>
	}</block></while>
	<expr_stmt><expr><call><name>reverse</name><argument_list>(<argument><expr><call><name><name>cs</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>cs</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%I64d\n"</literal></expr></argument>,<argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d "</literal></expr></argument>,<argument><expr><name><name>col</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
