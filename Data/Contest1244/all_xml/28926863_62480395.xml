<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28926863_62480395.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">2e5</literal> <operator>+</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>inf</name> <init>= <expr><literal type="number">1e18</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name><name>d</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>head</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name>tot</name></decl>;</decl_stmt>
<struct>struct <name>Edge</name>
<block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>v</name></decl>, <decl><type ref="prev"/><name>nex</name></decl>;</decl_stmt>
</public>}</block><decl><name><name>e</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</struct>
<decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><name>inf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>c</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>col</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>ANS</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list> 
<block>{
	<expr_stmt><expr><name><name>e</name><index>[<expr><operator>++</operator><name>tot</name></expr>]</index></name> <operator>=</operator> <name>Edge</name><block>{ <expr><name>u</name></expr>,<expr><name>v</name></expr>,<expr><name><name>head</name><index>[<expr><name>u</name></expr>]</index></name></expr> }</block></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>head</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <name>tot</name></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fa</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>up1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>up2</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>cost</name></decl></parameter>)</parameter_list> 
<block>{
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> 
	<block>{
		<if>if <condition>(<expr><name>up1</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>up2</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> 
		<block>{
			<expr_stmt><expr><name><name>col</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>ll</name></type> <name>t</name> <init>= <expr><name>cost</name> <operator>+</operator> <name><name>c</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>pos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>bool</name></type> <name>f</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
			<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><name><name>head</name><index>[<expr><name>pos</name></expr>]</index></name></expr></init></decl>;</init> <condition><expr><name>k</name></expr>;</condition> <incr><expr><name>k</name> <operator>=</operator><name><name>e</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>nex</name></expr></incr>)</control>
			<block>{
				<if>if <condition>(<expr><name><name>e</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>v</name> <operator>==</operator> <name>fa</name></expr>)</condition><then>
					<block type="pseudo"><continue>continue;</continue></block></then></if>
				<expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name><name>e</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>v</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></for>
			<if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition><then> 
			<block>{
				<if>if <condition>(<expr><name>t</name> <operator>&lt;</operator> <name>ans</name></expr>)</condition><then> 
				<block>{
					<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> 
						<block type="pseudo"><expr_stmt><expr><name><name>ANS</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>col</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block></for>
					<expr_stmt><expr><name>ans</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then></if>
		}</block></then>
		<elseif>else <if>if <condition>(<expr><name>up1</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> 
		<block>{
			<if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>up2</name></expr>)</condition><then> 
			<block>{
				<expr_stmt><expr><name><name>col</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>ll</name></type> <name>t</name> <init>= <expr><name>cost</name> <operator>+</operator> <name><name>c</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>pos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>bool</name></type> <name>f</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
				<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><name><name>head</name><index>[<expr><name>pos</name></expr>]</index></name></expr></init></decl>;</init> <condition><expr><name>k</name></expr>;</condition> <incr><expr><name>k</name> <operator>=</operator> <name><name>e</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>nex</name></expr></incr>)</control> 
				<block>{
					<if>if <condition>(<expr><name><name>e</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>v</name> <operator>==</operator> <name>fa</name></expr>)</condition><then>
						<block type="pseudo"><continue>continue;</continue></block></then></if>
					<expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name><name>e</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>v</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>up2</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></for>
				<if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition><then> 
				<block>{
					<if>if <condition>(<expr><name>t</name> <operator>&lt;</operator> <name>ans</name></expr>)</condition><then> 
					<block>{
						<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
							<block type="pseudo"><expr_stmt><expr><name><name>ANS</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>col</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block></for>
						<expr_stmt><expr><name>ans</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
					}</block></then></if>
				}</block></then></if>
			}</block></then></if>
		}</block></then></if></elseif>
		<else>else 
		<block>{
			<if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>up1</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>!=</operator> <name>up2</name></expr>)</condition><then> 
			<block>{
				<expr_stmt><expr><name><name>col</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>ll</name></type> <name>t</name> <init>= <expr><name>cost</name> <operator>+</operator> <name><name>c</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>pos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>bool</name></type> <name>f</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
				<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><name><name>head</name><index>[<expr><name>pos</name></expr>]</index></name></expr></init></decl>;</init> <condition><expr><name>k</name></expr>;</condition> <incr><expr><name>k</name> <operator>=</operator> <name><name>e</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>nex</name></expr></incr>)</control> 
				<block>{
					<if>if <condition>(<expr><name><name>e</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>v</name> <operator>==</operator> <name>fa</name></expr>)</condition><then> 
						<block type="pseudo"><continue>continue;</continue></block></then></if>
					<expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name><name>e</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>v</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>up2</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></for>
				<if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition><then> 
				<block>{
					<if>if <condition>(<expr><name>t</name> <operator>&lt;</operator> <name>ans</name></expr>)</condition><then> 
					<block>{
						<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> 
							<block type="pseudo"><expr_stmt><expr><name><name>ANS</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>col</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block></for>
						<expr_stmt><expr><name>ans</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
					}</block></then></if>
				}</block></then></if>
			}</block></then></if>
		}</block></else></if>
	}</block></for>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><name>tot</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>++</operator><name><name>d</name><index>[<expr><name>x</name></expr>]</index></name></expr><operator>,</operator> <expr><operator>++</operator><name><name>d</name><index>[<expr><name>y</name></expr>]</index></name></expr>;</expr_stmt>
	}</block></for>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{
		<if>if <condition>(<expr><name><name>d</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-1\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		}</block></then></if>
	}</block></for>
	<decl_stmt><decl><type><name>int</name></type> <name>root</name></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block type="pseudo"><if>if <condition>(<expr><name><name>d</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>root</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
			<break>break;</break>
		}</block></then></if></block></for>
	<expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>, <argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><ternary><condition><expr><name>i</name> <operator>==</operator> <name>n</name></expr> ?</condition><then> <expr><literal type="string">"%d"</literal></expr> </then><else>: <expr><literal type="string">"%d "</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>ANS</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
}</block></function>


</unit>
