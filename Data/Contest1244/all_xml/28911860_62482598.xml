<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28911860_62482598.cpp"><comment type="block" format="doxygen">/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author ExplodingFreeze
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fstream&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=(a);i&lt;(b);i++)</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MOD</name><init>=<expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<using>using <name>pii</name><init>=<type><name><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></name></type></init>;</using>
<comment type="line">//mt19937 rng(chrono::steady_clock::now().time_since_epoch().count()); &lt;-- PUT IN main()/solve()!</comment>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>p</name></decl>,<decl><type ref="prev"/><name>w</name></decl>,<decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>steps</name><init>=<expr><literal type="number">1e6</literal></expr></init></decl>;</decl_stmt>
<class>class <name>CTheFootballSeason</name> <block>{<private type="default">
</private><public>public:
	<function><type><name>void</name></type> <name>solve</name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>istream</name></name><modifier>&amp;</modifier></type> <name>in</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type> <name>out</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name>in</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>p</name> <operator>&gt;&gt;</operator> <name>w</name> <operator>&gt;&gt;</operator> <name>d</name></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>n</name><operator>*</operator><name>w</name><operator>&lt;</operator><name>p</name></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <literal type="string">"-1\n"</literal></expr>;</expr_stmt>
			<return>return;</return>
		}</block></then></if>
		<decl_stmt><decl><type><name>int</name></type> <name>maxwins</name><init>=<expr><name>p</name><operator>/</operator><name>w</name><operator>+</operator><operator>(</operator><name>p</name><operator>%</operator><name>w</name><operator>!=</operator><literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<while>while<condition>(<expr><name>i</name><operator>&lt;=</operator><call><name>min</name><argument_list>(<argument><expr><name>steps</name></expr></argument>,<argument><expr><name>maxwins</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{
			<while>while<condition>(<expr><name>j</name><operator>&lt;</operator><name>n</name><operator>&amp;&amp;</operator><operator>(</operator><operator>(</operator><name>maxwins</name><operator>-</operator><name>i</name><operator>)</operator><operator>*</operator><name>w</name><operator>)</operator><operator>+</operator><operator>(</operator><name>j</name><operator>*</operator><name>d</name><operator>)</operator><operator>&lt;</operator><name>p</name></expr>)</condition>
				<block type="pseudo"><expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt></block></while>
			<if>if<condition>(<expr><name>j</name><operator>&gt;=</operator><name>n</name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <literal type="string">"-1\n"</literal></expr>;</expr_stmt>
				<return>return;</return>
			}</block></then></if>
			<if>if<condition>(<expr><operator>(</operator><operator>(</operator><name>maxwins</name><operator>-</operator><name>i</name><operator>)</operator><operator>*</operator><name>w</name><operator>)</operator><operator>+</operator><operator>(</operator><name>j</name><operator>*</operator><name>d</name><operator>)</operator><operator>==</operator><name>p</name></expr>)</condition><then>
			<block>{
				<decl_stmt><decl><type><name>int</name></type> <name>wins</name><init>=<expr><name>maxwins</name><operator>-</operator><name>i</name></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>int</name></type> <name>draws</name><init>=<expr><name>j</name></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <name>wins</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name>draws</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name>n</name><operator>-</operator><name>wins</name><operator>-</operator><name>draws</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
				<return>return;</return>
			}</block></then></if>
			<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
		}</block></while>
		<expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <literal type="string">"-1\n"</literal></expr>;</expr_stmt>
		<return>return;</return>
	}</block></function>
</public>}</block>;</class>


<function><type><name>int32_t</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>CTheFootballSeason</name></type> <name>solver</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>istream</name></name><modifier>&amp;</modifier></type> <name>in</name><argument_list>(<argument><expr><name><name>std</name><operator>::</operator><name>cin</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type> <name>out</name><argument_list>(<argument><expr><name><name>std</name><operator>::</operator><name>cout</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name>solver</name><operator>.</operator><name>solve</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
