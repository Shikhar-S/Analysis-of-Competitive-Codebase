<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28906393_62490925.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></type> <name>a</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>long</name> <name>long</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>a</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>a</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>l1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>l2</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>r1</name> <init>= <expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>r2</name> <init>= <expr><name>n</name> <operator>-</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>mn</name> <init>= <expr><call><name><name>a</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>a</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>mnc</name> <init>= <expr><call><name><name>a</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>mxc</name> <init>= <expr><call><name><name>a</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>l1</name> <operator>&lt;</operator> <name>r1</name></expr>)</condition>
	<block>{
		<if>if<condition>(<expr><name>k</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
			<block type="pseudo"><break>break;</break></block></then></if>
		<if>if<condition>(<expr><name>l1</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;=</operator> <name>n</name> <operator>-</operator> <name>r1</name></expr>)</condition><then>
		<block>{
			<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>res</name> <init>= <expr><name><name>a</name><index>[<expr><name>l2</name></expr>]</index></name> <operator>-</operator> <name><name>a</name><index>[<expr><name>l1</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<if>if<condition>(<expr><name>k</name> <operator>&gt;=</operator> <name>res</name> <operator>*</operator> <operator>(</operator><name>l1</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name>k</name> <operator>-=</operator> <name>res</name> <operator>*</operator> <operator>(</operator><name>l1</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>mnc</name> <operator>+=</operator> <name>res</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>l1</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>l2</name><operator>++</operator></expr>;</expr_stmt>
			}</block></then>
			<else>else
			<block>{
				<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>g</name> <init>= <expr><name>k</name> <operator>/</operator> <operator>(</operator><name>l1</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name>mnc</name> <operator>+=</operator> <name>g</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>k</name> <operator>-=</operator> <name>g</name> <operator>*</operator> <operator>(</operator><name>l1</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
				<if>if<condition>(<expr><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then>
				<block>{
					<expr_stmt><expr><name>g</name> <operator>=</operator> <name>k</name> <operator>/</operator> <operator>(</operator><name>n</name> <operator>-</operator> <name>r1</name><operator>)</operator></expr>;</expr_stmt>
					<expr_stmt><expr><name>mxc</name> <operator>-=</operator> <name>g</name></expr>;</expr_stmt>
					<break>break;</break>
				}</block></then>
				<else>else
					<block type="pseudo"><break>break;</break></block></else></if>
			}</block></else></if>
		}</block></then>
		<else>else
		<block>{
			<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>res</name> <init>= <expr><name><name>a</name><index>[<expr><name>r1</name></expr>]</index></name> <operator>-</operator> <name><name>a</name><index>[<expr><name>r2</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<if>if<condition>(<expr><name>k</name> <operator>&gt;=</operator> <name>res</name> <operator>*</operator> <operator>(</operator><name>n</name> <operator>-</operator> <name>r1</name><operator>)</operator></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name>k</name> <operator>-=</operator> <name>res</name> <operator>*</operator> <operator>(</operator><name>n</name> <operator>-</operator> <name>r1</name><operator>)</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>mxc</name> <operator>-=</operator> <name>res</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>r1</name><operator>--</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>r2</name><operator>--</operator></expr>;</expr_stmt>
			}</block></then>
			<else>else
			<block>{
				<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>g</name> <init>= <expr><name>k</name> <operator>/</operator> <operator>(</operator><name>n</name> <operator>-</operator> <name>r1</name><operator>)</operator></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name>mxc</name> <operator>-=</operator> <name>g</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>k</name> <operator>-=</operator> <name>g</name> <operator>*</operator> <operator>(</operator><name>n</name> <operator>-</operator> <name>r1</name><operator>)</operator></expr>;</expr_stmt>
				<if>if<condition>(<expr><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then>
				<block>{
					<expr_stmt><expr><name>g</name> <operator>=</operator> <name>k</name> <operator>/</operator> <operator>(</operator><name>l1</name><operator>)</operator></expr>;</expr_stmt>
					<expr_stmt><expr><name>mnc</name> <operator>+=</operator> <name>g</name></expr>;</expr_stmt>
					<break>break;</break>
				}</block></then>
				<else>else
					<block type="pseudo"><break>break;</break></block></else></if>
			}</block></else></if>
		}</block></else></if>
	}</block></while>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>mxc</name> <operator>-</operator> <name>mnc</name></expr>;</expr_stmt>
}</block></function></unit>
