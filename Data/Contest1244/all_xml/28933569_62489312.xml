<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28933569_62489312.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
 
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>LOCAL</name></cpp:ifndef>
		<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>eprintf</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>fprintf(stderr, _VA_ARGS_)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>eprintf</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>42</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
 
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>LL</name>;</typedef>

<decl_stmt><decl><type><name>LL</name></type> <name>n</name></decl> , <decl><type ref="prev"/><name>p</name></decl> , <decl><type ref="prev"/><name>w</name></decl> , <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
 
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>void</name></type> <name>chkmax</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter> , <parameter><decl><type><name>T</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>x</name></expr></argument> , <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>void</name></type> <name>chkmin</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter> , <parameter><decl><type><name>T</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>x</name></expr></argument> , <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>T</name></type> <name>f</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> <expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><call><name>getchar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init>;</init> <condition><expr><operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>c</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr></incr>)</control> <block type="pseudo"><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>f</name> <operator>=</operator> <operator>-</operator><name>f</name></expr>;</expr_stmt></block></then></if></block></for>
    <for>for <control>(<init>;</init> <condition><expr><call><name>isdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>c</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>x</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><name>x</name> <operator>*=</operator> <name>f</name></expr>;</expr_stmt>
}</block></function>

<function><specifier>inline</specifier> <type><name>LL</name></type> <name>mul</name><parameter_list>(<parameter><decl><type><name>LL</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>LL</name></type> <name>y</name></decl></parameter>,<parameter><decl><type><name>LL</name></type> <name>p</name></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name>LL</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> , <decl><type ref="prev"/><name>sign</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>y</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>y</name> <operator>=</operator> <operator>-</operator><name>y</name></expr> <operator>,</operator> <expr><name>sign</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
    <while>while<condition>(<expr><name>y</name></expr>)</condition><block>{
        <if>if<condition>(<expr><name>y</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>res</name><operator>=</operator><operator>(</operator><name>res</name><operator>+</operator><name>x</name><operator>)</operator><operator>%</operator><name>p</name></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name>x</name><operator>=</operator><operator>(</operator><name>x</name><operator>&lt;&lt;</operator><literal type="number">1LL</literal><operator>)</operator><operator>%</operator><name>p</name></expr>;</expr_stmt> <expr_stmt><expr><name>y</name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    }</block></while>
    <expr_stmt><expr><name>res</name><operator>=</operator><operator>(</operator><name>res</name><operator>%</operator><name>p</name><operator>+</operator><name>p</name><operator>)</operator><operator>%</operator><name>p</name></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>sign</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>res</name><operator>=</operator><operator>(</operator><name>p</name><operator>-</operator><name>res</name><operator>)</operator><operator>%</operator><name>p</name></expr>;</expr_stmt></block></then></if>
		<return>return <expr><name>res</name></expr>;</return>
}</block></function>

<function><specifier>inline</specifier> <type><name>LL</name></type> <name>exgcd</name><parameter_list>(<parameter><decl><type><name>LL</name></type> <name>a</name></decl></parameter> , <parameter><decl><type><name>LL</name></type> <name>b</name></decl></parameter> , <parameter><decl><type><name>LL</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter> , <parameter><decl><type><name>LL</name> <modifier>&amp;</modifier></type><name>y</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><name>b</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<return>return <expr><name>a</name></expr>;</return>
		}</block></then> <else>else <block>{
				<decl_stmt><decl><type><name>LL</name></type> <name>gc</name> <init>= <expr><call><name>exgcd</name><argument_list>(<argument><expr><name>b</name></expr></argument> , <argument><expr><name>a</name> <operator>%</operator> <name>b</name></expr></argument> , <argument><expr><name>y</name></expr></argument> , <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name>y</name> <operator>-=</operator> <name>a</name> <operator>/</operator> <name>b</name> <operator>*</operator> <name>x</name></expr>;</expr_stmt>
				<return>return <expr><name>gc</name></expr>;</return>		
		}</block></else></if>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
		
		<expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>LL</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> , <decl><type ref="prev"/><name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>LL</name></type> <name>r</name> <init>= <expr><call><name>exgcd</name><argument_list>(<argument><expr><name>d</name></expr></argument> , <argument><expr><name>w</name></expr></argument> , <argument><expr><name>x</name></expr></argument> , <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>LL</name></type> <name>t</name> <init>= <expr><name>w</name> <operator>/</operator> <name>r</name></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>p</name> <operator>%</operator> <name>r</name></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-1\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><literal type="number">0</literal></expr>;</return>
		}</block></then></if>
    <decl_stmt><decl><type><name>LL</name></type> <name>ansx</name> <init>= <expr><operator>(</operator><call><name>mul</name><argument_list>(<argument><expr><name>p</name> <operator>/</operator> <name>r</name></expr></argument> , <argument><expr><name>x</name></expr></argument> , <argument><expr><name>t</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>t</name><operator>)</operator> <operator>%</operator> <name>t</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>LL</name></type> <name>ansy</name> <init>= <expr><operator>(</operator><name>p</name> <operator>-</operator> <literal type="number">1LL</literal> <operator>*</operator> <name>ansx</name> <operator>*</operator> <name>d</name><operator>)</operator> <operator>/</operator> <name>w</name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>ansx</name> <operator>+</operator> <name>ansy</name> <operator>&lt;=</operator> <name>n</name> <operator>&amp;&amp;</operator> <name>ansx</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ansy</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <literal type="number">1ll</literal> <operator>*</operator> <name>ansx</name> <operator>*</operator> <name>d</name> <operator>+</operator> <literal type="number">1ll</literal> <operator>*</operator> <name>ansy</name> <operator>*</operator> <name>w</name> <operator>==</operator> <name>p</name></expr>)</condition><then>
    		<block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%I64d %I64d %I64d\n"</literal></expr></argument> , <argument><expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><name>ansy</name></expr></argument> , <argument><expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><name>ansx</name></expr></argument> , <argument><expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><name>n</name> <operator>-</operator> <operator>(</operator><name>long</name> <name>long</name><operator>)</operator><name>ansx</name> <operator>-</operator> <operator>(</operator><name>long</name> <name>long</name><operator>)</operator><name>ansy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
    <else>else <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-1\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
    
	  <return>return <expr><literal type="number">0</literal></expr>;</return>
	
}</block></function></unit>
