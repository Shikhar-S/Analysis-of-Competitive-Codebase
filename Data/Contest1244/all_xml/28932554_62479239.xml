<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28932554_62479239.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;int, int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pll</name></cpp:macro> <cpp:value>pair&lt;ll, ll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>str</name></cpp:macro> <cpp:value>string</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(a, b, sizeof(a))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>eps</name></cpp:macro> <cpp:value>1e-6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pi</name></cpp:macro> <cpp:value>atan(1) * 4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inf</name></cpp:macro> <cpp:value>1000000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>llinf</name></cpp:macro> <cpp:value>1000000000000000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int i = (a); i &lt;= (b); i += (c))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FORD</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int i = (a); i &gt;= (b); i -= (c))</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>string</name></type> <name>output</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>lx</name></decl>, <decl><type ref="prev"/><name>ly</name></decl>, <decl><type ref="prev"/><name>ld</name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>eea</name> <parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
	<if>if <condition>(<expr><name>b</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
		<expr_stmt><expr><name>ly</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name>lx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name>ld</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt> <return>return;</return>
	}</block></then></if>
	<expr_stmt><expr><call><name>eea</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name> <operator>%</operator> <name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>ny</name> <init>= <expr><name>lx</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>nx</name> <init>= <expr><name>ly</name> <operator>-</operator> <operator>(</operator><name>a</name> <operator>/</operator> <name>b</name><operator>)</operator> <operator>*</operator> <name>lx</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>ly</name> <operator>=</operator> <name>ny</name></expr>;</expr_stmt> <expr_stmt><expr><name>lx</name> <operator>=</operator> <name>nx</name></expr>;</expr_stmt>
	<return>return;</return>
}</block></function>
<function><type><name>ll</name></type> <name>fgcd</name> <parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
	<if>if <condition>(<expr><name>b</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>a</name></expr>;</return></block></then>
	<else>else <block type="pseudo"><return>return <expr><call><name>fgcd</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name> <operator>%</operator> <name>b</name></expr></argument>)</argument_list></call></expr>;</return></block></else></if>
}</block></function>
<function><type><name>int</name></type> <name>main</name> <parameter_list>()</parameter_list> <block>{
	<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>f</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>mark</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld %lld %lld %lld"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mark</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>d</name> <init>= <expr><name>f</name> <operator>-</operator> <name>p</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>eea</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>lcm</name> <init>= <expr><name>p</name> <operator>*</operator> <name>f</name> <operator>/</operator> <call><name>fgcd</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>dx</name> <init>= <expr><name>lcm</name> <operator>/</operator> <name>p</name></expr></init></decl>, <decl><type ref="prev"/><name>dy</name> <init>= <expr><name>lcm</name> <operator>/</operator> <name>f</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ll</name></type> <name>r</name> <init>= <expr><name>mark</name> <operator>%</operator> <name>p</name></expr></init></decl>, <decl><type ref="prev"/><name>q</name> <init>= <expr><name>mark</name> <operator>/</operator> <name>p</name></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name>ll</name></type> <name>rm</name> <init>= <expr><name>r</name> <operator>%</operator> <name>d</name></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>rm</name> <operator>%</operator> <name>ld</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
		}</block></then></if>
		<decl_stmt><decl><type><name>ll</name></type> <name>x</name> <init>= <expr><name>rm</name> <operator>/</operator> <name>ld</name> <operator>*</operator> <operator>-</operator><name>lx</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ll</name></type> <name>y</name> <init>= <expr><operator>(</operator><name>x</name> <operator>*</operator> <name>p</name> <operator>+</operator> <name>r</name><operator>)</operator> <operator>/</operator> <name>d</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>x</name> <operator>=</operator> <name>q</name> <operator>-</operator> <name>x</name> <operator>-</operator> <name>y</name></expr>;</expr_stmt>
		<comment type="line">//cout &lt;&lt; "first: " &lt;&lt; x &lt;&lt; ' ' &lt;&lt; y &lt;&lt; endl;</comment>
		
		<if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>ll</name></type> <name>b</name> <init>= <expr><operator>-</operator><name>x</name> <operator>/</operator> <name>dx</name> <operator>+</operator> <operator>(</operator><operator>-</operator><name>x</name> <operator>%</operator> <name>dx</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>x</name> <operator>+=</operator> <name>b</name> <operator>*</operator> <name>dx</name></expr>;</expr_stmt> <expr_stmt><expr><name>y</name> <operator>-=</operator> <name>b</name> <operator>*</operator> <name>dy</name></expr>;</expr_stmt>
		}</block></then> <elseif>else <if>if <condition>(<expr><name>x</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>ll</name></type> <name>b</name> <init>= <expr><name>x</name> <operator>/</operator> <name>dx</name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>x</name> <operator>-=</operator> <name>b</name> <operator>*</operator> <name>dx</name></expr>;</expr_stmt> <expr_stmt><expr><name>y</name> <operator>+=</operator> <name>b</name> <operator>*</operator> <name>dy</name></expr>;</expr_stmt>
		}</block></then></if></elseif></if>
		<if>if <condition>(<expr><name><name>y</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>x</name> <operator>+</operator> <name>y</name></expr></argument> &gt;</argument_list></name> <name>k</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>y</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name>x</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name>k</name> <operator>-</operator> <name>x</name> <operator>-</operator> <name>y</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></else></if>
		<comment type="line">//cout &lt;&lt; x &lt;&lt; ' ' &lt;&lt; y &lt;&lt; endl;</comment>
	<comment type="line">// printf("%s\n", output.c_str());</comment>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
