<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28894652_62479422.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<using>using <name>ll</name><init>=<type><name>long</name> <name>long</name></type></init>;</using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name><init>=<expr><literal type="number">1e6</literal><operator>+</operator><literal type="number">5</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name><name>deg</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>color</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>adj</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>ll</name></type> <name>calc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>s1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>s2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cs1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cs2</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>res</name><init>=<expr><name><name>c</name><index>[<expr><name>cs1</name></expr>]</index><index>[<expr><name>s1</name></expr>]</index></name><operator>+</operator><name><name>c</name><index>[<expr><name>cs2</name></expr>]</index><index>[<expr><name>s2</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name><name>deg</name><index>[<expr><name>s2</name></expr>]</index></name><operator>&gt;</operator><literal type="number">1</literal></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>nxt</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>v</name><range>: <expr><name><name>adj</name><index>[<expr><name>s2</name></expr>]</index></name></expr></range></decl></init>)</control> <block>{
            <if>if <condition>(<expr><name>v</name><operator>!=</operator><name>s1</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>nxt</name><operator>=</operator><name>v</name></expr>;</expr_stmt></block></then></if>
        }</block></for>
        <decl_stmt><decl><type><name>int</name></type> <name>nxc</name><init>=<expr><literal type="number">3</literal><operator>-</operator><name>cs1</name><operator>-</operator><name>cs2</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>s1</name><operator>=</operator><name>s2</name></expr>;</expr_stmt> <expr_stmt><expr><name>s2</name><operator>=</operator><name>nxt</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>cs1</name><operator>=</operator><name>cs2</name></expr>;</expr_stmt> <expr_stmt><expr><name>cs2</name><operator>=</operator><name>nxc</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>res</name><operator>+=</operator><name><name>c</name><index>[<expr><name>cs2</name></expr>]</index><index>[<expr><name>s2</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><name>res</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
        <block type="pseudo"><for>for <control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block></for></block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>u</name></decl>,<decl><type ref="prev"/><name>v</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>u</name><operator>&gt;&gt;</operator><name>v</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>adj</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>emplace_back</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>adj</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>emplace_back</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>++</operator><name><name>deg</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><operator>++</operator><name><name>deg</name><index>[<expr><name>v</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></for>

    <decl_stmt><decl><type><name>int</name></type> <name>start</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
        <if>if <condition>(<expr><name><name>deg</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;</operator><literal type="number">2</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"-1"</literal></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>deg</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>start</name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></then></if>
    }</block></for>

    <decl_stmt><decl><type><name>int</name></type> <name>s1</name><init>=<expr><name>start</name></expr></init></decl>, <decl><type ref="prev"/><name>s2</name><init>=<expr><name><name>adj</name><index>[<expr><name>s1</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>res</name><init>=<expr><literal type="number">1e18</literal></expr></init></decl>, <decl><type ref="prev"/><name>cs1</name></decl>, <decl><type ref="prev"/><name>cs2</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{
            <if>if <condition>(<expr><name>i</name><operator>!=</operator><name>j</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>ll</name></type> <name>cres</name><init>=<expr><call><name>calc</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>cres</name><operator>&lt;</operator><name>res</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>res</name><operator>=</operator><name>cres</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>cs1</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>cs2</name><operator>=</operator><name>j</name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
        }</block></for>
    }</block></for>

    <expr_stmt><expr><name><name>color</name><index>[<expr><name>s1</name></expr>]</index></name><operator>=</operator><name>cs1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>color</name><index>[<expr><name>s2</name></expr>]</index></name><operator>=</operator><name>cs2</name></expr>;</expr_stmt>
    <while>while <condition>(<expr><name><name>deg</name><index>[<expr><name>s2</name></expr>]</index></name><operator>&gt;</operator><literal type="number">1</literal></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>nxt</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>v</name><range>: <expr><name><name>adj</name><index>[<expr><name>s2</name></expr>]</index></name></expr></range></decl></init>)</control> <block type="pseudo"><if>if <condition>(<expr><name>v</name><operator>!=</operator><name>s1</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>nxt</name><operator>=</operator><name>v</name></expr>;</expr_stmt></block></then></if></block></for>
        <decl_stmt><decl><type><name>int</name></type> <name>nxc</name><init>=<expr><literal type="number">3</literal><operator>-</operator><name>cs1</name><operator>-</operator><name>cs2</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>s1</name><operator>=</operator><name>s2</name></expr>;</expr_stmt> <expr_stmt><expr><name>s2</name><operator>=</operator><name>nxt</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>cs1</name><operator>=</operator><name>cs2</name></expr>;</expr_stmt> <expr_stmt><expr><name>cs2</name><operator>=</operator><name>nxc</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>color</name><index>[<expr><name>s2</name></expr>]</index></name><operator>=</operator><name>cs2</name></expr>;</expr_stmt>
    }</block></while>

    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>res</name><operator>&lt;&lt;</operator><literal type="string">"\n"</literal></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>(</operator><name><name>color</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="string">" "</literal></expr>;</expr_stmt></block></for>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
