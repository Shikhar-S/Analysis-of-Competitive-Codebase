<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28923368_62483312.cpp"><comment type="line">// #pragma GCC optimize("O3")</comment>
<comment type="line">// #pragma GCC target("sse4")</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_MACRO</name><parameter_list>(<parameter><type><name>_1</name></type></parameter>, <parameter><type><name>_2</name></type></parameter>, <parameter><type><name>_3</name></type></parameter>, <parameter><type><name>_4</name></type></parameter>, <parameter><type><name>NAME</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NAME</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__FOR3</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>n</name></type></parameter>, <parameter><type><name>inc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = (a); (inc) &gt; 0 ? i &lt; (n) : i &gt;= (n); i += (inc))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__FOR2</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__FOR3(i, a, n, 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__FOR1</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__FOR2(i, 0, n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GET_MACRO(__VA_ARGS__, __FOR3, __FOR2, __FOR1)(__VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BOOST</name></cpp:macro> 			<cpp:value>ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELO</name></cpp:macro>             <cpp:value>exit(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALL</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> 			<cpp:value>(a).begin(), (a).end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SZ</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> 			<cpp:value>(int)(a).size()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRAV</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> 		<cpp:value>for (auto&amp; a : b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REV</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro>          <cpp:value>reverse(ALL(a))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SORT</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro>         <cpp:value>sort(ALL(a))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SORTR</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro>        <cpp:value>SORT(a), REV(a)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PB</name></cpp:macro>              <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro>               <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name></cpp:macro>               <cpp:value>second</cpp:value></cpp:define>
<using>using <name>ll</name> <init>= 				<type><name>long</name> <name>long</name></type></init>;</using>
<using>using <name>ld</name> <init>= 				<type><name>long</name> <name>double</name></type></init>;</using> <comment type="line">// 'long double' is 2.2 times slower than double</comment>
<using>using <name>pii</name> <init>= 			<type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>pll</name> <init>= 			<type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>pld</name> <init>=             <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ld</name></expr></argument>, <argument><expr><name>ld</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>vi</name> <init>= 				<type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>vvi</name> <init>=             <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vi</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>vll</name> <init>= 			<type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>vvll</name> <init>=            <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vll</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>vpii</name> <init>= 			<type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pii</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>vpll</name> <init>= 			<type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pll</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>vld</name> <init>=             <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ld</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>vpld</name> <init>=            <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pld</name></expr></argument>&gt;</argument_list></name></type></init>;</using>

<decl_stmt><decl><specifier>constexpr</specifier> <type><name>int</name></type> <name>MOD</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt> <comment type="line">// 998244353</comment>
<decl_stmt><decl><specifier>constexpr</specifier> <type><name>int</name></type> <name>INF</name> <init>= <expr><name>MOD</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><specifier>constexpr</specifier> <type><name>ll</name></type> <name>LLINF</name> <init>= <expr><literal type="number">1e18</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ld</name></type> <name>PI</name> <init>= <expr><call><name>acos</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>bool</name></type> <name>setmin</name><parameter_list>(<parameter><decl><type><name>T</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<if>if <condition>(<expr><name>a</name> <operator>&gt;</operator> <name>b</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>a</name> <operator>=</operator> <name>b</name></expr><operator>,</operator> <expr><literal type="number">1</literal></expr>;</return></block></then></if> <return>return <expr><literal type="number">0</literal></expr>;</return> }</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>bool</name></type> <name>setmax</name><parameter_list>(<parameter><decl><type><name>T</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<if>if <condition>(<expr><name>a</name> <operator>&lt;</operator> <name>b</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>a</name> <operator>=</operator> <name>b</name></expr><operator>,</operator> <expr><literal type="number">1</literal></expr>;</return></block></then></if> <return>return <expr><literal type="number">0</literal></expr>;</return> }</block></function>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ext/pb_ds/assoc_container.hpp&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ext/pb_ds/tree_policy.hpp&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>__gnu_pbds</name>;</namespace></using>

<using><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>key</name></parameter>, <parameter><type><name>class</name></type> <name>cmp</name> <init>= <expr><name><name>less</name><argument_list type="generic">&lt;<argument><expr><name>key</name></expr></argument>&gt;</argument_list></name></expr></init></parameter>&gt;</parameter_list></template> using <name>ordered_set</name> <init>= <type><name><name>tree</name><argument_list type="generic">&lt;<argument><expr><name>key</name></expr></argument>, <argument><expr><name>null_type</name></expr></argument>, <argument><expr><name>cmp</name></expr></argument>, <argument><expr><name>rb_tree_tag</name></expr></argument>, <argument><expr><name>tree_order_statistics_node_update</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>key</name></parameter>, <parameter><type><name>class</name></type> <name>cmp</name> <init>= <expr><name><name>less_equal</name><argument_list type="generic">&lt;<argument><expr><name>key</name></expr></argument>&gt;</argument_list></name></expr></init></parameter>&gt;</parameter_list></template> using <name>ordered_multiset</name> <init>= <type><name><name>tree</name><argument_list type="generic">&lt;<argument><expr><name>key</name></expr></argument>, <argument><expr><name>null_type</name></expr></argument>, <argument><expr><name>cmp</name></expr></argument>, <argument><expr><name>rb_tree_tag</name></expr></argument>, <argument><expr><name>tree_order_statistics_node_update</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<comment type="line">//* find_by_order(k) - returns an iterator to the k-th largest element (counting from zero)</comment>
<comment type="line">//* order_of_key(k)  - the number of items in a set that are strictly smaller than k.</comment>
<using><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>key</name></parameter>, <parameter><type><name>class</name></type> <name>value</name></parameter>, <parameter><type><name>class</name></type> <name>cmp</name> <init>= <expr><name><name>less</name><argument_list type="generic">&lt;<argument><expr><name>key</name></expr></argument>&gt;</argument_list></name></expr></init></parameter>&gt;</parameter_list></template> using <name>ordered_map</name> <init>= <type><name><name>tree</name><argument_list type="generic">&lt;<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>cmp</name></expr></argument>, <argument><expr><name>rb_tree_tag</name></expr></argument>, <argument><expr><name>tree_order_statistics_node_update</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>pref_trie</name> <init>= <type><name><name>trie</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>, <argument><expr><name>null_type</name></expr></argument>, <argument><expr><name><name>trie_string_access_traits</name><argument_list type="generic">&lt;&gt;</argument_list></name></expr></argument>, <argument><expr><name>pat_trie_tag</name></expr></argument>, <argument><expr><name>trie_prefix_search_node_update</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<comment type="line">// * prefix_range(s) - return iterator range, prefix equal to s</comment>

<namespace>namespace <name>input</name> <block>{
    <function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>istream</name> <modifier>&amp;</modifier></type><name>operator<name>&gt;&gt;</name></name><parameter_list>(<parameter><decl><type><name>istream</name> <modifier>&amp;</modifier></type><name>os</name></decl></parameter>, <parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type> <name>vec</name></decl></parameter>)</parameter_list> <block>{ <for>for <control>(<init><expr><name>auto</name><operator>&amp;</operator> <name>u</name> <operator>:</operator> <name>vec</name></expr></init>)</control> <block type="pseudo"><expr_stmt><expr><name>os</name> <operator>&gt;&gt;</operator> <name>u</name></expr>;</expr_stmt></block></for> <return>return <expr><name>os</name></expr>;</return> }</block></function>
    <function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T1</name></parameter>, <parameter><type><name>class</name></type> <name>T2</name></parameter>&gt;</parameter_list></template> <type><name>istream</name><modifier>&amp;</modifier></type> <name>operator<name>&gt;&gt;</name></name><parameter_list>(<parameter><decl><type><name>istream</name><modifier>&amp;</modifier></type> <name>os</name></decl></parameter>, <parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>T1</name></expr></argument>, <argument><expr><name>T2</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>p</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name>os</name> <operator>&gt;&gt;</operator> <name><name>p</name><operator>.</operator><name>first</name></name> <operator>&gt;&gt;</operator> <name><name>p</name><operator>.</operator><name>second</name></name></expr>;</return> }</block></function>
    <function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>, <parameter><type><name>size_t</name></type> <name>N</name></parameter>&gt;</parameter_list></template> <type><name>istream</name><modifier>&amp;</modifier></type> <name>operator<name>&gt;&gt;</name></name><parameter_list>(<parameter><decl><type><name>istream</name><modifier>&amp;</modifier></type> <name>os</name></decl></parameter>, <parameter><decl><type><name><name>array</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name>N</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>)</parameter_list> <block>{ <for>for <control>(<init><expr><name>auto</name><operator>&amp;</operator> <name>u</name> <operator>:</operator> <name>a</name></expr></init>)</control> <block type="pseudo"><expr_stmt><expr><name>os</name> <operator>&gt;&gt;</operator> <name>u</name></expr>;</expr_stmt></block></for> <return>return <expr><name>os</name></expr>;</return> }</block></function>

    <function><type><name>void</name></type> <name>re</name><parameter_list>()</parameter_list> <block>{}</block></function>
    <function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>, <parameter><type><name>typename</name><modifier>...</modifier></type> <name>args</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>re</name><parameter_list>(<parameter><decl><type><name>T</name><modifier>&amp;</modifier></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>args</name><modifier>&amp;</modifier><modifier>...</modifier></type> <name>tail</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>x</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>re</name><argument_list>(<argument><expr><name>tail</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
}</block></namespace> <comment type="line">// namespace input</comment>
<using>using <namespace>namespace <name>input</name>;</namespace></using>

<namespace>namespace <name>output</name> <block>{
    <function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>ostream</name> <modifier>&amp;</modifier></type><name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name> <modifier>&amp;</modifier></type><name>os</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type> <name>vec</name></decl></parameter>)</parameter_list><block>{<for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>u</name> <range>: <expr><name>vec</name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <name>u</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt></block></for> <return>return <expr><name>os</name></expr>;</return> }</block></function>
    <function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T1</name></parameter>, <parameter><type><name>class</name></type> <name>T2</name></parameter>&gt;</parameter_list></template> <type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type> <name>os</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>T1</name></expr></argument>, <argument><expr><name>T2</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>p</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name>os</name> <operator>&lt;&lt;</operator> <name><name>p</name><operator>.</operator><name>first</name></name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name><name>p</name><operator>.</operator><name>second</name></name></expr>;</return> }</block></function>
    <function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>ostream</name> <modifier>&amp;</modifier></type><name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name> <modifier>&amp;</modifier></type><name>os</name></decl></parameter>, <parameter><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type> <name>con</name></decl></parameter>)</parameter_list> <block>{ <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>u</name> <range>: <expr><name>con</name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <name>u</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt></block></for> <return>return <expr><name>os</name></expr>;</return> }</block></function>
    <function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>, <parameter><type><name>size_t</name></type> <name>N</name></parameter>&gt;</parameter_list></template> <type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type> <name>os</name></decl></parameter>, <parameter><decl><type><name><name>array</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name>N</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>)</parameter_list> <block>{ <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>u</name> <range>: <expr><name>a</name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <name>u</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt></block></for> <return>return <expr><name>os</name></expr>;</return> }</block></function>
    
    <function><type><name>void</name></type> <name>pr</name><parameter_list>()</parameter_list> <block>{}</block></function>
    <function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>pr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T</name><modifier>&amp;</modifier></type> <name>x</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>x</name></expr>;</expr_stmt> }</block></function>
    <function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>, <parameter><type><name>typename</name><modifier>...</modifier></type> <name>args</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>pr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T</name><modifier>&amp;</modifier></type> <name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>args</name><modifier>&amp;</modifier><modifier>...</modifier></type> <name>tail</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>x</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt> <expr_stmt><expr><call><name>pr</name><argument_list>(<argument><expr><name>tail</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function>
    <function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>prs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T</name><modifier>&amp;</modifier></type> <name>x</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>x</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt> }</block></function>
    <function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>, <parameter><type><name>typename</name><modifier>...</modifier></type> <name>args</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>prs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T</name><modifier>&amp;</modifier></type> <name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>args</name><modifier>&amp;</modifier><modifier>...</modifier></type> <name>tail</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>x</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt> <expr_stmt><expr><call><name>prs</name><argument_list>(<argument><expr><name>tail</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function>
    <function><template>template <parameter_list>&lt;<parameter><type><name>typename</name><modifier>...</modifier></type> <name>args</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>prln</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>args</name><modifier>&amp;</modifier><modifier>...</modifier></type> <name>tail</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name>pr</name><argument_list>(<argument><expr><name>tail</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>}</block></function>
}</block></namespace> <comment type="line">// namespace output </comment>
<using>using <namespace>namespace <name>output</name>;</namespace></using>

<namespace>namespace <name>pair_magic</name> <block>{
	<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT1T2</name></cpp:macro> <cpp:value>pair&lt;T1,T2&gt;</cpp:value></cpp:define>
	<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TT1T2</name></cpp:macro> <cpp:value>template&lt;class T1, class T2&gt;</cpp:value></cpp:define>
	<function type="operator"><type><name>TT1T2</name> <specifier>inline</specifier> <name>PT1T2</name></type> <name>operator<name>+</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>PT1T2</name> <modifier>&amp;</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>PT1T2</name> <modifier>&amp;</modifier></type><name>p2</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>PT1T2</name><argument_list>(<argument><expr><name><name>p1</name><operator>.</operator><name>first</name></name> <operator>+</operator> <name><name>p2</name><operator>.</operator><name>first</name></name></expr></argument>, <argument><expr><name><name>p1</name><operator>.</operator><name>second</name></name> <operator>+</operator> <name><name>p2</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
	<function type="operator"><type><name>TT1T2</name> <specifier>inline</specifier> <name>PT1T2</name><modifier>&amp;</modifier></type> <name>operator<name>+=</name></name><parameter_list>(<parameter><decl><type><name>PT1T2</name> <modifier>&amp;</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>PT1T2</name> <modifier>&amp;</modifier></type><name>p2</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name><name>p1</name><operator>.</operator><name>first</name></name> <operator>+=</operator> <name><name>p2</name><operator>.</operator><name>first</name></name></expr><operator>,</operator> <expr><name><name>p1</name><operator>.</operator><name>second</name></name> <operator>+=</operator> <name><name>p2</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt> <return>return <expr><name>p1</name></expr>;</return> }</block></function>
	<function type="operator"><type><name>TT1T2</name> <specifier>inline</specifier> <name>PT1T2</name></type> <name>operator<name>-</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>PT1T2</name> <modifier>&amp;</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>PT1T2</name> <modifier>&amp;</modifier></type><name>p2</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>PT1T2</name><argument_list>(<argument><expr><name><name>p1</name><operator>.</operator><name>first</name></name> <operator>-</operator> <name><name>p2</name><operator>.</operator><name>first</name></name></expr></argument>, <argument><expr><name><name>p1</name><operator>.</operator><name>second</name></name> <operator>-</operator> <name><name>p2</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
	<function type="operator"><type><name>TT1T2</name> <specifier>inline</specifier> <name>PT1T2</name><modifier>&amp;</modifier></type> <name>operator<name>-=</name></name><parameter_list>(<parameter><decl><type><name>PT1T2</name> <modifier>&amp;</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>PT1T2</name> <modifier>&amp;</modifier></type><name>p2</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name><name>p1</name><operator>.</operator><name>first</name></name> <operator>-=</operator> <name><name>p2</name><operator>.</operator><name>first</name></name></expr><operator>,</operator> <expr><name><name>p1</name><operator>.</operator><name>second</name></name> <operator>-=</operator> <name><name>p2</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt> <return>return <expr><name>p1</name></expr>;</return> }</block></function>
	<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PT1T2</name></cpp:undef>
	<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TT1T2</name></cpp:undef>
}</block></namespace>
<using>using <namespace>namespace <name>pair_magic</name>;</namespace></using>

<namespace>namespace <name>random_nsp</name> <block>{
	<decl_stmt><decl><type><specifier>thread_local</specifier> <name><name>std</name><operator>::</operator><name>mt19937</name></name></type> <name>gen</name><argument_list>{<argument><expr><name><name>std</name><operator>::</operator><name>random_device</name></name><block>{}</block><operator>(</operator><operator>)</operator></expr></argument>}</argument_list></decl>;</decl_stmt>
	<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name>T</name></type> <name>random</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>max</name></decl></parameter>)</parameter_list><block>{<using>using <name>dist</name> <init>= <type><name><name>std</name><operator>::</operator><name><name>conditional_t</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name><name>uniform_int_distribution</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name><name>uniform_real_distribution</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></name></expr></argument>&gt;</argument_list></name></name></type></init>;</using><return>return <expr><name>dist</name><block>{<expr><name>min</name></expr>, <expr><name>max</name></expr>}</block><operator>(</operator><name>gen</name><operator>)</operator></expr>;</return>}</block></function>
	<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>T</name></type> <name>randomINT</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>max</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name><name>std</name><operator>::</operator><name><name>uniform_int_distribution</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></name><block>{<expr><name>min</name></expr>, <expr><name>max</name></expr>}</block><operator>(</operator><name>gen</name><operator>)</operator></expr>;</return> }</block></function>
}</block></namespace>
<using>using <namespace>namespace <name>random_nsp</name>;</namespace></using>

<namespace>namespace <name>triple</name> <block>{
	<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TT1T2T3</name></cpp:macro> <cpp:value>template&lt;class T1, class T2, class T3&gt;</cpp:value></cpp:define>
	<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRT1T2T3</name></cpp:macro>  <cpp:value>triple&lt;T1, T2, T3&gt;</cpp:value></cpp:define>
	<macro><name>TT1T2T3</name></macro> <struct>struct <name>triple</name> <block>{<public type="default"> <decl_stmt><decl><type><name>T1</name></type> <name>a</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>T2</name></type> <name>b</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>T3</name></type> <name>c</name></decl>;</decl_stmt> <constructor><name>triple</name><parameter_list>()</parameter_list> <member_init_list>: <call><name>a</name><argument_list>(<argument><expr><call><name>T1</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>, <call><name>b</name><argument_list>(<argument><expr><call><name>T2</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>, <call><name>c</name><argument_list>(<argument><expr><call><name>T3</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> </member_init_list><block>{}</block></constructor><empty_stmt>;</empty_stmt> <constructor><name>triple</name><parameter_list>(<parameter><decl><type><name>T1</name></type> <name>_a</name></decl></parameter>, <parameter><decl><type><name>T2</name></type> <name>_b</name></decl></parameter>, <parameter><decl><type><name>T3</name></type> <name>_c</name></decl></parameter>)</parameter_list> <member_init_list>:<call><name>a</name><argument_list>(<argument><expr><name>_a</name></expr></argument>)</argument_list></call>, <call><name>b</name><argument_list>(<argument><expr><name>_b</name></expr></argument>)</argument_list></call>, <call><name>c</name><argument_list>(<argument><expr><name>_c</name></expr></argument>)</argument_list></call> </member_init_list><block>{}</block></constructor> </public>}</block>;</struct>
	<function type="operator"><type><name>TT1T2T3</name> <name>bool</name></type> <name>operator<name>&lt;</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TRT1T2T3</name><modifier>&amp;</modifier></type><name>t1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TRT1T2T3</name><modifier>&amp;</modifier></type><name>t2</name></decl></parameter>)</parameter_list> <block>{ <if>if <condition>(<expr><name><name>t1</name><operator>.</operator><name>a</name></name> <operator>!=</operator> <name><name>t2</name><operator>.</operator><name>a</name></name></expr>)</condition><then><block type="pseudo"><return>return <expr><name><name>t1</name><operator>.</operator><name>a</name></name> <operator>&lt;</operator> <name><name>t2</name><operator>.</operator><name>a</name></name></expr>;</return></block></then> <elseif>else <if>if <condition>(<expr><name><name>t1</name><operator>.</operator><name>b</name></name> <operator>!=</operator> <name><name>t2</name><operator>.</operator><name>b</name></name></expr>)</condition><then><block type="pseudo"><return>return <expr><name><name>t1</name><operator>.</operator><name>b</name></name> <operator>&lt;</operator> <name><name>t2</name><operator>.</operator><name>b</name></name></expr>;</return></block></then></if></elseif> <else>else <block type="pseudo"><return>return <expr><name><name>t1</name><operator>.</operator><name>c</name></name> <operator>&lt;</operator> <name><name>t2</name><operator>.</operator><name>c</name></name></expr>;</return></block></else></if> }</block></function>
	<function type="operator"><type><name>TT1T2T3</name> <name>bool</name></type> <name>operator<name>&gt;</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TRT1T2T3</name><modifier>&amp;</modifier></type><name>t1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TRT1T2T3</name><modifier>&amp;</modifier></type><name>t2</name></decl></parameter>)</parameter_list> <block>{ <if>if <condition>(<expr><name><name>t1</name><operator>.</operator><name>a</name></name> <operator>!=</operator> <name><name>t2</name><operator>.</operator><name>a</name></name></expr>)</condition><then><block type="pseudo"><return>return <expr><name><name>t1</name><operator>.</operator><name>a</name></name> <operator>&gt;</operator> <name><name>t2</name><operator>.</operator><name>a</name></name></expr>;</return></block></then> <elseif>else <if>if <condition>(<expr><name><name>t1</name><operator>.</operator><name>b</name></name> <operator>!=</operator> <name><name>t2</name><operator>.</operator><name>b</name></name></expr>)</condition><then><block type="pseudo"><return>return <expr><name><name>t1</name><operator>.</operator><name>b</name></name> <operator>&gt;</operator> <name><name>t2</name><operator>.</operator><name>b</name></name></expr>;</return></block></then></if></elseif> <else>else <block type="pseudo"><return>return <expr><name><name>t1</name><operator>.</operator><name>c</name></name> <operator>&gt;</operator> <name><name>t2</name><operator>.</operator><name>c</name></name></expr>;</return></block></else></if> }</block></function>
	<function type="operator"><type><name>TT1T2T3</name> <name>bool</name></type> <name>operator<name>==</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TRT1T2T3</name><modifier>&amp;</modifier></type><name>t1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TRT1T2T3</name><modifier>&amp;</modifier></type><name>t2</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><operator>(</operator><name><name>t1</name><operator>.</operator><name>a</name></name> <operator>==</operator> <name><name>t2</name><operator>.</operator><name>a</name></name> <operator>&amp;&amp;</operator> <name><name>t1</name><operator>.</operator><name>b</name></name> <operator>==</operator> <name><name>t2</name><operator>.</operator><name>b</name></name> <operator>&amp;&amp;</operator> <name><name>t1</name><operator>.</operator><name>c</name></name> <operator>==</operator> <name><name>t2</name><operator>.</operator><name>c</name></name><operator>)</operator></expr>;</return> }</block></function>
	<function type="operator"><type><name>TT1T2T3</name> <specifier>inline</specifier> <name>istream</name><modifier>&amp;</modifier></type> <name>operator <name>&gt;&gt;</name></name> <parameter_list>(<parameter><decl><type><name>istream</name><modifier>&amp;</modifier></type> <name>os</name></decl></parameter>, <parameter><decl><type><name><name>triple</name><argument_list type="generic">&lt;<argument><expr><name>T1</name></expr></argument>, <argument><expr><name>T2</name></expr></argument>, <argument><expr><name>T3</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>t</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name>os</name> <operator>&gt;&gt;</operator> <name><name>t</name><operator>.</operator><name>a</name></name> <operator>&gt;&gt;</operator> <name><name>t</name><operator>.</operator><name>b</name></name> <operator>&gt;&gt;</operator> <name><name>t</name><operator>.</operator><name>c</name></name></expr>;</return> }</block></function>
	<function type="operator"><type><name>TT1T2T3</name> <name>ostream</name><modifier>&amp;</modifier></type> <name>operator <name>&lt;&lt;</name></name> <parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type> <name>os</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>triple</name><argument_list type="generic">&lt;<argument><expr><name>T1</name></expr></argument>, <argument><expr><name>T2</name></expr></argument>, <argument><expr><name>T3</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>t</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name>os</name> <operator>&lt;&lt;</operator> <name><name>t</name><operator>.</operator><name>a</name></name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name><name>t</name><operator>.</operator><name>b</name></name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name><name>t</name><operator>.</operator><name>c</name></name></expr>;</return> }</block></function>
	<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TRT1T2T3</name></cpp:undef>
	<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TT1T2T3</name></cpp:undef>
	<using>using <name>tri</name> <init>=  <type><name><name>triple</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
	<using>using <name>trll</name> <init>= <type><name><name>triple</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
	<using>using <name>vtri</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>tri</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
    <using>using <name>vtrll</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>trll</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
}</block></namespace>
<using>using <namespace>namespace <name>triple</name>;</namespace></using>

<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>T</name></type> <name>invGeneral</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <comment type="line">// 0 &lt; a &lt; b, gcd(a,b) = 1</comment>
    <expr_stmt><expr><name>a</name> <operator>%=</operator> <name>b</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>a</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><ternary><condition><expr><name>b</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return></block></then></if>
    <decl_stmt><decl><type><name>T</name></type> <name>x</name> <init>= <expr><call><name>invGeneral</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
    <return>return <expr><ternary><condition><expr><name>x</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator><operator>(</operator><literal type="number">1</literal><operator>-</operator><operator>(</operator><name>ll</name><operator>)</operator><name>b</name> <operator>*</operator> <name>x</name><operator>)</operator> <operator>/</operator> <name>a</name> <operator>+</operator> <name>b</name><operator>)</operator> <operator>%</operator> <name>b</name></expr></else></ternary></expr>;</return>
}</block></function>

<struct><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> struct <name>modular</name> <block>{<public type="default">
	<decl_stmt><decl><type><name>T</name></type> <name>val</name></decl>;</decl_stmt> 
	<function type="operator"><specifier>explicit</specifier> <name>operator <name>T</name></name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{ <return>return <expr><name>val</name></expr>;</return> }</block></function>
	<constructor><name>modular</name><parameter_list>()</parameter_list> <block>{ <expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> }</block></constructor>
	<constructor><name>modular</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ll</name><modifier>&amp;</modifier></type> <name>v</name></decl></parameter>)</parameter_list> <block>{ 
		<expr_stmt><expr><name>val</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>-</operator><name>MOD</name> <operator>&lt;=</operator> <name>v</name> <operator>&amp;&amp;</operator> <name>v</name> <operator>&lt;=</operator> <name>MOD</name><operator>)</operator></expr> ?</condition><then> <expr><name>v</name></expr> </then><else>: <expr><name>v</name> <operator>%</operator> <name>MOD</name></expr></else></ternary></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>val</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>val</name> <operator>+=</operator> <name>MOD</name></expr>;</expr_stmt></block></then></if>
	}</block></constructor>
	
	<friend>friend <function type="operator"><type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type> <name>os</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>modular</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name>os</name> <operator>&lt;&lt;</operator> <name><name>a</name><operator>.</operator><name>val</name></name></expr>;</return> }</block></function></friend>
	<friend>friend <function><type><name>void</name></type> <name>pr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>modular</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>)</parameter_list> <block>{ <name>pr</name><expr_stmt><expr><operator>(</operator><name><name>a</name><operator>.</operator><name>val</name></name><operator>)</operator></expr>;</expr_stmt> }</block></function></friend>
	<friend>friend <function><type><name>void</name></type> <name>re</name><parameter_list>(<parameter><decl><type><name>modular</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>ll</name></type> <name>x</name></decl>;</decl_stmt> <name>re</name><expr_stmt><expr><operator>(</operator><name>x</name><operator>)</operator></expr>;</expr_stmt> <name>a</name> <expr_stmt><expr><operator>=</operator> <call><name>modular</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function></friend>
   
	<friend>friend <function type="operator"><type><name>bool</name></type> <name>operator<name>==</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>modular</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>modular</name><modifier>&amp;</modifier></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name><name>a</name><operator>.</operator><name>val</name></name> <operator>==</operator> <name><name>b</name><operator>.</operator><name>val</name></name></expr>;</return> }</block></function></friend>
	<friend>friend <function type="operator"><type><name>bool</name></type> <name>operator<name>!=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>modular</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>modular</name><modifier>&amp;</modifier></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><operator>!</operator><operator>(</operator><name>a</name> <operator>==</operator> <name>b</name><operator>)</operator></expr>;</return> }</block></function></friend>
	<friend>friend <function type="operator"><type><name>bool</name></type> <name>operator<name>&lt;</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>modular</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>modular</name><modifier>&amp;</modifier></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name><name>a</name><operator>.</operator><name>val</name></name> <operator>&lt;</operator> <name><name>b</name><operator>.</operator><name>val</name></name></expr>;</return> }</block></function></friend>
 
	<function type="operator"><type><name>modular</name></type> <name>operator<name>-</name></name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{ <return>return <expr><call><name>modular</name><argument_list>(<argument><expr><operator>-</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
	<function type="operator"><type><name>modular</name><modifier>&amp;</modifier></type> <name>operator<name>+=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>modular</name><modifier>&amp;</modifier></type> <name>m</name></decl></parameter>)</parameter_list> <block>{ <if>if <condition>(<expr><operator>(</operator><name>val</name> <operator>+=</operator> <name><name>m</name><operator>.</operator><name>val</name></name><operator>)</operator> <operator>&gt;=</operator> <name>MOD</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>val</name> <operator>-=</operator> <name>MOD</name></expr>;</expr_stmt></block></then></if> <return>return <expr><operator>*</operator><name>this</name></expr>;</return> }</block></function>
	<function type="operator"><type><name>modular</name><modifier>&amp;</modifier></type> <name>operator<name>-=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>modular</name><modifier>&amp;</modifier></type> <name>m</name></decl></parameter>)</parameter_list> <block>{ <if>if <condition>(<expr><operator>(</operator><name>val</name> <operator>-=</operator> <name><name>m</name><operator>.</operator><name>val</name></name><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>val</name> <operator>+=</operator> <name>MOD</name></expr>;</expr_stmt></block></then></if> <return>return <expr><operator>*</operator><name>this</name></expr>;</return> }</block></function>
	<function type="operator"><type><name>modular</name><modifier>&amp;</modifier></type> <name>operator<name>*=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>modular</name><modifier>&amp;</modifier></type> <name>m</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name>ll</name><operator>)</operator><name>val</name><operator>*</operator><name><name>m</name><operator>.</operator><name>val</name></name><operator>%</operator><name>MOD</name></expr>;</expr_stmt> <return>return <expr><operator>*</operator><name>this</name></expr>;</return> }</block></function>
	<friend>friend <function><type><name>modular</name></type> <name>pow</name><parameter_list>(<parameter><decl><type><name>modular</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>p</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>modular</name></type> <name>ans</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> <for>for <control>(<init>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name> <operator>/=</operator> <literal type="number">2</literal></expr><operator>,</operator> <expr><name>a</name> <operator>*=</operator> <name>a</name></expr></incr>)</control> <block type="pseudo"><if>if <condition>(<expr><name>p</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><name>ans</name> <expr_stmt><expr><operator>*=</operator> <name>a</name></expr>;</expr_stmt></block></then></if></block></for>
		<return>return <expr><name>ans</name></expr>;</return>
	}</block></function></friend>
	<friend>friend <function><type><name>modular</name></type> <name>inv</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>modular</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>)</parameter_list> <block>{ 
		<decl_stmt><decl><type><name>auto</name></type> <name>i</name> <init>= <expr><call><name>invGeneral</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>val</name></name></expr></argument>,<argument><expr><name>MOD</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <name>assert</name><expr_stmt><expr><operator>(</operator><name>i</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
		<return>return <expr><name>i</name></expr>;</return>
	}</block></function></friend> <comment type="line">// equivalent to return exp(b,MOD-2) if MOD is prime</comment>
	<function type="operator"><type><name>modular</name><modifier>&amp;</modifier></type> <name>operator<name>/=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>modular</name><modifier>&amp;</modifier></type> <name>m</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><operator>(</operator><operator>*</operator><name>this</name><operator>)</operator> <operator>*=</operator> <call><name>inv</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
	
	<friend>friend <function type="operator"><type><name>modular</name></type> <name>operator<name>+</name></name><parameter_list>(<parameter><decl><type><name>modular</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>modular</name><modifier>&amp;</modifier></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name>a</name> <operator>+=</operator> <name>b</name></expr>;</return> }</block></function></friend>
	<friend>friend <function type="operator"><type><name>modular</name></type> <name>operator<name>-</name></name><parameter_list>(<parameter><decl><type><name>modular</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>modular</name><modifier>&amp;</modifier></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name>a</name> <operator>-=</operator> <name>b</name></expr>;</return> }</block></function></friend>
	<friend>friend <function type="operator"><type><name>modular</name></type> <name>operator<name>*</name></name><parameter_list>(<parameter><decl><type><name>modular</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>modular</name><modifier>&amp;</modifier></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name>a</name> <operator>*=</operator> <name>b</name></expr>;</return> }</block></function></friend>
	<friend>friend <function type="operator"><type><name>modular</name></type> <name>operator<name>/</name></name><parameter_list>(<parameter><decl><type><name>modular</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>modular</name><modifier>&amp;</modifier></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name>a</name> <operator>/=</operator> <name>b</name></expr>;</return> }</block></function></friend>
</public>}</block>;</struct>
 
<using>using <name>mi</name> <init>= <type><name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>pmi</name> <init>= <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>mi</name></expr></argument>,<argument><expr><name>mi</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>vmi</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>mi</name></expr></argument>&gt;</argument_list></name></type></init>;</using> 
<using>using <name>vpmi</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pmi</name></expr></argument>&gt;</argument_list></name></type></init>;</using>

<namespace>namespace <name>debug</name> <block>{
    <function><template>template <parameter_list>&lt; <parameter><type><name>typename</name></type> <name>_T</name></parameter> &gt;</parameter_list></template> <specifier>inline</specifier> <type><name>void</name></type> <name>_debug</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>_T</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <name>s</name> <operator>&lt;&lt;</operator> <literal type="string">" = "</literal> <operator>&lt;&lt;</operator> <name>x</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt> }</block></function>
    <function><template>template <parameter_list>&lt; <parameter><type><name>typename</name></type> <name>_T</name></parameter>, <parameter><type><name>typename</name><modifier>...</modifier></type> <name>args</name></parameter> &gt;</parameter_list></template> <type><name>void</name></type> <name>_debug</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>_T</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>args</name><modifier>...</modifier></type> <name>a</name></decl></parameter>)</parameter_list> <block>{ <while>while<condition>(<expr><operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">','</literal></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <operator>*</operator><name>s</name><operator>++</operator></expr>;</expr_stmt></block></while> <expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <literal type="string">" = "</literal> <operator>&lt;&lt;</operator> <name>x</name> <operator>&lt;&lt;</operator> <literal type="char">','</literal></expr>;</expr_stmt> <expr_stmt><expr><call><name>_debug</name><argument_list>(<argument><expr><name>s</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>a</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
    
    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_debug(#__VA_ARGS__, __VA_ARGS__)</cpp:value></cpp:define>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cerr</name></cpp:macro> <cpp:value>cout</cpp:value></cpp:define>
    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>1999</cpp:value></cpp:define>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cerr</name></cpp:macro> <cpp:value>if(0) cout</cpp:value></cpp:define>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></namespace> <comment type="line">// namespace debug</comment>
<using>using <namespace>namespace <name>debug</name>;</namespace></using>

<comment type="line" format="doxygen">//////////////_________CODE_________//////////////</comment>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><name>BOOST</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt> <expr_stmt><expr><call><name>re</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>ll</name></type> <name>wins</name> <init>= <expr><name>p</name> <operator>/</operator> <name>w</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">1e7</literal></expr></init></decl>;</decl_stmt>
	<macro><name>FOR</name><argument_list>(<argument>i</argument>, <argument>N</argument>)</argument_list></macro> <block>{
		<decl_stmt><decl><type><name>ll</name></type> <name>pkt</name> <init>= <expr><name>p</name> <operator>-</operator> <name>wins</name> <operator>*</operator> <name>w</name></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>pkt</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
			<if>if<condition>(<expr><name>wins</name> <operator>&lt;=</operator> <name>n</name></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name>prln</name><argument_list>(<argument><expr><name>wins</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>n</name> <operator>-</operator> <name>wins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>ELO</name></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then></if>
		<if>if<condition>(<expr><name>pkt</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>and</operator> <name>pkt</name> <operator>%</operator> <name>d</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>ll</name></type> <name>draws</name> <init>= <expr><name>pkt</name> <operator>/</operator> <name>d</name></expr></init></decl>;</decl_stmt>
			<if>if<condition>(<expr><name>wins</name> <operator>+</operator> <name>draws</name> <operator>&lt;=</operator> <name>n</name></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name>prln</name><argument_list>(<argument><expr><name>wins</name></expr></argument>, <argument><expr><name>draws</name></expr></argument>, <argument><expr><name>n</name> <operator>-</operator> <name>wins</name> <operator>-</operator> <name>draws</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>ELO</name></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then></if>
		<expr_stmt><expr><name>wins</name><operator>--</operator></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>wins</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
	}</block>

	<expr_stmt><expr><call><name>prln</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function></unit>
