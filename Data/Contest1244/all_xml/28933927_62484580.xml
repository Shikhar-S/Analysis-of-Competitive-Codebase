<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28933927_62484580.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>s</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAXN</name> <init>= <expr><literal type="number">1e5</literal> <operator>+</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>long</name> <name>long</name></type> <name>INF</name> <init>= <expr><literal type="number">1e18</literal> <operator>+</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>t</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>, <argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>q</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>k</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %lld"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>t</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>t</name> <operator>+</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>cnt</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <if>if <condition>(<expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>t</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>
            <continue>continue;</continue>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><block>{<expr><name><name>t</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>, <expr><name>cnt</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>cnt</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    }</block></for>
    <decl_stmt><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>, <argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></type> <name>p</name></decl>, <decl><type ref="prev"/><name>p2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>roz</name></decl>, <decl><type ref="prev"/><name>ile</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>auto</name></type> <name>iter</name> <init>= <expr><call><name><name>q</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><call><name><name>q</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>k</name> <operator>&gt;</operator> <literal type="number">0LL</literal></expr>)</condition> <block>{
        <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>*</operator><call><name><name>q</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name><name>q</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>iter</name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>p2</name> <operator>=</operator> <operator>*</operator><name>iter</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>min</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><name><name>p2</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>k</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0LL</literal></expr>;</expr_stmt>
            <continue>continue;</continue>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>p2</name><operator>.</operator><name>s</name></name> <operator>&lt;</operator> <name><name>p</name><operator>.</operator><name>s</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name><name>q</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>iter</name><operator>--</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>*</operator><name>iter</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>roz</name> <operator>=</operator> <operator>(</operator><name><name>p2</name><operator>.</operator><name>f</name></name> <operator>-</operator> <name><name>p</name><operator>.</operator><name>f</name></name><operator>)</operator> <operator>*</operator> <name><name>p2</name><operator>.</operator><name>s</name></name></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>roz</name> <operator>&lt;=</operator> <name>k</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>k</name> <operator>-=</operator> <name>roz</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><block>{<expr><name><name>p</name><operator>.</operator><name>f</name></name></expr>, <expr><name><name>p</name><operator>.</operator><name>s</name></name> <operator>+</operator> <name><name>p2</name><operator>.</operator><name>s</name></name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><name>ile</name> <operator>=</operator> <name>k</name> <operator>/</operator> <name><name>p2</name><operator>.</operator><name>s</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>k</name> <operator>-=</operator> <name>ile</name> <operator>*</operator> <name><name>p2</name><operator>.</operator><name>s</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><block>{<expr><name><name>p2</name><operator>.</operator><name>f</name></name> <operator>-</operator> <name>ile</name></expr>, <expr><name><name>p2</name><operator>.</operator><name>s</name></name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>q</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>p2</name> <operator>=</operator> <operator>*</operator><call><name><name>q</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>roz</name> <operator>=</operator> <operator>(</operator><name><name>p2</name><operator>.</operator><name>f</name></name> <operator>-</operator> <name><name>p</name><operator>.</operator><name>f</name></name><operator>)</operator> <operator>*</operator> <name><name>p</name><operator>.</operator><name>s</name></name></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>roz</name> <operator>&lt;=</operator> <name>k</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>k</name> <operator>-=</operator> <name>roz</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>q</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><block>{<expr><name><name>p2</name><operator>.</operator><name>f</name></name></expr>, <expr><name><name>p</name><operator>.</operator><name>s</name></name> <operator>+</operator> <name><name>p2</name><operator>.</operator><name>s</name></name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><name>ile</name> <operator>=</operator> <name>k</name> <operator>/</operator> <name><name>p</name><operator>.</operator><name>s</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>k</name> <operator>-=</operator> <name>ile</name> <operator>*</operator> <name><name>p</name><operator>.</operator><name>s</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><block>{<expr><name><name>p</name><operator>.</operator><name>f</name></name> <operator>+</operator> <name>ile</name></expr>, <expr><name><name>p</name><operator>.</operator><name>s</name></name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></else></if>
    }</block></while>
    <expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name><name>q</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>iter</name><operator>--</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>iter</name><operator>)</operator><operator>.</operator><name>f</name></name> <operator>-</operator> <operator>(</operator><operator>*</operator><call><name><name>q</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

</unit>
