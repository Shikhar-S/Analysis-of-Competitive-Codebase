<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28925559_62478052.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>,<decl><type ref="prev"/><name>d</name></decl>,<decl><type ref="prev"/><name>g</name></decl>,<decl><type ref="prev"/><name>base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>e</name></decl>,<decl><type ref="prev"/><name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>,<decl><type ref="prev"/><name>o</name></decl>,<decl><type ref="prev"/><name>tmp</name></decl>,<decl><type ref="prev"/><name>fo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>cnt</name></decl>;</decl_stmt>
<function><type><name>long</name> <name>long</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>long</name> <name>long</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
	<return>return <expr><ternary><condition><expr><name>b</name></expr>?</condition><then><expr><call><name>gcd</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>a</name><operator>%</operator><name>b</name></expr></argument>)</argument_list></call></expr></then><else>:<expr><name>a</name></expr></else></ternary></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>Ex_gcd</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>long</name> <name>long</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>long</name> <name>long</name><modifier>&amp;</modifier></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>long</name> <name>long</name><modifier>&amp;</modifier></type> <name>y</name></decl></parameter>)</parameter_list> <block>{
	<if>if<condition>(<expr><operator>!</operator><name>b</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><name>x</name><operator>=</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
		<return>return ;</return>
	}</block></then></if>
	<expr_stmt><expr><call><name>Ex_gcd</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>a</name><operator>%</operator><name>b</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>y</name><operator>-=</operator><name>a</name><operator>/</operator><name>b</name><operator>*</operator><name>x</name></expr>;</expr_stmt>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld %lld %lld %lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>g</name><operator>=</operator><call><name>gcd</name><argument_list>(<argument><expr><name>d</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if<condition>(<expr><name>b</name><operator>%</operator><name>g</name></expr>)</condition><then><block type="pseudo"><return>return <expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><literal type="number">0</literal></expr>;</return></block></then></if>
	<expr_stmt><expr><name>b</name><operator>/=</operator><name>g</name></expr><operator>,</operator><expr><name>c</name><operator>/=</operator><name>g</name></expr><operator>,</operator><expr><name>d</name><operator>/=</operator><name>g</name></expr>;</expr_stmt>
	<if>if<condition>(<expr><name>d</name><operator>!=</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
		<expr_stmt><expr><name>e</name><operator>=</operator><name>b</name><operator>/</operator><operator>(</operator><name>c</name><operator>*</operator><name>d</name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>b</name><operator>-=</operator><name>e</name><operator>*</operator><name>c</name><operator>*</operator><name>d</name></expr><operator>,</operator><expr><name>base</name><operator>=</operator><name>e</name><operator>*</operator><name>d</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Ex_gcd</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x</name><operator>=</operator><operator>(</operator><name>x</name><operator>%</operator><name>d</name><operator>+</operator><name>d</name><operator>)</operator><operator>%</operator><name>d</name></expr>;</expr_stmt><comment type="line">//c*x%d==1</comment>
		<expr_stmt><expr><name>o</name><operator>=</operator><name>x</name><operator>*</operator><name>c</name><operator>/</operator><name>d</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>tmp</name><operator>=</operator><name>b</name><operator>/</operator><name>d</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>fo</name><operator>=</operator><operator>(</operator><name>b</name><operator>%</operator><name>d</name><operator>)</operator><operator>*</operator><name>x</name><operator>+</operator><name>base</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>tmp</name><operator>-=</operator><operator>(</operator><name>b</name><operator>%</operator><name>d</name><operator>)</operator><operator>*</operator><name>o</name></expr>;</expr_stmt>
	}</block></then> <else>else <block>{
		<expr_stmt><expr><name>fo</name><operator>=</operator><name>b</name><operator>/</operator><name>c</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>tmp</name><operator>=</operator><name>b</name><operator>%</operator><name>c</name></expr>;</expr_stmt>
	}</block></else></if>
<comment type="line">//	printf("ka_Bar %lld %lld %lld %lld",x,o,fo,tmp);</comment>
	<if>if<condition>(<expr><name>tmp</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then> <block>{
		<expr_stmt><expr><name>cnt</name><operator>=</operator><operator>(</operator><operator>-</operator><name>tmp</name><operator>)</operator><operator>/</operator><name>c</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>tmp</name><operator>+=</operator><operator>(</operator><name>cnt</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>c</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>fo</name><operator>-=</operator><operator>(</operator><name>cnt</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>d</name></expr>;</expr_stmt>
	}</block></then></if>
	<expr_stmt><expr><name>cnt</name><operator>=</operator><name>tmp</name><operator>/</operator><name>c</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>tmp</name><operator>-=</operator><name>cnt</name><operator>*</operator><name>c</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>fo</name><operator>+=</operator><name>cnt</name><operator>*</operator><name>d</name></expr>;</expr_stmt>
	<if>if<condition>(<expr><name><name>fo</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal><operator>||</operator><name>fo</name><operator>+</operator><name>tmp</name></expr></argument>&gt;</argument_list></name><name>a</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
	<else>else <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld %lld %lld\n"</literal></expr></argument>,<argument><expr><name>fo</name></expr></argument>,<argument><expr><name>tmp</name></expr></argument>,<argument><expr><name>a</name><operator>-</operator><name>fo</name><operator>-</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
