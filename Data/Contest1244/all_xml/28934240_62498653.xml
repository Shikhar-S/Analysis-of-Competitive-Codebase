<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28934240_62498653.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = a; i &lt; (b); ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>trav</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(auto&amp; a : x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>begin(x), end(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(int)(x).size()</cpp:value></cpp:define>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>

<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>p</name></decl>,<decl><type ref="prev"/><name>w</name></decl>,<decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>

<comment type="line">// true : nice</comment>
<comment type="line">// false : you need to win more</comment>
<function><type><name>bool</name></type> <name>works</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>numWins</name></decl></parameter>)</parameter_list> <block>{
	<decl_stmt><decl><type><name>ll</name></type> <name>score</name> <init>= <expr><name>numWins</name> <operator>*</operator> <name>w</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>scoreLeft</name> <init>= <expr><name>p</name><operator>-</operator><name>score</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>y</name> <init>= <expr><name>scoreLeft</name> <operator>/</operator> <name>d</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>z</name> <init>= <expr><name>n</name> <operator>-</operator> <name>numWins</name> <operator>-</operator> <name>y</name></expr></init></decl>;</decl_stmt>
	<return>return <expr><operator>(</operator><name>z</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>printStuff</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>numWins</name></decl></parameter>)</parameter_list> <block>{
	<decl_stmt><decl><type><name>ll</name></type> <name>score</name> <init>= <expr><name>numWins</name> <operator>*</operator> <name>w</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>scoreLeft</name> <init>= <expr><name>p</name><operator>-</operator><name>score</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>y</name> <init>= <expr><name>scoreLeft</name> <operator>/</operator> <name>d</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>z</name> <init>= <expr><name>n</name> <operator>-</operator> <name>numWins</name> <operator>-</operator> <name>y</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>numWins</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name>y</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name>z</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>exceptions</name></name><argument_list>(<argument><expr><name><name>cin</name><operator>.</operator><name>failbit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>p</name> <operator>&gt;&gt;</operator> <name>w</name> <operator>&gt;&gt;</operator> <name>d</name></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>ll</name></type> <name>lowestNumWins</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<macro><name>rep</name><argument_list>(<argument>i</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">1000000</literal></argument>)</argument_list></macro> <block>{
		<decl_stmt><decl><type><name>ll</name></type> <name>score</name> <init>= <expr><name>w</name><operator>*</operator><name>i</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ll</name></type> <name>scoreLeft</name> <init>= <expr><name>p</name><operator>-</operator><name>score</name></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>scoreLeft</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
			<break>break;</break>
		}</block></then></if>
		<if>if <condition>(<expr><name>scoreLeft</name> <operator>%</operator> <name>d</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>lowestNumWins</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
			<break>break;</break>
		}</block></then></if>
	}</block>
	<decl_stmt><decl><type><name>ll</name></type> <name>highestNumWins</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<macro><name>rep</name><argument_list>(<argument>i</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">1000000</literal></argument>)</argument_list></macro> <block>{
		<decl_stmt><decl><type><name>ll</name></type> <name>score</name> <init>= <expr><name>d</name><operator>*</operator><name>i</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ll</name></type> <name>scoreLeft</name> <init>= <expr><name>p</name><operator>-</operator><name>score</name></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>scoreLeft</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
			<break>break;</break>
		}</block></then></if>
		<if>if <condition>(<expr><name>scoreLeft</name> <operator>%</operator> <name>w</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>highestNumWins</name> <operator>=</operator> <name>scoreLeft</name> <operator>/</operator> <name>w</name></expr>;</expr_stmt>
			<break>break;</break>
		}</block></then></if>
	}</block>
	<if>if <condition>(<expr><name>lowestNumWins</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>highestNumWins</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></then></if>

	<decl_stmt><decl><type><name>ll</name></type> <name>change</name> <init>= <expr><name>d</name></expr></init></decl>;</decl_stmt>
	<macro><name>rep</name><argument_list>(<argument>i</argument>, <argument><literal type="number">1</literal></argument>, <argument>d</argument>)</argument_list></macro> <block>{
		<if>if <condition>(<expr><operator>(</operator><name>w</name><operator>*</operator><name>i</name><operator>)</operator> <operator>%</operator> <name>d</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>change</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
			<break>break;</break>
		}</block></then></if>
	}</block>

	<decl_stmt><decl><type><name>ll</name></type> <name>low</name> <init>= <expr><name>lowestNumWins</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>high</name> <init>= <expr><name>highestNumWins</name></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><name>low</name> <operator>&lt;=</operator> <name>high</name></expr>)</condition> <block>{
		<decl_stmt><decl><type><name>ll</name></type> <name>dist</name> <init>= <expr><operator>(</operator><name>high</name> <operator>-</operator> <name>low</name><operator>)</operator> <operator>/</operator> <name>change</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ll</name></type> <name>mid</name> <init>= <expr><name>low</name> <operator>+</operator> <name>dist</name><operator>/</operator><literal type="number">2</literal> <operator>*</operator> <name>change</name></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><call><name>works</name><argument_list>(<argument><expr><name>mid</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>printStuff</name><argument_list>(<argument><expr><name>mid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		}</block></then></if>
		<expr_stmt><expr><name>low</name> <operator>=</operator> <name>mid</name> <operator>+</operator> <name>change</name></expr>;</expr_stmt>
	}</block></while>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
}</block></function>
</unit>
