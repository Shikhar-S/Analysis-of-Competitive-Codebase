<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28931554_62466426.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<namespace>namespace <name>Dango</name>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>,<decl><type ref="prev"/><name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>,<decl><type ref="prev"/><name>d</name></decl>,<decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ans</name></decl>;</decl_stmt>
	<function><type><name>int</name></type> <name>read</name><parameter_list>()</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>x</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>f</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name></type> <name>ch</name><init>=<expr><call><name>getchar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<while>while<condition>(<expr><operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<expr_stmt><expr><name>f</name><operator>|=</operator><operator>(</operator><name>ch</name><operator>==</operator><literal type="char">'-'</literal><operator>)</operator></expr>;</expr_stmt><expr_stmt><expr><name>ch</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>}</block></while>
		<while>while<condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<expr_stmt><expr><name>x</name><operator>=</operator><name>x</name><operator>*</operator><literal type="number">10</literal><operator>+</operator><name>ch</name><operator>-</operator><literal type="char">'0'</literal></expr>;</expr_stmt><expr_stmt><expr><name>ch</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>}</block></while>
		<return>return <expr><ternary><condition><expr><name>f</name></expr>?</condition><then><expr><operator>-</operator><name>x</name></expr></then><else>:<expr><name>x</name></expr></else></ternary></expr>;</return>
	}</block></function>
	<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list>
	<block>{
		<expr_stmt><expr><name>a</name><operator>=</operator><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name>b</name><operator>=</operator><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name>c</name><operator>=</operator><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name>d</name><operator>=</operator><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name>k</name><operator>=</operator><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x</name><operator>=</operator><operator>(</operator><name>a</name><operator>+</operator><name>c</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><name>c</name></expr>;</expr_stmt><expr_stmt><expr><name>y</name><operator>=</operator><operator>(</operator><name>b</name><operator>+</operator><name>d</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><name>d</name></expr>;</expr_stmt>
		<expr_stmt><expr><ternary><condition><expr><name>x</name><operator>+</operator><name>y</name><operator>&gt;</operator><name>k</name></expr>?</condition><then><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-1\n"</literal></expr></argument>)</argument_list></call></expr></then><else>:<expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d\n"</literal></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
	}</block></function>
	<function><type><name>int</name></type> <name>work</name><parameter_list>()</parameter_list>
	<block>{
		<expr_stmt><expr><name>t</name><operator>=</operator><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>t</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block type="pseudo"><expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></for>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></function>
}</block></namespace>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<return>return <expr><call><name><name>Dango</name><operator>::</operator><name>work</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></function></unit>
