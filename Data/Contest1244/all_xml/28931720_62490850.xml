<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28931720_62490850.cpp"><cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><cpp:literal>"Ofast"</cpp:literal><name>)</name></cpp:pragma>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iomanip&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;array&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;valarray&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;climits&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;random&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iterator&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;numeric&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;functional&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;deque&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stack&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>int</name></type> <name>valid</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></name></type> <name>marks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></name></expr></argument>&gt;</argument_list></name></name></type> <name>graph</name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>at</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">1</literal></expr></init></decl></parameter>)</parameter_list>
<block>{
	<expr_stmt><expr><name><name>marks</name><index>[<expr><name>at</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>calls</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>to</name> <range>: <expr><name><name>graph</name><index>[<expr><name>at</name></expr>]</index></name></expr></range></decl></init>)</control>
	<block>{
		<expr_stmt><expr><name>calls</name><operator>++</operator></expr>;</expr_stmt>
		<if>if<condition>(<expr><name><name>marks</name><index>[<expr><name>to</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
		<expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>to</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name>c</name> <operator>%</operator> <literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<if>if<condition>(<expr><name>calls</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then></if> 
	<if>if<condition>(<expr><name>calls</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>valid</name><operator>--</operator></expr>;</expr_stmt></block></then></if> <comment type="line">//valid should be 0 in the very end to be valid</comment>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>(<comment type="block">/*int64_t argc, char*argv[]*/</comment>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt> <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cin</name></name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>marks</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>graph</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">//tree is a chain</comment>
	<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></name></type> <name>c1</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></name></type> <name>c2</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></name></type> <name>c3</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c3</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt> <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cin</name></name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>a</name><operator>--</operator></expr>;</expr_stmt> <expr_stmt><expr><name>b</name><operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>graph</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>graph</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><if>if<condition>(<expr><name><name>graph</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		}</block></then></if></block></for>
	<if>if<condition>(<expr><name>valid</name></expr>)</condition><then> <block>{ <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return> }</block></then></if>
	<decl_stmt><decl><type><name>int64_t</name></type> <name>sc11</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>sc12</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>sc13</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>sc21</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>sc22</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>sc23</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>sc31</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>sc32</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>sc33</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<if>if<condition>(<expr><name><name>marks</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>sc11</name> <operator>+=</operator> <name><name>c1</name><index>[<expr><name>i</name></expr>]</index></name></expr><operator>,</operator>
			<expr><name>sc12</name> <operator>+=</operator> <name><name>c2</name><index>[<expr><name>i</name></expr>]</index></name></expr><operator>,</operator>
			<expr><name>sc13</name> <operator>+=</operator> <name><name>c3</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></then></if>
		<if>if<condition>(<expr><name><name>marks</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>sc21</name> <operator>+=</operator> <name><name>c1</name><index>[<expr><name>i</name></expr>]</index></name></expr><operator>,</operator>
			<expr><name>sc22</name> <operator>+=</operator> <name><name>c2</name><index>[<expr><name>i</name></expr>]</index></name></expr><operator>,</operator>
			<expr><name>sc23</name> <operator>+=</operator> <name><name>c3</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></then></if>
		<if>if<condition>(<expr><name><name>marks</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>sc31</name> <operator>+=</operator> <name><name>c1</name><index>[<expr><name>i</name></expr>]</index></name></expr><operator>,</operator>
			<expr><name>sc32</name> <operator>+=</operator> <name><name>c2</name><index>[<expr><name>i</name></expr>]</index></name></expr><operator>,</operator>
			<expr><name>sc33</name> <operator>+=</operator> <name><name>c3</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></then></if>
		<comment type="line">//printf("sc11=%d, sc12=%d, sc13=%d, sc21=%d, sc22=%d, sc23=%d, sc31=%d, sc32=%d, sc33=%d\n", sc11, sc12, sc13, sc21, sc22, sc23, sc31, sc32, sc33);</comment>
	}</block></for>
	<decl_stmt><decl><type><name>int</name></type> <name>bo</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int64_t</name></type> <name>max</name> <init>= <expr><name>LLONG_MAX</name></expr></init></decl>;</decl_stmt>
	<if>if<condition>(<expr><name>max</name> <operator>&gt;</operator> <name>sc11</name> <operator>+</operator> <name>sc22</name> <operator>+</operator> <name>sc33</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>max</name> <operator>=</operator> <name>sc11</name> <operator>+</operator> <name>sc22</name> <operator>+</operator> <name>sc33</name></expr><operator>,</operator> <expr><name>bo</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></then></if> <comment type="line">//thx vim for block copy&amp;paste</comment>
	<if>if<condition>(<expr><name>max</name> <operator>&gt;</operator> <name>sc11</name> <operator>+</operator> <name>sc23</name> <operator>+</operator> <name>sc32</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>max</name> <operator>=</operator> <name>sc11</name> <operator>+</operator> <name>sc23</name> <operator>+</operator> <name>sc32</name></expr><operator>,</operator> <expr><name>bo</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
	<if>if<condition>(<expr><name>max</name> <operator>&gt;</operator> <name>sc12</name> <operator>+</operator> <name>sc21</name> <operator>+</operator> <name>sc33</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>max</name> <operator>=</operator> <name>sc12</name> <operator>+</operator> <name>sc21</name> <operator>+</operator> <name>sc33</name></expr><operator>,</operator> <expr><name>bo</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block></then></if>
	<if>if<condition>(<expr><name>max</name> <operator>&gt;</operator> <name>sc12</name> <operator>+</operator> <name>sc23</name> <operator>+</operator> <name>sc31</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>max</name> <operator>=</operator> <name>sc12</name> <operator>+</operator> <name>sc23</name> <operator>+</operator> <name>sc31</name></expr><operator>,</operator> <expr><name>bo</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block></then></if>
	<if>if<condition>(<expr><name>max</name> <operator>&gt;</operator> <name>sc13</name> <operator>+</operator> <name>sc21</name> <operator>+</operator> <name>sc32</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>max</name> <operator>=</operator> <name>sc13</name> <operator>+</operator> <name>sc21</name> <operator>+</operator> <name>sc32</name></expr><operator>,</operator> <expr><name>bo</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block></then></if>
	<if>if<condition>(<expr><name>max</name> <operator>&gt;</operator> <name>sc13</name> <operator>+</operator> <name>sc22</name> <operator>+</operator> <name>sc31</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>max</name> <operator>=</operator> <name>sc13</name> <operator>+</operator> <name>sc22</name> <operator>+</operator> <name>sc31</name></expr><operator>,</operator> <expr><name>bo</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt></block></then></if>
	<expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <name>max</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>cur</name> <init>= <expr><name><name>marks</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<comment type="line">//printf("cc=%d, bo=%d\n", cur, bo);</comment>
		<if>if<condition>(<expr><name>bo</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <operator>(</operator><ternary><condition><expr><name>cur</name><operator>==</operator><literal type="number">1</literal></expr>?</condition><then><expr><literal type="number">1</literal></expr></then><else>:<expr><ternary><condition><expr><name>cur</name><operator>==</operator><literal type="number">2</literal></expr>?</condition><then><expr><literal type="number">2</literal></expr></then><else>:<expr><literal type="number">3</literal></expr></else></ternary></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block></then></if>
		<if>if<condition>(<expr><name>bo</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <operator>(</operator><ternary><condition><expr><name>cur</name><operator>==</operator><literal type="number">1</literal></expr>?</condition><then><expr><literal type="number">1</literal></expr></then><else>:<expr><ternary><condition><expr><name>cur</name><operator>==</operator><literal type="number">2</literal></expr>?</condition><then><expr><literal type="number">3</literal></expr></then><else>:<expr><literal type="number">2</literal></expr></else></ternary></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block></then></if>
		<if>if<condition>(<expr><name>bo</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <operator>(</operator><ternary><condition><expr><name>cur</name><operator>==</operator><literal type="number">1</literal></expr>?</condition><then><expr><literal type="number">2</literal></expr></then><else>:<expr><ternary><condition><expr><name>cur</name><operator>==</operator><literal type="number">2</literal></expr>?</condition><then><expr><literal type="number">1</literal></expr></then><else>:<expr><literal type="number">3</literal></expr></else></ternary></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block></then></if>
		<if>if<condition>(<expr><name>bo</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <operator>(</operator><ternary><condition><expr><name>cur</name><operator>==</operator><literal type="number">1</literal></expr>?</condition><then><expr><literal type="number">2</literal></expr></then><else>:<expr><ternary><condition><expr><name>cur</name><operator>==</operator><literal type="number">2</literal></expr>?</condition><then><expr><literal type="number">3</literal></expr></then><else>:<expr><literal type="number">1</literal></expr></else></ternary></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block></then></if>
		<if>if<condition>(<expr><name>bo</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <operator>(</operator><ternary><condition><expr><name>cur</name><operator>==</operator><literal type="number">1</literal></expr>?</condition><then><expr><literal type="number">3</literal></expr></then><else>:<expr><ternary><condition><expr><name>cur</name><operator>==</operator><literal type="number">2</literal></expr>?</condition><then><expr><literal type="number">1</literal></expr></then><else>:<expr><literal type="number">2</literal></expr></else></ternary></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block></then></if>
		<if>if<condition>(<expr><name>bo</name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <operator>(</operator><ternary><condition><expr><name>cur</name><operator>==</operator><literal type="number">1</literal></expr>?</condition><then><expr><literal type="number">3</literal></expr></then><else>:<expr><ternary><condition><expr><name>cur</name><operator>==</operator><literal type="number">2</literal></expr>?</condition><then><expr><literal type="number">2</literal></expr></then><else>:<expr><literal type="number">1</literal></expr></else></ternary></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block></then></if>
		<expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt>
	}</block></for>
}</block></function>
</unit>
