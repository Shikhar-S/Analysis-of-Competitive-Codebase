<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28934476_62482334.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M</name></cpp:macro> <cpp:value>100005</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name><name>in</name><index>[<expr><name>M</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>s1</name><index>[<expr><name>M</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>s2</name><index>[<expr><name>M</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>s3</name><index>[<expr><name>M</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>num</name><index>[<expr><name>M</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>done</name><index>[<expr><name>M</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>link</name><index>[<expr><name>M</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name><name>E</name><index>[<expr><name>M</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>f</name></decl></parameter>)</parameter_list> <block>{
	<expr_stmt><expr><name><name>link</name><index>[<expr><operator>++</operator><name>cnt</name></expr>]</index></name><operator>=</operator><name>x</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>E</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>v</name><init>=<expr><name><name>E</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>v</name><operator>==</operator><name>f</name></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
		<expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>v</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<return>return ;</return>
}</block></function>
<function><type><name>void</name></type> <name>check</name><parameter_list>()</parameter_list> <block>{
	<decl_stmt><decl><type><name>bool</name></type> <name>f</name><init>=<expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<if>if<condition>(<expr><name><name>done</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;</operator><name><name>num</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>f</name><operator>=</operator><literal type="boolean">true</literal></expr>;</expr_stmt>
			<break>break;</break>
		}</block></then> <elseif>else <if>if<condition>(<expr><name><name>done</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;</operator><name><name>num</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><break>break;</break></block></then></if></elseif></if>
	}</block></for>
	<if>if<condition>(<expr><name>f</name></expr>)</condition><then><block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name><name>num</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>done</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for></block></then></if>
	<return>return;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>s1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>s2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>s3</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>in</name><index>[<expr><name>a</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>in</name><index>[<expr><name>b</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>E</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>E</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><name><name>num</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">4</literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rt</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<if>if<condition>(<expr><name><name>in</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;=</operator><literal type="number">3</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		}</block></then></if>
		<if>if<condition>(<expr><name><name>in</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>rt</name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></then></if>
	}</block></for>
	<expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>rt</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>mn</name><init>=<expr><literal type="number">1e18</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>now</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<if>if<condition>(<expr><name>i</name><operator>%</operator><literal type="number">3</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>now</name><operator>+=</operator><name><name>s1</name><index>[<expr><name><name>link</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr><operator>,</operator><expr><name><name>done</name><index>[<expr><name><name>link</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then>
		<elseif>else <if>if<condition>(<expr><name>i</name><operator>%</operator><literal type="number">3</literal><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>now</name><operator>+=</operator><name><name>s2</name><index>[<expr><name><name>link</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr><operator>,</operator><expr><name><name>done</name><index>[<expr><name><name>link</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt></block></then></if></elseif>
		<elseif>else <if>if<condition>(<expr><name>i</name><operator>%</operator><literal type="number">3</literal><operator>==</operator><literal type="number">2</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>now</name><operator>+=</operator><name><name>s3</name><index>[<expr><name><name>link</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr><operator>,</operator><expr><name><name>done</name><index>[<expr><name><name>link</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>=</operator><literal type="number">3</literal></expr>;</expr_stmt></block></then></if></elseif></if>
	}</block></for>
	<if>if<condition>(<expr><name>now</name><operator>&lt;</operator><name>mn</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><name>mn</name><operator>=</operator><name>now</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>num</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">4</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>check</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></then> <elseif>else <if>if<condition>(<expr><name>now</name><operator>==</operator><name>mn</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>check</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if></elseif></if>
	<expr_stmt><expr><name>now</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<if>if<condition>(<expr><name>i</name><operator>%</operator><literal type="number">3</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>now</name><operator>+=</operator><name><name>s1</name><index>[<expr><name><name>link</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr><operator>,</operator><expr><name><name>done</name><index>[<expr><name><name>link</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then>
		<elseif>else <if>if<condition>(<expr><name>i</name><operator>%</operator><literal type="number">3</literal><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>now</name><operator>+=</operator><name><name>s3</name><index>[<expr><name><name>link</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr><operator>,</operator><expr><name><name>done</name><index>[<expr><name><name>link</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>=</operator><literal type="number">3</literal></expr>;</expr_stmt></block></then></if></elseif>
		<elseif>else <if>if<condition>(<expr><name>i</name><operator>%</operator><literal type="number">3</literal><operator>==</operator><literal type="number">2</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>now</name><operator>+=</operator><name><name>s2</name><index>[<expr><name><name>link</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr><operator>,</operator><expr><name><name>done</name><index>[<expr><name><name>link</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt></block></then></if></elseif></if>
	}</block></for>
	<if>if<condition>(<expr><name>now</name><operator>&lt;</operator><name>mn</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><name>mn</name><operator>=</operator><name>now</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>num</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">4</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>check</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></then> <elseif>else <if>if<condition>(<expr><name>now</name><operator>==</operator><name>mn</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>check</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if></elseif></if>
	<expr_stmt><expr><name>now</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<if>if<condition>(<expr><name>i</name><operator>%</operator><literal type="number">3</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>now</name><operator>+=</operator><name><name>s2</name><index>[<expr><name><name>link</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr><operator>,</operator><expr><name><name>done</name><index>[<expr><name><name>link</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt></block></then>
		<elseif>else <if>if<condition>(<expr><name>i</name><operator>%</operator><literal type="number">3</literal><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>now</name><operator>+=</operator><name><name>s1</name><index>[<expr><name><name>link</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr><operator>,</operator><expr><name><name>done</name><index>[<expr><name><name>link</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if></elseif>
		<elseif>else <if>if<condition>(<expr><name>i</name><operator>%</operator><literal type="number">3</literal><operator>==</operator><literal type="number">2</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>now</name><operator>+=</operator><name><name>s3</name><index>[<expr><name><name>link</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr><operator>,</operator><expr><name><name>done</name><index>[<expr><name><name>link</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>=</operator><literal type="number">3</literal></expr>;</expr_stmt></block></then></if></elseif></if>
	}</block></for>
	<if>if<condition>(<expr><name>now</name><operator>&lt;</operator><name>mn</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><name>mn</name><operator>=</operator><name>now</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>num</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">4</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>check</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></then> <elseif>else <if>if<condition>(<expr><name>now</name><operator>==</operator><name>mn</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>check</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if></elseif></if>
	<expr_stmt><expr><name>now</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<if>if<condition>(<expr><name>i</name><operator>%</operator><literal type="number">3</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>now</name><operator>+=</operator><name><name>s2</name><index>[<expr><name><name>link</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr><operator>,</operator><expr><name><name>done</name><index>[<expr><name><name>link</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt></block></then>
		<elseif>else <if>if<condition>(<expr><name>i</name><operator>%</operator><literal type="number">3</literal><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>now</name><operator>+=</operator><name><name>s3</name><index>[<expr><name><name>link</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr><operator>,</operator><expr><name><name>done</name><index>[<expr><name><name>link</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>=</operator><literal type="number">3</literal></expr>;</expr_stmt></block></then></if></elseif>
		<elseif>else <if>if<condition>(<expr><name>i</name><operator>%</operator><literal type="number">3</literal><operator>==</operator><literal type="number">2</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>now</name><operator>+=</operator><name><name>s1</name><index>[<expr><name><name>link</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr><operator>,</operator><expr><name><name>done</name><index>[<expr><name><name>link</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if></elseif></if>
	}</block></for>
	<if>if<condition>(<expr><name>now</name><operator>&lt;</operator><name>mn</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><name>mn</name><operator>=</operator><name>now</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>num</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">4</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>check</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></then> <elseif>else <if>if<condition>(<expr><name>now</name><operator>==</operator><name>mn</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>check</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if></elseif></if>
	<expr_stmt><expr><name>now</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<if>if<condition>(<expr><name>i</name><operator>%</operator><literal type="number">3</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>now</name><operator>+=</operator><name><name>s3</name><index>[<expr><name><name>link</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr><operator>,</operator><expr><name><name>done</name><index>[<expr><name><name>link</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>=</operator><literal type="number">3</literal></expr>;</expr_stmt></block></then>
		<elseif>else <if>if<condition>(<expr><name>i</name><operator>%</operator><literal type="number">3</literal><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>now</name><operator>+=</operator><name><name>s1</name><index>[<expr><name><name>link</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr><operator>,</operator><expr><name><name>done</name><index>[<expr><name><name>link</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if></elseif>
		<elseif>else <if>if<condition>(<expr><name>i</name><operator>%</operator><literal type="number">3</literal><operator>==</operator><literal type="number">2</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>now</name><operator>+=</operator><name><name>s2</name><index>[<expr><name><name>link</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr><operator>,</operator><expr><name><name>done</name><index>[<expr><name><name>link</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt></block></then></if></elseif></if>
	}</block></for>
	<if>if<condition>(<expr><name>now</name><operator>&lt;</operator><name>mn</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><name>mn</name><operator>=</operator><name>now</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>num</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">4</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>check</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></then> <elseif>else <if>if<condition>(<expr><name>now</name><operator>==</operator><name>mn</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>check</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if></elseif></if>
	<expr_stmt><expr><name>now</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<if>if<condition>(<expr><name>i</name><operator>%</operator><literal type="number">3</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>now</name><operator>+=</operator><name><name>s3</name><index>[<expr><name><name>link</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr><operator>,</operator><expr><name><name>done</name><index>[<expr><name><name>link</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>=</operator><literal type="number">3</literal></expr>;</expr_stmt></block></then>
		<elseif>else <if>if<condition>(<expr><name>i</name><operator>%</operator><literal type="number">3</literal><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>now</name><operator>+=</operator><name><name>s2</name><index>[<expr><name><name>link</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr><operator>,</operator><expr><name><name>done</name><index>[<expr><name><name>link</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt></block></then></if></elseif>
		<elseif>else <if>if<condition>(<expr><name>i</name><operator>%</operator><literal type="number">3</literal><operator>==</operator><literal type="number">2</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>now</name><operator>+=</operator><name><name>s1</name><index>[<expr><name><name>link</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr><operator>,</operator><expr><name><name>done</name><index>[<expr><name><name>link</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if></elseif></if>
	}</block></for>
	<if>if<condition>(<expr><name>now</name><operator>&lt;</operator><name>mn</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><name>mn</name><operator>=</operator><name>now</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>num</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">4</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>check</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></then> <elseif>else <if>if<condition>(<expr><name>now</name><operator>==</operator><name>mn</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>check</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if></elseif></if>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>,<argument><expr><name>mn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d "</literal></expr></argument>,<argument><expr><name><name>num</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
