<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28925524_62499395.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M</name></cpp:macro> <cpp:value>100005</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name><name>a</name><index>[<expr><name>M</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>K</name></decl>,<decl><type ref="prev"/><name><name>sum</name><index>[<expr><name>M</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
<comment type="line">//	freopen("data.in","r",stdin);</comment>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%I64d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>K</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>a</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>a</name><operator>+</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name><name>sum</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>sum</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
<comment type="line">//	int ans=a[n]-a[1];</comment>
<comment type="line">//	for(int i=1; i&lt;=n; i++) {</comment>
<comment type="line">//		int l=a[i],r=a[n];</comment>
<comment type="line">//		ll now=1ll*i*a[i]-sum[i];</comment>
<comment type="line">//		while(l&lt;=r) {</comment>
<comment type="line">//			int mid=(l+r)&gt;&gt;1,k=lower_bound(a+1,a+n+1,mid)-a;</comment>
<comment type="line">//			ll p=(sum[n]-sum[k-1])-1ll*(n-k+1)*mid;</comment>
<comment type="line">//			if(p+now&lt;=K)ans=min(ans,mid-a[i]),r=mid-1;</comment>
<comment type="line">//			else l=mid+1;</comment>
<comment type="line">//		}</comment>
<comment type="line">//	}</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>l</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>r</name><init>=<expr><name>n</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>ok</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>l</name><operator>&lt;</operator><name>r</name><operator>&amp;&amp;</operator><name>K</name><operator>&amp;&amp;</operator><name>ok</name></expr>)</condition> <block>{
		<if>if<condition>(<expr><name>l</name><operator>&gt;=</operator><operator>(</operator><name>n</name><operator>-</operator><name>r</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>ll</name></type> <name>k</name><init>=<expr><name>K</name><operator>/</operator><operator>(</operator><name>n</name><operator>-</operator><name>r</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
			<if>if<condition>(<expr><name>k</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>ok</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
			<if>if<condition>(<expr><name>k</name><operator>&gt;=</operator><name><name>a</name><index>[<expr><name>r</name></expr>]</index></name><operator>-</operator><name><name>a</name><index>[<expr><name>r</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>K</name><operator>-=</operator><literal type="number">1ll</literal><operator>*</operator><operator>(</operator><name><name>a</name><index>[<expr><name>r</name></expr>]</index></name><operator>-</operator><name><name>a</name><index>[<expr><name>r</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>*</operator><operator>(</operator><name>n</name><operator>-</operator><name>r</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>r</name><operator>--</operator></expr>;</expr_stmt>
			}</block></then> <else>else <block>{
				<expr_stmt><expr><name>K</name><operator>-=</operator><literal type="number">1ll</literal><operator>*</operator><name>k</name><operator>*</operator><operator>(</operator><name>n</name><operator>-</operator><name>r</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>a</name><index>[<expr><name>r</name></expr>]</index></name><operator>-=</operator><name>k</name></expr>;</expr_stmt>
			}</block></else></if>
		}</block></then> <else>else <block>{
			<decl_stmt><decl><type><name>ll</name></type> <name>k</name><init>=<expr><name>K</name><operator>/</operator><name>l</name></expr></init></decl>;</decl_stmt>
			<if>if<condition>(<expr><name>k</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>ok</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
			<if>if<condition>(<expr><name>k</name><operator>&gt;=</operator><name><name>a</name><index>[<expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>a</name><index>[<expr><name>l</name></expr>]</index></name></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>K</name><operator>-=</operator><literal type="number">1ll</literal><operator>*</operator><operator>(</operator><name><name>a</name><index>[<expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>a</name><index>[<expr><name>l</name></expr>]</index></name><operator>)</operator><operator>*</operator><name>l</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>l</name><operator>++</operator></expr>;</expr_stmt>
			}</block></then> <else>else <block>{
				<expr_stmt><expr><name>K</name><operator>-=</operator><literal type="number">1ll</literal><operator>*</operator><name>k</name><operator>*</operator><name>l</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>a</name><index>[<expr><name>l</name></expr>]</index></name><operator>+=</operator><name>k</name></expr>;</expr_stmt>
			}</block></else></if>
		}</block></else></if>
	}</block></while>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>,<argument><expr><name><name>a</name><index>[<expr><name>r</name></expr>]</index></name><operator>-</operator><name><name>a</name><index>[<expr><name>l</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
