<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28926653_62486153.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>st</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nd</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)x.size())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ii</name></cpp:macro> <cpp:value>pair&lt;int,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ppb</name></cpp:macro> <cpp:value>pop_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N</name></cpp:macro> <cpp:value>200005</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inf</name></cpp:macro> <cpp:value>2000000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>iii</name></cpp:macro> <cpp:value>pair&lt;pair&lt;int,int&gt;,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P</name></cpp:macro> <cpp:value>1000003</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>dad</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>sz</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>vis</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>fu</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>dd</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>find</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<return>return <expr><name><name>dad</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><operator>(</operator><ternary><condition><expr><name>x</name><operator>==</operator><name><name>dad</name><index>[<expr><name>x</name></expr>]</index></name></expr>?</condition><then><expr><name>x</name></expr></then><else>:<expr><call><name>find</name><argument_list>(<argument><expr><name><name>dad</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr>;</return>}</block></function>

<function><type><name>void</name></type> <name>merge</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{

	<expr_stmt><expr><name>a</name><operator>=</operator><call><name>find</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>b</name><operator>=</operator><call><name>find</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>sz</name><index>[<expr><name>b</name></expr>]</index></name><operator>+=</operator><name><name>sz</name><index>[<expr><name>a</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dad</name><index>[<expr><name>a</name></expr>]</index></name><operator>=</operator><name>b</name></expr>;</expr_stmt>

}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{

	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>dad</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>i</name></expr><operator>,</operator><expr><name><name>sz</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></for>

	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{

		<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name><name>s</name><index>[<expr><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><name>n</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>merge</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if> 

	}</block></for>

	<decl_stmt><decl><type><name><name>deque</name><argument_list type="generic">&lt;<argument><expr><name>iii</name></expr></argument>&gt;</argument_list></name></type> <name>q</name></decl>;</decl_stmt>

	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{

		<if>if<condition>(<expr><name><name>sz</name><index>[<expr><call><name>find</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>&gt;</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><block>{<expr><name>i</name></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="char">'A'</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

	}</block></for>

	<while>while<condition>(<expr><operator>!</operator><call><name><name>q</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{

		<decl_stmt><decl><type><name>iii</name></type> <name>x</name><init>=<expr><call><name><name>q</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>pop_front</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>int</name></type> <name>pos</name><init>=<expr><name><name>x</name><operator>.</operator><name>st</name><operator>.</operator><name>st</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>d</name><init>=<expr><name><name>x</name><operator>.</operator><name>st</name><operator>.</operator><name>nd</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>c</name><init>=<expr><name><name>x</name><operator>.</operator><name>nd</name></name></expr></init></decl>;</decl_stmt>

		<if>if<condition>(<expr><name><name>vis</name><index>[<expr><name>pos</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><continue>continue ;</continue></block></then></if>

		<expr_stmt><expr><name><name>vis</name><index>[<expr><name>pos</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>dd</name><index>[<expr><name>pos</name></expr>]</index></name><operator>=</operator><name>d</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fu</name><index>[<expr><name>pos</name></expr>]</index></name><operator>=</operator><name>c</name></expr>;</expr_stmt>

		<if>if<condition>(<expr><call><name>find</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call><operator>==</operator><call><name>find</name><argument_list>(<argument><expr><operator>(</operator><name>pos</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><name>n</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{

			<expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push_front</name></name><argument_list>(<argument><expr><block>{<expr><block>{<expr><operator>(</operator><name>pos</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><name>n</name></expr>,<expr><name>d</name></expr>}</block></expr>,<expr><name>c</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></then>
		<else>else <block>{

			<expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><block>{<expr><operator>(</operator><name>pos</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><name>n</name></expr>,<expr><name>d</name><operator>+</operator><literal type="number">1</literal></expr>}</block></expr>,<expr><name>c</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></else></if>

		<if>if<condition>(<expr><call><name>find</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call><operator>==</operator><call><name>find</name><argument_list>(<argument><expr><operator>(</operator><name>pos</name><operator>-</operator><literal type="number">1</literal><operator>+</operator><name>n</name><operator>)</operator><operator>%</operator><name>n</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{

			<expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push_front</name></name><argument_list>(<argument><expr><block>{<expr><block>{<expr><operator>(</operator><name>pos</name><operator>-</operator><literal type="number">1</literal><operator>+</operator><name>n</name><operator>)</operator><operator>%</operator><name>n</name></expr>,<expr><name>d</name></expr>}</block></expr>,<expr><name>c</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></then>
		<else>else <block>{

			<expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><block>{<expr><operator>(</operator><name>pos</name><operator>-</operator><literal type="number">1</literal><operator>+</operator><name>n</name><operator>)</operator><operator>%</operator><name>n</name></expr>,<expr><name>d</name><operator>+</operator><literal type="number">1</literal></expr>}</block></expr>,<expr><name>c</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></else></if>

	}</block></while>

	<decl_stmt><decl><type><name>char</name></type> <name><name>ss</name><index>[]</index></name><init>=<expr><literal type="string">"BW"</literal></expr></init></decl>;</decl_stmt>

	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{

		<if>if<condition>(<expr><operator>!</operator><name><name>vis</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><continue>continue ;</continue></block></then></if>

		<if>if<condition>(<expr><name><name>dd</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;=</operator><name>k</name></expr>)</condition><then> <block>{

			<expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="char">'A'</literal><operator>+</operator><name><name>fu</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

		}</block></then>
		<else>else <block>{

			<decl_stmt><decl><type><name>int</name></type> <name>p</name><init>=<expr><operator>(</operator><name><name>ss</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>!=</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><name>p</name><operator>+=</operator><name>k</name><operator>&amp;</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>p</name><operator>&amp;=</operator><literal type="number">1</literal></expr>;</expr_stmt>

			<expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>ss</name><index>[<expr><name>p</name></expr>]</index></name></expr>;</expr_stmt>

		}</block></else></if>

	}</block></for>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

}</block></function></unit>
