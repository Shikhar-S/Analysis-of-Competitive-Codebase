<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28929620_62471953.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function_decl><type><name>int</name></type> <name>read</name><parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr><literal type="number">200005</literal></expr>]</index></name></decl>;</decl_stmt>
<struct>struct <name>P</name> <block>{<public type="default">
    <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>sum</name></decl>;</decl_stmt>
</public>}</block> <decl><name><name>p</name><index>[<expr><literal type="number">200005</literal></expr>]</index></name></decl>;</struct>
<decl_stmt><decl><type><name>int</name></type> <name>cnt</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%I64d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>a</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>a</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>p</name><index>[<expr><operator>++</operator><name>cnt</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <while>while <condition>(<expr><name><name>a</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt></block></while>
        <expr_stmt><expr><name><name>p</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>.</operator><name>sum</name> <operator>=</operator> <name>j</name> <operator>-</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>i</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
    }</block></for>

    <decl_stmt><decl><type><name>int</name></type> <name>st</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>en</name> <init>= <expr><name>cnt</name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>st</name> <operator>&lt;</operator> <name>en</name></expr>)</condition> <block>{
        <if>if <condition>(<expr><name><name>p</name><index>[<expr><name>st</name></expr>]</index></name><operator>.</operator><name>sum</name> <operator>&lt;=</operator> <name><name>p</name><index>[<expr><name>en</name></expr>]</index></name><operator>.</operator><name>sum</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>t</name> <init>= <expr><name><name>p</name><index>[<expr><name>st</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>-</operator> <name><name>p</name><index>[<expr><name>st</name></expr>]</index></name><operator>.</operator><name>x</name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>k</name> <operator>&gt;=</operator> <name>t</name> <operator>*</operator> <name><name>p</name><index>[<expr><name>st</name></expr>]</index></name><operator>.</operator><name>sum</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>k</name> <operator>-=</operator> <name>t</name> <operator>*</operator> <name><name>p</name><index>[<expr><name>st</name></expr>]</index></name><operator>.</operator><name>sum</name></expr><operator>,</operator> <expr><name><name>p</name><index>[<expr><name>st</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sum</name> <operator>+=</operator> <name><name>p</name><index>[<expr><name>st</name></expr>]</index></name><operator>.</operator><name>sum</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>st</name><operator>++</operator></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name><name>p</name><index>[<expr><name>st</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>+=</operator> <name>k</name> <operator>/</operator> <name><name>p</name><index>[<expr><name>st</name></expr>]</index></name><operator>.</operator><name>sum</name></expr>;</expr_stmt>
                <break>break;</break>
            }</block></else></if>
        }</block></then> <else>else <block>{
            <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>t</name> <init>= <expr><name><name>p</name><index>[<expr><name>en</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>-</operator> <name><name>p</name><index>[<expr><name>en</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>k</name> <operator>&gt;=</operator> <name>t</name> <operator>*</operator> <name><name>p</name><index>[<expr><name>en</name></expr>]</index></name><operator>.</operator><name>sum</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>k</name> <operator>-=</operator> <name>t</name> <operator>*</operator> <name><name>p</name><index>[<expr><name>en</name></expr>]</index></name><operator>.</operator><name>sum</name></expr><operator>,</operator> <expr><name><name>p</name><index>[<expr><name>en</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sum</name> <operator>+=</operator> <name><name>p</name><index>[<expr><name>en</name></expr>]</index></name><operator>.</operator><name>sum</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>en</name><operator>--</operator></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name><name>p</name><index>[<expr><name>en</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>-=</operator> <name>k</name> <operator>/</operator> <name><name>p</name><index>[<expr><name>en</name></expr>]</index></name><operator>.</operator><name>sum</name></expr>;</expr_stmt>
                <break>break;</break>
            }</block></else></if>
        }</block></else></if>
    }</block></while>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><name>en</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>-</operator> <name><name>p</name><index>[<expr><name>st</name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>read</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>f</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><call><name>getchar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name><name>c</name> <argument_list type="generic">&lt; <argument><expr><literal type="char">'0'</literal> <operator>||</operator> <name>c</name></expr></argument> &gt;</argument_list></name> <literal type="char">'9'</literal></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>f</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">'-'</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>f</name></expr></else></ternary></expr><operator>,</operator> <expr><name>c</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
    <while>while <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr><operator>,</operator> <expr><name>c</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
    <return>return <expr><name>x</name> <operator>*</operator> <name>f</name></expr>;</return>
}</block></function></unit>
