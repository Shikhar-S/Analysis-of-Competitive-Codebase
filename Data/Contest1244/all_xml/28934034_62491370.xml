<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28934034_62491370.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ld</name></cpp:macro> <cpp:value>long double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>boost</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;int,int&gt;</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>deque</name><argument_list type="generic">&lt;<argument><expr><name>pii</name></expr></argument>&gt;</argument_list></name></type> <name>dq</name></decl>;</decl_stmt>
<function><type><name>int32_t</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{   <comment type="line">//srand(chrono::steady_clock::now().time_since_epoch().count());</comment>
    <expr_stmt><expr><name>boost</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>x</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dq</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name>x</name></expr>, <expr><literal type="number">1</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>dq</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>dq</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name><name>dq</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{
       <comment type="line">//     cout &lt;&lt; "CUR K : " &lt;&lt; k &lt;&lt; "\n";</comment>

        <while>while<condition>(<expr><call><name><name>dq</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>dq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>first</name> <operator>==</operator> <name><name>dq</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>first</name></expr>)</condition> <block>{
            <expr_stmt><expr><name><name>dq</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>second</name> <operator>+=</operator> <name><name>dq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>second</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>dq</name><operator>.</operator><name>pop_front</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></while>
        <while>while<condition>(<expr><call><name><name>dq</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name><name>dq</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>first</name> <operator>==</operator> <name><name>dq</name><index>[<expr><call><name><name>dq</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>first</name></expr>)</condition> <block>{
            <expr_stmt><expr><name><name>dq</name><index>[<expr><call><name><name>dq</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>second</name> <operator>+=</operator> <call><name><name>dq</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>second</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>dq</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></while>
        <if>if<condition>(<expr><call><name><name>dq</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><then>
            <block type="pseudo"><break>break;</break></block></then></if>
        <if>if<condition>(<expr><name><name>dq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>second</name> <operator>&lt;=</operator> <call><name><name>dq</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>second</name></expr>)</condition><then> <block>{
            <if>if<condition>(<expr><operator>(</operator><name><name>dq</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>first</name> <operator>-</operator> <name><name>dq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>first</name><operator>)</operator> <operator>*</operator> <name><name>dq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>second</name> <operator>&lt;=</operator> <name>k</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>k</name> <operator>-=</operator> <operator>(</operator><name><name>dq</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>first</name> <operator>-</operator> <name><name>dq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>first</name><operator>)</operator> <operator>*</operator> <name><name>dq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>second</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>dq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>first</name> <operator>=</operator> <name><name>dq</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>first</name></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>maly</name> <init>= <expr><name><name>dq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>first</name> <operator>+</operator> <name>k</name> <operator>/</operator> <name><name>dq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>second</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name><name>dq</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>first</name> <operator>-</operator> <name>maly</name></expr>;</expr_stmt>
                <return>return <expr><literal type="number">0</literal></expr>;</return>
            }</block></else></if>
        }</block></then> <else>else <block>{
            <if>if<condition>(<expr><operator>(</operator><call><name><name>dq</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>first</name> <operator>-</operator> <name><name>dq</name><index>[<expr><call><name><name>dq</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>first</name><operator>)</operator> <operator>*</operator> <call><name><name>dq</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>second</name> <operator>&lt;=</operator> <name>k</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>k</name> <operator>-=</operator> <operator>(</operator><call><name><name>dq</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>first</name> <operator>-</operator> <name><name>dq</name><index>[<expr><call><name><name>dq</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>first</name><operator>)</operator> <operator>*</operator> <call><name><name>dq</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>second</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>dq</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>first</name> <operator>=</operator> <name><name>dq</name><index>[<expr><call><name><name>dq</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>first</name></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>duzy</name> <init>= <expr><call><name><name>dq</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>first</name> <operator>-</operator> <name>k</name> <operator>/</operator> <call><name><name>dq</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>second</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>duzy</name> <operator>-</operator> <name><name>dq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>first</name></expr>;</expr_stmt>
                <return>return <expr><literal type="number">0</literal></expr>;</return>
            }</block></else></if>
        }</block></else></if>
    }</block></while><comment type="line">//cout &lt;&lt; "E";</comment>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name><name>dq</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>first</name> <operator>-</operator> <name><name>dq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>first</name></expr>;</expr_stmt>
}</block></function>
</unit>
