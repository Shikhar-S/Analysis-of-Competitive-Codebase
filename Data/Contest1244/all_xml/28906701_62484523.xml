<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28906701_62484523.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TTT</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x.begin(), x.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>forn</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int i = 0; i &lt; n; i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cint</name></cpp:macro> <cpp:value>[&amp;](){TTT x; cin &gt;&gt; x; return x;}()</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">1e5</literal> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>trymax</name><parameter_list>(<parameter><decl><type><name>int</name><modifier>&amp;</modifier></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type> <name>trymin</name><parameter_list>(<parameter><decl><type><name>int</name><modifier>&amp;</modifier></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<decl_stmt><decl><type><name>int</name></type> <name><name>can</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>signed</name></type> <name>main</name> <parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>p</name> <operator>&gt;&gt;</operator> <name>w</name> <operator>&gt;&gt;</operator> <name>d</name></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>p</name> <operator>/</operator> <name>w</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name>i</name> <operator>*</operator> <name>w</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>i</name> <operator>+</operator> <operator>(</operator><name>p</name> <operator>-</operator> <name>w</name> <operator>*</operator> <name>i</name><operator>)</operator> <operator>/</operator> <name>d</name> <operator>&gt;</operator> <name>n</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
        <if>if <condition>(<expr><name><name>can</name><index>[<expr><operator>(</operator><name>p</name> <operator>-</operator> <name>w</name> <operator>*</operator> <name>i</name><operator>)</operator> <operator>%</operator> <name>d</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
        <expr_stmt><expr><name><name>can</name><index>[<expr><operator>(</operator><name>p</name> <operator>-</operator> <name>w</name> <operator>*</operator> <name>i</name><operator>)</operator> <operator>%</operator> <name>d</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>-</operator> <name>x</name><operator>)</operator> <operator>%</operator> <name>d</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>n</name> <operator>-</operator> <operator>(</operator><name>i</name> <operator>+</operator> <operator>(</operator><name>p</name> <operator>-</operator> <name>x</name><operator>)</operator> <operator>/</operator> <name>d</name><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>xx</name> <init>= <expr><operator>(</operator><name>p</name> <operator>-</operator> <name>x</name><operator>)</operator> <operator>/</operator> <name>d</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>yy</name> <init>= <expr><name>i</name></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>xx</name> <operator>*</operator> <name>d</name> <operator>+</operator> <name>yy</name> <operator>*</operator> <name>w</name> <operator>!=</operator> <name>p</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
                <if>if <condition>(<expr><name>xx</name> <operator>+</operator> <name>yy</name> <operator>&gt;</operator> <name>n</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
            <return>return <expr><name>cout</name> <operator>&lt;&lt;</operator> <name>yy</name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal> <operator>&lt;&lt;</operator> <name>xx</name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal> <operator>&lt;&lt;</operator> <name>n</name> <operator>-</operator> <name>xx</name> <operator>-</operator> <name>yy</name> <operator>&lt;&lt;</operator> <name>endl</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr>;</return>
        }</block></then></if>
    }</block></for>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
}</block></function>
</unit>
