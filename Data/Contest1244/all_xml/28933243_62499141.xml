<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28933243_62499141.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>int32_t</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>set</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>s</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>map</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>m</name></decl>;</decl_stmt>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>x</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>m</name><index>[<expr><name>x</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
    }</block></for>

    <while>while<condition>(<expr><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>*</operator><call><name><name>s</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>y</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>++</operator><call><name><name>s</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>)</operator></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>a</name> <operator>=</operator> <operator>*</operator><call><name><name>s</name><operator>.</operator><name>rbegin</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>b</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>++</operator><call><name><name>s</name><operator>.</operator><name>rbegin</name></name><argument_list>()</argument_list></call><operator>)</operator></expr>;</expr_stmt>

        <if>if<condition>(<expr><name>k</name> <operator>&lt;</operator> <name><name>m</name><index>[<expr><name>x</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name>k</name> <operator>&lt;</operator> <name><name>m</name><index>[<expr><name>a</name></expr>]</index></name></expr>)</condition><then>
            <block type="pseudo"><break>break;</break></block></then>
        <elseif>else <if>if<condition>(<expr><name>k</name> <operator>&gt;=</operator> <name><name>m</name><index>[<expr><name>x</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name>k</name> <operator>&lt;</operator> <name><name>m</name><index>[<expr><name>a</name></expr>]</index></name></expr>)</condition><then>
        <block>{
            <if>if<condition>(<expr><name>k</name> <operator>&lt;=</operator> <name><name>m</name><index>[<expr><name>x</name></expr>]</index></name><operator>*</operator><operator>(</operator><name>y</name><operator>-</operator><name>x</name><operator>)</operator></expr>)</condition><then>
            <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><name>k</name><operator>/</operator><name><name>m</name><index>[<expr><name>x</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>a</name> <operator>-</operator> <name>x</name> <operator>-</operator> <name>cnt</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
                <return>return <expr><literal type="number">0</literal></expr>;</return>
            }</block></then>
            <else>else
            <block>{
                <expr_stmt><expr><name><name>m</name><index>[<expr><name>y</name></expr>]</index></name> <operator>+=</operator> <name><name>m</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>k</name> <operator>-=</operator> <name><name>m</name><index>[<expr><name>x</name></expr>]</index></name><operator>*</operator><operator>(</operator><name>y</name><operator>-</operator><name>x</name><operator>)</operator></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then></if></elseif>
        <elseif>else <if>if<condition>(<expr><name>k</name> <operator>&lt;</operator> <name><name>m</name><index>[<expr><name>x</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name>k</name> <operator>&gt;=</operator> <name><name>m</name><index>[<expr><name>a</name></expr>]</index></name></expr>)</condition><then>
        <block>{
            <if>if<condition>(<expr><name>k</name> <operator>&lt;=</operator> <name><name>m</name><index>[<expr><name>a</name></expr>]</index></name><operator>*</operator><operator>(</operator><name>a</name><operator>-</operator><name>b</name><operator>)</operator></expr>)</condition><then>
            <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><name>k</name><operator>/</operator><name><name>m</name><index>[<expr><name>a</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>a</name> <operator>-</operator> <name>x</name> <operator>-</operator> <name>cnt</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
                <return>return <expr><literal type="number">0</literal></expr>;</return>
            }</block></then>
            <else>else
            <block>{
                <expr_stmt><expr><name><name>m</name><index>[<expr><name>b</name></expr>]</index></name> <operator>+=</operator> <name><name>m</name><index>[<expr><name>a</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>k</name> <operator>-=</operator> <name><name>m</name><index>[<expr><name>a</name></expr>]</index></name><operator>*</operator><operator>(</operator><name>a</name><operator>-</operator><name>b</name><operator>)</operator></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then></if></elseif>
        <else>else
        <block>{
            <if>if<condition>(<expr><name><name>m</name><index>[<expr><name>x</name></expr>]</index></name> <operator>&gt;</operator> <name><name>m</name><index>[<expr><name>a</name></expr>]</index></name></expr>)</condition><then>
            <block>{
                <if>if<condition>(<expr><name>k</name> <operator>&lt;=</operator> <name><name>m</name><index>[<expr><name>a</name></expr>]</index></name><operator>*</operator><operator>(</operator><name>a</name><operator>-</operator><name>b</name><operator>)</operator></expr>)</condition><then>
                <block>{
                    <decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><name>k</name><operator>/</operator><name><name>m</name><index>[<expr><name>a</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>a</name> <operator>-</operator> <name>x</name> <operator>-</operator> <name>cnt</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
                    <return>return <expr><literal type="number">0</literal></expr>;</return>
                }</block></then>
                <else>else
                <block>{
                    <expr_stmt><expr><name><name>m</name><index>[<expr><name>b</name></expr>]</index></name> <operator>+=</operator> <name><name>m</name><index>[<expr><name>a</name></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>k</name> <operator>-=</operator> <name><name>m</name><index>[<expr><name>a</name></expr>]</index></name><operator>*</operator><operator>(</operator><name>a</name><operator>-</operator><name>b</name><operator>)</operator></expr>;</expr_stmt>
                }</block></else></if>
            }</block></then>
            <else>else
            <block>{
                <if>if<condition>(<expr><name>k</name> <operator>&lt;=</operator> <name><name>m</name><index>[<expr><name>x</name></expr>]</index></name><operator>*</operator><operator>(</operator><name>y</name><operator>-</operator><name>x</name><operator>)</operator></expr>)</condition><then>
                <block>{
                    <decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><name>k</name><operator>/</operator><name><name>m</name><index>[<expr><name>x</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>a</name> <operator>-</operator> <name>x</name> <operator>-</operator> <name>cnt</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
                    <return>return <expr><literal type="number">0</literal></expr>;</return>
                }</block></then>
                <else>else
                <block>{
                    <expr_stmt><expr><name><name>m</name><index>[<expr><name>y</name></expr>]</index></name> <operator>+=</operator> <name><name>m</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>k</name> <operator>-=</operator> <name><name>m</name><index>[<expr><name>x</name></expr>]</index></name><operator>*</operator><operator>(</operator><name>y</name><operator>-</operator><name>x</name><operator>)</operator></expr>;</expr_stmt>
                }</block></else></if>
            }</block></else></if>
        }</block></else></if>
    }</block></while>

    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>*</operator><call><name><name>s</name><operator>.</operator><name>rbegin</name></name><argument_list>()</argument_list></call> <operator>-</operator> <operator>*</operator><call><name><name>s</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
}</block></function></unit>
