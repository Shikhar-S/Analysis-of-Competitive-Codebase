<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28934384_62491444.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdlib&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctime&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fstream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iomanip&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sstream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_map&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ull</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<typedef>typedef <type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>

<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>T</name></type> <name>sqr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T</name><modifier>&amp;</modifier></type> <name>x</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name>x</name> <operator>*</operator> <name>x</name></expr>;</return> }</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>void</name></type> <name>updMin</name><parameter_list>(<parameter><decl><type><name>T</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T</name><modifier>&amp;</modifier></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <if>if <condition>(<expr><name>b</name> <operator>&lt;</operator> <name>a</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt></block></then></if> }</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>void</name></type> <name>updMax</name><parameter_list>(<parameter><decl><type><name>T</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T</name><modifier>&amp;</modifier></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <if>if <condition>(<expr><name>b</name> <operator>&gt;</operator> <name>a</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt></block></then></if> }</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>M</name> <init>= <expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>M2</name> <init>= <expr><literal type="number">1000000009</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name> <init>= <expr><literal type="number">200005</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name><name>used</name><index>[<expr><name>maxn</name></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>mas</name><index>[<expr><name>maxn</name></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>cost</name><index>[<expr><name>maxn</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>res</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>a</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<function><type><name>ll</name></type> <name>f</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl></parameter>)</parameter_list> <block>{
  <if>if <condition>(<expr><name>v</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>v</name> <operator>==</operator> <name>p</name></expr>)</condition><then> <block>{
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  }</block></then></if>

  <if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
    <return>return <expr><literal type="number">1000000000000000000L</literal></expr>;</return>
  }</block></then></if>

  <if>if <condition>(<expr><name><name>used</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>pc</name></expr>]</index></name></expr>)</condition><then> <block>{
    <return>return <expr><name><name>mas</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>pc</name></expr>]</index></name></expr>;</return>
  }</block></then></if>

  <expr_stmt><expr><name><name>used</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>pc</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mas</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>pc</name></expr>]</index></name> <operator>=</operator> <name><name>cost</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>c1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>c2</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>c1</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>c1</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> 
  }</block></then> <elseif>else <if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>c2</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>c2</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> 
  }</block></then></if></elseif></if>

  <if>if <condition>(<expr><name>pc</name> <operator>==</operator> <name>c1</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>c1</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  }</block></then> <elseif>else <if>if <condition>(<expr><name>pc</name> <operator>==</operator> <name>c2</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>c2</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  }</block></then></if></elseif></if>

  <decl_stmt><decl><type><name>int</name></type> <name>u1</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>u2</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>a</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
    <if>if <condition>(<expr><name><name>a</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>p</name></expr>)</condition><then> <block>{
      <continue>continue;</continue>
    }</block></then></if>

    <if>if <condition>(<expr><name>u1</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>u1</name> <operator>=</operator> <name><name>a</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></then> <elseif>else <if>if <condition>(<expr><name>u2</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>u2</name> <operator>=</operator> <name><name>a</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></then></if></elseif> <else>else <block>{
      <return>return  <expr><name><name>mas</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>pc</name></expr>]</index></name> <operator>=</operator> <literal type="number">1000000000000000000L</literal></expr>;</return>
    }</block></else></if>
  }</block></for>

  <decl_stmt><decl><type><name>ll</name></type> <name>t1</name> <init>= <expr><call><name>f</name><argument_list>(<argument><expr><name>u1</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>f</name><argument_list>(<argument><expr><name>u2</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ll</name></type> <name>t2</name> <init>= <expr><call><name>f</name><argument_list>(<argument><expr><name>u1</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>f</name><argument_list>(<argument><expr><name>u2</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <return>return <expr><name><name>mas</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>pc</name></expr>]</index></name> <operator>=</operator> <name><name>mas</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>pc</name></expr>]</index></name> <operator>+</operator> <call><name>min</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>ans</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl></parameter>)</parameter_list> <block>{
  <if>if <condition>(<expr><name>v</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>v</name> <operator>==</operator> <name>p</name></expr>)</condition><then> <block>{
    <return>return;</return>
  }</block></then></if>

  <expr_stmt><expr><name><name>res</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>c1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>c2</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>c1</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>c1</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> 
  }</block></then> <elseif>else <if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>c2</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>c2</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> 
  }</block></then></if></elseif></if>

  <if>if <condition>(<expr><name>pc</name> <operator>==</operator> <name>c1</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>c1</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  }</block></then> <elseif>else <if>if <condition>(<expr><name>pc</name> <operator>==</operator> <name>c2</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>c2</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  }</block></then></if></elseif></if>

  <decl_stmt><decl><type><name>int</name></type> <name>u1</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>u2</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>a</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
    <if>if <condition>(<expr><name><name>a</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>p</name></expr>)</condition><then> <block>{
      <continue>continue;</continue>
    }</block></then></if>

    <if>if <condition>(<expr><name>u1</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>u1</name> <operator>=</operator> <name><name>a</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></then> <elseif>else <if>if <condition>(<expr><name>u2</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>u2</name> <operator>=</operator> <name><name>a</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></then></if></elseif></if> 
  }</block></for>

  <decl_stmt><decl><type><name>ll</name></type> <name>t1</name> <init>= <expr><call><name>f</name><argument_list>(<argument><expr><name>u1</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>f</name><argument_list>(<argument><expr><name>u2</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ll</name></type> <name>t2</name> <init>= <expr><call><name>f</name><argument_list>(<argument><expr><name>u1</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>f</name><argument_list>(<argument><expr><name>u2</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>t1</name> <operator>&lt;</operator> <name>t2</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>ans</name><argument_list>(<argument><expr><name>u1</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ans</name><argument_list>(<argument><expr><name>u2</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then> <else>else <block>{
    <expr_stmt><expr><call><name>ans</name><argument_list>(<argument><expr><name>u1</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ans</name><argument_list>(<argument><expr><name>u2</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></else></if>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{

  <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
      <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cost</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>c</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
  }</block></for>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt> 
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>x</name><operator>--</operator></expr><operator>,</operator> <expr><name>y</name><operator>--</operator></expr>;</expr_stmt> 
    <expr_stmt><expr><name><name>a</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>a</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>

  <decl_stmt><decl><type><name>int</name></type> <name>mem</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
    <if>if <condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>mem</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
    }</block></then></if>
  }</block></for>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
    <if>if <condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>
  }</block></for>

  <decl_stmt><decl><type><name>ll</name></type> <name>anss</name> <init>= <expr><literal type="number">1000000000000000000L</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>memc</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>t</name> <init>= <expr><call><name>f</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <if>if <condition>(<expr><name>t</name> <operator>&lt;</operator> <name>anss</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>anss</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>memc</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
    }</block></then></if>
  }</block></for>

  <if>if <condition>(<expr><name>anss</name> <operator>&gt;</operator> <literal type="number">100000000000000000L</literal></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  }</block></then></if>

  <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>anss</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt> 
  <expr_stmt><expr><call><name>ans</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><name>memc</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>res</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt>
  }</block></for>
  <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
