<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28935233_62476617.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;int,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pic</name></cpp:macro> <cpp:value>pair&lt;int,char&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pci</name></cpp:macro> <cpp:value>pair&lt;char,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pll</name></cpp:macro> <cpp:value>pair&lt;ll,ll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>plc</name></cpp:macro> <cpp:value>pair&lt;ll,char&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pcl</name></cpp:macro> <cpp:value>pair&lt;char,ll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vi</name></cpp:macro> <cpp:value>vector&lt;int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vl</name></cpp:macro> <cpp:value>vector&lt;ll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vii</name></cpp:macro> <cpp:value>vector&lt;pii&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vll</name></cpp:macro> <cpp:value>vector&lt;pll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vic</name></cpp:macro> <cpp:value>vector&lt;pic&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vci</name></cpp:macro> <cpp:value>vector&lt;pci&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc</name></cpp:macro> <cpp:value>vector&lt;plc&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vcl</name></cpp:macro> <cpp:value>vector&lt;pcl&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>'\n'</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>MOD</name><init>=<expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>INF</name><init>=<expr><literal type="number">1e9</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>MAXN</name><init>=<expr><literal type="number">1e5</literal><operator>+</operator><literal type="number">6</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>MAXM</name><init>=<expr><literal type="number">1e5</literal><operator>+</operator><literal type="number">6</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>minel</name><init>=<expr><literal type="number">1e15</literal></expr></init></decl>,<decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name>maxel</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type><name>a</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>k</name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>x</name></decl>;</decl_stmt><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>x</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>a</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>minel</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>minel</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>maxel</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>maxel</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>a</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>a</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>ans</name><init>=<expr><name>maxel</name><operator>-</operator><name>minel</name></expr></init></decl>,<decl><type ref="prev"/><name>cntl</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>cntr</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>ans</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt><return>return <expr><literal type="number">0</literal></expr>;</return>}</block></then></if>
    <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>a</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name><name>a</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>cntl</name><operator>++</operator></expr>;</expr_stmt>
        }</block></then>
        <else>else <block type="pseudo"><break>break;</break></block></else></if>
    }</block></for>
    <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name><init>=<expr><call><name><name>a</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition><incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
    <block>{
        <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name><name>a</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>cntr</name><operator>++</operator></expr>;</expr_stmt>
        }</block></then>
        <else>else <block type="pseudo"><break>break;</break></block></else></if>
    }</block></for>
    <for>for<control>(<init>;</init><condition>;</condition><incr/>)</control>
    <block>{
        <if>if<condition>(<expr><name>cntl</name><operator>&gt;</operator><name>k</name><operator>&amp;&amp;</operator><name>cntr</name><operator>&gt;</operator><name>k</name></expr>)</condition><then><block type="pseudo"><break>break;</break></block></then></if>
        <if>if<condition>(<expr><name>cntl</name><operator>&lt;</operator><name>cntr</name></expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name>ll</name></type> <name>x</name><init>=<expr><call><name>min</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>cntl</name></expr>]</index></name><operator>-</operator><name><name>a</name><index>[<expr><name>cntl</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name>k</name><operator>/</operator><name>cntl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>k</name><operator>-=</operator><name>x</name><operator>*</operator><name>cntl</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>a</name><index>[<expr><name>cntl</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+=</operator><name>x</name></expr>;</expr_stmt><expr_stmt><expr><name>ans</name><operator>-=</operator><name>x</name></expr>;</expr_stmt>
            <while>while<condition>(<expr><name>cntl</name><operator>&lt;</operator><name>n</name><operator>&amp;&amp;</operator><name><name>a</name><index>[<expr><name>cntl</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><name><name>a</name><index>[<expr><name>cntl</name></expr>]</index></name></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>cntl</name><operator>++</operator></expr>;</expr_stmt></block></while>
        }</block></then>
        <else>else
        <block>{
            <decl_stmt><decl><type><name>ll</name></type> <name>x</name><init>=<expr><call><name>min</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>n</name><operator>-</operator><name>cntr</name></expr>]</index></name><operator>-</operator><name><name>a</name><index>[<expr><name>n</name><operator>-</operator><name>cntr</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name>k</name><operator>/</operator><name>cntr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>k</name><operator>-=</operator><name>cntr</name><operator>*</operator><name>x</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>a</name><index>[<expr><name>n</name><operator>-</operator><name>cntr</name></expr>]</index></name><operator>-=</operator><name>x</name></expr>;</expr_stmt><expr_stmt><expr><name>ans</name><operator>-=</operator><name>x</name></expr>;</expr_stmt>
            <while>while<condition>(<expr><name>n</name><operator>-</operator><name>cntr</name><operator>-</operator><literal type="number">1</literal><operator>&gt;=</operator><literal type="number">0</literal><operator>&amp;&amp;</operator><name><name>a</name><index>[<expr><name>n</name><operator>-</operator><name>cntr</name></expr>]</index></name><operator>==</operator><name><name>a</name><index>[<expr><name>n</name><operator>-</operator><name>cntr</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>cntr</name><operator>++</operator></expr>;</expr_stmt></block></while>
        }</block></else></if>
        <if>if<condition>(<expr><name>ans</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><break>break;</break></block></then></if>
    }</block></for>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
