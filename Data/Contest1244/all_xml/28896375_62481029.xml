<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28896375_62481029.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ls</name></cpp:macro> <cpp:value>rt&lt;&lt;1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rs</name></cpp:macro> <cpp:value>rt&lt;&lt;1|1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lson</name></cpp:macro> <cpp:value>rt&lt;&lt;1,l,M</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rson</name></cpp:macro> <cpp:value>rt&lt;&lt;1|1,M+1,r</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PI</name></cpp:macro> <cpp:value>acos(-1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MM</name></cpp:macro> <cpp:value>int M=(l+r)&gt;&gt;1;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fu</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>r</name></type></parameter>,<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=r;i&lt;=t;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fd</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>r</name></type></parameter>,<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=r;i&gt;=t;i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOS</name></cpp:macro> <cpp:value>ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>'\n'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lcm</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(a*b)/__gcd(a,b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Case</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>ans</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout&lt;&lt;"Case "&lt;&lt;i&lt;&lt;": "&lt;&lt;ans&lt;&lt;endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cp</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>ans</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>printf("%.if",ans);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cpp</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>ans</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout&lt;&lt;setprecision(i)&lt;&lt;fixed&lt;&lt;ans&lt;&lt;endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ppb</name></cpp:macro> <cpp:value>pop_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ppf</name></cpp:macro> <cpp:value>pop_front</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pf</name></cpp:macro> <cpp:value>push_front</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pq</name></cpp:macro> <cpp:value>priority_queue</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lowbit</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x)&amp;(-x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>V</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>V.begin(),V.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ms</name></cpp:macro> <cpp:value>multiset</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x+mo_num)%mo_num)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vc</name></cpp:macro> <cpp:value>vector</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vct</name></cpp:macro> <cpp:value>vector&lt;int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fa</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>V</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(auto i:V)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>out</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout&lt;&lt;(i)&lt;&lt;endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fun</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>fu(i,1,n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fut</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>fu(i,1,t)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fum</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>fu(i,1,m)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ld</name></cpp:macro> <cpp:value>long double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>umap</name></cpp:macro> <cpp:value>unordered_map</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P</name></cpp:macro> <cpp:value>pair&lt;int,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET</name></cpp:macro> <cpp:value>set&lt;int&gt;</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>INF</name><init>=<expr><name>LLONG_MAX</name><operator>-</operator><literal type="number">1e10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name><init>=<expr><literal type="number">1e6</literal><operator>+</operator><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mo_num</name><init>=<expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name><name>a</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>b</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name>ans</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>P</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name>X</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>,<decl><type ref="prev"/><name>fm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>,<decl><type ref="prev"/><name>d</name></decl>,<decl><type ref="prev"/><name>p</name></decl>;</decl_stmt>
<function><type><name>bool</name></type> <name>can</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>z</name></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><operator>(</operator><name>p</name><operator>-</operator><name>n</name><operator>*</operator><name>d</name><operator>+</operator><name>d</name><operator>*</operator><name>z</name><operator>)</operator><operator>%</operator><name>fm</name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>w</name><operator>*</operator><name>n</name><operator>-</operator><name>p</name><operator>-</operator><name>z</name><operator>*</operator><name>w</name><operator>)</operator><operator>%</operator><name>fm</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
        <expr_stmt><expr><name>x</name><operator>=</operator><operator>(</operator><name>p</name><operator>-</operator><name>n</name><operator>*</operator><name>d</name><operator>+</operator><name>d</name><operator>*</operator><name>z</name><operator>)</operator><operator>/</operator><name>fm</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>y</name><operator>=</operator><operator>(</operator><name>w</name><operator>*</operator><name>n</name><operator>-</operator><name>p</name><operator>-</operator><name>z</name><operator>*</operator><name>w</name><operator>)</operator><operator>/</operator><name>fm</name></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>x</name><operator>+</operator><name>y</name><operator>+</operator><name>z</name><operator>==</operator><name>n</name> <operator>&amp;&amp;</operator> <name>x</name><operator>&gt;=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>y</name><operator>&gt;=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>x</name><operator>*</operator><name>w</name><operator>+</operator><name>y</name><operator>*</operator><name>d</name><operator>)</operator><operator>==</operator><name>p</name></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
    }</block></then></if>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
<function><type><name>int32_t</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>IOS</name></type>
    <name>cin</name>&gt;&gt;<name>n</name>&gt;&gt;<name>p</name>&gt;&gt;<name>w</name>&gt;&gt;<name>d</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>zuo</name><init>=<expr><name>n</name><operator>-</operator><name>p</name><operator>/</operator><name>d</name></expr></init></decl>,<decl><type ref="prev"/><name>you</name><init>=<expr><name>n</name><operator>-</operator><name>p</name><operator>/</operator><name>w</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>fm</name><operator>=</operator><name>w</name><operator>-</operator><name>d</name></expr>;</expr_stmt>
<comment type="line">//    int tox=(p-n*d)%fm,toy=(w*n-p)%fm;</comment>
    <macro><name>fu</name><argument_list>(<argument>z</argument>,<argument>max(zuo,(int)<literal type="number">0</literal>)</argument>,<argument>min(you,n)</argument>)</argument_list></macro>
    <block>{
        <if>if<condition>(<expr><name><name>X</name><index>[<expr><block>{<expr><operator>(</operator><name>d</name><operator>*</operator><name>z</name><operator>)</operator><operator>%</operator><name>fm</name></expr>,<expr><operator>(</operator><name>w</name><operator>*</operator><name>z</name><operator>)</operator><operator>%</operator><name>fm</name></expr>}</block></expr>]</index></name></expr>)</condition><then><block>{
            <macro><name>out</name><argument_list>(<argument>-<literal type="number">1</literal></argument>)</argument_list></macro>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        }</block></then><else>else<block>{
            <expr_stmt><expr><name><name>X</name><index>[<expr><block>{<expr><operator>(</operator><name>d</name><operator>*</operator><name>z</name><operator>)</operator><operator>%</operator><name>fm</name></expr>,<expr><operator>(</operator><name>w</name><operator>*</operator><name>z</name><operator>)</operator><operator>%</operator><name>fm</name></expr>}</block></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <if>if<condition>(<expr><call><name>can</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>x</name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name>y</name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name>z</name></expr>;</expr_stmt>
                <return>return <expr><literal type="number">0</literal></expr>;</return>
            }</block></then></if>
        }</block></else></if>
    }</block>
    <macro><name>out</name><argument_list>(<argument>-<literal type="number">1</literal></argument>)</argument_list></macro>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
