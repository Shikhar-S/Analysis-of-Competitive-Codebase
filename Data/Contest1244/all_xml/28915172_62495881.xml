<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28915172_62495881.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOS</name></cpp:macro> <cpp:value>ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>"\n"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EPS</name></cpp:macro> <cpp:value>0.00000000000001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ld</name></cpp:macro> <cpp:value>long double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inf</name></cpp:macro> <cpp:value>1000000000000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N</name></cpp:macro> <cpp:value>100005</cpp:value></cpp:define>


<function><type><name>int32_t</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><name>IOS</name></expr>;</expr_stmt>
    <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ONLINE_JUDGE</name></cpp:ifndef>
    <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"int.txt"</literal></expr></argument>,<argument><expr><literal type="string">"r"</literal></expr></argument>,<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"out.txt"</literal></expr></argument>,<argument><expr><literal type="string">"w"</literal></expr></argument>,<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>m</name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
    	<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>;</decl_stmt>
    	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name></expr>;</expr_stmt>
    	<expr_stmt><expr><name><name>m</name><index>[<expr><name>a</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
    }</block></for>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>v</name></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>auto</name><operator>&amp;</operator> <name>it</name> <operator>:</operator> <name>m</name></expr></init>)</control>
    <block>{
    	<expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name><name>it</name><operator>.</operator><name>first</name></name></expr>,<expr><name><name>it</name><operator>.</operator><name>second</name></name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <if>if<condition>(<expr><call><name><name>v</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
    <block>{
    	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    	<return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>
    <decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call>(<name>int</name>)<argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>k</name> <operator>and</operator> <name>l</name> <operator>&lt;</operator> <name>r</name></expr>)</condition>
    <block>{
    	<decl_stmt><decl><type><name>int</name></type> <name>m1</name> <init>= <expr><name><name>v</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>second</name></expr></init></decl>;</decl_stmt>
    	<decl_stmt><decl><type><name>int</name></type> <name>m2</name> <init>= <expr><name><name>v</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><name>second</name></expr></init></decl>;</decl_stmt>
    	<if>if<condition>(<expr><name>m2</name> <operator>&lt;</operator> <name>m1</name></expr>)</condition><then>
    	<block>{
    		<decl_stmt><decl><type><name>int</name></type> <name>mvs</name> <init>= <expr><name><name>v</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>-</operator> <name><name>v</name><index>[<expr><name>r</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>first</name></expr></init></decl>;</decl_stmt>
    		<if>if<condition>(<expr><name>mvs</name> <operator>*</operator> <name><name>v</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><name>second</name> <operator>&lt;=</operator> <name>k</name></expr>)</condition><then>
    		<block>{
    			<expr_stmt><expr><name>k</name> <operator>-=</operator> <name>mvs</name> <operator>*</operator> <name><name>v</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><name>second</name></expr>;</expr_stmt>
    			<expr_stmt><expr><name><name>v</name><index>[<expr><name>r</name> <operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>second</name> <operator>+=</operator> <name><name>v</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><name>second</name></expr>;</expr_stmt>
    			<expr_stmt><expr><name>r</name><operator>--</operator></expr>;</expr_stmt>
    		}</block></then>
    		<else>else
    		<block>{
    			<decl_stmt><decl><type><name>int</name></type> <name>z</name> <init>= <expr><name>k</name> <operator>/</operator> <name><name>v</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><name>second</name></expr></init></decl>;</decl_stmt>
    			<expr_stmt><expr><name><name>v</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>-=</operator> <name>z</name></expr>;</expr_stmt>
    			<break>break;</break>
    		}</block></else></if>
    	}</block></then>
    	<else>else
    	<block>{
    		<decl_stmt><decl><type><name>int</name></type> <name>mvs</name> <init>= <expr><name><name>v</name><index>[<expr><name>l</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>first</name> <operator>-</operator> <name><name>v</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>first</name></expr></init></decl>;</decl_stmt>
    		<if>if<condition>(<expr><name>mvs</name> <operator>*</operator> <name><name>v</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>second</name> <operator>&lt;=</operator> <name>k</name></expr>)</condition><then>
    		<block>{
    			<expr_stmt><expr><name>k</name> <operator>-=</operator> <name>mvs</name> <operator>*</operator> <name><name>v</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>second</name></expr>;</expr_stmt>
    			<expr_stmt><expr><name><name>v</name><index>[<expr><name>l</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>second</name> <operator>+=</operator> <name><name>v</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>second</name></expr>;</expr_stmt>
    			<expr_stmt><expr><name>l</name><operator>++</operator></expr>;</expr_stmt>
    		}</block></then>
    		<else>else
    		<block>{
    			<decl_stmt><decl><type><name>int</name></type> <name>z</name> <init>= <expr><name>k</name> <operator>/</operator> <name><name>v</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>second</name></expr></init></decl>;</decl_stmt>
    			<expr_stmt><expr><name><name>v</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>+=</operator> <name>z</name></expr>;</expr_stmt>
    			<break>break;</break>
    		}</block></else></if>
    	}</block></else></if>
    }</block></while>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>v</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>-</operator> <name><name>v</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>first</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
 
 </unit>
