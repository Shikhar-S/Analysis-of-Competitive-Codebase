<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28923707_62486753.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<using>using <name>ll</name> <init>= <type><name>long</name> <name>long</name></type></init>;</using>
<using>using <name>pii</name> <init>= <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type></init>;</using>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list> <block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LOCAL</name></cpp:ifdef>
  <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"in.txt"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>ll</name></type> <name>k</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>c</name></decl>;</decl_stmt>
  <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>x</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>c</name><index>[<expr><name>x</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
  }</block></for>

  <decl_stmt><decl><type><name><name>deque</name><argument_list type="generic">&lt;<argument><expr><name>pii</name></expr></argument>&gt;</argument_list></name></type> <name>d</name></decl>;</decl_stmt>
  <for>for<control>(<init><decl><type><name>pii</name></type> <name>it</name> <range>: <expr><name>c</name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>

  <while>while<condition>(<expr><call><name><name>d</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{
    <if>if<condition>(<expr><call><name><name>d</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call><operator>.</operator><name>second</name> <operator>&lt;</operator> <call><name><name>d</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>second</name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>pii</name></type> <name>t</name> <init>= <expr><call><name><name>d</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>pop_front</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>ll</name></type> <name>dist</name> <init>= <expr><literal type="number">1LL</literal><operator>*</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>first</name></name> <operator>-</operator> <call><name><name>d</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call><operator>.</operator><name>first</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>ll</name></type> <name>mv</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name>k</name><operator>/</operator><name><name>t</name><operator>.</operator><name>second</name></name></expr></argument>, <argument><expr><name>dist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if<condition>(<expr><name>mv</name> <operator>!=</operator> <name>dist</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>push_front</name></name><argument_list>(<argument><expr><block>{<expr><name><name>t</name><operator>.</operator><name>first</name></name><operator>+</operator><name>mv</name></expr>, <expr><name><name>t</name><operator>.</operator><name>second</name></name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then> <else>else <block>{
        <expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call><operator>.</operator><name>second</name> <operator>+=</operator> <name><name>t</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt>
      }</block></else></if>
      <expr_stmt><expr><name>k</name> <operator>-=</operator> <name>mv</name> <operator>*</operator> <name><name>t</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt>
      <if>if<condition>(<expr><operator>!</operator><name>mv</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
    }</block></then>
    <else>else <block>{
      <decl_stmt><decl><type><name>pii</name></type> <name>t</name> <init>= <expr><call><name><name>d</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>ll</name></type> <name>dist</name> <init>= <expr><literal type="number">1LL</literal><operator>*</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>first</name></name> <operator>-</operator> <call><name><name>d</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>first</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>ll</name></type> <name>mv</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name>k</name><operator>/</operator><name><name>t</name><operator>.</operator><name>second</name></name></expr></argument>, <argument><expr><name>dist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if<condition>(<expr><name>mv</name> <operator>!=</operator> <name>dist</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name><name>t</name><operator>.</operator><name>first</name></name><operator>-</operator><name>mv</name></expr>, <expr><name><name>t</name><operator>.</operator><name>second</name></name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then> <else>else <block>{
        <expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>second</name> <operator>+=</operator> <name><name>t</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt>
      }</block></else></if>
      <expr_stmt><expr><name>k</name> <operator>-=</operator> <name>mv</name> <operator>*</operator> <name><name>t</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt>
      <if>if<condition>(<expr><operator>!</operator><name>mv</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
    }</block></else></if>

  }</block></while>

  <comment type="line">// for(pii it : d) cout &lt;&lt; it.first &lt;&lt; ' ' &lt;&lt; it.second &lt;&lt; endl;</comment>
  <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name><name>d</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>first</name> <operator>-</operator> <call><name><name>d</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call><operator>.</operator><name>first</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
