<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28935202_62500959.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <name>i64</name> <init>= <type><name>long</name> <name>long</name></type></init>;</using>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>i64</name></type> <name>k</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%lld"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>i64</name></expr></argument>&gt;</argument_list></name></name></type> <name>a</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>e</name> <operator>:</operator> <name>a</name></expr></init>)</control> <block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>sort</name></name><argument_list>(<argument><expr><call><name><name>a</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>a</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>i64</name></type> <name>l</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>r</name> <init>= <expr><literal type="number">1000000100</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>r</name> <operator>-</operator> <name>l</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>i64</name></type> <name>d</name> <init>= <expr><operator>(</operator><name>l</name> <operator>+</operator> <name>r</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>, <decl><type ref="prev"/><name>rem</name> <init>= <expr><name>k</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>deque</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>i64</name></expr></argument>, <argument><expr><name>i64</name></expr></argument>&gt;</argument_list></name></name></expr></argument>&gt;</argument_list></name></name></type> <name>v</name></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>auto</name></type> <name>e</name> <range>: <expr><name>a</name></expr></range></decl></init>)</control> <block>{
            <if>if <condition>(<expr><call><name><name>v</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>v</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>first</name> <operator>!=</operator> <name>e</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
            <else>else <block type="pseudo"><expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>second</name><operator>++</operator></expr>;</expr_stmt></block></else></if>
        }</block></for>

        <while>while <condition>(<expr><name>rem</name> <operator>&amp;&amp;</operator> <call><name><name>v</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><call><name><name>v</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>v</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call><operator>.</operator><name>second</name> <operator>&lt;=</operator> <call><name><name>v</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>second</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>i64</name></type> <name>cnt</name> <init>= <expr><call><name><name>v</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call><operator>.</operator><name>second</name></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>rem</name> <operator>&lt;</operator> <name>cnt</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
                <decl_stmt><decl><type><name>i64</name></type> <name>md</name> <init>= <expr><name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>first</name> <operator>-</operator> <name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>first</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>i64</name></type> <name>cost</name> <init>= <expr><call><name><name>std</name><operator>::</operator><name>min</name></name><argument_list>(<argument><expr><name>md</name> <operator>*</operator> <name>cnt</name></expr></argument>, <argument><expr><name>rem</name> <operator>/</operator> <name>cnt</name> <operator>*</operator> <name>cnt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>cost</name> <operator>==</operator> <name>md</name> <operator>*</operator> <name>cnt</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>second</name> <operator>+=</operator> <name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>second</name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>pop_front</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block type="pseudo"><expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>first</name> <operator>+=</operator> <name>rem</name> <operator>/</operator> <name>cnt</name></expr>;</expr_stmt></block></else></if>
                <expr_stmt><expr><name>rem</name> <operator>-=</operator> <name>cost</name></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <decl_stmt><decl><type><name>i64</name></type> <name>cnt</name> <init>= <expr><call><name><name>v</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>second</name></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>rem</name> <operator>&lt;</operator> <name>cnt</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
                <decl_stmt><decl><type><name>i64</name></type> <name>md</name> <init>= <expr><name><name>v</name><index>[<expr><name>m</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>first</name> <operator>-</operator> <name><name>v</name><index>[<expr><name>m</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>first</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>i64</name></type> <name>cost</name> <init>= <expr><call><name><name>std</name><operator>::</operator><name>min</name></name><argument_list>(<argument><expr><name>md</name> <operator>*</operator> <name>cnt</name></expr></argument>, <argument><expr><name>rem</name> <operator>/</operator> <name>cnt</name> <operator>*</operator> <name>cnt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>cost</name> <operator>==</operator> <name>md</name> <operator>*</operator> <name>cnt</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name><name>v</name><index>[<expr><name>m</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>second</name> <operator>+=</operator> <name><name>v</name><index>[<expr><name>m</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>second</name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block type="pseudo"><expr_stmt><expr><name><name>v</name><index>[<expr><name>m</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>first</name> <operator>-=</operator> <name>rem</name> <operator>/</operator> <name>cnt</name></expr>;</expr_stmt></block></else></if>
                <expr_stmt><expr><name>rem</name> <operator>-=</operator> <name>cost</name></expr>;</expr_stmt>
            }</block></else></if>
        }</block></while>

        <if>if <condition>(<expr><call><name><name>v</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>first</name> <operator>-</operator> <call><name><name>v</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call><operator>.</operator><name>first</name> <operator>&lt;=</operator> <name>d</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>r</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt></block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><name>l</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt></block></else></if>
    }</block></while>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
