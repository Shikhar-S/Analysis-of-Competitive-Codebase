<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28932076_62493399.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>ll</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>loop</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = 0; i &lt; (int)n; ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>loop1</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = 1; i &lt;= (int)n; ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sec</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pi</name></cpp:macro> <cpp:value>pair &lt;int, int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>len</name></cpp:macro> <cpp:value>length()</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">1e5</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>g</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>cost</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name>ans</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>cnt_ans</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>pi</name></type> <name>last</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>f</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name><name>last</name><operator>.</operator><name>fi</name></name> <operator>+</operator> <name><name>last</name><operator>.</operator><name>sec</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>+=</operator> <name><name>cost</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>v</name></expr>]</index></name></expr>;</expr_stmt></block></then>
        <else>else
            <block type="pseudo"><expr_stmt><expr><name><name>cost</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block></else></if>
        <expr_stmt><expr><name>last</name> <operator>=</operator> <block>{<expr><name><name>last</name><operator>.</operator><name>sec</name></name></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>;</expr_stmt>
    }</block></then>
    <elseif>else <if>if <condition>(<expr><name><name>last</name><operator>.</operator><name>fi</name></name> <operator>+</operator> <name><name>last</name><operator>.</operator><name>sec</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>+=</operator> <name><name>cost</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>v</name></expr>]</index></name></expr>;</expr_stmt></block></then>
        <else>else
            <block type="pseudo"><expr_stmt><expr><name><name>cost</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block></else></if>
        <expr_stmt><expr><name>last</name> <operator>=</operator> <block>{<expr><name><name>last</name><operator>.</operator><name>sec</name></name></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>;</expr_stmt>
    }</block></then></if></elseif>
    <else>else <block>{
        <if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>+=</operator> <name><name>cost</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>v</name></expr>]</index></name></expr>;</expr_stmt></block></then>
        <else>else
            <block type="pseudo"><expr_stmt><expr><name><name>cost</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
        <expr_stmt><expr><name>last</name> <operator>=</operator> <block>{<expr><name><name>last</name><operator>.</operator><name>sec</name></name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>;</expr_stmt>
    }</block></else></if>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>u</name> <range>: <expr><name><name>g</name><index>[<expr><name>v</name></expr>]</index></name></expr></range></decl></init>)</control>
        <block type="pseudo"><if>if <condition>(<expr><name>u</name> <operator>!=</operator> <name>p</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name>cnt_ans</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></block></for>
}</block></function>

<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
    <macro><name>loop</name><argument_list>(<argument>i</argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro>
        <macro><name>loop1</name><argument_list>(<argument>j</argument>, <argument>n</argument>)</argument_list></macro>
            <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>cost</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
    <macro><name>loop</name><argument_list>(<argument>i</argument>, <argument>n - <literal type="number">1</literal></argument>)</argument_list></macro> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>u</name> <operator>&gt;&gt;</operator> <name>v</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>g</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>g</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>
    <decl_stmt><decl><type><name>int</name></type> <name>f</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <macro><name>loop1</name><argument_list>(<argument>v</argument>, <argument>n</argument>)</argument_list></macro> <block>{
        <if>if <condition>(<expr><name><name>g</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"-1"</literal></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>g</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>f</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt></block></then></if>
    }</block>
    <decl_stmt><decl><type><name>int</name></type> <name>ff</name> <init>= <expr><name><name>g</name><index>[<expr><name>f</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>fff</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name><name>g</name><index>[<expr><name>ff</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>f</name></expr> ?</condition><then> <expr><name><name>g</name><index>[<expr><name>ff</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><name><name>g</name><index>[<expr><name>ff</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
    <comment type="line">//cerr &lt;&lt; ff &lt;&lt; " " &lt;&lt; fff &lt;&lt; "\n";</comment>
    <decl_stmt><decl><type><name>int</name></type> <name><name>arr</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <macro><name>loop</name><argument_list>(<argument>i</argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro>
        <macro><name>loop</name><argument_list>(<argument>j</argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro> <block>{
            <if>if <condition>(<expr><name>j</name> <operator>==</operator> <name>i</name></expr>)</condition><then>
                <block type="pseudo"><continue>continue;</continue></block></then></if>
            <expr_stmt><expr><call><name>cnt_ans</name><argument_list>(<argument><expr><name>fff</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>, <block>{<expr_stmt><expr><name>i</name></expr><operator>,</operator> <expr><name>j</name></expr></expr_stmt>}</block></argument_list></call></expr></expr_stmt><operator>,</operator> <expr_stmt><expr><literal type="number">0</literal></expr></expr_stmt>)</block><empty_stmt>;</empty_stmt>
            <comment type="line">//cerr &lt;&lt; i &lt;&lt; " " &lt;&lt; j &lt;&lt; "\n";</comment>
            <expr_stmt><expr><name>ans</name> <operator>+=</operator> <name><name>cost</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>f</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>ans</name> <operator>+=</operator> <name><name>cost</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>ff</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>arr</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <name>ans</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>ans</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><operator>++</operator><name>c</name></expr>;</expr_stmt>
        }</block></function>
    <comment type="block">/*loop(i, 6)
        cerr &lt;&lt; arr[i] &lt;&lt; " ";
    cerr &lt;&lt; "\n";*/</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <macro><name>loop</name><argument_list>(<argument>i</argument>, <argument><literal type="number">6</literal></argument>)</argument_list></macro>
        <if>if<condition>(<expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name><name>arr</name><index>[<expr><name>m</name></expr>]</index></name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>m</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block></then></if>
    <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <macro><name>loop</name><argument_list>(<argument>i</argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro>
        <macro><name>loop</name><argument_list>(<argument>j</argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro> <block>{
            <if>if <condition>(<expr><name>j</name> <operator>==</operator> <name>i</name></expr>)</condition><then>
                <block type="pseudo"><continue>continue;</continue></block></then></if>
            <if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>m</name></expr>)</condition><then> <block>{
                <comment type="line">//cerr &lt;&lt; c &lt;&lt; " ";</comment>
                <expr_stmt><expr><call><name>cnt_ans</name><argument_list>(<argument><expr><name>fff</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>, <block>{<expr_stmt><expr><name>i</name></expr><operator>,</operator> <expr><name>j</name></expr></expr_stmt>}</block></argument_list></call></expr></expr_stmt><operator>,</operator> <expr_stmt><expr><literal type="number">1</literal></expr></expr_stmt>)</block><empty_stmt>;</empty_stmt></then></if>
                <expr_stmt><expr><name><name>cost</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>f</name></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>cost</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>ff</name></expr>]</index></name> <operator>=</operator> <name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            }</block>
            <expr_stmt><expr><operator>++</operator><name>c</name></expr>;</expr_stmt>
        }
    cout <expr_stmt><expr><operator>&lt;&lt;</operator> <name><name>arr</name><index>[<expr><name>m</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
    <macro><name>loop1</name><argument_list>(<argument>i</argument>, <argument>n</argument>)</argument_list></macro>
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>cost</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt>
}

signed <function><name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
