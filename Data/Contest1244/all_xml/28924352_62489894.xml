<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28924352_62489894.cpp"><comment type="block">/*
ID: Miminyte500
LANG: C++
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;deque&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;list&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></type> <name>v</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>long</name> <name>long</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>

    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>v</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>tst</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

    <for>for<control>(<init><decl><type><name>long</name> <name>long</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><name>tst</name><operator>+=</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>v</name><index>[<expr><name>n</name><operator>/</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <if>if<condition>(<expr><name>tst</name> <operator>&lt;=</operator> <name>k</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>totCost</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>moveCost</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>l</name></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>sa</name></decl>, <decl><type ref="prev"/><name>sb</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>l</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>r</name><operator>=</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

    <for>for<control>(<init><decl><type><name>long</name> <name>long</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><operator>(</operator><name>n</name><operator>+</operator><literal type="number">4</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
<comment type="line">//        while(v[l] == v[l+1]) l++;</comment>
<comment type="line">//        while(v[r] == v[r-1]) r--;</comment>
        <expr_stmt><expr><name>sa</name> <operator>=</operator> <name>l</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>sb</name> <operator>=</operator> <name>n</name><operator>-</operator><name>r</name></expr>;</expr_stmt>

        <expr_stmt><expr><name>moveCost</name> <operator>=</operator> <name>sa</name> <operator>*</operator> <operator>(</operator><name><name>v</name><index>[<expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>v</name><index>[<expr><name>l</name></expr>]</index></name><operator>)</operator> <operator>+</operator> <name>sb</name> <operator>*</operator> <operator>(</operator><name><name>v</name><index>[<expr><name>r</name></expr>]</index></name> <operator>-</operator> <name><name>v</name><index>[<expr><name>r</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

        <if>if<condition>(<expr><name>totCost</name> <operator>+</operator> <name>moveCost</name> <operator>&lt;=</operator> <name>k</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>l</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>r</name><operator>--</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>sa</name> <operator>=</operator> <name>l</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>sb</name> <operator>=</operator> <name>r</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>totCost</name> <operator>+=</operator> <name>moveCost</name></expr>;</expr_stmt>
            <continue>continue;</continue>
        }</block></then>
        <else>else <block>{
            <break>break;</break>
        }</block></else></if>
    }</block></for>

    <comment type="line">//cout &lt;&lt; sa &lt;&lt; ' ' &lt;&lt; sb;</comment>

    <if>if<condition>(<expr><name>sa</name> <operator>*</operator> <operator>(</operator><name><name>v</name><index>[<expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>v</name><index>[<expr><name>l</name></expr>]</index></name><operator>)</operator> <operator>&gt;</operator> <name>k</name> <operator>-</operator> <name>totCost</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>v</name><index>[<expr><name>r</name></expr>]</index></name> <operator>-</operator> <name><name>v</name><index>[<expr><name>l</name></expr>]</index></name><operator>)</operator> <operator>-</operator> <operator>(</operator><name>k</name> <operator>-</operator> <name>totCost</name><operator>)</operator><operator>/</operator><name>sa</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then>
    <else>else <block>{
        <expr_stmt><expr><name>totCost</name> <operator>+=</operator> <name>sa</name> <operator>*</operator> <operator>(</operator><name><name>v</name><index>[<expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>v</name><index>[<expr><name>l</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>l</name><operator>++</operator></expr>;</expr_stmt>

        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>v</name><index>[<expr><name>r</name></expr>]</index></name> <operator>-</operator> <name><name>v</name><index>[<expr><name>l</name></expr>]</index></name><operator>)</operator> <operator>-</operator> <operator>(</operator><name>k</name> <operator>-</operator> <name>totCost</name><operator>)</operator><operator>/</operator><name>sb</name></expr>;</expr_stmt>
    }</block></else></if>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

<comment type="block">/*
8 5
1 2 2 4 5 7 7 8
*/</comment>
</unit>
