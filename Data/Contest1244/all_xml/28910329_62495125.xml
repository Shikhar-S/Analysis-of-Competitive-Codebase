<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28910329_62495125.cpp"><cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><cpp:literal>"2,Ofast,inline"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>error</name> <cpp:literal>"-std=c++11"</cpp:literal></cpp:pragma>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P</name></cpp:macro> <cpp:value>pair&lt;int,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>const</specifier> <name>LL</name></type> <name>N</name><init>=<expr><literal type="number">1e5</literal><operator>+</operator><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>LL</name></type> <name>mod</name><init>=<expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>LL</name></type> <name>inf</name><init>=<expr><literal type="number">0x3f3f3f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>eps</name><init>=<expr><literal type="number">1e-9</literal></expr></init></decl>;</decl_stmt>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>tp</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>tp</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt><decl_stmt><decl><type><name>char</name></type> <name>c</name><init>=<expr><call><name>getchar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>f</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <for>for<control>(<init>;</init> <condition><expr><name><name>c</name><argument_list type="generic">&lt;<argument><expr><literal type="char">'0'</literal><operator>||</operator><name>c</name></expr></argument>&gt;</argument_list></name><literal type="char">'9'</literal></expr>;</condition> <incr><expr><name>f</name><operator>|=</operator><operator>(</operator><name>c</name><operator>==</operator><literal type="char">'-'</literal><operator>)</operator></expr><operator>,</operator><expr><name>c</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr></incr>)</control><block type="pseudo"><empty_stmt>;</empty_stmt></block></for>
    <for>for<control>(<init>;</init> <condition><expr><name>c</name><operator>&gt;=</operator><literal type="char">'0'</literal><operator>&amp;&amp;</operator><name>c</name><operator>&lt;=</operator><literal type="char">'9'</literal></expr>;</condition> <incr><expr><name>x</name><operator>=</operator><operator>(</operator><name>x</name><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator><operator>+</operator><operator>(</operator><name>x</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><name>c</name><operator>-</operator><literal type="char">'0'</literal></expr><operator>,</operator><expr><name>c</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr></incr>)</control><block type="pseudo"><empty_stmt>;</empty_stmt></block></for>
    <if>if<condition>(<expr><name>f</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>x</name><operator>=</operator><operator>-</operator><name>x</name></expr>;</expr_stmt></block></then></if>
}</block></function>
<decl_stmt><decl><type><name>LL</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>gcdd</name></decl>;</decl_stmt>
<function><type><name>LL</name></type> <name>exgcd</name><parameter_list>(<parameter><decl><type><name>LL</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>LL</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>LL</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>LL</name> <modifier>&amp;</modifier></type><name>y</name></decl></parameter>)</parameter_list> 
<block>{
    <decl_stmt><decl><type><name>LL</name></type> <name>ret</name></decl>;</decl_stmt>
    <if>if<condition>(<expr><operator>!</operator><name>b</name></expr>)</condition><then> <block>{<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt> <expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>}</block></then> 
    <else>else <block>{<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>exgcd</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name> <operator>%</operator> <name>b</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><decl_stmt><decl><type><name>LL</name></type> <name>tmp</name> <init>= <expr><name>x</name></expr></init></decl>;</decl_stmt><expr_stmt><expr><name>x</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt><expr_stmt><expr><name>y</name> <operator>=</operator> <name>tmp</name> <operator>-</operator> <operator>(</operator><name>a</name> <operator>/</operator> <name>b</name><operator>)</operator> <operator>*</operator> <name>y</name></expr>;</expr_stmt>}</block></else></if>
    <return>return <expr><name>ret</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>LL</name></type> <name>flaga</name> <init>= <expr><name>w</name> <operator>/</operator> <name>gcdd</name></expr></init></decl>, <decl><type ref="prev"/><name>flagb</name> <init>= <expr><name>d</name> <operator>/</operator> <name>gcdd</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>%</operator> <name>flagb</name> <operator>*</operator> <operator>(</operator><operator>(</operator><name>p</name> <operator>/</operator> <name>gcdd</name><operator>)</operator> <operator>%</operator> <name>flagb</name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>%</operator> <name>flagb</name> <operator>+</operator> <name>flagb</name><operator>)</operator> <operator>%</operator> <name>flagb</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><name>p</name> <operator>-</operator> <name>w</name> <operator>*</operator> <name>x</name><operator>)</operator> <operator>/</operator> <name>d</name></expr>;</expr_stmt>
	<if>if<condition>(<expr><name>n</name> <operator>&gt;=</operator> <name>x</name> <operator>+</operator> <name>y</name> <operator>&amp;&amp;</operator> <name>x</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>y</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><then><block>{ <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld %lld %lld\n"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>,  <argument><expr><name>n</name> <operator>-</operator> <name>x</name> <operator>-</operator> <name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></then></if>
	<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><name>y</name> <operator>%</operator> <name>flaga</name> <operator>+</operator> <name>flaga</name><operator>)</operator> <operator>%</operator> <name>flaga</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>p</name> <operator>-</operator> <name>d</name> <operator>*</operator> <name>y</name><operator>)</operator> <operator>/</operator> <name>w</name></expr>;</expr_stmt>
	<if>if<condition>(<expr><name>n</name> <operator>&gt;=</operator> <name>x</name> <operator>+</operator> <name>y</name> <operator>&amp;&amp;</operator> <name>x</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>y</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{ <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld %lld %lld\n"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>n</name> <operator>-</operator> <name>x</name> <operator>-</operator> <name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></then></if>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> 
<block>{
	<expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><call><name>read</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><call><name>read</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><call><name>read</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>gcdd</name> <operator>=</operator> <call><name>exgcd</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>p</name> <operator>%</operator> <name>gcdd</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal> <operator>*</operator> <call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-1\n"</literal></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
	<expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
