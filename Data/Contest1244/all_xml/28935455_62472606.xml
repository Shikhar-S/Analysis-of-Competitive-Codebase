<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28935455_62472606.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <comment type="line">//do this</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>cin</name><operator>&gt;&gt;</operator><name>t</name></expr>;</init><condition><expr><name>t</name><operator>&gt;</operator><literal type="number">0</literal></expr>;</condition><incr><expr><name>t</name><operator>--</operator></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>string</name></type> <name>str</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>str</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>mn</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>mx</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>str</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
            <if>if<condition>(<expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'1'</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>mx</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
                <if>if<condition>(<expr><name>mn</name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name>mn</name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></then></if>
            }</block></then></if>
        }</block></for>
        <decl_stmt><decl><type><name>int</name></type> <name>moves</name><init>= <expr><operator>(</operator><name>mx</name><operator>-</operator><name>mn</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>disl</name> <init>= <expr><name>mn</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>disr</name> <init>= <expr><name>n</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>mx</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>moves</name><operator>+=</operator><operator>(</operator><literal type="number">2</literal><operator>*</operator><call><name>max</name><argument_list>(<argument><expr><name>disl</name></expr></argument>,<argument><expr><name>disr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>mn</name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>n</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
        }</block></then>
        <else>else
        <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>moves</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></else></if>
    }</block></for>

}</block></function>

</unit>
