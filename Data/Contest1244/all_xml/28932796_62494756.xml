<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28932796_62494756.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N</name></cpp:macro> <cpp:value>100005</cpp:value></cpp:define>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>now</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name><name>A</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>k</name></decl>;</decl_stmt>
<struct>struct <name>node</name>
<block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>v</name></decl>, <decl><type ref="prev"/><name>p</name></decl>;</decl_stmt>
	<function type="operator"><type><name>bool</name></type> <name>operator <name>&lt;</name></name> <parameter_list>(<parameter><decl><type><name>node</name></type> <name>b</name></decl></parameter>)</parameter_list><specifier>const</specifier><block>{<return>return <expr><name>v</name> <operator>&lt;</operator> <name><name>b</name><operator>.</operator><name>v</name></name></expr>;</return>}</block></function>
</public>}</block>;</struct>
<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>node</name></expr></argument>&gt;</argument_list></name></type><name>s</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%I64d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>A</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>A</name> <operator>+</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>now</name> <operator>=</operator> <name><name>A</name><index>[<expr><name>n</name></expr>]</index></name> <operator>-</operator> <name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<expr_stmt><expr><name>m</name><operator>++</operator></expr>;</expr_stmt>
		<if>if <condition>(<expr><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>A</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><operator>(</operator><name>node</name><operator>)</operator><block>{<expr><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name></expr>, <expr><name>m</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>m</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
	<for>for <control>(<init>;</init> <condition><expr><call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>;</condition> <incr/>)</control>
	<block>{
		<decl_stmt><decl><type><name><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>node</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></name></type> <name>a</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>b</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>b</name><operator>--</operator></expr>;</expr_stmt>
		<if>if <condition>(<expr><name><name>a</name> <operator>-&gt;</operator> <name>p</name></name> <operator>&lt;=</operator> <name><name>b</name> <operator>-&gt;</operator> <name>p</name></name></expr>)</condition><then>
		<block>{
			<decl_stmt><decl><type><name>node</name></type> <name>x</name> <init>= <expr><operator>*</operator><name>a</name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>a</name><operator>++</operator></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>node</name></type> <name>y</name> <init>= <expr><operator>*</operator><name>a</name></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><call>(<name>ll</name>)<argument_list>(<argument><expr><name><name>y</name><operator>.</operator><name>v</name></name> <operator>-</operator> <name><name>x</name><operator>.</operator><name>v</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>x</name><operator>.</operator><name>p</name></name> <operator>&gt;=</operator> <name>k</name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name>now</name> <operator>-=</operator> <name>k</name> <operator>/</operator> <name><name>x</name><operator>.</operator><name>p</name></name></expr>;</expr_stmt>
				<break>break;</break>
			}</block></then></if>
			<expr_stmt><expr><name>now</name> <operator>-=</operator> <name><name>y</name><operator>.</operator><name>v</name></name> <operator>-</operator> <name><name>x</name><operator>.</operator><name>v</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>k</name> <operator>-=</operator> <call>(<name>ll</name>)<argument_list>(<argument><expr><name><name>y</name><operator>.</operator><name>v</name></name> <operator>-</operator> <name><name>x</name><operator>.</operator><name>v</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>x</name><operator>.</operator><name>p</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name><name>s</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>y</name><operator>.</operator><name>p</name></name> <operator>+=</operator> <name><name>x</name><operator>.</operator><name>p</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<else>else
		<block>{
			<decl_stmt><decl><type><name>node</name></type> <name>x</name> <init>= <expr><operator>*</operator><name>b</name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>b</name><operator>--</operator></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>node</name></type> <name>y</name> <init>= <expr><operator>*</operator><name>b</name></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><call>(<name>ll</name>)<argument_list>(<argument><expr><name><name>x</name><operator>.</operator><name>v</name></name> <operator>-</operator> <name><name>y</name><operator>.</operator><name>v</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>x</name><operator>.</operator><name>p</name></name> <operator>&gt;=</operator> <name>k</name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name>now</name> <operator>-=</operator> <name>k</name> <operator>/</operator> <name><name>x</name><operator>.</operator><name>p</name></name></expr>;</expr_stmt>
				<break>break;</break>
			}</block></then></if>
			<expr_stmt><expr><name>now</name> <operator>-=</operator> <name><name>x</name><operator>.</operator><name>v</name></name> <operator>-</operator> <name><name>y</name><operator>.</operator><name>v</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>k</name> <operator>-=</operator> <call>(<name>ll</name>)<argument_list>(<argument><expr><name><name>x</name><operator>.</operator><name>v</name></name> <operator>-</operator> <name><name>y</name><operator>.</operator><name>v</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>x</name><operator>.</operator><name>p</name></name></expr>;</expr_stmt> 
			<expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name><name>s</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>y</name><operator>.</operator><name>p</name></name> <operator>+=</operator> <name><name>x</name><operator>.</operator><name>p</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
	}</block></for>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
