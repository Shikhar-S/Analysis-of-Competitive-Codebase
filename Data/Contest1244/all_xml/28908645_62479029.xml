<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28908645_62479029.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro>        	<cpp:value>long long</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro>         <cpp:value>pair&lt;ll int,ll int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vi</name></cpp:macro>          <cpp:value>vector&lt;ll int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro>          <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro>          <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro>           <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name></cpp:macro>           <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>       <cpp:value>(ll int)x.size()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>for(ll int i=a;i&lt;b;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rrep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(ll int i=a;i&gt;=b;i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro>      <cpp:value>(a).begin(),(a).end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hell</name></cpp:macro>        <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lbnd</name></cpp:macro>        <cpp:value>lower_bound</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ubnd</name></cpp:macro>        <cpp:value>upper_bound</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bs</name></cpp:macro>          <cpp:value>binary_search</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tr</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>cont</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(auto i=cont.begin();i!=cont.end();i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ios</name></cpp:macro>        	<cpp:value>ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>trace</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>                 <cpp:value>cerr &lt;&lt; #x &lt;&lt; ": " &lt;&lt; x &lt;&lt; "\n";</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>trace1</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>                <cpp:value>cerr &lt;&lt; #x &lt;&lt; ": " &lt;&lt; x &lt;&lt; "\n";</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>trace2</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro>             <cpp:value>cerr &lt;&lt; #x &lt;&lt; ": " &lt;&lt; x &lt;&lt; " | " &lt;&lt; #y &lt;&lt; ": " &lt;&lt; y &lt;&lt; "\n";</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>trace3</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro>          <cpp:value>cerr &lt;&lt; #x &lt;&lt; ": " &lt;&lt; x &lt;&lt; " | " &lt;&lt; #y &lt;&lt; ": " &lt;&lt; y &lt;&lt; " | " &lt;&lt; #z &lt;&lt; ": " &lt;&lt; z &lt;&lt; "\n";</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>trace4</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro>       <cpp:value>cerr &lt;&lt; #a &lt;&lt; ": " &lt;&lt; a &lt;&lt; " | " &lt;&lt; #b &lt;&lt; ": " &lt;&lt; b &lt;&lt; " | " &lt;&lt; #c &lt;&lt; ": " &lt;&lt; c &lt;&lt; " | " &lt;&lt; #d &lt;&lt; ": " &lt;&lt; d &lt;&lt; "\n";</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>trace5</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter>, <parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>cerr &lt;&lt; #a &lt;&lt; ": " &lt;&lt; a &lt;&lt; " | " &lt;&lt; #b &lt;&lt; ": " &lt;&lt; b &lt;&lt; " | " &lt;&lt; #c &lt;&lt; ": " &lt;&lt; c &lt;&lt; " | " &lt;&lt; #d &lt;&lt; ": " &lt;&lt; d &lt;&lt; " | " &lt;&lt; #e &lt;&lt; ": " &lt;&lt; e &lt;&lt; "\n";</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>"\n"</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>N</name><init>=<expr><literal type="number">100002</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vi</name></type> <name><name>adj</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>r</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>g</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>b</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>col</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name>zz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>ans</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>par</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>lvl</name></decl></parameter>)</parameter_list><block>{
	<comment type="line">// trace3(x,par,lvl);</comment>
	<if>if<condition>(<expr><name>lvl</name><operator>%</operator><literal type="number">3</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
		<expr_stmt><expr><name><name>ans</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>+=</operator><name><name>r</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ans</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>+=</operator><name><name>r</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ans</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>+=</operator><name><name>g</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ans</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>+=</operator><name><name>g</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ans</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>+=</operator><name><name>b</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ans</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>+=</operator><name><name>b</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
	}</block></then>
	<elseif>else <if>if<condition>(<expr><name>lvl</name><operator>%</operator><literal type="number">3</literal><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
		<expr_stmt><expr><name><name>ans</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>+=</operator><name><name>g</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ans</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>+=</operator><name><name>b</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ans</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>+=</operator><name><name>b</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ans</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>+=</operator><name><name>r</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ans</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>+=</operator><name><name>r</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ans</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>+=</operator><name><name>g</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
		
	}</block></then></if></elseif>
	<else>else <block>{
		<expr_stmt><expr><name><name>ans</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>+=</operator><name><name>b</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ans</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>+=</operator><name><name>g</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ans</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>+=</operator><name><name>r</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ans</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>+=</operator><name><name>b</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ans</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>+=</operator><name><name>g</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ans</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>+=</operator><name><name>r</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
		
	}</block></else></if>
	<for>for<control>(<init><decl><type><name>auto</name></type> <name>i</name><range>:<expr><name><name>adj</name><index>[<expr><name>x</name></expr>]</index></name></expr></range></decl></init>)</control><block>{
		<if>if<condition>(<expr><name>i</name><operator>==</operator><name>par</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
		<expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>lvl</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
}</block></function>
<function><type><name>void</name></type> <name>dfs2</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>par</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>lvl</name></decl></parameter>)</parameter_list><block>{
	<comment type="line">// trace3(x,par,lvl);</comment>
	<if>if<condition>(<expr><name>lvl</name><operator>%</operator><literal type="number">3</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
		<if>if<condition>(<expr><name>zz</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name><name>col</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
		}</block></then></if>
		<if>if<condition>(<expr><name>zz</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name><name>col</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
		}</block></then></if>
		<if>if<condition>(<expr><name>zz</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name><name>col</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt>
		}</block></then></if>
		<if>if<condition>(<expr><name>zz</name><operator>==</operator><literal type="number">3</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name><name>col</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt>
		}</block></then></if>
		<if>if<condition>(<expr><name>zz</name><operator>==</operator><literal type="number">4</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name><name>col</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><literal type="number">3</literal></expr>;</expr_stmt>
		}</block></then></if>
		<if>if<condition>(<expr><name>zz</name><operator>==</operator><literal type="number">5</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name><name>col</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><literal type="number">3</literal></expr>;</expr_stmt>
		}</block></then></if>
	}</block></then>
	<elseif>else <if>if<condition>(<expr><name>lvl</name><operator>%</operator><literal type="number">3</literal><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
		<if>if<condition>(<expr><name>zz</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name><name>col</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt>
		}</block></then></if>
		<if>if<condition>(<expr><name>zz</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name><name>col</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><literal type="number">3</literal></expr>;</expr_stmt>
		}</block></then></if>
		<if>if<condition>(<expr><name>zz</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name><name>col</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><literal type="number">3</literal></expr>;</expr_stmt>
		}</block></then></if>
		<if>if<condition>(<expr><name>zz</name><operator>==</operator><literal type="number">3</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name><name>col</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
		}</block></then></if>
		<if>if<condition>(<expr><name>zz</name><operator>==</operator><literal type="number">4</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name><name>col</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
		}</block></then></if>
		<if>if<condition>(<expr><name>zz</name><operator>==</operator><literal type="number">5</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name><name>col</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt>
		}</block></then></if>
		
	}</block></then></if></elseif>
	<else>else <block>{
		<if>if<condition>(<expr><name>zz</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name><name>col</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><literal type="number">3</literal></expr>;</expr_stmt>
		}</block></then></if>
		<if>if<condition>(<expr><name>zz</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name><name>col</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt>
		}</block></then></if>
		<if>if<condition>(<expr><name>zz</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name><name>col</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
		}</block></then></if>
		<if>if<condition>(<expr><name>zz</name><operator>==</operator><literal type="number">3</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name><name>col</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><literal type="number">3</literal></expr>;</expr_stmt>
		}</block></then></if>
		<if>if<condition>(<expr><name>zz</name><operator>==</operator><literal type="number">4</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name><name>col</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt>
		}</block></then></if>
		<if>if<condition>(<expr><name>zz</name><operator>==</operator><literal type="number">5</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name><name>col</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
		}</block></then></if>
	}</block></else></if>
	<for>for<control>(<init><decl><type><name>auto</name></type> <name>i</name><range>:<expr><name><name>adj</name><index>[<expr><name>x</name></expr>]</index></name></expr></range></decl></init>)</control><block>{
		<if>if<condition>(<expr><name>i</name><operator>==</operator><name>par</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
		<expr_stmt><expr><call><name>dfs2</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>lvl</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><name>ios</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
	<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro><block>{
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>r</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	}</block>
	<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro><block>{
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>g</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	}</block>
	<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro><block>{
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	}</block>
	<decl_stmt><decl><type><name>ll</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
	<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n-<literal type="number">1</literal></argument>)</argument_list></macro><block>{
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>x</name><operator>&gt;&gt;</operator><name>y</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>x</name><operator>--</operator></expr><operator>,</operator><expr><name>y</name><operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>adj</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>adj</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block>
	<decl_stmt><decl><type><name>bool</name></type> <name>notpos</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>src</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro><block>{
		<comment type="line">// trace2(i,adj[i].size());</comment>
		<if>if<condition>(<expr><name><name>adj</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>&gt;</operator><literal type="number">2</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>notpos</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<break>break;</break>
		}</block></then></if>
		<if>if<condition>(<expr><name><name>adj</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>src</name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></then></if>
	}</block>
	<if>if<condition>(<expr><operator>!</operator><name>notpos</name></expr>)</condition><then><block>{
		<expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>src</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>ll</name></type> <name>sol</name><init>=<expr><name>LLONG_MAX</name></expr></init></decl>;</decl_stmt>
		<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">6</literal></argument>)</argument_list></macro><block>{
			<if>if<condition>(<expr><name>sol</name><operator>&gt;</operator><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block>{
				<expr_stmt><expr><name>sol</name><operator>=</operator><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>zz</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
			}</block></then></if>
			<comment type="line">// sol=min(sol,ans[i]);</comment>
			<comment type="line">// cout&lt;&lt;ans[i]&lt;&lt;" ";</comment>
		}</block>
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>sol</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>dfs2</name><argument_list>(<argument><expr><name>src</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro><block>{
			<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>col</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;&lt;</operator><literal type="string">" "</literal></expr>;</expr_stmt>
		}</block>
	}</block></then></if>
}</block></function>
</unit>
