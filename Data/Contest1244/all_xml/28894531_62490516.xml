<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28894531_62490516.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>maxn</name><init>=<expr><literal type="number">100005</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>col</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>bk</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>c</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name>ans</name></decl>,<decl><type ref="prev"/><name>minn</name><init>=<expr><literal type="number">1000000000000000000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type><name><name>vec</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>cc</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name>kk</name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>pos</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>fa</name></decl></parameter>)</parameter_list>
<block>{
    <comment type="line">//printf("%lld ",pos);</comment>
    <decl_stmt><decl><type><name>ll</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>vec</name><index>[<expr><name>pos</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <if>if<condition>(<expr><name><name>vec</name><index>[<expr><name>pos</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name>fa</name></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
        <for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>j</name><operator>&lt;=</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
            <if>if<condition>(<expr><name>j</name><operator>!=</operator><name><name>c</name><index>[<expr><name>pos</name></expr>]</index></name><operator>&amp;&amp;</operator><name>j</name><operator>!=</operator><name><name>c</name><index>[<expr><name>fa</name></expr>]</index></name></expr>)</condition><then><block>{
                <comment type="line">//printf("%lld ",j);</comment>
                <expr_stmt><expr><name><name>c</name><index>[<expr><name><name>vec</name><index>[<expr><name>pos</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>=</operator><name>j</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>ans</name><operator>+=</operator><name><name>col</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name><name>vec</name><index>[<expr><name>pos</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
                <break>break;</break>
            }</block></then></if>
        }</block></for>
        <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name><name>vec</name><index>[<expr><name>pos</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>,<decl><type ref="prev"/><name>st</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>col</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>col</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>col</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld%lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>vec</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>vec</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>bk</name><index>[<expr><name>x</name></expr>]</index></name><operator>++</operator></expr><operator>,</operator><expr><name><name>bk</name><index>[<expr><name>y</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
    }</block></for>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <if>if<condition>(<expr><name><name>bk</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;</operator><literal type="number">2</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-1\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        }</block></then></if>
        <if>if<condition>(<expr><name><name>bk</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>st</name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></then></if>
    }</block></for>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>j</name><operator>&lt;=</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
            <if>if<condition>(<expr><name>i</name><operator>==</operator><name>j</name></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
            <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>ans</name><operator>=</operator><name><name>col</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>st</name></expr>]</index></name><operator>+</operator><name><name>col</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name><name>vec</name><index>[<expr><name>st</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>c</name><index>[<expr><name>st</name></expr>]</index></name><operator>=</operator><name>i</name></expr><operator>,</operator><expr><name><name>c</name><index>[<expr><name><name>vec</name><index>[<expr><name>st</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>=</operator><name>j</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name><name>vec</name><index>[<expr><name>st</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>minn</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>minn</name></expr></argument>,<argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></for>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>j</name><operator>&lt;=</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
            <if>if<condition>(<expr><name>i</name><operator>==</operator><name>j</name></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
            <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>ans</name><operator>=</operator><name><name>col</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>st</name></expr>]</index></name><operator>+</operator><name><name>col</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name><name>vec</name><index>[<expr><name>st</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>c</name><index>[<expr><name>st</name></expr>]</index></name><operator>=</operator><name>i</name></expr><operator>,</operator><expr><name><name>c</name><index>[<expr><name><name>vec</name><index>[<expr><name>st</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>=</operator><name>j</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name><name>vec</name><index>[<expr><name>st</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>ans</name><operator>==</operator><name>minn</name></expr>)</condition><then><block>{
                <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>,<argument><expr><name>minn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <for>for<control>(<init><decl><type><name>ll</name></type> <name>jj</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>jj</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>jj</name><operator>++</operator></expr></incr>)</control><block>{
                    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld "</literal></expr></argument>,<argument><expr><name><name>c</name><index>[<expr><name>jj</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>
                <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="number">0</literal></expr>;</return>
            }</block></then></if>
        }</block></for>
    }</block></for>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
