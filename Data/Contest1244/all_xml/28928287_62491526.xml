<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28928287_62491526.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<decl_stmt><decl><type><name>ll</name></type> <name><name>ar</name><index>[<expr><literal type="number">100001</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>l</name></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%I64d%I64d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>l</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name>r</name> <operator>=</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%I64d"</literal></expr></argument>, <argument><expr><name>ar</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>sort</name></name><argument_list>(<argument><expr><name>ar</name></expr></argument>, <argument><expr><name>ar</name> <operator>+</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init>;</init> <condition><expr><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>l</name> <operator>&lt;</operator> <name>r</name></expr>;</condition> <incr/>)</control> <block>{
        <for>for <control>(<init>;</init> <condition><expr><name>l</name> <operator>&lt;</operator> <name>r</name> <operator>&amp;&amp;</operator> <name><name>ar</name><index>[<expr><name>l</name></expr>]</index></name> <operator>==</operator> <name><name>ar</name><index>[<expr><name>l</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr/>)</control> <block>{
            <expr_stmt><expr><operator>++</operator><name>l</name></expr>;</expr_stmt>
        }</block></for>
        <for>for <control>(<init>;</init> <condition><expr><name>r</name> <operator>&gt;</operator> <name>l</name> <operator>&amp;&amp;</operator> <name><name>ar</name><index>[<expr><name>r</name></expr>]</index></name> <operator>==</operator> <name><name>ar</name><index>[<expr><name>r</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr/>)</control> <block>{
            <expr_stmt><expr><operator>--</operator><name>r</name></expr>;</expr_stmt>
        }</block></for>
        <if>if <condition>(<expr><name>l</name> <operator>&gt;=</operator> <name>r</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
        <if>if <condition>(<expr><name>l</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>n</name> <operator>-</operator> <name>r</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>ll</name></type> <name>calc</name> <init>= <expr><operator>(</operator><name><name>ar</name><index>[<expr><name>l</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>ar</name><index>[<expr><name>l</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>l</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>k</name> <operator>&gt;=</operator> <name>calc</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>k</name> <operator>-=</operator> <name>calc</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>ar</name><index>[<expr><name>l</name></expr>]</index></name> <operator>=</operator> <name><name>ar</name><index>[<expr><name>l</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <decl_stmt><decl><type><name>ll</name></type> <name>len</name> <init>= <expr><name>k</name> <operator>/</operator> <operator>(</operator><name>l</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>ar</name><index>[<expr><name>l</name></expr>]</index></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
                <break>break;</break>
            }</block></else></if>
        }</block></then> <else>else <block>{
            <decl_stmt><decl><type><name>ll</name></type> <name>calc</name> <init>= <expr><operator>(</operator><name><name>ar</name><index>[<expr><name>r</name></expr>]</index></name> <operator>-</operator> <name><name>ar</name><index>[<expr><name>r</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>n</name> <operator>-</operator> <name>r</name><operator>)</operator></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>k</name> <operator>&gt;=</operator> <name>calc</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>k</name> <operator>-=</operator> <name>calc</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>ar</name><index>[<expr><name>r</name></expr>]</index></name> <operator>=</operator> <name><name>ar</name><index>[<expr><name>r</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <decl_stmt><decl><type><name>ll</name></type> <name>len</name> <init>= <expr><name>k</name> <operator>/</operator> <operator>(</operator><name>n</name> <operator>-</operator> <name>r</name><operator>)</operator></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>ar</name><index>[<expr><name>r</name></expr>]</index></name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>
                <break>break;</break>
            }</block></else></if>
        }</block></else></if>
    }</block></for>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%I64d"</literal></expr></argument>, <argument><expr><name><name>ar</name><index>[<expr><name>r</name></expr>]</index></name> <operator>-</operator> <name><name>ar</name><index>[<expr><name>l</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
