<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28935461_62485505.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ext/pb_ds/assoc_container.hpp&gt;</cpp:file></cpp:include> <comment type="line">// Common file</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ext/pb_ds/tree_policy.hpp&gt;</cpp:file></cpp:include> <comment type="line">// Including tree_order_statistics_node_update</comment>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<using>using <namespace>namespace <name>__gnu_pbds</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lsc</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>      <cpp:value>scanf("%lld",&amp;x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sc</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>       <cpp:value>scanf("%d",&amp;x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lpr</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>      <cpp:value>printf("%lld ",x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pr</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>       <cpp:value>printf("%d ",x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>n_l</name></cpp:macro>         <cpp:value>printf("\n")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VI</name></cpp:macro>          <cpp:value>vector&lt;int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VII</name></cpp:macro>         <cpp:value>vector&lt;long long int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MI</name></cpp:macro>          <cpp:value>map&lt;int, int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PI</name></cpp:macro>          <cpp:value>pair&lt;int, int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>m_p</name></cpp:macro>         <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro>          <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mset</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>memset(x,y,sizeof(x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro>       <cpp:value>(int)v.size()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro>      <cpp:value>v.begin(), v.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fr</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=a;i&lt;=n;i++)</cpp:value></cpp:define>
<decl_stmt><decl><type><name>mt19937</name></type> <name>rng32</name><argument_list>(<argument><expr><call><name><name>chrono</name><operator>::</operator><name>steady_clock</name><operator>::</operator><name>now</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>time_since_epoch</name><argument_list>()</argument_list></call><operator>.</operator><call><name>count</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name><init>=<expr><operator>(</operator><name>int</name><operator>)</operator><literal type="number">1e6</literal><operator>+</operator><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mod</name> <init>= <expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<comment type="line">// order_of_key (val): returns the no. of values strictly less than val</comment>
<comment type="line">// find_by_order (k): returns the kth largest element iterator.(0-based)</comment>
<comment type="line">// vector&lt;int&gt;::iterator itr=lower_bound(v.begin(),v.end(),x);</comment>
<comment type="line">// s.substr(pos[0-indexed], len(default=till end))</comment>
<typedef>typedef <type><name><name>tree</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>null_type</name></expr></argument>,<argument><expr><name><name>less</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument>,<argument><expr><name>rb_tree_tag</name></expr></argument>,<argument><expr><name>tree_order_statistics_node_update</name></expr></argument>&gt;</argument_list></name></type> <name>ordered_set</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRACE</name></cpp:macro></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TRACE</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>trace</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__f(#__VA_ARGS__, __VA_ARGS__)</cpp:value></cpp:define>
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>Arg1</name></parameter>&gt;</parameter_list></template>
<type><name>void</name></type> <name>__f</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>Arg1</name><modifier>&amp;&amp;</modifier></type> <name>arg1</name></decl></parameter>)</parameter_list><block>{
	<expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <name>name</name> <operator>&lt;&lt;</operator> <literal type="string">" : "</literal> <operator>&lt;&lt;</operator> <name>arg1</name> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt>
}</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>Arg1</name></parameter>, <parameter><type><name>typename</name><modifier>...</modifier></type> <name>Args</name></parameter>&gt;</parameter_list></template>
<type><name>void</name></type> <name>__f</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>names</name></decl></parameter>, <parameter><decl><type><name>Arg1</name><modifier>&amp;&amp;</modifier></type> <name>arg1</name></decl></parameter>, <parameter><decl><type><name>Args</name><modifier>&amp;&amp;</modifier><modifier>...</modifier></type> <name>args</name></decl></parameter>)</parameter_list><block>{
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>comma</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>names</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><expr_stmt><expr><call><name><name>cerr</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>names</name></expr></argument>, <argument><expr><name>comma</name> <operator>-</operator> <name>names</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">" : "</literal> <operator>&lt;&lt;</operator> <name>arg1</name><operator>&lt;&lt;</operator><literal type="string">" | "</literal></expr>;</expr_stmt><expr_stmt><expr><call><name>__f</name><argument_list>(<argument><expr><name>comma</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>args</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>trace</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<decl_stmt><decl><type><name><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name> <operator>::</operator> <name>iterator</name></name></type> <name>fi</name></decl>, <decl><type ref="prev"/><name>ses</name></decl>, <decl><type ref="prev"/><name>se</name></decl>, <decl><type ref="prev"/><name>mx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>mp</name></decl>;</decl_stmt>
<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt><expr_stmt><expr><call><name>lsc</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>lsc</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>fr</name><argument_list>(<argument>i</argument>, <argument><literal type="number">1</literal></argument>, <argument>n</argument>)</argument_list></macro><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt><expr_stmt><expr><call><name>lsc</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mp</name><index>[<expr><name>x</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>
    <while>while<condition>(<expr><name>k</name></expr>)</condition><block>{
        <if>if <condition>(<expr><call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><call><name>pr</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name>n_l</name></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><name>fi</name> <operator>=</operator> <call><name><name>s</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>se</name> <operator>=</operator> <call><name><name>s</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><operator>*</operator><call><name><name>s</name><operator>.</operator><name>rbegin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">//trace(*se);</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>vfi</name> <init>= <expr><operator>*</operator><name>fi</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>vse</name> <init>= <expr><operator>*</operator><name>se</name></expr></init></decl>;</decl_stmt>
        <comment type="line">//trace(k, vfi, vse, mp[vfi], mp[vse]);</comment>
        <if>if <condition>(<expr><name><name>mp</name><index>[<expr><name>vfi</name></expr>]</index></name> <operator>&lt;=</operator> <name><name>mp</name><index>[<expr><name>vse</name></expr>]</index></name></expr>)</condition><then><block>{
            <expr_stmt><expr><name>mx</name> <operator>=</operator> <operator>++</operator><name>fi</name></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>vmx</name> <init>= <expr><operator>*</operator><name>mx</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>diff</name> <init>= <expr><name>vmx</name> <operator>-</operator> <name>vfi</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>req</name> <init>= <expr><name>diff</name> <operator>*</operator> <name><name>mp</name><index>[<expr><name>vfi</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <comment type="line">//trace(1, vmx, diff, req);</comment>
            <if>if <condition>(<expr><name>req</name> <operator>&lt;=</operator> <name>k</name></expr>)</condition><then><block>{
                <expr_stmt><expr><name>k</name><operator>-=</operator><name>req</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>mp</name><index>[<expr><name>vmx</name></expr>]</index></name><operator>+=</operator><name><name>mp</name><index>[<expr><name>vfi</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>mp</name><index>[<expr><name>vfi</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>vfi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else<block>{
                <decl_stmt><decl><type><name>int</name></type> <name>rm</name> <init>= <expr><name>k</name><operator>/</operator><name><name>mp</name><index>[<expr><name>vfi</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>k</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
                <comment type="line">//mp[vfi + rm] = mp[vfi];</comment>
                <comment type="line">//mp[vfi]=0;</comment>
                <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>vfi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>vfi</name><operator>+</operator><name>rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then><else>else<block>{
            <expr_stmt><expr><name>mx</name> <operator>=</operator> <operator>--</operator><name>se</name></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>vmx</name> <init>= <expr><operator>*</operator><name>mx</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>diff</name> <init>= <expr><name>vse</name> <operator>-</operator><name>vmx</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>req</name> <init>= <expr><name>diff</name> <operator>*</operator> <name><name>mp</name><index>[<expr><name>vse</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <comment type="line">//trace(vmx, diff, req);</comment>
            <if>if <condition>(<expr><name>req</name> <operator>&lt;=</operator> <name>k</name></expr>)</condition><then><block>{
                <expr_stmt><expr><name>k</name><operator>-=</operator><name>req</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>mp</name><index>[<expr><name>vmx</name></expr>]</index></name> <operator>+=</operator> <name><name>mp</name><index>[<expr><name>vse</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>mp</name><index>[<expr><name>vse</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>vse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else<block>{
                <decl_stmt><decl><type><name>int</name></type> <name>rm</name> <init>= <expr><name>k</name><operator>/</operator><name><name>mp</name><index>[<expr><name>vse</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>k</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
                <comment type="line">//mp[vfi + rm] = mp[vfi];</comment>
                <comment type="line">//mp[vfi]=0;</comment>
                <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>vse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>vse</name><operator>-</operator><name>rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>

        }</block></else></if>
    }</block></while>
    <expr_stmt><expr><call><name>lpr</name><argument_list>(<argument><expr><operator>*</operator><call><name><name>s</name><operator>.</operator><name>rbegin</name></name><argument_list>()</argument_list></call> <operator>-</operator> <operator>*</operator><call><name><name>s</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name>n_l</name></expr>;</expr_stmt>


    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

</unit>
