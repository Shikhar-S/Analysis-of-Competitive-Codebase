<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28935979_62488075.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>giant</name>;</typedef>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>T</name><modifier>&amp;</modifier></type> <name>Min</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>T</name> <modifier>&amp;</modifier></type><name>y</name></decl></parameter>)</parameter_list> <block>{<return>return <expr><ternary><condition><expr><name>y</name><operator>&lt;</operator><name>x</name></expr>?</condition><then><expr><operator>(</operator><name>x</name><operator>=</operator><name>y</name><operator>)</operator></expr></then><else>:<expr><name>x</name></expr></else></ternary></expr>;</return>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>T</name><modifier>&amp;</modifier></type> <name>Max</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>T</name> <modifier>&amp;</modifier></type><name>y</name></decl></parameter>)</parameter_list> <block>{<return>return <expr><ternary><condition><expr><name>x</name><operator>&lt;</operator><name>y</name></expr>?</condition><then><expr><operator>(</operator><name>x</name><operator>=</operator><name>y</name><operator>)</operator></expr></then><else>:<expr><name>x</name></expr></else></ternary></expr>;</return>}</block></function>
<function><specifier>inline</specifier> <type><name>giant</name></type> <name>read</name><parameter_list>()</parameter_list> <block>{
	<decl_stmt><decl><type><name>giant</name></type> <name>x</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>f</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name>c</name><init>=<expr><call><name>getchar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init>;</init><condition><expr><operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</condition><incr><expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr></incr>)</control> <block type="pseudo"><if>if <condition>(<expr><name>c</name><operator>==</operator><literal type="char">'-'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>f</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if></block></for>
	<for>for <control>(<init>;</init><condition><expr><call><name>isdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</condition><incr><expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>x</name><operator>=</operator><name>x</name><operator>*</operator><literal type="number">10</literal><operator>+</operator><name>c</name><operator>-</operator><literal type="char">'0'</literal></expr>;</expr_stmt></block></for>
	<return>return <expr><name>x</name><operator>*</operator><name>f</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name><init>=<expr><literal type="number">1e5</literal><operator>+</operator><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name><name>cnt</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>giant</name></type> <name>k</name></decl>,<decl><type ref="prev"/><name><name>a</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>w</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ONLINE_JUDGE</name></cpp:ifndef>
	<expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"test.in"</literal></expr></argument>,<argument><expr><literal type="string">"r"</literal></expr></argument>,<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name>n</name><operator>=</operator><call><name>read</name><argument_list>()</argument_list></call></expr><operator>,</operator><expr><name>k</name><operator>=</operator><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>w</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>w</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>w</name><operator>+</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><name>c</name><operator>=</operator><call><name>unique</name><argument_list>(<argument><expr><name>w</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>w</name><operator>+</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>-</operator><name>w</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><operator>++</operator><name><name>cnt</name><index>[<expr><call><name>lower_bound</name><argument_list>(<argument><expr><name>w</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>w</name><operator>+</operator><name>c</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>-</operator><name>w</name></expr>]</index></name></expr>;</expr_stmt></block></for>
	<decl_stmt><decl><type><name>int</name></type> <name>L</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>R</name><init>=<expr><name>c</name></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><name>L</name><operator>&lt;</operator><name>R</name></expr>)</condition> <block>{
		<decl_stmt><decl><type><name>giant</name></type> <name>mi</name><init>=<expr><call><name>min</name><argument_list>(<argument><expr><name><name>cnt</name><index>[<expr><name>L</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>cnt</name><index>[<expr><name>R</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>mi</name><operator>&gt;</operator><name>k</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
		<decl_stmt><decl><type><name>giant</name></type> <name>s</name><init>=<expr><name>k</name><operator>/</operator><name>mi</name></expr></init></decl>;</decl_stmt> <comment type="line">// able</comment>
		<if>if <condition>(<expr><name>mi</name><operator>==</operator><name><name>cnt</name><index>[<expr><name>L</name></expr>]</index></name></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>giant</name></type> <name>dif</name><init>=<expr><name><name>w</name><index>[<expr><name>L</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>w</name><index>[<expr><name>L</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>giant</name></type> <name>tr</name><init>=<expr><call><name>min</name><argument_list>(<argument><expr><name>dif</name></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>k</name><operator>-=</operator><name>tr</name><operator>*</operator><name>mi</name></expr>;</expr_stmt>
			<if>if <condition>(<expr><name>dif</name><operator>&lt;=</operator><name>s</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>cnt</name><index>[<expr><operator>++</operator><name>L</name></expr>]</index></name><operator>+=</operator><name>mi</name></expr>;</expr_stmt></block></then> <else>else <block type="pseudo"><expr_stmt><expr><name><name>w</name><index>[<expr><name>L</name></expr>]</index></name><operator>+=</operator><name>s</name></expr>;</expr_stmt></block></else></if>
		}</block></then> <elseif>else <if>if <condition>(<expr><name>mi</name><operator>==</operator><name><name>cnt</name><index>[<expr><name>R</name></expr>]</index></name></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>giant</name></type> <name>dif</name><init>=<expr><name><name>w</name><index>[<expr><name>R</name></expr>]</index></name><operator>-</operator><name><name>w</name><index>[<expr><name>R</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>giant</name></type> <name>tr</name><init>=<expr><call><name>min</name><argument_list>(<argument><expr><name>dif</name></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>k</name><operator>-=</operator><name>tr</name><operator>*</operator><name>mi</name></expr>;</expr_stmt>
			<if>if <condition>(<expr><name>dif</name><operator>&lt;=</operator><name>s</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>cnt</name><index>[<expr><operator>--</operator><name>R</name></expr>]</index></name><operator>+=</operator><name>mi</name></expr>;</expr_stmt></block></then> <else>else <block type="pseudo"><expr_stmt><expr><name><name>w</name><index>[<expr><name>R</name></expr>]</index></name><operator>-=</operator><name>s</name></expr>;</expr_stmt></block></else></if>
		}</block></then></if></elseif></if>
	}</block></while>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>,<argument><expr><name><name>w</name><index>[<expr><name>R</name></expr>]</index></name><operator>-</operator><name><name>w</name><index>[<expr><name>L</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
