<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28932176_62489709.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<function><type><name>void</name></type> <name>exgcd</name><parameter_list>(<parameter><decl><type><name>LL</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>LL</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>LL</name> <modifier>&amp;</modifier></type><name>d</name></decl></parameter>,<parameter><decl><type><name>LL</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>,<parameter><decl><type><name>LL</name> <modifier>&amp;</modifier></type><name>y</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><operator>!</operator><name>b</name></expr>)</condition><then><block>{<expr_stmt><expr><name>d</name><operator>=</operator><name>a</name></expr>;</expr_stmt><expr_stmt><expr><name>x</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt><expr_stmt><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt><return>return;</return>}</block></then></if>
    <expr_stmt><expr><call><name>exgcd</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>a</name><operator>%</operator><name>b</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name>y</name><operator>-=</operator><name>a</name><operator>/</operator><name>b</name><operator>*</operator><name>x</name></expr>;</expr_stmt>
}</block></function>
<decl_stmt><decl><type><name>LL</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>p</name></decl>,<decl><type ref="prev"/><name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>p</name><operator>&gt;&gt;</operator><name>a</name><operator>&gt;&gt;</operator><name>b</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>LL</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>,<decl><type ref="prev"/><name>g</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>exgcd</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>g</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if<condition>(<expr><name>p</name><operator>%</operator><name>g</name><operator>!=</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
	<else>else <block>{
		<decl_stmt><decl><type><name>LL</name></type> <name>t1</name><init>=<expr><name>b</name><operator>/</operator><name>g</name></expr></init></decl>,<decl><type ref="prev"/><name>t2</name><init>=<expr><name>a</name><operator>/</operator><name>g</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>LL</name></type> <name>t</name><init>=<expr><operator>(</operator><name>p</name><operator>/</operator><name>g</name><operator>)</operator><operator>%</operator><name>t2</name></expr></init></decl>;</decl_stmt><expr_stmt><expr><name>y</name><operator>*=</operator><name>t</name></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>y</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then><block>{
			<decl_stmt><decl><type><name>LL</name></type> <name>k</name><init>=<expr><name>y</name><operator>/</operator><name>t2</name></expr></init></decl>;</decl_stmt>
			<while>while<condition>(<expr><name>y</name><operator>-</operator><name>t2</name><operator>*</operator><name>k</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>k</name><operator>--</operator></expr>;</expr_stmt></block></while>
			<while>while<condition>(<expr><name>y</name><operator>-</operator><name>t2</name><operator>*</operator><operator>(</operator><name>k</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>&gt;=</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>k</name><operator>++</operator></expr>;</expr_stmt></block></while>
			<expr_stmt><expr><name>y</name><operator>-=</operator><name>k</name><operator>*</operator><name>t2</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>x</name><operator>=</operator><operator>(</operator><name>p</name><operator>-</operator><name>y</name><operator>*</operator><name>b</name><operator>)</operator><operator>/</operator><name>a</name></expr>;</expr_stmt>
			<if>if<condition>(<expr><name>x</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
			<else>else <block>{
				<if>if<condition>(<expr><name>x</name><operator>+</operator><name>y</name><operator>&lt;=</operator><name>n</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld %lld %lld\n"</literal></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>n</name><operator>-</operator><name>x</name><operator>-</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
				<else>else <block type="pseudo"><expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
			}</block></else></if>
		}</block></then>
		<else>else <block>{
			<decl_stmt><decl><type><name>LL</name></type> <name>k</name><init>=<expr><operator>(</operator><operator>-</operator><name>y</name><operator>)</operator><operator>/</operator><name>t2</name></expr></init></decl>;</decl_stmt>
			<while>while<condition>(<expr><name>y</name><operator>+</operator><name>t2</name><operator>*</operator><name>k</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>k</name><operator>++</operator></expr>;</expr_stmt></block></while>
			<while>while<condition>(<expr><name>y</name><operator>+</operator><name>t2</name><operator>*</operator><operator>(</operator><name>k</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>&gt;=</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>k</name><operator>--</operator></expr>;</expr_stmt></block></while>
			<expr_stmt><expr><name>y</name><operator>+=</operator><name>k</name><operator>*</operator><name>t2</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>x</name><operator>=</operator><operator>(</operator><name>p</name><operator>-</operator><name>y</name><operator>*</operator><name>b</name><operator>)</operator><operator>/</operator><name>a</name></expr>;</expr_stmt>
			<if>if<condition>(<expr><name>x</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
			<else>else <block>{
				<if>if<condition>(<expr><name>x</name><operator>+</operator><name>y</name><operator>&lt;=</operator><name>n</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld %lld %lld\n"</literal></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>n</name><operator>-</operator><name>x</name><operator>-</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
				<else>else <block type="pseudo"><expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
			}</block></else></if>
		}</block></else></if>
	}</block></else></if>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
