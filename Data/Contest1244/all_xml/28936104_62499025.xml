<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28936104_62499025.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sstream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<comment type="line">//ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);</comment>
<comment type="line">//#pragma comment(linker, "/STACK:10240000,10240000")</comment>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dbg</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout&lt;&lt;#x&lt;&lt;" = "&lt;&lt; (x)&lt;&lt; endl</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dbg2</name><parameter_list>(<parameter><type><name>x1</name></type></parameter>,<parameter><type><name>x2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout&lt;&lt;#x1&lt;&lt;" = "&lt;&lt;x1&lt;&lt;" "&lt;&lt;#x2&lt;&lt;" = "&lt;&lt;x2&lt;&lt;endl</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dbg3</name><parameter_list>(<parameter><type><name>x1</name></type></parameter>,<parameter><type><name>x2</name></type></parameter>,<parameter><type><name>x3</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout&lt;&lt;#x1&lt;&lt;" = "&lt;&lt;x1&lt;&lt;" "&lt;&lt;#x2&lt;&lt;" = "&lt;&lt;x2&lt;&lt;" "&lt;&lt;#x3&lt;&lt;" = "&lt;&lt;x3&lt;&lt;endl</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>max3</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>max(a,max(b,c))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>min3</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>min(a,min(b,c))</cpp:value></cpp:define>

<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pll</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ull</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>ull</name></type> <name>hash1</name> <init>= <expr><literal type="number">201326611</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>inf</name> <init>= <expr><literal type="number">0x3f3f3f3f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>_inf</name> <init>= <expr><literal type="number">0xc0c0c0c0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>INF</name> <init>= <expr><literal type="number">0x3f3f3f3f3f3f3f3f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>_INF</name> <init>= <expr><literal type="number">0xc0c0c0c0c0c0c0c0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>mod</name> <init>=  <expr><operator>(</operator><name>int</name><operator>)</operator><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<function><type><name>ll</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<return>return <expr><ternary><condition><expr><name>b</name></expr>?</condition><then><expr><call><name>gcd</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>a</name><operator>%</operator><name>b</name></expr></argument>)</argument_list></call></expr></then><else>:<expr><name>a</name></expr></else></ternary></expr>;</return>}</block></function>
<function><type><name>ll</name></type> <name>ksm</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>mod</name></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name>int</name></type> <name>ans</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt><while>while<condition>(<expr><name>b</name></expr>)</condition><block>{<if>if<condition>(<expr><name>b</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ans</name><operator>=</operator><operator>(</operator><name>ans</name><operator>*</operator><name>a</name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt></block></then></if><expr_stmt><expr><name>a</name><operator>=</operator><operator>(</operator><name>a</name><operator>*</operator><name>a</name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt><expr_stmt><expr><name>b</name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr>;</expr_stmt>}</block></while><return>return <expr><name>ans</name></expr>;</return>}</block></function>
<function><type><name>ll</name></type> <name>inv2</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>mod</name></decl></parameter>)</parameter_list><block>{<return>return <expr><call><name>ksm</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>mod</name><operator>-</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr>;</return>}</block></function>
<function><type><name>void</name></type> <name>exgcd</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>ll</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>,<parameter><decl><type><name>ll</name> <modifier>&amp;</modifier></type><name>y</name></decl></parameter>,<parameter><decl><type><name>ll</name> <modifier>&amp;</modifier></type><name>d</name></decl></parameter>)</parameter_list><block>{<if>if<condition>(<expr><operator>!</operator><name>b</name></expr>)</condition><then> <block>{<expr_stmt><expr><name>d</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt><expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt><expr_stmt><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>}</block></then><else>else<block>{<expr_stmt><expr><call><name>exgcd</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>a</name><operator>%</operator><name>b</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name>y</name><operator>-=</operator><name>x</name><operator>*</operator><operator>(</operator><name>a</name><operator>/</operator><name>b</name><operator>)</operator></expr>;</expr_stmt>}</block></else></if>}</block></function><comment type="line">//printf("%lld*a + %lld*b = %lld\n", x, y, d);</comment>
<comment type="line">//ull ha[MAX_N],pp[MAX_N];</comment>

<function><specifier>inline</specifier> <type><name>int</name></type> <name>read</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>date</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>m</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> <decl_stmt><decl><type><name>char</name></type> <name>ch</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>ch</name><operator>!=</operator><literal type="char">'-'</literal><operator>&amp;&amp;</operator><operator>(</operator><name><name>ch</name><argument_list type="generic">&lt;<argument><expr><literal type="char">'0'</literal><operator>|</operator><name>ch</name></expr></argument>&gt;</argument_list></name><literal type="char">'9'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
    <if>if<condition>(<expr><name>ch</name><operator>==</operator><literal type="char">'-'</literal></expr>)</condition><then><block>{<expr_stmt><expr><name>m</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>}</block></then></if>
    <while>while<condition>(<expr><name>ch</name><operator>&gt;=</operator><literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>ch</name><operator>&lt;=</operator><literal type="char">'9'</literal></expr>)</condition>
    <block>{
        <expr_stmt><expr><name>date</name> <operator>=</operator> <name>date</name><operator>*</operator><literal type="number">10</literal><operator>+</operator><name>ch</name><operator>-</operator><literal type="char">'0'</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></while><return>return <expr><name>date</name><operator>*</operator><name>m</name></expr>;</return>
}</block></function>

<comment type="block">/*namespace sgt
{
    #define mid ((l+r)&gt;&gt;1)

    #undef mid
}*/</comment>

<comment type="block">/*int root[MAX_N],cnt,sz;
namespace hjt
{
    #define mid ((l+r)&gt;&gt;1)
    struct node{int l,r,maxx;}T[MAX_N*40];

    #undef mid
}*/</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAX_N</name> <init>= <expr><literal type="number">100025</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name><name>arr</name><index>[<expr><name>MAX_N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>b</name><index>[<expr><name>MAX_N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>pre</name><index>[<expr><name>MAX_N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>suf</name><index>[<expr><name>MAX_N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>k</name></decl>,<decl><type ref="prev"/><name><name>pre_</name><index>[<expr><name>MAX_N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>suf_</name><index>[<expr><name>MAX_N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>pre__</name><index>[<expr><name>MAX_N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>suf__</name><index>[<expr><name>MAX_N</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <comment type="line">//ios::sync_with_stdio(false);</comment>
    <comment type="line">//freopen("a.txt","r",stdin);</comment>
    <comment type="line">//freopen("b.txt","w",stdout);</comment>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><name><name>arr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>arr</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>arr</name><operator>+</operator><literal type="number">1</literal><operator>+</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
    <block>{
        <if>if<condition>(<expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name><name>arr</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>arr</name><index>[<expr><operator>++</operator><name>num</name></expr>]</index></name> <operator>=</operator> <name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name></expr><operator>,</operator><expr><name><name>b</name><index>[<expr><name>num</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><name><name>b</name><index>[<expr><name>num</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block></else></if>
    }</block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>num</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><name><name>pre</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>pre</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pre_</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>pre_</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><literal type="number">1ll</literal><operator>*</operator><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pre__</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1ll</literal><operator>*</operator><name><name>pre</name><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>pre_</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>num</name></expr></init></decl>;</init><condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">1</literal></expr>;</condition><incr><expr><operator>--</operator><name>i</name></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><name><name>suf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>suf</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>suf_</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>suf_</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1ll</literal><operator>*</operator><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>suf__</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>suf_</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">1ll</literal><operator>*</operator><name><name>suf</name><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></for>
<comment type="line">//    for(int i = 1;i&lt;=num;++i)</comment>
<comment type="line">//        dbg3(pre[i],pre_[i],pre__[i]);</comment>
<comment type="line">//    for(int i = num;i&gt;=1;--i)</comment>
<comment type="line">//        dbg3(suf[i],suf_[i],suf__[i]);</comment>
    <decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><name><name>arr</name><index>[<expr><name>num</name></expr>]</index></name><operator>-</operator><name><name>arr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>flag</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>r</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>l</name><operator>&lt;=</operator><name>num</name></expr>;</condition><incr><expr><operator>++</operator><name>l</name></expr></incr>)</control>
    <block>{
        <while>while<condition>(<expr><name>r</name><operator>&lt;=</operator><name>num</name><operator>&amp;&amp;</operator><name><name>pre__</name><index>[<expr><name>l</name></expr>]</index></name><operator>+</operator><name><name>suf__</name><index>[<expr><name>r</name></expr>]</index></name><operator>&gt;</operator><name>k</name></expr>)</condition> <block type="pseudo"><expr_stmt><expr><operator>++</operator><name>r</name></expr>;</expr_stmt></block></while>
        <if>if<condition>(<expr><name>r</name><operator>&gt;</operator><name>num</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
        <if>if<condition>(<expr><name>l</name><operator>&gt;=</operator><name>r</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
            <break>break;</break>
        }</block></then></if>
        <expr_stmt><expr><name>ans</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>ans</name></expr></argument>,<argument><expr><operator>-</operator><operator>(</operator><name>k</name><operator>-</operator><name><name>pre__</name><index>[<expr><name>l</name></expr>]</index></name><operator>-</operator><name><name>suf__</name><index>[<expr><name>r</name></expr>]</index></name><operator>)</operator><operator>/</operator><name><name>suf</name><index>[<expr><name>r</name></expr>]</index></name><operator>+</operator><name><name>arr</name><index>[<expr><name>r</name></expr>]</index></name><operator>-</operator><name><name>arr</name><index>[<expr><name>l</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <comment type="line">//dbg(flag);</comment>
    <if>if<condition>(<expr><operator>!</operator><name>flag</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>l</name> <init>= <expr><name>num</name></expr></init></decl>,<decl><type ref="prev"/><name>r</name> <init>= <expr><name>num</name></expr></init></decl>;</init><condition><expr><name>r</name></expr>;</condition><incr><expr><operator>--</operator><name>r</name></expr></incr>)</control>
    <block>{
        <while>while<condition>(<expr><name>l</name><operator>&gt;</operator><literal type="number">0</literal><operator>&amp;&amp;</operator><name><name>pre__</name><index>[<expr><name>l</name></expr>]</index></name><operator>+</operator><name><name>suf__</name><index>[<expr><name>r</name></expr>]</index></name><operator>&gt;</operator><name>k</name></expr>)</condition> <block type="pseudo"><expr_stmt><expr><operator>--</operator><name>l</name></expr>;</expr_stmt></block></while>
        <if>if<condition>(<expr><name>l</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
        <if>if<condition>(<expr><name>l</name><operator>&gt;=</operator><name>r</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
            <break>break;</break>
        }</block></then></if>
        <expr_stmt><expr><name>ans</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>ans</name></expr></argument>,<argument><expr><operator>-</operator><operator>(</operator><name>k</name><operator>-</operator><name><name>pre__</name><index>[<expr><name>l</name></expr>]</index></name><operator>-</operator><name><name>suf__</name><index>[<expr><name>r</name></expr>]</index></name><operator>)</operator><operator>/</operator><name><name>pre</name><index>[<expr><name>l</name></expr>]</index></name><operator>+</operator><name><name>arr</name><index>[<expr><name>r</name></expr>]</index></name><operator>-</operator><name><name>arr</name><index>[<expr><name>l</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <comment type="line">//dbg(flag);</comment>
    <if>if<condition>(<expr><operator>!</operator><name>flag</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>,<argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">//fclose(stdin);</comment>
    <comment type="line">//fclose(stdout);</comment>
    <comment type="line">//cout &lt;&lt; "time: " &lt;&lt; (long long)clock() * 1000 / CLOCKS_PER_SEC &lt;&lt; " ms" &lt;&lt; endl;</comment>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
