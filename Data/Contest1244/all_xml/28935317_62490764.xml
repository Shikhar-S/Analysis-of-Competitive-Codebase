<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28935317_62490764.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>test</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>int t;cin&gt;&gt;t;for(int tc=1;tc&lt;=t;tc++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;int,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nl</name></cpp:macro> <cpp:value>cout&lt;&lt;"\n"</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAXN</name> <init>= <expr><literal type="number">1005</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>LOGN</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>INF</name> <init>= <expr><literal type="number">1e14</literal></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>k</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type><name>a</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>,<decl><type ref="prev"/><name>cum</name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>a</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>a</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<expr_stmt><expr><name><name>cum</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>cum</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	}</block></for>

	<decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><name>INF</name></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<decl_stmt><decl><type><name>ll</name></type> <name>lo</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>hi</name><init>=<expr><literal type="number">1e10</literal></expr></init></decl>,<decl><type ref="prev"/><name>mid</name></decl>,<decl><type ref="prev"/><name>tans</name><init>=<expr><literal type="number">1e10</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ll</name></type> <name>mini</name> <init>= <expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>maxi</name></decl>;</decl_stmt>
		<while>while<condition>( <expr><name>lo</name> <operator>&lt;=</operator> <name>hi</name></expr> )</condition>
		<block>{
			<expr_stmt><expr><name>mid</name> <operator>=</operator> <name>lo</name> <operator>+</operator> <operator>(</operator><name>hi</name><operator>-</operator><name>lo</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>

			<expr_stmt><expr><name>maxi</name> <operator>=</operator> <name>mini</name> <operator>+</operator> <name>mid</name></expr>;</expr_stmt>

			<decl_stmt><decl><type><name>int</name></type> <name>ub</name> <init>= <expr><call><name>upper_bound</name><argument_list>(<argument><expr><call><name><name>a</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>a</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>maxi</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name><name>a</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>ll</name></type> <name>up</name> <init>= <expr><operator>(</operator><name><name>cum</name><index>[<expr><name>n</name></expr>]</index></name> <operator>-</operator> <name><name>cum</name><index>[<expr><name>ub</name></expr>]</index></name><operator>)</operator> <operator>-</operator> <operator>(</operator><name>n</name><operator>-</operator><name>ub</name><operator>)</operator><operator>*</operator><name>maxi</name></expr></init></decl>;</decl_stmt>

			<decl_stmt><decl><type><name>int</name></type> <name>lb</name> <init>= <expr><call><name>lower_bound</name><argument_list>(<argument><expr><call><name><name>a</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>a</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>mini</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name><name>a</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>ll</name></type> <name>down</name> <init>= <expr><name>lb</name><operator>*</operator><name>mini</name> <operator>-</operator> <name><name>cum</name><index>[<expr><name>lb</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

			<comment type="line">// cout&lt;&lt;mid&lt;&lt;" "&lt;&lt;up&lt;&lt;" "&lt;&lt;down,nl;</comment>

			<if>if<condition>( <expr><name>up</name> <operator>+</operator> <name>down</name> <operator>&lt;=</operator> <name>k</name></expr> )</condition><then>
			<block>{
				<expr_stmt><expr><name>hi</name> <operator>=</operator> <name>mid</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>tans</name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt>
			}</block></then>
			<else>else 
				<block type="pseudo"><expr_stmt><expr><name>lo</name> <operator>=</operator> <name>mid</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
		}</block></while>
		<comment type="line">// cout&lt;&lt;a[i]&lt;&lt;" "&lt;&lt;tans,nl;</comment>
		<expr_stmt><expr><name>ans</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>ans</name></expr></argument>, <argument><expr><name>tans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


		<expr_stmt><expr><name>lo</name><operator>=</operator><literal type="number">0</literal></expr><operator>,</operator><expr><name>hi</name><operator>=</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr><operator>,</operator><expr><name>tans</name><operator>=</operator><literal type="number">1e10</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>maxi</name> <operator>=</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<while>while<condition>( <expr><name>lo</name> <operator>&lt;=</operator> <name>hi</name></expr> )</condition>
		<block>{
			<expr_stmt><expr><name>mid</name> <operator>=</operator> <name>lo</name> <operator>+</operator> <operator>(</operator><name>hi</name><operator>-</operator><name>lo</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>

			<expr_stmt><expr><name>mini</name> <operator>=</operator> <name>maxi</name> <operator>-</operator> <name>mid</name></expr>;</expr_stmt>

			<decl_stmt><decl><type><name>int</name></type> <name>ub</name> <init>= <expr><call><name>upper_bound</name><argument_list>(<argument><expr><call><name><name>a</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>a</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>maxi</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name><name>a</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>ll</name></type> <name>up</name> <init>= <expr><operator>(</operator><name><name>cum</name><index>[<expr><name>n</name></expr>]</index></name> <operator>-</operator> <name><name>cum</name><index>[<expr><name>ub</name></expr>]</index></name><operator>)</operator> <operator>-</operator> <operator>(</operator><name>n</name><operator>-</operator><name>ub</name><operator>)</operator><operator>*</operator><name>maxi</name></expr></init></decl>;</decl_stmt>

			<decl_stmt><decl><type><name>int</name></type> <name>lb</name> <init>= <expr><call><name>lower_bound</name><argument_list>(<argument><expr><call><name><name>a</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>a</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>mini</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name><name>a</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>ll</name></type> <name>down</name> <init>= <expr><name>lb</name><operator>*</operator><name>mini</name> <operator>-</operator> <name><name>cum</name><index>[<expr><name>lb</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

			<comment type="line">// cout&lt;&lt;mid&lt;&lt;" "&lt;&lt;up&lt;&lt;" "&lt;&lt;down,nl;</comment>

			<if>if<condition>( <expr><name>up</name> <operator>+</operator> <name>down</name> <operator>&lt;=</operator> <name>k</name></expr> )</condition><then>
			<block>{
				<expr_stmt><expr><name>hi</name> <operator>=</operator> <name>mid</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>tans</name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt>
			}</block></then>
			<else>else 
				<block type="pseudo"><expr_stmt><expr><name>lo</name> <operator>=</operator> <name>mid</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
		}</block></while>
		<expr_stmt><expr><name>ans</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>ans</name></expr></argument>, <argument><expr><name>tans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name></expr><operator>,</operator><expr><name>nl</name></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
