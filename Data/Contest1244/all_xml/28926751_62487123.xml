<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28926751_62487123.cpp"><comment type="line">//--------PREPROCESSOR--------PREPROCESSOR--------PREPROCESSOR--------PREPROCESSOR--------PREPROCESSOR--------PREPROCESSOR--------PREPROCESSOR</comment>
    
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<using>using <namespace>namespace <name><name>std</name><operator>::</operator><name>chrono</name></name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDL</name><parameter_list>(<parameter><type><name>a</name></type></parameter> ,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vll a(n);for(ll i=0;i&lt;n;i++) cin&gt;&gt;a[i];</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REPR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=0;i&lt;n;i++ )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>X.begin() ,  X.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>reset</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(X, 0, sizeof(X))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>'\n'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>  <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>

<comment type="line">//------------------------------_WARNINGG---------------</comment>









<comment type="line">//-----------------------------TEMPLATES------------------TEMPLATES---------------------------TEMPLATES---------------------------------</comment>
<comment type="line">//-----------------------------TEMPLATES------------------TEMPLATES---------------------------TEMPLATES---------------------------------</comment>
    
<comment type="line">//--------------TYPEDEF--------------TYPEDEF--------------TYPEDEF--------------TYPEDEF--------------TYPEDEF--------------TYPEDEF--------------TYPEDEF----------------------------TYPEDEF</comment>
<comment type="line">//--------------TYPEDEF--------------TYPEDEF--------------TYPEDEF--------------TYPEDEF--------------TYPEDEF--------------TYPEDEF--------------TYPEDEF----------------------------TYPEDEF</comment>
    
<typedef>typedef  <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>double</name></type> <name>ld</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>pll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>vll</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>    
    
<comment type="line">//--------------CONSTANTS--------------CONSTANTS--------------CONSTANTS--------------CONSTANTS--------------CONSTANTS--------------CONSTANTS--------------CONSTANTS</comment>
<comment type="line">//--------------CONSTANTS--------------CONSTANTS--------------CONSTANTS--------------CONSTANTS--------------CONSTANTS--------------CONSTANTS--------------CONSTANTS</comment>
    
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>INF</name><init>=<expr><literal type="number">1e18</literal><operator>+</operator><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>mod</name><init>=<expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ld</name></type> <name>PI</name><init>=<expr><call><name>acos</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>    
    
    
    
    
    
<comment type="line">//------------------IGNOREABLE_CONTENT------------------IGNOREABLE_CONTENT------------------IGNOREABLE_CONTENT------------------IGNOREABLE_CONTENT</comment>
    
    
    
<comment type="line">// To find GCD of a and b</comment>
<function_decl><type><name>ll</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>
    
    
<comment type="line">// To compute x raised to power y under modulo m</comment>
    <comment type="line">// To compute x^y under modulo m</comment>
<function><type><name>int</name></type> <name>power</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,  <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>)</parameter_list> 
<block>{ 
    <decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>      <comment type="line">// Initialize result </comment>
    
    <expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>%</operator> <name>p</name></expr>;</expr_stmt>  <comment type="line">// Update x if it is more than or  </comment>
                <comment type="line">// equal to p </comment>
    
    <while>while <condition>(<expr><name>y</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> 
    <block>{ 
        <comment type="line">// If y is odd, multiply x with result </comment>
        <if>if <condition>(<expr><name>y</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then> 
            <block type="pseudo"><expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>res</name><operator>*</operator><name>x</name><operator>)</operator> <operator>%</operator> <name>p</name></expr>;</expr_stmt></block></then></if> 
    
        <comment type="line">// y must be even now </comment>
        <expr_stmt><expr><name>y</name> <operator>=</operator> <name>y</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</expr_stmt> <comment type="line">// y = y/2 </comment>
        <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name><operator>*</operator><name>x</name><operator>)</operator> <operator>%</operator> <name>p</name></expr>;</expr_stmt>   
    }</block></while> 
    <return>return <expr><name>res</name></expr>;</return> 
}</block></function>
<comment type="line">// Function to find modular inverse of a under modulo m</comment>
<comment type="line">// Assumption: m is prime</comment>
<function><type><name>ll</name></type> <name>modInverse</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>m</name><init>=<expr><name>mod</name></expr></init></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>g</name> <init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>g</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Inverse doesn't exist"</literal></expr>;</expr_stmt></block></then>
    <else>else
    <block>{
        <comment type="line">// If a and m are relatively prime, then modulo inverse</comment>
        <comment type="line">// is a^(m-2) mode m</comment>
        <return>return <expr><call><name>power</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>m</name><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></else></if>
}</block></function>
    
    
<comment type="line">// Function to return gcd of a and b</comment>
<function><type><name>ll</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name>a</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><name>b</name></expr>;</return></block></then></if>
    <return>return <expr><call><name>gcd</name><argument_list>(<argument><expr><name>b</name><operator>%</operator><name>a</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>coordinate_compress</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>b</name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>auto</name></type> <name>i</name><range>:<expr><name>a</name></expr></range></decl></init>)</control>
        <block type="pseudo"><expr_stmt><expr><call><name><name>b</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    <decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>da</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>counter</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>auto</name></type> <name>i</name><range>:<expr><name>b</name></expr></range></decl></init>)</control>
        <block type="pseudo"><expr_stmt><expr><name><name>da</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>counter</name><operator>++</operator></expr>;</expr_stmt></block></for>
    <for>for<control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>i</name><operator>:</operator><name>a</name></expr></init>)</control>
        <block type="pseudo"><expr_stmt><expr><name>i</name><operator>=</operator><name><name>da</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for> 
}</block></function>

<comment type="line">//----------------------MAIN______________________________MAIN__________________MAINco</comment>
<function><type><name>int</name></type> <name>f</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>mid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>star</name><init>=<expr><name>s</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>end</name><init>=<expr><name>mid</name><operator>+</operator><name>s</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>cost</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>auto</name></type> <name>i</name><range>:<expr><name>a</name></expr></range></decl></init>)</control>
    <block>{
        <if>if<condition>(<expr><name>i</name><operator>&lt;</operator><name>star</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>cost</name><operator>+=</operator><name>star</name><operator>-</operator><name>i</name></expr>;</expr_stmt></block></then></if>
        <if>if<condition>(<expr><name>i</name><operator>&gt;</operator><name>end</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>cost</name><operator>+=</operator><name>i</name><operator>-</operator><name>end</name></expr>;</expr_stmt></block></then></if>
    }</block></for>
    <return>return <expr><name>cost</name></expr>;</return>
}</block></function>
<function><type><name>bool</name></type> <name>func</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>mid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>k</name></decl></parameter>)</parameter_list>
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>B</name><init>=<expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>A</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>B</name> <operator>-</operator> <name>A</name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>m1</name> <init>= <expr><operator>(</operator><name>A</name> <operator>+</operator> <name>B</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>m2</name> <init>= <expr><operator>(</operator><name>A</name> <operator>+</operator> <name>B</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <if>if<condition>(<expr><call><name>f</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>mid</name></expr></argument>,<argument><expr><name>m1</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <call><name>f</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>mid</name></expr></argument>,<argument><expr><name>m2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
       <block type="pseudo"><expr_stmt><expr><name>A</name> <operator>=</operator> <name>m1</name></expr>;</expr_stmt></block></then>
    <else>else
       <block type="pseudo"><expr_stmt><expr><name>B</name> <operator>=</operator> <name>m2</name></expr>;</expr_stmt></block></else></if>
}</block></while>

<decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><name>INF</name></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>A</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>B</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>ans</name></expr></argument> , <argument><expr><call><name>f</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>mid</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
<if>if<condition>(<expr><name>ans</name><operator>&lt;=</operator><name>k</name></expr>)</condition><then>
    <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>
<return>return <expr><literal type="boolean">false</literal></expr>;</return>
}</block></function>
<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    
    
    <decl_stmt><decl><type><name>auto</name></type> <name>start</name> <init>= <expr><call><name><name>high_resolution_clock</name><operator>::</operator><name>now</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>mt19937</name></type> <name>rng</name><argument_list>(<argument><expr><call><name><name>chrono</name><operator>::</operator><name>steady_clock</name><operator>::</operator><name>now</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>time_since_epoch</name><argument_list>()</argument_list></call><operator>.</operator><call><name>count</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
    <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ONLINE_JUDGE</name></cpp:ifndef>
        <expr_stmt><expr><call><name>freopen</name> <argument_list>(<argument><expr><literal type="string">"INPUT.txt"</literal></expr></argument> , <argument><expr><literal type="string">"r"</literal></expr></argument> , <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// freopen ("OUTPUT.txt" , "w" , stdout);</comment>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="line">//-----------------------------------------------------------------------------------------------------------</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>k</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>a</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>i</name><operator>:</operator><name>a</name></expr></init>)</control>
        <block type="pseudo"><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>i</name></expr>;</expr_stmt></block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>lo</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>hi</name><init>=<expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>lo</name><operator>&lt;</operator><name>hi</name></expr>)</condition>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>mid</name><init>=<expr><operator>(</operator><name>lo</name><operator>+</operator><name>hi</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>ch</name><init>=<expr><call><name>func</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>mid</name></expr></argument> , <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>ch</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>hi</name><operator>=</operator><name>mid</name></expr>;</expr_stmt>
        }</block></then>
        <else>else
        <block>{
            <expr_stmt><expr><name>lo</name><operator>=</operator><name>mid</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
        }</block></else></if>
        
    }</block></while>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>lo</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
<comment type="line">//----------------------------------------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>auto</name></type> <name>stop</name> <init>= <expr><call><name><name>high_resolution_clock</name><operator>::</operator><name>now</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>auto</name></type> <name>duration</name> <init>= <expr><call><name><name>duration_cast</name><argument_list type="generic">&lt;<argument><expr><name>microseconds</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>stop</name> <operator>-</operator> <name>start</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <comment type="line">//  cerr &lt;&lt;finishl&lt;&lt;"Time in microseconds:" &lt;&lt;duration.count() &lt;&lt;finishl&lt;&lt;"Time in seconds:"&lt;&lt;duration.count()/(1000000.0)&lt;&lt; finishl;</comment>
}</block></function>
    </unit>
