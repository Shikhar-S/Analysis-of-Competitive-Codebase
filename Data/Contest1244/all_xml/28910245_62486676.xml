<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28910245_62486676.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>re</name></cpp:macro> <cpp:value>return</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>du</name></cpp:macro> <cpp:value>double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>co</name></cpp:macro> <cpp:value>continue</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gcd</name></cpp:macro> <cpp:value>__gcd</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>br</name></cpp:macro> <cpp:value>break</cpp:value></cpp:define>
<function><type><name>void</name></type> <name>fast</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<decl_stmt><decl><type><name>ll</name></type> <name><name>color</name><index>[<expr><literal type="number">5</literal></expr>]</index><index>[<expr><literal type="number">100000</literal><operator>+</operator><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name><name>tree</name><index>[<expr><literal type="number">100000</literal><operator>+</operator><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>colors</name><index>[<expr><literal type="number">100000</literal><operator>+</operator><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>g</name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>u</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>c1</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>c2</name></decl></parameter>)</parameter_list><block>{
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>tree</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
        <if>if <condition>(<expr><name><name>colors</name><index>[<expr><name><name>tree</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name>g</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <while>while <condition>(<expr><name>g</name><operator>==</operator><name>c1</name> <operator>||</operator> <name>g</name><operator>==</operator><name>c2</name></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>g</name><operator>++</operator></expr>;</expr_stmt></block></while>
            <expr_stmt><expr><name><name>colors</name><index>[<expr><name><name>tree</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>=</operator><name>g</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name><name>tree</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name>c2</name></expr></argument>,<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></for>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name>fast</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">3</literal></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block>{
            <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>color</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></for>
    }</block></for>
    <decl_stmt><decl><type><name>ll</name></type> <name>u</name></decl>,<decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>u</name> <operator>&gt;&gt;</operator> <name>v</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>tree</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>tree</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
        <if>if <condition>(<expr><name><name>tree</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>&gt;</operator><literal type="number">2</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>re</name> <literal type="number">0</literal></expr>;</expr_stmt>
        }</block></then></if>
    }</block></for>
    <decl_stmt><decl><type><name>ll</name></type> <name>ans</name><init>=<expr><literal type="number">1000000000000000000</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>sum</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
        <if>if <condition>(<expr><name><name>tree</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
            <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><literal type="number">3</literal></expr>;</condition><incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
            <block type="pseudo"><for>for <control>(<init><decl><type><name>int</name></type> <name>z</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>z</name><operator>&lt;=</operator><literal type="number">3</literal></expr>;</condition><incr><expr><operator>++</operator><name>z</name></expr></incr>)</control><block>{
                <if>if <condition>(<expr><name>z</name><operator>==</operator><name>j</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>co</name></expr>;</expr_stmt></block></then></if>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name><name>colors</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></for>
                <expr_stmt><expr><name>sum</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>colors</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>j</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>colors</name><index>[<expr><name><name>tree</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>=</operator><name>z</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name><name>tree</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>colors</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>colors</name><index>[<expr><name><name>tree</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
                    <expr_stmt><expr><name>sum</name><operator>+=</operator><name><name>color</name><index>[<expr><name><name>colors</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
                }</block></for>
                <expr_stmt><expr><name>ans</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>ans</name></expr></argument>,<argument><expr><name>sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for></block></for>
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><literal type="number">3</literal></expr>;</condition><incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
            <block type="pseudo"><for>for <control>(<init><decl><type><name>int</name></type> <name>z</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>z</name><operator>&lt;=</operator><literal type="number">3</literal></expr>;</condition><incr><expr><operator>++</operator><name>z</name></expr></incr>)</control><block>{
                <if>if <condition>(<expr><name>z</name><operator>==</operator><name>j</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>co</name></expr>;</expr_stmt></block></then></if>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name><name>colors</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></for>
                <expr_stmt><expr><name>sum</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>colors</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>j</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>colors</name><index>[<expr><name><name>tree</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>=</operator><name>z</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name><name>tree</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>colors</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>colors</name><index>[<expr><name><name>tree</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
                    <expr_stmt><expr><name>sum</name><operator>+=</operator><name><name>color</name><index>[<expr><name><name>colors</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
                }</block></for>
                <if>if <condition>(<expr><name>sum</name><operator>==</operator><name>ans</name></expr>)</condition><then><block>{
                    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>colors</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt></block></for>
                    <expr_stmt><expr><name>re</name> <literal type="number">0</literal></expr>;</expr_stmt>
                }</block></then></if>
            }</block></for></block></for>
            <expr_stmt><expr><name>re</name> <literal type="number">0</literal></expr>;</expr_stmt>
        }</block></then></if>
    }</block></for>
    <expr_stmt><expr><name>re</name> <literal type="number">0</literal></expr>;</expr_stmt>
}</block></function>
</unit>
