<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28935571_62488140.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX</name></cpp:macro> <cpp:value>100000</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<using>using <name>ll</name><init>=<type><name>long</name> <name>long</name></type></init>;</using>

<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>root</name></decl>,<decl><type ref="prev"/><name>ans</name><init>=<expr><literal type="number">1e18</literal></expr></init></decl>,<decl><type ref="prev"/><name>midx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>c</name><index>[<expr><name>MAX</name><operator>+</operator><literal type="number">5</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name><name>adj</name><index>[<expr><name>MAX</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>per</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><init>=<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>q</name><index>[<expr><name>MAX</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>s</name></decl>,<decl><type ref="prev"/><name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name><name>visit</name><index>[<expr><name>MAX</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>clr</name><index>[<expr><name>MAX</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
        <for>for<control>(<init><decl><type><name>ll</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block>{
            <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>c</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></for>
    }</block></for>
    <for>for<control>(<init><decl><type><name>ll</name></type> <name>u</name></decl>,<decl><type ref="prev"/><name>v</name></decl>,<decl><type ref="prev"/><name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>u</name><operator>&gt;&gt;</operator><name>v</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>adj</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>adj</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
        <if>if<condition>(<expr><name><name>adj</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>&gt;</operator><literal type="number">2</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        }</block></then></if>
    }</block></for>
    <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
        <if>if<condition>(<expr><name><name>adj</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name>root</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
            <break>break;</break>
        }</block></then></if>
    }</block></for>
    <expr_stmt><expr><name><name>visit</name><index>[<expr><name>root</name></expr>]</index></name><operator>=</operator><literal type="boolean">true</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>q</name><index>[<expr><name>e</name><operator>++</operator></expr>]</index></name><operator>=</operator><name>root</name></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>s</name><operator>&lt;</operator><name>e</name></expr>)</condition><block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>top</name><init>=<expr><name><name>q</name><index>[<expr><name>s</name><operator>++</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>ll</name></type> <name>x</name><range>:<expr><name><name>adj</name><index>[<expr><name>top</name></expr>]</index></name></expr></range></decl></init>)</control><block>{
            <if>if<condition>(<expr><operator>!</operator><name><name>visit</name><index>[<expr><name>x</name></expr>]</index></name></expr>)</condition><then><block>{
                <expr_stmt><expr><name><name>visit</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><literal type="boolean">true</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>q</name><index>[<expr><name>e</name><operator>++</operator></expr>]</index></name><operator>=</operator><name>x</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
    }</block></while>
    <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">6</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr><operator>,</operator><expr><call><name>next_permutation</name><argument_list>(<argument><expr><name>per</name></expr></argument>,<argument><expr><name>per</name><operator>+</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></incr>)</control><block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>cnt</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
            <expr_stmt><expr><name>cnt</name><operator>+=</operator><name><name>c</name><index>[<expr><name><name>q</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index><index>[<expr><name><name>per</name><index>[<expr><name>i</name><operator>%</operator><literal type="number">3</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
        }</block></for>
        <if>if<condition>(<expr><name>cnt</name><operator>&lt;</operator><name>ans</name></expr>)</condition><then><block>{
            <expr_stmt><expr><name>midx</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>ans</name><operator>=</operator><name>cnt</name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></for>
    <while>while<condition>(<expr><name>midx</name><operator>--</operator></expr>)</condition> <block type="pseudo"><expr_stmt><expr><call><name>next_permutation</name><argument_list>(<argument><expr><name>per</name></expr></argument>,<argument><expr><name>per</name><operator>+</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></while>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
        <expr_stmt><expr><name><name>clr</name><index>[<expr><name><name>q</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>=</operator><name><name>per</name><index>[<expr><name>i</name><operator>%</operator><literal type="number">3</literal></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
    }</block></for>
    <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>clr</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;&lt;</operator><literal type="char">' '</literal></expr>;</expr_stmt>
    }</block></for>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
