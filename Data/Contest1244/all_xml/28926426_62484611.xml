<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28926426_62484611.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>LL</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>,<decl><type ref="prev"/><name>l</name></decl>,<decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LL</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LL</name></type> <name><name>a</name><index>[<expr><literal type="number">234234</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
  <decl_stmt><decl><type><name>LL</name></type> <name>i</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld%lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
  <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>a</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>a</name><operator>+</operator><literal type="number">1</literal><operator>+</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>x</name><operator>=</operator><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr><operator>,</operator><expr><name>y</name><operator>=</operator><name><name>a</name><index>[<expr><name>n</name></expr>]</index></name></expr><operator>,</operator><expr><name>l</name><operator>=</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name>r</name><operator>=</operator><name>n</name></expr>;</expr_stmt>
  <while>while<condition>(<expr><name>x</name><operator>&lt;</operator><name>y</name> <operator>&amp;&amp;</operator> <name>k</name></expr>)</condition>
    <block>{
	  <if>if<condition>(<expr><name>l</name><operator>&lt;</operator><operator>(</operator><name>n</name><operator>-</operator><name>r</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><then>
	    <block>{
		  <if>if<condition>(<expr><operator>(</operator><name><name>a</name><index>[<expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>a</name><index>[<expr><name>l</name></expr>]</index></name><operator>)</operator><operator>*</operator><name>l</name><operator>&lt;=</operator><name>k</name></expr>)</condition><then> 
		    <block type="pseudo"><expr_stmt><expr><name>k</name><operator>-=</operator><operator>(</operator><name><name>a</name><index>[<expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>a</name><index>[<expr><name>l</name></expr>]</index></name><operator>)</operator><operator>*</operator><name>l</name></expr><operator>,</operator><expr><name>x</name><operator>=</operator><name><name>a</name><index>[<expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr><operator>,</operator><expr><name>l</name><operator>++</operator></expr>;</expr_stmt></block></then>
		  <else>else <block>{<expr_stmt><expr><name>x</name><operator>+=</operator><name>k</name><operator>/</operator><name>l</name></expr>;</expr_stmt><break>break;</break>}</block></else></if> 
		}</block></then>
	  <else>else
	    <block>{
		  <if>if<condition>(<expr><operator>(</operator><name><name>a</name><index>[<expr><name>r</name></expr>]</index></name><operator>-</operator><name><name>a</name><index>[<expr><name>r</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>*</operator><operator>(</operator><name>n</name><operator>-</operator><name>r</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>&lt;=</operator><name>k</name></expr>)</condition><then>
		    <block type="pseudo"><expr_stmt><expr><name>k</name><operator>-=</operator><operator>(</operator><name><name>a</name><index>[<expr><name>r</name></expr>]</index></name><operator>-</operator><name><name>a</name><index>[<expr><name>r</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>*</operator><operator>(</operator><name>n</name><operator>-</operator><name>r</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr><operator>,</operator><expr><name>y</name><operator>=</operator><name><name>a</name><index>[<expr><name>r</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr><operator>,</operator><expr><name>r</name><operator>--</operator></expr>;</expr_stmt></block></then>
		  <else>else <block>{<expr_stmt><expr><name>y</name><operator>-=</operator><name>k</name><operator>/</operator><operator>(</operator><name>n</name><operator>-</operator><name>r</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt><break>break;</break>}</block></else></if>
		}</block></else></if>
	}</block></while>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>,<argument><expr><name>y</name><operator>-</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function> </unit>
