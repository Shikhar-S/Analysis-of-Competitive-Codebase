<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28934326_62490665.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name> ;</namespace></using>

<decl_stmt><decl><type><specifier>const</specifier> <name>long</name> <name>long</name></type> <name>maxn</name> <init>= <expr><literal type="number">1e5</literal></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></type> <name><name>adj</name><index>[<expr><name>maxn</name></expr>]</index></name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>maxn</name></expr>]</index></name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>cost</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name><name>mark</name><index>[<expr><name>maxn</name></expr>]</index></name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>ans</name><index>[<expr><name>maxn</name></expr>]</index></name></decl> ;</decl_stmt>

<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>M</name><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl> ;</decl_stmt>
<function><type><name>void</name></type> <name>d</name><parameter_list>()</parameter_list><block>{
<expr_stmt><expr><name><name>M</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
<expr_stmt><expr><name><name>M</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr> ;</expr_stmt>
<expr_stmt><expr><name><name>M</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr> ;</expr_stmt>
<expr_stmt><expr><name><name>M</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
<expr_stmt><expr><name><name>M</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr> ;</expr_stmt>
<expr_stmt><expr><name><name>M</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr> ;</expr_stmt>
<expr_stmt><expr><name><name>M</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr> ;</expr_stmt>
<expr_stmt><expr><name><name>M</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
<expr_stmt><expr><name><name>M</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr> ;</expr_stmt>
<expr_stmt><expr><name><name>M</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr> ;</expr_stmt>
<expr_stmt><expr><name><name>M</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr> ;</expr_stmt>
<expr_stmt><expr><name><name>M</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
<expr_stmt><expr><name><name>M</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr> ;</expr_stmt>
<expr_stmt><expr><name><name>M</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
<expr_stmt><expr><name><name>M</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr> ;</expr_stmt>
<expr_stmt><expr><name><name>M</name><index>[<expr><literal type="number">5</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr> ;</expr_stmt>
<expr_stmt><expr><name><name>M</name><index>[<expr><literal type="number">5</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr> ;</expr_stmt>
<expr_stmt><expr><name><name>M</name><index>[<expr><literal type="number">5</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>u</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>d</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list><block>{

    <expr_stmt><expr><name><name>mark</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>

    <for>for<control>(<init><decl><type><name>auto</name></type> <name>v</name><range>:<expr><name><name>adj</name><index>[<expr><name>u</name></expr>]</index></name></expr></range></decl></init>)</control>
        <block type="pseudo"><if>if<condition>(<expr><operator>!</operator><name><name>mark</name><index>[<expr><name>v</name></expr>]</index></name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><operator>(</operator><name>d</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block></then></if></block></for>

    <for>for<control>(<init><decl><type><name>long</name> <name>long</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{

        <expr_stmt><expr><name><name>cost</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>c</name><index>[<expr><operator>(</operator><name><name>M</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>d</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>]</index><index>[<expr><name>u</name></expr>]</index></name></expr> ;</expr_stmt>

    }</block></for>

}</block></function>

<function><type><name>void</name></type> <name>andfs</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>u</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>mod</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>d</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list><block>{

    <expr_stmt><expr><name><name>mark</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    <for>for<control>(<init><decl><type><name>auto</name></type> <name>v</name><range>:<expr><name><name>adj</name><index>[<expr><name>u</name></expr>]</index></name></expr></range></decl></init>)</control>
        <block type="pseudo"><if>if<condition>(<expr><name><name>mark</name><index>[<expr><name>v</name></expr>]</index></name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name>andfs</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>mod</name></expr></argument>, <argument><expr><operator>(</operator><name>d</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block></then></if></block></for>

    <expr_stmt><expr><name><name>ans</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <name><name>M</name><index>[<expr><name>mod</name></expr>]</index><index>[<expr><name>d</name></expr>]</index></name></expr> ;</expr_stmt>

}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{

    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>d</name><argument_list>()</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl> ;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr> ;</expr_stmt>

    <for>for<control>(<init><decl><type><name>long</name> <name>long</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{

        <for>for<control>(<init><decl><type><name>long</name> <name>long</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{

            <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>c</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr> ;</expr_stmt>

        }</block></for>

    }</block></for>

    <for>for<control>(<init><decl><type><name>long</name> <name>long</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{

        <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>v</name></decl> ;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>u</name> <operator>&gt;&gt;</operator> <name>v</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>u</name><operator>--</operator></expr> ;</expr_stmt>
        <expr_stmt><expr><name>v</name><operator>--</operator></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>adj</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>adj</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if>if<condition>(<expr><name><name>adj</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">2</literal> <operator>||</operator> <name><name>adj</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><then><block>{

            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal></expr> ;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr> ;</return>

        }</block></then></if>

    }</block></for>

    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>st</name></decl> ;</decl_stmt>
    <for>for<control>(<init><decl><type><name>long</name> <name>long</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{

        <if>if<condition>(<expr><name><name>adj</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then><block>{

            <expr_stmt><expr><name>st</name> <operator>=</operator> <name>i</name></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>

        }</block></then></if>

    }</block></for>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>j</name> <init>= <expr><name><name>cost</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>ji</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <for>for<control>(<init><decl><type><name>long</name> <name>long</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{

        <if>if<condition>(<expr><name><name>cost</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name>j</name></expr>)</condition><then><block>{

            <expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>cost</name><index>[<expr><name>i</name></expr>]</index></name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>ji</name> <operator>=</operator> <name>i</name></expr> ;</expr_stmt>

        }</block></then></if>

    }</block></for>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>j</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>andfs</name><argument_list>(<argument><expr><name>st</name></expr></argument>,<argument><expr><name>ji</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <for>for<control>(<init><decl><type><name>long</name> <name>long</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{

        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal></expr> ;</expr_stmt>

    }</block></for>

}</block></function>
</unit>
