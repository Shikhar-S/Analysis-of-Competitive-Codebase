<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28909282_62488894.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>con</name><index>[<expr><literal type="number">200005</literal></expr>]</index></name><init>=<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>all</name><index>[<expr><literal type="number">200005</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>fin</name><index>[<expr><literal type="number">200005</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>queue</name> <argument_list type="generic">&lt; <argument><expr><name><name>pair</name> <argument_list type="generic">&lt; <argument><expr><name><name>pair</name> <argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument> , <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></expr></argument> ,<argument><expr><name><name>pair</name> <argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument> , <argument><expr><name>char</name></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type><name>L</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>N</name></decl>,<decl><type ref="prev"/><name>K</name></decl>,<decl><type ref="prev"/><name>l</name></decl>,<decl><type ref="prev"/><name>r</name></decl>,<decl><type ref="prev"/><name>t</name></decl>,<decl><type ref="prev"/><name>i</name></decl>,<decl><type ref="prev"/><name>nxt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name>what</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld %lld %s"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>N</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>K</name></expr></argument>,<argument><expr><name>all</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>N</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>con</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">1e18</literal></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>N</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <if>if<condition>(<expr><name><name>con</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
        <if>if<condition>(<expr><name><name>all</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name><name>all</name><index>[<expr><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><name>N</name></expr>]</index></name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>l</name><operator>=</operator><operator>(</operator><name>i</name><operator>+</operator><name>N</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><name>N</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>r</name><operator>=</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>%</operator><name>N</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><index>[<expr><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><name>N</name></expr>]</index></name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition>
            <block>{
                <if>if<condition>(<expr><name><name>con</name><index>[<expr><name>l</name></expr>]</index></name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
                <if>if<condition>(<expr><name><name>all</name><index>[<expr><name>l</name></expr>]</index></name><operator>==</operator><name><name>all</name><index>[<expr><operator>(</operator><name>l</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><name>N</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>con</name><index>[<expr><name>l</name></expr>]</index></name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then>
                <else>else <block type="pseudo"><break>break;</break></block></else></if>
                <expr_stmt><expr><name>l</name><operator>=</operator><operator>(</operator><name>l</name><operator>+</operator><name>N</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><name>N</name></expr>;</expr_stmt>
            }</block></while>
            <while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition>
            <block>{
                <if>if<condition>(<expr><name><name>con</name><index>[<expr><name>r</name></expr>]</index></name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
                <if>if<condition>(<expr><name><name>all</name><index>[<expr><name>r</name></expr>]</index></name><operator>==</operator><name><name>all</name><index>[<expr><operator>(</operator><name>r</name><operator>+</operator><name>N</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><name>N</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>con</name><index>[<expr><name>r</name></expr>]</index></name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then>
                <else>else <block type="pseudo"><break>break;</break></block></else></if>
                <expr_stmt><expr><name>r</name><operator>=</operator><operator>(</operator><name>r</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><name>N</name></expr>;</expr_stmt>
            }</block></while>
            <expr_stmt><expr><call><name><name>L</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name><name>all</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>L</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name><name>all</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></for>
    <while>while<condition>(<expr><operator>!</operator><call><name><name>L</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{
        <decl_stmt><decl><type><name>auto</name></type> <name>x</name><init>=<expr><call><name><name>L</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>L</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>what</name><operator>=</operator><name><name>x</name><operator>.</operator><name>second</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>l</name><operator>=</operator><name><name>x</name><operator>.</operator><name>first</name><operator>.</operator><name>first</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name><operator>=</operator><name><name>x</name><operator>.</operator><name>first</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>nxt</name><operator>=</operator><name><name>x</name><operator>.</operator><name>second</name><operator>.</operator><name>first</name></name></expr>;</expr_stmt>
        <comment type="line">//printf("%lld %lld\n",t,l);</comment>
        <if>if<condition>(<expr><name><name>con</name><index>[<expr><name>l</name></expr>]</index></name><operator>!=</operator><literal type="number">1000000000000000000</literal></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
        <if>if<condition>(<expr><name><name>all</name><index>[<expr><name>l</name></expr>]</index></name><operator>!=</operator><name><name>all</name><index>[<expr><operator>(</operator><name>l</name><operator>+</operator><name>N</name><operator>+</operator><name>nxt</name><operator>)</operator><operator>%</operator><name>N</name></expr>]</index></name></expr>)</condition><then>
        <block>{

            <expr_stmt><expr><name><name>con</name><index>[<expr><name>l</name></expr>]</index></name><operator>=</operator><name>t</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>fin</name><index>[<expr><name>l</name></expr>]</index></name><operator>=</operator><name>what</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>L</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><operator>(</operator><name>l</name><operator>+</operator><name>N</name><operator>+</operator><name>nxt</name><operator>)</operator><operator>%</operator><name>N</name></expr></argument>,<argument><expr><name>t</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name>nxt</name></expr></argument>,<argument><expr><name>what</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block type="pseudo"><continue>continue;</continue></block></else></if>
    }</block></while>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>N</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <if>if<condition>(<expr><name><name>con</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>,<argument><expr><name><name>all</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
        <elseif>else <if>if<condition>(<expr><name><name>con</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;=</operator><name>K</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>,<argument><expr><name><name>fin</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
        <else>else
        <block>{
            <if>if<condition>(<expr><name><name>all</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'W'</literal><operator>&amp;&amp;</operator><name>K</name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">0</literal><operator>||</operator><name><name>all</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'B'</literal><operator>&amp;&amp;</operator><name>K</name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"W"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
            <else>else <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"B"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
        }</block></else></if>
    }</block></for>
    <comment type="line">//for(i=0;i&lt;N;i++) printf("%lld %lld\n",i,con[i]);</comment>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
