<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28892518_62479966.cpp"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>make_pair</name></cpp:macro> <cpp:value>mp</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>emplace_back</name></cpp:macro> <cpp:value>pb</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>mt19937</name></type> <name>mt_rand</name><argument_list>(<argument><expr><call><name>time</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">1e5</literal> <operator>+</operator> <literal type="number">5</literal></expr></init></decl>, <decl><type ref="prev"/><name>C</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name><name>c</name><index>[<expr><literal type="number">5</literal></expr>]</index><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>tab</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>col</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>v</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>

<struct>struct <name>triple</name> <block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>z</name></decl>;</decl_stmt>
</public>}</block>;</struct>

<decl_stmt><decl><type><name>bool</name></type> <name><name>inv</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>wsk</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
	<expr_stmt><expr><name><name>tab</name><index>[<expr><name>wsk</name></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>inv</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>wsk</name><operator>++</operator></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>auto</name></type> <name>y</name> <range>: <expr><name><name>v</name><index>[<expr><name>x</name></expr>]</index></name></expr></range></decl></init>)</control> <block type="pseudo"><if>if<condition>(<expr><operator>!</operator><name><name>inv</name><index>[<expr><name>y</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></block></for>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>C</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for></block></for>

	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>v</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>v</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>

	<decl_stmt><decl><type><name>bool</name></type> <name>ok</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>leaf</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<if>if<condition>(<expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>leaf</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>
		}</block></then>
		<elseif>else <if>if<condition>(<expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		}</block></then></if></elseif></if>
	}</block></for>
	<if>if<condition>(<expr><name>cnt</name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></then></if>

	<if>if<condition>(<expr><operator>!</operator><name>ok</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-1\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></then></if>

	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>triple</name></expr></argument>&gt;</argument_list></name></type> <name>perms</name> <init>= <expr><block>{ <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr> }</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>leaf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>cost</name> <init>= <expr><literal type="number">1e18</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>triple</name></type> <name>ww</name></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>auto</name></type> <name>p</name> <range>: <expr><name>perms</name></expr></range></decl></init>)</control> <block>{
		<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>cc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<if>if<condition>(<expr><name>i</name> <operator>%</operator> <literal type="number">3</literal> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cc</name> <operator>+=</operator> <name><name>c</name><index>[<expr><name><name>p</name><operator>.</operator><name>x</name></name></expr>]</index><index>[<expr><name><name>tab</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block></then>
			<elseif>else <if>if<condition>(<expr><name>i</name> <operator>%</operator> <literal type="number">3</literal> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cc</name> <operator>+=</operator> <name><name>c</name><index>[<expr><name><name>p</name><operator>.</operator><name>y</name></name></expr>]</index><index>[<expr><name><name>tab</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block></then></if></elseif>
			<else>else <block type="pseudo"><expr_stmt><expr><name>cc</name> <operator>+=</operator> <name><name>c</name><index>[<expr><name><name>p</name><operator>.</operator><name>z</name></name></expr>]</index><index>[<expr><name><name>tab</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block></else></if>
		}</block></for>
		<if>if<condition>(<expr><name>cost</name> <operator>&gt;</operator> <name>cc</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>cost</name> <operator>=</operator> <name>cc</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>ww</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
		}</block></then></if>	
	}</block></for>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>, <argument><expr><name>cost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<if>if<condition>(<expr><name>i</name> <operator>%</operator> <literal type="number">3</literal> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>col</name><index>[<expr><name><name>tab</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name><name>ww</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt></block></then>
		<elseif>else <if>if<condition>(<expr><name>i</name> <operator>%</operator> <literal type="number">3</literal> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>col</name><index>[<expr><name><name>tab</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name><name>ww</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt></block></then></if></elseif>
		<else>else <block type="pseudo"><expr_stmt><expr><name><name>col</name><index>[<expr><name><name>tab</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name><name>ww</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt></block></else></if>
	}</block></for>

	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d "</literal></expr></argument>, <argument><expr><name><name>col</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
