<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28908054_62496033.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nn</name></cpp:macro> <cpp:value>600002</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>dep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><name>nn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>c</name><index>[<expr><name>nn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>las</name><index>[<expr><name>nn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>fir</name><index>[<expr><name>nn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>b</name><index>[<expr><name>nn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>ans</name><index>[<expr><name>nn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>sta</name><index>[<expr><name>nn</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d\n"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>m</name><operator>=</operator><literal type="number">3</literal><operator>*</operator><name>n</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>n</name></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">2</literal><operator>*</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>s</name><index>[<expr><name>i</name><operator>-</operator><name>n</name></expr>]</index></name></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">2</literal><operator>*</operator><name>n</name></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>m</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>s</name><index>[<expr><name>i</name><operator>-</operator><name>n</name></expr>]</index></name></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><name><name>s</name><index>[<expr><name>m</name></expr>]</index></name><operator>=</operator><literal type="char">'\0'</literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>cnt</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>m</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{
		<if>if<condition>(<expr><name>i</name><operator>&amp;&amp;</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name><name>s</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>c</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>++</operator></expr><operator>,</operator><expr><name><name>las</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><name><name>c</name><index>[<expr><operator>++</operator><name>cnt</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name><name>b</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>=</operator><operator>(</operator><ternary><condition><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'B'</literal></expr>?</condition><then><expr><literal type="number">1</literal></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr><operator>,</operator><expr><name><name>fir</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>=</operator><name><name>las</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></else></if>
	}</block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>cnt</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{
		<if>if<condition>(<expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;=</operator><literal type="number">2</literal></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name><name>sta</name><index>[<expr><operator>++</operator><name>dep</name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt>
			<if>if<condition>(<expr><name><name>fir</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;=</operator><name>n</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
		}</block></then></if>
	}</block></for>
	<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>,<decl><type ref="prev"/><name>bx</name></decl>,<decl><type ref="prev"/><name>by</name></decl>;</decl_stmt>
	<if>if<condition>(<expr><name>dep</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
	<block>{
		<if>if<condition>(<expr><name>k</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>,<argument><expr><ternary><condition><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'B'</literal></expr>?</condition><then><expr><literal type="char">'W'</literal></expr></then><else>:<expr><literal type="char">'B'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for></block></then>
		<else>else <block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>,<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for></block></else></if>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></then></if>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>dep</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{
		<expr_stmt><expr><name>x</name><operator>=</operator><name><name>sta</name><index>[<expr><name>i</name></expr>]</index></name></expr><operator>,</operator><expr><name>y</name><operator>=</operator><name><name>sta</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>bx</name><operator>=</operator><name><name>b</name><index>[<expr><name>x</name></expr>]</index></name></expr><operator>,</operator><expr><name>by</name><operator>=</operator><name><name>b</name><index>[<expr><name>y</name></expr>]</index></name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>t</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>l</name><init>=<expr><name><name>las</name><index>[<expr><name>x</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>r</name><init>=<expr><name><name>fir</name><index>[<expr><name>y</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<while>while<condition>(<expr><name>l</name><operator>&lt;=</operator><name>r</name></expr>)</condition>
		<block>{
			<if>if<condition>(<expr><name>k</name><operator>&gt;=</operator><name>t</name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name><name>ans</name><index>[<expr><ternary><condition><expr><name>l</name><operator>&gt;=</operator><name>n</name></expr>?</condition><then><expr><name>l</name><operator>-</operator><name>n</name></expr></then><else>:<expr><name>l</name></expr></else></ternary></expr>]</index></name><operator>=</operator><name>bx</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>ans</name><index>[<expr><ternary><condition><expr><name>r</name><operator>&gt;=</operator><name>n</name></expr>?</condition><then><expr><name>r</name><operator>-</operator><name>n</name></expr></then><else>:<expr><name>r</name></expr></else></ternary></expr>]</index></name><operator>=</operator><name>by</name></expr>;</expr_stmt>
			}</block></then>
			<else>else
			<block>{
				<expr_stmt><expr><name><name>ans</name><index>[<expr><ternary><condition><expr><name>l</name><operator>&gt;=</operator><name>n</name></expr>?</condition><then><expr><name>l</name><operator>-</operator><name>n</name></expr></then><else>:<expr><name>l</name></expr></else></ternary></expr>]</index></name><operator>=</operator><operator>(</operator><name>k</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>^</operator><operator>(</operator><ternary><condition><expr><name>t</name><operator>&amp;</operator><literal type="number">1</literal></expr>?</condition><then><expr><name>bx</name><operator>^</operator><literal type="number">1</literal></expr></then><else>:<expr><name>bx</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>ans</name><index>[<expr><ternary><condition><expr><name>r</name><operator>&gt;=</operator><name>n</name></expr>?</condition><then><expr><name>r</name><operator>-</operator><name>n</name></expr></then><else>:<expr><name>r</name></expr></else></ternary></expr>]</index></name><operator>=</operator><operator>(</operator><name>k</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>^</operator><operator>(</operator><ternary><condition><expr><name>t</name><operator>&amp;</operator><literal type="number">1</literal></expr>?</condition><then><expr><name>by</name><operator>^</operator><literal type="number">1</literal></expr></then><else>:<expr><name>by</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
			}</block></else></if>
			<expr_stmt><expr><name>t</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>l</name><operator>++</operator></expr><operator>,</operator><expr><name>r</name><operator>--</operator></expr>;</expr_stmt>
		}</block></while>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><name><name>fir</name><index>[<expr><name>x</name></expr>]</index></name></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name><name>las</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</condition><incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>ans</name><index>[<expr><ternary><condition><expr><name>j</name><operator>&gt;=</operator><name>n</name></expr>?</condition><then><expr><name>j</name><operator>-</operator><name>n</name></expr></then><else>:<expr><name>j</name></expr></else></ternary></expr>]</index></name><operator>=</operator><name>bx</name></expr>;</expr_stmt></block></for>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><name><name>fir</name><index>[<expr><name>y</name></expr>]</index></name></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name><name>las</name><index>[<expr><name>y</name></expr>]</index></name></expr>;</condition><incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>ans</name><index>[<expr><ternary><condition><expr><name>j</name><operator>&gt;=</operator><name>n</name></expr>?</condition><then><expr><name>j</name><operator>-</operator><name>n</name></expr></then><else>:<expr><name>j</name></expr></else></ternary></expr>]</index></name><operator>=</operator><name>by</name></expr>;</expr_stmt></block></for>
	}</block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>,<argument><expr><ternary><condition><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name></expr>?</condition><then><expr><literal type="char">'B'</literal></expr></then><else>:<expr><literal type="char">'W'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
