<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28931516_62496744.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><literal type="number">200005</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>qzh</name><index>[<expr><literal type="number">200005</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>hzh</name><index>[<expr><literal type="number">200005</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>stab</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>,<argument><expr><name>s</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name><name>s</name><index>[<expr><name>i</name><operator>%</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><then><block>{
			<expr_stmt><expr><call><name><name>stab</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>stab</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>i</name><operator>%</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
	<if>if<condition>(<expr><operator>!</operator><call><name><name>stab</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
			<if>if<condition>(<expr><name>m</name><operator>%</operator><literal type="number">2</literal></expr>)</condition><then><block>{
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>,<argument><expr><literal type="char">'B'</literal><operator>^</operator><literal type="char">'W'</literal><operator>^</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then><else>else<block>{
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>,<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
		}</block></for>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></then></if>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<decl_stmt><decl><type><name><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></name></type> <name>ff</name><init>=<expr><call><name><name>stab</name><operator>.</operator><name>lower_bound</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></name></type> <name>ss</name><init>=<expr><name>ff</name></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>ss</name><operator>==</operator><call><name><name>stab</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
			<expr_stmt><expr><name>ss</name><operator>=</operator><call><name><name>stab</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><name>ss</name><operator>--</operator></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>ff</name><operator>==</operator><call><name><name>stab</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
			<expr_stmt><expr><name>ff</name><operator>=</operator><call><name><name>stab</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<decl_stmt><decl><type><name>int</name></type> <name>disf</name></decl>,<decl><type ref="prev"/><name>diss</name></decl>;</decl_stmt>
		<if>if<condition>(<expr><operator>*</operator><name>ff</name><operator>&gt;</operator><name>i</name></expr>)</condition><then><block>{
			<expr_stmt><expr><name>disf</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><operator>*</operator><name>ff</name><operator>-</operator><name>i</name></expr></argument>,<argument><expr><name>i</name><operator>+</operator><name>n</name><operator>-</operator><operator>*</operator><name>ff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then><else>else<block>{
			<expr_stmt><expr><name>disf</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>i</name><operator>-</operator><operator>*</operator><name>ff</name></expr></argument>,<argument><expr><operator>*</operator><name>ff</name><operator>+</operator><name>n</name><operator>-</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
		<if>if<condition>(<expr><operator>*</operator><name>ss</name><operator>&gt;</operator><name>i</name></expr>)</condition><then><block>{
			<expr_stmt><expr><name>diss</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><operator>*</operator><name>ss</name><operator>-</operator><name>i</name></expr></argument>,<argument><expr><name>i</name><operator>+</operator><name>n</name><operator>-</operator><operator>*</operator><name>ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then><else>else<block>{
			<expr_stmt><expr><name>diss</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>i</name><operator>-</operator><operator>*</operator><name>ss</name></expr></argument>,<argument><expr><operator>*</operator><name>ss</name><operator>+</operator><name>n</name><operator>-</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
		<if>if<condition>(<expr><call><name>min</name><argument_list>(<argument><expr><name>disf</name></expr></argument>,<argument><expr><name>diss</name></expr></argument>)</argument_list></call><operator>&gt;</operator><name>m</name></expr>)</condition><then><block>{
			<if>if<condition>(<expr><name>m</name><operator>%</operator><literal type="number">2</literal></expr>)</condition><then><block>{
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>,<argument><expr><literal type="char">'B'</literal><operator>^</operator><literal type="char">'W'</literal><operator>^</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then><else>else<block>{
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>,<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
			<continue>continue;</continue>
		}</block></then></if>
		<if>if<condition>(<expr><name>disf</name><operator>&lt;</operator><name>diss</name></expr>)</condition><then><block>{
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>,<argument><expr><name><name>s</name><index>[<expr><operator>*</operator><name>ff</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then><else>else<block>{
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>,<argument><expr><name><name>s</name><index>[<expr><operator>*</operator><name>ss</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
	}</block></for>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
