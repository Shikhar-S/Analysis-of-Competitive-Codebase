<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28911377_62489045.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>LL</name>;</typedef>
<function><type><name>LL</name></type> <name>exgcd</name><parameter_list>(<parameter><decl><type><name>LL</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>LL</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>LL</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>,<parameter><decl><type><name>LL</name> <modifier>&amp;</modifier></type><name>y</name></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><name>b</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
        <expr_stmt><expr><name>x</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
        <return>return <expr><name>a</name></expr>;</return>
    }</block></then></if>
    <decl_stmt><decl><type><name>LL</name></type> <name>r</name><init>=<expr><call><name>exgcd</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>a</name><operator>%</operator><name>b</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>LL</name></type> <name>t</name><init>=<expr><name>x</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>x</name><operator>=</operator><name>y</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>y</name><operator>=</operator><name>t</name><operator>-</operator><name>a</name><operator>/</operator><name>b</name><operator>*</operator><name>y</name></expr>;</expr_stmt>
    <return>return <expr><name>r</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>LL</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>p</name> <operator>&gt;&gt;</operator> <name>w</name> <operator>&gt;&gt;</operator> <name>d</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>LL</name></type> <name>x0</name></decl>, <decl><type ref="prev"/><name>y0</name></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>p</name> <operator>/</operator> <name>w</name> <operator>&gt;</operator> <name>n</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>
    <decl_stmt><decl><type><name>LL</name></type> <name>gcd</name> <init>= <expr><call><name>exgcd</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>x0</name></expr></argument>, <argument><expr><name>y0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>p</name> <operator>%</operator> <name>gcd</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then><else>else <block>{
        <decl_stmt><decl><type><name>LL</name></type> <name>mul</name> <init>= <expr><name>p</name> <operator>/</operator> <name>gcd</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>LL</name></type> <name>inc_x</name> <init>= <expr><name>d</name> <operator>/</operator> <name>gcd</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>LL</name></type> <name>inc_y</name> <init>= <expr><name>w</name> <operator>/</operator> <name>gcd</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>y0</name> <operator>%=</operator> <name>inc_y</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>y0</name> <operator>+=</operator> <name>inc_y</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>y0</name> <operator>%=</operator> <name>inc_y</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>y0</name> <operator>=</operator> <operator>(</operator><name>y0</name><operator>*</operator><operator>(</operator><name>mul</name><operator>%</operator><name>inc_y</name><operator>)</operator><operator>)</operator><operator>%</operator><name>inc_y</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>LL</name></type> <name>tgtx0</name></decl>, <decl><type ref="prev"/><name>tgty0</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>tgty0</name> <operator>=</operator> <name>y0</name></expr>;</expr_stmt>
        <comment type="line">// w * x + d * y == p</comment>
        <expr_stmt><expr><name>tgty0</name> <operator>=</operator> <operator>(</operator><name>y0</name> <operator>%</operator> <name>inc_y</name> <operator>+</operator> <name>inc_y</name><operator>)</operator> <operator>%</operator> <name>inc_y</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>tgtx0</name> <operator>=</operator> <operator>(</operator><name>p</name> <operator>-</operator> <name>tgty0</name> <operator>*</operator> <name>d</name> <operator>)</operator> <operator>/</operator> <name>w</name></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>tgtx0</name> <operator>*</operator> <name>w</name> <operator>+</operator> <name>tgty0</name> <operator>*</operator> <name>d</name> <operator>==</operator> <name>p</name> <operator>&amp;&amp;</operator> <name>tgtx0</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>tgty0</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>tgtx0</name> <operator>+</operator> <name>tgty0</name> <operator>&lt;=</operator> <name>n</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>tgtx0</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name>tgty0</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name>n</name> <operator>-</operator> <name>tgtx0</name> <operator>-</operator> <name>tgty0</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
        }</block></else></if>
    }</block></else></if>
     

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
