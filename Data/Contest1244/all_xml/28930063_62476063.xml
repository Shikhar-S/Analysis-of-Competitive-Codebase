<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28930063_62476063.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdlib&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctime&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset ( x , y , sizeof ( x ) )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int i = (a) ; i &lt;= (b) ; ++ i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>per</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int i = (a) ; i &gt;= (b) ; -- i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair &lt; int , int &gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>one</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>two</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rint</name></cpp:macro> <cpp:value>read&lt;int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>db</name></cpp:macro> <cpp:value>double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ull</name></cpp:macro> <cpp:value>unsigned long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lowbit</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( x &amp; ( - x ) )</cpp:value></cpp:define>

<using>using <name><name>std</name><operator>::</operator><name>queue</name></name> ;</using>
<using>using <name><name>std</name><operator>::</operator><name>set</name></name> ;</using>
<using>using <name><name>std</name><operator>::</operator><name>pair</name></name> ;</using>
<using>using <name><name>std</name><operator>::</operator><name>max</name></name> ;</using>
<using>using <name><name>std</name><operator>::</operator><name>min</name></name> ;</using>
<using>using <name><name>std</name><operator>::</operator><name>priority_queue</name></name> ;</using>
<using>using <name><name>std</name><operator>::</operator><name>vector</name></name> ;</using>
<using>using <name><name>std</name><operator>::</operator><name>swap</name></name> ;</using>
<using>using <name><name>std</name><operator>::</operator><name>sort</name></name> ;</using>
<using>using <name><name>std</name><operator>::</operator><name>unique</name></name> ;</using>
<using>using <name><name>std</name><operator>::</operator><name>greater</name></name> ;</using>

<function><template>template <parameter_list>&lt; <parameter><type><name>class</name></type> <name>T</name></parameter> &gt;</parameter_list></template>
    <specifier>inline</specifier> <type><name>T</name></type> <name>read</name> <parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>T</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> , <decl><type ref="prev"/><name>f</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>char</name></type> <name>ch</name> <init>= <expr><call><name>getchar</name> <argument_list>()</argument_list></call></expr></init></decl> ;</decl_stmt>
        <while>while <condition>( <expr><name><name>ch</name> <argument_list type="generic">&lt; <argument><expr><literal type="char">'0'</literal> <operator>||</operator> <name>ch</name></expr></argument> &gt;</argument_list></name> <literal type="char">'9'</literal></expr> )</condition> <block>{
            <if>if <condition>( <expr><name>ch</name> <operator>==</operator> <literal type="char">'-'</literal></expr> )</condition><then> <block type="pseudo"><expr_stmt><expr><name>f</name> <operator>=</operator> <operator>-</operator> <literal type="number">1</literal></expr> ;</expr_stmt></block></then></if>
            <expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>getchar</name> <argument_list>()</argument_list></call></expr> ;</expr_stmt>
        }</block></while>
       <while>while <condition>( <expr><name>ch</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>ch</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr> )</condition> <block>{
            <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator> <name>x</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal> <operator>)</operator> <operator>+</operator> <operator>(</operator> <name>x</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal> <operator>)</operator> <operator>+</operator> <operator>(</operator> <name>ch</name> <operator>-</operator> <literal type="number">48</literal> <operator>)</operator></expr> ;</expr_stmt>
            <expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>getchar</name> <argument_list>()</argument_list></call></expr> ;</expr_stmt>
       }</block></while>
       <return>return <expr><name>f</name> <operator>*</operator> <name>x</name></expr> ;</return>
}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">2e3</literal> <operator>+</operator> <literal type="number">100</literal></expr></init></decl> ;</decl_stmt>

<struct>struct <name>edge</name> <block>{<public type="default"> <decl_stmt><decl><type><name>int</name></type> <name>to</name></decl> , <decl><type ref="prev"/><name>next</name></decl> , <decl><type ref="prev"/><name>data</name></decl> ;</decl_stmt> </public>}</block> <decl><name><name>e</name><index>[<expr><name>N</name><operator>&lt;&lt;</operator><literal type="number">2</literal></expr>]</index></name></decl> ;</struct>

<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><name>N</name></expr>]</index></name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>T</name></decl> , <decl><type ref="prev"/><name>n</name></decl> , <decl><type ref="prev"/><name>ans</name></decl> , <decl><type ref="prev"/><name>left</name></decl> , <decl><type ref="prev"/><name>right</name></decl> ;</decl_stmt>

<function><type><name>signed</name></type> <name>main</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter> , <parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name>T</name> <operator>=</operator> <call><name>rint</name> <argument_list>()</argument_list></call></expr> ;</expr_stmt>
    <while>while <condition>( <expr><name>T</name> <operator>--</operator></expr> )</condition> <block>{
        <expr_stmt><expr><name>ans</name> <operator>=</operator> <operator>-</operator> <literal type="number">1</literal></expr> ;</expr_stmt> <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>rint</name> <argument_list>()</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>scanf</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument> , <argument><expr><name>s</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><name>left</name> <operator>=</operator> <name>right</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
        <macro><name>rep</name> <argument_list>( <argument>i</argument> , <argument><literal type="number">1</literal></argument> , <argument>n</argument> )</argument_list></macro> <if>if <condition>( <expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'1'</literal></expr> )</condition><then> <block>{ <expr_stmt><expr><name>left</name> <operator>=</operator> <name>i</name></expr> ;</expr_stmt> <break>break ;</break> }</block></then></if>
        <macro><name>per</name> <argument_list>( <argument>i</argument> , <argument>n</argument> , <argument><literal type="number">1</literal></argument> )</argument_list></macro> <if>if <condition>( <expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'1'</literal></expr> )</condition><then> <block>{ <expr_stmt><expr><name>right</name> <operator>=</operator> <name>i</name></expr> ;</expr_stmt> <break>break ;</break> }</block></then></if>
        <if>if <condition>( <expr><operator>!</operator> <name>left</name> <operator>&amp;&amp;</operator> <operator>!</operator> <name>right</name></expr> )</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument> , <argument><expr><name>n</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt></block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument> , <argument><expr><call><name>max</name> <argument_list>( <argument><expr><name>right</name> <operator>*</operator> <literal type="number">2ll</literal></expr></argument> , <argument><expr><operator>(</operator> <name>n</name> <operator>-</operator> <name>left</name> <operator>+</operator> <literal type="number">1ll</literal> <operator>)</operator> <operator>*</operator> <literal type="number">2ll</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr> ;</expr_stmt></block></else></if>
    }</block></while>
    <return>return <expr><literal type="number">0</literal></expr> ;</return>
}</block></function></unit>
