<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28926869_62493502.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ld</name></cpp:macro> <cpp:value>long double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ss</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pi</name></cpp:macro> <cpp:value>pair&lt;ll,ll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro> <cpp:value>(ll)(1e9+7)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cerr &lt;&lt; #x &lt;&lt; " is " &lt;&lt; x &lt;&lt; endl;</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></name></type> <name>morder</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></name></type> <name><name>adj</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></name></type> <name><name>cost</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name><name>visited</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>node</name></decl></parameter>)</parameter_list><block>{

	<expr_stmt><expr><name><name>visited</name><index>[<expr><name>node</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>morder</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>adj</name><index>[<expr><name>node</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{
		<decl_stmt><decl><type><name>ll</name></type> <name>nxt</name> <init>= <expr><name><name>adj</name><index>[<expr><name>node</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><operator>!</operator><name><name>visited</name><index>[<expr><name>nxt</name></expr>]</index></name></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>nxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
	}</block></for>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{	
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>cost</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>cost</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>cost</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block>{
			<decl_stmt><decl><type><name>ll</name></type> <name>x</name></decl>;</decl_stmt>
			<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>x</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>cost</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>


		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block>{
			<decl_stmt><decl><type><name>ll</name></type> <name>x</name></decl>;</decl_stmt>
			<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>x</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>cost</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>


		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block>{
			<decl_stmt><decl><type><name>ll</name></type> <name>x</name></decl>;</decl_stmt>
			<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>x</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>cost</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>


		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block>{
			<decl_stmt><decl><type><name>ll</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
			<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>x</name> <operator>&gt;&gt;</operator> <name>y</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>adj</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>adj</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>

		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block>{
			<if>if<condition>(<expr><name><name>adj</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition><then><block>{
				<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
				<return>return <expr><literal type="number">0</literal></expr>;</return>
			}</block></then></if>
		}</block></for>

		<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></name></type> <name>v</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ll</name></type> <name>leaf</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block>{
			<if>if<condition>(<expr><name><name>adj</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
				<expr_stmt><expr><name>leaf</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
				<break>break;</break>
			}</block></then></if>
		}</block></for>

		<expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>leaf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>ll</name></type> <name>final_cost</name> <init>= <expr><literal type="number">1e17</literal></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></name></type> <name>mcostarr</name></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>ll</name></type> <name>mcost</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>morder</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
			<decl_stmt><decl><type><name>ll</name></type> <name>val</name> <init>= <expr><name><name>morder</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<if>if<condition>(<expr><name>i</name><operator>%</operator><literal type="number">3</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
				<expr_stmt><expr><name>mcost</name> <operator>+=</operator> <name><name>cost</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>val</name></expr>]</index></name></expr>;</expr_stmt>
			}</block></then></if>

			<if>if<condition>(<expr><name>i</name><operator>%</operator><literal type="number">3</literal> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then><block>{
				<expr_stmt><expr><name>mcost</name> <operator>+=</operator> <name><name>cost</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>val</name></expr>]</index></name></expr>;</expr_stmt>
			}</block></then></if>

			<if>if<condition>(<expr><name>i</name><operator>%</operator><literal type="number">3</literal> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then><block>{
				<expr_stmt><expr><name>mcost</name> <operator>+=</operator> <name><name>cost</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>val</name></expr>]</index></name></expr>;</expr_stmt>
			}</block></then></if>
		}</block></for>
		<expr_stmt><expr><call><name><name>mcostarr</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>mcost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>mcost</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


		<expr_stmt><expr><name>mcost</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>morder</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
			<decl_stmt><decl><type><name>ll</name></type> <name>val</name> <init>= <expr><name><name>morder</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<if>if<condition>(<expr><name>i</name><operator>%</operator><literal type="number">3</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
				<expr_stmt><expr><name>mcost</name> <operator>+=</operator> <name><name>cost</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>val</name></expr>]</index></name></expr>;</expr_stmt>
			}</block></then></if>

			<if>if<condition>(<expr><name>i</name><operator>%</operator><literal type="number">3</literal> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then><block>{
				<expr_stmt><expr><name>mcost</name> <operator>+=</operator> <name><name>cost</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>val</name></expr>]</index></name></expr>;</expr_stmt>
			}</block></then></if>

			<if>if<condition>(<expr><name>i</name><operator>%</operator><literal type="number">3</literal> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then><block>{
				<expr_stmt><expr><name>mcost</name> <operator>+=</operator> <name><name>cost</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>val</name></expr>]</index></name></expr>;</expr_stmt>
			}</block></then></if>
		}</block></for>
		<expr_stmt><expr><call><name><name>mcostarr</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>mcost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>mcost</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


		<expr_stmt><expr><name>mcost</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>morder</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
			<decl_stmt><decl><type><name>ll</name></type> <name>val</name> <init>= <expr><name><name>morder</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<if>if<condition>(<expr><name>i</name><operator>%</operator><literal type="number">3</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
				<expr_stmt><expr><name>mcost</name> <operator>+=</operator> <name><name>cost</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>val</name></expr>]</index></name></expr>;</expr_stmt>
			}</block></then></if>

			<if>if<condition>(<expr><name>i</name><operator>%</operator><literal type="number">3</literal> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then><block>{
				<expr_stmt><expr><name>mcost</name> <operator>+=</operator> <name><name>cost</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>val</name></expr>]</index></name></expr>;</expr_stmt>
			}</block></then></if>

			<if>if<condition>(<expr><name>i</name><operator>%</operator><literal type="number">3</literal> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then><block>{
				<expr_stmt><expr><name>mcost</name> <operator>+=</operator> <name><name>cost</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>val</name></expr>]</index></name></expr>;</expr_stmt>
			}</block></then></if>
		}</block></for>
		<expr_stmt><expr><call><name><name>mcostarr</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>mcost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>mcost</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


		<expr_stmt><expr><name>mcost</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>morder</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
			<decl_stmt><decl><type><name>ll</name></type> <name>val</name> <init>= <expr><name><name>morder</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<if>if<condition>(<expr><name>i</name><operator>%</operator><literal type="number">3</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
				<expr_stmt><expr><name>mcost</name> <operator>+=</operator> <name><name>cost</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>val</name></expr>]</index></name></expr>;</expr_stmt>
			}</block></then></if>

			<if>if<condition>(<expr><name>i</name><operator>%</operator><literal type="number">3</literal> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then><block>{
				<expr_stmt><expr><name>mcost</name> <operator>+=</operator> <name><name>cost</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>val</name></expr>]</index></name></expr>;</expr_stmt>
			}</block></then></if>

			<if>if<condition>(<expr><name>i</name><operator>%</operator><literal type="number">3</literal> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then><block>{
				<expr_stmt><expr><name>mcost</name> <operator>+=</operator> <name><name>cost</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>val</name></expr>]</index></name></expr>;</expr_stmt>
			}</block></then></if>
		}</block></for>
		<expr_stmt><expr><call><name><name>mcostarr</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>mcost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>mcost</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


		<expr_stmt><expr><name>mcost</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>morder</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
			<decl_stmt><decl><type><name>ll</name></type> <name>val</name> <init>= <expr><name><name>morder</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<if>if<condition>(<expr><name>i</name><operator>%</operator><literal type="number">3</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
				<expr_stmt><expr><name>mcost</name> <operator>+=</operator> <name><name>cost</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>val</name></expr>]</index></name></expr>;</expr_stmt>
			}</block></then></if>

			<if>if<condition>(<expr><name>i</name><operator>%</operator><literal type="number">3</literal> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then><block>{
				<expr_stmt><expr><name>mcost</name> <operator>+=</operator> <name><name>cost</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>val</name></expr>]</index></name></expr>;</expr_stmt>
			}</block></then></if>

			<if>if<condition>(<expr><name>i</name><operator>%</operator><literal type="number">3</literal> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then><block>{
				<expr_stmt><expr><name>mcost</name> <operator>+=</operator> <name><name>cost</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>val</name></expr>]</index></name></expr>;</expr_stmt>
			}</block></then></if>
		}</block></for>
		<expr_stmt><expr><call><name><name>mcostarr</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>mcost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>mcost</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>



		<expr_stmt><expr><name>mcost</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>morder</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
			<decl_stmt><decl><type><name>ll</name></type> <name>val</name> <init>= <expr><name><name>morder</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<if>if<condition>(<expr><name>i</name><operator>%</operator><literal type="number">3</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
				<expr_stmt><expr><name>mcost</name> <operator>+=</operator> <name><name>cost</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>val</name></expr>]</index></name></expr>;</expr_stmt>
			}</block></then></if>

			<if>if<condition>(<expr><name>i</name><operator>%</operator><literal type="number">3</literal> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then><block>{
				<expr_stmt><expr><name>mcost</name> <operator>+=</operator> <name><name>cost</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>val</name></expr>]</index></name></expr>;</expr_stmt>
			}</block></then></if>

			<if>if<condition>(<expr><name>i</name><operator>%</operator><literal type="number">3</literal> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then><block>{
				<expr_stmt><expr><name>mcost</name> <operator>+=</operator> <name><name>cost</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>val</name></expr>]</index></name></expr>;</expr_stmt>
			}</block></then></if>
		}</block></for>
		<expr_stmt><expr><call><name><name>mcostarr</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>mcost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>mcost</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>ll</name></type> <name>ind</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>mcostarr</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
			<if>if<condition>(<expr><name><name>mcostarr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;=</operator> <name>final_cost</name></expr>)</condition><then><block>{
				<expr_stmt><expr><name>ind</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>final_cost</name> <operator>=</operator> <name><name>mcostarr</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
			}</block></then></if>
		}</block></for>
		
		<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></name></type> <name>badcode</name></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>ind</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><call><name><name>badcode</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>badcode</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>badcode</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>

		<if>if<condition>(<expr><name>ind</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><call><name><name>badcode</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>badcode</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>badcode</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>

		<if>if<condition>(<expr><name>ind</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><call><name><name>badcode</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>badcode</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>badcode</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>

		<if>if<condition>(<expr><name>ind</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><call><name><name>badcode</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>badcode</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>badcode</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>

		<if>if<condition>(<expr><name>ind</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><call><name><name>badcode</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>badcode</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>badcode</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>

		<if>if<condition>(<expr><name>ind</name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><call><name><name>badcode</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>badcode</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>badcode</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>


		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>final_cost</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>ll</name></type> <name><name>colors</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>morder</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block>{
			<decl_stmt><decl><type><name>ll</name></type> <name>val</name> <init>= <expr><name><name>morder</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<comment type="line">// cout &lt;&lt; val &lt;&lt; endl;</comment>
			<expr_stmt><expr><name><name>colors</name><index>[<expr><name>val</name></expr>]</index></name> <operator>=</operator> <name><name>badcode</name><index>[<expr><name>i</name><operator>%</operator><literal type="number">3</literal></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
		}</block></for>

		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
			<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>colors</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt>
		}</block></for>
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>

	
}</block></function></unit>
