<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28893200_62485371.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mk</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fs</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sc</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>
<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name><name>a</name><index>[<expr><literal type="number">100010</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>mem</name><index>[<expr><literal type="number">100010</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>b</name><index>[<expr><literal type="number">100010</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>v</name><index>[<expr><literal type="number">100010</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>ll</name></type> <name>dp</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>pa</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>l1</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>l2</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><name><name>mem</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>l1</name></expr>]</index><index>[<expr><name>l2</name></expr>]</index></name><operator>!=</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><name><name>mem</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>l1</name></expr>]</index><index>[<expr><name>l2</name></expr>]</index></name></expr>;</return></block></then></if>
    <decl_stmt><decl><type><name>ll</name></type> <name>res</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>st</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if<condition>(<expr><call><name><name>st</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>l1</name></expr></argument>)</argument_list></call><operator>!=</operator><call><name><name>st</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    <if>if<condition>(<expr><call><name><name>st</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>l2</name></expr></argument>)</argument_list></call><operator>!=</operator><call><name><name>st</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>l2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    <expr_stmt><expr><name>res</name><operator>=</operator><literal type="number">1e15</literal></expr>;</expr_stmt>
    <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>pa</name><operator>!=</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block>{
        <for>for<control>(<init><decl><type><name>auto</name></type> <name>tmp</name><range>:<expr><name>st</name></expr></range></decl></init>)</control><block>{
            <expr_stmt><expr><name>res</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>tmp</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><name><name>mem</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>l1</name></expr>]</index><index>[<expr><name>l2</name></expr>]</index></name><operator>=</operator><name>res</name></expr>;</expr_stmt>
        <return>return <expr><name>res</name></expr>;</return>
    }</block></then></if>
    <for>for<control>(<init><decl><type><name>auto</name></type> <name>tmp</name><range>:<expr><name>st</name></expr></range></decl></init>)</control><block>{
        <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><name>pa</name></expr>)</condition><then><block>{
            <expr_stmt><expr><name>res</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>tmp</name></expr>]</index></name><operator>+</operator><call><name>dp</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>l2</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else<block>{
            <expr_stmt><expr><name>res</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>tmp</name></expr>]</index></name><operator>+</operator><call><name>dp</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>l2</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></for>
    <expr_stmt><expr><name><name>mem</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>l1</name></expr>]</index><index>[<expr><name>l2</name></expr>]</index></name><operator>=</operator><name>res</name></expr>;</expr_stmt>
    <return>return <expr><name>res</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>get_ans</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>pa</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>l1</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>l2</name></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>res</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>st</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if<condition>(<expr><call><name><name>st</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>l1</name></expr></argument>)</argument_list></call><operator>!=</operator><call><name><name>st</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    <if>if<condition>(<expr><call><name><name>st</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>l2</name></expr></argument>)</argument_list></call><operator>!=</operator><call><name><name>st</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>l2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    <expr_stmt><expr><name>res</name><operator>=</operator><literal type="number">1e15</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>tmp1</name></decl>;</decl_stmt>
    <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>pa</name><operator>!=</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block>{
        <for>for<control>(<init><decl><type><name>auto</name></type> <name>tmp</name><range>:<expr><name>st</name></expr></range></decl></init>)</control><block>{
            <if>if<condition>(<expr><name><name>b</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>tmp</name></expr>]</index></name><operator>&lt;</operator><name>res</name></expr>)</condition><then><block>{
                <expr_stmt><expr><name>res</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>tmp</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>tmp1</name><operator>=</operator><name>tmp</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
        <expr_stmt><expr><name><name>v</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><name>tmp1</name></expr>;</expr_stmt>
        <return>return;</return>
    }</block></then></if>
    <decl_stmt><decl><type><name>ll</name></type> <name>tmp2</name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>auto</name></type> <name>tmp</name><range>:<expr><name>st</name></expr></range></decl></init>)</control><block>{
        <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><name>pa</name></expr>)</condition><then><block>{
            <expr_stmt><expr><name>tmp2</name><operator>=</operator><name><name>b</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>tmp</name></expr>]</index></name><operator>+</operator><call><name>dp</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>l2</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>tmp2</name><operator>&lt;</operator><name>res</name></expr>)</condition><then><block>{
                <expr_stmt><expr><name>res</name><operator>=</operator><name>tmp2</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>tmp1</name><operator>=</operator><name>tmp</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then>
        <else>else<block>{
            <expr_stmt><expr><name>tmp2</name><operator>=</operator><name><name>b</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>tmp</name></expr>]</index></name><operator>+</operator><call><name>dp</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>l2</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>tmp2</name><operator>&lt;</operator><name>res</name></expr>)</condition><then><block>{
                <expr_stmt><expr><name>res</name><operator>=</operator><name>tmp2</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>tmp1</name><operator>=</operator><name>tmp</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></else></if>
    }</block></for>
    <expr_stmt><expr><name><name>v</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><name>tmp1</name></expr>;</expr_stmt>
    <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><name>pa</name></expr>)</condition><then><block>{
        <expr_stmt><expr><call><name>get_ans</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>l2</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else<block>{
        <expr_stmt><expr><call><name>get_ans</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>l2</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>)</condition><block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>ll</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block>{
            <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
                <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>b</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></for>
        <decl_stmt><decl><type><name>bool</name></type> <name>l</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ll</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
            <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld%lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>a</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>a</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>&gt;</operator><literal type="number">2</literal> <operator>||</operator> <name><name>a</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>&gt;</operator><literal type="number">2</literal></expr>)</condition><then><block>{
                <expr_stmt><expr><name>l</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
        <if>if<condition>(<expr><name>l</name></expr>)</condition><then><block>{
            <expr_stmt><expr><name>ans</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>mem</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
                <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
                    <expr_stmt><expr><name>ans</name><operator>=</operator><call><name>dp</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>get_ans</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                }</block></then></if>
            }</block></for>
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>ll</name></type> <name>tmp</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
                <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld "</literal></expr></argument>,<argument><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>tmp</name><operator>+=</operator><name><name>b</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
            }</block></for>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>tmp</name><operator>==</operator><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
        }</block></then>
        <else>else<block>{
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>-</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
        }</block></else></if>
    }</block></while>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>


</unit>
