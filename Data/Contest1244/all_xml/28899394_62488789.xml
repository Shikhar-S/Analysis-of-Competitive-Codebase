<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28899394_62488789.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ext/pb_ds/assoc_container.hpp&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ext/pb_ds/tree_policy.hpp&gt;</cpp:file></cpp:include> 
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<using>using <namespace>namespace <name>__gnu_pbds</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ld</name></cpp:macro> <cpp:value>long double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pa</name></cpp:macro> <cpp:value>pair&lt;int,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>v1d</name></cpp:macro> <cpp:value>vector&lt;int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>v2d</name></cpp:macro> <cpp:value>vector&lt;vector&lt;int&gt;&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>v1p</name></cpp:macro> <cpp:value>vector&lt;pa&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INF</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M</name></cpp:macro> <cpp:value>998244353</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RS</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>sort(v.rbegin(),v.rend())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>print</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>printf("%.16f\n", a);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PI</name></cpp:macro> <cpp:value>3.14159265</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ss</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ump</name></cpp:macro> <cpp:value>map&lt;int,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>"\n"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>v1s</name></cpp:macro> <cpp:value>vector&lt;string&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>sort(v.begin(),v.end())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mxpq</name></cpp:macro> <cpp:value>priority_queue &lt;int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mnpq</name></cpp:macro> <cpp:value>priority_queue&lt;int,vector&lt;int&gt;,greater&lt;int&gt;&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fio</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fff</name></cpp:macro> <cpp:value>cout.flush();</cpp:value></cpp:define>
 
<typedef>typedef <type><name><name>tree</name><argument_list type="generic">&lt;
<argument><expr><name>int</name></expr></argument>,
<argument><expr><name>null_type</name></expr></argument>,
<argument><expr><name><name>less</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>,
<argument><expr><name>rb_tree_tag</name></expr></argument>,
<argument><expr><name>tree_order_statistics_node_update</name></expr></argument>&gt;</argument_list></name></type>
<name>pbds</name>;</typedef>



<function><type><name>int32_t</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
 
    
    
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>k</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>v1d</name></type> <name>v</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>min</name> <init>= <expr><name>INF</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>max</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>i</name> <operator>:</operator> <name>v</name></expr></init>)</control><block>{
    	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>i</name></expr>;</expr_stmt>

    }</block></for>

    <expr_stmt><expr><call><name>S</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>e</name> <init>= <expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><name>INF</name></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><literal type="boolean">true</literal></expr>)</condition><block>{
    	<while>while<condition>(<expr><name>s</name><operator>+</operator><literal type="number">1</literal> <operator>&lt;</operator> <name>n</name> <operator>&amp;&amp;</operator> <name><name>v</name><index>[<expr><name>s</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name><name>v</name><index>[<expr><name>s</name></expr>]</index></name></expr>)</condition><block>{
    		<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
    	}</block></while>

    	<while>while<condition>(<expr><name>e</name><operator>-</operator><literal type="number">1</literal> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>v</name><index>[<expr><name>e</name></expr>]</index></name> <operator>==</operator> <name><name>v</name><index>[<expr><name>e</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block>{
    		<expr_stmt><expr><name>e</name><operator>--</operator></expr>;</expr_stmt>
    	}</block></while>

    	<if>if<condition>(<expr><name>s</name> <operator>&gt;=</operator> <name>e</name></expr>)</condition><then><block>{
    		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="number">0</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    		<return>return <expr><literal type="number">0</literal></expr>;</return>
    	}</block></then></if>

    	<decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><name>s</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    	<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><name>n</name><operator>-</operator><name>e</name></expr></init></decl>;</decl_stmt>

    	<expr_stmt><expr><name>ans</name> <operator>=</operator> <name><name>v</name><index>[<expr><name>e</name></expr>]</index></name> <operator>-</operator> <name><name>v</name><index>[<expr><name>s</name></expr>]</index></name></expr>;</expr_stmt>

    	<if>if<condition>(<expr><name>a</name> <operator>&lt;</operator> <name>b</name></expr>)</condition><then><block>{
    		<decl_stmt><decl><type><name>int</name></type> <name>temp</name></decl> ;</decl_stmt>
    		<if>if<condition>(<expr><operator>(</operator><name><name>v</name><index>[<expr><name>s</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>v</name><index>[<expr><name>s</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>a</name> <operator>&lt;</operator> <name>k</name></expr>)</condition><then><block>{
    		    <expr_stmt><expr><name>temp</name> <operator>=</operator> <operator>(</operator><name><name>v</name><index>[<expr><name>s</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>v</name><index>[<expr><name>s</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>a</name></expr> ;</expr_stmt>
    		}</block></then><else>else<block>{
    		    <expr_stmt><expr><name>temp</name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
    		}</block></else></if>
    		
    		<expr_stmt><expr><name>k</name><operator>-=</operator><name>temp</name></expr>;</expr_stmt>
    		<expr_stmt><expr><name>ans</name> <operator>-=</operator> <name>temp</name> <operator>/</operator> <name>a</name></expr>;</expr_stmt>
    		<expr_stmt><expr><name><name>v</name><index>[<expr><name>s</name></expr>]</index></name> <operator>=</operator> <name><name>v</name><index>[<expr><name>s</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    	}</block></then><else>else<block>{
            
            <decl_stmt><decl><type><name>int</name></type> <name>temp</name></decl>;</decl_stmt>
    		<if>if<condition>(<expr><operator>(</operator><name><name>v</name><index>[<expr><name>e</name></expr>]</index></name> <operator>-</operator> <name><name>v</name><index>[<expr><name>e</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>b</name> <operator>&lt;</operator> <name>k</name></expr>)</condition><then><block>{
    		    <expr_stmt><expr><name>temp</name> <operator>=</operator> <operator>(</operator><name><name>v</name><index>[<expr><name>e</name></expr>]</index></name> <operator>-</operator> <name><name>v</name><index>[<expr><name>e</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>b</name></expr>;</expr_stmt>
    		}</block></then><else>else<block>{
    		    <expr_stmt><expr><name>temp</name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
    		}</block></else></if>
    		
    		<expr_stmt><expr><name>k</name><operator>-=</operator><name>temp</name></expr>;</expr_stmt>
    		<expr_stmt><expr><name>ans</name> <operator>-=</operator> <name>temp</name> <operator>/</operator> <name>b</name></expr>;</expr_stmt>
    		<expr_stmt><expr><name><name>v</name><index>[<expr><name>e</name></expr>]</index></name> <operator>=</operator> <name><name>v</name><index>[<expr><name>e</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

    	}</block></else></if>

    	<if>if<condition>(<expr><name>k</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
    		<break>break;</break>
    	}</block></then></if>

    	

    }</block></while>

    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>



 
 
}</block></function></unit>
