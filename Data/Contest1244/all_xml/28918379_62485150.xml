<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28918379_62485150.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>c1</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>c2</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>c3</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>graph</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tint1</name></decl>, <decl><type ref="prev"/><name>tint2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dpStart</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dpEnd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>best</name> <init>= <expr><operator>(</operator><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">50</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>bestPainting</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>tPainting</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>long</name> <name>long</name></type> <name>cost</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list><block>{
	<if>if<condition>(<expr><name>c</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name><name>c1</name><index>[<expr><name>v</name></expr>]</index></name></expr>;</return></block></then></if>
	<if>if<condition>(<expr><name>c</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name><name>c2</name><index>[<expr><name>v</name></expr>]</index></name></expr>;</return></block></then>
	<else>else <block type="pseudo"><return>return <expr><name><name>c3</name><index>[<expr><name>v</name></expr>]</index></name></expr>;</return></block></else></if>
}</block></function>

<function><type><name>int</name></type> <name>nextV</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prev</name></decl></parameter>)</parameter_list><block>{
	<if>if<condition>(<expr><name><name>graph</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>prev</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name><name>graph</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</return></block></then>
	<else>else <block type="pseudo"><return>return <expr><name><name>graph</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return></block></else></if>	
}</block></function>

<function><type><name>void</name></type> <name>getCost</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>color1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>color2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>color3</name></decl></parameter>)</parameter_list><block>{
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>totalCost</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>totalCost</name> <operator>+=</operator> <call><name>cost</name><argument_list>(<argument><expr><name>dpStart</name></expr></argument>, <argument><expr><name>color1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tPainting</name><index>[<expr><name>dpStart</name></expr>]</index></name> <operator>=</operator> <name>color1</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>prev</name> <init>= <expr><name>dpStart</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>curr</name> <init>= <expr><name><name>graph</name><index>[<expr><name>dpStart</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>nw</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control><block>{
		<switch>switch<condition>(<expr><name>nw</name> <operator>%</operator> <literal type="number">3</literal></expr>)</condition><block>{
			<case>case <expr><literal type="number">0</literal></expr>:</case>
				<expr_stmt><expr><name>totalCost</name> <operator>+=</operator> <call><name>cost</name><argument_list>(<argument><expr><name>curr</name></expr></argument>, <argument><expr><name>color1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>tPainting</name><index>[<expr><name>curr</name></expr>]</index></name> <operator>=</operator> <name>color1</name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="number">1</literal></expr>:</case>
				<expr_stmt><expr><name>totalCost</name> <operator>+=</operator> <call><name>cost</name><argument_list>(<argument><expr><name>curr</name></expr></argument>, <argument><expr><name>color2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>tPainting</name><index>[<expr><name>curr</name></expr>]</index></name> <operator>=</operator> <name>color2</name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="number">2</literal></expr>:</case>
				<expr_stmt><expr><name>totalCost</name> <operator>+=</operator> <call><name>cost</name><argument_list>(<argument><expr><name>curr</name></expr></argument>, <argument><expr><name>color3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>tPainting</name><index>[<expr><name>curr</name></expr>]</index></name> <operator>=</operator> <name>color3</name></expr>;</expr_stmt>
				<break>break;</break>
		}</block></switch>
		<if>if<condition>(<expr><name>curr</name> <operator>==</operator> <name>dpEnd</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
		<expr_stmt><expr><name>nw</name><operator>++</operator></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>currCopy</name> <init>= <expr><name>curr</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>curr</name> <operator>=</operator> <call><name>nextV</name><argument_list>(<argument><expr><name>curr</name></expr></argument>, <argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>currCopy</name></expr>;</expr_stmt>
	}</block></for>
	<if>if<condition>(<expr><name>totalCost</name> <operator>&lt;</operator> <name>best</name></expr>)</condition><then><block>{
		<expr_stmt><expr><name>best</name> <operator>=</operator> <name>totalCost</name></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>bestPainting</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>tPainting</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
	}</block></then></if>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>c1</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>c2</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>c3</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>tint1</name> <operator>&gt;&gt;</operator> <name>tint2</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>tint1</name><operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>tint2</name><operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>graph</name><index>[<expr><name>tint1</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>tint2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>graph</name><index>[<expr><name>tint2</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>tint1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><if>if<condition>(<expr><name><name>graph</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><then><block>{
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></then></if></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><if>if<condition>(<expr><name><name>graph</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then><block>{
		<if>if<condition>(<expr><name>dpStart</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name>dpStart</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
			<continue>continue;</continue>
		}</block></then></if>
		<expr_stmt><expr><name>dpEnd</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
	}</block></then></if></block></for>

	<for>for<control>(<init><decl><type><name>int</name></type> <name>color1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>color1</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>color1</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>color2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>color2</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>color2</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>color3</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>color3</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>color3</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><if>if<condition>(<expr><name>color1</name> <operator>!=</operator> <name>color2</name> <operator>&amp;&amp;</operator> <name>color2</name> <operator>!=</operator> <name>color3</name> <operator>&amp;&amp;</operator> <name>color1</name> <operator>!=</operator> <name>color3</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>getCost</name><argument_list>(<argument><expr><name>color1</name></expr></argument>, <argument><expr><name>color2</name></expr></argument>, <argument><expr><name>color3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></block></for></block></for></block></for>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>best</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>bestPainting</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block></for>
}</block></function></unit>
