<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28919151_62478424.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>scanVec</name><parameter_list>(<parameter><type><name>vec</name></type></parameter> , <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = 0; i &lt; n ; i++){ cin&gt;&gt;vec[i];}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>printVec</name><parameter_list>(<parameter><type><name>vec</name></type></parameter> , <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = 0; i &lt; n ; i++){ cout&lt;&lt;vec[i]&lt;&lt;" ";}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type>  <name>MOD</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type>  <name>N</name> <init>= <expr><literal type="number">1e5</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl> , <decl><type ref="prev"/><name>p</name></decl> , <decl><type ref="prev"/><name>w</name></decl> , <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>p</name><operator>&gt;&gt;</operator><name>w</name><operator>&gt;&gt;</operator><name>d</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>g</name> <init>= <expr><call><name>__gcd</name><argument_list>(<argument><expr><name>w</name></expr></argument> , <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>p</name> <operator>%</operator> <name>g</name></expr>)</condition><then><block>{
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>-</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if> 
    <expr_stmt><expr><name>w</name> <operator>/=</operator> <name>g</name></expr>;</expr_stmt> <expr_stmt><expr><name>d</name> <operator>/=</operator><name>g</name></expr>;</expr_stmt> <expr_stmt><expr><name>p</name> <operator>/=</operator> <name>g</name></expr>;</expr_stmt>
    <comment type="line">// cout&lt;&lt;w&lt;&lt;" "&lt;&lt;d&lt;&lt;" "&lt;&lt;p&lt;&lt;endl;</comment>
    <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>*</operator> <name>d</name><operator>)</operator> <operator>%</operator> <name>w</name> <operator>==</operator> <name>p</name> <operator>%</operator> <name>w</name></expr>)</condition><then><block>{
            <decl_stmt><decl><type><name>ll</name></type> <name>x</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name>n</name> <operator>-</operator> <name>i</name></expr></argument> , <argument><expr><operator>(</operator><name>p</name> <operator>-</operator> <name>i</name> <operator>*</operator> <name>d</name><operator>)</operator> <operator>/</operator> <name>w</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ll</name></type> <name>y</name> <init>= <expr><operator>(</operator><name>p</name> <operator>-</operator> <name>w</name> <operator>*</operator> <name>x</name><operator>)</operator><operator>/</operator> <name>d</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ll</name></type> <name>z</name> <init>= <expr><name>n</name> <operator>-</operator> <name>x</name> <operator>-</operator> <name>y</name></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>y</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>z</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>x</name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name>y</name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name>z</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        }</block></then></if>
    }</block></for>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>-</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
