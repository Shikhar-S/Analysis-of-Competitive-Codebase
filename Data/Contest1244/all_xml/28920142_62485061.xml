<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28920142_62485061.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ull</name></cpp:macro> <cpp:value>unsigned long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INF</name></cpp:macro> <cpp:value>1000000000000000000</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>w</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>p</name> <operator>&gt;&gt;</operator> <name>w</name> <operator>&gt;&gt;</operator> <name>d</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>flag</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>ll</name></type> <name>i</name></decl>;</decl_stmt>

    <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>d</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <if>if<condition>(<expr><operator>(</operator><name>p</name> <operator>-</operator> <operator>(</operator><name>i</name><operator>*</operator><name>w</name><operator>)</operator><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
            <if>if<condition>(<expr><operator>(</operator><operator>(</operator><name>p</name> <operator>-</operator> <operator>(</operator><name>i</name><operator>*</operator><name>w</name><operator>)</operator><operator>)</operator><operator>%</operator><name>d</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then><block>{

                <decl_stmt><decl><type><name>ll</name></type> <name>j</name> <init>= <expr><operator>(</operator><name>p</name> <operator>-</operator> <operator>(</operator><name>i</name><operator>*</operator><name>w</name><operator>)</operator><operator>)</operator><operator>/</operator><name>d</name></expr></init></decl>;</decl_stmt>

                <if>if<condition>(<expr><operator>(</operator><name>i</name><operator>+</operator><name>j</name><operator>)</operator> <operator>&lt;=</operator> <name>n</name></expr>)</condition><then><block>{
                    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>i</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name>j</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>n</name><operator>-</operator><operator>(</operator><name>i</name><operator>+</operator><name>j</name><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
                    <break>break;</break>
                }</block></then>
                <else>else<block>{
                    <decl_stmt><decl><type><name>ll</name></type> <name>num</name> <init>= <expr><operator>(</operator><operator>(</operator><name>p</name><operator>-</operator><operator>(</operator><name>i</name><operator>*</operator><name>w</name><operator>)</operator><operator>)</operator><operator>/</operator><name>d</name><operator>)</operator><operator>/</operator><name>w</name></expr></init></decl>;</decl_stmt>

                    <decl_stmt><decl><type><name>ll</name></type> <name>j</name> <init>= <expr><operator>(</operator><name>i</name><operator>+</operator><operator>(</operator><name>num</name><operator>*</operator><name>d</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

                    <decl_stmt><decl><type><name>ll</name></type> <name>ot_num</name> <init>= <expr><operator>(</operator><operator>(</operator><name>p</name><operator>-</operator><operator>(</operator><name>i</name><operator>*</operator><name>w</name><operator>)</operator><operator>)</operator><operator>/</operator><name>d</name><operator>)</operator> <operator>-</operator> <operator>(</operator><name>num</name><operator>*</operator><name>w</name><operator>)</operator></expr></init></decl>;</decl_stmt>

                    <if>if<condition>(<expr><operator>(</operator><name>ot_num</name><operator>+</operator><name>j</name><operator>)</operator><operator>&lt;=</operator><name>n</name></expr>)</condition><then><block>{
                        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>j</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name>ot_num</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>n</name><operator>-</operator><operator>(</operator><name>ot_num</name><operator>+</operator><name>j</name><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
                        <break>break;</break>
                    }</block></then></if>
                }</block></else></if>
            }</block></then></if>
        }</block></then>
        <else>else<block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
            <break>break;</break> 
        }</block></else></if>
    }</block></for>

    <if>if<condition>(<expr><name>i</name> <operator>==</operator> <name>d</name></expr>)</condition><then><block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    }</block></then></if>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
