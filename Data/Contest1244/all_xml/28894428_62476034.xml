<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28894428_62476034.cpp"><comment type="block">/*Program from Luvwgyx*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<function><type><name>int</name></type> <name>read</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>x</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>f</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt><decl_stmt><decl><type><name>char</name></type> <name>ch</name><init>=<expr><call><name>getchar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name><name>ch</name><argument_list type="generic">&lt;<argument><expr><literal type="char">'0'</literal><operator>||</operator><name>ch</name></expr></argument>&gt;</argument_list></name><literal type="char">'9'</literal></expr>)</condition><block>{<if>if<condition>(<expr><name>ch</name><operator>==</operator><literal type="char">'-'</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>f</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if><expr_stmt><expr><name>ch</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>}</block></while>
    <while>while<condition>(<expr><name>ch</name><operator>&gt;=</operator><literal type="char">'0'</literal><operator>&amp;&amp;</operator><name>ch</name><operator>&lt;=</operator><literal type="char">'9'</literal></expr>)</condition><block>{<expr_stmt><expr><name>x</name><operator>=</operator><name>x</name><operator>*</operator><literal type="number">10</literal><operator>+</operator><name>ch</name><operator>-</operator><literal type="char">'0'</literal></expr>;</expr_stmt><expr_stmt><expr><name>ch</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>}</block></while>
    <return>return <expr><name>x</name><operator>*</operator><name>f</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>print</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><name>x</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><name>x</name><operator>=</operator><operator>-</operator><name>x</name></expr>;</expr_stmt></block></then></if>
    <if>if<condition>(<expr><name>x</name><operator>&gt;</operator><literal type="number">9</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><name>x</name><operator>/</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    <expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><name>x</name><operator>%</operator><literal type="number">10</literal><operator>+</operator><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function>
<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name><init>=<expr><call><name>read</name><argument_list>()</argument_list></call></expr></init></decl>,<decl><type ref="prev"/><name>p</name><init>=<expr><call><name>read</name><argument_list>()</argument_list></call></expr></init></decl>,<decl><type ref="prev"/><name>w</name><init>=<expr><call><name>read</name><argument_list>()</argument_list></call></expr></init></decl>,<decl><type ref="prev"/><name>d</name><init>=<expr><call><name>read</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>gcd</name><init>=<expr><call><name>__gcd</name><argument_list>(<argument><expr><name>w</name></expr></argument>,<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>p</name><operator>%</operator><name>gcd</name></expr>)</condition><then><block>{<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><literal type="number">0</literal></expr>;</return>}</block></then></if>
    <expr_stmt><expr><name>p</name><operator>/=</operator><name>gcd</name></expr>;</expr_stmt><expr_stmt><expr><name>w</name><operator>/=</operator><name>gcd</name></expr>;</expr_stmt><expr_stmt><expr><name>d</name><operator>/=</operator><name>gcd</name></expr>;</expr_stmt>
    <comment type="line">//printf("%lld %lld %lld\n",p,w,d);</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>ans1</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt><decl_stmt><decl><type><name>bool</name></type> <name>flag</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>ans1</name><operator>&lt;=</operator><name>n</name></expr>)</condition><block>{
        <if>if<condition>(<expr><name>w</name><operator>*</operator><name>ans1</name><operator>&gt;</operator><name>p</name></expr>)</condition><then><block>{<expr_stmt><expr><name>flag</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt><break>break;</break>}</block></then></if>
        <if>if<condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><name>p</name><operator>-</operator><name>w</name><operator>*</operator><name>ans1</name><operator>)</operator><operator>%</operator><name>d</name><operator>)</operator></expr>)</condition><then><block type="pseudo"><break>break;</break></block></then></if>
        <expr_stmt><expr><name>ans1</name><operator>++</operator></expr>;</expr_stmt>
    }</block></while><comment type="line">//write(ans1);</comment>
    <if>if<condition>(<expr><name>flag</name></expr>)</condition><then><block>{<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><literal type="number">0</literal></expr>;</return>}</block></then></if>
    <decl_stmt><decl><type><name>int</name></type> <name>ans2</name><init>=<expr><operator>(</operator><name>p</name><operator>-</operator><name>w</name><operator>*</operator><name>ans1</name><operator>)</operator><operator>/</operator><name>d</name></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>d</name><operator>&lt;</operator><name>w</name></expr>)</condition><then><block>{<decl_stmt><decl><type><name>int</name></type> <name>tmp</name><init>=<expr><name>ans2</name><operator>/</operator><name>w</name></expr></init></decl>;</decl_stmt><expr_stmt><expr><name>ans1</name><operator>+=</operator><name>d</name><operator>*</operator><name>tmp</name></expr>;</expr_stmt><expr_stmt><expr><name>ans2</name><operator>-=</operator><name>w</name><operator>*</operator><name>tmp</name></expr>;</expr_stmt>}</block></then></if>
    <if>if<condition>(<expr><name>ans1</name><operator>+</operator><name>ans2</name><operator>&gt;</operator><name>n</name></expr>)</condition><then><block>{<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><literal type="number">0</literal></expr>;</return>}</block></then></if>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld %lld %lld\n"</literal></expr></argument>,<argument><expr><name>ans1</name></expr></argument>,<argument><expr><name>ans2</name></expr></argument>,<argument><expr><name>n</name><operator>-</operator><name>ans1</name><operator>-</operator><name>ans2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
