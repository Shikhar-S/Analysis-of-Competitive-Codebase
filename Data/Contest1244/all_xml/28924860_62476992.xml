<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28924860_62476992.cpp">
  <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>comment</name><name>(</name><name>linker</name><name>,</name> <cpp:literal>"/stack:200000000"</cpp:literal><name>)</name></cpp:pragma>
  <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name> <name>(</name><cpp:literal>"Ofast"</cpp:literal><name>)</name></cpp:pragma>
  <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>target</name> <name>(</name><cpp:literal>"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native"</cpp:literal><name>)</name></cpp:pragma>


  <cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
  <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_map&gt;</cpp:file></cpp:include> 
  <using>using <namespace>namespace <name>std</name>;</namespace></using>
  <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOS</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);</cpp:value></cpp:define>

  <typedef>typedef <type><name>long</name> <name>long</name> <name>int</name></type> <name>ll</name>;</typedef> 

  <decl_stmt><decl><type><name>ll</name></type> <name>mod</name><init>=<expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ll</name></type> <name>mod1</name><init>=<expr><literal type="number">998244351</literal></expr></init></decl>;</decl_stmt>
    <function><type><name>ll</name></type> <name>power</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list>
        <block>{
            <if>if<condition>(<expr><name>b</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then>
            <elseif>else <if>if<condition>(<expr><name>b</name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
                <block type="pseudo"><return>return <expr><call><name>power</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><operator>(</operator><name>a</name><operator>%</operator><name>mod</name><operator>)</operator><operator>*</operator><operator>(</operator><name>a</name><operator>%</operator><name>mod</name><operator>)</operator><operator>)</operator><operator>%</operator><name>mod</name><operator>)</operator></expr></argument>,<argument><expr><name>b</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>%</operator><name>mod</name></expr>;</return></block></then></if></elseif>
         <else>else <block type="pseudo"><return>return <expr><operator>(</operator><operator>(</operator><name>a</name><operator>%</operator><name>mod</name><operator>)</operator><operator>*</operator><operator>(</operator><call><name>power</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><operator>(</operator><name>a</name><operator>%</operator><name>mod</name><operator>)</operator><operator>*</operator><operator>(</operator><name>a</name><operator>%</operator><name>mod</name><operator>)</operator><operator>)</operator><operator>%</operator><name>mod</name><operator>)</operator></expr></argument>,<argument><expr><name>b</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>%</operator><name>mod</name><operator>)</operator><operator>)</operator><operator>%</operator><name>mod</name></expr>;</return></block></else></if>
        }</block></function>

  
  <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>'\n'</cpp:value></cpp:define>

  <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>ll</cpp:value></cpp:define>
        <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>v</name><index>[<expr><literal type="number">100001</literal></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name><name>co</name><index>[<expr><literal type="number">100001</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name><name>x</name><index>[<expr><literal type="number">100001</literal></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>temp</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>par</name></decl></parameter>)</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>x1</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>v</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
            <block>{
                <if>if<condition>(<expr><name><name>v</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name>par</name></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name>x1</name><operator>=</operator><name><name>v</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></for>
            <if>if<condition>(<expr><name>x1</name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
                <block type="pseudo"><return>return;</return></block></then></if>

            <if>if<condition>(<expr><name><name>x</name><index>[<expr><name>u</name></expr>]</index></name><operator>==</operator><literal type="number">1</literal> <operator>and</operator> <name><name>x</name><index>[<expr><name>par</name></expr>]</index></name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name><name>x</name><index>[<expr><name>x1</name></expr>]</index></name><operator>=</operator><literal type="number">3</literal></expr>;</expr_stmt>
            }</block></then></if>

            <if>if<condition>(<expr><name><name>x</name><index>[<expr><name>u</name></expr>]</index></name><operator>==</operator><literal type="number">2</literal> <operator>and</operator> <name><name>x</name><index>[<expr><name>par</name></expr>]</index></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name><name>x</name><index>[<expr><name>x1</name></expr>]</index></name><operator>=</operator><literal type="number">3</literal></expr>;</expr_stmt>
            }</block></then></if>
            
            <if>if<condition>(<expr><name><name>x</name><index>[<expr><name>u</name></expr>]</index></name><operator>==</operator><literal type="number">1</literal> <operator>and</operator> <name><name>x</name><index>[<expr><name>par</name></expr>]</index></name><operator>==</operator><literal type="number">3</literal></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name><name>x</name><index>[<expr><name>x1</name></expr>]</index></name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt>
            }</block></then></if>
            
            <if>if<condition>(<expr><name><name>x</name><index>[<expr><name>u</name></expr>]</index></name><operator>==</operator><literal type="number">3</literal> <operator>and</operator> <name><name>x</name><index>[<expr><name>par</name></expr>]</index></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name><name>x</name><index>[<expr><name>x1</name></expr>]</index></name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt>
            }</block></then></if>
            
            <if>if<condition>(<expr><name><name>x</name><index>[<expr><name>u</name></expr>]</index></name><operator>==</operator><literal type="number">2</literal> <operator>and</operator> <name><name>x</name><index>[<expr><name>par</name></expr>]</index></name><operator>==</operator><literal type="number">3</literal></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name><name>x</name><index>[<expr><name>x1</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
            }</block></then></if>
            
            <if>if<condition>(<expr><name><name>x</name><index>[<expr><name>u</name></expr>]</index></name><operator>==</operator><literal type="number">3</literal> <operator>and</operator> <name><name>x</name><index>[<expr><name>par</name></expr>]</index></name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name><name>x</name><index>[<expr><name>x1</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>x1</name></expr></argument>,<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            
        }</block></function>
  
  <function><type><name>int32_t</name></type> <name>main</name><parameter_list>()</parameter_list>
  <block>{
      <decl_stmt><decl><type><name>IOS</name></type>
      <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ONLINE_JUDGE</name></cpp:ifndef>
      <name>freopen</name><argument_list>(<argument><expr><literal type="string">"input.txt"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"output.txt"</literal></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      

      <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
      <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>co</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block></for>
       <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>co</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt></block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>co</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt></block></for>
        
    <decl_stmt><decl><type><name>int</name></type> <name><name>deg</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>deg</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>deg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
      <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
      <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>a</name><operator>&gt;&gt;</operator><name>b</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>v</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>v</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>deg</name><index>[<expr><name>a</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>deg</name><index>[<expr><name>b</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
      }</block></for>
      <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
      <block>{
        <if>if<condition>(<expr><name><name>deg</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;=</operator><literal type="number">3</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        }</block></then></if>
      }</block></for>
      <decl_stmt><decl><type><name>int</name></type> <name>s</name><init>=<expr><name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
      
      <decl_stmt><decl><type><name>int</name></type> <name><name>pe</name><index>[]</index></name><init>=<expr><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>cas</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>p</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>temp</name><init>=<expr><literal type="number">1e18</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>te</name></decl>;</decl_stmt>
      <do>do<block>{

        <decl_stmt><decl><type><name>int</name></type> <name>cp</name></decl>,<decl><type ref="prev"/><name>cp1</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name><name>pe</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>x</name><index>[<expr><name>s</name></expr>]</index></name><operator>=</operator><name><name>pe</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
        <block>{
            <expr_stmt><expr><name>ans</name><operator>+=</operator><name><name>co</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
        }</block></for>
        <if>if<condition>(<expr><name>temp</name><operator>&gt;</operator><name>ans</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>temp</name><operator>=</operator><name>ans</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>te</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>te</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>pe</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>te</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>pe</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>te</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>pe</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

      }</block>
      while<condition>(<expr><call><name>next_permutation</name><argument_list>(<argument><expr><name>pe</name></expr></argument>,<argument><expr><name>pe</name><operator>+</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition>;</do>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name><name>te</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>x</name><index>[<expr><name>s</name></expr>]</index></name><operator>=</operator><name><name>te</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>temp</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
            <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;&lt;</operator><literal type="string">" "</literal></expr>;</expr_stmt></block></for>



  }</block></function>   </unit>
