<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28934761_62482249.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name><name>v</name><index>[<expr><literal type="number">100000</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>ans</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>c</name><index>[<expr><literal type="number">100009</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>pat</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>ll</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>par</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>lev</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>sum</name><init>=<expr><name><name>c</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name><name>pat</name><index>[<expr><name>lev</name><operator>%</operator><literal type="number">3</literal></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>lev</name><operator>++</operator></expr>;</expr_stmt><empty_stmt>;</empty_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>v</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>y</name><init>=<expr><name><name>v</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>y</name><operator>==</operator><name>par</name></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
        <expr_stmt><expr><name>sum</name><operator>+=</operator><call><name>dfs</name><argument_list>(<argument><expr><name>y</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>lev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <return>return <expr><name>sum</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name>int</name></type> <name><name>out</name><index>[<expr><literal type="number">100009</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>df</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>par</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>lev</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><name><name>out</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><name>lev</name><operator>%</operator><literal type="number">3</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>lev</name><operator>++</operator></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>v</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>y</name><init>=<expr><name><name>v</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>y</name><operator>==</operator><name>par</name></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
        <expr_stmt><expr><call><name>df</name><argument_list>(<argument><expr><name>y</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>lev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><name>lev</name><operator>--</operator></expr>;</expr_stmt>
}</block></function>
<decl_stmt><decl><type><name>int</name></type> <name><name>org</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></for>
    }</block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>x</name><operator>&gt;&gt;</operator><name>y</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>x</name><operator>--</operator></expr>;</expr_stmt><expr_stmt><expr><name>y</name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>v</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>v</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>root</name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <if>if<condition>(<expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>&gt;=</operator><literal type="number">3</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        }</block></then></if>
        <if>if<condition>(<expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>root</name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></then></if>
    }</block></for>
    <expr_stmt><expr><name>ans</name><operator>=</operator><literal type="number">1e18</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><name><name>pat</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <if>if<condition>(<expr><name>j</name><operator>==</operator><name>i</name></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
            <expr_stmt><expr><name><name>pat</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name>j</name></expr>;</expr_stmt>
            <for>for<control>(<init><decl><type><name>int</name></type> <name>k</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>k</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
            <block>{
                <if>if<condition>(<expr><name>k</name><operator>==</operator><name>j</name></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
                <if>if<condition>(<expr><name>k</name><operator>==</operator><name>i</name></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
                <expr_stmt><expr><name><name>pat</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><name>k</name></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>ll</name></type> <name>x</name><init>=<expr><call><name>dfs</name><argument_list>(<argument><expr><name>root</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if<condition>(<expr><name>ans</name><operator>&gt;=</operator><name>x</name></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name>ans</name><operator>=</operator><name>x</name></expr>;</expr_stmt>
                    <for>for<control>(<init><decl><type><name>int</name></type> <name>l</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>l</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>l</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name><name>org</name><index>[<expr><name>l</name></expr>]</index></name><operator>=</operator><name><name>pat</name><index>[<expr><name>l</name></expr>]</index></name></expr>;</expr_stmt></block></for>
                }</block></then></if>
            }</block></for>
        }</block></for>
    }</block></for>
     <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><literal type="string">"\n"</literal></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>df</name><argument_list>(<argument><expr><name>root</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>org</name><index>[<expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>+</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="string">" "</literal></expr>;</expr_stmt></block></for>
}</block></function>
</unit>
