<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28912232_62499095.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>N</name></decl>, <decl><type ref="prev"/><name>K</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>arr</name><index>[<expr><literal type="number">100100</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>leftopr</name><index>[<expr><literal type="number">100100</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>rightopr</name><index>[<expr><literal type="number">100100</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>N</name> <operator>&gt;&gt;</operator> <name>K</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>arr</name></expr></argument>, <argument><expr><name>arr</name> <operator>+</operator> <name>N</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<expr_stmt><expr><name><name>leftopr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>*</operator> <operator>(</operator><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>arr</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
	}</block></for>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>N</name> <operator>-</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
	<block>{
		<expr_stmt><expr><name><name>rightopr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>N</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>i</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>arr</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
	}</block></for>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>leftbor</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>rightbor</name> <init>= <expr><name>N</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>ans</name></decl>;</decl_stmt>
	<while>while <condition>(<expr><operator>(</operator><name>K</name> <operator>&gt;=</operator> <name><name>leftopr</name><index>[<expr><name>leftbor</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>rightopr</name><index>[<expr><name>rightbor</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>)</condition>
	<block>{
			<expr_stmt><expr><name>leftbor</name><operator>++</operator></expr>;</expr_stmt>
			<if>if <condition>(<expr><name>leftbor</name> <operator>&lt;</operator> <name>rightbor</name></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><name>rightbor</name><operator>--</operator></expr>;</expr_stmt></block></then></if>
			<expr_stmt><expr><name>K</name> <operator>-=</operator> <name><name>leftopr</name><index>[<expr><name>leftbor</name></expr>]</index></name> <operator>+</operator> <name><name>rightopr</name><index>[<expr><name>rightbor</name></expr>]</index></name></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>leftbor</name> <operator>==</operator> <name>rightbor</name></expr>)</condition><then>
			<block type="pseudo"><break>break;</break></block></then></if>
	}</block></while>
	<expr_stmt><expr><name>ans</name> <operator>=</operator> <name><name>arr</name><index>[<expr><name>rightbor</name></expr>]</index></name> <operator>-</operator> <name><name>arr</name><index>[<expr><name>leftbor</name></expr>]</index></name></expr>;</expr_stmt>
	<if>if <condition>(<expr><name><name>arr</name><index>[<expr><name>leftbor</name></expr>]</index></name> <operator>&lt;</operator> <name><name>arr</name><index>[<expr><name>rightbor</name></expr>]</index></name></expr>)</condition><then>
		<block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>-=</operator> <name>K</name> <operator>/</operator> <call><name>min</name><argument_list>(<argument><expr><operator>(</operator><name>N</name> <operator>-</operator> <name>rightbor</name><operator>)</operator></expr></argument>, <argument><expr><name>leftbor</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name></expr>;</expr_stmt>
}</block></function></unit>
