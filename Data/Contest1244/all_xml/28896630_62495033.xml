<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28896630_62495033.cpp"><comment type="line">//besmellah</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name> <init>= <expr><literal type="number">1e5</literal> <operator>+</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>map</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>cnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>set</name> <argument_list type="generic">&lt;<argument><expr><name><name>pair</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>M</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int32_t</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>k</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>cnt</name><index>[<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>++</operator></expr>;</expr_stmt>
	}</block></for>
	<for>for <control>(<init><decl><type><name>auto</name></type> <name>c</name><range>: <expr><name>cnt</name></expr></range></decl></init>)</control><block>{
		<expr_stmt><expr><call><name><name>M</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<while>while <condition>(<expr><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block>{
		<if>if <condition>(<expr><call><name><name>M</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then><block>{
			<break>break;</break>
		}</block></then></if>
		<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><operator>(</operator><operator>*</operator><call><name><name>M</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><name>second</name></expr></init></decl>, <decl><type ref="prev"/><name>y</name> <init>= <expr><operator>(</operator><operator>*</operator><call><name><name>M</name><operator>.</operator><name>rbegin</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><name>second</name></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>x</name> <operator>&lt;=</operator> <name>y</name></expr>)</condition><then><block>{
			<decl_stmt><decl><type><name>auto</name></type> <name>q</name> <init>= <expr><call><name><name>M</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><name><operator>(</operator><operator>*</operator><name>q</name><operator>)</operator><operator>.</operator><name>first</name></name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>q</name> <operator>++</operator></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>z</name> <init>= <expr><name><operator>(</operator><operator>*</operator><name>q</name><operator>)</operator><operator>.</operator><name>first</name></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>b</name> <operator>+</operator> <operator>(</operator><name>k</name> <operator>/</operator> <name>x</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>d</name> <operator>==</operator> <name>b</name></expr>)</condition><then>
				<block type="pseudo"><break>break;</break></block></then></if>
			<expr_stmt><expr><name>k</name> <operator>-=</operator> <name>x</name> <operator>*</operator> <operator>(</operator><name>d</name> <operator>-</operator> <name>b</name><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>cnt</name><index>[<expr><name>b</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>M</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><block>{<expr><name>b</name></expr>, <expr><name>x</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>M</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><block>{<expr><name>d</name></expr>, <expr><name><name>cnt</name><index>[<expr><name>d</name></expr>]</index></name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>cnt</name><index>[<expr><name>d</name></expr>]</index></name> <operator>+=</operator> <name>x</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>M</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><block>{<expr><name>d</name></expr>, <expr><name><name>cnt</name><index>[<expr><name>d</name></expr>]</index></name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<else>else<block>{
			<decl_stmt><decl><type><name>auto</name></type> <name>q</name> <init>= <expr><call><name><name>M</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>q</name> <operator>--</operator></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><name><operator>(</operator><operator>*</operator><name>q</name><operator>)</operator><operator>.</operator><name>first</name></name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>q</name> <operator>--</operator></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>z</name> <init>= <expr><name><operator>(</operator><operator>*</operator><name>q</name><operator>)</operator><operator>.</operator><name>first</name></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><call><name>max</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>b</name> <operator>-</operator> <operator>(</operator><name>k</name> <operator>/</operator> <name>y</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>d</name> <operator>==</operator> <name>b</name></expr>)</condition><then>
				<block type="pseudo"><break>break;</break></block></then></if>
			<expr_stmt><expr><name>k</name> <operator>-=</operator> <name>y</name> <operator>*</operator> <operator>(</operator><name>b</name> <operator>-</operator> <name>d</name><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>cnt</name><index>[<expr><name>b</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>M</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><block>{<expr><name>b</name></expr>, <expr><name>y</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>M</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><block>{<expr><name>d</name></expr>, <expr><name><name>cnt</name><index>[<expr><name>d</name></expr>]</index></name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>cnt</name><index>[<expr><name>d</name></expr>]</index></name> <operator>+=</operator> <name>y</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>M</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><block>{<expr><name>d</name></expr>, <expr><name><name>cnt</name><index>[<expr><name>d</name></expr>]</index></name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
	}</block></while>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>(</operator><operator>*</operator><call><name><name>M</name><operator>.</operator><name>rbegin</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><name>first</name> <operator>-</operator> <operator>(</operator><operator>*</operator><call><name><name>M</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><name>first</name></expr>;</expr_stmt>
}</block></function>
</unit>
