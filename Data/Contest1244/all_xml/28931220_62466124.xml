<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28931220_62466124.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inf</name></cpp:macro> <cpp:value>0x7f7f7f7f</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<function><type><name>int</name></type> <name>read</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>x</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>f</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt><decl_stmt><decl><type><name>char</name></type> <name>ch</name><init>=<expr><call><name>getchar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name><name>ch</name><argument_list type="generic">&lt;<argument><expr><literal type="char">'0'</literal><operator>||</operator><name>ch</name></expr></argument>&gt;</argument_list></name><literal type="char">'9'</literal></expr>)</condition> <block>{<if>if<condition>(<expr><name>ch</name><operator>==</operator><literal type="char">'-'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>f</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if><expr_stmt><expr><name>ch</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>}</block></while>
	<while>while<condition>(<expr><name>ch</name><operator>&lt;=</operator><literal type="char">'9'</literal><operator>&amp;&amp;</operator><name>ch</name><operator>&gt;=</operator><literal type="char">'0'</literal></expr>)</condition> <block>{<expr_stmt><expr><name>x</name><operator>=</operator><name>x</name><operator>*</operator><literal type="number">10</literal><operator>+</operator><name>ch</name><operator>-</operator><literal type="char">'0'</literal></expr>;</expr_stmt><expr_stmt><expr><name>ch</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>}</block></while>
	<return>return <expr><name>x</name><operator>*</operator><name>f</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>,<decl><type ref="prev"/><name>d</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>an1</name></decl>,<decl><type ref="prev"/><name>an2</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><name>t</name><operator>=</operator><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition>
	<block>{
		<expr_stmt><expr><name>a</name><operator>=</operator><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>b</name><operator>=</operator><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>c</name><operator>=</operator><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>d</name><operator>=</operator><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>k</name><operator>=</operator><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>a</name><operator>%</operator><name>c</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block>{ <expr_stmt><expr><name>ans</name><operator>=</operator><name>a</name><operator>/</operator><name>c</name></expr>;</expr_stmt> <expr_stmt><expr><name>an1</name><operator>=</operator><name>a</name><operator>/</operator><name>c</name></expr>;</expr_stmt> }</block></then>
		<else>else <block>{ <expr_stmt><expr><name>ans</name><operator>=</operator><name>a</name><operator>/</operator><name>c</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name>an1</name><operator>=</operator><name>a</name><operator>/</operator><name>c</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt> }</block></else></if>
		<if>if<condition>(<expr><name>b</name><operator>%</operator><name>d</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block>{ <expr_stmt><expr><name>ans</name><operator>+=</operator><name>b</name><operator>/</operator><name>d</name></expr>;</expr_stmt> <expr_stmt><expr><name>an2</name><operator>=</operator><name>b</name><operator>/</operator><name>d</name></expr>;</expr_stmt> }</block></then>
		<else>else <block>{ <expr_stmt><expr><name>ans</name><operator>+=</operator><name>b</name><operator>/</operator><name>d</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name>an2</name><operator>=</operator><name>b</name><operator>/</operator><name>d</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt> }</block></else></if>
		<if>if<condition>(<expr><name>an1</name><operator>+</operator><name>an2</name><operator>&lt;=</operator><name>k</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d\n"</literal></expr></argument>,<argument><expr><name>an1</name></expr></argument>,<argument><expr><name>an2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-1\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
	}</block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
