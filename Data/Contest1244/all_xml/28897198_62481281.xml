<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28897198_62481281.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name> <init>= <expr><literal type="number">1e5</literal> <operator>+</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name><name>a</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>a</name><operator>+</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>num</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>lef</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>rig</name> <init>= <expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>lef</name> <operator>&lt;</operator> <name>rig</name></expr>;</condition> <incr><expr><name>num</name><operator>++</operator></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>lefex</name> <init>= <expr><name><name>a</name><index>[<expr><name>lef</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>a</name><index>[<expr><name>lef</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>lefdj</name> <init>= <expr><name>lefex</name> <operator>*</operator> <name>num</name></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>lefdj</name> <operator>&gt;=</operator> <name>k</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>a</name><index>[<expr><name>lef</name></expr>]</index></name> <operator>+=</operator> <name>k</name> <operator>/</operator> <name>num</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>a</name><index>[<expr><name>rig</name></expr>]</index></name> <operator>-</operator> <name><name>a</name><index>[<expr><name>lef</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>k</name> <operator>-=</operator> <name>lefdj</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>lef</name><operator>++</operator></expr>;</expr_stmt>
        }</block></else></if>
        <if>if<condition>(<expr><name>lef</name> <operator>==</operator> <name>rig</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
        <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>rigex</name> <init>= <expr><name><name>a</name><index>[<expr><name>rig</name></expr>]</index></name> <operator>-</operator> <name><name>a</name><index>[<expr><name>rig</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>rigdj</name> <init>= <expr><name>rigex</name> <operator>*</operator> <name>num</name></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>rigdj</name> <operator>&gt;=</operator> <name>k</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>a</name><index>[<expr><name>rig</name></expr>]</index></name> <operator>-=</operator> <name>k</name> <operator>/</operator> <name>num</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>a</name><index>[<expr><name>rig</name></expr>]</index></name> <operator>-</operator> <name><name>a</name><index>[<expr><name>lef</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>k</name> <operator>-=</operator> <name>rigdj</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>rig</name><operator>--</operator></expr>;</expr_stmt>
        }</block></else></if>
    }</block></for>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="number">0</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
