<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28934897_62485731.cpp"><comment type="line">//Ñ¹ï¿½Ð¿Î´ï¿½</comment>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LD</name></cpp:macro> <cpp:value>long double</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>LL</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>p</name></decl>,<decl><type ref="prev"/><name>w</name></decl>,<decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
<function><type><name>LL</name></type> <name>read</name><parameter_list>()</parameter_list><block>{<decl_stmt><decl><type><name>LL</name></type> <name>sss</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>fff</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt><decl_stmt><decl><type><name>char</name></type> <name>ccc</name></decl>;</decl_stmt><expr_stmt><expr><name>ccc</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt><while>while<condition>(<expr><name><name>ccc</name><argument_list type="generic">&lt;<argument><expr><literal type="char">'0'</literal><operator>||</operator><name>ccc</name></expr></argument>&gt;</argument_list></name><literal type="char">'9'</literal></expr>)</condition><block>{<if>if<condition>(<expr><name>ccc</name><operator>==</operator><literal type="char">'-'</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>fff</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if><expr_stmt><expr><name>ccc</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>}</block></while><while>while<condition>(<expr><name>ccc</name><operator>&gt;=</operator><literal type="char">'0'</literal><operator>&amp;&amp;</operator><name>ccc</name><operator>&lt;=</operator><literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>sss</name><operator>=</operator><operator>(</operator><name>sss</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><operator>(</operator><name>sss</name><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator><operator>+</operator><operator>(</operator><name>ccc</name><operator>^</operator><literal type="char">'0'</literal><operator>)</operator></expr><operator>,</operator><expr><name>ccc</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while><return>return <expr><name>sss</name><operator>*</operator><name>fff</name></expr>;</return>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{<if>if<condition>(<expr><operator>!</operator><name>x</name></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then></if><expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>x</name><operator>/</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><operator>(</operator><name>x</name><operator>%</operator><literal type="number">10</literal><operator>)</operator><operator>+</operator><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>void</name></type> <name>wri</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function>
<comment type="line">//LL exgcd(LL x,LL y,LL &amp;P,LL &amp;Q)</comment>
<comment type="line">//{</comment>
<comment type="line">//	if(y==0){P=1;Q=0;return x;}</comment>
<comment type="line">//	LL r=exgcd(y,x%y,Q,P);</comment>
<comment type="line">//	Q-=x/y*P;</comment>
<comment type="line">//	return r;</comment>
<comment type="line">//}</comment>
<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list>
<block>{
	<for>for<control>(<init><decl><type><name>LL</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>w</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><if>if<condition>(<expr><operator>(</operator><name>p</name><operator>-</operator><name>i</name><operator>*</operator><name>d</name><operator>)</operator><operator>%</operator><name>w</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
		<block>{
			<decl_stmt><decl><type><name>LL</name></type> <name>x</name><init>=<expr><operator>(</operator><name>p</name><operator>-</operator><name>i</name><operator>*</operator><name>d</name><operator>)</operator><operator>/</operator><name>w</name></expr></init></decl>,<decl><type ref="prev"/><name>y</name><init>=<expr><name>i</name></expr></init></decl>;</decl_stmt>
			<if>if<condition>(<expr><name>x</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
			<if>if<condition>(<expr><name>x</name><operator>+</operator><name>y</name><operator>&lt;=</operator><name>n</name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld %lld %lld\n"</literal></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>n</name><operator>-</operator><name>x</name><operator>-</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return;</return>
			}</block></then></if>
		}</block></then></if></block></for>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-1\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
<comment type="line">//	freopen("123.in","r",stdin);</comment>
<comment type="line">//	freopen("123.out","w",stdout);</comment>
	<expr_stmt><expr><name>n</name><operator>=</operator><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name>p</name><operator>=</operator><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name>w</name><operator>=</operator><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name>d</name><operator>=</operator><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	
	<comment type="block">/*LL P,Q,r=exgcd(w,d,P,Q);
	if(p%r!=0)
	{
		printf("-1\n");
		return 0;
	}
	LL kd=p/r,cg=w*d/__gcd(w,d);
	P*=kd;Q*=kd;
	if(P&gt;=0&amp;&amp;Q&gt;=0&amp;&amp;P+Q&lt;=n)
	{
		printf("%lld %lld %lld\n",P,Q,n-P-Q);
		return 0;
	}
	LL derta=(cg/d)-(cg/w),KKD;
//	printf("%lld %lld\n",P,Q);
//	printf("%lld %lld\n",(cg/d),(cg/w));
	KKD=((P+Q-n)/derta);
//	printf("%lld %lld\n",derta,KKD);
	P=P+KKD*(cg/w);Q=Q-KKD*(cg/d);
	if(P&lt;0)
	{
		LL PDP=(-P)/(cg/w);
		P=P+PDP*(cg/w);Q=Q-PDP*(cg/d);
		if(P&lt;0) P=P+(cg/w),Q=Q-(cg/d);
	}
	if(Q&lt;0)
	{
		LL QDQ=(-Q)/(cg/d);
		P=P-QDQ*(cg/w);Q=Q+QDQ*(cg/d);
		if(Q&lt;0) P=P-(cg/w),Q=Q+(cg/d);
	}
//	printf("%lld %lld\n",P,Q);
	if(P&gt;=0&amp;&amp;Q&gt;=0&amp;&amp;P+Q&lt;=n)
	{
		printf("%lld %lld %lld\n",P,Q,n-P-Q);
		return 0;
	}
	P=P+(cg/w);Q=Q-(cg/d);
	if(P&gt;=0&amp;&amp;Q&gt;=0&amp;&amp;P+Q&lt;=n)
	{
		printf("%lld %lld %lld\n",P,Q,n-P-Q);
		return 0;
	}
	P=P+(cg/w);Q=Q-(cg/d);
	if(P&gt;=0&amp;&amp;Q&gt;=0&amp;&amp;P+Q&lt;=n)
	{
		printf("%lld %lld %lld\n",P,Q,n-P-Q);
		return 0;
	}
	P=P-2*(cg/w);Q=Q+2*(cg/d);
	
	P=P-(cg/w);Q=Q+(cg/d);
	if(P&gt;=0&amp;&amp;Q&gt;=0&amp;&amp;P+Q&lt;=n)
	{
		printf("%lld %lld %lld\n",P,Q,n-P-Q);
		return 0;
	}
	P=P-(cg/w);Q=Q+(cg/d);
	if(P&gt;=0&amp;&amp;Q&gt;=0&amp;&amp;P+Q&lt;=n)
	{
		printf("%lld %lld %lld\n",P,Q,n-P-Q);
		return 0;
	}
	printf("-1\n");*/</comment>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
