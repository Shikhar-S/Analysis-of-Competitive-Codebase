<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28898167_62486227.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = (x), i##END = (y); i &lt;= i##END; ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = (x), i##END = (y); i &gt;= i##END; --i)</cpp:value></cpp:define>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>, <parameter><type><name>typename</name></type> <name>_T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>bool</name></type> <name>chk_min</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>_T</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<return>return <expr><ternary><condition><expr><name>y</name> <operator>&lt;</operator> <name>x</name></expr> ?</condition><then> <expr><name>x</name> <operator>=</operator> <name>y</name></expr></then></ternary></expr><operator>,</operator> <expr><literal type="number">1</literal> <operator>:</operator> <literal type="number">0</literal></expr>;</return>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>, <parameter><type><name>typename</name></type> <name>_T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>bool</name></type> <name>chk_max</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>_T</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<return>return <expr><ternary><condition><expr><name>x</name> <operator>&lt;</operator> <name>y</name></expr> ?</condition><then> <expr><name>x</name> <operator>=</operator> <name>y</name></expr></then></ternary></expr><operator>,</operator> <expr><literal type="number">1</literal> <operator>:</operator> <literal type="number">0</literal></expr>;</return>}</block></function>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name><init>=<expr><literal type="number">100005</literal></expr></init></decl>;</decl_stmt>
<struct><template>template<parameter_list>&lt;<parameter><type><specifier>const</specifier> <name>int</name></type> <name>N</name></parameter>,<parameter><type><specifier>const</specifier> <name>int</name></type> <name>M</name></parameter>,<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>struct <name>LinkedList</name>
<block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name><name>head</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>nxt</name><index>[<expr><name>M</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name>tot</name></decl>;</decl_stmt><decl_stmt><decl><type><name>T</name></type> <name><name>to</name><index>[<expr><name>M</name></expr>]</index></name></decl>;</decl_stmt>
	<constructor><name>LinkedList</name><parameter_list>()</parameter_list><block>{<expr_stmt><expr><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>}</block></constructor>
	<function type="operator"><type><name>T</name> <modifier>&amp;</modifier></type><name>operator <name>[]</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{<return>return <expr><name><name>to</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</return>}</block></function>
	<function><type><name>void</name></type> <name>clear</name><parameter_list>()</parameter_list><block>{<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>head</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>head</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><name>tot</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>}</block></function>
	<function><type><name>void</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>v</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name><name>to</name><index>[<expr><name>tot</name></expr>]</index></name><operator>=</operator><name>v</name></expr><operator>,</operator><expr><name><name>nxt</name><index>[<expr><name>tot</name></expr>]</index></name><operator>=</operator><name><name>head</name><index>[<expr><name>u</name></expr>]</index></name></expr><operator>,</operator><expr><name><name>head</name><index>[<expr><name>u</name></expr>]</index></name><operator>=</operator><name>tot</name><operator>++</operator></expr>;</expr_stmt>}</block></function>
	<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>G</name></type></parameter>,<parameter><type><name>u</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=G.head[u];~i;i=G.nxt[i])</cpp:value></cpp:define>
</public>}</block>;</struct>
<decl_stmt><decl><type><name><name>LinkedList</name><argument_list type="generic">&lt;<argument><expr><name>N</name></expr></argument>,<argument><expr><name>N</name><operator>&lt;&lt;</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name>G</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>dp</name><index>[<expr><name>N</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>A</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>deg</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>rehsh</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name>tot</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>Ans</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>backa</name><index>[<expr><name>N</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>f</name></decl></parameter>)</parameter_list>
<block>{
	<expr_stmt><expr><name><name>rehsh</name><index>[<expr><operator>++</operator><name>tot</name></expr>]</index></name><operator>=</operator><name>u</name></expr>;</expr_stmt>
	<macro><name>EOR</name><argument_list>(<argument>i</argument>,<argument>G</argument>,<argument>u</argument>)</argument_list></macro>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>v</name><init>=<expr><name><name>G</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>v</name><operator>==</operator><name>f</name></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
		<expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>v</name></expr></argument>,<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block>
}</block></function>

<function><type><name>void</name></type> <name>recur</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list>
<block>{
	<if>if<condition>(<expr><name>u</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><name><name>Ans</name><index>[<expr><name><name>rehsh</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>=</operator><name>i</name></expr><operator>,</operator><expr><name><name>Ans</name><index>[<expr><name><name>rehsh</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index></name><operator>=</operator><name>j</name></expr>;</expr_stmt>
		<return>return;</return>
	}</block></then></if>
	<expr_stmt><expr><name><name>Ans</name><index>[<expr><name><name>rehsh</name><index>[<expr><name>u</name></expr>]</index></name></expr>]</index></name><operator>=</operator><name>j</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>recur</name><argument_list>(<argument><expr><name>u</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name><name>backa</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>FOR</name><argument_list>(<argument>k</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">2</literal></argument>)</argument_list></macro><macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>A</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n-<literal type="number">1</literal></argument>)</argument_list></macro>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>u</name></decl>,<decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>u</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>G</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>u</name></expr></argument>,<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><call><name><name>G</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>,<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>deg</name><index>[<expr><name>u</name></expr>]</index></name><operator>++</operator></expr><operator>,</operator><expr><name><name>deg</name><index>[<expr><name>v</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
	}</block>
	<macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro><if>if<condition>(<expr><name><name>deg</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;=</operator><literal type="number">3</literal></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></then></if>
	<macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro><if>if<condition>(<expr><name><name>deg</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	}</block></then></if>
	<macro><name>FOR</name><argument_list>(<argument>k</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro><macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">2</literal></argument>)</argument_list></macro><macro><name>FOR</name><argument_list>(<argument>j</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">2</literal></argument>)</argument_list></macro><if>if<condition>(<expr><name>i</name><operator>!=</operator><name>j</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name><name>dp</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><literal type="number">1e18</literal></expr>;</expr_stmt></block></then></if>
	<macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">2</literal></argument>)</argument_list></macro><macro><name>FOR</name><argument_list>(<argument>j</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">2</literal></argument>)</argument_list></macro><if>if<condition>(<expr><name>i</name><operator>!=</operator><name>j</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><name><name>A</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name><name>rehsh</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>+</operator><name><name>A</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name><name>rehsh</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block></then></if>
	<macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">2</literal></argument>,<argument>n-<literal type="number">1</literal></argument>)</argument_list></macro>
	<block>{
		<macro><name>FOR</name><argument_list>(<argument>j</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">2</literal></argument>)</argument_list></macro><macro><name>FOR</name><argument_list>(<argument>k</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">2</literal></argument>)</argument_list></macro><macro><name>FOR</name><argument_list>(<argument>l</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">2</literal></argument>)</argument_list></macro>
		<block>{
			<if>if<condition>(<expr><name>j</name><operator>==</operator><name>l</name><operator>||</operator><name>j</name><operator>==</operator><name>k</name><operator>||</operator><name>k</name><operator>==</operator><name>l</name></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
			<if>if<condition>(<expr><call><name>chk_min</name><argument_list>(<argument><expr><name><name>dp</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>l</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name><operator>+</operator><name><name>A</name><index>[<expr><name>l</name></expr>]</index><index>[<expr><name><name>rehsh</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name><name>backa</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>l</name></expr>]</index></name><operator>=</operator><name>j</name></expr>;</expr_stmt>
			}</block></then></if>
		}</block>
	}</block>
	<decl_stmt><decl><type><name>ll</name></type> <name>ans</name><init>=<expr><literal type="number">1e18</literal></expr></init></decl>,<decl><type ref="prev"/><name>I</name></decl>,<decl><type ref="prev"/><name>J</name></decl>;</decl_stmt>
	<macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">2</literal></argument>)</argument_list></macro><macro><name>FOR</name><argument_list>(<argument>j</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">2</literal></argument>)</argument_list></macro><if>if<condition>(<expr><name>i</name><operator>!=</operator><name>j</name></expr>)</condition><then>
	<block>{
		<if>if<condition>(<expr><call><name>chk_min</name><argument_list>(<argument><expr><name>ans</name></expr></argument>,<argument><expr><name><name>dp</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>I</name><operator>=</operator><name>i</name></expr><operator>,</operator><expr><name>J</name><operator>=</operator><name>j</name></expr>;</expr_stmt></block></then></if>
	}</block></then></if>
	<if>if<condition>(<expr><name>ans</name><operator>&gt;</operator><literal type="number">1e17</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
	<else>else
	<block>{
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>,<argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>recur</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><name>I</name></expr></argument>,<argument><expr><name>J</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d%c"</literal></expr></argument>,<argument><expr><name><name>Ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><ternary><condition><expr><name>i</name><operator>==</operator><name>n</name></expr>?</condition><then><expr><literal type="char">'\n'</literal></expr></then><else>:<expr><literal type="char">' '</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
