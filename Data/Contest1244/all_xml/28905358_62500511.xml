<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28905358_62500511.cpp"><comment type="block">/*jai mata di
let's rock*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name><init>=<expr><literal type="number">100004</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name><name>a</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>sum</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>k</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %I64d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%I64d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>a</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>a</name><operator>+</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name><name>sum</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>sum</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>l</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>r</name><init>=<expr><literal type="number">1e9</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ans</name></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>l</name><operator>&lt;=</operator><name>r</name></expr>)</condition>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>mid</name><init>=<expr><operator>(</operator><name>l</name><operator>+</operator><name>r</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>kx</name><init>=<expr><literal type="number">1e18</literal></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>val</name><init>=<expr><name>i</name><operator>*</operator><literal type="number">1LL</literal><operator>*</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>sum</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>ax</name><init>=<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name>mid</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>lt</name><init>=<expr><name>i</name></expr></init></decl>,<decl><type ref="prev"/><name>rt</name><init>=<expr><name>n</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>idx</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <while>while<condition>(<expr><name>lt</name><operator>&lt;=</operator><name>rt</name></expr>)</condition>
            <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>m</name><init>=<expr><operator>(</operator><name>lt</name><operator>+</operator><name>rt</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
                <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>m</name></expr>]</index></name><operator>&gt;=</operator><name>ax</name></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name>idx</name><operator>=</operator><name>m</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>rt</name><operator>=</operator><name>m</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
                }</block></then>
                <else>else <block type="pseudo"><expr_stmt><expr><name>lt</name><operator>=</operator><name>m</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
            }</block></while>
            <if>if<condition>(<expr><name>idx</name><operator>!=</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>val</name><operator>=</operator><name>val</name><operator>+</operator><name><name>sum</name><index>[<expr><name>n</name></expr>]</index></name><operator>-</operator><name><name>sum</name><index>[<expr><name>idx</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><literal type="number">1LL</literal><operator>*</operator><operator>(</operator><name>n</name><operator>-</operator><name>idx</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>ax</name></expr>;</expr_stmt></block></then></if>
            <expr_stmt><expr><name>kx</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>kx</name></expr></argument>,<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>val1</name><init>=<expr><name><name>sum</name><index>[<expr><name>n</name></expr>]</index></name><operator>-</operator><name><name>sum</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><literal type="number">1LL</literal><operator>*</operator><operator>(</operator><name>n</name><operator>-</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>ax</name><operator>=</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name>mid</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>lt</name><operator>=</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name>rt</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>idx</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <while>while<condition>(<expr><name>lt</name><operator>&lt;=</operator><name>rt</name></expr>)</condition>
            <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>m</name><init>=<expr><operator>(</operator><name>lt</name><operator>+</operator><name>rt</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
                <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>m</name></expr>]</index></name><operator>&lt;=</operator><name>ax</name></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name>idx</name><operator>=</operator><name>m</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>lt</name><operator>=</operator><name>m</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
                }</block></then>
                <else>else <block type="pseudo"><expr_stmt><expr><name>rt</name><operator>=</operator><name>m</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
            }</block></while>
            <if>if<condition>(<expr><name>idx</name><operator>!=</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>val1</name><operator>=</operator><name>val1</name><operator>+</operator><name>ax</name><operator>*</operator><literal type="number">1LL</literal><operator>*</operator><name>idx</name><operator>-</operator><name><name>sum</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt></block></then></if>
            <expr_stmt><expr><name>kx</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>kx</name></expr></argument>,<argument><expr><name>val1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <if>if<condition>(<expr><name>kx</name><operator>&lt;=</operator><name>k</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>ans</name><operator>=</operator><name>mid</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>r</name><operator>=</operator><name>mid</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        }</block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><name>l</name><operator>=</operator><name>mid</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
    }</block></while>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>,<argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>

}</block></function>
</unit>
