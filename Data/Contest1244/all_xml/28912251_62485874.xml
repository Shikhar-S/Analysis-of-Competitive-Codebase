<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28912251_62485874.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>k</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>

	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>a</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>a</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>a</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>left</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>right</name> <init>= <expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

	<while>while <condition>(<expr><name>left</name> <operator>&lt;</operator> <name>right</name></expr>)</condition> <block>{
		<if>if <condition>(<expr><name><name>a</name><index>[<expr><name>left</name></expr>]</index></name> <operator>==</operator> <name><name>a</name><index>[<expr><name>left</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><then> <block>{
			<expr_stmt><expr><operator>++</operator><name>left</name></expr>;</expr_stmt>
			<continue>continue;</continue>
		}</block></then> <elseif>else <if>if <condition>(<expr><name><name>a</name><index>[<expr><name>right</name></expr>]</index></name> <operator>==</operator> <name><name>a</name><index>[<expr><name>right</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><then> <block>{
			<expr_stmt><expr><operator>--</operator><name>right</name></expr>;</expr_stmt>
			<continue>continue;</continue>
		}</block></then></if></elseif></if>

		<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>inc_cost</name> <init>= <expr><name>left</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>dec_cost</name> <init>= <expr><name>n</name> <operator>-</operator> <name>right</name></expr></init></decl>;</decl_stmt>

		<if>if <condition>(<expr><name>inc_cost</name> <operator>&lt;=</operator> <name>dec_cost</name></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>inc_amount</name> <init>= <expr><operator>(</operator><name><name>a</name><index>[<expr><name>left</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>a</name><index>[<expr><name>left</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>inc_cost</name></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>inc_amount</name> <operator>&lt;=</operator> <name>k</name></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>k</name> <operator>-=</operator> <name>inc_amount</name></expr>;</expr_stmt>
				<expr_stmt><expr><operator>++</operator><name>left</name></expr>;</expr_stmt>
			}</block></then> <else>else <block>{
				<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>partial_inc</name> <init>= <expr><name>k</name> <operator>/</operator> <name>inc_cost</name></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>a</name><index>[<expr><name>right</name></expr>]</index></name> <operator>-</operator> <name><name>a</name><index>[<expr><name>left</name></expr>]</index></name> <operator>-</operator> <name>partial_inc</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
				<return>return <expr><literal type="number">0</literal></expr>;</return>
			}</block></else></if>
		}</block></then> <else>else <block>{
			<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>dec_amount</name> <init>= <expr><operator>(</operator><name><name>a</name><index>[<expr><name>right</name></expr>]</index></name> <operator>-</operator> <name><name>a</name><index>[<expr><name>right</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>dec_cost</name></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>dec_amount</name> <operator>&lt;=</operator> <name>k</name></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>k</name> <operator>-=</operator> <name>dec_amount</name></expr>;</expr_stmt>
				<expr_stmt><expr><operator>--</operator><name>right</name></expr>;</expr_stmt>
			}</block></then> <else>else <block>{
				<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>partial_dec</name> <init>= <expr><name>k</name> <operator>/</operator> <name>dec_cost</name></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>a</name><index>[<expr><name>right</name></expr>]</index></name> <operator>-</operator> <name><name>a</name><index>[<expr><name>left</name></expr>]</index></name> <operator>-</operator> <name>partial_dec</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
				<return>return <expr><literal type="number">0</literal></expr>;</return>
			}</block></else></if>
		}</block></else></if>
	}</block></while>

	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"0\n"</literal></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
