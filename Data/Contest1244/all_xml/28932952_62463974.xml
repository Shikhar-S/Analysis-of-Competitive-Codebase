<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28932952_62463974.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INF</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vi</name></cpp:macro> <cpp:value>vector &lt; int &gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair &lt; int , int &gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vii</name></cpp:macro> <cpp:value>vector &lt; pair &lt; int , int &gt; &gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXN</name></cpp:macro> <cpp:value>100005</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SQRTN</name></cpp:macro> <cpp:value>355</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXXN</name></cpp:macro> <cpp:value>1000005</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name> ;</namespace></using>

<function><type><name>int</name></type> <name>main</name> <parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl> ;</decl_stmt> <expr_stmt><expr><call><name>scanf</name> <argument_list>( <argument><expr><literal type="string">"%d"</literal></expr></argument> , <argument><expr><operator>&amp;</operator><name>t</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>( <expr><name>t</name><operator>--</operator></expr> )</condition> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl> , <decl><type ref="prev"/><name>b</name></decl> , <decl><type ref="prev"/><name>c</name></decl> , <decl><type ref="prev"/><name>d</name></decl> , <decl><type ref="prev"/><name>k</name></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>scanf</name> <argument_list>( <argument><expr><literal type="string">"%d %d %d %d %d"</literal></expr></argument> , <argument><expr><operator>&amp;</operator><name>a</name></expr></argument> , <argument><expr><operator>&amp;</operator><name>b</name></expr></argument> , <argument><expr><operator>&amp;</operator><name>c</name></expr></argument> , <argument><expr><operator>&amp;</operator><name>d</name></expr></argument> , <argument><expr><operator>&amp;</operator><name>k</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>pen</name> <init>= <expr><operator>(</operator><name>a</name><operator>+</operator><name>c</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><name>c</name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>pencils</name> <init>= <expr><operator>(</operator><name>b</name><operator>+</operator><name>d</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><name>d</name></expr></init></decl> ;</decl_stmt>
        <if>if <condition>( <expr><name>pen</name><operator>+</operator><name>pencils</name> <operator>&lt;=</operator> <name>k</name></expr> )</condition><then> <block>{
            <expr_stmt><expr><call><name>printf</name> <argument_list>( <argument><expr><literal type="string">"%d %d\n"</literal></expr></argument> , <argument><expr><name>pen</name></expr></argument>, <argument><expr><name>pencils</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><call><name>printf</name> <argument_list>( <argument><expr><literal type="string">"-1\n"</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt></block></else></if>
    }</block></while>
    <return>return <expr><literal type="number">0</literal></expr> ;</return>
}</block></function>
</unit>
