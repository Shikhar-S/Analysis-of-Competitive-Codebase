<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28910111_62489468.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL</name></cpp:macro>  	<cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Maxn</name></cpp:macro>	<cpp:value>500500</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>tn</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>tn</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>)</parameter_list><block>{
	<decl_stmt><decl><type><name>tn</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>f</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> <decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><call><name>getchar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init>;</init> <condition><expr><operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>c</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr></incr>)</control> <block type="pseudo"><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>f</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if></block></for>
	<for>for <control>(<init>;</init> <condition><expr><call><name>isdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>c</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <name>c</name> <operator>-</operator> <literal type="number">48</literal></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><name>a</name> <operator>=</operator> <name>x</name> <operator>*</operator> <name>f</name></expr>;</expr_stmt>
}</block></function>

<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>son</name><index>[<expr><name>Maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>c</name><index>[<expr><literal type="number">5</literal></expr>]</index><index>[<expr><name>Maxn</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>deg</name><index>[<expr><name>Maxn</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>a</name><index>[<expr><name>Maxn</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>id</name><index>[<expr><name>Maxn</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>ans</name><index>[<expr><name>Maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>tim</name></decl>;</decl_stmt>

<function><type><name>LL</name></type> <name>calc</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>LL</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
			<if>if <condition>(<expr><name>j</name> <operator>==</operator> <name><name>a</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>||</operator> <name>j</name> <operator>==</operator> <name><name>a</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
			<expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>j</name></expr><operator>,</operator> <expr><name>ret</name> <operator>+=</operator> <name><name>c</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name><name>id</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr><operator>,</operator> <expr><name><name>ans</name><index>[<expr><name><name>id</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
		}</block></for>
	}</block></for>
	<return>return <expr><name>ret</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list><block>{ <expr_stmt><expr><name><name>son</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name><name>deg</name><index>[<expr><name>v</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt> }</block></function>
<function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fa</name></decl></parameter>)</parameter_list><block>{
	<expr_stmt><expr><name><name>id</name><index>[<expr><operator>++</operator><name>tim</name></expr>]</index></name> <operator>=</operator> <name>u</name></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>auto</name></type> <name>v</name> <range>: <expr><name><name>son</name><index>[<expr><name>u</name></expr>]</index></name></expr></range></decl></init>)</control> <block type="pseudo"><if>if <condition>(<expr><name>v</name> <operator>!=</operator> <name>fa</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></block></for>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt> <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>read</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>add</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<decl_stmt><decl><type><name>int</name></type> <name>rt</name></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<if>if <condition>(<expr><name><name>deg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>rt</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block></then></if>
		<if>if <condition>(<expr><name><name>deg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><then><block>{ <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"-1\n"</literal></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return> }</block></then></if>
	}</block></for>
	<expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>rt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>LL</name></type> <name>Ans</name> <init>= <expr><literal type="number">1e18</literal></expr></init></decl>, <decl><type ref="prev"/><name>c1</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>c2</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block type="pseudo"><for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
		<if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>j</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
		<expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>i</name></expr><operator>,</operator> <expr><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>LL</name></type> <name>t</name> <init>= <expr><call><name>calc</name><argument_list>()</argument_list></call> <operator>+</operator> <name><name>c</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name><name>id</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>+</operator> <name><name>c</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name><name>id</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>Ans</name> <operator>&gt;</operator> <name>t</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>Ans</name> <operator>=</operator> <name>t</name></expr><operator>,</operator> <expr><name>c1</name> <operator>=</operator> <name>i</name></expr><operator>,</operator> <expr><name>c2</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt></block></then></if>
	}</block></for></block></for>
	<expr_stmt><expr><name><name>ans</name><index>[<expr><name><name>id</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>c1</name></expr><operator>,</operator> <expr><name><name>ans</name><index>[<expr><name><name>id</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>c2</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>c1</name></expr><operator>,</operator> <expr><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>c2</name></expr><operator>,</operator> <expr><call><name>calc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>Ans</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <operator>(</operator><ternary><condition><expr><name>i</name> <operator>==</operator> <name>n</name></expr> ?</condition><then> <expr><literal type="char">'\n'</literal></expr> </then><else>: <expr><literal type="char">' '</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block></for>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
