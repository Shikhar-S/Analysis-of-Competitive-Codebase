<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28934885_62500153.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>'\n'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REP</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = 0; i &lt; n; ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REPR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = n - 1; i &gt;= 0; --i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = a; i &lt; b; ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FORR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = b - 1; i &gt;= a; --i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EB</name></cpp:macro> <cpp:value>emplace_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ST</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ND</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name></cpp:macro> <cpp:value>size()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RS</name></cpp:macro> <cpp:value>resize</cpp:value></cpp:define>

<using>using <name>VI</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>VVI</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>VI</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>VVVI</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>VVI</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>PI</name> <init>= <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>VPI</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>PI</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>VVPI</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>VPI</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>VL</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>L</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>VVL</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>VL</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>VVVL</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>VVL</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>VB</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>VVB</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>VB</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>VC</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>VVC</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>VC</name></expr></argument>&gt;</argument_list></name></type></init>;</using>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>L</name></type> <name>k</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>VL</name></type> <name>b</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <macro><name>REP</name><argument_list>(<argument>i</argument>, <argument>n</argument>)</argument_list></macro>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>b</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>b</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>L</name></expr></argument>, <argument><expr><name>L</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>a</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>MP</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>L</name><operator>)</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>FOR</name><argument_list>(<argument>i</argument>, <argument><literal type="number">1</literal></argument>, <argument>n</argument>)</argument_list></macro>
    <block>{
        <if>if <condition>(<expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>b</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>a</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>ND</name><operator>++</operator></expr>;</expr_stmt></block></then>
        <else>else
            <block type="pseudo"><expr_stmt><expr><call><name><name>a</name><operator>.</operator><name>EB</name></name><argument_list>(<argument><expr><call><name>MP</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>L</name><operator>)</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
    }</block>
    <decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>int</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>S</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>poc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>kon</name> <init>= <expr><name>r</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>poc</name> <operator>&lt;</operator> <name>kon</name></expr>)</condition>
    <block>{
        <if>if <condition>(<expr><name><name>a</name><index>[<expr><name>poc</name></expr>]</index></name><operator>.</operator><name>ND</name> <operator>&lt;=</operator> <name><name>a</name><index>[<expr><name>kon</name></expr>]</index></name><operator>.</operator><name>ND</name></expr>)</condition><then>
        <block>{
            <if>if <condition>(<expr><operator>(</operator><name><name>a</name><index>[<expr><name>poc</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>ST</name> <operator>-</operator> <name><name>a</name><index>[<expr><name>poc</name></expr>]</index></name><operator>.</operator><name>ST</name><operator>)</operator> <operator>*</operator> <name><name>a</name><index>[<expr><name>poc</name></expr>]</index></name><operator>.</operator><name>ND</name> <operator>&lt;=</operator> <name>k</name></expr>)</condition><then>
            <block>{   
                <expr_stmt><expr><name>k</name> <operator>-=</operator> <operator>(</operator><name><name>a</name><index>[<expr><name>poc</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>ST</name> <operator>-</operator> <name><name>a</name><index>[<expr><name>poc</name></expr>]</index></name><operator>.</operator><name>ST</name><operator>)</operator> <operator>*</operator> <name><name>a</name><index>[<expr><name>poc</name></expr>]</index></name><operator>.</operator><name>ND</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>a</name><index>[<expr><name>poc</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>ND</name> <operator>+=</operator> <name><name>a</name><index>[<expr><name>poc</name></expr>]</index></name><operator>.</operator><name>ND</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>poc</name><operator>++</operator></expr>;</expr_stmt>
            }</block></then>
            <else>else
            <block>{
                <expr_stmt><expr><name><name>a</name><index>[<expr><name>poc</name></expr>]</index></name><operator>.</operator><name>ST</name> <operator>+=</operator> <name>k</name> <operator>/</operator> <name><name>a</name><index>[<expr><name>poc</name></expr>]</index></name><operator>.</operator><name>ND</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then>
        <else>else
        <block>{
            <if>if <condition>(<expr><operator>(</operator><name><name>a</name><index>[<expr><name>kon</name></expr>]</index></name><operator>.</operator><name>ST</name> <operator>-</operator> <name><name>a</name><index>[<expr><name>kon</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>ST</name><operator>)</operator> <operator>*</operator> <name><name>a</name><index>[<expr><name>kon</name></expr>]</index></name><operator>.</operator><name>ND</name> <operator>&lt;=</operator> <name>k</name></expr>)</condition><then>
            <block>{   
                <expr_stmt><expr><name>k</name> <operator>-=</operator> <operator>(</operator><name><name>a</name><index>[<expr><name>kon</name></expr>]</index></name><operator>.</operator><name>ST</name> <operator>-</operator> <name><name>a</name><index>[<expr><name>kon</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>ST</name><operator>)</operator> <operator>*</operator> <name><name>a</name><index>[<expr><name>kon</name></expr>]</index></name><operator>.</operator><name>ND</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>a</name><index>[<expr><name>kon</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>ND</name> <operator>+=</operator> <name><name>a</name><index>[<expr><name>kon</name></expr>]</index></name><operator>.</operator><name>ND</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>kon</name><operator>--</operator></expr>;</expr_stmt>
            }</block></then>
            <else>else
            <block>{
                <expr_stmt><expr><name><name>a</name><index>[<expr><name>kon</name></expr>]</index></name><operator>.</operator><name>ST</name> <operator>-=</operator> <name>k</name> <operator>/</operator> <name><name>a</name><index>[<expr><name>kon</name></expr>]</index></name><operator>.</operator><name>ND</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            }</block></else></if>
        }</block></else></if>
    }</block></while>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>a</name><index>[<expr><name>kon</name></expr>]</index></name><operator>.</operator><name>ST</name> <operator>-</operator> <name><name>a</name><index>[<expr><name>poc</name></expr>]</index></name><operator>.</operator><name>ST</name></expr>;</expr_stmt>
}</block></function>

<comment type="line">// clang++ -std=c++11 -Wall -Wextra -Wshadow -Wconversion -Wno-sign-conversion -Wfloat-equal -fsanitize=address,undefined -D_GLIBCXX_DEBUG -DDEBUG -ggdb con1.cpp -o a</comment>
</unit>
