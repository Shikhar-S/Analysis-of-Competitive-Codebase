<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28910410_62496090.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>ll</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>s</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></name></type> <name>it</name></decl>;</decl_stmt>

	<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>it</name> <operator>=</operator> <call><name><name>s</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>it</name> <operator>==</operator> <call><name><name>s</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<else>else <block>{
			<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>second</name></name> <operator>=</operator> <name><name>it</name><operator>-&gt;</operator><name>second</name></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
		}</block></else></if>
	}</block></for>
	<expr_stmt><expr><name>it</name> <operator>=</operator> <call><name><name>s</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>it</name><operator>--</operator></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>mx</name> <init>= <expr><name><name>it</name><operator>-&gt;</operator><name>first</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>mn</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>first</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>v</name></decl>;</decl_stmt>
	<for>for<control>(<init><expr><name>it</name> <operator>=</operator> <call><name><name>s</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>it</name> <operator>!=</operator> <call><name><name>s</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>it</name><operator>++</operator></expr></incr>)</control> <block>{
		<expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><operator>*</operator><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name><name>v</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>ll</name></type> <name>ml</name> <init>= <expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>first</name></expr></init></decl>, <decl><type ref="prev"/><name>mr</name> <init>= <expr><name><name>v</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>first</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>r</name> <init>= <expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>k</name></expr>)</condition> <block>{
		<if>if<condition>(<expr><name>ml</name> <operator>==</operator> <name>mr</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
		<if>if<condition>(<expr><name><name>v</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>second</name> <operator>&lt;=</operator> <name><name>v</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><name>second</name></expr>)</condition><then><block>{
			<if>if<condition>(<expr><operator>(</operator><name><name>v</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>second</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>v</name><index>[<expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>first</name> <operator>-</operator> <name><name>v</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>first</name><operator>)</operator> <operator>&lt;=</operator> <name>k</name></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>k</name> <operator>-=</operator> <operator>(</operator><name><name>v</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>second</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>v</name><index>[<expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>first</name> <operator>-</operator> <name><name>v</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>first</name><operator>)</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>v</name><index>[<expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>second</name> <operator>+=</operator> <name><name>v</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>second</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>ml</name> <operator>=</operator> <name><name>v</name><index>[<expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>first</name></expr>;</expr_stmt>
			}</block></then> <else>else <block>{
				<expr_stmt><expr><name>ml</name> <operator>+=</operator> <name>k</name> <operator>/</operator> <name><name>v</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>second</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			}</block></else></if>
			<expr_stmt><expr><name>l</name><operator>++</operator></expr>;</expr_stmt>
		}</block></then> <else>else <block>{
			<if>if<condition>(<expr><operator>(</operator><name><name>v</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><name>second</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>v</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>-</operator> <name><name>v</name><index>[<expr><name>r</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>first</name><operator>)</operator> <operator>&lt;=</operator> <name>k</name></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>k</name> <operator>-=</operator> <operator>(</operator><name><name>v</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><name>second</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>v</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>-</operator> <name><name>v</name><index>[<expr><name>r</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>first</name><operator>)</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>v</name><index>[<expr><name>r</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>second</name> <operator>+=</operator> <name><name>v</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><name>second</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>mr</name> <operator>=</operator> <name><name>v</name><index>[<expr><name>r</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>first</name></expr>;</expr_stmt>
			}</block></then> <else>else <block>{
				<expr_stmt><expr><name>mr</name> <operator>-=</operator> <name>k</name> <operator>/</operator> <name><name>v</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><name>second</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			}</block></else></if>
			<expr_stmt><expr><name>r</name><operator>--</operator></expr>;</expr_stmt>
		}</block></else></if>
	}</block></while>

	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>mr</name> <operator>-</operator> <name>ml</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
}</block></function></unit>
