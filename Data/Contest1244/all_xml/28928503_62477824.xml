<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28928503_62477824.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MX</name> <init>= <expr><literal type="number">1009</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>double</name></type> <name><name>ans</name><index>[<expr><name>MX</name></expr>]</index></name></decl>;</decl_stmt>


<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <comment type="line">// freopen("exptree.in","r",stdin);</comment>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl> , <decl><type ref="prev"/><name>score</name></decl> , <decl><type ref="prev"/><name>W</name></decl> , <decl><type ref="prev"/><name>D</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>score</name><operator>&gt;&gt;</operator><name>W</name><operator>&gt;&gt;</operator><name>D</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>set</name> <argument_list type="generic">&lt; <argument><expr><name>long</name> <name>long</name></expr></argument> &gt;</argument_list></name></type> <name>S</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>x</name> <init>= <expr><name>score</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> , <decl><type ref="prev"/><name>atleast</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition><block>{
        <if>if<condition>(<expr><call><name><name>S</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name>x</name> <operator>%</operator> <name>D</name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
            <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>S</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>x</name> <operator>%</operator> <name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>x</name> <operator>%</operator> <name>D</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name>atleast</name> <operator>=</operator> <name>cnt</name></expr>;</expr_stmt>
            <break>break;</break>
        }</block></then></if>
        <expr_stmt><expr><name>x</name> <operator>-=</operator> <name>W</name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>++</operator><name>cnt</name></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
    }</block></while>
    <if>if<condition>(<expr><name>atleast</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block>{
        <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>win</name> <init>= <expr><name>atleast</name></expr></init></decl> , <decl><type ref="prev"/><name>rem</name> <init>= <expr><name>score</name> <operator>-</operator> <name>atleast</name> <operator>*</operator> <name>W</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>cycle</name> <init>= <expr><operator>(</operator> <operator>(</operator><name>W</name> <operator>*</operator> <name>D</name><operator>)</operator><operator>/</operator><call><name>__gcd</name><argument_list>(<argument><expr><name>W</name></expr></argument> , <argument><expr><name>D</name></expr></argument>)</argument_list></call> <operator>)</operator> <operator>/</operator> <name>W</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>more</name> <init>= <expr><name>rem</name><operator>/</operator><operator>(</operator><name>cycle</name> <operator>*</operator> <name>W</name><operator>)</operator></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>win</name> <operator>+=</operator> <name>more</name> <operator>*</operator> <name>cycle</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>rem</name> <operator>-=</operator> <name>more</name> <operator>*</operator> <name>cycle</name> <operator>*</operator> <name>W</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>draw</name> <init>= <expr><name>rem</name> <operator>/</operator> <name>D</name></expr></init></decl>;</decl_stmt>

    <comment type="line">//cout&lt;&lt;win&lt;&lt;' '&lt;&lt;draw&lt;&lt;' '&lt;&lt;atleast&lt;&lt;' '&lt;&lt;cycle&lt;&lt;endl;</comment>
    <if>if<condition>(<expr><name>win</name> <operator>+</operator> <name>draw</name> <operator>&gt;</operator> <name>n</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
    <else>else <block>{
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>win</name><operator>&lt;&lt;</operator><literal type="char">' '</literal><operator>&lt;&lt;</operator><name>draw</name><operator>&lt;&lt;</operator><literal type="char">' '</literal><operator>&lt;&lt;</operator><name>n</name> <operator>-</operator> <name>win</name> <operator>-</operator> <name>draw</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>win</name> <operator>*</operator> <name>W</name> <operator>+</operator> <name>draw</name> <operator>*</operator> <name>D</name> <operator>==</operator> <name>score</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

 <comment type="line">//   cout&lt;&lt;win * W + draw * D&lt;&lt;endl;</comment>
}</block></function>
</unit>
