<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28935033_62469397.cpp">
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endll</name></cpp:macro> <cpp:value>"\n"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MS0</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset((X), 0, sizeof((X)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MS1</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset((X), -1, sizeof((X)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEN</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>strlen(X)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rg</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(a+x), (a+y+1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vrg</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(a.begin()+x),(a.begin()+y+1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x).begin(),(x).end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rall</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x).rbegin(),(x).rend()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_sum</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>accumulate(a, 0ll)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_max</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>*max_element(a,b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pr</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bugc</name><parameter_list>(<parameter><type><name>_</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cerr &lt;&lt; (#_) &lt;&lt; " = " &lt;&lt; (_) &lt;&lt; endl;</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)x.size())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>u</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (register int i=head[u]; i; i=nxt[i])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fr1</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (register int i=(a); i&lt;=(b); i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fr2</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (register int i=(a); i&gt;=(b); i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ios</name></cpp:macro>  <cpp:value>ios::sync_with_stdio(false);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lson</name></cpp:macro> <cpp:value>l,mid,rt &lt;&lt; 1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rson</name></cpp:macro> <cpp:value>mid + 1,r,rt &lt;&lt; 1 | 1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>times</name></cpp:macro> <cpp:value>int ttt; cin &gt;&gt; ttt;while(ttt--)</cpp:value></cpp:define>
<comment type="line" format="doxygen">///vector(len,val);</comment>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>double</name></type> <name>db</name>;</typedef>
<decl_stmt><decl><type><name>int</name></type> <name><name>xx</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>yy</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>eps</name> <init>= <expr><literal type="number">1e-9</literal></expr></init></decl>;</decl_stmt>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type>  <name>P</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type>  <name>Pl</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>double</name></expr></argument>,<argument><expr><name>double</name></expr></argument>&gt;</argument_list></name></type>  <name>PP</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name> <init>= <expr><literal type="number">2e6</literal> <operator>+</operator> <literal type="number">5000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>mod</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>INF</name><argument_list>(<argument><expr><literal type="number">0x3f3f3f3f</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>INFL</name><argument_list>(<argument><expr><literal type="number">0x3f3f3f3f3f3f3f3fll</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<function><specifier>inline</specifier> <type><name>int</name></type> <name>sign</name><parameter_list>(<parameter><decl><type><name>db</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><ternary><condition><expr><name>a</name> <operator>&lt;</operator> <operator>-</operator><name>eps</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>a</name> <operator>&gt;</operator> <name>eps</name></expr></else></ternary></expr>;</return>}</block></function>
<comment type="line">//inline int cmp(db a,db b){ return sign(a - b);}</comment>

<function><type><name>ll</name></type> <name>mul</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>ll</name></type> <name>res</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> <while>while<condition>(<expr><name>b</name></expr>)</condition> <block>{  <if>if<condition>(<expr><name>b</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>res</name> <operator>*=</operator> <name>a</name></expr><operator>,</operator><expr><name>res</name> <operator>%=</operator> <name>c</name></expr>;</expr_stmt></block></then></if>  <expr_stmt><expr><name>a</name> <operator>*=</operator> <name>a</name></expr><operator>,</operator><expr><name>a</name> <operator>%=</operator> <name>c</name></expr><operator>,</operator><expr><name>b</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>  }</block></while>  <return>return <expr><name>res</name></expr>;</return>}</block></function>
<function><type><name>ll</name></type> <name>mulll</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>ll</name></type> <name>res</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> <while>while<condition>(<expr><name>b</name></expr>)</condition> <block>{  <if>if<condition>(<expr><name>b</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>res</name> <operator>*=</operator> <name>a</name></expr><operator>,</operator><expr><name>res</name> <operator>%=</operator> <name>c</name></expr>;</expr_stmt></block></then></if>  <expr_stmt><expr><name>a</name> <operator>*=</operator> <name>a</name></expr><operator>,</operator><expr><name>a</name> <operator>%=</operator> <name>c</name></expr><operator>,</operator><expr><name>b</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>  }</block></while>  <return>return <expr><name>res</name></expr>;</return>}</block></function>
<function><type><name>ll</name></type> <name>phi</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{  <decl_stmt><decl><type><name>ll</name></type> <name>res</name> <init>= <expr><name>x</name></expr></init></decl>;</decl_stmt>  <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>*</operator> <name>i</name> <operator>&lt;=</operator> <name>x</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{ <if>if<condition>(<expr><name>x</name> <operator>%</operator> <name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>res</name> <operator>=</operator> <name>res</name> <operator>/</operator> <name>i</name> <operator>*</operator> <operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block></then></if>   <while>while<condition>(<expr><name>x</name> <operator>%</operator> <name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>x</name> <operator>/=</operator> <name>i</name></expr>;</expr_stmt></block></while>   }</block></for>  <if>if<condition>(<expr><name>x</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>res</name> <operator>=</operator> <name>res</name> <operator>/</operator> <name>x</name>  <operator>*</operator> <operator>(</operator><name>x</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block></then></if>    <return>return <expr><name>res</name></expr>;</return>}</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>A</name></parameter>, <parameter><type><name>typename</name></type> <name>B</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>bool</name></type> <name>chmin</name><parameter_list>(<parameter><decl><type><name>A</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>B</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<if>if<condition>(<expr><name>a</name> <operator>&gt;</operator> <name>b</name></expr>)</condition><then> <block>{<expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt> <return>return <expr><literal type="number">1</literal></expr>;</return>}</block></then></if> <return>return <expr><literal type="number">0</literal></expr>;</return>}</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>A</name></parameter>, <parameter><type><name>typename</name></type> <name>B</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>bool</name></type> <name>chmax</name><parameter_list>(<parameter><decl><type><name>A</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>B</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<if>if<condition>(<expr><name>a</name> <operator>&lt;</operator> <name>b</name></expr>)</condition><then> <block>{<expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt> <return>return <expr><literal type="number">1</literal></expr>;</return>}</block></then></if> <return>return <expr><literal type="number">0</literal></expr>;</return>}</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>A</name></parameter>, <parameter><type><name>typename</name></type> <name>B</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>ll</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>A</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>B</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<if>if<condition>(<expr><name>x</name> <operator>+</operator> <name>y</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>x</name> <operator>+</operator> <name>y</name> <operator>+</operator> <name>mod</name></expr>;</return></block></then></if> <return>return <expr><ternary><condition><expr><name>x</name> <operator>+</operator> <name>y</name> <operator>&gt;=</operator> <name>mod</name></expr> ?</condition><then> <expr><name>x</name> <operator>+</operator> <name>y</name> <operator>-</operator> <name>mod</name></expr> </then><else>: <expr><name>x</name> <operator>+</operator> <name>y</name></expr></else></ternary></expr>;</return>}</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>A</name></parameter>, <parameter><type><name>typename</name></type> <name>B</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>void</name></type> <name>add2</name><parameter_list>(<parameter><decl><type><name>A</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>B</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<if>if<condition>(<expr><name>x</name> <operator>+</operator> <name>y</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>+</operator> <name>y</name> <operator>+</operator> <name>mod</name></expr>;</expr_stmt></block></then> <else>else <block type="pseudo"><expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>x</name> <operator>+</operator> <name>y</name> <operator>&gt;=</operator> <name>mod</name></expr> ?</condition><then> <expr><name>x</name> <operator>+</operator> <name>y</name> <operator>-</operator> <name>mod</name></expr> </then><else>: <expr><name>x</name> <operator>+</operator> <name>y</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block></else></if>}</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>A</name></parameter>, <parameter><type><name>typename</name></type> <name>B</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>ll</name></type> <name>mul1</name><parameter_list>(<parameter><decl><type><name>A</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>B</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<return>return <expr><literal type="number">1ll</literal> <operator>*</operator> <name>x</name> <operator>*</operator> <name>y</name> <operator>%</operator> <name>mod</name></expr>;</return>}</block></function> <comment type="line" format="doxygen">/// x * y % mod;</comment>
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>A</name></parameter>, <parameter><type><name>typename</name></type> <name>B</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>void</name></type> <name>mul2</name><parameter_list>(<parameter><decl><type><name>A</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>B</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><literal type="number">1ll</literal> <operator>*</operator> <name>x</name> <operator>*</operator> <name>y</name> <operator>%</operator> <name>mod</name> <operator>+</operator> <name>mod</name><operator>)</operator> <operator>%</operator> <name>mod</name></expr>;</expr_stmt>}</block></function> <comment type="line" format="doxygen">/// return x * y</comment>
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>A</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>void</name></type> <name>debug</name><parameter_list>(<parameter><decl><type><name>A</name></type> <name>a</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>a</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>}</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>A</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>ll</name></type> <name>sqr</name><parameter_list>(<parameter><decl><type><name>A</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{<return>return <expr><literal type="number">1ll</literal> <operator>*</operator> <name>x</name> <operator>*</operator> <name>x</name></expr>;</return>}</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>A</name></parameter>&gt;</parameter_list></template> <type><name>A</name></type> <name>inv</name><parameter_list>(<parameter><decl><type><name>A</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<return>return <expr><call><name>mulll</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>mod</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>,<argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr>;</return>}</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>A</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>bugl</name><parameter_list>(<parameter><decl><type><name>A</name></type> <name><name>a</name><index>[]</index></name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list> <block>{ <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>l</name></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;=</operator> <name>r</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt></block></for> <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>  }</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>A</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>bug</name><parameter_list>(<parameter><decl><type><name>A</name></type> <name><name>a</name><index>[]</index></name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list> <block>{ <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>l</name></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;=</operator> <name>r</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt></block></for> <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>  }</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name>void</name></type> <name>wt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T</name><modifier>&amp;</modifier></type> <name>x</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>x</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name>void</name></type> <name>wt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T</name><modifier>&amp;</modifier></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>x</name> <operator>&lt;&lt;</operator> <name>c</name></expr>;</expr_stmt>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name>void</name></type> <name>wt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T</name><modifier>&amp;</modifier></type> <name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>string</name><modifier>&amp;</modifier></type> <name>s</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>x</name> <operator>&lt;&lt;</operator> <name>s</name></expr>;</expr_stmt>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name>void</name></type> <name>wt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T</name><modifier>&amp;</modifier></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rnd</name></decl></parameter>)</parameter_list><block>{  <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>fixed</name> <operator>&lt;&lt;</operator> <call><name>setprecision</name><argument_list>(<argument><expr><name>rnd</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>x</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list><block>{  <expr_stmt><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt> <decl_stmt><decl><type><name>char</name></type> <name>c</name><init>=<expr><call><name>getchar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>f</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>  <while>while <condition>(<expr><operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<if>if <condition>(<expr><name>c</name><operator>==</operator><literal type="char">'-'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>f</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if> <expr_stmt><expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>}</block></while> <while>while <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<expr_stmt><expr><name>x</name><operator>=</operator><name>x</name><operator>*</operator><literal type="number">10</literal><operator>+</operator><name>c</name><operator>-</operator><literal type="char">'0'</literal></expr>;</expr_stmt> <expr_stmt><expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>}</block></while> <expr_stmt><expr><name>x</name><operator>*=</operator><name>f</name></expr>;</expr_stmt>}</block></function>
<function><specifier>inline</specifier> <type><name>ll</name></type> <name>lowbit</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{ <return>return <expr><operator>(</operator><name>x</name> <operator>&amp;</operator> <operator>(</operator><operator>-</operator><name>x</name><operator>)</operator><operator>)</operator></expr>;</return> }</block></function>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>debug</name><parameter_list>()</parameter_list><block>{  <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"###!!!"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>}</block></function>
<comment type="line">//inline void bugl(int a[],int l,int r){ for(int i = l;i &lt;= r;i++) cout &lt;&lt; a[i] &lt;&lt; " "; cout &lt;&lt; endl; }</comment>
<comment type="line">//inline void bug(int a[],int l,int r){ for(int i = l;i &lt;= r;i++) cout &lt;&lt; a[i] &lt;&lt; " ";  }</comment>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{  
	<expr_stmt><expr><name>ios</name></expr>;</expr_stmt> 
	<macro><name>times</name></macro><block>{ 
	  	<decl_stmt><decl><type><name>ll</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>,<decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
	  	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name> <operator>&gt;&gt;</operator> <name>c</name> <operator>&gt;&gt;</operator> <name>d</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>    
	  	<decl_stmt><decl><type><name>ll</name></type> <name>aa</name></decl>,<decl><type ref="prev"/><name>bb</name></decl>;</decl_stmt>
	  	<decl_stmt><decl><type><name>ll</name></type> <name>num</name> <init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	  	<if>if<condition>(<expr><name>a</name> <operator>%</operator> <name>c</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>num</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if> 
	  	  <expr_stmt><expr><name>aa</name> <operator>=</operator> <name>a</name> <operator>/</operator> <name>c</name> <operator>+</operator> <name>num</name></expr>;</expr_stmt> 
		<expr_stmt><expr><name>num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	  	<if>if<condition>(<expr><name>b</name> <operator>%</operator> <name>d</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>num</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if> <expr_stmt><expr><name>bb</name> <operator>=</operator> <name>b</name> <operator>/</operator> <name>d</name> <operator>+</operator> <name>num</name></expr>;</expr_stmt>   
	  	<if>if<condition>(<expr><name>aa</name> <operator>+</operator> <name>bb</name> <operator>&gt;</operator> <name>k</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>wt</name><argument_list>(<argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
	  	<else>else <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>aa</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name>bb</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></else></if>

	}</block>
    <return>return <expr><literal type="number">0</literal></expr>;</return> 
}</block></function>





</unit>
