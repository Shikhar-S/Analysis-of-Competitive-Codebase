<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28893996_62491496.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = (a); i &lt;= (b); i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>per</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = (a); i &gt;= (b); i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fst</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>snd</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mod</name> <init>= <expr><literal type="number">998244353</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">100010</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name><name>cnt</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt> <decl_stmt><decl><type><name>ll</name></type> <name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>a</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>p</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name>ans</name></decl>, <decl><type ref="prev"/><name>flag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>lp</name></decl>;</decl_stmt>

<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>gi</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{
	<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <decl_stmt><decl><type><specifier>register</specifier> <name>char</name></type> <name>c</name> <init>= <expr><call><name>getchar</name><argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>pre</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init>;</init> <condition><expr><name><name>c</name> <argument_list type="generic">&lt; <argument><expr><literal type="char">'0'</literal> <operator>||</operator> <name>c</name></expr></argument> &gt;</argument_list></name> <literal type="char">'9'</literal></expr>;</condition> <incr><expr><name>pre</name> <operator>=</operator> <name>c</name></expr><operator>,</operator> <expr><name>c</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr></incr>)</control><block type="pseudo"><empty_stmt>;</empty_stmt></block></for>
	<for>for<control>(<init>;</init> <condition><expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>;</condition> <incr><expr><name>c</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>*</operator> <literal type="number">10ll</literal> <operator>+</operator> <operator>(</operator><name>c</name> <operator>^</operator> <literal type="number">48</literal><operator>)</operator></expr>;</expr_stmt></block></for>
	<if>if<condition>(<expr><name>pre</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>x</name> <operator>=</operator> <operator>-</operator><name>x</name></expr>;</expr_stmt></block></then></if>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><call><name>gi</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>gi</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <macro><name>rep</name><argument_list>(<argument>i</argument>, <argument><literal type="number">1</literal></argument>, <argument>n</argument>)</argument_list></macro> <expr_stmt><expr><call><name>gi</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name><name>p</name><index>[<expr><operator>++</operator><name>lp</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <name>lp</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name>lp</name> <operator>=</operator> <call><name>unique</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <name>lp</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <name>p</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rep</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>++</operator><name><name>cnt</name><index>[<expr><call><name>lower_bound</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <name>lp</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <name>p</name></expr>]</index></name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>r</name> <init>= <expr><name>lp</name></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init>;</init> <condition><expr><name>l</name> <operator>&lt;</operator> <name>r</name> <operator>&amp;&amp;</operator> <name>m</name></expr>;</condition><incr/>)</control> <block>{
		<if>if<condition>(<expr><name><name>cnt</name><index>[<expr><name>l</name></expr>]</index></name> <operator>&lt;</operator> <name><name>cnt</name><index>[<expr><name>r</name></expr>]</index></name></expr>)</condition><then> <block>{
			<if>if<condition>(<expr><name>m</name> <operator>&gt;=</operator> <literal type="number">1ll</literal> <operator>*</operator> <name><name>cnt</name><index>[<expr><name>l</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name><name>p</name><index>[<expr><name>l</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>p</name><index>[<expr><name>l</name></expr>]</index></name><operator>)</operator></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>m</name> <operator>-=</operator> <literal type="number">1ll</literal> <operator>*</operator> <name><name>cnt</name><index>[<expr><name>l</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name><name>p</name><index>[<expr><name>l</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>p</name><index>[<expr><name>l</name></expr>]</index></name><operator>)</operator></expr><operator>,</operator> <expr><name><name>cnt</name><index>[<expr><name>l</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name><name>cnt</name><index>[<expr><name>l</name></expr>]</index></name></expr><operator>,</operator> <expr><operator>++</operator><name>l</name></expr>;</expr_stmt>
			}</block></then>
			<else>else <block>{ <expr_stmt><expr><name>flag</name> <operator>=</operator> <name>m</name> <operator>/</operator> <name><name>cnt</name><index>[<expr><name>l</name></expr>]</index></name></expr>;</expr_stmt> <break>break;</break> }</block></else></if>
		}</block></then>
		<else>else <block>{
			<if>if<condition>(<expr><name>m</name> <operator>&gt;=</operator> <literal type="number">1ll</literal> <operator>*</operator> <name><name>cnt</name><index>[<expr><name>r</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name><name>p</name><index>[<expr><name>r</name></expr>]</index></name> <operator>-</operator> <name><name>p</name><index>[<expr><name>r</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>m</name> <operator>-=</operator> <literal type="number">1ll</literal> <operator>*</operator> <name><name>cnt</name><index>[<expr><name>r</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name><name>p</name><index>[<expr><name>r</name></expr>]</index></name> <operator>-</operator> <name><name>p</name><index>[<expr><name>r</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr><operator>,</operator> <expr><name><name>cnt</name><index>[<expr><name>r</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name><name>cnt</name><index>[<expr><name>r</name></expr>]</index></name></expr><operator>,</operator> <expr><operator>--</operator><name>r</name></expr>;</expr_stmt>
			}</block></then>
			<else>else <block>{ <expr_stmt><expr><name>flag</name> <operator>=</operator> <name>m</name> <operator>/</operator> <name><name>cnt</name><index>[<expr><name>r</name></expr>]</index></name></expr>;</expr_stmt> <break>break;</break> }</block></else></if>
		}</block></else></if>
<comment type="line">//		rep(i, 1, n) printf("%d ", cnt[i]); puts("");</comment>
	}</block></for>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><name>r</name></expr>]</index></name> <operator>-</operator> <name><name>p</name><index>[<expr><name>l</name></expr>]</index></name> <operator>-</operator> <name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
