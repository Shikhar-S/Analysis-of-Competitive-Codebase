<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28897286_62490324.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ull</name></cpp:macro> <cpp:value>unsigned long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ss</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ub</name></cpp:macro> <cpp:value>upper_bound</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lb</name></cpp:macro> <cpp:value>lower_bound</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>zoom</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>ll</name></type> <name>solve</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
    <if>if<condition>(<expr><name>a</name> <operator>&gt;</operator> <name>b</name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    <if>if<condition>(<expr><name>a</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>b</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><literal type="number">2</literal></expr>;</return></block></then></if>
    <if>if<condition>(<expr><name>a</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>b</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{

    <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ONLINE_JUDGE</name></cpp:ifndef>
    <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"input.txt"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"output.txt"</literal></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><name>zoom</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>color</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><call><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">1</literal></expr></incr>)</control> 
        <block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>color</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block></for>
    <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">1</literal></expr></incr>)</control> 
        <block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>color</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block></for>
    <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">1</literal></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>color</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt></block></for>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>Graph</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><call><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></type> <name>vis</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>u</name> <operator>&gt;&gt;</operator> <name>v</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>u</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>v</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>Graph</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>Graph</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <decl_stmt><decl><type><name>ll</name></type> <name>strt</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>temp</name> <init>= <expr><operator>(</operator><name>ll</name><operator>)</operator><name><name>Graph</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>temp</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        }</block></then></if>
        <if>if<condition>(<expr><name>temp</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>strt</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block></then></if>
    }</block></for>
    <if>if<condition>(<expr><name>strt</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>look</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>look</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>strt</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>vis</name><index>[<expr><name>strt</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>temp</name> <init>= <expr><operator>(</operator><name>ll</name><operator>)</operator><name><name>Graph</name><index>[<expr><name>strt</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>temp</name></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{
            <if>if<condition>(<expr><name><name>vis</name><index>[<expr><name><name>Graph</name><index>[<expr><name>strt</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name></expr>)</condition><then>
                <block type="pseudo"><continue>continue;</continue></block></then></if>
            <expr_stmt><expr><name><name>vis</name><index>[<expr><name><name>Graph</name><index>[<expr><name>strt</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>look</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>Graph</name><index>[<expr><name>strt</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>strt</name> <operator>=</operator> <name><name>Graph</name><index>[<expr><name>strt</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
            <break>break;</break>
        }</block></for>
    }</block></for>
    <decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>buffer</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>req</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{
        <for>for<control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{
            <if>if<condition>(<expr><name>i</name> <operator>==</operator> <name>j</name></expr>)</condition><then>
                <block type="pseudo"><continue>continue;</continue></block></then></if>
            <decl_stmt><decl><type><name>ll</name></type> <name>one</name> <init>= <expr><name>i</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ll</name></type> <name>two</name> <init>= <expr><name>j</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>buffer</name><index>[<expr><name><name>look</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>one</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>buffer</name><index>[<expr><name><name>look</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>two</name></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>ll</name></type> <name>temp</name> <init>= <expr><name><name>color</name><index>[<expr><name><name>look</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index><index>[<expr><name>one</name></expr>]</index></name> <operator>+</operator> <name><name>color</name><index>[<expr><name><name>look</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index><index>[<expr><name>two</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <for>for<control>(<init><decl><type><name>ll</name></type> <name>k</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>k</name> <operator>+=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{
                <decl_stmt><decl><type><name>ll</name></type> <name>three</name> <init>= <expr><call><name>solve</name><argument_list>(<argument><expr><name>one</name></expr></argument>, <argument><expr><name>two</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>buffer</name><index>[<expr><name><name>look</name><index>[<expr><name>k</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>three</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>temp</name> <operator>+=</operator> <name><name>color</name><index>[<expr><name><name>look</name><index>[<expr><name>k</name></expr>]</index></name></expr>]</index><index>[<expr><name>three</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>one</name> <operator>=</operator> <name>two</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>two</name> <operator>=</operator> <name>three</name></expr>;</expr_stmt>
            }</block></for>
            <if>if<condition>(<expr><name>ans</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt></block></then></if>
            <if>if<condition>(<expr><name>temp</name> <operator>&lt;=</operator> <name>ans</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>ans</name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>req</name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
    }</block></for>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">1</literal></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>req</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt></block></for>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
