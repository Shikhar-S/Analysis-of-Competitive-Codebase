<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28901598_62487001.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>ii</name>;</typedef>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mod</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>


<function><type><name>int</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><operator>(</operator><literal type="number">1ll</literal> <operator>*</operator> <name>x</name> <operator>+</operator> <literal type="number">1ll</literal> <operator>*</operator> <name>y</name><operator>)</operator> <operator>%</operator> <name>mod</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>del</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><operator>(</operator><operator>(</operator><literal type="number">1ll</literal> <operator>*</operator> <name>x</name> <operator>-</operator> <literal type="number">1ll</literal> <operator>*</operator> <name>y</name><operator>)</operator> <operator>%</operator> <name>mod</name> <operator>+</operator> <name>mod</name><operator>)</operator> <operator>%</operator> <name>mod</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>mul</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><operator>(</operator><literal type="number">1ll</literal> <operator>*</operator> <name>x</name> <operator>*</operator> <literal type="number">1ll</literal> <operator>*</operator> <name>y</name><operator>)</operator> <operator>%</operator> <name>mod</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">1e5</literal> <operator>+</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name><name>c</name><index>[<expr><name>N</name></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>pref</name><index>[<expr><name>N</name></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>dp</name><index>[<expr><name>N</name></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>ans</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>node</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>graph</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>inf</name> <init>= <expr><literal type="number">1e9</literal> <operator>*</operator> <literal type="number">1e9</literal></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>node</name><index>[<expr><name>val</name></expr>]</index></name> <operator>=</operator> <name>u</name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>graph</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><name><name>graph</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>v</name> <operator>==</operator> <name>p</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
        <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>val</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
}</block></function>

<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>c</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
    }</block></for>
    <comment type="line">//cout &lt;&lt; c[2][1] &lt;&lt; "\n";</comment>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>u</name> <operator>&gt;&gt;</operator> <name>v</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>graph</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>graph</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>hihi</name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <if>if<condition>(<expr><name><name>graph</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"-1\n"</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if<condition>(<expr><name><name>graph</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>hihi</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block></then></if>
    }</block></for>
    <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>hihi</name></expr></argument>, <argument><expr><name>hihi</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{
        <for>for<control>(<init><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>l</name> <operator>&lt;=</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>l</name><operator>++</operator></expr></incr>)</control> <block>{
            <if>if<condition>(<expr><name>j</name> <operator>==</operator> <name>l</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
            <expr_stmt><expr><name><name>dp</name><index>[<expr><name><name>node</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>l</name></expr>]</index></name> <operator>=</operator> <name><name>c</name><index>[<expr><name><name>node</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <name><name>c</name><index>[<expr><name><name>node</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index><index>[<expr><name>l</name></expr>]</index></name></expr>;</expr_stmt>
            <comment type="line">//cout &lt;&lt; dp[node[2]][j][l] &lt;&lt; " " &lt;&lt; j &lt;&lt; " " &lt;&lt; l &lt;&lt; "\n";</comment>
        }</block></for>
    }</block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{
            <for>for<control>(<init><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>l</name> <operator>&lt;=</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>l</name><operator>++</operator></expr></incr>)</control> <block>{
                <if>if<condition>(<expr><name>j</name> <operator>==</operator> <name>l</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
                <expr_stmt><expr><name><name>dp</name><index>[<expr><name><name>node</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>l</name></expr>]</index></name> <operator>=</operator> <name>inf</name></expr>;</expr_stmt>
                <for>for<control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{
                    <if>if<condition>(<expr><name>j</name> <operator>==</operator> <name>k</name> <operator>||</operator> <name>k</name> <operator>==</operator> <name>l</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
                    <comment type="line">//cout &lt;&lt; j &lt;&lt; " " &lt;&lt; k &lt;&lt; " " &lt;&lt; l &lt;&lt; "\n";</comment>
                    <if>if<condition>(<expr><name><name>dp</name><index>[<expr><name><name>node</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>]</index><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator> <name><name>c</name><index>[<expr><name><name>node</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>&lt;</operator> <name><name>dp</name><index>[<expr><name><name>node</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>l</name></expr>]</index></name></expr>)</condition><then> <block>{
                        <comment type="line">//cout &lt;&lt; dp[node[i - 1]][l][k] + c[node[i]][j] &lt;&lt; " " &lt;&lt; j &lt;&lt; " " &lt;&lt; l &lt;&lt; " " &lt;&lt; k &lt;&lt; " " &lt;&lt; c[node[i]][j] &lt;&lt; "\n";</comment>
                        <expr_stmt><expr><name><name>dp</name><index>[<expr><name><name>node</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>l</name></expr>]</index></name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>dp</name><index>[<expr><name><name>node</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>l</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>dp</name><index>[<expr><name><name>node</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>]</index><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator> <name><name>c</name><index>[<expr><name><name>node</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>pref</name><index>[<expr><name><name>node</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>l</name></expr>]</index></name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></for>
            }</block></for>
        }</block></for>
    }</block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>, <decl><type ref="prev"/><name>mn</name> <init>= <expr><name>inf</name></expr></init></decl>, <decl><type ref="prev"/><name>id1</name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{
        <for>for<control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{
            <if>if<condition>(<expr><name>j</name> <operator>==</operator> <name>k</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
            <if>if<condition>(<expr><name><name>dp</name><index>[<expr><name><name>node</name><index>[<expr><name>n</name></expr>]</index></name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>&lt;</operator> <name>mn</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>mn</name> <operator>=</operator> <name><name>dp</name><index>[<expr><name><name>node</name><index>[<expr><name>n</name></expr>]</index></name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>id</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt> <expr_stmt><expr><name>id1</name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
    }</block></for>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>mn</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><name>n</name></expr></init></decl>;</decl_stmt>
    <comment type="line">//cout &lt;&lt; id &lt;&lt; " " &lt;&lt; id1 &lt;&lt; "\n";</comment>
    <while>while<condition>(<expr><name>pos</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{
        <expr_stmt><expr><name><name>ans</name><index>[<expr><name><name>node</name><index>[<expr><name>pos</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ans</name><index>[<expr><name><name>node</name><index>[<expr><name>pos</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>id1</name></expr>;</expr_stmt>
        <comment type="line">//id = id1;</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>id2</name> <init>= <expr><name><name>pref</name><index>[<expr><name><name>node</name><index>[<expr><name>pos</name></expr>]</index></name></expr>]</index><index>[<expr><name>id</name></expr>]</index><index>[<expr><name>id1</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>id</name> <operator>=</operator> <name>id1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>id1</name> <operator>=</operator> <name>id2</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>pos</name><operator>--</operator></expr>;</expr_stmt>
    }</block></while>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt></block></for>
}</block></function>
</unit>
