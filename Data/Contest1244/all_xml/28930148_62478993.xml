<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28930148_62478993.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>LL</name>;</typedef>

<decl_stmt><decl><type><name>LL</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LL</name></type> <name><name>c</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">800005</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LL</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LL</name></type> <name>ec</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name><name>to</name><index>[<expr><literal type="number">800005</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>nxt</name><index>[<expr><literal type="number">800005</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>hed</name><index>[<expr><literal type="number">200005</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LL</name></type> <name><name>deg</name><index>[<expr><literal type="number">400005</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>add_edge</name><parameter_list>(<parameter><decl><type><name>LL</name></type> <name>f</name></decl></parameter>,<parameter><decl><type><name>LL</name></type> <name>t</name></decl></parameter>)</parameter_list><block>{
	<expr_stmt><expr><operator>++</operator> <name>ec</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>to</name><index>[<expr><name>ec</name></expr>]</index></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>nxt</name><index>[<expr><name>ec</name></expr>]</index></name> <operator>=</operator> <name><name>hed</name><index>[<expr><name>f</name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>hed</name><index>[<expr><name>f</name></expr>]</index></name> <operator>=</operator> <name>ec</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>deg</name><index>[<expr><name>t</name></expr>]</index></name> <operator>++</operator></expr>;</expr_stmt>
}</block></function>

<decl_stmt><decl><type><name>LL</name></type> <name><name>col</name><index>[<expr><literal type="number">200005</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LL</name></type> <name><name>rec</name><index>[<expr><literal type="number">200005</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><name>LL</name></type> <name>chg</name><parameter_list>(<parameter><decl><type><name>LL</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>LL</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{
	<if>if<condition>(<expr><name>x</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>y</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">3</literal></expr>;</return></block></then></if>
	<if>if<condition>(<expr><name>x</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>y</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">2</literal></expr>;</return></block></then></if>
	<if>if<condition>(<expr><name>x</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>y</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
	<if>if<condition>(<expr><name>y</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>x</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">3</literal></expr>;</return></block></then></if>
	<if>if<condition>(<expr><name>y</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>x</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">2</literal></expr>;</return></block></then></if>
	<if>if<condition>(<expr><name>y</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>x</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
}</block></function>

<function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>LL</name></type> <name>u</name></decl></parameter>,<parameter><decl><type><name>LL</name></type> <name>f</name></decl></parameter>,<parameter><decl><type><name>LL</name></type> <name>uc</name></decl></parameter>,<parameter><decl><type><name>LL</name></type> <name>fc</name></decl></parameter>)</parameter_list><block>{
	<for>for<control>(<init><decl><type><name>LL</name></type> <name>i</name> <init>= <expr><name><name>hed</name><index>[<expr><name>u</name></expr>]</index></name></expr></init></decl>;</init><condition><expr><name>i</name></expr>;</condition><incr><expr><name>i</name> <operator>=</operator> <name><name>nxt</name><index>[<expr><name>i</name></expr>]</index></name></expr></incr>)</control><block>{
		<decl_stmt><decl><type><name>LL</name></type> <name>v</name> <init>= <expr><name><name>to</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>v</name> <operator>==</operator> <name>f</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
		<expr_stmt><expr><name><name>col</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <call><name>chg</name><argument_list>(<argument><expr><name>uc</name></expr></argument>,<argument><expr><name>fc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>v</name></expr></argument>,<argument><expr><name>u</name></expr></argument>,<argument><expr><name><name>col</name><index>[<expr><name>v</name></expr>]</index></name></expr></argument>,<argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>LL</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>LL</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition><incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>LL</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition><incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>LL</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition><incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>LL</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition><incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>add_edge</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>add_edge</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<decl_stmt><decl><type><name>LL</name></type> <name>ans</name> <init>= <expr><literal type="number">0x3f3f3f3f3f3f3f3f</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>LL</name></type> <name>c1</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>c1</name> <operator>&lt;=</operator> <literal type="number">3</literal></expr>;</condition><incr><expr><name>c1</name> <operator>++</operator></expr></incr>)</control><block>{
		<for>for<control>(<init><decl><type><name>LL</name></type> <name>c2</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>c2</name> <operator>&lt;=</operator> <literal type="number">3</literal></expr>;</condition><incr><expr><name>c2</name> <operator>++</operator></expr></incr>)</control><block>{
			<if>if<condition>(<expr><name>c1</name> <operator>==</operator> <name>c2</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
			<expr_stmt><expr><name><name>col</name><index>[<expr><name>a</name></expr>]</index></name> <operator>=</operator> <name>c1</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>col</name><index>[<expr><name>b</name></expr>]</index></name> <operator>=</operator> <name>c2</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c1</name></expr></argument>,<argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>c2</name></expr></argument>,<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>LL</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
			<for>for<control>(<init><decl><type><name>LL</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition><incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control><block>{
				<expr_stmt><expr><name>cnt</name> <operator>+=</operator> <name><name>c</name><index>[<expr><name><name>col</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
			}</block></for>
			<if>if<condition>(<expr><name>cnt</name> <operator>&lt;</operator> <name>ans</name></expr>)</condition><then><block>{
				<expr_stmt><expr><name>ans</name> <operator>=</operator> <name>cnt</name></expr>;</expr_stmt>
				<for>for<control>(<init><decl><type><name>LL</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition><incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>rec</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>col</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
			}</block></then></if>
		}</block></for>
	}</block></for>
	<for>for<control>(<init><decl><type><name>LL</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition><incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control><block>{
		<if>if<condition>(<expr><name><name>deg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		}</block></then></if>
	}</block></for>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>LL</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition><incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>rec</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <operator>(</operator><ternary><condition><expr><name>i</name> <operator>==</operator> <name>n</name></expr> ?</condition><then> <expr><literal type="char">'\n'</literal></expr> </then><else>: <expr><literal type="char">' '</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block></for> 
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
