<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28936371_62488727.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ld</name></cpp:macro> <cpp:value>double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ull</name></cpp:macro> <cpp:value>unsigned long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;int,int &gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>iiii</name></cpp:macro> <cpp:value>pair&lt;int,pii &gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INF</name></cpp:macro> <cpp:value>1000000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int (i)=0;(i)&lt;(x);(i)++)</cpp:value></cpp:define>
<function><specifier>inline</specifier> <type><name>int</name></type> <name>getint</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>int</name></type> <name>x</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>p</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt><decl_stmt><decl><type><name>char</name></type> <name>c</name><init>=<expr><call><name>getchar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><name>c</name><operator>&lt;=</operator><literal type="number">32</literal></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
	<if>if<condition>(<expr><name>c</name><operator>==</operator><literal type="number">45</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>p</name><operator>=</operator><operator>-</operator><name>p</name></expr><operator>,</operator><expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
	<while>while <condition>(<expr><name>c</name><operator>&gt;</operator><literal type="number">32</literal></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>x</name><operator>=</operator><name>x</name><operator>*</operator><literal type="number">10</literal><operator>+</operator><name>c</name><operator>-</operator><literal type="number">48</literal></expr><operator>,</operator><expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
	<return>return <expr><name>x</name><operator>*</operator><name>p</name></expr>;</return>
}</block></function>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<comment type="line">//ruogu_alter</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name><init>=<expr><literal type="number">1e5</literal><operator>+</operator><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>an</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name><name>g</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<comment type="line">//</comment>
<function><specifier>inline</specifier> <type><name>bool</name></type> <name>isline</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>int</name></type> <name>c</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument>n</argument>)</argument_list></macro><if>if<condition>(<expr><name><name>g</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>&gt;</operator><literal type="number">2</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then>
	<elseif>else <if>if<condition>(<expr><name><name>g</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><operator>++</operator><name>c</name></expr>;</expr_stmt></block></then></if></elseif></if>
	<return>return <expr><name>c</name><operator>&lt;=</operator><literal type="number">2</literal></expr>;</return>
}</block></function>
<function><type><name>ll</name></type> <name>go</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>cp</name></decl></parameter>)</parameter_list><block>{
	<decl_stmt><decl><type><name>ll</name></type> <name>ans</name><init>=<expr><name><name>a</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument>g[x].size()</argument>)</argument_list></macro><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>to</name><init>=<expr><name><name>g</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>to</name><operator>==</operator><name>p</name></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
		<expr_stmt><expr><name>ans</name><operator>+=</operator><call><name>go</name><argument_list>(<argument><expr><name>to</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><literal type="number">3</literal><operator>-</operator><name>c</name><operator>-</operator><name>cp</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block>
	<return>return <expr><name>ans</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>doit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>cp</name></decl></parameter>)</parameter_list><block>{
	<expr_stmt><expr><name><name>an</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><name>c</name></expr>;</expr_stmt>
	<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument>g[x].size()</argument>)</argument_list></macro><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>to</name><init>=<expr><name><name>g</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>to</name><operator>==</operator><name>p</name></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
		<expr_stmt><expr><call><name>doit</name><argument_list>(<argument><expr><name>to</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><literal type="number">3</literal><operator>-</operator><name>c</name><operator>-</operator><name>cp</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block>
}</block></function>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>inf</name><init>=<expr><literal type="number">2e18</literal></expr></init></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<comment type="line">//freopen(".in","r",stdin);</comment>
	<comment type="line">//freopen(".out","w",stdout);</comment>
	<expr_stmt><expr><name>n</name><operator>=</operator><call><name>getint</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">3</literal></argument>)</argument_list></macro><macro><name>rep</name><argument_list>(<argument>j</argument>,<argument>n</argument>)</argument_list></macro><expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><call><name>getint</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument>n-<literal type="number">1</literal></argument>)</argument_list></macro><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>x</name><init>=<expr><call><name>getint</name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>y</name><init>=<expr><call><name>getint</name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>g</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>g</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block>
	<if>if<condition>(<expr><operator>!</operator><call><name>isline</name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
		<return>return <expr><operator>!</operator><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
	}</block></then></if>
	<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument>n</argument>)</argument_list></macro><if>if<condition>(<expr><name><name>g</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
		<decl_stmt><decl><type><name>ll</name></type> <name>res</name><init>=<expr><name>inf</name></expr></init></decl>;</decl_stmt>
		<macro><name>rep</name><argument_list>(<argument>j</argument>,<argument><literal type="number">3</literal></argument>)</argument_list></macro><macro><name>rep</name><argument_list>(<argument>k</argument>,<argument><literal type="number">3</literal></argument>)</argument_list></macro><if>if<condition>(<expr><name>j</name><operator>!=</operator><name>k</name></expr>)</condition><then><block>{
			<decl_stmt><decl><type><name>ll</name></type> <name>tmp</name><init>=<expr><call><name>go</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>j</name></expr></argument>,<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if<condition>(<expr><name>tmp</name><operator>&lt;</operator><name>res</name></expr>)</condition><then><block>{
				<expr_stmt><expr><name>res</name><operator>=</operator><name>tmp</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>doit</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>j</name></expr></argument>,<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then></if>
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>res</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
		<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument>n</argument>)</argument_list></macro><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d "</literal></expr></argument>,<argument><expr><name><name>an</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	}</block></then></if>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
