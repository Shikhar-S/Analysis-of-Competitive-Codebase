<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28935447_62500383.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;deque&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bitset&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vv</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vector&lt;vector&lt;d&gt; &gt;(a, vector&lt;d&gt;(b, c))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vvi</name></cpp:macro> <cpp:value>vector&lt;vector&lt;int&gt; &gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vvl</name></cpp:macro> <cpp:value>vector&lt;vector&lt;ll&gt; &gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vl</name></cpp:macro> <cpp:value>vector&lt;ll&gt;</cpp:value></cpp:define>
<typedef>typedef <type><name>long</name> <name>long</name> <name>int</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{
  <decl_stmt><decl><type><name>ll</name></type> <name>N</name></decl>, <decl><type ref="prev"/><name>K</name></decl>, <decl><type ref="prev"/><name>a</name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cin</name></name> <operator>&gt;&gt;</operator> <name>N</name> <operator>&gt;&gt;</operator> <name>K</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>num</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>data</name><argument_list>(<argument><expr><literal type="number">300000</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ll</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>N</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
    <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cin</name></name> <operator>&gt;&gt;</operator> <name>a</name></expr>;</expr_stmt>
    <if>if<condition>(<expr><call><name><name>num</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call><operator>==</operator><call><name><name>num</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>num</name><operator>.</operator><name>emplace</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>data</name><index>[<expr><name>c</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>c</name><operator>++</operator></expr>;</expr_stmt>
    }</block></then><else>else<block>{
      <expr_stmt><expr><name><name>data</name><index>[<expr><call><name><name>num</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
    }</block></else></if>
  }</block></for>
  <while>while<condition>(<expr><name>K</name><operator>&gt;</operator><literal type="number">0</literal><operator>&amp;&amp;</operator><call><name><name>num</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>!=</operator><literal type="number">1</literal></expr>)</condition><block>{
    <decl_stmt><decl><type><name>auto</name></type> <name>it_l</name> <init>= <expr><call><name><name>num</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>auto</name></type> <name>it_r</name> <init>= <expr><operator>--</operator><call><name><name>num</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>l</name> <init>= <expr><name><name>data</name><index>[<expr><name><operator>(</operator><operator>*</operator><name>it_l</name><operator>)</operator><operator>.</operator><name>second</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>r</name> <init>= <expr><name><name>data</name><index>[<expr><name><operator>(</operator><operator>*</operator><name>it_r</name><operator>)</operator><operator>.</operator><name>second</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <comment type="line">//std::cout &lt;&lt; K &lt;&lt; '\n';</comment>
    <comment type="line">//std::cout &lt;&lt; (*it_r).first &lt;&lt; " " &lt;&lt; (*it_l).first&lt;&lt; '\n';</comment>
    <comment type="line">//std::cout &lt;&lt; num.size() &lt;&lt; '\n';</comment>
    <if>if<condition>(<expr><name>l</name><operator>&gt;</operator><name>r</name></expr>)</condition><then><block>{
      <decl_stmt><decl><type><name>ll</name></type> <name>from</name> <init>= <expr><name><operator>(</operator><operator>*</operator><name>it_r</name><operator>)</operator><operator>.</operator><name>first</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>it_r</name><operator>--</operator></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>ll</name></type> <name>next</name> <init>= <expr><name><operator>(</operator><operator>*</operator><name>it_r</name><operator>)</operator><operator>.</operator><name>first</name></name></expr></init></decl>;</decl_stmt>
      <if>if<condition>(<expr><operator>(</operator><name>from</name><operator>-</operator><name>next</name><operator>)</operator><operator>*</operator><name>r</name><operator>&lt;=</operator><name>K</name></expr>)</condition><then><block>{
        <expr_stmt><expr><name>K</name><operator>-=</operator><call><name>abs</name><argument_list>(<argument><expr><name>from</name><operator>-</operator><name>next</name></expr></argument>)</argument_list></call><operator>*</operator><name>r</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>data</name><index>[<expr><call><name><name>num</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>+=</operator><name>r</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>num</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then><else>else<block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>slide</name> <init>= <expr><name>K</name><operator>/</operator><name>r</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>K</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>num</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>num</name><operator>.</operator><name>emplace</name></name><argument_list>(<argument><expr><name>from</name><operator>-</operator><name>slide</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></else></if>
    }</block></then><else>else<block>{
      <decl_stmt><decl><type><name>ll</name></type> <name>from</name> <init>= <expr><name><operator>(</operator><operator>*</operator><name>it_l</name><operator>)</operator><operator>.</operator><name>first</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>it_l</name><operator>++</operator></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>ll</name></type> <name>next</name> <init>= <expr><name><operator>(</operator><operator>*</operator><name>it_l</name><operator>)</operator><operator>.</operator><name>first</name></name></expr></init></decl>;</decl_stmt>
      <if>if<condition>(<expr><operator>(</operator><name>next</name><operator>-</operator><name>from</name><operator>)</operator><operator>*</operator><name>l</name><operator>&lt;=</operator><name>K</name></expr>)</condition><then><block>{
        <expr_stmt><expr><name>K</name><operator>-=</operator><call><name>abs</name><argument_list>(<argument><expr><name>from</name><operator>-</operator><name>next</name></expr></argument>)</argument_list></call><operator>*</operator><name>l</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>data</name><index>[<expr><call><name><name>num</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>+=</operator><name>l</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>num</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then><else>else<block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>slide</name> <init>= <expr><name>K</name><operator>/</operator><name>l</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>K</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>num</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>num</name><operator>.</operator><name>emplace</name></name><argument_list>(<argument><expr><name>from</name><operator>+</operator><name>slide</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></else></if>
    }</block></else></if>
  }</block></while>
  <decl_stmt><decl><type><name>auto</name></type> <name>itr</name> <init>= <expr><call><name><name>num</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>auto</name></type> <name>it2</name> <init>= <expr><call><name><name>num</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>it2</name><operator>--</operator></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <name><operator>(</operator><operator>*</operator><name>it2</name><operator>)</operator><operator>.</operator><name>first</name></name> <operator>-</operator> <name><operator>(</operator><operator>*</operator><name>itr</name><operator>)</operator><operator>.</operator><name>first</name></name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
