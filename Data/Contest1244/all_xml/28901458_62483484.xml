<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28901458_62483484.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name> <name>(</name><cpp:literal>"-ffloat-store"</cpp:literal><name>)</name></cpp:pragma>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>For</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(ll i=a;i&lt;=b;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>maxn</name></cpp:macro> <cpp:value>100003</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Y</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>base</name></cpp:macro> <cpp:value>17</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vc</name></cpp:macro> <cpp:value>1e18</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>ii</name>;</typedef>
<decl_stmt><decl><type><name>ll</name></type> <name><name>deg</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name><name>ke</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>vertices</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>u</name></decl>,<decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>c</name><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>f</name><index>[<expr><name>maxn</name></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ii</name></type> <name><name>track</name><index>[<expr><name>maxn</name></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>color</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>par</name></decl></parameter>)</parameter_list><block>{
<comment type="line">//	ll &lt;&lt; x &lt;&lt; " " &lt;&lt; par &lt;&lt; "\n";</comment>
	<expr_stmt><expr><call><name><name>vertices</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>ll</name> <modifier>&amp;</modifier></type><name>u</name><range>:<expr><name><name>ke</name><index>[<expr><name>x</name></expr>]</index></name></expr></range></decl></init>)</control><block>{
		<if>if<condition>(<expr><name>u</name><operator>==</operator><name>par</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
		<expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>u</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
}</block></function>
<function><name>main</name><parameter_list>()</parameter_list><block>{
<comment type="line">//	ios_base::sync_with_stdio(0);</comment>
<comment type="line">//	cin.tie(NULL);</comment>
<comment type="line">//    ll.tie(NULL);   </comment>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
    <macro><name>For</name><argument_list>(<argument>j</argument>,<argument><literal type="number">1</literal></argument>,<argument><literal type="number">3</literal></argument>)</argument_list></macro>
    <macro><name>For</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro><block>{
    	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>c</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	}</block>
	<decl_stmt><decl><type><name>ll</name></type> <name>maxdeg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<macro><name>For</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n-<literal type="number">1</literal></argument>)</argument_list></macro><block>{
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>u</name> <operator>&gt;&gt;</operator> <name>v</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>deg</name><index>[<expr><name>u</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>deg</name><index>[<expr><name>v</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ke</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ke</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>maxdeg</name>  <operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>maxdeg</name></expr></argument>, <argument><expr><name><name>deg</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>maxdeg</name>  <operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>maxdeg</name></expr></argument>, <argument><expr><name><name>deg</name><index>[<expr><name>v</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>		
	}</block>
	<if>if<condition>(<expr><name>maxdeg</name><operator>&gt;=</operator><literal type="number">3</literal></expr>)</condition><then><block>{
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	}</block></then>	<else>else	<block>{
		<decl_stmt><decl><type><name>ll</name></type> <name>src</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<macro><name>For</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro><block>{
			<if>if<condition>(<expr><name><name>deg</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
				<expr_stmt><expr><name>src</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
				<break>break;</break>
			}</block></then></if>
		}</block>
		<expr_stmt><expr><call><name><name>vertices</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>src</name></expr></argument>,<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">//		for(ll &amp;v:vertices){</comment>
<comment type="line">//			ll &lt;&lt; v &lt;&lt; " ";</comment>
<comment type="line">//		}</comment>
<comment type="line">//		ll &lt;&lt; "!";</comment>
		<macro><name>For</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n+<literal type="number">1</literal></argument>)</argument_list></macro><block>{
			<macro><name>For</name><argument_list>(<argument>c1</argument>,<argument><literal type="number">1</literal></argument>,<argument><literal type="number">3</literal></argument>)</argument_list></macro><block>{
				<macro><name>For</name><argument_list>(<argument>c2</argument>,<argument><literal type="number">1</literal></argument>,<argument><literal type="number">3</literal></argument>)</argument_list></macro><block>{
					<expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>c1</name></expr>]</index><index>[<expr><name>c2</name></expr>]</index></name> <operator>=</operator> <name>vc</name></expr>;</expr_stmt>
				}</block>
			}</block>
		}</block>
				
		<macro><name>For</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n-<literal type="number">1</literal></argument>)</argument_list></macro><block>{
			<macro><name>For</name><argument_list>(<argument>c1</argument>,<argument><literal type="number">1</literal></argument>,<argument><literal type="number">3</literal></argument>)</argument_list></macro><block>{
				<macro><name>For</name><argument_list>(<argument>c2</argument>,<argument><literal type="number">1</literal></argument>,<argument><literal type="number">3</literal></argument>)</argument_list></macro><block>{
					<if>if<condition>(<expr><name>c1</name><operator>==</operator><name>c2</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
					<decl_stmt><decl><type><name>ll</name></type> <name>c3</name> <init>= <expr><literal type="number">6</literal><operator>-</operator><name>c1</name><operator>-</operator><name>c2</name></expr></init></decl>;</decl_stmt>
					<if>if<condition>(<expr><name><name>f</name><index>[<expr><name><name>vertices</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index><index>[<expr><name>c1</name></expr>]</index><index>[<expr><name>c2</name></expr>]</index></name><operator>+</operator><name><name>c</name><index>[<expr><name>c3</name></expr>]</index><index>[<expr><name><name>vertices</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>&lt;</operator> <name><name>f</name><index>[<expr><name><name>vertices</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>]</index><index>[<expr><name>c2</name></expr>]</index><index>[<expr><name>c3</name></expr>]</index></name></expr> )</condition><then><block>{						
						<expr_stmt><expr><name><name>f</name><index>[<expr><name><name>vertices</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>]</index><index>[<expr><name>c2</name></expr>]</index><index>[<expr><name>c3</name></expr>]</index></name> <operator>=</operator> <name><name>f</name><index>[<expr><name><name>vertices</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index><index>[<expr><name>c1</name></expr>]</index><index>[<expr><name>c2</name></expr>]</index></name><operator>+</operator><name><name>c</name><index>[<expr><name>c3</name></expr>]</index><index>[<expr><name><name>vertices</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>track</name><index>[<expr><name><name>vertices</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>]</index><index>[<expr><name>c2</name></expr>]</index><index>[<expr><name>c3</name></expr>]</index></name> <operator>=</operator> <block>{<expr><name>c1</name></expr>,<expr><name>c2</name></expr>}</block></expr>;</expr_stmt>
					}</block></then></if>
				}</block>
			}</block>
		}</block>
		<decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><name>vc</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ii</name></type> <name>state</name></decl>;</decl_stmt>
		<macro><name>For</name><argument_list>(<argument>c1</argument>,<argument><literal type="number">1</literal></argument>,<argument><literal type="number">3</literal></argument>)</argument_list></macro><block>{
			<macro><name>For</name><argument_list>(<argument>c2</argument>,<argument><literal type="number">1</literal></argument>,<argument><literal type="number">3</literal></argument>)</argument_list></macro><block>{
				<if>if<condition>(<expr><name>c1</name><operator>==</operator><name>c2</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>				
				<if>if<condition>(<expr><name>ans</name> <operator>&gt;</operator> <name><name>f</name><index>[<expr><name><name>vertices</name><index>[<expr><name>n</name></expr>]</index></name></expr>]</index><index>[<expr><name>c1</name></expr>]</index><index>[<expr><name>c2</name></expr>]</index></name></expr>)</condition><then><block>{
					<expr_stmt><expr><name>ans</name> <operator>=</operator> <name><name>f</name><index>[<expr><name><name>vertices</name><index>[<expr><name>n</name></expr>]</index></name></expr>]</index><index>[<expr><name>c1</name></expr>]</index><index>[<expr><name>c2</name></expr>]</index></name></expr>;</expr_stmt>
					<expr_stmt><expr><name>state</name> <operator>=</operator> <block>{<expr><name>c1</name></expr>,<expr><name>c2</name></expr>}</block></expr>;</expr_stmt>
				}</block></then></if>				
			}</block>
		}</block>
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>cur</name> <init>= <expr><name>n</name></expr></init></decl>;</decl_stmt>
		<do>do<block>{
			<expr_stmt><expr><name><name>color</name><index>[<expr><name><name>vertices</name><index>[<expr><name>cur</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name><name>state</name><operator>.</operator><name>Y</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>cur</name> <operator>--</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>state</name> <operator>=</operator> <name><name>track</name><index>[<expr><name>cur</name></expr>]</index><index>[<expr><name><name>state</name><operator>.</operator><name>X</name></name></expr>]</index><index>[<expr><name><name>state</name><operator>.</operator><name>Y</name></name></expr>]</index></name></expr>;</expr_stmt>
		}</block>	while<condition>(<expr><name>cur</name><operator>&gt;=</operator><literal type="number">1</literal></expr>)</condition>;</do>
		<macro><name>For</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro><block>{
			<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>color</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt>
		}</block>
	}</block></else></if>
}</block></function>
</unit>
