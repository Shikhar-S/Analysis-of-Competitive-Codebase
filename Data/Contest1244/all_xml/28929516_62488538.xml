<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28929516_62488538.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdlib&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fo</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (a=b; a&lt;=c; a++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fd</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (a=b; a&gt;=c; a--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>min</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(a&lt;b?a:b)</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr><literal type="number">200001</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>ls</name><index>[<expr><literal type="number">100001</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>x</name><index>[<expr><literal type="number">100001</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>d</name><index>[<expr><literal type="number">100001</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>D</name><index>[<expr><literal type="number">100001</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>Ans</name><index>[<expr><literal type="number">100001</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name>l</name></decl>,<decl><type ref="prev"/><name>len</name></decl>,<decl><type ref="prev"/><name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>s</name></decl>,<decl><type ref="prev"/><name>ans</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>New</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{
	<expr_stmt><expr><operator>++</operator><name>len</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>a</name><index>[<expr><name>len</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name>y</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>a</name><index>[<expr><name>len</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name><name>ls</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ls</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><name>len</name></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>Fa</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>t</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	
	<expr_stmt><expr><name><name>d</name><index>[<expr><operator>++</operator><name>l</name></expr>]</index></name><operator>=</operator><name>t</name></expr>;</expr_stmt>
	
	<for>for <control>(<init><expr><name>i</name><operator>=</operator><name><name>ls</name><index>[<expr><name>t</name></expr>]</index></name></expr>;</init> <condition><expr><name>i</name></expr>;</condition> <incr><expr><name>i</name><operator>=</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></incr>)</control>
	<block type="pseudo"><if>if <condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>!=</operator><name>Fa</name></expr>)</condition><then>
	<block type="pseudo"><expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>t</name></expr></argument>,<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></block></for>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
<comment type="line">//	freopen("d.in","r",stdin);</comment>
	
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>fo</name><argument_list>(<argument>j</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">2</literal></argument>)</argument_list></macro>
	<block>{
		<macro><name>fo</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro>
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>x</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block>
	
	<macro><name>fo</name><argument_list>(<argument>i</argument>,<argument><literal type="number">2</literal></argument>,<argument>n</argument>)</argument_list></macro>
	<block>{
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>j</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name>New</name><argument_list>(<argument><expr><name>j</name></expr></argument>,<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>New</name><argument_list>(<argument><expr><name>k</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><operator>++</operator><name><name>D</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>++</operator><name><name>D</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
	}</block>
	
	<macro><name>fo</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro>
	<if>if <condition>(<expr><name><name>D</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;</operator><literal type="number">2</literal></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-1\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></then>
	<elseif>else
	<if>if <condition>(<expr><name><name>D</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
	<block type="pseudo"><expr_stmt><expr><name>st</name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></then></if></elseif></if>
	
	<expr_stmt><expr><name>l</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<expr_stmt><expr><name>ans</name><operator>=</operator><literal type="number">1000000000000000000ll</literal></expr>;</expr_stmt>
	<macro><name>fo</name><argument_list>(<argument>j</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">2</literal></argument>)</argument_list></macro>
	<block>{
		<macro><name>fo</name><argument_list>(<argument>k</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">2</literal></argument>)</argument_list></macro>
		<if>if <condition>(<expr><name>j</name><operator>!=</operator><name>k</name></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>s</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
			
			<if>if <condition>(<expr><name>j</name><operator>!=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>k</name><operator>!=</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>l</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
			<if>if <condition>(<expr><name>j</name><operator>!=</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>k</name><operator>!=</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>l</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
			<if>if <condition>(<expr><name>j</name><operator>!=</operator><literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>k</name><operator>!=</operator><literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>l</name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt></block></then></if>
			
			<macro><name>fo</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro>
			<block>{
				<switch>switch <condition>(<expr><name>i</name><operator>%</operator><literal type="number">3</literal></expr>)</condition>
				<block>{
					<case>case <expr><literal type="number">0</literal></expr>:</case><block>{<expr_stmt><expr><name>s</name><operator>+=</operator><name><name>x</name><index>[<expr><name><name>d</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt> <break>break;</break>}</block>
					<case>case <expr><literal type="number">1</literal></expr>:</case><block>{<expr_stmt><expr><name>s</name><operator>+=</operator><name><name>x</name><index>[<expr><name><name>d</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt> <break>break;</break>}</block>
					<case>case <expr><literal type="number">2</literal></expr>:</case><block>{<expr_stmt><expr><name>s</name><operator>+=</operator><name><name>x</name><index>[<expr><name><name>d</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index><index>[<expr><name>l</name></expr>]</index></name></expr>;</expr_stmt> <break>break;</break>}</block>
				}</block></switch>
			}</block>
			
			<if>if <condition>(<expr><name>s</name><operator>&lt;</operator><name>ans</name></expr>)</condition><then>
			<block>{
				<macro><name>fo</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro>
				<block>{
					<switch>switch <condition>(<expr><name>i</name><operator>%</operator><literal type="number">3</literal></expr>)</condition>
					<block>{
						<case>case <expr><literal type="number">0</literal></expr>:</case><block>{<expr_stmt><expr><name><name>Ans</name><index>[<expr><name><name>d</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>=</operator><name>j</name></expr>;</expr_stmt> <break>break;</break>}</block>
						<case>case <expr><literal type="number">1</literal></expr>:</case><block>{<expr_stmt><expr><name><name>Ans</name><index>[<expr><name><name>d</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>=</operator><name>k</name></expr>;</expr_stmt> <break>break;</break>}</block>
						<case>case <expr><literal type="number">2</literal></expr>:</case><block>{<expr_stmt><expr><name><name>Ans</name><index>[<expr><name><name>d</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>=</operator><name>l</name></expr>;</expr_stmt> <break>break;</break>}</block>
					}</block></switch>
				}</block>
				<expr_stmt><expr><name>ans</name><operator>=</operator><name>s</name></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then></if>
	}</block>
	
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%I64d\n"</literal></expr></argument>,<argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>fo</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d "</literal></expr></argument>,<argument><expr><name><name>Ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function></unit>
