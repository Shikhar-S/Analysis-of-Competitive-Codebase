<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28896052_62468814.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<comment type="block">/*---------------------Define--------------------*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>next</name></cpp:macro> <cpp:value>nextt</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;int,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rd</name></cpp:macro> <cpp:value>random</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>taskname</name></cpp:macro> <cpp:value>""</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>popb</name></cpp:macro> <cpp:value>pop_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>popf</name></cpp:macro> <cpp:value>pop_front</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pf</name></cpp:macro> <cpp:value>push_front</cpp:value></cpp:define>
<comment type="block">/*-------------------necesary---------------------*/</comment>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>mt19937</name></type> <name>rng</name><argument_list>(<argument><expr><call><name><name>chrono</name><operator>::</operator><name>steady_clock</name><operator>::</operator><name>now</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>time_since_epoch</name><argument_list>()</argument_list></call><operator>.</operator><call><name>count</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
<comment type="block">/*------------------limit-------------------------*/</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>base</name>  <init>= <expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>oo</name> <init>= <expr><literal type="number">1e6</literal> <operator>+</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>gh</name> <init>= <expr><literal type="number">1e3</literal> <operator>+</operator> <literal type="number">3</literal></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>inf</name> <init>= <expr><literal type="number">1e15</literal> <operator>+</operator> <literal type="number">5</literal></expr></init></decl> ;</decl_stmt>
<comment type="block">/*-----------------globalvari-----------------------*/</comment>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,    <decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name>q</name></decl>;</decl_stmt>
<comment type="block">/*-----------------code-----------------------*/</comment>


<function><type><name>void</name></type> <name>input</name><parameter_list>()</parameter_list>
<block>{
    <comment type="line">//read</comment>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>m</name><operator>&gt;&gt;</operator><name>a</name><operator>&gt;&gt;</operator><name>b</name><operator>&gt;&gt;</operator><name>k</name></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name>cre</name><parameter_list>()</parameter_list>
<block>{

}</block></function>

<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name>cre</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>t1</name> <init>= <expr><name>n</name><operator>/</operator><name>a</name> <operator>+</operator><call><name>bool</name><argument_list>(<argument><expr><name>n</name><operator>%</operator><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>t2</name> <init>= <expr><name>m</name><operator>/</operator><name>b</name> <operator>+</operator> <call><name>bool</name><argument_list>(<argument><expr><name>m</name><operator>%</operator><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>t1</name><operator>+</operator><name>t2</name><operator>&lt;=</operator><name>k</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>t1</name> <operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name>t2</name> <operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></then>
    <else>else <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>-</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></else></if>

    <comment type="line">//main code here :))</comment>
}</block></function>

<function><type><name>void</name></type> <name>ouput</name><parameter_list>()</parameter_list>
<block>{

    <comment type="line">//write</comment>
}</block></function>

<function><type><name>int32_t</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{

    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">//#ifndef ONLINE_JUDGES</comment>
    <if>if <condition>(<expr><call><name>ifstream</name><argument_list>(<argument><expr><literal type="string">"test.txt"</literal></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"test.txt"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CHECKING</name></cpp:ifdef>
            <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><name>taskname</name><literal type="string">".out"</literal></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
            <comment type="line">//\freopen("test.out", "w", stdout);</comment>
        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">//CHECKING</comment>
    }</block></then>
    <elseif>else <if>if <condition>(<expr><call><name>ifstream</name><argument_list>(<argument><expr><name>taskname</name><literal type="string">".inp"</literal></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><name>taskname</name><literal type="string">".inp"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><name>taskname</name><literal type="string">".out"</literal></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if></elseif></if>
    <comment type="line">//#endif // ONLINE_JUDGES</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>t</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>

    <while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition>
    <block>{
    <expr_stmt><expr><call><name>input</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ouput</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></while>
}</block></function>

<comment type="line">//ilove??&lt;3</comment>
</unit>
