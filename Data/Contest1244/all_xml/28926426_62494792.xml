<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28926426_62494792.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name><name>a</name><index>[<expr><literal type="number">890890</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><literal type="number">890890</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>chg</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list>
<block>{
  <if>if<condition>(<expr><name>k</name></expr>)</condition><then>
    <block>{
    	<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>c</name></expr>]</index></name><operator>==</operator><literal type="char">'W'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>s</name><index>[<expr><name>c</name></expr>]</index></name><operator>=</operator><literal type="char">'B'</literal></expr>;</expr_stmt></block></then>
    	<else>else <block type="pseudo"><expr_stmt><expr><name><name>s</name><index>[<expr><name>c</name></expr>]</index></name><operator>=</operator><literal type="char">'W'</literal></expr>;</expr_stmt></block></else></if>
	}</block></then></if>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
  <decl_stmt><decl><type><name>int</name></type> <name>pd</name></decl>,<decl><type ref="prev"/><name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>,<argument><expr><name>s</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><name>pd</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> 
   <block>{
    <expr_stmt><expr><name><name>s</name><index>[<expr><name>n</name><operator>+</operator><name>i</name></expr>]</index></name><operator>=</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>n</name><operator>+</operator><name>i</name></expr>]</index></name><operator>==</operator><name><name>s</name><index>[<expr><name>n</name><operator>+</operator><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>pd</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
   }</block></for>
   <expr_stmt><expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name><name>s</name><index>[<expr><name>n</name></expr>]</index></name></expr><operator>,</operator><expr><name><name>s</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
   <if>if<condition>(<expr><operator>!</operator><name>pd</name></expr>)</condition><then>
     <block>{
       <expr_stmt><expr><name>k</name><operator>&amp;=</operator><literal type="number">1</literal></expr>;</expr_stmt>
       <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>,<argument><expr><name><name>s</name><index>[<expr><name>n</name><operator>+</operator><name>i</name><operator>-</operator><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	   <return>return <expr><literal type="number">0</literal></expr>;</return>
	 }</block></then></if>
   <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name><operator>*</operator><literal type="number">2</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
     <block>{
	   <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name><name>s</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name><name>s</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
	 }</block></for>
   <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">2</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
     <block>{
	   <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>a</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><then>
	     <block>{
	       <expr_stmt><expr><name>t</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
		   <while>while<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block></while>
		   <expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>
		   <for>for<control>(<init><expr><name>j</name><operator>=</operator><name>t</name></expr>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>i</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
		     <block>{
			   <if>if<condition>(<expr><name>j</name><operator>-</operator><name>t</name><operator>&lt;</operator><name>i</name><operator>-</operator><name>j</name></expr>)</condition><then>
			     <block>{
				   <if>if<condition>(<expr><name>j</name><operator>-</operator><name>t</name><operator>+</operator><literal type="number">1</literal><operator>&lt;=</operator><name>k</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>s</name><index>[<expr><operator>(</operator><name>j</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name><name>s</name><index>[<expr><name>t</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block></then>
				   <else>else  <block type="pseudo"><expr_stmt><expr><call><name>chg</name><argument_list>(<argument><expr><operator>(</operator><name>j</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>k</name><operator>&amp;</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if> 
				 }</block></then> 
			   <else>else
			     <block>{
				   <if>if<condition>(<expr><name>i</name><operator>-</operator><name>j</name><operator>+</operator><literal type="number">1</literal><operator>&lt;=</operator><name>k</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>s</name><index>[<expr><operator>(</operator><name>j</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name><name>s</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block></then>
				   <else>else <block type="pseudo"><expr_stmt><expr><call><name>chg</name><argument_list>(<argument><expr><operator>(</operator><name>j</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>k</name><operator>&amp;</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if> 
				 }</block></else></if>
			 }</block></for>
		 }</block></then></if>
	 }</block></for>
	 <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>,<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
}</block></function> </unit>
