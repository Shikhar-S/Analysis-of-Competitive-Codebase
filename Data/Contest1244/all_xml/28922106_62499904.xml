<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28922106_62499904.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ld</name></cpp:macro> <cpp:value>long double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vi</name></cpp:macro> <cpp:value>vector&lt;int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;int, int&gt;</cpp:value></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LOCAL</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout&lt;&lt;#x&lt;&lt;" "&lt;&lt;(x)&lt;&lt;endl;</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>fast_io</name><block>{<public type="default">
    <constructor><name>fast_io</name><parameter_list>()</parameter_list><block>{
        <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>fixed</name><operator>&lt;&lt;</operator><call><name>setprecision</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
</public>}</block><decl><name>____</name></decl>;</struct>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>k</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name><name>a</name><index>[<expr><name>n</name></expr>]</index></name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>a</name> <operator>+</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>chsl</name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>=<expr><literal type="number">0</literal></expr></init></decl> ;</init><condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <if>if<condition>(<expr><call><name><name>chsl</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>chsl</name><index>[<expr><call><name><name>chsl</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fi</name></expr>)</condition><then><block>{
            <expr_stmt><expr><call><name><name>chsl</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then><else>else <block type="pseudo"><expr_stmt><expr><name><name>chsl</name><index>[<expr><call><name><name>chsl</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>se</name> <operator>++</operator></expr>;</expr_stmt></block></else></if>
    }</block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>it1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>it2</name> <init>= <expr><call><name><name>chsl</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name><name>it1</name> <argument_list type="generic">&lt; <argument><expr><name>it2</name> <operator>&amp;&amp;</operator> <name>k</name></expr></argument> &gt;</argument_list></name> <literal type="number">0</literal></expr>)</condition><block>{
        <if>if<condition>(<expr><name><name>chsl</name><index>[<expr><name>it1</name></expr>]</index></name><operator>.</operator><name>se</name> <operator>&lt;=</operator> <name><name>chsl</name><index>[<expr><name>it2</name></expr>]</index></name><operator>.</operator><name>se</name> <operator>&amp;&amp;</operator> <name><name>chsl</name><index>[<expr><name>it1</name></expr>]</index></name><operator>.</operator><name>se</name> <operator>&lt;=</operator> <name>k</name></expr>)</condition><then><block>{
            <if>if<condition>(<expr><name><name>chsl</name><index>[<expr><name>it1</name></expr>]</index></name><operator>.</operator><name>se</name> <operator>*</operator> <operator>(</operator><name><name>chsl</name><index>[<expr><name>it1</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fi</name> <operator>-</operator> <name><name>chsl</name><index>[<expr><name>it1</name></expr>]</index></name><operator>.</operator><name>fi</name><operator>)</operator> <operator>&lt;=</operator> <name>k</name></expr>)</condition><then><block>{
                <expr_stmt><expr><name><name>chsl</name><index>[<expr><name>it1</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>se</name> <operator>+=</operator> <name><name>chsl</name><index>[<expr><name>it1</name></expr>]</index></name><operator>.</operator><name>se</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>k</name> <operator>-=</operator> <name><name>chsl</name><index>[<expr><name>it1</name></expr>]</index></name><operator>.</operator><name>se</name> <operator>*</operator> <operator>(</operator><name><name>chsl</name><index>[<expr><name>it1</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fi</name> <operator>-</operator> <name><name>chsl</name><index>[<expr><name>it1</name></expr>]</index></name><operator>.</operator><name>fi</name><operator>)</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>chsl</name><index>[<expr><name>it1</name></expr>]</index></name><operator>.</operator><name>se</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>it1</name><operator>++</operator></expr>;</expr_stmt>
            }</block></then><else>else<block>{
                <expr_stmt><expr><name><name>chsl</name><index>[<expr><name>it1</name></expr>]</index></name><operator>.</operator><name>fi</name> <operator>=</operator> <name><name>chsl</name><index>[<expr><name>it1</name></expr>]</index></name><operator>.</operator><name>fi</name> <operator>+</operator> <name>k</name> <operator>/</operator> <operator>(</operator><name><name>chsl</name><index>[<expr><name>it1</name></expr>]</index></name><operator>.</operator><name>se</name><operator>)</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>k</name> <operator>=</operator> <name>k</name> <operator>%</operator> <operator>(</operator><name><name>chsl</name><index>[<expr><name>it1</name></expr>]</index></name><operator>.</operator><name>se</name><operator>)</operator></expr>;</expr_stmt>
                <break>break;</break>
            }</block></else></if>
        }</block></then><elseif>else <if>if<condition>(<expr><name><name>chsl</name><index>[<expr><name>it2</name></expr>]</index></name><operator>.</operator><name>se</name> <operator>&lt;</operator> <name><name>chsl</name><index>[<expr><name>it1</name></expr>]</index></name><operator>.</operator><name>se</name> <operator>&amp;&amp;</operator> <name><name>chsl</name><index>[<expr><name>it2</name></expr>]</index></name><operator>.</operator><name>se</name> <operator>&lt;=</operator> <name>k</name></expr>)</condition><then><block>{
            <if>if<condition>(<expr><name><name>chsl</name><index>[<expr><name>it2</name></expr>]</index></name><operator>.</operator><name>se</name> <operator>*</operator> <operator>(</operator><name><name>chsl</name><index>[<expr><name>it2</name></expr>]</index></name><operator>.</operator><name>fi</name> <operator>-</operator> <name><name>chsl</name><index>[<expr><name>it2</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fi</name><operator>)</operator> <operator>&lt;=</operator> <name>k</name></expr>)</condition><then><block>{
                <expr_stmt><expr><name><name>chsl</name><index>[<expr><name>it2</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>se</name> <operator>+=</operator> <name><name>chsl</name><index>[<expr><name>it2</name></expr>]</index></name><operator>.</operator><name>se</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>k</name> <operator>-=</operator> <name><name>chsl</name><index>[<expr><name>it2</name></expr>]</index></name><operator>.</operator><name>se</name> <operator>*</operator> <operator>(</operator><name><name>chsl</name><index>[<expr><name>it2</name></expr>]</index></name><operator>.</operator><name>fi</name> <operator>-</operator> <name><name>chsl</name><index>[<expr><name>it2</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fi</name><operator>)</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>chsl</name><index>[<expr><name>it2</name></expr>]</index></name><operator>.</operator><name>se</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>it2</name><operator>--</operator></expr>;</expr_stmt>
            }</block></then><else>else<block>{
                <expr_stmt><expr><name><name>chsl</name><index>[<expr><name>it2</name></expr>]</index></name><operator>.</operator><name>fi</name> <operator>=</operator> <name><name>chsl</name><index>[<expr><name>it2</name></expr>]</index></name><operator>.</operator><name>fi</name> <operator>-</operator> <name>k</name> <operator>/</operator> <operator>(</operator><name><name>chsl</name><index>[<expr><name>it2</name></expr>]</index></name><operator>.</operator><name>se</name><operator>)</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>k</name> <operator>=</operator> <name>k</name> <operator>%</operator> <operator>(</operator><name><name>chsl</name><index>[<expr><name>it2</name></expr>]</index></name><operator>.</operator><name>se</name><operator>)</operator></expr>;</expr_stmt>
                <break>break;</break>
            }</block></else></if>
        }</block></then></if></elseif><else>else <block type="pseudo"><break>break;</break></block></else></if>
    }</block></while>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name><name>chsl</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>se</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{
        <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
    }</block></while>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><call><name><name>chsl</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name><name>chsl</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>se</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{
        <expr_stmt><expr><name>j</name><operator>--</operator></expr>;</expr_stmt>
    }</block></while>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>chsl</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>fi</name> <operator>-</operator> <name><name>chsl</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fi</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
