<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28895249_62473819.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>ara</name><index>[<expr><literal type="number">400000</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>csum</name><index>[<expr><literal type="number">400000</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>ll</name></type> <name>moves</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>mid</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>re</name> <init>= <expr><literal type="number">1e17</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{

        <decl_stmt><decl><type><name>ll</name></type> <name>cur1</name> <init>= <expr><name><name>ara</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ll</name></type> <name>cur2</name> <init>= <expr><name><name>ara</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>mid</name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>ll</name></type> <name>pos1</name> <init>= <expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ll</name></type> <name>pos2</name> <init>= <expr><call><name>upper_bound</name><argument_list>(<argument><expr><name>ara</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>ara</name> <operator>+</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>cur2</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>ara</name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>ll</name></type> <name>tmp1</name> <init>= <expr><operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>ara</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>csum</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ll</name></type> <name>tmp2</name> <init>= <expr><operator>(</operator><name><name>csum</name><index>[<expr><name>n</name></expr>]</index></name> <operator>-</operator> <name><name>csum</name><index>[<expr><name>pos2</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>-</operator> <name>cur2</name> <operator>*</operator> <operator>(</operator><name>n</name> <operator>-</operator> <name>pos2</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>re</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>tmp1</name> <operator>+</operator> <name>tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></for>

    <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{

        <decl_stmt><decl><type><name>ll</name></type> <name>cur1</name> <init>= <expr><name><name>ara</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name>mid</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ll</name></type> <name>cur2</name> <init>= <expr><name><name>ara</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>ll</name></type> <name>pos1</name> <init>= <expr><call><name>lower_bound</name><argument_list>(<argument><expr><name>ara</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>ara</name> <operator>+</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>cur1</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>ara</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>pos1</name><operator>--</operator></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ll</name></type> <name>pos2</name> <init>= <expr><name>i</name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>ll</name></type> <name>tmp1</name> <init>= <expr><name>pos1</name> <operator>*</operator> <name>cur1</name> <operator>-</operator> <name><name>csum</name><index>[<expr><name>pos1</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ll</name></type> <name>tmp2</name> <init>= <expr><operator>(</operator><name><name>csum</name><index>[<expr><name>n</name></expr>]</index></name> <operator>-</operator> <name><name>csum</name><index>[<expr><name>pos2</name></expr>]</index></name><operator>)</operator> <operator>-</operator> <name>cur2</name> <operator>*</operator> <operator>(</operator><name>n</name> <operator>-</operator> <name>pos2</name><operator>)</operator></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>re</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>tmp1</name> <operator>+</operator> <name>tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></for>

    <return>return <expr><name>re</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ara</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>

    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>ara</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>ara</name> <operator>+</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>csum</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>csum</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>ara</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>

    <decl_stmt><decl><type><name>ll</name></type> <name>lo</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>hi</name> <init>= <expr><name><name>ara</name><index>[<expr><name>n</name></expr>]</index></name> <operator>-</operator> <name><name>ara</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>anss</name> <init>= <expr><name>hi</name></expr></init></decl>;</decl_stmt>

    <while>while<condition>(<expr><name>lo</name> <operator>&lt;=</operator> <name>hi</name></expr>)</condition><block>{

        <decl_stmt><decl><type><name>ll</name></type> <name>mid</name> <init>= <expr><operator>(</operator><name>lo</name> <operator>+</operator> <name>hi</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><call><name>moves</name><argument_list>(<argument><expr><name>mid</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>k</name></expr>)</condition><then><block>{
            <expr_stmt><expr><name>anss</name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>hi</name> <operator>=</operator> <name>mid</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        }</block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><name>lo</name> <operator>=</operator> <name>mid</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
    }</block></while>

    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>anss</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
