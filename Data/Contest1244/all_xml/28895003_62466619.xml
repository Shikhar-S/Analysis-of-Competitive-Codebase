<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28895003_62466619.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD</name></cpp:macro>           <cpp:value>998244853</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C</name></cpp:macro>             <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pi</name></cpp:macro>            <cpp:value>acos(-1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro>           <cpp:value>long long</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D</name></cpp:macro>             <cpp:value>double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name></cpp:macro>             <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro>             <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro>            <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff</name></cpp:macro>            <cpp:value>fflush(stdout)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ppb</name></cpp:macro>           <cpp:value>pop_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro>          <cpp:value>(c).begin()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro>          <cpp:value>(c).end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro>        <cpp:value>(c).begin(),(c).end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rall</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro>       <cpp:value>(c).rbegin(),(c).rend()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SORT</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro>       <cpp:value>sort(ALL(v))</cpp:value></cpp:define>  
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lb</name></cpp:macro>            <cpp:value>lower_bound</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ub</name></cpp:macro>            <cpp:value>upper_bound</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>si</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro>         <cpp:value>(int)((c).size())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro>           <cpp:value>si(c)-1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gcd</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>      <cpp:value>__gcd(a,b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lcm</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>      <cpp:value>(a*(b/gcd(a,b)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sqr</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro>        <cpp:value>((a) * (a))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>optimize</name><parameter_list>()</parameter_list></cpp:macro>    <cpp:value>ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>accuracy</name></cpp:macro>      <cpp:value>cout &lt;&lt; fixed &lt;&lt; setprecision(18);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inf</name></cpp:macro>           <cpp:value>(int)2e18</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pow</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>      <cpp:value>(int)pow((int)i,n)</cpp:value></cpp:define>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type>                           <name>vi</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type>                         <name>pii</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>pii</name></expr></argument>&gt;</argument_list></name></type>                         <name>pipii</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type>                  <name>vvi</name>;</typedef>
<typedef>typedef <type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type>                          <name>mp</name>;</typedef>
<typedef>typedef <type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type>                       <name>msi</name>;</typedef>
<typedef>typedef <type><name><name>priority_queue</name><argument_list type="generic">&lt;<argument><expr><name>pii</name></expr></argument>, <argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pii</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>greater</name><argument_list type="generic">&lt;<argument><expr><name>pii</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>pq</name>;</typedef>
<function><specifier>inline</specifier>  <type><name>bool</name></type> <name>checkBit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name>n</name><operator>&amp;</operator><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>i</name><operator>)</operator></expr>;</return> }</block></function>
<function><specifier>inline</specifier>  <type><name>int</name></type> <name>setBit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name>n</name><operator>|</operator><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>i</name><operator>)</operator></expr>;</return><empty_stmt>;</empty_stmt> }</block></function>
<function><specifier>inline</specifier>  <type><name>int</name></type> <name>resetBit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name>n</name><operator>&amp;</operator><operator>(</operator><operator>~</operator><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>i</name><operator>)</operator><operator>)</operator></expr>;</return> }</block></function>
<function><specifier>inline</specifier>  <type><name>bool</name></type> <name>EQ</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>fabs</name><argument_list>(<argument><expr><name>a</name><operator>-</operator><name>b</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1e-9</literal></expr>;</return> }</block></function>
<function><specifier>inline</specifier>  <type><name>bool</name></type> <name>isLeapYear</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>year</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><operator>(</operator><name>year</name><operator>%</operator><literal type="number">400</literal><operator>==</operator><literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>year</name><operator>%</operator><literal type="number">4</literal><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>year</name><operator>%</operator><literal type="number">100</literal><operator>!=</operator><literal type="number">0</literal><operator>)</operator></expr>;</return> }</block></function>
<function><specifier>inline</specifier>  <type><name>void</name></type> <name>normal</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>a</name><operator>+</operator><name>MOD</name><operator>)</operator><operator>%</operator><name>MOD</name></expr>;</expr_stmt> }</block></function>
<function><specifier>inline</specifier>  <type><name>int</name></type> <name>modMul</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>a</name> <operator>%=</operator> <name>MOD</name></expr><operator>,</operator> <expr><name>b</name> <operator>%=</operator> <name>MOD</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>normal</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>normal</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><operator>(</operator><name>a</name><operator>*</operator><name>b</name><operator>)</operator><operator>%</operator><name>MOD</name></expr>;</return> }</block></function>
<function><specifier>inline</specifier>  <type><name>int</name></type> <name>modAdd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>a</name> <operator>%=</operator> <name>MOD</name></expr><operator>,</operator> <expr><name>b</name> <operator>%=</operator> <name>MOD</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>normal</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>normal</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><operator>(</operator><name>a</name><operator>+</operator><name>b</name><operator>)</operator><operator>%</operator><name>MOD</name></expr>;</return> }</block></function>
<function><specifier>inline</specifier>  <type><name>int</name></type> <name>modSub</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>a</name> <operator>%=</operator> <name>MOD</name></expr><operator>,</operator> <expr><name>b</name> <operator>%=</operator> <name>MOD</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>normal</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>normal</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>a</name> <operator>-=</operator> <name>b</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>normal</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>a</name></expr>;</return> }</block></function>
<function><specifier>inline</specifier>  <type><name>int</name></type> <name>modPow</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> <while>while<condition>(<expr><name>p</name></expr>)</condition> <block>{ <if>if<condition>(<expr><name>p</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>modMul</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if> <expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>modMul</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>p</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt> }</block></while> <return>return <expr><name>r</name></expr>;</return> }</block></function>
<function><specifier>inline</specifier>  <type><name>int</name></type> <name>modInv</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>modPow</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>MOD</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
<function><specifier>inline</specifier>  <type><name>int</name></type> <name>modDiv</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>modMul</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><call><name>modInv</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
<function><specifier>inline</specifier>  <type><name>int</name></type> <name>fact</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list><block>{ <decl_stmt><decl><type><name>int</name></type> <name>ans</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt><while>while<condition>(<expr><name>r</name></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>ans</name><operator>=</operator><call><name>modMul</name><argument_list>(<argument><expr><name>ans</name></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><name>r</name><operator>--</operator></expr>;</expr_stmt></block></while><return>return <expr><name>ans</name></expr>;</return> }</block></function>
<function><specifier>inline</specifier>  <type><name>int</name></type> <name>invfact</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name>int</name></type> <name>ans</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt><while>while<condition>(<expr><name>r</name></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>ans</name><operator>=</operator><call><name>modMul</name><argument_list>(<argument><expr><name>ans</name></expr></argument>,<argument><expr><call><name>modInv</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><name>r</name><operator>--</operator></expr>;</expr_stmt></block></while> <return>return <expr><name>ans</name></expr>;</return>}</block></function>
<function><specifier>inline</specifier>  <type><name>D</name></type> <name>dgcd</name><parameter_list>(<parameter><decl><type><name>D</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>D</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{ <if>if<condition>(<expr><name>a</name><operator>&lt;</operator><name>b</name></expr>)</condition><then><block type="pseudo"><return>return <expr><call><name>dgcd</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</return></block></then></if> <if>if<condition>(<expr><name>b</name><operator>&lt;</operator><literal type="number">.0001</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><name>a</name></expr>;</return></block></then></if> <return>return <expr><call><name>dgcd</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><call><name>fmod</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>}</block></function>



<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list><block>{
     
     <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>,<decl><type ref="prev"/><name>d</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
     <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>a</name><operator>&gt;&gt;</operator><name>b</name><operator>&gt;&gt;</operator><name>c</name><operator>&gt;&gt;</operator><name>d</name><operator>&gt;&gt;</operator><name>k</name></expr>;</expr_stmt>
     <decl_stmt><decl><type><name>int</name></type> <name>x</name><init>=<expr><name>a</name><operator>/</operator><name>c</name><operator>+</operator><operator>(</operator><ternary><condition><expr><name>a</name><operator>%</operator><name>c</name></expr>?</condition><then><expr><literal type="number">1</literal></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></init></decl>,<decl><type ref="prev"/><name>y</name><init>=<expr><name>b</name><operator>/</operator><name>d</name><operator>+</operator><operator>(</operator><ternary><condition><expr><name>b</name><operator>%</operator><name>d</name><operator>==</operator><literal type="number">0</literal></expr>?</condition><then><expr><literal type="number">0</literal></expr></then><else>:<expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
     <if>if<condition>(<expr><name>x</name><operator>+</operator><name>y</name><operator>&lt;=</operator><name>k</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>x</name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name>y</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></then>
     <else>else <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>-</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></else></if>
}</block></function>
 
<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list><block>{   
    <expr_stmt><expr><call><name>optimize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>       
    <decl_stmt><decl><type><name>int</name></type> <name>t</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <comment type="line">//accuracy;</comment>
    <comment type="line">//freopen("input.txt", "r", stdin);</comment>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition><block>{
        <expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></while>
}</block></function>
</unit>
