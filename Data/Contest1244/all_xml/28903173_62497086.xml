<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28903173_62497086.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>

<using>using <name>ll</name> <init>= <type><name>long</name> <name>long</name></type></init>;</using>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name> <init>= <expr><literal type="number">1e5</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ll</name></type> <name><name>a</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{  
	<expr_stmt><expr><name><name>std</name><operator>::</operator><name>cin</name></name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<expr_stmt><expr><name><name>std</name><operator>::</operator><name>cin</name></name> <operator>&gt;&gt;</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>sort</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>a</name><operator>+</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>left</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>right</name> <init>= <expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>l</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>r</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>cur</name> <init>= <expr><name>k</name></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><name><name>a</name><index>[<expr><name>left</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name><name>a</name><index>[<expr><name>left</name></expr>]</index></name></expr>)</condition> <block>{
		<expr_stmt><expr><name>left</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>l</name><operator>++</operator></expr>;</expr_stmt>
	}</block></while>
	<while>while <condition>(<expr><name><name>a</name><index>[<expr><name>right</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name><name>a</name><index>[<expr><name>right</name></expr>]</index></name></expr>)</condition> <block>{
		<expr_stmt><expr><name>right</name><operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>r</name><operator>++</operator></expr>;</expr_stmt>
	}</block></while>
	<while>while <condition>(<expr><name>cur</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>left</name> <operator>&lt;</operator> <name>right</name></expr>)</condition> <block>{
<comment type="line">//		std::cerr &lt;&lt; a[right] - a[left] &lt;&lt; "!!!" &lt;&lt; left &lt;&lt; ' ' &lt;&lt; right &lt;&lt; ' ' &lt;&lt; l &lt;&lt; ' ' &lt;&lt; r &lt;&lt; ' ' &lt;&lt; cur &lt;&lt; '\n';</comment>
<comment type="line">//		for (int i = 0; i &lt; n; i++) {</comment>
<comment type="line">//			std::cerr &lt;&lt; a[i] &lt;&lt; ' ';</comment>
<comment type="line">//		}</comment>
<comment type="line">//		std::cerr &lt;&lt; '\n';</comment>
		<if>if <condition>(<expr><name>l</name> <operator>&lt;</operator> <name>r</name></expr>)</condition><then> <block>{
			<if>if <condition>(<expr><name>cur</name> <operator>&gt;=</operator> <operator>(</operator><name><name>a</name><index>[<expr><name>left</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>a</name><index>[<expr><name>left</name></expr>]</index></name><operator>)</operator><operator>*</operator><name>l</name></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>cur</name> <operator>-=</operator> <operator>(</operator><name><name>a</name><index>[<expr><name>left</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>a</name><index>[<expr><name>left</name></expr>]</index></name><operator>)</operator><operator>*</operator><name>l</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>l</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>left</name><operator>++</operator></expr>;</expr_stmt>
			}</block></then> <else>else <block>{
				<expr_stmt><expr><name><name>a</name><index>[<expr><name>left</name></expr>]</index></name> <operator>+=</operator> <name>cur</name><operator>/</operator><name>l</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>cur</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			}</block></else></if>
		}</block></then> <else>else <block>{
			<if>if <condition>(<expr><name>cur</name> <operator>&gt;=</operator> <operator>(</operator><name><name>a</name><index>[<expr><name>right</name></expr>]</index></name><operator>-</operator><name><name>a</name><index>[<expr><name>right</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>*</operator><name>r</name></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>cur</name> <operator>-=</operator> <operator>(</operator><name><name>a</name><index>[<expr><name>right</name></expr>]</index></name><operator>-</operator><name><name>a</name><index>[<expr><name>right</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>*</operator><name>r</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>r</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>right</name><operator>--</operator></expr>;</expr_stmt>
			}</block></then> <else>else <block>{
				<expr_stmt><expr><name><name>a</name><index>[<expr><name>right</name></expr>]</index></name> <operator>-=</operator> <name>cur</name><operator>/</operator><name>r</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>cur</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			}</block></else></if>
		}</block></else></if>
		<while>while <condition>(<expr><name><name>a</name><index>[<expr><name>left</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name><name>a</name><index>[<expr><name>left</name></expr>]</index></name></expr>)</condition> <block>{
			<expr_stmt><expr><name>left</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>l</name><operator>++</operator></expr>;</expr_stmt>
			<if>if <condition>(<expr><name>left</name> <operator>&gt;=</operator> <name>right</name></expr>)</condition><then> <block>{
				<goto>goto <name>out</name>;</goto>
			}</block></then></if>
		}</block></while>
		<while>while <condition>(<expr><name><name>a</name><index>[<expr><name>right</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name><name>a</name><index>[<expr><name>right</name></expr>]</index></name></expr>)</condition> <block>{
			<expr_stmt><expr><name>right</name><operator>--</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>r</name><operator>++</operator></expr>;</expr_stmt>
			<if>if <condition>(<expr><name>left</name> <operator>&gt;=</operator> <name>right</name></expr>)</condition><then> <block>{
				<goto>goto <name>out</name>;</goto>
			}</block></then></if>
		}</block></while>
		<label><name>out</name>:</label><empty_stmt>;</empty_stmt>
	}</block></while>
	<expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <name><name>a</name><index>[<expr><name>right</name></expr>]</index></name> <operator>-</operator> <name><name>a</name><index>[<expr><name>left</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
}</block></function></unit>
