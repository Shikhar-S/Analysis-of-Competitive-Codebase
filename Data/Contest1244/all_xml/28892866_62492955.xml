<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28892866_62492955.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>long</name> <name>long</name> <name>int</name></type> <name>LL</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name> <name>int</name></type> <name>uLL</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>uint</name>;</typedef>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">100007</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LL</name></type> <name><name>tab</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LL</name></type> <name>k</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>tab</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>tab</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>tab</name><operator>+</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>LL</name></type> <name>l</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>LL</name></type> <name>p</name> <init>= <expr><name>n</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>LL</name></type> <name>minim</name> <init>= <expr><name><name>tab</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>LL</name></type> <name>maks</name> <init>= <expr><name><name>tab</name><index>[<expr><name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>l</name> <operator>&lt;</operator> <name>p</name></expr>)</condition><block>{
        <if>if<condition>(<expr><name>l</name> <operator>&lt;</operator> <name>n</name><operator>-</operator><name>p</name><operator>+</operator><literal type="number">1</literal></expr>)</condition><then><block>{
            <if>if<condition>(<expr><operator>(</operator><name><name>tab</name><index>[<expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>tab</name><index>[<expr><name>l</name></expr>]</index></name><operator>)</operator><operator>*</operator><name>l</name> <operator>&lt;=</operator> <name>k</name></expr>)</condition><then><block>{
                <expr_stmt><expr><name>k</name><operator>-=</operator> <operator>(</operator><name><name>tab</name><index>[<expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>tab</name><index>[<expr><name>l</name></expr>]</index></name><operator>)</operator><operator>*</operator><name>l</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>minim</name> <operator>=</operator> <name><name>tab</name><index>[<expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
                <while>while<condition>(<expr><name><name>tab</name><index>[<expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>minim</name></expr>)</condition><block>{
                    <expr_stmt><expr><name>l</name><operator>++</operator></expr>;</expr_stmt>
                }</block></while>
                <continue>continue;</continue>
            }</block></then>
            <else>else<block>{
                <decl_stmt><decl><type><name>LL</name></type> <name>ile</name> <init>= <expr><name>k</name><operator>/</operator><name>l</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>minim</name> <operator>+=</operator> <name>ile</name></expr>;</expr_stmt>
                <break>break;</break>
            }</block></else></if>
        }</block></then>
        <else>else<block>{
            <if>if<condition>(<expr><operator>(</operator><name><name>tab</name><index>[<expr><name>p</name></expr>]</index></name><operator>-</operator><name><name>tab</name><index>[<expr><name>p</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>*</operator><operator>(</operator><name>n</name><operator>-</operator><name>p</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>&lt;=</operator> <name>k</name></expr>)</condition><then><block>{
                <expr_stmt><expr><name>k</name> <operator>-=</operator> <operator>(</operator><name><name>tab</name><index>[<expr><name>p</name></expr>]</index></name><operator>-</operator><name><name>tab</name><index>[<expr><name>p</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>*</operator><operator>(</operator><name>n</name><operator>-</operator><name>p</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>maks</name> <operator>=</operator> <name><name>tab</name><index>[<expr><name>p</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
                <while>while<condition>(<expr><name><name>tab</name><index>[<expr><name>p</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>maks</name></expr>)</condition><block>{
                    <expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt>
                }</block></while>
                <continue>continue;</continue>
            }</block></then>
            <else>else<block>{
                <decl_stmt><decl><type><name>LL</name></type> <name>ile</name> <init>= <expr><name>k</name><operator>/</operator><operator>(</operator><name>n</name><operator>-</operator><name>p</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>maks</name> <operator>-=</operator> <name>ile</name></expr>;</expr_stmt>
                <break>break;</break>
            }</block></else></if>
        }</block></else></if>
    }</block></while>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>maks</name><operator>-</operator><name>minim</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
