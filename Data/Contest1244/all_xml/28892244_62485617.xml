<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28892244_62485617.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>LL</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>LL</name></type> <name>INF</name><init>=<expr><literal type="number">1e18</literal><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name><init>=<expr><literal type="number">1e5</literal><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name><name>col</name><index>[<expr><name>N</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name><name>In</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>resi</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>resenje</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>V</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>v</name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>Dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{
    <expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>In</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>V</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <if>if<condition>(<expr><operator>!</operator><name><name>In</name><index>[<expr><name><name>V</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>)</condition><then><block>{
            <expr_stmt><expr><call><name>Dfs</name><argument_list>(<argument><expr><name><name>V</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></for>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">2</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
            <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>col</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>V</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>V</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>ok</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <if>if<condition>(<expr><name><name>V</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>&gt;</operator><literal type="number">2</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        }</block></then>
        <else>else<block>{
            <if>if<condition>(<expr><name><name>V</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
                <expr_stmt><expr><name>ok</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></else></if>
    }</block></for>
    <expr_stmt><expr><call><name>Dfs</name><argument_list>(<argument><expr><name>ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name><name>c</name><index>[]</index></name><init>=<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>LL</name></type> <name>sol</name><init>=<expr><name>INF</name></expr></init></decl>;</decl_stmt>
    <do>do<block>{
        <decl_stmt><decl><type><name>LL</name></type> <name>tmp</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>v</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
            <expr_stmt><expr><name>tmp</name><operator>+=</operator><operator>(</operator><name>LL</name><operator>)</operator><name><name>col</name><index>[<expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index><index>[<expr><name><name>c</name><index>[<expr><name>i</name><operator>%</operator><literal type="number">3</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
        }</block></for>
        <if>if<condition>(<expr><name>sol</name><operator>&gt;</operator><name>tmp</name></expr>)</condition><then><block>{
            <expr_stmt><expr><name>sol</name><operator>=</operator><name>tmp</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>resi</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr><operator>,</operator><expr><name><name>resi</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr><operator>,</operator><expr><name><name>resi</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
        }</block></then></if>
    }</block>while<condition>(<expr><call><name>next_permutation</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>c</name><operator>+</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition>;</do>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>sol</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>v</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><name><name>resenje</name><index>[<expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>=</operator><name><name>resi</name><index>[<expr><name>i</name><operator>%</operator><literal type="number">3</literal></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
    }</block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d "</literal></expr></argument>,<argument><expr><name><name>resenje</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
<comment type="line">//mora biti lanac</comment>
<comment type="line">//probaj svaku permutaciju</comment>
</unit>
