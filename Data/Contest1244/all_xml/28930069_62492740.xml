<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28930069_62492740.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<comment type="line">//haha</comment>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fastio</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(0);cin.tie(0);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fileio</name></cpp:macro> <cpp:value>freopen("input.txt", "r", stdin);freopen("output.txt", "w", stdout);</cpp:value></cpp:define>


<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>fastio</name>
<comment type="line">// fileio</comment>
    <name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>a</name> <argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>a</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>a</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>bb</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>counter</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
        <if>if <condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>a</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>bb</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name><name>a</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>, <expr><name>counter</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>counter</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><operator>++</operator><name>counter</name></expr>;</expr_stmt>
        }</block></else></if>
    }</block></for>
    <expr_stmt><expr><call><name><name>bb</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name><name>a</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>, <expr><name>counter</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name><name>bb</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name><name>l</name> <argument_list type="generic">&lt; <argument><expr><name>r</name> <operator>&amp;&amp;</operator> <name>k</name></expr></argument> &gt;</argument_list></name> <literal type="number">0</literal></expr>)</condition> <block>{
        <if>if <condition>(<expr><name><name>bb</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>second</name> <operator>&lt;</operator> <name><name>bb</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><name>second</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>k</name> <operator>&gt;=</operator> <operator>(</operator><name><name>bb</name><index>[<expr><name>l</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>first</name> <operator>-</operator> <name><name>bb</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>first</name><operator>)</operator> <operator>*</operator> <name><name>bb</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>second</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>k</name> <operator>-=</operator> <operator>(</operator><name><name>bb</name><index>[<expr><name>l</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>first</name> <operator>-</operator> <name><name>bb</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>first</name><operator>)</operator> <operator>*</operator> <name><name>bb</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>second</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>bb</name><index>[<expr><name>l</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>second</name> <operator>+=</operator> <name><name>bb</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>second</name></expr>;</expr_stmt>
                <expr_stmt><expr><operator>++</operator><name>l</name></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name><name>bb</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>+=</operator> <operator>(</operator><name>k</name> <operator>/</operator> <name><name>bb</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>second</name><operator>)</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then> <elseif>else <if>if <condition>(<expr><name><name>bb</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>second</name> <operator>&gt;</operator> <name><name>bb</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><name>second</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>k</name> <operator>&gt;=</operator> <operator>(</operator><name><name>bb</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>-</operator> <name><name>bb</name><index>[<expr><name>r</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>first</name><operator>)</operator> <operator>*</operator> <name><name>bb</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><name>second</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>k</name> <operator>-=</operator> <operator>(</operator><name><name>bb</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>-</operator> <name><name>bb</name><index>[<expr><name>r</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>first</name><operator>)</operator> <operator>*</operator> <name><name>bb</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><name>second</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>bb</name><index>[<expr><name>r</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>second</name> <operator>+=</operator> <name><name>bb</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><name>second</name></expr>;</expr_stmt>
                <expr_stmt><expr><operator>--</operator><name>r</name></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name><name>bb</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>-=</operator> <operator>(</operator><name>k</name> <operator>/</operator> <name><name>bb</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><name>second</name><operator>)</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then></if></elseif> <else>else <block>{
            <if>if <condition>(<expr><operator>(</operator><name><name>bb</name><index>[<expr><name>l</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>first</name> <operator>-</operator> <name><name>bb</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>first</name><operator>)</operator> <operator>&lt;</operator> <operator>(</operator><name><name>bb</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>-</operator> <name><name>bb</name><index>[<expr><name>r</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>first</name><operator>)</operator></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name>k</name> <operator>&gt;=</operator> <operator>(</operator><name><name>bb</name><index>[<expr><name>l</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>first</name> <operator>-</operator> <name><name>bb</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>first</name><operator>)</operator> <operator>*</operator> <name><name>bb</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>second</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>k</name> <operator>-=</operator> <operator>(</operator><name><name>bb</name><index>[<expr><name>l</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>first</name> <operator>-</operator> <name><name>bb</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>first</name><operator>)</operator> <operator>*</operator> <name><name>bb</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>second</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>bb</name><index>[<expr><name>l</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>second</name> <operator>+=</operator> <name><name>bb</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>second</name></expr>;</expr_stmt>
                    <expr_stmt><expr><operator>++</operator><name>l</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><name><name>bb</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>+=</operator> <operator>(</operator><name>k</name> <operator>/</operator> <name><name>bb</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>second</name><operator>)</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                }</block></else></if>
            }</block></then> <elseif>else <if>if <condition>(<expr><operator>(</operator><name><name>bb</name><index>[<expr><name>l</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>first</name> <operator>-</operator> <name><name>bb</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>first</name><operator>)</operator> <operator>&gt;</operator> <operator>(</operator><name><name>bb</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>-</operator> <name><name>bb</name><index>[<expr><name>r</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>first</name><operator>)</operator></expr>)</condition><then><block>{
                <if>if <condition>(<expr><name>k</name> <operator>&gt;=</operator> <operator>(</operator><name><name>bb</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>-</operator> <name><name>bb</name><index>[<expr><name>r</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>first</name><operator>)</operator> <operator>*</operator> <name><name>bb</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><name>second</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>k</name> <operator>-=</operator> <operator>(</operator><name><name>bb</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>-</operator> <name><name>bb</name><index>[<expr><name>r</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>first</name><operator>)</operator> <operator>*</operator> <name><name>bb</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><name>second</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>bb</name><index>[<expr><name>r</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>second</name> <operator>+=</operator> <name><name>bb</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><name>second</name></expr>;</expr_stmt>
                    <expr_stmt><expr><operator>--</operator><name>r</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><name><name>bb</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>-=</operator> <operator>(</operator><name>k</name> <operator>/</operator> <name><name>bb</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><name>second</name><operator>)</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                }</block></else></if>
            }</block></then></if></elseif> <else>else <block>{
                <if>if <condition>(<expr><name>k</name> <operator>&gt;=</operator> <operator>(</operator><name><name>bb</name><index>[<expr><name>l</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>first</name> <operator>-</operator> <name><name>bb</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>first</name><operator>)</operator> <operator>*</operator> <name><name>bb</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>second</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>k</name> <operator>-=</operator> <operator>(</operator><name><name>bb</name><index>[<expr><name>l</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>first</name> <operator>-</operator> <name><name>bb</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>first</name><operator>)</operator> <operator>*</operator> <name><name>bb</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>second</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>bb</name><index>[<expr><name>l</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>second</name> <operator>+=</operator> <name><name>bb</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>second</name></expr>;</expr_stmt>
                    <expr_stmt><expr><operator>++</operator><name>l</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><name><name>bb</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>+=</operator> <operator>(</operator><name>k</name> <operator>/</operator> <name><name>bb</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>second</name><operator>)</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                }</block></else></if>
            }</block></else></if>
        }</block></else></if>
    }</block></while>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>bb</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>-</operator> <name><name>bb</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>first</name></expr>;</expr_stmt>
}</block></function></unit>
