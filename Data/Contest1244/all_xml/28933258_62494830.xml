<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28933258_62494830.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>int</name></type> <name><name>nums</name><index>[<expr><literal type="number">100000</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>k</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>nums</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>nums</name></expr></argument>, <argument><expr><name>nums</name><operator>+</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>st</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ed</name> <init>= <expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ec</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>st</name> <operator>!=</operator> <name>ed</name></expr>)</condition>
    <block>{
        <if>if<condition>(<expr><name>st</name> <operator>&lt;</operator> <name>ec</name></expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name>ll</name></type> <name>inc</name> <init>= <expr><name><name>nums</name><index>[<expr><name>st</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>nums</name><index>[<expr><name>st</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>st</name><operator>++</operator></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>inc</name><operator>*</operator><name>st</name> <operator>&lt;=</operator> <name>k</name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>k</name> <operator>-=</operator> <name>inc</name><operator>*</operator><name>st</name></expr>;</expr_stmt></block></then>
            <else>else
            <block>{
                <expr_stmt><expr><name>ans</name> <operator>+=</operator> <name>k</name> <operator>/</operator> <name>st</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>st</name><operator>--</operator></expr>;</expr_stmt>
                <break>break;</break>
            }</block></else></if>
        }</block></then>
        <else>else
        <block>{
            <decl_stmt><decl><type><name>ll</name></type> <name>inc</name> <init>= <expr><name><name>nums</name><index>[<expr><name>ed</name></expr>]</index></name> <operator>-</operator> <name><name>nums</name><index>[<expr><name>ed</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>ec</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>ed</name><operator>--</operator></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>inc</name><operator>*</operator><name>ec</name> <operator>&lt;=</operator> <name>k</name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>k</name> <operator>-=</operator> <name>inc</name><operator>*</operator><name>ec</name></expr>;</expr_stmt></block></then>
            <else>else
            <block>{
                <expr_stmt><expr><name>ed</name><operator>++</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>ans</name> <operator>+=</operator> <name>k</name> <operator>/</operator> <name>ec</name></expr>;</expr_stmt>
                <break>break;</break>
            }</block></else></if>
        }</block></else></if>
    }</block></while>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>nums</name><index>[<expr><name>ed</name></expr>]</index></name> <operator>-</operator> <name><name>nums</name><index>[<expr><name>st</name></expr>]</index></name> <operator>-</operator> <name>ans</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
