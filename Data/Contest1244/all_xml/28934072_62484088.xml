<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28934072_62484088.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<using>using <name>ll</name> <init>= <type><name>long</name> <name>long</name></type></init>;</using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">1e5</literal><operator>+</operator><literal type="number">100</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name><name>a</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>k</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>deque</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>q</name></decl>;</decl_stmt>

<function><type><name>ll</name></type> <name>cnt</name><parameter_list>(<parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
	<decl_stmt><decl><type><name>ll</name></type> <name>del</name> <init>= <expr><call><name>abs</name><argument_list>(<argument><expr><name><name>b</name><operator>.</operator><name>first</name></name> <operator>-</operator> <name><name>a</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<return>return <expr><name>del</name> <operator>*</operator> <name><name>a</name><operator>.</operator><name>second</name></name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %lld"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>	
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>a</name> <operator>+</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr/>)</control> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name></expr></init></decl>;</decl_stmt>
		<while>while<condition>(<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>n</name> <operator>&amp;&amp;</operator> <name><name>a</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
			<block type="pseudo"><expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt></block></while>
		<expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>, <expr><name>j</name> <operator>-</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>i</name> <operator>=</operator> <name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	}</block></for>
	<while>while<condition>(<expr><name>k</name></expr>)</condition> <block>{
		<if>if<condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><call><name><name>q</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
		<if>if<condition>(<expr><name><name>q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>second</name> <operator>&lt;=</operator> <name><name>q</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><call><name><name>q</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>second</name></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>ll</name></type> <name>need</name> <init>= <expr><call>(<name>ll</name>)<argument_list>(<argument><expr><name><name>q</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>first</name> <operator>-</operator> <name><name>q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>first</name></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>second</name></expr></init></decl>;</decl_stmt>
			<if>if<condition>(<expr><name>need</name> <operator>&gt;</operator> <name>k</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>

			<expr_stmt><expr><name>k</name> <operator>-=</operator> <name>need</name></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>auto</name></type> <name>x</name> <init>= <expr><name><name>q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>pop_front</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>second</name> <operator>+=</operator> <name><name>x</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt>
		}</block></then>
		<else>else <block>{
			<decl_stmt><decl><type><name>int</name></type> <name>sz</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name><name>q</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>ll</name></type> <name>need</name> <init>= <expr><call>(<name>ll</name>)<argument_list>(<argument><expr><name><name>q</name><index>[<expr><name>sz</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>first</name> <operator>-</operator> <name><name>q</name><index>[<expr><name>sz</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>first</name></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>q</name><index>[<expr><name>sz</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>second</name></expr></init></decl>;</decl_stmt>
			<if>if<condition>(<expr><name>need</name> <operator>&gt;</operator> <name>k</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if> 

			<expr_stmt><expr><name>k</name> <operator>-=</operator> <name>need</name></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>auto</name></type> <name>y</name> <init>= <expr><call><name><name>q</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>second</name> <operator>+=</operator> <name><name>y</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt>
		}</block></else></if>
	}</block></while>

	<while>while<condition>(<expr><name>k</name></expr>)</condition> <block>{
		<if>if<condition>(<expr><name><name>q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>second</name> <operator>&lt;=</operator> <name><name>q</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><call><name><name>q</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>second</name></expr>)</condition><then> <block>{
			<if>if<condition>(<expr><name>k</name> <operator>&lt;</operator> <name><name>q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>second</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
			<decl_stmt><decl><type><name>ll</name></type> <name>ty</name> <init>= <expr><name>k</name> <operator>/</operator> <name><name>q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>second</name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name><name>q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>first</name> <operator>+=</operator> <name>ty</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>k</name> <operator>-=</operator> <name>ty</name> <operator>*</operator> <name><name>q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>second</name></expr>;</expr_stmt>
		}</block></then>
		<else>else <block>{
			<if>if<condition>(<expr><name>k</name> <operator>&lt;</operator> <call><name><name>q</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>second</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
			<decl_stmt><decl><type><name>ll</name></type> <name>ty</name> <init>= <expr><name>k</name> <operator>/</operator> <call><name><name>q</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>second</name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>first</name> <operator>-=</operator> <name>ty</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>k</name> <operator>-=</operator> <call><name><name>q</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>second</name> <operator>*</operator> <name>ty</name></expr>;</expr_stmt>
		}</block></else></if>
	}</block></while>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><call><name><name>q</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>first</name> <operator>-</operator> <name><name>q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
