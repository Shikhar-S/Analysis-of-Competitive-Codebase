<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28896025_62491770.cpp"><cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><cpp:literal>"Ofast,no-stack-protector"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>target</name><name>(</name><cpp:literal>"avx"</cpp:literal><name>)</name></cpp:pragma> 
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><specifier>inline</specifier> <type><name>int</name></type> <name>read</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <decl_stmt><decl><type><name>char</name></type> <name>c</name><init>=<expr><call><name>getchar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name><name>c</name><argument_list type="generic">&lt;<argument><expr><literal type="number">48</literal><operator>||</operator><name>c</name></expr></argument>&gt;</argument_list></name><literal type="number">57</literal></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
	<while>while<condition>(<expr><name>c</name><operator>&gt;=</operator><literal type="number">48</literal> <operator>&amp;&amp;</operator> <name>c</name><operator>&lt;=</operator><literal type="number">57</literal></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>ret</name><operator>=</operator><name>ret</name><operator>*</operator><literal type="number">10</literal><operator>+</operator><name>c</name><operator>-</operator><literal type="number">48</literal></expr><operator>,</operator><expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
	<return>return <expr><name>ret</name></expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N</name></cpp:macro> <cpp:value>210040</cpp:value></cpp:define>
<decl_stmt><decl><type><name>int</name></type> <name><name>A</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name>_i</name></decl>,<decl><type ref="prev"/><name>_j</name></decl>,<decl><type ref="prev"/><name><name>G</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name>tt</name></decl>,<decl><type ref="prev"/><name>lxy</name></decl>,<decl><type ref="prev"/><name><name>a</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>c</name><index>[<expr><name>N</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name>n</name></decl>,<decl><type ref="prev"/><name>tot</name></decl>,<decl><type ref="prev"/><name><name>d</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name>cnt</name></decl>,<decl><type ref="prev"/><name>O</name></decl>,<decl><type ref="prev"/><name>u</name></decl>,<decl><type ref="prev"/><name>v</name></decl>,<decl><type ref="prev"/><name><name>T</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>cc</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>ss</name></decl>,<decl><type ref="prev"/><name>Ans</name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pr</name></decl></parameter>)</parameter_list>
<block>{
	<expr_stmt><expr><name><name>G</name><index>[<expr><operator>++</operator><name>tt</name></expr>]</index></name><operator>=</operator><name>p</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>o</name><init>=<expr><name><name>a</name><index>[<expr><name>p</name></expr>]</index></name></expr></init></decl>;</init><condition><expr><name>o</name></expr>;</condition><incr><expr><name>o</name><operator>=</operator><name><name>c</name><index>[<expr><name>o</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></incr>)</control><block>{
		<if>if<condition>(<expr><name><name>c</name><index>[<expr><name>o</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><name>pr</name></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
		<expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><name>o</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><name>n</name><operator>=</operator><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">3</literal></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name><name>cc</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></for></block></for>
	
<comment type="line">//	cerr&lt;&lt;n&lt;&lt;endl; </comment>
	
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
		<expr_stmt><expr><name>u</name><operator>=</operator><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>v</name><operator>=</operator><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>++</operator><name><name>d</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><operator>++</operator><name><name>d</name><index>[<expr><name>v</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>c</name><index>[<expr><operator>++</operator><name>tot</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name>v</name></expr>;</expr_stmt><expr_stmt><expr><name><name>c</name><index>[<expr><name>tot</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name><name>a</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt><expr_stmt><expr><name><name>a</name><index>[<expr><name>u</name></expr>]</index></name><operator>=</operator><name>tot</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>c</name><index>[<expr><operator>++</operator><name>tot</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name>u</name></expr>;</expr_stmt><expr_stmt><expr><name><name>c</name><index>[<expr><name>tot</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name><name>a</name><index>[<expr><name>v</name></expr>]</index></name></expr>;</expr_stmt><expr_stmt><expr><name><name>a</name><index>[<expr><name>v</name></expr>]</index></name><operator>=</operator><name>tot</name></expr>;</expr_stmt>
	}</block></for>
	
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><if>if<condition>(<expr><name><name>d</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
		<expr_stmt><expr><name>O</name><operator>=</operator><name>i</name></expr>;</expr_stmt><expr_stmt><expr><operator>++</operator><name>cnt</name></expr>;</expr_stmt>
	}</block></then></if></block></for>
	<if>if<condition>(<expr><name>cnt</name><operator>&gt;</operator><literal type="number">2</literal></expr>)</condition><then><block>{
		<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></then></if>
	<expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>O</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ss</name><operator>=</operator><literal type="number">1e17</literal></expr>;</expr_stmt>
	
<comment type="line">//	for(int i=1;i&lt;=n;++i)cerr&lt;&lt;G[i]&lt;&lt;endl;</comment>
	
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">3</literal></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><literal type="number">3</literal></expr>;</condition><incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block type="pseudo"><if>if<condition>(<expr><name>i</name><operator>!=</operator><name>j</name></expr>)</condition><then><block>{
		<expr_stmt><expr><name>Ans</name><operator>=</operator><name><name>cc</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name><name>G</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>+</operator><name><name>cc</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name><name>G</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>T</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>T</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><name>j</name></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">3</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
			<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><literal type="number">3</literal></expr>;</condition><incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block type="pseudo"><if>if<condition>(<expr><name>j</name><operator>!=</operator><name><name>T</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>&amp;&amp;</operator><name>j</name><operator>!=</operator><name><name>T</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr>)</condition><then><block>{
				<expr_stmt><expr><name><name>T</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>j</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>Ans</name><operator>+=</operator><name><name>cc</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name><name>G</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
			}</block></then></if></block></for>
		}</block></for>
		<if>if<condition>(<expr><name>ss</name><operator>&gt;</operator><name>Ans</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>ss</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>Ans</name></expr></argument>,<argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><name>_i</name><operator>=</operator><name>i</name></expr><operator>,</operator><expr><name>_j</name><operator>=</operator><name>j</name></expr>;</expr_stmt></block></then></if>
	}</block></then></if></block></for></block></for>
	
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ss</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>T</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name>_i</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>T</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><name>_j</name></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">3</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
			<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><literal type="number">3</literal></expr>;</condition><incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block type="pseudo"><if>if<condition>(<expr><name>j</name><operator>!=</operator><name><name>T</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>&amp;&amp;</operator><name>j</name><operator>!=</operator><name><name>T</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr>)</condition><then><block>{
				<expr_stmt><expr><name><name>T</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>j</name></expr>;</expr_stmt>
			}</block></then></if></block></for>
		}</block></for>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name><name>A</name><index>[<expr><name><name>G</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>=</operator><name><name>T</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;&lt;</operator><literal type="char">' '</literal></expr>;</expr_stmt></block></for>
}</block></function>
<comment type="block">/*
3
3 2 3
4 3 2
3 1 3
1 2
2 3
*/</comment></unit>
