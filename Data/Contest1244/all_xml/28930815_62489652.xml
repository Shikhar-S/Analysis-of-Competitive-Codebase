<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28930815_62489652.cpp"><comment type="line">//BADBUOY//</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOS</name></cpp:macro>  <cpp:value>ios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro>    <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro>    <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro>     <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name></cpp:macro>     <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro>    <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ld</name></cpp:macro>    <cpp:value>long double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ll)s.size()</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vl</name></cpp:macro>    <cpp:value>vector &lt; ll &gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pll</name></cpp:macro>   <cpp:value>pair &lt; ll, ll &gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ml</name></cpp:macro>    <cpp:value>map &lt; ll, ll &gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD</name></cpp:macro>   <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXN</name></cpp:macro>  <cpp:value>50005</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>for(ll i=a;i&lt;b;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inv</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>for(ll i=a;i&gt;=b;i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>(a).begin(),(a).end()</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>ll</name></type> <name>t</name></decl>,<decl><type ref="prev"/><name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>,<decl><type ref="prev"/><name>z</name></decl>,<decl><type ref="prev"/><name>p</name></decl>,<decl><type ref="prev"/><name>w</name></decl>,<decl><type ref="prev"/><name>d</name></decl>,<decl><type ref="prev"/><name>ans</name></decl>,<decl><type ref="prev"/><name>val</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><name>IOS</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>p</name><operator>&gt;&gt;</operator><name>w</name><operator>&gt;&gt;</operator><name>d</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>z</name><operator>=</operator><operator>(</operator><name>p</name><operator>-</operator><name>n</name><operator>*</operator><name>d</name><operator>+</operator><name>w</name><operator>-</operator><name>d</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><operator>(</operator><name>w</name><operator>-</operator><name>d</name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>z</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="number">0LL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>y</name><operator>=</operator><operator>(</operator><name>d</name><operator>-</operator><operator>(</operator><name>d</name><operator>-</operator><operator>(</operator><name>p</name><operator>%</operator><name>d</name><operator>)</operator><operator>)</operator><operator>%</operator><name>d</name><operator>)</operator><operator>%</operator><name>d</name></expr>;</expr_stmt>
	<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">1e7</literal>+<literal type="number">5</literal></argument>)</argument_list></macro><block>{
		<if>if<condition>(<expr><name>z</name><operator>&gt;</operator><name>n</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
		<if>if<condition>(<expr><operator>(</operator><operator>(</operator><name>w</name><operator>-</operator><name>d</name><operator>)</operator><operator>*</operator><name>z</name><operator>)</operator><operator>%</operator><name>d</name><operator>==</operator><name>y</name><operator>&amp;&amp;</operator><operator>(</operator><name>w</name><operator>-</operator><name>d</name><operator>)</operator><operator>*</operator><name>z</name><operator>&gt;=</operator><operator>(</operator><name>p</name><operator>-</operator><name>n</name><operator>*</operator><name>d</name><operator>)</operator></expr>)</condition><then><block>{
			<expr_stmt><expr><name>m</name><operator>=</operator><operator>(</operator><name>z</name><operator>*</operator><operator>(</operator><name>w</name><operator>-</operator><name>d</name><operator>)</operator><operator>+</operator><name>n</name><operator>*</operator><name>d</name><operator>-</operator><name>p</name><operator>)</operator><operator>/</operator><name>d</name></expr>;</expr_stmt>
			<if>if<condition>(<expr><name>z</name><operator>+</operator><name>m</name><operator>&gt;</operator><name>n</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if> 
			<expr_stmt><expr><name>val</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt> <break>break;</break>
		}</block></then></if>
		<expr_stmt><expr><name>z</name><operator>++</operator></expr>;</expr_stmt>
	}</block>
	<if>if<condition>(<expr><name>val</name><operator>&amp;&amp;</operator><name>z</name><operator>*</operator><name>w</name><operator>+</operator><operator>(</operator><name>n</name><operator>-</operator><name>z</name><operator>-</operator><name>m</name><operator>)</operator><operator>*</operator><name>d</name><operator>==</operator><name>p</name></expr>)</condition><then><block>{
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>z</name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><operator>(</operator><name>n</name><operator>-</operator><name>z</name><operator>-</operator><name>m</name><operator>)</operator><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name>m</name></expr>;</expr_stmt>
	}</block></then>
	<else>else <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></else></if>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
