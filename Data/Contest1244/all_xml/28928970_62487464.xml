<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28928970_62487464.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>ii</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>pll</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>vl</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ii</name></expr></argument>&gt;</argument_list></name></type> <name>vii</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pll</name></expr></argument>&gt;</argument_list></name></type> <name>vll</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vi</name></expr></argument>&gt;</argument_list></name></type> <name>vvi</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vl</name></expr></argument>&gt;</argument_list></name></type> <name>vvl</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>&gt;</argument_list></name></type> <name>vs</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>double</name></expr></argument>,<argument><expr><name>double</name></expr></argument>&gt;</argument_list></name></type> <name>pt</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>pi</name> <init>= <expr><call><name>acos</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mod</name> <init>= <expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>vi</name></type> <name>mods</name> <init>= <expr><block>{<expr><literal type="number">998244353</literal></expr>,<expr><literal type="number">1000000007</literal></expr>,<expr><literal type="number">1000000009</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>inf</name> <init>= <expr><literal type="number">3e18</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>eps</name> <init>= <expr><literal type="number">0.0000001</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>mt19937</name></type> <name>rng</name><argument_list>(<argument><expr><call><name><name>chrono</name><operator>::</operator><name>steady_clock</name><operator>::</operator><name>now</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>time_since_epoch</name><argument_list>()</argument_list></call><operator>.</operator><call><name>count</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(ll i=(a);i&lt;(b);++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>trav</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(auto&amp;a:x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>begin(x),end(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)(x).size())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fll</name><parameter_list>(<parameter><type><name>xs</name></type></parameter>,<parameter><type><name>x</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>fill(&amp;x,&amp;x+sizeof(xs)/sizeof(x),a)</cpp:value></cpp:define>

<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>res</name><init>=<expr><name>inf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vvl</name></type> <name>cst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>unordered_map</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>vl</name></expr></argument>&gt;</argument_list></name></type> <name>g</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vl</name></type> <name>nds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>bestc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>bestd</name></decl>;</decl_stmt>

<function><type><name>ll</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>node</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>par</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>col</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>dir</name></decl></parameter>)</parameter_list><block>{
  <decl_stmt><decl><type><name>ll</name></type> <name>nxc</name> <init>= <expr><name>col</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>dir</name></expr>?</condition><then><expr><literal type="number">1</literal></expr></then><else>:<expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>nxc</name> <operator>=</operator> <operator>(</operator><name>nxc</name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator><operator>%</operator><literal type="number">3</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>ll</name></type> <name>v</name> <init>= <expr><name><name>cst</name><index>[<expr><name>node</name></expr>]</index><index>[<expr><name>col</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <comment type="line">// cout&lt;&lt;node&lt;&lt;" " &lt;&lt;col&lt;&lt; v&lt;&lt;endl;</comment>
  <macro><name>trav</name><argument_list>(<argument>nx</argument>,<argument>g[node]</argument>)</argument_list></macro><block>{
    <if>if<condition>(<expr><name>nx</name><operator>==</operator><name>par</name></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
    <expr_stmt><expr><name>v</name> <operator>+=</operator> <call><name>dfs</name><argument_list>(<argument><expr><name>nx</name></expr></argument>,<argument><expr><name>node</name></expr></argument>,<argument><expr><name>nxc</name></expr></argument>,<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block>
  <return>return <expr><name>v</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
  <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>precision</name></name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>cst</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><call><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <macro><name>rep</name><argument_list>(<argument>j</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">3</literal></argument>)</argument_list></macro><macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>cst</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
  <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n-<literal type="number">1</literal></argument>)</argument_list></macro><block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>u</name></decl>,<decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>u</name><operator>&gt;&gt;</operator><name>v</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>u</name><operator>--</operator></expr>;</expr_stmt><expr_stmt><expr><name>v</name><operator>--</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>g</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>g</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block>
  <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro><block>{
    <if>if<condition>(<expr><call><name>sz</name><argument_list>(<argument><expr><name><name>g</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>&gt;</operator><literal type="number">2</literal></expr>)</condition><then><block>{
      <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"-1\n"</literal></expr>;</expr_stmt>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then>
    <elseif>else <if>if <condition>(<expr><call><name>sz</name><argument_list>(<argument><expr><name><name>g</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
      <expr_stmt><expr><call><name><name>nds</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if></elseif></if>
  }</block>
  <expr_stmt><expr><name>bestc</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>bestd</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
  <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">3</literal></argument>)</argument_list></macro><macro><name>rep</name><argument_list>(<argument>j</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">2</literal></argument>)</argument_list></macro><block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>nxres</name> <init>= <expr><call><name>dfs</name><argument_list>(<argument><expr><name><name>nds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>nxres</name> <operator>&lt;</operator> <name>res</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>bestc</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>bestd</name><operator>=</operator><name>j</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>res</name><operator>=</operator><name>nxres</name></expr>;</expr_stmt>
    }</block></then></if>
  }</block>
  <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>res</name><operator>&lt;&lt;</operator><literal type="string">"\n"</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>vl</name></type> <name>path</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>path</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>ll</name></type> <name>prev</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ll</name></type> <name>cur</name><init>=<expr><name><name>nds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro><block>{
    <expr_stmt><expr><name><name>path</name><index>[<expr><name>cur</name></expr>]</index></name><operator>=</operator><name>bestc</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>nxc</name> <init>= <expr><name>bestc</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>bestd</name></expr>?</condition><then><expr><literal type="number">1</literal></expr></then><else>:<expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>nxc</name> <operator>=</operator> <operator>(</operator><name>nxc</name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator><operator>%</operator><literal type="number">3</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>bestc</name><operator>=</operator><name>nxc</name></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>i</name><operator>==</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><break>break;</break></block></then></if>
    <macro><name>trav</name><argument_list>(<argument>nx</argument>,<argument>g[cur]</argument>)</argument_list></macro><block>{
      <if>if<condition>(<expr><name>nx</name><operator>==</operator><name>prev</name></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
      <expr_stmt><expr><name>prev</name><operator>=</operator><name>cur</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>cur</name><operator>=</operator><name>nx</name></expr>;</expr_stmt>
      <break>break;</break>
    }</block>
  }</block>
  <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>path</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;&lt;</operator><literal type="string">" \n"</literal><index>[<expr><name>i</name><operator>==</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
