<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28933276_62492168.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<using>using <name>ll</name> <init>= <type><name>long</name> <name>long</name></type></init>;</using>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>ll</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>

	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>arr</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>

	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>arr</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>arr</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>ll</name></type> <name>beginNum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>endNum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init>;</init> <condition><expr><name>beginNum</name> <operator>&lt;</operator> <name>n</name> <operator>&amp;&amp;</operator> <name><name>arr</name><index>[<expr><name>beginNum</name></expr>]</index></name> <operator>==</operator> <name><name>arr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</condition> <incr><expr><operator>++</operator><name>beginNum</name></expr></incr>)</control><block type="pseudo"><empty_stmt>;</empty_stmt></block></for>
	<for>for <control>(<init>;</init> <condition><expr><name>n</name> <operator>-</operator> <name>endNum</name> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>arr</name><index>[<expr><name>n</name> <operator>-</operator> <name>endNum</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <call><name><name>arr</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>endNum</name></expr></incr>)</control><block type="pseudo"><empty_stmt>;</empty_stmt></block></for>

	<decl_stmt><decl><type><name>ll</name></type> <name>counter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>dif</name> <init>= <expr><call><name><name>arr</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>arr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition>
	<block>{
		<if>if <condition>(<expr><name>beginNum</name> <operator>+</operator> <name>endNum</name> <operator>&gt;</operator> <name>n</name></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="number">0</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		}</block></then></if>

		<if>if <condition>(<expr><name>beginNum</name> <operator>&lt;</operator> <name>endNum</name></expr>)</condition><then>
		<block>{
			<if>if <condition>(<expr><operator>(</operator><name><name>arr</name><index>[<expr><name>beginNum</name></expr>]</index></name> <operator>-</operator> <name><name>arr</name><index>[<expr><name>beginNum</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>beginNum</name> <operator>&lt;</operator> <name>k</name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name>k</name> <operator>-=</operator> <operator>(</operator><name><name>arr</name><index>[<expr><name>beginNum</name></expr>]</index></name> <operator>-</operator> <name><name>arr</name><index>[<expr><name>beginNum</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>beginNum</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>dif</name> <operator>-=</operator> <name><name>arr</name><index>[<expr><name>beginNum</name></expr>]</index></name> <operator>-</operator> <name><name>arr</name><index>[<expr><name>beginNum</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>arr</name><index>[<expr><name>beginNum</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>arr</name><index>[<expr><name>beginNum</name></expr>]</index></name></expr>;</expr_stmt>
				<while>while<condition>(<expr><name>beginNum</name> <operator>&lt;</operator> <name>n</name> <operator>&amp;&amp;</operator> <name><name>arr</name><index>[<expr><name>beginNum</name></expr>]</index></name> <operator>==</operator> <name><name>arr</name><index>[<expr><name>beginNum</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition>
					<block type="pseudo"><expr_stmt><expr><name>beginNum</name><operator>++</operator></expr>;</expr_stmt></block></while>
			}</block></then>
			<else>else
			<block>{
				<expr_stmt><expr><name>dif</name> <operator>-=</operator> <name>k</name> <operator>/</operator> <name>beginNum</name></expr>;</expr_stmt>
				<break>break;</break>
			}</block></else></if>
		}</block></then>
		<else>else
		<block>{
			<if>if <condition>(<expr><operator>(</operator><name><name>arr</name><index>[<expr><name>n</name> <operator>-</operator> <name>endNum</name></expr>]</index></name> <operator>-</operator> <name><name>arr</name><index>[<expr><name>n</name> <operator>-</operator> <name>endNum</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>endNum</name> <operator>&lt;</operator> <name>k</name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name>k</name> <operator>-=</operator> <operator>(</operator><name><name>arr</name><index>[<expr><name>n</name> <operator>-</operator> <name>endNum</name></expr>]</index></name> <operator>-</operator> <name><name>arr</name><index>[<expr><name>n</name> <operator>-</operator> <name>endNum</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>endNum</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>dif</name> <operator>-=</operator> <name><name>arr</name><index>[<expr><name>n</name> <operator>-</operator> <name>endNum</name></expr>]</index></name> <operator>-</operator> <name><name>arr</name><index>[<expr><name>n</name> <operator>-</operator> <name>endNum</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>arr</name><index>[<expr><name>n</name> <operator>-</operator> <name>endNum</name></expr>]</index></name> <operator>=</operator> <name><name>arr</name><index>[<expr><name>n</name> <operator>-</operator> <name>endNum</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
				<while>while <condition>(<expr><name>n</name> <operator>-</operator> <name>endNum</name> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>arr</name><index>[<expr><name>n</name> <operator>-</operator> <name>endNum</name></expr>]</index></name> <operator>==</operator> <name><name>arr</name><index>[<expr><name>n</name> <operator>-</operator> <name>endNum</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition>
					<block type="pseudo"><expr_stmt><expr><name>endNum</name><operator>++</operator></expr>;</expr_stmt></block></while>
			}</block></then>
			<else>else
			<block>{
				<expr_stmt><expr><name>dif</name> <operator>-=</operator> <name>k</name> <operator>/</operator> <name>endNum</name></expr>;</expr_stmt>
				<break>break;</break>
			}</block></else></if>
		}</block></else></if>

	}</block></while>

	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>dif</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
