<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28898109_62484201.cpp"><comment type="block" format="doxygen">/**
**      author:XiaKIsGod
**      time:2019.9
                           _ooOoo_
                          o8888888o
                          88" . "88
                          (| -_- |)
                          O\  =  /O
                       ____/`---'\____
                     .'  \\|     |//  `.
                    /  \\|||  :  |||//  \
                   /  _||||| -:- |||||-  \
                   |   | \\\  -  /// |   |
                   | \_|  ''\---/''  |   |
                   \  .-\__  `-`  ___/-. /
                 ___`. .'  /--.--\  `. . __
              ."" '&lt;  `.___\_&lt;|&gt;_/___.'  &gt;'"".
             | | :  `- \`.;`\ _ /`;.`/ - ` : | |
             \  \ `-.   \_ __\ /__ _/   .-` /  /
        ======`-.____`-.___\_____/___.-`____.-'======
                           `=---='
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                   ä½ç¥ä¿ä½       æ°¸æ BUG
**/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ULL</name></cpp:macro> <cpp:value>unsigned long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;int,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mk</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>"\n"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIO</name></cpp:macro> <cpp:value>ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIN</name></cpp:macro> <cpp:value>freopen("1.txt","r",stdin)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x.begin(),x.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>each</name><parameter_list>(<parameter><type><name>e</name></type></parameter>,<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(auto e: v)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rep(i,0,n) cout&lt;&lt;a[i]&lt;&lt;" ";cout&lt;&lt;endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Time</name></cpp:macro> <cpp:value>cout&lt;&lt;"Time="&lt;&lt;clock()-start_clock&lt;&lt;"ms"&lt;&lt;endl</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mem</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(x,v,sizeof(x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>repn</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=a;i&lt;=n;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=a;i&lt;n;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>per</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=n-1;i&gt;=a;i--)</cpp:value></cpp:define>
<function><specifier>inline</specifier> <type><name>int</name></type> <name>reads</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name><name>s</name><index>[]</index></name></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt><decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt><while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="char">' '</literal> <operator>&amp;&amp;</operator> <name>c</name><operator>!=</operator><literal type="char">'\n'</literal></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name><name>s</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block></while><return>return <expr><name>len</name></expr>;</return>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<decl_stmt><decl><type><name>char</name></type> <name><name>F</name><index>[<expr><literal type="number">60</literal></expr>]</index></name></decl>;</decl_stmt> <if>if<condition>( <expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>putchar</name><argument_list>( <argument><expr><literal type="char">'-'</literal></expr></argument> )</argument_list></call></expr><operator>,</operator><expr><name>x</name><operator>=</operator><operator>-</operator><name>x</name></expr>;</expr_stmt></block></then></if><expr_stmt><expr><name><name>F</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>x</name> <operator>%</operator> <literal type="number">10</literal> <operator>+</operator> <literal type="char">'0'</literal></expr> ;</expr_stmt><expr_stmt><expr><name>x</name><operator>/=</operator><literal type="number">10</literal></expr>;</expr_stmt><decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</decl_stmt><while>while<condition>(<expr><name>x</name></expr>)</condition> <block>{<expr_stmt><expr><name><name>F</name><index>[<expr><name>cnt</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>x</name> <operator>%</operator> <literal type="number">10</literal> <operator>+</operator> <literal type="char">'0'</literal></expr> ;</expr_stmt><expr_stmt><expr><name>x</name> <operator>/=</operator> <literal type="number">10</literal></expr> ;</expr_stmt>}</block></while><while>while<condition>(<expr><name>cnt</name></expr>)</condition> <block type="pseudo"><expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><name><name>F</name><index>[<expr><operator>--</operator><name>cnt</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></while><expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>bool</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>ret</name></decl></parameter>)</parameter_list> <block>{<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt><expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt><decl_stmt><decl><type><name>T</name></type> <name>sgn</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt><do>do <block>{ <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <if>if<condition>(<expr><name>c</name><operator>==</operator><name>EOF</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>}</block> while <condition>(<expr><operator>(</operator><name><name>c</name> <argument_list type="generic">&lt; <argument><expr><literal type="char">'0'</literal> <operator>||</operator> <name>c</name></expr></argument> &gt;</argument_list></name> <literal type="char">'9'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="char">'-'</literal></expr>)</condition>;</do><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>sgn</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then> <else>else <block type="pseudo"><expr_stmt><expr><name>ret</name> <operator>=</operator> <name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block></else></if><while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ret</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <operator>(</operator><name>c</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt></block></while> <expr_stmt><expr><name>ret</name><operator>*=</operator> <name>sgn</name></expr>;</expr_stmt><return>return <expr><literal type="boolean">true</literal></expr>;</return>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>void</name></type> <name>_max</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>T</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<if>if<condition>(<expr><name>a</name><operator>&lt;</operator><name>b</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt></block></then></if>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>void</name></type> <name>_min</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>T</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<if>if<condition>(<expr><name>a</name><operator>&gt;</operator><name>b</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt></block></then></if>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>void</name></type> <name>_add</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>T</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>T</name></type> <name>MOD</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>a</name><operator>+</operator><name>b</name><operator>)</operator><operator>%</operator><name>MOD</name></expr>;</expr_stmt>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>T</name></type> <name>_pow</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>T</name></type> <name>MOD</name></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name>T</name></type> <name>ans</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt><while>while<condition>(<expr><name>b</name></expr>)</condition><block>{<if>if<condition>(<expr><name>b</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>=</operator> <name>ans</name><operator>*</operator><name>a</name><operator>%</operator><name>MOD</name></expr>;</expr_stmt></block></then></if><expr_stmt><expr><name>a</name> <operator>=</operator> <name>a</name><operator>*</operator><name>a</name><operator>%</operator><name>MOD</name></expr>;</expr_stmt><expr_stmt><expr><name>b</name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr>;</expr_stmt>}</block></while><return>return <expr><name>ans</name></expr>;</return>}</block></function>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<function><type><name>LL</name></type> <name>extend_gcd</name><parameter_list>(<parameter><decl><type><name>LL</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>LL</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>LL</name><modifier>&amp;</modifier></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>LL</name><modifier>&amp;</modifier></type> <name>y</name></decl></parameter>)</parameter_list><block>{
	<if>if<condition>(<expr><operator>!</operator><name>b</name></expr>)</condition><then><block>{
		<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt><expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<return>return <expr><name>a</name></expr>;</return>
	}</block></then></if>
	<decl_stmt><decl><type><name>LL</name></type> <name>d</name> <init>= <expr><call><name>extend_gcd</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>a</name><operator>%</operator><name>b</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>y</name> <operator>-=</operator> <name>x</name><operator>*</operator><operator>(</operator><name>a</name><operator>/</operator><name>b</name><operator>)</operator></expr>;</expr_stmt>
	<return>return <expr><name>d</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ONLINE_JUDGE</name></cpp:ifndef>
		<expr_stmt><expr><name>FIN</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>start_clock</name> <init>= <expr><call><name>clock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name>FIO</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>LL</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>p</name></decl>,<decl><type ref="prev"/><name>w</name></decl>,<decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>LL</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LL</name></type> <name>gcd</name> <init>= <expr><call><name>extend_gcd</name><argument_list>(<argument><expr><name>w</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if>if<condition>(<expr><name>p</name><operator>%</operator><name>gcd</name><operator>!=</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"-1"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></then>
	<else>else<block>{
		<decl_stmt><decl><type><name>LL</name></type> <name>t</name> <init>= <expr><name>w</name> <operator>/</operator> <name>gcd</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>y</name><operator>%=</operator><name>t</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>y</name> <operator>*=</operator> <name>p</name> <operator>/</operator> <name>gcd</name> <operator>%</operator> <name>t</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><name>y</name> <operator>%</operator> <name>t</name> <operator>+</operator> <name>t</name><operator>)</operator><operator>%</operator><name>t</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>p</name><operator>-</operator><name>y</name><operator>*</operator><name>d</name><operator>)</operator><operator>/</operator><name>w</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>LL</name></type> <name>z</name> <init>= <expr><name>n</name><operator>-</operator><name>x</name><operator>-</operator><name>y</name></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>x</name><operator>&gt;=</operator><literal type="number">0</literal><operator>&amp;&amp;</operator><name>z</name><operator>&gt;=</operator><literal type="number">0</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>x</name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name>y</name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name>z</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
		}</block></then><else>else<block>{
			<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"-1"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
		}</block></else></if>	
	}</block></else></if>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

</unit>
