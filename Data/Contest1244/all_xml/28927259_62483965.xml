<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28927259_62483965.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>

<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>p</name></decl>,<decl><type ref="prev"/><name>w</name></decl>,<decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
<function><type><name>ll</name></type> <name>f</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>m</name></decl></parameter>)</parameter_list><block>{
	<return>return <expr><name>a</name><operator>*</operator><name>w</name><operator>+</operator><operator>(</operator><name>m</name><operator>-</operator><name>a</name><operator>)</operator><operator>*</operator><name>d</name></expr>;</return>
}</block></function>
<function><type><name>ll</name></type> <name>bs</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>s</name></decl></parameter>)</parameter_list><block>{
	<decl_stmt><decl><type><name>ll</name></type> <name>l</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>r</name><init>=<expr><name>s</name></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>l</name><operator>&lt;=</operator><name>r</name></expr>)</condition><block>{
		<decl_stmt><decl><type><name>ll</name></type> <name>m</name><init>=<expr><name>l</name><operator>+</operator><name>r</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><call><name>f</name><argument_list>(<argument><expr><name>m</name></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>==</operator><name>p</name></expr>)</condition><then><block type="pseudo"><return>return <expr><name>m</name></expr>;</return></block></then></if>
		<if>if<condition>(<expr><call><name>f</name><argument_list>(<argument><expr><name>m</name></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>&lt;</operator><name>p</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>l</name><operator>=</operator><name>m</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><name>r</name><operator>=</operator><name>m</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
	}</block></while>
	<return>return <expr><name>r</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>p</name><operator>&gt;&gt;</operator><name>w</name><operator>&gt;&gt;</operator><name>d</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>is</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>r</name><init>=<expr><call><name>min</name><argument_list>(<argument><expr><name>p</name><operator>/</operator><name>d</name></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>,<decl><type ref="prev"/><name>l</name><init>=<expr><call><name>max</name><argument_list>(<argument><expr><name>r</name><operator>-</operator><operator>(</operator><name>w</name><operator>-</operator><name>d</name><operator>)</operator><operator>*</operator><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">0ll</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>ll</name></type> <name>m</name><init>=<expr><name>r</name></expr></init></decl>;</init><condition><expr><name>m</name><operator>&gt;=</operator><name>l</name></expr>;</condition><incr><expr><name>m</name><operator>--</operator></expr></incr>)</control><block>{
		<decl_stmt><decl><type><name>ll</name></type> <name>x</name><init>=<expr><call><name>bs</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><call><name>f</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call><operator>==</operator><name>p</name></expr>)</condition><then><block>{
			<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>x</name><operator>&lt;&lt;</operator><literal type="char">' '</literal><operator>&lt;&lt;</operator><name>m</name><operator>-</operator><name>x</name><operator>&lt;&lt;</operator><literal type="char">' '</literal><operator>&lt;&lt;</operator><name>n</name><operator>-</operator><name>m</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>is</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<break>break;</break>
		}</block></then></if>
	}</block></for>
	<if>if<condition>(<expr><operator>!</operator><name>is</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"-1"</literal></expr>;</expr_stmt></block></then></if>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
