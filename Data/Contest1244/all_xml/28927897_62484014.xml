<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28927897_62484014.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">1e6</literal><operator>+</operator><literal type="number">100</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name><name>p</name><index>[<expr><literal type="number">10</literal></expr>]</index><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>co</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>cost</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name> <name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>v</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>mas</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>px</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>d</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name>cost</name><operator>+=</operator><name><name>p</name><index>[<expr><name><name>c</name><index>[<expr><name>d</name><operator>%</operator><literal type="number">3</literal></expr>]</index></name></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>mas</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><name><name>c</name><index>[<expr><name>d</name><operator>%</operator><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>u</name><range>: <expr><name><name>v</name><index>[<expr><name>x</name></expr>]</index></name></expr></range></decl></init>)</control>
        <block type="pseudo"><if>if<condition>(<expr><name>u</name><operator>!=</operator><name>px</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>u</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>d</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></block></for>
}</block></function>

<function><type><name>int</name></type> <name>main</name> <parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>c</name><operator>=</operator><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>}</block></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>n</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><call><name><name>mas</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
        <block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
        <block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
        <block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name><operator>-</operator><literal type="number">1</literal></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control> <block>{
        <decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>u1</name></decl>, <decl><type ref="prev"/><name>u2</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>u1</name> <operator>&gt;&gt;</operator> <name>u2</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>u1</name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>u2</name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>v</name><index>[<expr><name>u1</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>u2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>v</name><index>[<expr><name>u2</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>u1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>mx</name> <init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>le</name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control> <block>{
        <expr_stmt><expr><name>mx</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>mx</name></expr></argument>,<argument><expr><literal type="number">1ll</literal><operator>*</operator><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>le</name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></then></if>
    }</block></for>
    <if>if<condition>(<expr><name>mx</name><operator>&gt;</operator><literal type="number">2</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>ans</name> <init>= <expr><literal type="number">1e18</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name> <name>int</name></expr></argument>&gt;</argument_list></name></type><name>ja</name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control> <block>{
        <expr_stmt><expr><name>cost</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>le</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="line">//  cout &lt;&lt; cost &lt;&lt; ' ' &lt;&lt; ans &lt;&lt; ' ' &lt;&lt; c[0] &lt;&lt; ' ' &lt;&lt; c[1] &lt;&lt;  ' '  &lt;&lt; c[2] &lt;&lt; '\n';</comment>
        <if>if<condition>(<expr><name>ans</name><operator>&gt;</operator><name>cost</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>ja</name><operator>=</operator><name>mas</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>ans</name><operator>=</operator><name>cost</name></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name>next_permutation</name><argument_list>(<argument><expr><call><name><name>c</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>c</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>u</name> <range>: <expr><name>ja</name></expr></range></decl></init>)</control>
        <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>u</name><operator>+</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block></for>
}</block></function>

</unit>
