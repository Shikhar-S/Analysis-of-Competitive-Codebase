<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28913296_62483337.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>long</name> <name>long</name></type>       <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type>   <name>pii</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type>     <name>pll</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive>     <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>a.begin(), a.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>     <cpp:macro><name>pb</name></cpp:macro>      <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>     <cpp:macro><name>ff</name></cpp:macro>      <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>     <cpp:macro><name>ss</name></cpp:macro>      <cpp:value>second</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive>     <cpp:macro><name>inf</name></cpp:macro>     <cpp:value>(1000000000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>     <cpp:macro><name>infl</name></cpp:macro>    <cpp:value>(1000000000000000000LL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>     <cpp:macro><name>MAX</name></cpp:macro>     <cpp:value>3000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>     <cpp:macro><name>MOD</name></cpp:macro>     <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>     <cpp:macro><name>eps</name></cpp:macro>     <cpp:value>1e-6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>     <cpp:macro><name>FIN</name></cpp:macro>     <cpp:value>freopen("input.txt","r",stdin);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>     <cpp:macro><name>FOUT</name></cpp:macro>    <cpp:value>freopen("output.txt","w",stdout);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>     <cpp:macro><name>SET</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>memset((a), -1, sizeof(a))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>     <cpp:macro><name>CLR</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>memset((a), 0, sizeof(a))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>     <cpp:macro><name>dbg</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>cout &lt;&lt; #x &lt;&lt; " = " &lt;&lt; x &lt;&lt; endl</cpp:value></cpp:define>

<comment type="line">//pos is 0 based</comment>
<function><specifier>inline</specifier> <type><name>bool</name></type> <name>checkBit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>)</parameter_list><block>{ <return>return  <expr><call>(<name>bool</name>)<argument_list>(<argument><expr><name>mask</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>pos</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>}</block></function>
<function><specifier>inline</specifier> <type><name>int</name></type> <name>setBit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>)</parameter_list><block>{    <return>return  <expr><operator>(</operator><name>mask</name> <operator>|</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>pos</name><operator>)</operator><operator>)</operator></expr>;</return>}</block></function>
<function><specifier>inline</specifier> <type><name>int</name></type> <name>resetBit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>)</parameter_list><block>{    <return>return  <expr><operator>(</operator><name>mask</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>pos</name><operator>)</operator><operator>)</operator></expr>;</return>}</block></function>
<function><specifier>inline</specifier> <type><name>int</name></type> <name>toggleBit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>)</parameter_list><block>{    <return>return  <expr><operator>(</operator><name>mask</name> <operator>^</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>pos</name><operator>)</operator><operator>)</operator></expr>;</return>}</block></function>

<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>p</name></decl>,<decl><type ref="prev"/><name>w</name></decl>,<decl><type ref="prev"/><name>d</name></decl>,<decl><type ref="prev"/><name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>,<decl><type ref="prev"/><name>z</name></decl>;</decl_stmt>


<function><type><name>bool</name></type> <name>tryWin</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>wins</name></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><name>p</name><operator>&lt;</operator><name>wins</name><operator>*</operator><name>w</name></expr>)</condition><then>   <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
    <if>if<condition>(<expr><operator>(</operator><name>p</name><operator>-</operator><name>wins</name><operator>*</operator><name>w</name><operator>)</operator><operator>%</operator><name>d</name><operator>!=</operator><literal type="number">0</literal></expr>)</condition><then>    <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
    <expr_stmt><expr><name>x</name> <operator>=</operator> <name>wins</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><name>p</name><operator>-</operator><name>x</name><operator>*</operator><name>w</name><operator>)</operator><operator>/</operator><name>d</name></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>x</name><operator>+</operator><name>y</name><operator>&gt;</operator><name>n</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
    <expr_stmt><expr><name>z</name> <operator>=</operator> <name>n</name> <operator>-</operator> <operator>(</operator><name>x</name><operator>+</operator><name>y</name><operator>)</operator></expr>;</expr_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
}</block></function>

<function><type><name>bool</name></type> <name>tryDraw</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>draw</name></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><name>p</name><operator>&lt;</operator><name>draw</name><operator>*</operator><name>d</name></expr>)</condition><then>   <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
    <if>if<condition>(<expr><operator>(</operator><name>p</name><operator>-</operator><name>draw</name><operator>*</operator><name>d</name><operator>)</operator><operator>%</operator><name>w</name><operator>!=</operator><literal type="number">0</literal></expr>)</condition><then>    <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
    <expr_stmt><expr><name>y</name> <operator>=</operator> <name>draw</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>p</name><operator>-</operator><name>y</name><operator>*</operator><name>d</name><operator>)</operator><operator>/</operator><name>w</name></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>x</name><operator>+</operator><name>y</name><operator>&gt;</operator><name>n</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
    <expr_stmt><expr><name>z</name> <operator>=</operator> <name>n</name> <operator>-</operator> <operator>(</operator><name>x</name><operator>+</operator><name>y</name><operator>)</operator></expr>;</expr_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
}</block></function>


<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld %lld %lld %lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>w</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>ll</name></type> <name>lim</name> <init>= <expr><literal type="number">1e7</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>lim</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>lim</name></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>lim</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <if>if<condition>(<expr><call><name>tryWin</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{

            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld %lld %lld\n"</literal></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then>
        <elseif>else <if>if<condition>(<expr><call><name>tryDraw</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld %lld %lld\n"</literal></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if></elseif></if>
    }</block></for>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-1\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>

}</block></function>

<function><type><name>int</name></type> <name>main</name> <parameter_list>()</parameter_list>
<block>{

    <expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

</unit>
