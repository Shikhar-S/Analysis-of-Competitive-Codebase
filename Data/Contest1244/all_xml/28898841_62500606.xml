<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28898841_62500606.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name><name>a</name><index>[<expr><literal type="number">100010</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>

    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>a</name> <operator>+</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" format="doxygen">/**for (i = 0; i &lt; n; i ++)
        cout &lt;&lt; a[i] &lt;&lt; " ";
    cout &lt;&lt; endl;*/</comment>
    <comment type="line" format="doxygen">///cout &lt;&lt; "-------------------" &lt;&lt; endl;</comment>
    <expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>j</name> <operator>=</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>i</name> <operator>&lt;</operator> <name>j</name></expr>)</condition>
    <block>{

        <while>while<condition>(<expr><name>i</name> <operator>&lt;</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>a</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition>
            <block type="pseudo"><expr_stmt><expr><name>i</name> <operator>++</operator></expr>;</expr_stmt></block></while>
        <while>while<condition>(<expr><name>j</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>a</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name><name>a</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition>
            <block type="pseudo"><expr_stmt><expr><name>j</name> <operator>--</operator></expr>;</expr_stmt></block></while>

        <comment type="line" format="doxygen">///cout &lt;&lt; i &lt;&lt; " " &lt;&lt; j &lt;&lt; " " &lt;&lt; k &lt;&lt; endl;</comment>
        <if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>j</name></expr>)</condition><then>
        <block>{
            <if>if <condition>(<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>n</name> <operator>-</operator> <name>j</name></expr>)</condition><then>
            <block>{
                <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>p</name> <init>= <expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>best</name> <init>= <expr><name>k</name> <operator>/</operator> <name>p</name></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>best</name> <operator>&lt;</operator> <name><name>a</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>a</name><index>[<expr><name>j</name></expr>]</index></name> <operator>-</operator> <operator>(</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>best</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
                    <return>return <expr><literal type="number">0</literal></expr>;</return>
                }</block></then></if>
                <expr_stmt><expr><name>k</name> <operator>=</operator> <name>k</name> <operator>-</operator> <name>p</name> <operator>*</operator> <operator>(</operator><name><name>a</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>i</name> <operator>++</operator></expr>;</expr_stmt>
            }</block></then>
            <else>else
            <block>{
                <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>p</name> <init>= <expr><name>n</name> <operator>-</operator> <name>j</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>best</name> <init>= <expr><name>k</name> <operator>/</operator> <name>p</name></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>best</name> <operator>&lt;</operator> <name><name>a</name><index>[<expr><name>j</name></expr>]</index></name> <operator>-</operator> <name><name>a</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name> <operator>-</operator> <name>best</name><operator>)</operator> <operator>-</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
                    <return>return <expr><literal type="number">0</literal></expr>;</return>
                }</block></then></if>
                <expr_stmt><expr><name>k</name> <operator>=</operator> <name>k</name> <operator>-</operator> <name>p</name> <operator>*</operator> <operator>(</operator><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name> <operator>-</operator> <name><name>a</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>j</name> <operator>--</operator></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then></if>
    }</block></while>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="number">0</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
<comment type="block">/*
7 10
3 3 5 8 8 10 12
*/</comment>
</unit>
