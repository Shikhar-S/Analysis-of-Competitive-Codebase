<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28936017_62497403.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstdlib&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;unordered_map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name>t</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>n</name></decl>,<decl><type ref="prev"/><name>a</name></decl>;</decl_stmt><decl_stmt><decl><type><name>ll</name></type> <name>k</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>t</name><index>[<expr><name>a</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
	}</block></for>
	<decl_stmt><decl><type><name>auto</name></type> <name>L</name><init>=<expr><call><name><name>t</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>,<decl><type ref="prev"/><name>R</name><init>=<expr><operator>--</operator><call><name><name>t</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>k</name><operator>&amp;&amp;</operator><name>L</name><operator>!=</operator><name>R</name></expr>)</condition><block>{
		<decl_stmt><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name>l1</name><init>=<expr><call><name>make_pair</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>L</name><operator>)</operator><operator>.</operator><name>first</name></name></expr></argument>,<argument><expr><name><name>t</name><index>[<expr><name><operator>(</operator><operator>*</operator><name>L</name><operator>)</operator><operator>.</operator><name>first</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>L</name><operator>++</operator></expr>;</expr_stmt>
		<decl_stmt><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name>l2</name><init>=<expr><call><name>make_pair</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>L</name><operator>)</operator><operator>.</operator><name>first</name></name></expr></argument>,<argument><expr><name><name>t</name><index>[<expr><name><operator>(</operator><operator>*</operator><name>L</name><operator>)</operator><operator>.</operator><name>first</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>L</name><operator>--</operator></expr>;</expr_stmt>
		<decl_stmt><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name>r1</name><init>=<expr><call><name>make_pair</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>R</name><operator>)</operator><operator>.</operator><name>first</name></name></expr></argument>,<argument><expr><name><name>t</name><index>[<expr><name><operator>(</operator><operator>*</operator><name>R</name><operator>)</operator><operator>.</operator><name>first</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>R</name><operator>--</operator></expr>;</expr_stmt>
		<decl_stmt><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name>r2</name><init>=<expr><call><name>make_pair</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>R</name><operator>)</operator><operator>.</operator><name>first</name></name></expr></argument>,<argument><expr><name><name>t</name><index>[<expr><name><operator>(</operator><operator>*</operator><name>R</name><operator>)</operator><operator>.</operator><name>first</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>R</name><operator>++</operator></expr>;</expr_stmt>
		<if>if<condition>(<expr><name><name>l1</name><operator>.</operator><name>second</name></name><operator>&lt;</operator><name><name>r1</name><operator>.</operator><name>second</name></name></expr>)</condition><then><block>{
			<decl_stmt><decl><type><name>ll</name></type> <name>d</name><init>=<expr><operator>(</operator><literal type="number">1LL</literal><operator>*</operator><name><name>l2</name><operator>.</operator><name>first</name></name><operator>-</operator><name><name>l1</name><operator>.</operator><name>first</name></name><operator>)</operator><operator>*</operator><name><name>l1</name><operator>.</operator><name>second</name></name></expr></init></decl>;</decl_stmt>
			<if>if<condition>(<expr><name>k</name><operator>&lt;</operator><name>d</name></expr>)</condition><then><block type="pseudo"><return>return <expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><name><name>r1</name><operator>.</operator><name>first</name></name><operator>-</operator><operator>(</operator><name>k</name><operator>/</operator><name><name>l1</name><operator>.</operator><name>second</name></name><operator>+</operator><name><name>l1</name><operator>.</operator><name>first</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><literal type="number">0</literal></expr>;</return></block></then></if>
			<expr_stmt><expr><name>k</name><operator>-=</operator><name>d</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>L</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name><name>l1</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>t</name><index>[<expr><name><name>l2</name><operator>.</operator><name>first</name></name></expr>]</index></name><operator>+=</operator><name><name>l1</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt>
		}</block></then><else>else<block>{
			<decl_stmt><decl><type><name>ll</name></type> <name>d</name><init>=<expr><operator>(</operator><literal type="number">1LL</literal><operator>*</operator><name><name>r1</name><operator>.</operator><name>first</name></name><operator>-</operator><name><name>r2</name><operator>.</operator><name>first</name></name><operator>)</operator><operator>*</operator><name><name>r1</name><operator>.</operator><name>second</name></name></expr></init></decl>;</decl_stmt>
			<if>if<condition>(<expr><name>k</name><operator>&lt;</operator><name>d</name></expr>)</condition><then><block type="pseudo"><return>return <expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><name><name>r1</name><operator>.</operator><name>first</name></name><operator>-</operator><name>k</name><operator>/</operator><name><name>r1</name><operator>.</operator><name>second</name></name><operator>-</operator><name><name>l1</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><literal type="number">0</literal></expr>;</return></block></then></if>
			<expr_stmt><expr><name>k</name><operator>-=</operator><name>d</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>R</name><operator>--</operator></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name><name>r1</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>t</name><index>[<expr><name><name>r2</name><operator>.</operator><name>first</name></name></expr>]</index></name><operator>+=</operator><name><name>r1</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt>
		}</block></else></if>
	}</block></while>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
