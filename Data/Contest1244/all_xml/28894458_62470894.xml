<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28894458_62470894.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cp</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memcpy(a,b,sizeof(b))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)((a).size()))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>emplace_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sqr</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x)*(x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(a).begin(),(a).end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mpr</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>LL</name></type> <name>N</name> <init>= <expr><literal type="number">5e6</literal> <operator>+</operator> <literal type="number">100</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LL</name></type> <name>mod</name></decl>, <decl><type ref="prev"/><name>inv6</name></decl>, <decl><type ref="prev"/><name><name>dp</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>LL</name></expr></argument>, <argument><expr><name>LL</name></expr></argument>&gt;</argument_list></name></type> <name>mp</name></decl>;</decl_stmt>

<function><specifier>inline</specifier> <type><name>LL</name></type> <name>S</name><parameter_list>(<parameter><decl><type><name>LL</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name>a</name> <operator>%=</operator> <name>mod</name></expr>;</expr_stmt>
    <return>return <expr><operator>(</operator><name>a</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>a</name> <operator>/</operator> <literal type="number">2</literal> <operator>%</operator> <name>mod</name></expr>;</return>
}</block></function>

<function><specifier>inline</specifier> <type><name>LL</name></type> <name>K</name><parameter_list>(<parameter><decl><type><name>LL</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>S</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>S</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>%</operator> <name>mod</name></expr>;</return>
}</block></function>


<function><specifier>inline</specifier> <type><name>LL</name></type> <name>S2</name><parameter_list>(<parameter><decl><type><name>LL</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name>a</name> <operator>%=</operator> <name>mod</name></expr>;</expr_stmt>
    <return>return <expr><name>a</name> <operator>*</operator> <operator>(</operator><name>a</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>mod</name> <operator>*</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>a</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>mod</name> <operator>*</operator> <name>inv6</name> <operator>%</operator> <name>mod</name></expr>;</return>
}</block></function>

<function><type><name>LL</name></type> <name>D</name><parameter_list>(<parameter><decl><type><name>LL</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <name>N</name></expr>)</condition><then> <block>{
        <return>return <expr><name><name>dp</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</return>
    }</block></then></if>
    <if>if <condition>(<expr><name><name>mp</name><index>[<expr><name>n</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name><name>mp</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</return></block></then></if>
    <decl_stmt><decl><type><name>LL</name></type> <name>ans</name> <init>= <expr><call><name>K</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>LL</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name> <operator>=</operator> <name>j</name> <operator>+</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{
        <expr_stmt><expr><name>j</name> <operator>=</operator> <name>n</name> <operator>/</operator> <operator>(</operator><name>n</name> <operator>/</operator> <name>i</name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>ans</name> <operator>=</operator> <name>ans</name> <operator>+</operator> <name>mod</name> <operator>-</operator> <operator>(</operator><call><name>S2</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>S2</name><argument_list>(<argument><expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name>mod</name><operator>)</operator> <operator>*</operator> <call><name>D</name><argument_list>(<argument><expr><name>n</name> <operator>/</operator> <name>i</name></expr></argument>)</argument_list></call> <operator>%</operator> <name>mod</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ans</name> <operator>%=</operator> <name>mod</name></expr>;</expr_stmt>
    }</block></for>
    <return>return <expr><name><name>mp</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name>ans</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>t</name><operator>--</operator></expr>)</condition> <block>{
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>s</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>lr</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>rr</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
            <if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'1'</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>lr</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
                <break>break;</break>
            }</block></then></if>
        }</block></for>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{
            <if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'1'</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>rr</name> <operator>=</operator> <name>n</name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <break>break;</break>
            }</block></then></if>
        }</block></for>
        <if>if <condition>(<expr><name>lr</name> <operator>==</operator> <name>rr</name> <operator>&amp;&amp;</operator> <name>lr</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>n</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>n</name> <operator>-</operator> <call><name>min</name><argument_list>(<argument><expr><name>lr</name></expr></argument>, <argument><expr><name>rr</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
        }</block></else></if>
    }</block></while>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

</unit>
