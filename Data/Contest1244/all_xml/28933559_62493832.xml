<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28933559_62493832.cpp">
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ss</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>deb</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout&lt;&lt;#x&lt;&lt;" : "&lt;&lt;x&lt;&lt;endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>deb2</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout&lt;&lt;#x&lt;&lt;" : "&lt;&lt;x&lt;&lt;"\t"&lt;&lt;#y&lt;&lt;" : "&lt;&lt;y&lt;&lt;endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>deb3</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout&lt;&lt;#x&lt;&lt;" : "&lt;&lt;x&lt;&lt;"\t"&lt;&lt;#y&lt;&lt;" : "&lt;&lt;y&lt;&lt;"\t"&lt;&lt;#z&lt;&lt;" : "&lt;&lt;z&lt;&lt;endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inf</name></cpp:macro> <cpp:value>1000000000000000</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIO</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>'\n'</cpp:value></cpp:define>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ld</name></cpp:macro> <cpp:value>long double</cpp:value></cpp:define>

<comment type="block">/*
#include &lt;ext/pb_ds/assoc_container.hpp&gt; 
#include &lt;ext/pb_ds/tree_policy.hpp&gt; 
using namespace __gnu_pbds; 
  
#define ordered_set tree&lt;int, null_type,less&lt;int&gt;, rb_tree_tag,tree_order_statistics_node_update&gt; 
*/</comment>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
 
 
<function_decl><type><name>long</name> <name>long</name></type> <name>modulo</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>base</name></decl></parameter>,<parameter><decl><type><name>long</name> <name>long</name></type> <name>exponent</name></decl></parameter>,<parameter><decl><type><name>long</name> <name>long</name></type> <name>modulus</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>long</name> <name>long</name></type> <name>choose</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>k</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ll</name></type> <name>inverse</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>m</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>build</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>fileio</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>ll</name></type> <name>ncr</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>r</name></decl></parameter>)</parameter_list>;</function_decl>
 
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nax</name><init>=<expr><literal type="number">1e6</literal><operator>+</operator><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>LG</name><init>=<expr><call><name>log2</name><argument_list>(<argument><expr><name>nax</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<function_decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>fact</name><parameter_list>(<parameter><decl><type><name>nax</name></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name><name>adj</name><index>[<expr><name>nax</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>c</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><name>nax</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>p</name></decl></parameter>)</parameter_list>
<block>{
	<expr_stmt><expr><call><name><name>a</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>adj</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<decl_stmt><decl><type><name>ll</name></type> <name>y</name> <init>= <expr><name><name>adj</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>y</name><operator>==</operator><name>p</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
		<expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>y</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
}</block></function>
 
<function><type><name>int32_t</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
 
    <decl_stmt><decl><type><name>FIO</name>
    <comment type="line">//fileio();</comment>
    <comment type="line">//build();</comment>
    <name>ll</name></type> <name>n</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    	<block type="pseudo"><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    	<block type="pseudo"><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    	<block type="pseudo"><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><operator>(</operator><name>n</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
    	<decl_stmt><decl><type><name>ll</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
    	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>x</name><operator>&gt;&gt;</operator><name>y</name></expr>;</expr_stmt>

    	<expr_stmt><expr><name><name>adj</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    	<expr_stmt><expr><name><name>adj</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
    	<if>if<condition>(<expr><name><name>adj</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>&gt;</operator><literal type="number">2</literal></expr>)</condition><then>
    	<block>{
    		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>-</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    		<return>return <expr><literal type="number">0</literal></expr>;</return>
    	}</block></then></if>
    }</block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
    	<if>if<condition>(<expr><name><name>adj</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
    	<block>{
    		<expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    		<break>break;</break>
    	}</block></then></if>
    }</block></for>

    <decl_stmt><decl><type><name>ll</name></type> <name><name>perm</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  	<expr_stmt><expr><call><name>sort</name> <argument_list>(<argument><expr><name>perm</name></expr></argument>,<argument><expr><name>perm</name><operator>+</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  	<decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><name>LONG_LONG_MAX</name></expr></init></decl>;</decl_stmt>
  	
  	<do>do <block>{
    	
    	<decl_stmt><decl><type><name>ll</name></type> <name>cost</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    	<block>{
    		<decl_stmt><decl><type><name>ll</name></type> <name>x</name> <init>= <expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    		<expr_stmt><expr><name>cost</name> <operator>+=</operator> <name><name>c</name><index>[<expr><name><name>perm</name><index>[<expr><name>i</name><operator>%</operator><literal type="number">3</literal></expr>]</index></name></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
    	}</block></for>

    	<expr_stmt><expr><name>ans</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>ans</name></expr></argument>,<argument><expr><name>cost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  	}</block> while <condition>( <expr><call><name><name>std</name><operator>::</operator><name>next_permutation</name></name><argument_list>(<argument><expr><name>perm</name></expr></argument>,<argument><expr><name>perm</name><operator>+</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr> )</condition>;</do>

  	<expr_stmt><expr><call><name>sort</name> <argument_list>(<argument><expr><name>perm</name></expr></argument>,<argument><expr><name>perm</name><operator>+</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>f</name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
  	<do>do <block>{
    	
    	<decl_stmt><decl><type><name>ll</name></type> <name>cost</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    	<block>{
    		<decl_stmt><decl><type><name>ll</name></type> <name>x</name> <init>= <expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    		<expr_stmt><expr><name>cost</name> <operator>+=</operator> <name><name>c</name><index>[<expr><name><name>perm</name><index>[<expr><name>i</name><operator>%</operator><literal type="number">3</literal></expr>]</index></name></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
    	}</block></for>

    	<if>if<condition>(<expr><name>cost</name><operator>==</operator><name>ans</name></expr>)</condition><then>
    	<block>{
    		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    		<block>{
    			<expr_stmt><expr><name><name>f</name><index>[<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name><name>perm</name><index>[<expr><name>i</name><operator>%</operator><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
    		}</block></for>
    		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>cost</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    			<block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;&lt;</operator><literal type="string">" "</literal></expr>;</expr_stmt></block></for>
    		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    		<return>return <expr><literal type="number">0</literal></expr>;</return>
    	}</block></then></if>
  	}</block> while <condition>( <expr><call><name><name>std</name><operator>::</operator><name>next_permutation</name></name><argument_list>(<argument><expr><name>perm</name></expr></argument>,<argument><expr><name>perm</name><operator>+</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr> )</condition>;</do>

 
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
 
<function><type><name>ll</name></type> <name>ncr</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>r</name></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><name>r</name><operator>&gt;</operator><name>n</name> <operator>||</operator> <name>r</name><operator>&lt;</operator><literal type="number">0</literal> <operator>||</operator> <name>n</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
    <decl_stmt><decl><type><name>ll</name></type> <name>ans</name><init>=<expr><name><name>fact</name><index>[<expr><name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>temp</name><init>=<expr><operator>(</operator><name><name>fact</name><index>[<expr><name>n</name><operator>-</operator><name>r</name></expr>]</index></name><operator>*</operator><name><name>fact</name><index>[<expr><name>r</name></expr>]</index></name><operator>)</operator><operator>%</operator><name>mod</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>ans</name><operator>=</operator><operator>(</operator><name>ans</name><operator>*</operator><call><name>inverse</name><argument_list>(<argument><expr><name>temp</name></expr></argument>,<argument><expr><name>mod</name></expr></argument>)</argument_list></call><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt>
    <return>return <expr><name>ans</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>fileio</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"input.txt"</literal></expr></argument>,<argument><expr><literal type="string">"r"</literal></expr></argument>,<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"output.txt"</literal></expr></argument>,<argument><expr><literal type="string">"w"</literal></expr></argument>,<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function> 
<function><type><name>void</name></type> <name>build</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><name><name>fact</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>nax</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name><name>fact</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><operator>(</operator><name><name>fact</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>*</operator><name>i</name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt></block></for>   
}</block></function>
 
<function><type><name>long</name> <name>long</name></type> <name>modulo</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>base</name></decl></parameter>,<parameter><decl><type><name>long</name> <name>long</name></type> <name>exponent</name></decl></parameter>,<parameter><decl><type><name>long</name> <name>long</name></type> <name>modulus</name></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><name>modulus</name> <operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
 
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>result</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>base</name><operator>=</operator><name>base</name> <operator>%</operator> <name>modulus</name></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>exponent</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition>
    <block>{
        <if>if<condition>(<expr><name>exponent</name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>result</name><operator>=</operator><operator>(</operator><name>result</name><operator>*</operator><name>base</name><operator>)</operator> <operator>%</operator> <name>modulus</name></expr>;</expr_stmt>
 
        }</block></then></if>
        <expr_stmt><expr><name>exponent</name><operator>=</operator><name>exponent</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>base</name> <operator>=</operator> <operator>(</operator><name>base</name><operator>*</operator><name>base</name><operator>)</operator> <operator>%</operator> <name>modulus</name></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><name>result</name></expr>;</return>
}</block></function>
 
<function><type><name>long</name> <name>long</name></type> <name>choose</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>k</name></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><name>k</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>  <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
    <return>return <expr><operator>(</operator><name>n</name><operator>*</operator> <call><name>choose</name><argument_list>(<argument><expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>k</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>/</operator><name>k</name></expr>;</return>
}</block></function>
 
<function><type><name>void</name></type> <name>EE</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>ll</name> <modifier>&amp;</modifier></type><name>co1</name></decl></parameter>,<parameter><decl><type><name>ll</name> <modifier>&amp;</modifier></type><name>co2</name></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><name>a</name><operator>%</operator><name>b</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>co1</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>co2</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <return>return;</return>
    }</block></then></if>
    <expr_stmt><expr><call><name>EE</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>a</name><operator>%</operator><name>b</name></expr></argument>,<argument><expr><name>co1</name></expr></argument>,<argument><expr><name>co2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>temp</name><init>=<expr><name>co1</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>co1</name><operator>=</operator><name>co2</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>co2</name><operator>=</operator><name>temp</name><operator>-</operator><name>co2</name><operator>*</operator><operator>(</operator><name>a</name><operator>/</operator><name>b</name><operator>)</operator></expr>;</expr_stmt>
}</block></function>
 
<function><type><name>ll</name></type> <name>inverse</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>m</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>EE</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>m</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>x</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>x</name><operator>+=</operator><name>m</name></expr>;</expr_stmt></block></then></if>
    <return>return <expr><name>x</name></expr>;</return>
}</block></function></unit>
