<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28897197_62486036.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ext/pb_ds/assoc_container.hpp&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ext/pb_ds/tree_policy.hpp&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<using>using <namespace>namespace <name>__gnu_pbds</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro>                 <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro>                  <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ld</name></cpp:macro>                  <cpp:value>long double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>            <cpp:value>for(int i=0;i&lt;n;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hell</name></cpp:macro>                <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inf</name></cpp:macro>                 <cpp:value>(ll)1e15</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vi</name></cpp:macro>                  <cpp:value>vector&lt;int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vii</name></cpp:macro>                 <cpp:value>vector&lt; vi &gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro>                  <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro>                  <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro>                  <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro>                  <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro>                 <cpp:value>pair&lt;int,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro>              <cpp:value>c.begin(),c.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro>               <cpp:value>(int)c.size()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hash1</name></cpp:macro>               <cpp:value>105727LL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hash2</name></cpp:macro>               <cpp:value>hell</cpp:value></cpp:define>
<comment type="line">//#define endl                '\n'</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>eps</name></cpp:macro>                 <cpp:value>1e-10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pi</name></cpp:macro>                  <cpp:value>3.141592653589793238462643383279502884197</cpp:value></cpp:define>
<typedef>typedef <type><name><name>tree</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>,<argument><expr><name>null_type</name></expr></argument>,<argument><expr><name><name>less</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></expr></argument>,
				<argument><expr><name>rb_tree_tag</name></expr></argument>,<argument><expr><name>tree_order_statistics_node_update</name></expr></argument>&gt;</argument_list></name></type> <name>statisticsTree</name>;</typedef>
<function><type><name>ll</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><ternary><condition><expr><name>b</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>a</name></expr> </then><else>: <expr><call><name>gcd</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name> <operator>%</operator> <name>b</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return> }</block></function>
<function><type><name>ll</name></type> <name>lcm</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name>a</name> <operator>*</operator> <operator>(</operator><name>b</name> <operator>/</operator> <call><name>gcd</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return> }</block></function>
<function><type><name>ll</name></type> <name>power</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>y</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>p</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>ll</name></type> <name>res</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>x</name><operator>=</operator><name>x</name><operator>%</operator><name>p</name></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>y</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition>
	<block>{
		<if>if<condition>(<expr><name>y</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>res</name><operator>=</operator><operator>(</operator><operator>(</operator><name>res</name><operator>%</operator><name>p</name><operator>)</operator><operator>*</operator><operator>(</operator><name>x</name><operator>%</operator><name>p</name><operator>)</operator><operator>)</operator><operator>%</operator><name>p</name></expr>;</expr_stmt></block></then></if>
		<expr_stmt><expr><name>y</name><operator>=</operator><name>y</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>x</name><operator>=</operator><operator>(</operator><operator>(</operator><name>x</name><operator>%</operator><name>p</name><operator>)</operator><operator>*</operator><operator>(</operator><name>x</name><operator>%</operator><name>p</name><operator>)</operator><operator>)</operator><operator>%</operator><name>p</name></expr>;</expr_stmt>
	}</block></while>
	<return>return <expr><name>res</name></expr>;</return>
}</block></function>
<function><type><name>ll</name></type> <name>raichu</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>ll</name></type> <name>res</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>y</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition>
	<block>{
		<if>if<condition>(<expr><name>y</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>res</name><operator>=</operator><operator>(</operator><operator>(</operator><name>res</name><operator>)</operator><operator>*</operator><operator>(</operator><name>x</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block></then></if>
		<expr_stmt><expr><name>y</name><operator>=</operator><name>y</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>x</name><operator>=</operator><operator>(</operator><operator>(</operator><name>x</name><operator>)</operator><operator>*</operator><operator>(</operator><name>x</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
	}</block></while>
	<return>return <expr><name>res</name></expr>;</return>
}</block></function>
<function><type><name>bool</name></type> <name>isprime</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{
	<if>if<condition>(<expr><name>n</name><operator>&lt;</operator><literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then>
	<elseif>else <if>if<condition>(<expr><name>n</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if></elseif>
	<elseif>else <if>if<condition>(<expr><name>n</name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if></elseif>
	<else>else
	<block>{
		<decl_stmt><decl><type><name>ll</name></type> <name>z</name><init>=<expr><call><name>sqrt</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument>z-<literal type="number">1</literal></argument>)</argument_list></macro> <if>if<condition>(<expr><name>n</name><operator>%</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
		<return>return <expr><literal type="boolean">true</literal></expr>;</return>
	}</block></else></if>
}</block></function>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>A</name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>,<parameter><decl><type><name>vii</name> <modifier>&amp;</modifier></type><name>g</name></decl></parameter>,<parameter><decl><type><name>vii</name> <modifier>&amp;</modifier></type><name>C</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>cnt</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>childs</name></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>auto</name></type> <name>i</name><range>:<expr><name><name>g</name><index>[<expr><name>c</name></expr>]</index></name></expr></range></decl></init>)</control>
	<block>{
		<if>if<condition>(<expr><name>i</name><operator>!=</operator><name>p</name></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>
			<if>if<condition>(<expr><name>cnt</name><operator>&gt;</operator><literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
			<expr_stmt><expr><call><name><name>childs</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
	<if>if<condition>(<expr><name>cnt</name><operator>&gt;</operator><literal type="number">2</literal></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<if>if<condition>(<expr><name>c</name><operator>!=</operator><name>p</name> <operator>&amp;&amp;</operator> <name>cnt</name><operator>&gt;</operator><literal type="number">1</literal></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<for>for<control>(<init><decl><type><name>auto</name></type> <name>i</name><range>:<expr><name>childs</name></expr></range></decl></init>)</control>
	<block>{
		<expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>g</name></expr></argument>,<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
}</block></function>
<function><type><name>void</name></type> <name>dfs1</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>,<parameter><decl><type><name>vii</name> <modifier>&amp;</modifier></type><name>g</name></decl></parameter>)</parameter_list>
<block>{
	<expr_stmt><expr><call><name><name>A</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>auto</name></type> <name>i</name><range>:<expr><name><name>g</name><index>[<expr><name>c</name></expr>]</index></name></expr></range></decl></init>)</control>
	<block>{
		<if>if<condition>(<expr><name>i</name><operator>!=</operator><name>p</name></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><call><name>dfs1</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
}</block></function>
<function><type><name>int32_t</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<comment type="line">//freopen("B-large.in","r",stdin);</comment>
	<comment type="line">//freopen("out2.txt","w",stdout);</comment>
	<expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>tests</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>Tests</name></decl>;</decl_stmt>
	<comment type="line">//cin&gt;&gt;tests;</comment>
	<expr_stmt><expr><name>Tests</name><operator>=</operator><name>tests</name></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>tests</name><operator>--</operator></expr>)</condition>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>C</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><call><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
		<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">3</literal></argument>)</argument_list></macro>
		<block>{
			<macro><name>rep</name><argument_list>(<argument>j</argument>,<argument>n</argument>)</argument_list></macro>
			<block>{
				<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>C</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
			}</block>
		}</block>
		<decl_stmt><decl><type><name>vii</name></type> <name>g</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
		<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument>n-<literal type="number">1</literal></argument>)</argument_list></macro>
		<block>{
			<decl_stmt><decl><type><name>int</name></type> <name>u</name></decl>,<decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
			<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>u</name><operator>&gt;&gt;</operator><name>v</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>g</name><index>[<expr><operator>--</operator><name>u</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><operator>--</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>g</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block>
		<expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>g</name></expr></argument>,<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>st</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument>n</argument>)</argument_list></macro>
		<block>{
			<if>if<condition>(<expr><call><name>sz</name><argument_list>(<argument><expr><name><name>g</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>st</name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></then></if>
		}</block>
		<comment type="line">//cout&lt;&lt;st+1&lt;&lt;endl;</comment>
		<expr_stmt><expr><call><name>dfs1</name><argument_list>(<argument><expr><name>st</name></expr></argument>,<argument><expr><name>st</name></expr></argument>,<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>ll</name></type> <name><name>dp</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dp</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof <name>dp</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>ll</name></type> <name><name>prev</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>prev</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof <name>prev</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{
			<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><literal type="number">2</literal></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
			<block>{
				<for>for<control>(<init><decl><type><name>int</name></type> <name>k</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>k</name><operator>&lt;=</operator><literal type="number">2</literal></expr>;</condition><incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
				<block>{
					<if>if<condition>(<expr><name>j</name><operator>==</operator><name>k</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
					<comment type="line">//dp[i][j][k]</comment>
					<for>for<control>(<init><decl><type><name>int</name></type> <name>p</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>p</name><operator>&lt;=</operator><literal type="number">2</literal></expr>;</condition><incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
					<block>{
						<if>if<condition>(<expr><name>p</name><operator>!=</operator><name>j</name> <operator>&amp;&amp;</operator> <name>p</name><operator>!=</operator><name>k</name></expr>)</condition><then>
						<block>{
							<expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name><name>dp</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>p</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>+</operator><name><name>C</name><index>[<expr><name>p</name></expr>]</index><index>[<expr><name><name>A</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr></argument>,<argument><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<if>if<condition>(<expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name><operator>==</operator><name><name>dp</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>p</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>+</operator><name><name>C</name><index>[<expr><name>p</name></expr>]</index><index>[<expr><name><name>A</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr>)</condition><then>
							<block>{
								<expr_stmt><expr><name><name>prev</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name><operator>=</operator><name>p</name></expr>;</expr_stmt>
							}</block></then></if>
						}</block></then></if>
					}</block></for>
				}</block></for>
			}</block></for>
		}</block></for>
		<decl_stmt><decl><type><name>int</name></type> <name>bi</name></decl>,<decl><type ref="prev"/><name>bj</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ll</name></type> <name>ma</name><init>=<expr><name>LLONG_MAX</name></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">2</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{
			<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><literal type="number">2</literal></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
			<block>{
				<if>if<condition>(<expr><name>i</name><operator>!=</operator><name>j</name></expr>)</condition><then>
				<block>{
					<if>if<condition>(<expr><name><name>dp</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>&lt;</operator><name>ma</name></expr>)</condition><then>
					<block>{
						<expr_stmt><expr><name>ma</name><operator>=</operator><name><name>dp</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
						<expr_stmt><expr><name>bi</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
						<expr_stmt><expr><name>bj</name><operator>=</operator><name>j</name></expr>;</expr_stmt>
					}</block></then></if>
				}</block></then></if>
			}</block></for>
		}</block></for>
		<comment type="line">//cout&lt;&lt;bi&lt;&lt;" "&lt;&lt;bj&lt;&lt;endl;</comment>
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ma</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>ans</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>idx</name><init>=<expr><name>n</name></expr></init></decl>;</decl_stmt>
		<while>while<condition>(<expr><name>idx</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition>
		<block>{
			<expr_stmt><expr><name><name>ans</name><index>[<expr><name><name>A</name><index>[<expr><name>idx</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>=</operator><name><name>prev</name><index>[<expr><name>idx</name></expr>]</index><index>[<expr><name>bi</name></expr>]</index><index>[<expr><name>bj</name></expr>]</index></name></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>z</name><init>=<expr><name><name>ans</name><index>[<expr><name><name>A</name><index>[<expr><name>idx</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>bj</name><operator>=</operator><name>bi</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>bi</name><operator>=</operator><name>z</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>idx</name><operator>--</operator></expr>;</expr_stmt>
		}</block></while>
		<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument>n</argument>)</argument_list></macro> <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="string">" "</literal></expr>;</expr_stmt>
	}</block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
