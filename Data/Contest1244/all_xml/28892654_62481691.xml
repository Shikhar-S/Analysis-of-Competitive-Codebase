<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28892654_62481691.cpp"><comment type="line">//#pragma comment(linker, "/stack:200000000")</comment>
<comment type="line">//#pragma GCC optimize("Ofast")</comment>
<comment type="line">//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")</comment>
<comment type="line">//#pragma GCC optimize("unroll-loops")</comment>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;ext/pb_ds/assoc_container.hpp&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;ext/pb_ds/tree_policy.hpp&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>__gnu_pbds</name>;</namespace></using>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ull</name></cpp:macro> <cpp:value>unsigned long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ld</name></cpp:macro> <cpp:value>long double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;int,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pll</name></cpp:macro> <cpp:value>pair&lt;ll,ll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vi</name></cpp:macro> <cpp:value>vector&lt;int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vll</name></cpp:macro> <cpp:value>vector&lt;ll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vpll</name></cpp:macro> <cpp:value>vector&lt;pll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vpii</name></cpp:macro> <cpp:value>vector&lt;pii&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>eb</name></cpp:macro> <cpp:value>emplace_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mt</name></cpp:macro> <cpp:value>make_tuple</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fs</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sc</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nl</name></cpp:macro> <cpp:value>"\n"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>asche</name></cpp:macro> <cpp:value>cerr&lt;&lt;"Ekhane asche\n";</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pf</name></cpp:macro> <cpp:value>printf</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sf</name></cpp:macro> <cpp:value>scanf</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mem</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(a,x,sizeof(a))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SZ</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(int)v.size()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>v.begin(),v.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>one</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_popcount(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fout</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>fixed&lt;&lt;setprecision(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BeatMeScanf</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(false)</cpp:value></cpp:define>
<comment type="line">//int dx[]={1,0,-1,0,1,-1,-1,1};</comment>
<comment type="line">//int dy[]={0,1,0,-1,1,1,-1,-1};</comment>
<decl_stmt><decl><type><name>mt19937</name></type> <name>rnd</name><argument_list>(<argument><expr><call><name><name>chrono</name><operator>::</operator><name>steady_clock</name><operator>::</operator><name>now</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>time_since_epoch</name><argument_list>()</argument_list></call><operator>.</operator><call><name>count</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><name>args</name><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ string _s = #args; replace(_s.begin(), _s.end(), ',', ' '); stringstream _ss(_s); istream_iterator&lt;string&gt; _it(_ss); deb(_it, args); }</cpp:value></cpp:define>
<function><type><name>void</name></type> <name>deb</name><parameter_list>(<parameter><decl><type><name><name>istream_iterator</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>&gt;</argument_list></name></type> <name>it</name></decl></parameter>)</parameter_list> <block>{}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>, <parameter><type><name>typename</name><modifier>...</modifier></type> <name>Args</name></parameter>&gt;</parameter_list></template>
<type><name>void</name></type> <name>deb</name><parameter_list>(<parameter><decl><type><name><name>istream_iterator</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>&gt;</argument_list></name></type> <name>it</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>Args</name><modifier>...</modifier></type> <name>args</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <operator>*</operator><name>it</name> <operator>&lt;&lt;</operator> <literal type="string">" = "</literal> <operator>&lt;&lt;</operator> <name>a</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>deb</name><argument_list>(<argument><expr><operator>++</operator><name>it</name></expr></argument>, <argument><expr><name>args</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<comment type="line">//template &lt;typename T&gt; using o_set = tree&lt;T, null_type, less&lt;T&gt;, rb_tree_tag, tree_order_statistics_node_update&gt;;</comment>
<namespace>namespace <name>IO</name>
<block>{
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>in</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>( { int a ; scanf("%d",&amp;a); a; } )</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>( { ll a ; scanf("%lld",&amp;a); a; } )</cpp:value></cpp:define>
       <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ULL</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>( { ull a ; scanf("%llu",&amp;a); a; } )</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DD</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>({ double a; scanf("%lf", &amp;a); a;})</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>( { char a ; scanf("%c",&amp;a); a; } )</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pf1</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>printf("%d\n",a)</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pf1ll</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>printf("%lld\n",a)</cpp:value></cpp:define>
}</block></namespace>
<using>using <namespace>namespace <name>IO</name>;</namespace></using>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mod</name><init>=<expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name><init>=<expr><literal type="number">3e5</literal><operator>+</operator><literal type="number">9</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>eps</name><init>=<expr><literal type="number">1e-9</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>PI</name><init>=<expr><call><name>acos</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<function><type><name>ll</name></type> <name>qpow</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>k</name></decl></parameter>)</parameter_list> <block>{<decl_stmt><decl><type><name>ll</name></type> <name>ans</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt><expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>k</name><operator>&gt;=</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name>n</name><operator>%=</operator><name>mod</name></expr>;</expr_stmt><while>while<condition>(<expr><name>k</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><block>{<if>if<condition>(<expr><name>k</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ans</name><operator>=</operator><operator>(</operator><name>ans</name><operator>*</operator><name>n</name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt></block></then></if><expr_stmt><expr><name>n</name><operator>=</operator><operator>(</operator><name>n</name><operator>*</operator><name>n</name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt><expr_stmt><expr><name>k</name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr>;</expr_stmt>}</block></while><return>return <expr><name>ans</name><operator>%</operator><name>mod</name></expr>;</return>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>RANDOM</name> <init>= <expr><call><name><name>chrono</name><operator>::</operator><name>high_resolution_clock</name><operator>::</operator><name>now</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>time_since_epoch</name><argument_list>()</argument_list></call><operator>.</operator><call><name>count</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<struct>struct <name>chash</name> <block>{<public type="default">
    <function type="operator"><type><name>int</name></type> <name>operator<name>()</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{ <return>return <expr><name>x</name> <operator>^</operator> <name>RANDOM</name></expr>;</return> }</block></function>
</public>}</block>;</struct>
<decl_stmt><decl><type><name><name>gp_hash_table</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>chash</name></expr></argument>&gt;</argument_list></name></type> <name>cnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name>se</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int32_t</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name><init>=<expr><call><name>in</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>k</name><init>=<expr><call><name>LL</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><call><name>in</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>se</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cnt</name><index>[<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
    }</block></for>
    <while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition><block>{
        <if>if<condition>(<expr><call><name>SZ</name><argument_list>(<argument><expr><name>se</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
            <return>return <expr><name>cout</name><operator>&lt;&lt;</operator><literal type="number">0</literal><operator>&lt;&lt;</operator><name>nl</name></expr><operator>,</operator><expr><literal type="number">0</literal></expr>;</return>
        }</block></then>
        <else>else<block>{
            <decl_stmt><decl><type><name>int</name></type> <name>mn</name><init>=<expr><operator>*</operator><call><name><name>se</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>mx</name><init>=<expr><operator>*</operator><operator>(</operator><operator>--</operator><call><name><name>se</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name><name>cnt</name><index>[<expr><name>mn</name></expr>]</index></name><operator>&lt;=</operator><name><name>cnt</name><index>[<expr><name>mx</name></expr>]</index></name></expr>)</condition><then><block>{
                <decl_stmt><decl><type><name>auto</name></type> <name>it</name><init>=<expr><call><name><name>se</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><operator>++</operator><name>it</name></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>r</name><init>=<expr><operator>*</operator><name>it</name></expr></init></decl>;</decl_stmt>
                <if>if<condition>(<expr><name>k</name><operator>&gt;=</operator><literal type="number">1LL</literal><operator>*</operator><operator>(</operator><name>r</name><operator>-</operator><name>mn</name><operator>)</operator><operator>*</operator><name><name>cnt</name><index>[<expr><name>mn</name></expr>]</index></name></expr>)</condition><then><block>{
                    <expr_stmt><expr><name>k</name><operator>-=</operator><literal type="number">1LL</literal><operator>*</operator><operator>(</operator><name>r</name><operator>-</operator><name>mn</name><operator>)</operator><operator>*</operator><name><name>cnt</name><index>[<expr><name>mn</name></expr>]</index></name></expr>;</expr_stmt>
                }</block></then>
                <else>else<block>{
                    <expr_stmt><expr><name>mn</name><operator>+=</operator><name>k</name><operator>/</operator><name><name>cnt</name><index>[<expr><name>mn</name></expr>]</index></name></expr>;</expr_stmt>
                    <return>return <expr><name>cout</name><operator>&lt;&lt;</operator><name>mx</name><operator>-</operator><name>mn</name><operator>&lt;&lt;</operator><name>nl</name></expr><operator>,</operator><expr><literal type="number">0</literal></expr>;</return>
                }</block></else></if>
                <expr_stmt><expr><call><name><name>se</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>mn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>cnt</name><index>[<expr><name>r</name></expr>]</index></name><operator>+=</operator><name><name>cnt</name><index>[<expr><name>mn</name></expr>]</index></name></expr>;</expr_stmt>
            }</block></then>
            <else>else<block>{
                <decl_stmt><decl><type><name>auto</name></type> <name>it</name><init>=<expr><call><name><name>se</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><operator>--</operator><name>it</name></expr>;</expr_stmt>
                <expr_stmt><expr><operator>--</operator><name>it</name></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>l</name><init>=<expr><operator>*</operator><name>it</name></expr></init></decl>;</decl_stmt>
                <if>if<condition>(<expr><name>k</name><operator>&gt;=</operator><literal type="number">1LL</literal><operator>*</operator><operator>(</operator><name>mx</name><operator>-</operator><name>l</name><operator>)</operator><operator>*</operator><name><name>cnt</name><index>[<expr><name>mx</name></expr>]</index></name></expr>)</condition><then><block>{
                    <expr_stmt><expr><name>k</name><operator>-=</operator><literal type="number">1LL</literal><operator>*</operator><operator>(</operator><name>mx</name><operator>-</operator><name>l</name><operator>)</operator><operator>*</operator><name><name>cnt</name><index>[<expr><name>mx</name></expr>]</index></name></expr>;</expr_stmt>
                }</block></then>
                <else>else<block>{
                    <expr_stmt><expr><name>mx</name><operator>-=</operator><name>k</name><operator>/</operator><name><name>cnt</name><index>[<expr><name>mx</name></expr>]</index></name></expr>;</expr_stmt>
                    <return>return <expr><name>cout</name><operator>&lt;&lt;</operator><name>mx</name><operator>-</operator><name>mn</name><operator>&lt;&lt;</operator><name>nl</name></expr><operator>,</operator><expr><literal type="number">0</literal></expr>;</return>
                }</block></else></if>
                <expr_stmt><expr><call><name><name>se</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>mx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>cnt</name><index>[<expr><name>l</name></expr>]</index></name><operator>+=</operator><name><name>cnt</name><index>[<expr><name>mx</name></expr>]</index></name></expr>;</expr_stmt>
            }</block></else></if>
        }</block></else></if>
    }</block></while>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
<comment type="line" format="doxygen">///Before submit=&gt;</comment>
<comment type="line" format="doxygen">///    *check for integer overflow,array bounds</comment>
<comment type="line" format="doxygen">///    *check for n=1</comment>
</unit>
