<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28934034_62480223.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ld</name></cpp:macro> <cpp:value>long double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>boost</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;int,int&gt;</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name><name>c</name><index>[<expr><literal type="number">100005</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name><name>visit</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>poczatek</name></decl>, <decl><type ref="prev"/><name><name>color</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>g</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>ord</name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><name><name>visit</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ord</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>auto</name></type> <name>u</name> <range>: <expr><name><name>g</name><index>[<expr><name>v</name></expr>]</index></name></expr></range></decl></init>)</control>
    <block>{
        <if>if<condition>(<expr><operator>!</operator><name><name>visit</name><index>[<expr><name>u</name></expr>]</index></name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></for>
}</block></function>
<decl_stmt><decl><type><name>int</name></type> <name><name>dp</name><index>[<expr><literal type="number">100005</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int32_t</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <comment type="line">//srand(chrono::steady_clock::now().time_since_epoch().count());</comment>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>c</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt></block></for></block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name></expr><operator>,</operator>
            <expr><name><name>g</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
            <expr><name><name>g</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <if>if<condition>(<expr><name><name>g</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        }</block></then></if>
        <if>if<condition>(<expr><name><name>g</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>poczatek</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></for>
    <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>poczatek</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">//cout &lt;&lt; ord.size() &lt;&lt; endl;</comment>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <for>for<control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control>
                <block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>z</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>z</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>z</name><operator>++</operator></expr></incr>)</control>
                <block>{
                    <if>if<condition>(<expr><name>x</name> <operator>==</operator> <name>y</name> <operator>||</operator> <name>x</name> <operator>==</operator> <name>z</name> <operator>||</operator> <name>y</name> <operator>==</operator> <name>z</name></expr>)</condition><then>
                        <block type="pseudo"><continue>continue;</continue></block></then></if>
                    <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>z</name></expr>]</index></name> <operator>=</operator> <name><name>dp</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>z</name></expr>]</index><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name> <operator>+</operator> <name><name>c</name><index>[<expr><name><name>ord</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>]</index><index>[<expr><name>z</name></expr>]</index></name></expr>;</expr_stmt>
                }</block></for></block></for></block></for>
    }</block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">1e18</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>z</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>z</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>z</name><operator>++</operator></expr></incr>)</control>
            <block>{
                <if>if<condition>(<expr><name>x</name> <operator>==</operator> <name>y</name> <operator>||</operator> <name>x</name> <operator>==</operator> <name>z</name> <operator>||</operator> <name>y</name> <operator>==</operator> <name>z</name></expr>)</condition><then>
                    <block type="pseudo"><continue>continue;</continue></block></then></if>
                <if>if<condition>(<expr><name>res</name> <operator>&gt;</operator> <name><name>dp</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>z</name></expr>]</index></name></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name>res</name> <operator>=</operator> <name><name>dp</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>z</name></expr>]</index></name></expr>;</expr_stmt></block></then></if>
            }</block></for></block></for></block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>z</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>z</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>z</name><operator>++</operator></expr></incr>)</control>
            <block>{
                <if>if<condition>(<expr><name>x</name> <operator>==</operator> <name>y</name> <operator>||</operator> <name>x</name> <operator>==</operator> <name>z</name> <operator>||</operator> <name>y</name> <operator>==</operator> <name>z</name></expr>)</condition><then>
                    <block type="pseudo"><continue>continue;</continue></block></then></if>
                <if>if<condition>(<expr><name>res</name> <operator>==</operator> <name><name>dp</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>z</name></expr>]</index></name></expr>)</condition><then>
                <block>{
                    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>n</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
                    <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><name><name>ord</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
                        <if>if<condition>(<expr><name>i</name> <operator>%</operator> <literal type="number">3</literal> <operator>==</operator> <name>n</name> <operator>%</operator> <literal type="number">3</literal></expr>)</condition><then>
                            <block type="pseudo"><expr_stmt><expr><name><name>color</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <name>z</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then>
                        <elseif>else <if>if<condition>(<expr><name>i</name> <operator>%</operator> <literal type="number">3</literal> <operator>==</operator> <operator>(</operator><operator>(</operator><name>n</name> <operator>%</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>%</operator> <literal type="number">3</literal></expr>)</condition><then>
                        <block>{
                            <expr_stmt><expr><name><name>color</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <name>y</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                        }</block></then></if></elseif>
                        <else>else
                            <block type="pseudo"><expr_stmt><expr><name><name>color</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
                    }</block></for>
                }</block></then></if>
            }</block></for></block></for></block></for>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>res</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type>  <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>color</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt></block></for>
}</block></function>
</unit>
