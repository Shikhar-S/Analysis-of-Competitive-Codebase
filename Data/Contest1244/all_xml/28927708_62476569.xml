<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28927708_62476569.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name> <modifier>*</modifier></type><name>graph</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <comment type="block">/* Enter your code here. Read input from STDIN. Print output to STDOUT */</comment>
<expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>p</name></decl>,<decl><type ref="prev"/><name>w</name></decl>,<decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>p</name><operator>&gt;&gt;</operator><name>w</name><operator>&gt;&gt;</operator><name>d</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>found</name><init>=<expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>sum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<for>for<control>(<init><decl><type><name>long</name> <name>long</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">100005</literal></expr> ;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
    <if>if<condition>(<expr><operator>(</operator><name>p</name><operator>-</operator><name>i</name><operator>*</operator><name>d</name><operator>)</operator><operator>%</operator><name>w</name><operator>==</operator><literal type="number">0</literal><operator>&amp;&amp;</operator><name>p</name><operator>&gt;=</operator><name>i</name><operator>*</operator><name>d</name></expr>)</condition><then><block>{
        <expr_stmt><expr><name>found</name><operator>=</operator><literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>sum</name><operator>=</operator><name>i</name><operator>+</operator><operator>(</operator><name>p</name><operator>-</operator><name>i</name><operator>*</operator><name>d</name><operator>)</operator><operator>/</operator><name>w</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>x</name><operator>=</operator><operator>(</operator><name>p</name><operator>-</operator><name>i</name><operator>*</operator><name>d</name><operator>)</operator><operator>/</operator><name>w</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>y</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
        <break>break;</break>
    }</block></then></if>
}</block></for>
<if>if<condition>(<expr><operator>!</operator><name>found</name></expr>)</condition><then>
<block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then>
<else>else <block>{
    <if>if<condition>(<expr><name>sum</name><operator>&lt;=</operator><name>n</name></expr>)</condition><then>
    <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>x</name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name>y</name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name>n</name><operator>-</operator><name>sum</name></expr>;</expr_stmt></block></then>
    <else>else 
    <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
}</block></else></if>

}</block></function></unit>
