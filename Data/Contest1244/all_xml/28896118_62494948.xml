<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28896118_62494948.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>k</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=k;i&lt;n;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD</name></cpp:macro> <cpp:value>1000000007LL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROD</name></cpp:macro> <cpp:value>100000000ll</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INF</name></cpp:macro> <cpp:value>123456789123456ll</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(a&gt;b?b:a)</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>  <cpp:macro><name>piii</name></cpp:macro> <cpp:value>pair&lt;pair&lt;ll,ll&gt;,pair&lt;ll,ll&gt;&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;ll,ll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<decl_stmt><decl><type><name><name>map</name> <argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pii</name></type> <name>p1</name></decl>,<decl><type ref="prev"/><name>p2</name></decl>,<decl><type ref="prev"/><name>p3</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld %lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro>
	<block>{
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>m</name><index>[<expr><name>x</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
	}</block>
	<while>while<condition>(<expr><name>k</name></expr>)</condition>
	<block>{
		<expr_stmt><expr><name>p1</name><operator>=</operator><operator>*</operator><call><name><name>m</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr><operator>,</operator><expr><name>p2</name><operator>=</operator><operator>*</operator><call><name><name>m</name><operator>.</operator><name>rbegin</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<comment type="line">//cout&lt;&lt;p1.fi&lt;&lt;" "&lt;&lt;p1.se&lt;&lt;" "&lt;&lt;p2.fi&lt;&lt;" "&lt;&lt;p2.se&lt;&lt;" "&lt;&lt;k&lt;&lt;"\n";		</comment>
		<if>if<condition>(<expr><name><name>p1</name><operator>.</operator><name>fi</name></name><operator>==</operator><name><name>p2</name><operator>.</operator><name>fi</name></name></expr>)</condition><then>
		<block type="pseudo"><break>break;</break></block></then></if>
		<if>if<condition>(<expr><name><name>p1</name><operator>.</operator><name>se</name></name><operator>&lt;</operator><name><name>p2</name><operator>.</operator><name>se</name></name></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><call><name><name>m</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><name>fi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>p3</name><operator>=</operator><operator>*</operator><call><name><name>m</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<if>if<condition>(<expr><name><name>p1</name><operator>.</operator><name>se</name></name><operator>*</operator><operator>(</operator><name><name>p3</name><operator>.</operator><name>fi</name></name><operator>-</operator><name><name>p1</name><operator>.</operator><name>fi</name></name><operator>)</operator><operator>&lt;=</operator><name>k</name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name>k</name><operator>-=</operator><name><name>p1</name><operator>.</operator><name>se</name></name><operator>*</operator><operator>(</operator><name><name>p3</name><operator>.</operator><name>fi</name></name><operator>-</operator><name><name>p1</name><operator>.</operator><name>fi</name></name><operator>)</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>m</name><index>[<expr><name><name>p3</name><operator>.</operator><name>fi</name></name></expr>]</index></name><operator>+=</operator><name><name>p1</name><operator>.</operator><name>se</name></name></expr>;</expr_stmt>
			}</block></then>
			<else>else
			<block>{
				<expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name><name>p1</name><operator>.</operator><name>fi</name></name><operator>+</operator><name>k</name><operator>/</operator><name><name>p1</name><operator>.</operator><name>se</name></name></expr></argument>,<argument><expr><name><name>p1</name><operator>.</operator><name>se</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			}</block></else></if>
		}</block></then>
		<else>else
		<block>{
			<expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><call><name><name>m</name><operator>.</operator><name>rbegin</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><name>fi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>p3</name><operator>=</operator><operator>*</operator><call><name><name>m</name><operator>.</operator><name>rbegin</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<comment type="line">//cout&lt;&lt;p3.fi&lt;&lt;" "&lt;&lt;p3.se&lt;&lt;"\n";</comment>
			<if>if<condition>(<expr><name><name>p2</name><operator>.</operator><name>se</name></name><operator>*</operator><operator>(</operator><name><name>p2</name><operator>.</operator><name>fi</name></name><operator>-</operator><name><name>p3</name><operator>.</operator><name>fi</name></name><operator>)</operator><operator>&lt;=</operator><name>k</name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name>k</name><operator>-=</operator><name><name>p2</name><operator>.</operator><name>se</name></name><operator>*</operator><operator>(</operator><name><name>p2</name><operator>.</operator><name>fi</name></name><operator>-</operator><name><name>p3</name><operator>.</operator><name>fi</name></name><operator>)</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>m</name><index>[<expr><name><name>p3</name><operator>.</operator><name>fi</name></name></expr>]</index></name><operator>+=</operator><name><name>p2</name><operator>.</operator><name>se</name></name></expr>;</expr_stmt>
				<comment type="line">//cout&lt;&lt;"SF"&lt;&lt;p2.fi&lt;&lt;" ";</comment>
			}</block></then>	
			<else>else
			<block>{
				<comment type="line">//cout&lt;&lt;k&lt;&lt;" "&lt;&lt;p3.fi&lt;&lt;" "&lt;&lt;p3.fi-k/p2.se&lt;&lt;"GHJ\n";</comment>
				<expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name><name>p2</name><operator>.</operator><name>fi</name></name><operator>-</operator><name>k</name><operator>/</operator><name><name>p2</name><operator>.</operator><name>se</name></name></expr></argument>,<argument><expr><name><name>p2</name><operator>.</operator><name>se</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			}</block></else></if>
			<comment type="line">//cout&lt;&lt;p3.fi&lt;&lt;" "&lt;&lt;p3.se&lt;&lt;"\n";</comment>
		}</block></else></if>
		<comment type="line">//cout&lt;&lt;m[2]&lt;&lt;"\n";</comment>
	}</block></while>
	<expr_stmt><expr><name>p1</name><operator>=</operator><operator>*</operator><call><name><name>m</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>p2</name><operator>=</operator><operator>*</operator><call><name><name>m</name><operator>.</operator><name>rbegin</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<comment type="line">//cout&lt;&lt;p1.fi&lt;&lt;" "&lt;&lt;p1.se&lt;&lt;" "&lt;&lt;p2.fi&lt;&lt;" "&lt;&lt;p2.se&lt;&lt;" "&lt;&lt;k&lt;&lt;"\n";</comment>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>,<argument><expr><name><name>p2</name><operator>.</operator><name>fi</name></name><operator>-</operator><name><name>p1</name><operator>.</operator><name>fi</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function></unit>
