<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28908440_62489969.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><cpp:literal>"O3"</cpp:literal><name>)</name></cpp:pragma>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_debug</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dout</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout &lt;&lt; #i &lt;&lt; ' ' &lt;&lt; i &lt;&lt; ' '</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dout</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro></cpp:define> <comment type="line">//</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<using>using <name>ll</name> <init>= <type><name>long</name> <name>long</name></type></init>;</using>
<using>using <name>ull</name> <init>= <type><name>unsigned</name> <name>long</name> <name>long</name></type></init>;</using>
<using>using <name>ul</name> <init>= <type><name>unsigned</name></type></init>;</using>
<using>using <name>db</name> <init>= <type><name>double</name></type></init>;</using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name> <init>= <expr><literal type="number">100008</literal></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>ll</cpp:value></cpp:define>
<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name><name>a</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>cnt</name></decl>;</decl_stmt>
<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><operator>++</operator><name><name>cnt</name><index>[<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block></for>
	<for>for<control>(<init>;</init><condition><expr><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition><incr/>)</control><block>{
		<if>if<condition>(<expr><call><name><name>cnt</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="number">0</literal> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr><operator>,</operator> <expr><literal type="number">0</literal></expr>;</return></block></then></if>
		<decl_stmt><decl><type><name>auto</name></type> <name>f</name> <init>= <expr><call><name><name>cnt</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>e</name> <init>= <expr><call><name>prev</name><argument_list>(<argument><expr><call><name><name>cnt</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ll</name></type> <name>cost</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>k</name> <operator>&lt;</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>second</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>)</condition><then><block type="pseudo"><break>break;</break></block></then></if>
		<if>if<condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>second</name></name> <operator>&lt;</operator> <name><name>e</name><operator>-&gt;</operator><name>second</name></name></expr>)</condition><then><block>{
			<expr_stmt><expr><name>cost</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>k</name> <operator>/</operator> <name><name>f</name><operator>-&gt;</operator><name>second</name></name></expr></argument>, <argument><expr><call><name>next</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>first</name> <operator>-</operator> <name><name>f</name><operator>-&gt;</operator><name>first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>k</name> <operator>-=</operator> <name>cost</name> <operator>*</operator> <name><name>f</name><operator>-&gt;</operator><name>second</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>cnt</name><index>[<expr><name>cost</name> <operator>+</operator> <name><name>f</name><operator>-&gt;</operator><name>first</name></name></expr>]</index></name> <operator>+=</operator> <name><name>f</name><operator>-&gt;</operator><name>second</name></name></expr>;</expr_stmt>
			<comment type="line">// next(f)-&gt;second += f-&gt;second;</comment>
			<expr_stmt><expr><call><name><name>cnt</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<else>else<block>{
			<expr_stmt><expr><name>cost</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>k</name> <operator>/</operator> <name><name>e</name><operator>-&gt;</operator><name>second</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>first</name></name> <operator>-</operator> <call><name>prev</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>k</name> <operator>-=</operator> <name>cost</name> <operator>*</operator> <name><name>e</name><operator>-&gt;</operator><name>second</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>cnt</name><index>[<expr><name><name>e</name><operator>-&gt;</operator><name>first</name></name> <operator>-</operator> <name>cost</name></expr>]</index></name> <operator>+=</operator> <name><name>e</name><operator>-&gt;</operator><name>second</name></name></expr>;</expr_stmt>
			<comment type="line">// prev(e)-&gt;second += e-&gt;second;</comment>
			<expr_stmt><expr><call><name><name>cnt</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
	}</block></for>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name><name>cnt</name><operator>.</operator><name>rbegin</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>first</name> <operator>-</operator> <call><name><name>cnt</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>first</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
}</block></function></unit>
