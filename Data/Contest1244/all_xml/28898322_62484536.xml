<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28898322_62484536.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>maxn</name></cpp:macro> <cpp:value>100005</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>inf</name><init>=<expr><operator>(</operator><name>ll</name><operator>)</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><name>ll</name><operator>)</operator><literal type="number">60</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>head</name><index>[<expr><name>maxn</name></expr>]</index></name><init>=<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>,<decl><type ref="prev"/><name>tail</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>n</name></decl>,<decl><type ref="prev"/><name><name>degr</name><index>[<expr><name>maxn</name></expr>]</index></name><init>=<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>,<decl><type ref="prev"/><name><name>c</name><index>[<expr><name>maxn</name></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name>u</name></decl>,<decl><type ref="prev"/><name>v</name></decl>,<decl><type ref="prev"/><name>w</name></decl>,<decl><type ref="prev"/><name><name>col</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>rnk</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>ref</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name>dfn</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>flag</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>ans</name><init>=<expr><name>inf</name></expr></init></decl>;</decl_stmt>
<struct>struct <name>edge</name> <block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>v</name></decl>,<decl><type ref="prev"/><name>next</name></decl>;</decl_stmt>
</public>}</block><decl><name><name>edges</name><index>[<expr><name>maxn</name><operator>&lt;&lt;</operator><literal type="number">1</literal></expr>]</index></name></decl>;</struct>
<function><type><name>void</name></type> <name>add_edge</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list><block>{
	<expr_stmt><expr><name><name>edges</name><index>[<expr><operator>++</operator><name>tail</name></expr>]</index></name><operator>.</operator><name>v</name><operator>=</operator><name>v</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>edges</name><index>[<expr><name>tail</name></expr>]</index></name><operator>.</operator><name>next</name><operator>=</operator><name><name>head</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>head</name><index>[<expr><name>u</name></expr>]</index></name><operator>=</operator><name>tail</name></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>fa</name><init>=<expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list><block>{
	<expr_stmt><expr><name><name>rnk</name><index>[<expr><name>u</name></expr>]</index></name><operator>=</operator><operator>++</operator><name>dfn</name></expr>;</expr_stmt><expr_stmt><expr><name><name>ref</name><index>[<expr><name>dfn</name></expr>]</index></name><operator>=</operator><name>u</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name><name>head</name><index>[<expr><name>u</name></expr>]</index></name></expr></init></decl>;</init><condition><expr><name>i</name></expr>;</condition><incr><expr><name>i</name><operator>=</operator><name><name>edges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>next</name></expr></incr>)</control><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>v</name><init>=<expr><name><name>edges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v</name></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>v</name><operator>==</operator><name>fa</name></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
		<expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>v</name></expr></argument>,<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
}</block></function>

<function><type><name>void</name></type> <name>dfs1</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>upd</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>tmp</name><init>=<expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list><block>{
	<if>if <condition>(<expr><name>flag</name></expr>)</condition><then><block type="pseudo"><return>return ;</return></block></then></if>
	<if>if <condition>(<expr><name>p</name><operator>==</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr>)</condition><then><block>{
		<if>if <condition>(<expr><operator>!</operator><name>upd</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>ans</name><operator>=</operator><call><name><name>std</name><operator>::</operator><name>min</name></name><argument_list>(<argument><expr><name>ans</name></expr></argument>,<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
		<elseif>else 
			<if>if <condition>(<expr><name>tmp</name><operator>==</operator><name>ans</name></expr>)</condition><then><block>{<expr_stmt><expr><name>flag</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt><for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d "</literal></expr></argument>,<argument><expr><name><name>col</name><index>[<expr><name><name>rnk</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for><return>return;</return>}</block></then></if></elseif></if>
		<return>return;</return>
	}</block></then></if><if>if <condition>(<expr><name>p</name><operator>&gt;</operator><literal type="number">2</literal></expr>)</condition><then><block>{
		<expr_stmt><expr><name><name>col</name><index>[<expr><name>p</name></expr>]</index></name><operator>=</operator><literal type="number">6</literal><operator>-</operator><name><name>col</name><index>[<expr><name>p</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>col</name><index>[<expr><name>p</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>dfs1</name><argument_list>(<argument><expr><name>p</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>upd</name></expr></argument>,<argument><expr><name>tmp</name><operator>+</operator><name><name>c</name><index>[<expr><name><name>ref</name><index>[<expr><name>p</name></expr>]</index></name></expr>]</index><index>[<expr><name><name>col</name><index>[<expr><name>p</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then><else>else <block>{
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">3</literal></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
			<expr_stmt><expr><name><name>col</name><index>[<expr><name>p</name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt>
			<if>if <condition>(<expr><name>i</name><operator>!=</operator><name><name>col</name><index>[<expr><name>p</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>&amp;&amp;</operator><name>i</name><operator>!=</operator><name><name>col</name><index>[<expr><name>p</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>dfs1</name><argument_list>(<argument><expr><name>p</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>upd</name></expr></argument>,<argument><expr><name>tmp</name><operator>+</operator><name><name>c</name><index>[<expr><name><name>ref</name><index>[<expr><name>p</name></expr>]</index></name></expr>]</index><index>[<expr><name><name>col</name><index>[<expr><name>p</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
		}</block></for>
	}</block></else></if>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>int</name></type> <name>min</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">3</literal></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>c</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>u</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>degr</name><index>[<expr><name>u</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt><expr_stmt><expr><name><name>degr</name><index>[<expr><name>v</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>add_edge</name><argument_list>(<argument><expr><name>u</name></expr></argument>,<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>add_edge</name><argument_list>(<argument><expr><name>v</name></expr></argument>,<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for><for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
		<if>if <condition>(<expr><name><name>degr</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;</operator><name><name>degr</name><index>[<expr><name>min</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>min</name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></then></if>
		<if>if <condition>(<expr><name><name>degr</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;</operator><literal type="number">2</literal></expr>)</condition><then><block>{<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><literal type="number">0</literal></expr>;</return>}</block></then></if>
	}</block></for><expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>min</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>dfs1</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt><expr_stmt><expr><call><name>dfs1</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>


</unit>
