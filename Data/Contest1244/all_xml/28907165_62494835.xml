<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28907165_62494835.cpp"><cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><cpp:literal>"Ofast,no-stack-protector,unroll-loops,fast-math"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>target</name><name>(</name><cpp:literal>"sse,sse2,sse3,ssse3,sse4.1,sse4.2,avx,avx2,popcnt,tune=native"</cpp:literal><name>)</name></cpp:pragma>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bits/stdc++.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mem</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset((x), 0, sizeof((x)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>il</name></cpp:macro> <cpp:value>__attribute__((always_inline))</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ull</name>;</typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__cplusplus</name> <operator>&gt;</operator> <literal type="number">201403L</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>r</name></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>r</name></cpp:macro> <cpp:value>register</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ri</name></cpp:macro> <cpp:value>r int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rl</name></cpp:macro> <cpp:value>r ll</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>c</name></cpp:macro> <cpp:value>const</cpp:value></cpp:define>
<namespace>namespace <name>_c</name>
<block>{
<decl_stmt><decl><type><name>c</name> <name>double</name></type> <name>pi</name> <init>= <expr><call><name>acos</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">// PI</comment>
<namespace>namespace <name>min</name>
<block>{
<decl_stmt><decl><type><name>c</name> <name>int</name></type> <name>i8</name> <init>= <expr><operator>-</operator><literal type="number">128</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>c</name> <name>int</name></type> <name>i16</name> <init>= <expr><operator>-</operator><literal type="number">32768</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>c</name> <name>int</name></type> <name>i</name> <init>= <expr><operator>-</operator><literal type="number">2147483647</literal> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>c</name> <name>ll</name></type> <name>l</name> <init>= <expr><operator>-</operator><literal type="number">9223372036854775807LL</literal> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
}</block></namespace> <comment type="line">// namespace min</comment>
<namespace>namespace <name>max</name>
<block>{
<decl_stmt><decl><type><name>c</name> <name>int</name></type> <name>i8</name> <init>= <expr><literal type="number">127</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>c</name> <name>int</name></type> <name>i16</name> <init>= <expr><literal type="number">32767</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>c</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">2147483647</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>c</name> <name>ll</name></type> <name>l</name> <init>= <expr><literal type="number">9223372036854775807LL</literal></expr></init></decl>;</decl_stmt>
}</block></namespace> <comment type="line">// namespace max</comment>
}</block></namespace> <comment type="line">// namespace _c</comment>
<namespace>namespace <name>_f</name>
<block>{
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <comment type="line">// return gcd</comment>
<specifier>inline</specifier> <type><name>c</name> <name>T</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{
    <while>while <condition>(<expr><name>n</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{
        <decl_stmt><decl><type><name>T</name></type> <name>t</name> <init>= <expr><name>m</name> <operator>%</operator> <name>n</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>m</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>n</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><name>m</name></expr>;</return>
}</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<specifier>inline</specifier> <type><name>c</name> <name>T</name></type> <name>max</name><parameter_list>(<parameter><decl><type><name>c</name> <name>T</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>c</name> <name>T</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{
    <return>return <expr><ternary><condition><expr><name>a</name> <operator>&gt;</operator> <name>b</name></expr> ?</condition><then> <expr><name>a</name></expr> </then><else>: <expr><name>b</name></expr></else></ternary></expr>;</return>
}</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<specifier>inline</specifier> <type><name>c</name> <name>T</name></type> <name>min</name><parameter_list>(<parameter><decl><type><name>c</name> <name>T</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>c</name> <name>T</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{
    <return>return <expr><ternary><condition><expr><name>a</name> <operator>&lt;</operator> <name>b</name></expr> ?</condition><then> <expr><name>a</name></expr> </then><else>: <expr><name>b</name></expr></else></ternary></expr>;</return>
}</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<specifier>inline</specifier> <type><name>c</name> <name>T</name></type> <name>abs</name><parameter_list>(<parameter><decl><type><name>c</name> <name>T</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{
    <return>return <expr><ternary><condition><expr><name>a</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>a</name></expr> </then><else>: <expr><operator>-</operator><name>a</name></expr></else></ternary></expr>;</return>
}</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<specifier>inline</specifier> <type><name>T</name></type> <name>pow</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>T</name></type> <name>res</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>b</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{
        <if>if <condition>(<expr><name>b</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>res</name> <operator>=</operator> <name>res</name> <operator>*</operator> <name>a</name></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name>a</name> <operator>=</operator> <name>a</name> <operator>*</operator> <name>a</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>b</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><name>res</name></expr>;</return>
}</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<specifier>inline</specifier> <type><name>T</name></type> <name>pow</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>c</name> <name>T</name> <modifier>&amp;</modifier></type><name>m</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><name>a</name> <operator>%=</operator> <name>m</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>T</name></type> <name>res</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>b</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{
        <if>if <condition>(<expr><name>b</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>res</name> <operator>=</operator> <name>res</name> <operator>*</operator> <name>a</name> <operator>%</operator> <name>m</name></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name>a</name> <operator>=</operator> <name>a</name> <operator>*</operator> <name>a</name> <operator>%</operator> <name>m</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>b</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><name>res</name> <operator>%</operator> <name>m</name></expr>;</return>
}</block></function>
}</block></namespace> <comment type="line">// namespace _f</comment>
<namespace>namespace <name>io</name>
<block>{
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<specifier>inline</specifier> <type><name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>t</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>r</name> <name>T</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>neg</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name>g</name> <init>= <expr><call><name>getchar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init>;</init> <condition><expr><operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>g</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr></incr>)</control>
    <block>{
        <if>if <condition>(<expr><name>g</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>neg</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        }</block></then></if>
    }</block></for>
    <for>for <control>(<init>;</init> <condition><expr><call><name>isdigit</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>g</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><name>res</name> <operator>=</operator> <name>res</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <name>g</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><name>t</name> <operator>=</operator> <name>res</name> <operator>*</operator> <name>neg</name></expr>;</expr_stmt>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__cplusplus</name> <operator>&gt;=</operator> <literal type="number">201103L</literal></expr></cpp:if>
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>, <parameter><type><name>typename</name><modifier>...</modifier></type> <name>Args</name></parameter>&gt;</parameter_list></template>
<type><name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>Args</name> <modifier>&amp;</modifier><modifier>...</modifier></type> <name>args</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>args</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><specifier>inline</specifier> <type><name>int</name></type> <name>in</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>ri</name></type> <name>T</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>T</name></expr>;</return>
}</block></function>
<function><specifier>inline</specifier> <type><name>ll</name></type> <name>in_ll</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>rl</name></type> <name>T</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>T</name></expr>;</return>
}</block></function>
}</block></namespace> <comment type="line">// namespace io</comment>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>c</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>r</name></cpp:undef>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAXN</name> <init>= <expr><literal type="number">1e6</literal> <operator>+</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>ans</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>io</name><operator>::</operator><name>read</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>n</name> <operator>*</operator> <operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;</operator> <name>k</name> <operator>*</operator> <literal type="number">2</literal></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else
    <block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>Max</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
        <block>{
            <expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr><operator>,</operator> <expr><name>Max</name> <operator>+=</operator> <call><name><name>_f</name><operator>::</operator><name>max</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name> <operator>-</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><name>k</name> <operator>=</operator> <call><name><name>_f</name><operator>::</operator><name>min</name></name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>Max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
        <block>{
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld "</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>k</name> <operator>-=</operator> <name>n</name> <operator>*</operator> <operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init><condition>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
        <block>{
            <decl_stmt><decl><type><name>ll</name></type> <name>p</name> <init>= <expr><name>n</name> <operator>-</operator> <name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>k</name> <operator>&lt;=</operator> <name>p</name> <operator>||</operator> <name>k</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>ans</name><index>[<expr><name>i</name> <operator>+</operator> <name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <for>for <control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
                <block>{
                    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld "</literal></expr></argument>, <argument><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>
                <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="number">0</literal></expr>;</return>
            }</block></then>
            <else>else
            <block>{
                <expr_stmt><expr><name>k</name> <operator>-=</operator> <name>p</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>ans</name><index>[<expr><name>n</name> <operator>-</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></for>
    }</block></else></if>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
