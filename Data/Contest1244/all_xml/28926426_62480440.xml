<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28926426_62480440.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>ans</name></decl>,<decl><type ref="prev"/><name>sum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>C</name><index>[<expr><literal type="number">234234</literal></expr>]</index><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>H</name><index>[<expr><literal type="number">234234</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>ansH</name><index>[<expr><literal type="number">234234</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>du</name><index>[<expr><literal type="number">234234</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>wz</name><index>[<expr><literal type="number">234234</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>rdt</name><index>[<expr><literal type="number">234234</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>rd</name><index>[<expr><literal type="number">234234</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>tot</name></decl>,<decl><type ref="prev"/><name>TOT</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>cnct</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{
  <expr_stmt><expr><name><name>rdt</name><index>[<expr><operator>++</operator><name>tot</name></expr>]</index></name><operator>=</operator><name><name>wz</name><index>[<expr><name>x</name></expr>]</index></name></expr><operator>,</operator><expr><name><name>wz</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><name>tot</name></expr><operator>,</operator><expr><name><name>rd</name><index>[<expr><name>tot</name></expr>]</index></name><operator>=</operator><name>y</name></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>from</name></decl></parameter>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>int</name></type> <name>t</name><init>=<expr><name><name>wz</name><index>[<expr><name>x</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>H</name><index>[<expr><operator>++</operator><name>TOT</name></expr>]</index></name><operator>=</operator><name>x</name></expr>;</expr_stmt>
  <while>while<condition>(<expr><name>t</name></expr>)</condition>
    <block>{
	  <if>if<condition>(<expr><name><name>rd</name><index>[<expr><name>t</name></expr>]</index></name><operator>!=</operator><name>from</name></expr>)</condition><then>
	    <block>{
		  <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name><name>rd</name><index>[<expr><name>t</name></expr>]</index></name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	  <expr_stmt><expr><name>t</name><operator>=</operator><name><name>rdt</name><index>[<expr><name>t</name></expr>]</index></name></expr>;</expr_stmt>
	}</block></while>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>t</name></decl>,<decl><type ref="prev"/><name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>,<decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name>ty</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><name>ans</name><operator>=</operator><literal type="number">1000000000000000000LL</literal></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>C</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>C</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>C</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
	  <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><call><name>cnct</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><call><name>cnct</name><argument_list>(<argument><expr><name>y</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>du</name><index>[<expr><name>x</name></expr>]</index></name><operator>++</operator></expr><operator>,</operator><expr><name><name>du</name><index>[<expr><name>y</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
	  <if>if<condition>(<expr><name><name>du</name><index>[<expr><name>x</name></expr>]</index></name><operator>&gt;</operator><literal type="number">2</literal> <operator>||</operator> <name><name>du</name><index>[<expr><name>y</name></expr>]</index></name><operator>&gt;</operator><literal type="number">2</literal></expr>)</condition><then> <block>{<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><literal type="number">0</literal></expr>;</return>}</block></then></if>
	}</block></for>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
	  <if>if<condition>(<expr><name><name>du</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block>{<expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><break>break;</break>}</block></then></if> 
	}</block></for> 
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block type="pseudo"><for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>j</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
      <block>{
      	<if>if<condition>(<expr><name>i</name><operator>==</operator><name>j</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
	    <expr_stmt><expr><name>sum</name><operator>=</operator><name><name>C</name><index>[<expr><name><name>H</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>C</name><index>[<expr><name><name>H</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
	    <expr_stmt><expr><name>t</name><operator>=</operator><operator>(</operator><literal type="number">2</literal><operator>*</operator><name>j</name><operator>-</operator><name>i</name><operator>+</operator><literal type="number">3</literal><operator>)</operator><operator>%</operator><literal type="number">3</literal></expr>;</expr_stmt>
	    <for>for<control>(<init><expr><name>k</name><operator>=</operator><literal type="number">3</literal></expr>;</init><condition><expr><name>k</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
	      <block>{
		    <expr_stmt><expr><name>sum</name><operator>+=</operator><name><name>C</name><index>[<expr><name><name>H</name><index>[<expr><name>k</name></expr>]</index></name></expr>]</index><index>[<expr><name>t</name></expr>]</index></name></expr>;</expr_stmt>
		    <expr_stmt><expr><name>t</name><operator>=</operator><operator>(</operator><name>t</name><operator>+</operator><name>j</name><operator>-</operator><name>i</name><operator>+</operator><literal type="number">3</literal><operator>)</operator><operator>%</operator><literal type="number">3</literal></expr>;</expr_stmt>
		  }</block></for>
		<if>if<condition>(<expr><name>sum</name><operator>&lt;</operator><name>ans</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ans</name><operator>=</operator><name>sum</name></expr><operator>,</operator><expr><name>ty</name><operator>=</operator><name>i</name><operator>*</operator><literal type="number">10</literal><operator>+</operator><name>j</name></expr>;</expr_stmt></block></then></if>
	  }</block></for></block></for>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>,<argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ansH</name><index>[<expr><name><name>H</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>i</name><operator>=</operator><name>ty</name><operator>/</operator><literal type="number">10</literal><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ansH</name><index>[<expr><name><name>H</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>j</name><operator>=</operator><name>ty</name><operator>%</operator><literal type="number">10</literal><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>t</name><operator>=</operator><operator>(</operator><literal type="number">2</literal><operator>*</operator><name>j</name><operator>-</operator><name>i</name><operator>+</operator><literal type="number">3</literal><operator>)</operator><operator>%</operator><literal type="number">3</literal></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>k</name><operator>=</operator><literal type="number">3</literal></expr>;</init><condition><expr><name>k</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
    <block>{
	  <expr_stmt><expr><name><name>ansH</name><index>[<expr><name><name>H</name><index>[<expr><name>k</name></expr>]</index></name></expr>]</index></name><operator>=</operator><name>t</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
	   <expr_stmt><expr><name>t</name><operator>=</operator><operator>(</operator><name>t</name><operator>+</operator><name>j</name><operator>-</operator><name>i</name><operator>+</operator><literal type="number">3</literal><operator>)</operator><operator>%</operator><literal type="number">3</literal></expr>;</expr_stmt>
	}</block></for>
   <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d "</literal></expr></argument>,<argument><expr><name><name>ansH</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
   <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>,<argument><expr><name><name>ansH</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function> </unit>
