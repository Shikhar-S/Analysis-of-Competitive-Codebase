<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28911596_62494748.cpp"><comment type="block">/* Ø¨ÙØ³ÙÙÙ Ø§ÙÙÙÙÙÙ Ø§ÙØ±ÙÙØ­ÙÙÙÙ°ÙÙ Ø§ÙØ±ÙÙØ­ÙÙÙÙ */</comment>
<comment type="line">//codeforces1244E_live</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ull</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FASTIO</name></cpp:macro> <cpp:value>ios::sync_with_stdio(0), cin.tie(0), cout.tie(0);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)v.size())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>v.begin(), v.end()</cpp:value></cpp:define>
<function><type><name>void</name></type> <name>parseArray</name><parameter_list>(<parameter><decl><type><name>ll</name><modifier>*</modifier></type> <name>A</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{ <for>for <control>( <init><decl><type><name>ll</name></type> <name>K</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>K</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>K</name><operator>++</operator></expr></incr>)</control><block>{ <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>A</name><index>[<expr><name>K</name></expr>]</index></name></expr>;</expr_stmt> }</block></for> }</block></function>
<comment type="line">//ll modInverse(ll a, ll b){ return 1&lt;a ? b - modInverse(b%a,a)*b/a : 1; }</comment>
<comment type="line">//ll gcd(ll a, ll b){ return b?gcd(b, a % b):a; }</comment>
<comment type="line">//ll lcm(ll a, ll b){ return (a*b)/gcd(a, b); }</comment>
<function><type><name>ld</name></type> <name>dist</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{ <return>return <expr><call><name>sqrt</name><argument_list>(<argument><expr><operator>(</operator><name>x</name> <operator>-</operator> <name>a</name><operator>)</operator><operator>*</operator><operator>(</operator><name>x</name> <operator>-</operator> <name>a</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>y</name> <operator>-</operator> <name>b</name><operator>)</operator><operator>*</operator><operator>(</operator><name>y</name> <operator>-</operator> <name>b</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
<function><type><name>void</name></type> <name>debug</name><parameter_list>(<parameter><decl><type><name>ll</name><modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{ <for>for <control>( <init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr> )</control><block>{ <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>a</name><index>[<expr><name>k</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt>}</block></for> <expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt> }</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<decl_stmt><decl><type><name>FASTIO</name>
	<name>ll</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>o</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>o</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name><name>a</name><index>[<expr><name>n</name></expr>]</index></name></decl>;</decl_stmt> <expr_stmt><expr><call><name>parseArray</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>a</name> <operator>+</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>m</name> <init>= <expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>ma</name> <init>= <expr><name><name>a</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt> <decl_stmt><decl><type><name>ll</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>r</name> <init>= <expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><literal type="number">100000000000ll</literal></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{
		<while>while <condition>(<expr><name>l</name> <operator>&lt;</operator> <name>n</name> <operator>&amp;&amp;</operator> <name><name>a</name><index>[<expr><name>l</name></expr>]</index></name> <operator>==</operator> <name>m</name></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>l</name><operator>++</operator></expr>;</expr_stmt></block></while>
		<while>while <condition>(<expr><name>r</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>a</name><index>[<expr><name>r</name></expr>]</index></name> <operator>==</operator> <name>ma</name></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>r</name><operator>--</operator></expr>;</expr_stmt></block></while>
		<expr_stmt><expr><name>ans</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>ans</name></expr></argument>, <argument><expr><call><name>abs</name><argument_list>(<argument><expr><name>ma</name> <operator>-</operator> <name>m</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>l</name> <operator>&lt;=</operator> <name>n</name> <operator>-</operator> <name>r</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
			<if>if <condition>(<expr><name>o</name> <operator>&lt;</operator> <name>l</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
			<decl_stmt><decl><type><name>ll</name></type> <name>temp</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name>o</name> <operator>/</operator> <name>l</name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><name>l</name></expr>]</index></name> <operator>-</operator> <name>m</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>m</name> <operator>+=</operator> <name>temp</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>o</name> <operator>-=</operator> <name>temp</name> <operator>*</operator> <name>l</name></expr>;</expr_stmt>
		}</block></then><else>else <block>{
			<if>if <condition>(<expr><name>o</name> <operator>&lt;</operator> <name>n</name> <operator>-</operator> <name>r</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
			<decl_stmt><decl><type><name>ll</name></type> <name>temp</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name>o</name> <operator>/</operator> <operator>(</operator><name>n</name> <operator>-</operator> <name>r</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>ma</name> <operator>-</operator> <name><name>a</name><index>[<expr><name>r</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>ma</name> <operator>-=</operator> <name>temp</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>o</name> <operator>-=</operator> <name>temp</name> <operator>*</operator> <operator>(</operator><name>n</name> <operator>-</operator> <name>r</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
		}</block></else></if>
		<expr_stmt><expr><name>ans</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>ans</name></expr></argument>, <argument><expr><call><name>abs</name><argument_list>(<argument><expr><name>ma</name> <operator>-</operator> <name>m</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>l</name> <operator>&gt;</operator> <name>r</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{ <expr_stmt><expr><name>ans</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <break>break;</break> }</block></then></if>
	}</block></while>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
