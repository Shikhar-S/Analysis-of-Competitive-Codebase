<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28934232_62502254.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXN</name></cpp:macro> <cpp:value>100000</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>N</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>K</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name><name>A</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>N</name><operator>&gt;&gt;</operator><name>K</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>N</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>A</name></expr></argument>,<argument><expr><name>A</name><operator>+</operator><name>N</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>mn</name> <init>= <expr><name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>mx</name> <init>= <expr><name><name>A</name><index>[<expr><name>N</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>ll</name></type> <name>lft</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>rgt</name> <init>= <expr><name>N</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>r</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>z</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>K</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition>
	<block>{
		<if>if<condition>(<expr><name>mx</name><operator>==</operator><name>mn</name></expr>)</condition><then>
			<block type="pseudo"><break>break;</break></block></then></if>
		<for>for<control>(<init>;</init> <condition><expr><name>lft</name><operator>&lt;</operator><name>N</name> <operator>&amp;&amp;</operator> <name><name>A</name><index>[<expr><name>lft</name></expr>]</index></name><operator>==</operator><name>mn</name></expr>;</condition> <incr><expr><operator>++</operator><name>lft</name></expr><operator>,</operator> <expr><operator>++</operator><name>l</name></expr></incr>)</control><block type="pseudo"><empty_stmt>;</empty_stmt></block></for>
		<for>for<control>(<init>;</init> <condition><expr><name>rgt</name><operator>&gt;=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>A</name><index>[<expr><name>rgt</name></expr>]</index></name><operator>==</operator><name>mx</name></expr>;</condition> <incr><expr><operator>--</operator><name>rgt</name></expr><operator>,</operator> <expr><operator>++</operator><name>r</name></expr></incr>)</control><block type="pseudo"><empty_stmt>;</empty_stmt></block></for> 
		<if>if<condition>(<expr><name>l</name><operator>&lt;</operator><name>r</name></expr>)</condition><then>
		<block>{
			<decl_stmt><decl><type><name>ll</name></type> <name>new_mn</name> <init>= <expr><name><name>A</name><index>[<expr><name>lft</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>ll</name></type> <name>z</name> <init>= <expr><operator>(</operator><name>new_mn</name><operator>-</operator><name>mn</name><operator>)</operator><operator>*</operator><name>l</name></expr></init></decl>;</decl_stmt>
			<if>if<condition>(<expr><name>K</name><operator>&gt;=</operator><name>z</name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name>K</name><operator>-=</operator><name>z</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>mn</name> <operator>=</operator> <name>new_mn</name></expr>;</expr_stmt>
			}</block></then>
			<else>else
			<block>{
				<expr_stmt><expr><name>mn</name><operator>+=</operator><name>K</name><operator>/</operator><name>l</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>K</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
			}</block></else></if>
			
		}</block></then>
		<else>else
		<block>{
			<decl_stmt><decl><type><name>ll</name></type> <name>new_mx</name> <init>= <expr><name><name>A</name><index>[<expr><name>rgt</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>ll</name></type> <name>z</name> <init>= <expr><operator>(</operator><name>mx</name><operator>-</operator><name>new_mx</name><operator>)</operator><operator>*</operator><name>r</name></expr></init></decl>;</decl_stmt>
			<if>if<condition>(<expr><name>K</name><operator>&gt;=</operator><name>z</name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name>K</name><operator>-=</operator><name>z</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>mx</name> <operator>=</operator> <name>new_mx</name></expr>;</expr_stmt>
			}</block></then>
			<else>else
			<block>{
				<expr_stmt><expr><name>mx</name><operator>-=</operator><name>K</name><operator>/</operator><name>r</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>K</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
			}</block></else></if>
		}</block></else></if>
		
	}</block></while>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>mx</name><operator>-</operator><name>mn</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
		
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
