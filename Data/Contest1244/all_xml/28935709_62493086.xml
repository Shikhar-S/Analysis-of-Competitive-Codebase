<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28935709_62493086.cpp"><comment type="block" format="doxygen">/**
	Â© 2017-2019 Tai-Yuan Kuo All Rights Reserved.
*/</comment>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><cpp:literal>"O3"</cpp:literal><name>)</name></cpp:pragma>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>for0</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = 0; i &lt; n; ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>for1</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = 1; i &lt;= n; ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rfor0</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = n - 1; i &gt;= 0; --i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rfor1</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = n; i &gt; 0; --i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>it</name></type></parameter>, <parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(auto it = (a).begin(); it != (a).end(); ++it)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rall</name><parameter_list>(<parameter><type><name>it</name></type></parameter>, <parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(auto it = (a).rbegin(); it != (a).rend(); ++it)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name></cpp:macro> <cpp:value>for0</cpp:value></cpp:define>

<decl_stmt><decl><type><name>stringstream</name></type> <name>output</name></decl>;</decl_stmt>

<comment type="block" format="doxygen">/** Actually outputs the result and end the program.*/</comment>
<function_decl><specifier>inline</specifier> <type><name>void</name></type> <name>eOP</name><parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<function><specifier>inline</specifier> <type><name>int</name><modifier>&amp;</modifier></type> <name>inc</name><parameter_list>(<parameter><decl><type><name>int</name><modifier>&amp;</modifier></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{
	<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>n</name></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	}</block></then></if>
	<return>return <expr><name>i</name></expr>;</return>
}</block></function>

<function><specifier>inline</specifier> <type><name>int</name><modifier>&amp;</modifier></type> <name>dec</name><parameter_list>(<parameter><decl><type><name>int</name><modifier>&amp;</modifier></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{
	<expr_stmt><expr><operator>--</operator><name>i</name></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>i</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><name>i</name> <operator>=</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	}</block></then></if>
	<return>return <expr><name>i</name></expr>;</return>
}</block></function>

<function><specifier>inline</specifier> <type><name>int</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><name>i</name> <operator>+</operator> <name>j</name></expr></init></decl>;</decl_stmt>
	<if>if <condition>(<expr><name>r</name> <operator>&gt;=</operator> <name>n</name></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><name>r</name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>
	}</block></then></if>
	<return>return <expr><name>r</name></expr>;</return>
}</block></function>

<function><specifier>inline</specifier> <type><name>int</name></type> <name>sub</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><name>i</name> <operator>-</operator> <name>j</name></expr></init></decl>;</decl_stmt>
	<if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><name>r</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
	}</block></then></if>
	<return>return <expr><name>r</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name>MASK</name> <init>= <expr><literal type="char">'W'</literal> <operator>^</operator> <literal type="char">'B'</literal></expr></init></decl>;</decl_stmt>

<function><specifier>inline</specifier> <type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>s</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>dub</name></decl>;</decl_stmt>

	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{
        <decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><call><name>add</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><call><name><name>dub</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>

    <if>if <condition>(<expr><call><name><name>dub</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
	<block>{
        <if>if <condition>(<expr><name>k</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then>
		<block>{
            <for>for <control>(<init><decl><type><name>char</name></type> <name>c</name><range>: <expr><name>s</name></expr></range></decl></init>)</control>
			<block>{
				<expr_stmt><expr><name>c</name> <operator>^=</operator> <name>MASK</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>c</name></expr>;</expr_stmt>
			}</block></for>
			<return>return;</return>
		}</block></then></if>

		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>s</name></expr>;</expr_stmt>
		<return>return;</return>
	}</block></then></if>

    <expr_stmt><expr><call><name><name>dub</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name><name>dub</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>dub</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><name><name>dub</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>inc</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><name><name>dub</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name><name>s</name><index>[<expr><name>l</name></expr>]</index></name> <operator>==</operator> <name><name>s</name><index>[<expr><name>r</name></expr>]</index></name></expr>)</condition><then>
		<block>{
			<decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><name><name>s</name><index>[<expr><name>l</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_</name> <operator>&lt;</operator> <name>k</name> <operator>&amp;&amp;</operator> <name>l</name> <operator>!=</operator> <name>r</name></expr>;</condition> <incr><expr><operator>++</operator><name>_</name></expr></incr>)</control>
			<block>{
				<expr_stmt><expr><call><name>inc</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>dec</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>s</name><index>[<expr><name>l</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>s</name><index>[<expr><name>r</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
			}</block></for>

			<while>while <condition>(<expr><name>l</name> <operator>!=</operator> <name>r</name></expr>)</condition>
			<block>{
				<expr_stmt><expr><call><name>inc</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>dec</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>c</name> <operator>^=</operator> <name>MASK</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>s</name><index>[<expr><name>l</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>s</name><index>[<expr><name>r</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
			}</block></while>
		}</block></then>
		<else>else
		<block>{
			<decl_stmt><decl><type><name>char</name></type> <name>lc</name> <init>= <expr><name><name>s</name><index>[<expr><name>l</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>char</name></type> <name>rc</name> <init>= <expr><name><name>s</name><index>[<expr><name>r</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

			<for>for <control>(<init><decl><type><name>int</name></type> <name>_</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_</name> <operator>&lt;</operator> <name>k</name> <operator>&amp;&amp;</operator> <call><name>add</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>r</name></expr>;</condition> <incr><expr><operator>++</operator><name>_</name></expr></incr>)</control>
			<block>{
				<expr_stmt><expr><call><name>inc</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>dec</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>s</name><index>[<expr><name>l</name></expr>]</index></name> <operator>=</operator> <name>lc</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>s</name><index>[<expr><name>r</name></expr>]</index></name> <operator>=</operator> <name>rc</name></expr>;</expr_stmt>
<comment type="line">//cout &lt;&lt; s &lt;&lt; endl;</comment>
			}</block></for>

			<while>while <condition>(<expr><call><name>add</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>r</name></expr>)</condition>
			<block>{
				<expr_stmt><expr><call><name>inc</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>dec</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>lc</name> <operator>^=</operator> <name>MASK</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>rc</name> <operator>^=</operator> <name>MASK</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>s</name><index>[<expr><name>l</name></expr>]</index></name> <operator>=</operator> <name>lc</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>s</name><index>[<expr><name>r</name></expr>]</index></name> <operator>=</operator> <name>rc</name></expr>;</expr_stmt>
			}</block></while>

		}</block></else></if>
	}</block></for>

	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>s</name></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>size_t</name></type> <name>t</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<comment type="line">//cin &gt;&gt; t;</comment>
	<macro><name>rep</name> <argument_list>(<argument>i</argument>, <argument>t</argument>)</argument_list></macro>
	<block>{
		<expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block>

	<expr_stmt><expr><call><name>eOP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><specifier>inline</specifier> <type><name>void</name></type> <name>eOP</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name><name>output</name><operator>.</operator><name>str</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>output</name><operator>.</operator><name>str</name></name><argument_list>(<argument><expr><call><name>string</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
