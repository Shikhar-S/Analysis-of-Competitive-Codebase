<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28903709_62465470.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>q</name></decl>, <decl><type ref="prev"/><name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name> <parameter_list>()</parameter_list><block>{
<expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>q</name></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>kl</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>kl</name><operator>&lt;</operator><name>q</name></expr>;</condition> <incr><expr><name>kl</name><operator>++</operator></expr></incr>)</control><block>{
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name> <operator>&gt;&gt;</operator> <name>c</name> <operator>&gt;&gt;</operator> <name>d</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
	<if>if <condition>(<expr><operator>(</operator><name>a</name><operator>/</operator><name>c</name><operator>+</operator><call>(<name>int</name>)<argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name>a</name><operator>%</operator><name>c</name><operator>)</operator></expr>?</condition><then><expr><literal type="number">1</literal></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call> <operator>+</operator> <name>b</name><operator>/</operator><name>d</name> <operator>+</operator> <call>(<name>int</name>)<argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name>b</name><operator>%</operator><name>d</name><operator>)</operator></expr>?</condition><then><expr><literal type="number">1</literal></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call><operator>)</operator><operator>&lt;=</operator><name>k</name></expr>)</condition><then> 
		<block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>a</name><operator>/</operator><name>c</name> <operator>+</operator> <call>(<name>int</name>)<argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name>a</name><operator>%</operator><name>c</name><operator>)</operator></expr>?</condition><then><expr><literal type="number">1</literal></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name>b</name><operator>/</operator><name>d</name> <operator>+</operator> <call>(<name>int</name>)<argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name>b</name><operator>%</operator><name>d</name><operator>)</operator></expr>?</condition><then><expr><literal type="number">1</literal></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
	<else>else <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"-1"</literal></expr>;</expr_stmt></block></else></if>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

</unit>
