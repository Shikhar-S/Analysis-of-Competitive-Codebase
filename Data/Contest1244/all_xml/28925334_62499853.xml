<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28925334_62499853.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name> <init>= <expr><literal type="number">1e5</literal> <operator>+</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name><name>a</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>s1</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>s2</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>bool</name></type> <name>check</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mid</name></decl></parameter>)</parameter_list> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init>;</init> <condition><expr><name>l</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>l</name><operator>++</operator></expr></incr>)</control> <block>{
    <while>while <condition>(<expr><name>r</name> <operator>&lt;</operator> <name>n</name> <operator>&amp;&amp;</operator> <name><name>a</name><index>[<expr><name>r</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&lt;=</operator> <name><name>a</name><index>[<expr><name>l</name></expr>]</index></name> <operator>+</operator> <name>mid</name></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>r</name><operator>++</operator></expr>;</expr_stmt></block></while>
    <decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><name><name>a</name><index>[<expr><name>l</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>l</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <name><name>s1</name><index>[<expr><name>l</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>s2</name><index>[<expr><name>r</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <operator>(</operator><name><name>a</name><index>[<expr><name>l</name></expr>]</index></name> <operator>+</operator> <name>mid</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>n</name> <operator>-</operator> <name>r</name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>val</name> <operator>&lt;=</operator> <name>k</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
  }</block></for>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>l</name> <init>= <expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>r</name> <init>= <expr><name>n</name></expr></init></decl>;</init> <condition><expr><name>r</name></expr>;</condition> <incr><expr><name>r</name><operator>--</operator></expr></incr>)</control> <block>{
    <while>while <condition>(<expr><name>l</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>a</name><index>[<expr><name>l</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&gt;=</operator> <name><name>a</name><index>[<expr><name>r</name></expr>]</index></name> <operator>-</operator> <name>mid</name></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>l</name><operator>--</operator></expr>;</expr_stmt></block></while>
    <decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><operator>(</operator><name><name>a</name><index>[<expr><name>r</name></expr>]</index></name> <operator>-</operator> <name>mid</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>l</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <name><name>s1</name><index>[<expr><name>l</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>s2</name><index>[<expr><name>r</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>a</name><index>[<expr><name>r</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>n</name> <operator>-</operator> <name>r</name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>val</name> <operator>&lt;=</operator> <name>k</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
  }</block></for>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
  <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%I64d %I64d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%I64d"</literal></expr></argument>, <argument><expr><name>a</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>
  <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>a</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>a</name> <operator>+</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
    <expr_stmt><expr><name><name>s1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s1</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
  }</block></for>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>n</name></expr></init></decl>;</init> <condition><expr><name>i</name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{
    <expr_stmt><expr><name><name>s2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s2</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
  }</block></for>
  <decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>r</name> <init>= <expr><literal type="number">1e9</literal></expr></init></decl>, <decl><type ref="prev"/><name>mid</name></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>l</name> <operator>&lt;</operator> <name>r</name></expr>)</condition> <block>{
    <expr_stmt><expr><name>mid</name> <operator>=</operator> <operator>(</operator><name>l</name> <operator>+</operator> <name>r</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><ternary><condition><expr><call><name>check</name><argument_list>(<argument><expr><name>mid</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>r</name> <operator>=</operator> <name>mid</name></expr> </then><else>: <expr><name>l</name> <operator>=</operator> <name>mid</name> <operator>+</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
  }</block></while>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%I64d"</literal></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
