<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28904365_62494555.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>llong</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>c</name><index>[<expr><literal type="number">100100</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<struct>struct <name>data</name><block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>to</name></decl>,<decl><type ref="prev"/><name>nxt</name></decl>;</decl_stmt>
</public>}</block><decl><name><name>mp</name><index>[<expr><literal type="number">200200</literal></expr>]</index></name></decl>;</struct>
<decl_stmt><decl><type><name>int</name></type> <name><name>head</name><index>[<expr><literal type="number">100100</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name>cnt</name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>link</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{
	<expr_stmt><expr><name><name>mp</name><index>[<expr><operator>++</operator><name>cnt</name></expr>]</index></name><operator>.</operator><name>to</name><operator>=</operator><name>y</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mp</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>.</operator><name>nxt</name><operator>=</operator><name><name>head</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>head</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><name>cnt</name></expr>;</expr_stmt>
}</block></function>
<decl_stmt><decl><type><name>int</name></type> <name><name>d</name><index>[<expr><literal type="number">100100</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>id</name><index>[<expr><literal type="number">100100</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name>clk</name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>fa</name></decl></parameter>)</parameter_list>
<block>{
	<expr_stmt><expr><name><name>id</name><index>[<expr><operator>++</operator><name>clk</name></expr>]</index></name><operator>=</operator><name>x</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name><name>head</name><index>[<expr><name>x</name></expr>]</index></name></expr></init></decl>;</init><condition><expr><name>i</name></expr>;</condition><incr><expr><name>i</name><operator>=</operator><name><name>mp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nxt</name></expr></incr>)</control>
		<block type="pseudo"><if>if<condition>(<expr><name><name>mp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>to</name><operator>!=</operator><name>fa</name></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name><name>mp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>to</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></block></for>
}</block></function>
<decl_stmt><decl><type><name>llong</name></type> <name><name>dp</name><index>[<expr><literal type="number">100100</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>al</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>an</name><index>[<expr><literal type="number">100100</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>cc</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>cc</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition><incr><expr><operator>++</operator><name>cc</name></expr></incr>)</control>
		<block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
			<block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>cc</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for></block></for>
	<decl_stmt><decl><type><name>int</name></type> <name>xx</name></decl>,<decl><type ref="prev"/><name>yy</name></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>xx</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>yy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>link</name><argument_list>(<argument><expr><name>xx</name></expr></argument>,<argument><expr><name>yy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>link</name><argument_list>(<argument><expr><name>yy</name></expr></argument>,<argument><expr><name>xx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>d</name><index>[<expr><name>xx</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt><expr_stmt><expr><name><name>d</name><index>[<expr><name>yy</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
		<if>if<condition>(<expr><name><name>d</name><index>[<expr><name>xx</name></expr>]</index></name><operator>&gt;</operator><literal type="number">2</literal><operator>||</operator><name><name>d</name><index>[<expr><name>yy</name></expr>]</index></name><operator>&gt;</operator><literal type="number">2</literal></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		}</block></then></if>
	}</block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block type="pseudo"><if>if<condition>(<expr><name><name>d</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		}</block></then></if></block></for>
	<decl_stmt><decl><type><name>llong</name></type> <name>ans</name><init>=<expr><literal type="number">0x7fffffffffffffff</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ac1</name></decl>,<decl><type ref="prev"/><name>ac2</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>llong</name></type> <name>ta</name></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>c1</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>c1</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition><incr><expr><operator>++</operator><name>c1</name></expr></incr>)</control>
		<block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>c2</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>c2</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition><incr><expr><operator>++</operator><name>c2</name></expr></incr>)</control>
		<block>{
			<if>if<condition>(<expr><name>c1</name><operator>==</operator><name>c2</name></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
			<expr_stmt><expr><name><name>al</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name>c1</name></expr>;</expr_stmt><expr_stmt><expr><name><name>al</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><name>c2</name></expr>;</expr_stmt><expr_stmt><expr><name><name>al</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">3</literal><operator>-</operator><name>c1</name><operator>-</operator><name>c2</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>ta</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
			<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> 
				<block type="pseudo"><expr_stmt><expr><name>ta</name><operator>+=</operator><name><name>c</name><index>[<expr><name><name>id</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index><index>[<expr><name><name>al</name><index>[<expr><name>i</name><operator>%</operator><literal type="number">3</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block></for>
			<if>if<condition>(<expr><name>ta</name><operator>&lt;</operator><name>ans</name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name>ans</name><operator>=</operator><name>ta</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>ac1</name><operator>=</operator><name>c1</name></expr><operator>,</operator><expr><name>ac2</name><operator>=</operator><name>c2</name></expr>;</expr_stmt>
			}</block></then></if>
		}</block></for></block></for>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>al</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name>ac1</name></expr>;</expr_stmt><expr_stmt><expr><name><name>al</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><name>ac2</name></expr>;</expr_stmt><expr_stmt><expr><name><name>al</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">3</literal><operator>-</operator><name>ac1</name><operator>-</operator><name>ac2</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><name><name>an</name><index>[<expr><name><name>id</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>=</operator><name><name>al</name><index>[<expr><name>i</name><operator>%</operator><literal type="number">3</literal></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d "</literal></expr></argument>,<argument><expr><name><name>an</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
