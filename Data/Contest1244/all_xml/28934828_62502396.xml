<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28934828_62502396.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Y</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PB</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAXN</name><init>=<expr><literal type="number">400000</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>queue</name> <argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>q</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>niz</name><index>[<expr><name>MAXN</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>kad</name><index>[<expr><name>MAXN</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>boja</name><index>[<expr><name>MAXN</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name> <parameter_list>()</parameter_list> <block>{
	
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>k</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>s</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>kad</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>kad</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'B'</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name><name>niz</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
		}</block></then>
		<else>else<block>{
			<expr_stmt><expr><name><name>niz</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
		}</block></else></if>
	}</block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><name>a</name><operator>=</operator><operator>(</operator><name>i</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><name>n</name></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>a</name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name>a</name><operator>=</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><name>b</name><operator>=</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><name>n</name></expr>;</expr_stmt>
		<if>if<condition>(<expr><name><name>niz</name><index>[<expr><name>a</name></expr>]</index></name><operator>==</operator><name><name>niz</name><index>[<expr><name>i</name></expr>]</index></name> <operator>||</operator> <name><name>niz</name><index>[<expr><name>b</name></expr>]</index></name><operator>==</operator><name><name>niz</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block>{
			<expr_stmt><expr><name><name>kad</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>boja</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>niz</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
	<while>while<condition>(<expr><call><name><name>q</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><block>{
		<decl_stmt><decl><type><name>ll</name></type> <name>x</name><init>=<expr><call><name><name>q</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>a</name><operator>=</operator><operator>(</operator><name>x</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><name>n</name></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>a</name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name>a</name><operator>=</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><name>b</name><operator>=</operator><operator>(</operator><name>x</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><name>n</name></expr>;</expr_stmt>
		<if>if<condition>(<expr><name><name>kad</name><index>[<expr><name>a</name></expr>]</index></name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name><name>kad</name><index>[<expr><name>a</name></expr>]</index></name><operator>=</operator><name><name>kad</name><index>[<expr><name>x</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>boja</name><index>[<expr><name>a</name></expr>]</index></name><operator>=</operator><name><name>boja</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<if>if<condition>(<expr><name><name>kad</name><index>[<expr><name>b</name></expr>]</index></name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name><name>kad</name><index>[<expr><name>b</name></expr>]</index></name><operator>=</operator><name><name>kad</name><index>[<expr><name>x</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>boja</name><index>[<expr><name>b</name></expr>]</index></name><operator>=</operator><name><name>boja</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></while>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<if>if<condition>(<expr><name><name>kad</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;=</operator><name>k</name> <operator>&amp;&amp;</operator> <name><name>kad</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block>{
			<if>if<condition>(<expr><name><name>boja</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
				<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"B"</literal></expr>;</expr_stmt>
			}</block></then>
			<else>else<block>{
				<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"W"</literal></expr>;</expr_stmt>
			}</block></else></if>
		}</block></then>
		<else>else<block>{
			<if>if<condition>(<expr><name>k</name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
				<if>if<condition>(<expr><name><name>niz</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
					<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"B"</literal></expr>;</expr_stmt>
				}</block></then>
				<else>else<block>{
					<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"W"</literal></expr>;</expr_stmt>
				}</block></else></if>
			}</block></then>
			<else>else<block>{
				<if>if<condition>(<expr><name><name>niz</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
					<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"W"</literal></expr>;</expr_stmt>
				}</block></then>
				<else>else<block>{
					<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"B"</literal></expr>;</expr_stmt>
				}</block></else></if>
			}</block></else></if>
		}</block></else></if>
	}</block></for>
	
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
