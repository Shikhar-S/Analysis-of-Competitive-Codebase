<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28896886_62487675.cpp"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOS</name></cpp:macro> <cpp:value>ios::sync_with_stdio(false);</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">1e5</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>M</name> <init>= <expr><literal type="number">3e5</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>INF</name> <init>= <expr><literal type="number">1e8</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>mod</name> <init>= <expr><literal type="number">998244353</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>mp</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator> <name>i</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name><name>mp</name><index>[<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>++</operator></expr>;</expr_stmt></block></for>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>g</name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>auto</name></type> <name>iter</name> <init>= <expr><call><name><name>mp</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>iter</name> <operator>!=</operator> <call><name><name>mp</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>iter</name> <operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name><name>g</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    <if>if<condition>(<expr><call><name><name>mp</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then><block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="number">0</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>
    <decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>r</name> <init>= <expr><call><name><name>g</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>lv</name> <init>= <expr><name><name>g</name><index>[<expr><name>l</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>rv</name> <init>= <expr><name><name>g</name><index>[<expr><name>r</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>lc</name> <init>= <expr><name><name>mp</name><index>[<expr><name><name>g</name><index>[<expr><name>l</name></expr>]</index></name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>rc</name> <init>= <expr><name><name>mp</name><index>[<expr><name><name>g</name><index>[<expr><name>r</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>k</name> <operator>&gt;=</operator> <call><name>min</name><argument_list>(<argument><expr><name>lc</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>l</name> <operator>!=</operator> <name>r</name></expr>)</condition><block>{
        <if>if<condition>(<expr><name>lc</name> <operator>&lt;</operator> <name>rc</name></expr>)</condition><then><block>{
            <decl_stmt><decl><type><name>ll</name></type> <name>d</name> <init>= <expr><name><name>g</name><index>[<expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>g</name><index>[<expr><name>l</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ll</name></type> <name>add</name> <init>= <expr><name>k</name> <operator>/</operator> <name>lc</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>down</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name>add</name> <operator>&lt;</operator> <name>d</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>down</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
            <expr_stmt><expr><name>add</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>k</name> <operator>-=</operator> <name>add</name> <operator>*</operator> <name>lc</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>lv</name> <operator>=</operator> <name>lv</name> <operator>+</operator> <name>add</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>lc</name> <operator>+=</operator> <name><name>mp</name><index>[<expr><name><name>g</name><index>[<expr><operator>++</operator> <name>l</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>down</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>

        }</block></then><else>else<block>{
            <decl_stmt><decl><type><name>ll</name></type> <name>d</name> <init>= <expr><name><name>g</name><index>[<expr><name>r</name></expr>]</index></name> <operator>-</operator> <name><name>g</name><index>[<expr><name>r</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ll</name></type> <name>add</name> <init>= <expr><name>k</name> <operator>/</operator> <name>rc</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>down</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name>add</name> <operator>&lt;</operator> <name>d</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>down</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
            <expr_stmt><expr><name>add</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>k</name> <operator>-=</operator> <name>add</name> <operator>*</operator> <name>rc</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>rv</name> <operator>=</operator> <name>rv</name> <operator>-</operator> <name>add</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>rc</name> <operator>+=</operator> <name><name>mp</name><index>[<expr><name><name>g</name><index>[<expr><operator>--</operator> <name>r</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>down</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
        }</block></else></if>
    }</block></while>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>rv</name> <operator>-</operator> <name>lv</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
