<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28899394_62482242.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ext/pb_ds/assoc_container.hpp&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ext/pb_ds/tree_policy.hpp&gt;</cpp:file></cpp:include> 
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<using>using <namespace>namespace <name>__gnu_pbds</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ld</name></cpp:macro> <cpp:value>long double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pa</name></cpp:macro> <cpp:value>pair&lt;int,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>v1d</name></cpp:macro> <cpp:value>vector&lt;int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>v2d</name></cpp:macro> <cpp:value>vector&lt;vector&lt;int&gt;&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>v1p</name></cpp:macro> <cpp:value>vector&lt;pa&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INF</name></cpp:macro> <cpp:value>1000000000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M</name></cpp:macro> <cpp:value>998244353</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RS</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>sort(v.rbegin(),v.rend())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>print</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>printf("%.16f\n", a);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PI</name></cpp:macro> <cpp:value>3.14159265</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ss</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ump</name></cpp:macro> <cpp:value>map&lt;int,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>"\n"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>v1s</name></cpp:macro> <cpp:value>vector&lt;string&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>sort(v.begin(),v.end())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mxpq</name></cpp:macro> <cpp:value>priority_queue &lt;int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mnpq</name></cpp:macro> <cpp:value>priority_queue&lt;int,vector&lt;int&gt;,greater&lt;int&gt;&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fio</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fff</name></cpp:macro> <cpp:value>cout.flush();</cpp:value></cpp:define>
 
<typedef>typedef <type><name><name>tree</name><argument_list type="generic">&lt;
<argument><expr><name>int</name></expr></argument>,
<argument><expr><name>null_type</name></expr></argument>,
<argument><expr><name><name>less</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>,
<argument><expr><name>rb_tree_tag</name></expr></argument>,
<argument><expr><name>tree_order_statistics_node_update</name></expr></argument>&gt;</argument_list></name></type>
<name>pbds</name>;</typedef>

<function><type><name>int</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>v1d</name> <modifier>&amp;</modifier></type><name>isit</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter> ,<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>v1d</name> <modifier>&amp;</modifier></type><name>per</name></decl></parameter> , <parameter><decl><type><name>v2d</name> <modifier>&amp;</modifier></type><name>c</name></decl></parameter> , <parameter><decl><type><name>v2d</name> <modifier>&amp;</modifier></type><name>v</name></decl></parameter>)</parameter_list><block>{

	<if>if<condition>(<expr><name><name>isit</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block>{
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></then></if>

	<expr_stmt><expr><name><name>isit</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name><name>per</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><name><name>c</name><index>[<expr><name><name>per</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<for>for<control>(<init><decl><type><name>auto</name></type> <name>j</name> <range>: <expr><name><name>v</name><index>[<expr><name>idx</name></expr>]</index></name></expr></range></decl></init>)</control><block>{
		<expr_stmt><expr><name>ans</name> <operator>+=</operator> <call><name>dfs</name><argument_list>(<argument><expr><name>isit</name></expr></argument> , <argument><expr><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><literal type="number">3</literal></expr></argument> , <argument><expr><name>j</name></expr></argument> , <argument><expr><name>per</name></expr></argument>, <argument><expr><name>c</name></expr></argument> ,<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>

	<return>return <expr><name>ans</name></expr>;</return>

}</block></function>

<function><type><name>int</name></type> <name>find</name><parameter_list>(<parameter><decl><type><name>v2d</name> <modifier>&amp;</modifier></type><name>v</name></decl></parameter>)</parameter_list><block>{

	<decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>two</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>one</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name>  <operator>&lt;</operator> <call><name><name>v</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{

		<if>if<condition>(<expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><then><block>{
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		}</block></then><elseif>else <if>if<condition>(<expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name>one</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>ans</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
		}</block></then></if></elseif><else>else<block>{
			<expr_stmt><expr><name>two</name><operator>++</operator></expr>;</expr_stmt>
		}</block></else></if>


	}</block></for>

	<if>if<condition>(<expr><name>one</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then><block>{
		<return>return <expr><name>ans</name></expr>;</return>
	}</block></then><else>else<block>{
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	}</block></else></if>


}</block></function>
<function><type><name>int32_t</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
 
    <comment type="line">// cout&lt;&lt;INF;</comment>
    
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>v2d</name></type> <name>c</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument> , <argument><expr><call><name>v1d</name> <argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name>  <operator>&lt;</operator> <literal type="number">3</literal></expr> ;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control><block>{

    	<for>for<control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>j</name> <operator>:</operator> <name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr></init>)</control><block>{
    		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>j</name></expr>;</expr_stmt>
    	}</block></for>
    }</block></for>

    <decl_stmt><decl><type><name>v2d</name></type> <name>v</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name>  <operator>&lt;</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
    	<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>;</decl_stmt><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>a</name><operator>&gt;&gt;</operator><name>b</name></expr>;</expr_stmt>
    	<expr_stmt><expr><name>a</name><operator>--</operator></expr>;</expr_stmt><expr_stmt><expr><name>b</name><operator>--</operator></expr>;</expr_stmt>

    	<expr_stmt><expr><name><name>v</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    	<expr_stmt><expr><name><name>v</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>


    <decl_stmt><decl><type><name>v2d</name></type> <name>per</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>per</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>}</block></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>per</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>per</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">2</literal></expr>}</block></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>per</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>per</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <block>{<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>per</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <block>{<expr><literal type="number">2</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><call><name>find</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if<condition>(<expr><name>idx</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block>{
    	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>-</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    	<return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>
    
    <decl_stmt><decl><type><name>int</name></type> <name>cost</name> <init>= <expr><name>INF</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name>  <operator>&lt;</operator> <literal type="number">6</literal></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        
        <comment type="line">// for(auto jj : per[i]){</comment>
        <comment type="line">//     cout&lt;&lt;jj&lt;&lt;" ";</comment>
            
        <comment type="line">// }</comment>

    	<decl_stmt><decl><type><name>v1d</name></type> <name>isit</name><argument_list>(<argument><expr><name>n</name></expr></argument> , <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    	<decl_stmt><decl><type><name>int</name></type> <name>temp</name> <init>= <expr><call><name>dfs</name><argument_list>(<argument><expr><name>isit</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> ,<argument><expr><name>idx</name></expr></argument> , <argument><expr><name><name>per</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> , <argument><expr><name>c</name></expr></argument> , <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    	
    <comment type="line">// 	cout&lt;&lt;temp&lt;&lt;endl;</comment>

    	<if>if<condition>(<expr><name>temp</name> <operator>&lt;</operator> <name>cost</name></expr>)</condition><then><block>{
    		<expr_stmt><expr><name>ans</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
    		<expr_stmt><expr><name>cost</name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
    	}</block></then></if>
    }</block></for>

    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>cost</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>v1d</name></type> <name>isit</name><argument_list>(<argument><expr><name>n</name></expr></argument> , <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>isit</name></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument> ,<argument><expr><name>idx</name></expr></argument> , <argument><expr><name><name>per</name><index>[<expr><name>ans</name></expr>]</index></name></expr></argument> , <argument><expr><name>c</name></expr></argument> , <argument><expr><name>v</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>auto</name></type> <name>i</name> <range>: <expr><name>isit</name></expr></range></decl></init>)</control><block>{
    	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="string">" "</literal></expr>;</expr_stmt>
    }</block></for>


 
 
}</block></function></unit>
