<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28897039_62485264.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<comment type="block">/*
#pragma GCC optimize ("O3")
#pragma GCC target ("avx2")
#pragma GCC target (sse, sse2, sse3, ssse3, sse4,popcnt,tune=native)
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>s</name></type></parameter>, <parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=s; i&lt;e; i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>loop</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=0; i&lt;n; i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CIN</name></cpp:macro>   <cpp:value>ios_base::sync_with_stdio(0); cin.tie(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ull</name></cpp:macro> <cpp:value>unsigned long long int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ld</name></cpp:macro> <cpp:value>long double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SZ</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(int)(a.size())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Read</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>freopen("input.txt", "r", stdin)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Write</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>freopen("output.txt", "w", stdout)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mem</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(a, v, sizeof(a))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>v.begin(), v.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rall</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>v.rbegin(), v.rend()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Unique</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>x.erase(unique(all(x)), x.end())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pi</name></cpp:macro> <cpp:value>acos(-1.0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vec</name></cpp:macro> <cpp:value>vector</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>paii</name></cpp:macro> <cpp:value>pair&lt;int, int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>padd</name></cpp:macro> <cpp:value>pair&lt;dd, dd&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pall</name></cpp:macro> <cpp:value>pair&lt;ll, ll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fr</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sc</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<comment type="line">//#define endl "\n"</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vec</name></cpp:macro> <cpp:value>vector</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAXN</name> <init>= <expr><literal type="number">3e5</literal> <operator>+</operator> <literal type="number">47</literal></expr></init></decl>, <decl><type ref="prev"/><name>inf</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">47</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>string</name></type> <name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>vec</name><argument_list type="generic">&lt;<argument><expr><name><name>vec</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>a</name><argument_list>(<argument><expr><name>MAXN</name></expr></argument>, <argument><expr><call><name><name>vec</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><name><name>vec</name><argument_list type="generic">&lt;<argument><expr><name><name>vec</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>graf</name><parameter_list>(<parameter><decl><type><name>MAXN</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type> <name>read</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
    <macro><name>loop</name><argument_list>(<argument>i</argument>, <argument>n</argument>)</argument_list></macro> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <macro><name>loop</name><argument_list>(<argument>i</argument>, <argument>n</argument>)</argument_list></macro> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <macro><name>loop</name><argument_list>(<argument>i</argument>, <argument>n</argument>)</argument_list></macro> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

    <macro><name>loop</name><argument_list>(<argument>i</argument>, <argument>n - <literal type="number">1</literal></argument>)</argument_list></macro> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>p1</name></decl>, <decl><type ref="prev"/><name>p2</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>p1</name> <operator>&gt;&gt;</operator> <name>p2</name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>--</operator><name>p1</name></expr><operator>,</operator> <expr><operator>--</operator><name>p2</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>graf</name><index>[<expr><name>p1</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>graf</name><index>[<expr><name>p2</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>
}</block></function>

<decl_stmt><decl><type><name><name>vec</name><argument_list type="generic">&lt;<argument><expr><name><name>vec</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>dp</name><argument_list>(<argument><expr><name>MAXN</name></expr></argument>, <argument><expr><call><name><name>vec</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>p1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pr</name></decl></parameter>)</parameter_list> <block>{
    <for>for<control>(<init><decl><type><name>int</name></type> <name>p2</name> <range>: <expr><name><name>graf</name><index>[<expr><name>p1</name></expr>]</index></name></expr></range></decl></init>)</control> <block>{
        <if>if<condition>(<expr><name>p2</name> <operator>==</operator> <name>pr</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
        <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>p2</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>dp</name><index>[<expr><name>p1</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>dp</name><index>[<expr><name>p2</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>a</name><index>[<expr><name>p1</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dp</name><index>[<expr><name>p1</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>dp</name><index>[<expr><name>p2</name></expr>]</index><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>+</operator> <name><name>a</name><index>[<expr><name>p1</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dp</name><index>[<expr><name>p1</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>dp</name><index>[<expr><name>p2</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>a</name><index>[<expr><name>p1</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dp</name><index>[<expr><name>p1</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>dp</name><index>[<expr><name>p2</name></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <name><name>a</name><index>[<expr><name>p1</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dp</name><index>[<expr><name>p1</name></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>dp</name><index>[<expr><name>p2</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>a</name><index>[<expr><name>p1</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dp</name><index>[<expr><name>p1</name></expr>]</index><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>dp</name><index>[<expr><name>p2</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>a</name><index>[<expr><name>p1</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
        <return>return;</return>
    }</block></for>

    <expr_stmt><expr><name><name>dp</name><index>[<expr><name>p1</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>dp</name><index>[<expr><name>p1</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><index>[<expr><name>p1</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dp</name><index>[<expr><name>p1</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>dp</name><index>[<expr><name>p1</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><index>[<expr><name>p1</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dp</name><index>[<expr><name>p1</name></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>dp</name><index>[<expr><name>p1</name></expr>]</index><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><index>[<expr><name>p1</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
}</block></function>

<decl_stmt><decl><type><name><name>vec</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>cock</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vec</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>loh</name><argument_list>(<argument><expr><name>MAXN</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>p1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>loh</name><index>[<expr><name>p1</name></expr>]</index></name> <operator>=</operator> <name><name>cock</name><index>[<expr><name>h</name> <operator>%</operator> <literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>p2</name> <range>: <expr><name><name>graf</name><index>[<expr><name>p1</name></expr>]</index></name></expr></range></decl></init>)</control> <block>{
        <if>if<condition>(<expr><name>p2</name> <operator>==</operator> <name>pr</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
        <expr_stmt><expr><call><name>get</name><argument_list>(<argument><expr><name>p2</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>h</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
}</block></function>

<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list> <block>{
    <macro><name>loop</name><argument_list>(<argument>i</argument>, <argument>n</argument>)</argument_list></macro> <block>{
        <if>if<condition>(<expr><call><name>SZ</name><argument_list>(<argument><expr><name><name>graf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>
    }</block>

    <macro><name>loop</name><argument_list>(<argument>i</argument>, <argument>n</argument>)</argument_list></macro> <block>{
        <if>if<condition>(<expr><call><name>SZ</name><argument_list>(<argument><expr><name><name>graf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>as</name> <init>= <expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>ind</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <macro><name>loop</name><argument_list>(<argument>l</argument>, <argument><literal type="number">6</literal></argument>)</argument_list></macro> <if>if<condition>(<expr><name>as</name> <operator>&gt;</operator> <name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>l</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>as</name> <operator>=</operator> <name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>l</name></expr>]</index></name></expr><operator>,</operator> <expr><name>ind</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt></block></then></if>
            <if>if<condition>(<expr><name>ind</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cock</name> <operator>=</operator> <block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>;</expr_stmt></block></then></if>
            <if>if<condition>(<expr><name>ind</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cock</name> <operator>=</operator> <block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>;</expr_stmt></block></then></if>
            <if>if<condition>(<expr><name>ind</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cock</name> <operator>=</operator> <block>{<expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>;</expr_stmt></block></then></if>
            <if>if<condition>(<expr><name>ind</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cock</name> <operator>=</operator> <block>{<expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>;</expr_stmt></block></then></if>
            <if>if<condition>(<expr><name>ind</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cock</name> <operator>=</operator> <block>{<expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>;</expr_stmt></block></then></if>
            <if>if<condition>(<expr><name>ind</name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cock</name> <operator>=</operator> <block>{<expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>;</expr_stmt></block></then></if>
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>as</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>get</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <macro><name>loop</name><argument_list>(<argument>p</argument>, <argument>n</argument>)</argument_list></macro> <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>loh</name><index>[<expr><name>p</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr> ;</expr_stmt>
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>
    }</block>
}</block></function>

<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><name>CIN</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <comment type="line">//cin &gt;&gt; t;</comment>
    <while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition> <block>{
        <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></while>
}</block></function>
<comment type="block">/*

3
3 2 3
4 3 2
3 1 3
1 2
2 3

5
3 4 2 1 2
4 2 1 5 4
5 3 2 1 1
1 2
3 2
4 3
5 3

5
3 4 2 1 2
4 2 1 5 4
5 3 2 1 1
1 2
3 2
4 3
5 4
*/</comment>
</unit>
