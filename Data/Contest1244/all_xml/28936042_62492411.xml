<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28936042_62492411.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rap</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>s</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=s;i&lt;=n;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>drap</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>,<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=n;i&gt;=s;i--)</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N</name></cpp:macro> <cpp:value>100100</cpp:value></cpp:define>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>f</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>d</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name>head</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>cx</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>ts</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name><name>vis</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name><name>temps</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>nxt</name><index>[<expr><name>N</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>rap</name><argument_list>(<argument>k</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">2</literal></argument>)</argument_list></macro> <macro><name>rap</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro> <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>c</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
    <macro><name>rap</name><argument_list>(<argument>i</argument>,<argument><literal type="number">2</literal></argument>,<argument>n</argument>)</argument_list></macro><block>{
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>d</name><index>[<expr><name>x</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name><name>d</name><index>[<expr><name>y</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt> <if>if<condition>(<expr><name><name>d</name><index>[<expr><name>x</name></expr>]</index></name><operator>&gt;</operator><literal type="number">2</literal><operator>||</operator><name><name>d</name><index>[<expr><name>y</name></expr>]</index></name><operator>&gt;</operator><literal type="number">2</literal></expr>)</condition><then><block>{<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-1\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return>}</block></then></if>
        <expr_stmt><expr><name><name>nxt</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name><name>d</name><index>[<expr><name>x</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name>y</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>nxt</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><name><name>d</name><index>[<expr><name>y</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name>x</name></expr>;</expr_stmt>
    }</block>
    <macro><name>rap</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro> <if>if<condition>(<expr><name><name>d</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{<expr_stmt><expr><name>head</name><operator>=</operator><name>i</name></expr>;</expr_stmt> <break>break;</break>}</block></then></if>
    <expr_stmt><expr><name>x</name><operator>=</operator><name>head</name></expr>;</expr_stmt> <decl_stmt><decl><type><name>int</name></type> <name>fx</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>q</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> <while>while<condition>(<expr><name>x</name></expr>)</condition><block>{
        <expr_stmt><expr><name><name>cx</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>q</name></expr>]</index></name><operator>=</operator><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cx</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>q</name></expr>]</index></name><operator>=</operator><name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cx</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>q</name></expr>]</index></name><operator>=</operator><name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>q</name><operator>++</operator></expr>;</expr_stmt>
        <if>if<condition>(<expr><name><name>nxt</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><name>fx</name></expr>)</condition><then><block>{
            <expr_stmt><expr><name>fx</name><operator>=</operator><name>x</name></expr><operator>,</operator><expr><name>x</name><operator>=</operator><name><name>nxt</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
        }</block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><name>fx</name><operator>=</operator><name>x</name></expr><operator>,</operator><expr><name>x</name><operator>=</operator><name><name>nxt</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block></else></if>
    }</block></while>
    <expr_stmt><expr><name>ans</name><operator>=</operator><literal type="number">1000000000ll</literal><operator>*</operator><name>n</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>fk1</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>fk2</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <macro><name>rap</name><argument_list>(<argument>k1</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">2</literal></argument>)</argument_list></macro> <macro><name>rap</name><argument_list>(<argument>k2</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">2</literal></argument>)</argument_list></macro> <if>if<condition>(<expr><name>k1</name><operator>!=</operator><name>k2</name></expr>)</condition><then><block>{
        <expr_stmt><expr><name><name>temps</name><index>[<expr><name>k1</name></expr>]</index><index>[<expr><name>k2</name></expr>]</index></name><operator>=</operator><name><name>cx</name><index>[<expr><name>k1</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>cx</name><index>[<expr><name>k2</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>f1</name><init>=<expr><name>k1</name></expr></init></decl>,<decl><type ref="prev"/><name>f2</name><init>=<expr><name>k2</name></expr></init></decl>,<decl><type ref="prev"/><name>f3</name></decl>;</decl_stmt>
        <macro><name>rap</name><argument_list>(<argument>i</argument>,<argument><literal type="number">3</literal></argument>,<argument>n</argument>)</argument_list></macro><block>{
            <expr_stmt><expr><name>f3</name><operator>=</operator><literal type="number">3</literal><operator>-</operator><name>f1</name><operator>-</operator><name>f2</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>temps</name><index>[<expr><name>k1</name></expr>]</index><index>[<expr><name>k2</name></expr>]</index></name><operator>+=</operator><name><name>cx</name><index>[<expr><name>f3</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>f1</name><operator>=</operator><name>f2</name></expr><operator>,</operator><expr><name>f2</name><operator>=</operator><name>f3</name></expr>;</expr_stmt>
        }</block>
        <if>if<condition>(<expr><name>ans</name><operator>&gt;</operator><name><name>temps</name><index>[<expr><name>k1</name></expr>]</index><index>[<expr><name>k2</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ans</name><operator>=</operator><name><name>temps</name><index>[<expr><name>k1</name></expr>]</index><index>[<expr><name>k2</name></expr>]</index></name></expr><operator>,</operator><expr><name>fk1</name><operator>=</operator><name>k1</name></expr><operator>,</operator><expr><name>fk2</name><operator>=</operator><name>k2</name></expr>;</expr_stmt></block></then></if>
    }</block></then></if>
    <decl_stmt><decl><type><name>int</name></type> <name>fk3</name><init>=<expr><literal type="number">3</literal><operator>-</operator><name>fk1</name><operator>-</operator><name>fk2</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>x</name><operator>=</operator><name>head</name></expr>;</expr_stmt> <expr_stmt><expr><name>fx</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ts</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><name>fk1</name></expr>;</expr_stmt>
    <if>if<condition>(<expr><name><name>nxt</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><name>fx</name></expr>)</condition><then><block>{
        <expr_stmt><expr><name>fx</name><operator>=</operator><name>x</name></expr><operator>,</operator><expr><name>x</name><operator>=</operator><name><name>nxt</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    }</block></then>
    <else>else <block type="pseudo"><expr_stmt><expr><name>fx</name><operator>=</operator><name>x</name></expr><operator>,</operator><expr><name>x</name><operator>=</operator><name><name>nxt</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block></else></if>
    <expr_stmt><expr><name><name>ts</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><name>fk2</name></expr>;</expr_stmt>
    <if>if<condition>(<expr><name><name>nxt</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><name>fx</name></expr>)</condition><then><block>{
        <expr_stmt><expr><name>fx</name><operator>=</operator><name>x</name></expr><operator>,</operator><expr><name>x</name><operator>=</operator><name><name>nxt</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    }</block></then>
    <else>else <block type="pseudo"><expr_stmt><expr><name>fx</name><operator>=</operator><name>x</name></expr><operator>,</operator><expr><name>x</name><operator>=</operator><name><name>nxt</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block></else></if>
    
    <while>while<condition>(<expr><name>x</name></expr>)</condition><block>{
        <expr_stmt><expr><name><name>ts</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><name>fk3</name></expr>;</expr_stmt>
        <if>if<condition>(<expr><name><name>nxt</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><name>fx</name></expr>)</condition><then><block>{
            <expr_stmt><expr><name>fx</name><operator>=</operator><name>x</name></expr><operator>,</operator><expr><name>x</name><operator>=</operator><name><name>nxt</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
        }</block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><name>fx</name><operator>=</operator><name>x</name></expr><operator>,</operator><expr><name>x</name><operator>=</operator><name><name>nxt</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block></else></if>
        <expr_stmt><expr><name>fk1</name><operator>=</operator><name>fk2</name></expr><operator>,</operator><expr><name>fk2</name><operator>=</operator><name>fk3</name></expr>;</expr_stmt> <expr_stmt><expr><name>fk3</name><operator>=</operator><literal type="number">3</literal><operator>-</operator><name>fk1</name><operator>-</operator><name>fk2</name></expr>;</expr_stmt>
    }</block></while>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%I64d\n"</literal></expr></argument>,<argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>rap</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d "</literal></expr></argument>,<argument><expr><name><name>ts</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
