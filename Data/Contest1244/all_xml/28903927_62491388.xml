<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28903927_62491388.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRACE</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>oo</name></cpp:macro> <cpp:value>1000000000000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ull</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>pll</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M6</name></cpp:macro> <cpp:value>5000009</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M5</name></cpp:macro> <cpp:value>500009</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pi</name></cpp:macro> <cpp:value>3.14159265</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>epsilon</name></cpp:macro> <cpp:value>1e-6</cpp:value></cpp:define>
 
<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name><name>C1</name><index>[<expr><name>M5</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>C2</name><index>[<expr><name>M5</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>C3</name><index>[<expr><name>M5</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>deg</name><index>[<expr><name>M5</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>dp</name><index>[<expr><name>M5</name></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>out</name><index>[<expr><name>M5</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name><name>g</name><index>[<expr><name>M5</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>pre</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>cur</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>par</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>pre</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>auto</name></type> <name>u</name><range>: <expr><name><name>g</name><index>[<expr><name>cur</name></expr>]</index></name></expr></range></decl></init>)</control> <block>{
        <if>if<condition>(<expr><name>u</name><operator>!=</operator><name>par</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>u</name></expr></argument>,<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></for>
}</block></function>


<function><type><name>int</name></type>  <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">//init();</comment>
 
    <decl_stmt><decl><type><name>ll</name></type> <name>tc</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>t</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>,<decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
    <comment type="line">//cin&gt;&gt;tc;</comment>
    <while>while<condition>(<expr><name>t</name><operator>++</operator><operator>&lt;</operator><name>tc</name></expr>)</condition><block>{
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
        <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>C1</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
        <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>C2</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
        <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>C3</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
        <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
            <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>a</name><operator>&gt;&gt;</operator><name>b</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>g</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>deg</name><index>[<expr><name>a</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>g</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>deg</name><index>[<expr><name>b</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
        }</block></for>
        <decl_stmt><decl><type><name>ll</name></type> <name>flag</name><init>=<expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>d1</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
            <if>if<condition>(<expr><name><name>deg</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;</operator><literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>flag</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
            <if>if<condition>(<expr><name><name>deg</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>d1</name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></then></if>
        }</block></for>

        <if>if<condition>(<expr><name>flag</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>C1</name><index>[<expr><name>d1</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>C1</name><index>[<expr><name>d1</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>C2</name><index>[<expr><name>d1</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>C2</name><index>[<expr><name>d1</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>C3</name><index>[<expr><name>d1</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>C3</name><index>[<expr><name>d1</name></expr>]</index></name></expr>;</expr_stmt>

            <comment type="line">//cout&lt;&lt;d1&lt;&lt;" ";</comment>

            <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
                <comment type="line">//cout&lt;&lt;pre[i]&lt;&lt;" ";</comment>
                <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>C1</name><index>[<expr><name><name>pre</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>+</operator><name><name>dp</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>C1</name><index>[<expr><name><name>pre</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>+</operator><name><name>dp</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>C2</name><index>[<expr><name><name>pre</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>+</operator><name><name>dp</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>C2</name><index>[<expr><name><name>pre</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>+</operator><name><name>dp</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>C3</name><index>[<expr><name><name>pre</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>+</operator><name><name>dp</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>C3</name><index>[<expr><name><name>pre</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>+</operator><name><name>dp</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

            }</block></for>

            <decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><name><name>dp</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><name>a</name><operator>=</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name>b</name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt>
            <if>if<condition>(<expr><name><name>dp</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>&lt;</operator><name>ans</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>ans</name> <operator>=</operator> <name><name>dp</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>a</name><operator>=</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name>b</name><operator>=</operator><literal type="number">3</literal></expr>;</expr_stmt>
            }</block></then></if>
            <if>if<condition>(<expr><name><name>dp</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>&lt;</operator><name>ans</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>ans</name> <operator>=</operator> <name><name>dp</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>a</name><operator>=</operator><literal type="number">2</literal></expr><operator>,</operator><expr><name>b</name><operator>=</operator><literal type="number">3</literal></expr>;</expr_stmt>
            }</block></then></if>
            <if>if<condition>(<expr><name><name>dp</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&lt;</operator><name>ans</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>ans</name> <operator>=</operator> <name><name>dp</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>a</name><operator>=</operator><literal type="number">2</literal></expr><operator>,</operator><expr><name>b</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
            }</block></then></if>
            <if>if<condition>(<expr><name><name>dp</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&lt;</operator><name>ans</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>ans</name> <operator>=</operator> <name><name>dp</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>a</name><operator>=</operator><literal type="number">3</literal></expr><operator>,</operator><expr><name>b</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
            }</block></then></if>
            <if>if<condition>(<expr><name><name>dp</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&lt;</operator><name>ans</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>ans</name> <operator>=</operator> <name><name>dp</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>a</name><operator>=</operator><literal type="number">3</literal></expr><operator>,</operator><expr><name>b</name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><literal type="string">"\n"</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>out</name><index>[<expr><name><name>pre</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>=</operator><name>a</name></expr><operator>,</operator> <expr><name><name>out</name><index>[<expr><name><name>pre</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr>]</index></name><operator>=</operator><name>b</name></expr>;</expr_stmt>
            <for>for<control>(<init><expr><name>i</name><operator>=</operator><name>n</name><operator>-</operator><literal type="number">3</literal></expr>;</init><condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition><incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{
                <comment type="line">//cout&lt;&lt;pre[i]&lt;&lt;" "&lt;&lt;a&lt;&lt;" "&lt;&lt;b&lt;&lt;" -&gt; ";</comment>
                <if>if<condition>(<expr><name>a</name><operator>==</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>b</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>out</name><index>[<expr><name><name>pre</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>=</operator><literal type="number">3</literal></expr><operator>,</operator><expr><name>a</name><operator>=</operator><name>b</name></expr><operator>,</operator><expr><name>b</name><operator>=</operator><literal type="number">3</literal></expr>;</expr_stmt></block></then>
                <elseif>else <if>if<condition>(<expr><name>a</name><operator>==</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>b</name><operator>==</operator><literal type="number">3</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>out</name><index>[<expr><name><name>pre</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>=</operator><literal type="number">2</literal></expr><operator>,</operator><expr><name>a</name><operator>=</operator><name>b</name></expr><operator>,</operator><expr><name>b</name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt></block></then></if></elseif>
                <elseif>else <if>if<condition>(<expr><name>a</name><operator>==</operator><literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>b</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>out</name><index>[<expr><name><name>pre</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>=</operator><literal type="number">3</literal></expr><operator>,</operator><expr><name>a</name><operator>=</operator><name>b</name></expr><operator>,</operator><expr><name>b</name><operator>=</operator><literal type="number">3</literal></expr>;</expr_stmt></block></then></if></elseif>
                <elseif>else <if>if<condition>(<expr><name>a</name><operator>==</operator><literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>b</name><operator>==</operator><literal type="number">3</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>out</name><index>[<expr><name><name>pre</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name>a</name><operator>=</operator><name>b</name></expr><operator>,</operator><expr><name>b</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if></elseif>
                <elseif>else <if>if<condition>(<expr><name>a</name><operator>==</operator><literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>b</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>out</name><index>[<expr><name><name>pre</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>=</operator><literal type="number">2</literal></expr><operator>,</operator><expr><name>a</name><operator>=</operator><name>b</name></expr><operator>,</operator><expr><name>b</name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt></block></then></if></elseif>
                <elseif>else <if>if<condition>(<expr><name>a</name><operator>==</operator><literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>b</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>out</name><index>[<expr><name><name>pre</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name>a</name><operator>=</operator><name>b</name></expr><operator>,</operator><expr><name>b</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if></elseif></if>

            }</block></for>
            <comment type="line">//cout&lt;&lt;"\n";</comment>
            <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;&lt;</operator><literal type="string">" "</literal></expr>;</expr_stmt></block></for>
        }</block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"-1"</literal></expr>;</expr_stmt></block></else></if>
    }</block></while>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

</unit>
