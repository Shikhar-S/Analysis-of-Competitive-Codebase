<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28936301_62489625.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name><init>=<expr><literal type="number">2e5</literal><operator>+</operator><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>s1</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>f</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>g</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>k</name></decl>;</decl_stmt>
<function><type><name>char</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list><block>{
	<if>if <condition>(<expr><name>c</name><operator>==</operator><literal type="char">'W'</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="char">'B'</literal></expr>;</return></block></then> <else>else <block type="pseudo"><return>return <expr><literal type="char">'W'</literal></expr>;</return></block></else></if>
}</block></function>
<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name><name>s</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>f</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block></then> <else>else <block type="pseudo"><expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></else></if></block></for>
	<expr_stmt><expr><name><name>g</name><index>[<expr><name>n</name></expr>]</index></name><operator>=</operator><name>n</name></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">1</literal></expr>;</condition><incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block type="pseudo"><if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name><name>s</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>g</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>g</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block></then> <else>else <block type="pseudo"><expr_stmt><expr><name><name>g</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></else></if></block></for>
	<decl_stmt><decl><type><name>bool</name></type> <name>p</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<if>if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>!=</operator><name><name>s</name><index>[<expr><name>n</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>p</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>l</name><init>=<expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>,<decl><type ref="prev"/><name>r</name><init>=<expr><name><name>g</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>,<decl><type ref="prev"/><name>lsum</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>rsum</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<if>if <condition>(<expr><name>l</name><operator>==</operator><literal type="number">1</literal><operator>&amp;&amp;</operator><name>p</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>lsum</name><operator>=</operator><name>n</name><operator>-</operator><name><name>f</name><index>[<expr><name>n</name></expr>]</index></name><operator>+</operator><name>i</name><operator>-</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name>l</name><operator>=</operator><name><name>f</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt></block></then> <else>else <block type="pseudo"><expr_stmt><expr><name>lsum</name><operator>=</operator><name>i</name><operator>-</operator><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></else></if> 
	<if>if <condition>(<expr><name>r</name><operator>==</operator><name>n</name><operator>&amp;&amp;</operator><name>p</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>rsum</name><operator>=</operator><name><name>g</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-</operator><literal type="number">1</literal><operator>+</operator><name>n</name><operator>-</operator><name>i</name></expr><operator>,</operator><expr><name>r</name><operator>=</operator><name><name>g</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block></then> <else>else <block type="pseudo"><expr_stmt><expr><name>rsum</name><operator>=</operator><name><name>g</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name>i</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
	<if>if <condition>(<expr><name>lsum</name><operator>&lt;=</operator><name>rsum</name></expr>)</condition><then> <block>{
	<if>if <condition>(<expr><name>lsum</name><operator>+</operator><literal type="number">1</literal><operator>&lt;=</operator><name>k</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>s1</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>s</name><index>[<expr><name>l</name></expr>]</index></name></expr>;</expr_stmt></block></then> <else>else <block>{
	<if>if <condition>(<expr><name>k</name><operator>&amp;</operator><literal type="number">1ll</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>s1</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><call><name>get</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then> <else>else <block type="pseudo"><expr_stmt><expr><name><name>s1</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></else></if>
	}</block></else></if>
	}</block></then> <else>else <block>{
	<if>if <condition>(<expr><name>rsum</name><operator>+</operator><literal type="number">1</literal><operator>&lt;=</operator><name>k</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>s1</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>s</name><index>[<expr><name>r</name></expr>]</index></name></expr>;</expr_stmt></block></then> <else>else <block>{
	<if>if <condition>(<expr><name>k</name><operator>&amp;</operator><literal type="number">1ll</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>s1</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><call><name>get</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then> <else>else <block type="pseudo"><expr_stmt><expr><name><name>s1</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></else></if>
	}</block></else></if>
	}</block></else></if> 
	}</block></for>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>,<argument><expr><name>s1</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>,<argument><expr><name>s</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>p</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<if>if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>==</operator><name><name>s</name><index>[<expr><name>n</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>p</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name><name>s</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>p</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></then></if></block></for>
	<if>if <condition>(<expr><name>p</name></expr>)</condition><then> <block>{
	<if>if <condition>(<expr><name>k</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><call><name>get</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	}</block></then></if>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>,<argument><expr><name>s</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then> <else>else <block>{
	<expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>
}</block></function></unit>
