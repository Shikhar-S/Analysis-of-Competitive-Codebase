<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28935923_62489552.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INL</name></cpp:macro> <cpp:value>inline</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REG</name></cpp:macro> <cpp:value>register</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DB</name></cpp:macro> <cpp:value>double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDB</name></cpp:macro> <cpp:value>long double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ULL</name></cpp:macro> <cpp:value>unsigned long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RPT</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (REG int i=(x);i&lt;(y);i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRPT</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (REG int i=(x);i&gt;(y);i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MST</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset((a),(b),sizeof(a))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MRK</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>cout&lt;&lt;"Mark"&lt;&lt;endl;</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WRT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout&lt;&lt;#x&lt;&lt;" = "&lt;&lt;(x)&lt;&lt;endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINK</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>graph</name></type></parameter>,<parameter><type><name>pos</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (REG int i=graph.head[pos];i;i=graph.next[i])</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXN</name></cpp:macro> <cpp:value>100100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXM</name></cpp:macro> <cpp:value>201000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INF</name></cpp:macro> <cpp:value>0x3f3f3f3f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLINF</name></cpp:macro> <cpp:value>0x3f3f3f3f3f3f3f3f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EPS</name></cpp:macro> <cpp:value>1e-5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>


<class>class <name>GRAPH</name> 
<block>{<private type="default">
	</private><public>public:
		<decl_stmt><decl><type><name>int</name></type> <name><name>to</name><index>[<expr><name>MAXM</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>next</name><index>[<expr><name>MAXM</name></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name><name>head</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>cnt</name></decl>;</decl_stmt>
		
	<constructor><name>GRAPH</name><parameter_list>()</parameter_list>
	<block>{
		<expr_stmt><expr><name>cnt</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
	}</block></constructor> 
	
	<function><type><name>void</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><name><name>next</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>=</operator><name><name>head</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>to</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>=</operator><name>y</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>head</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><name>cnt</name><operator>++</operator></expr>;</expr_stmt>
	}</block></function>
</public>}</block>;</class>

<decl_stmt><decl><type><name>GRAPH</name></type> <name>g</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">101000</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>deg</name><index>[<expr><literal type="number">101000</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LL</name></type> <name><name>dp</name><index>[<expr><literal type="number">16</literal></expr>]</index><index>[<expr><literal type="number">101000</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>lst</name><index>[<expr><literal type="number">16</literal></expr>]</index><index>[<expr><literal type="number">101000</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>col</name><index>[<expr><literal type="number">101000</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>f</name></decl></parameter>)</parameter_list>
<block>{
	<expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>LINK</name><argument_list>(<argument>i</argument>,<argument>g</argument>,<argument>pos</argument>)</argument_list></macro>
		<if>if <condition>(<expr><name><name>g</name><operator>.</operator><name>to</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name>f</name></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>to</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>tmp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><for>for <control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
			<block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for></block></for>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>g</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>g</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>y</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>deg</name><index>[<expr><name>x</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>deg</name><index>[<expr><name>y</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
		<if>if <condition>(<expr><name><name>deg</name><index>[<expr><name>x</name></expr>]</index></name><operator>&gt;=</operator><literal type="number">3</literal> <operator>||</operator> <name><name>deg</name><index>[<expr><name>y</name></expr>]</index></name><operator>&gt;=</operator><literal type="number">3</literal></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		}</block></then></if>
	}</block></for>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><if>if <condition>(<expr><name><name>deg</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>tmp</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
			<break>break;</break>
		}</block></then></if></block></for>
	<expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>,<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MST</name><argument_list>(<argument><expr><name>dp</name></expr></argument>,<argument><expr><name>INF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>pos</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	<comment type="line">//WRT(v[0]);</comment>
	<for>for <control>(<init><decl><type><name>auto</name></type> <name>p</name><range>:<expr><name>v</name></expr></range></decl></init>)</control>
	<block>{
		<expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{
			<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><literal type="number">16</literal></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
				<block type="pseudo"><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>j</name><operator>%</operator><literal type="number">4</literal><operator>)</operator><operator>!=</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>j</name><operator>/</operator><literal type="number">4</literal><operator>)</operator><operator>!=</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><then>
				<block>{
					<if>if <condition>(<expr><name><name>dp</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>pos</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>p</name></expr>]</index></name><operator>&lt;</operator><name><name>dp</name><index>[<expr><operator>(</operator><operator>(</operator><name>j</name><operator>%</operator><literal type="number">4</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">2</literal><operator>)</operator><operator>+</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>pos</name></expr>]</index></name></expr>)</condition><then>
					<block>{
						<expr_stmt><expr><name><name>dp</name><index>[<expr><operator>(</operator><operator>(</operator><name>j</name><operator>%</operator><literal type="number">4</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">2</literal><operator>)</operator><operator>+</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>pos</name></expr>]</index></name><operator>=</operator><name><name>dp</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>pos</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>p</name></expr>]</index></name></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>lst</name><index>[<expr><operator>(</operator><operator>(</operator><name>j</name><operator>%</operator><literal type="number">4</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">2</literal><operator>)</operator><operator>+</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>pos</name></expr>]</index></name><operator>=</operator><name>j</name></expr>;</expr_stmt>
					}</block></then></if>
				}</block></then></if></block></for>
		}</block></for>
	}</block></for>
	<decl_stmt><decl><type><name>LL</name></type> <name>mi</name><init>=<expr><name>LLINF</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">16</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><if>if <condition>(<expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>n</name></expr>]</index></name><operator>&lt;</operator><name>mi</name></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>mi</name><operator>=</operator><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>r</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
		}</block></then></if></block></for>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>mi</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>pos</name><operator>=</operator><name>n</name></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition><incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
	<block>{
		<expr_stmt><expr><name><name>col</name><index>[<expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>=</operator><name>r</name><operator>%</operator><literal type="number">4</literal></expr>;</expr_stmt>
	<comment type="line">//col[v[0]]=r/4;</comment>
		<expr_stmt><expr><name>r</name><operator>=</operator><name><name>lst</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><name>pos</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>pos</name><operator>--</operator></expr>;</expr_stmt>
	}</block></for>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>col</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;&lt;</operator><literal type="char">' '</literal></expr>;</expr_stmt></block></for>
	<return>return <expr><operator>~</operator><operator>~</operator><operator>(</operator><literal type="number">0</literal><operator>^</operator><name>_</name><operator>^</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
}</block></function>
</unit>
