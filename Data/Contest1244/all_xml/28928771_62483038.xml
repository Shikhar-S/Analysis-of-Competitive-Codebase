<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28928771_62483038.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<struct>struct <name>Edge</name> <block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>to</name></decl>, <decl><type ref="prev"/><name>next</name></decl>;</decl_stmt>
</public>}</block><decl><name><name>es</name><index>[<expr><literal type="number">200010</literal></expr>]</index></name></decl>;</struct>
<decl_stmt><decl><type><name>int</name></type> <name>te</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name><name>first</name><index>[<expr><literal type="number">100010</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>addE</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
	<expr_stmt><expr><name>te</name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>es</name><index>[<expr><name>te</name></expr>]</index></name><operator>.</operator><name>to</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>es</name><index>[<expr><name>te</name></expr>]</index></name><operator>.</operator><name>next</name> <operator>=</operator> <name><name>first</name><index>[<expr><name>a</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>first</name><index>[<expr><name>a</name></expr>]</index></name> <operator>=</operator> <name>te</name></expr>;</expr_stmt>
}</block></function>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>cost</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">100010</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>deg</name><index>[<expr><literal type="number">100010</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>col</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">100010</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>ll</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fa</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pre2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pre1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col2</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>to</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>e</name> <init>= <expr><name><name>first</name><index>[<expr><name>p</name></expr>]</index></name></expr></init></decl>;</init> <condition><expr><name>e</name></expr>;</condition> <incr><expr><name>e</name> <operator>=</operator> <name><name>es</name><index>[<expr><name>e</name></expr>]</index></name><operator>.</operator><name>next</name></expr></incr>)</control>
	<block>{
		<expr_stmt><expr><name>to</name> <operator>=</operator> <name><name>es</name><index>[<expr><name>e</name></expr>]</index></name><operator>.</operator><name>to</name></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>to</name> <operator>==</operator> <name>fa</name></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>to</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<continue>continue;</continue>
		}</block></then>
		<else>else <block type="pseudo"><break>break;</break></block></else></if>
	}</block></for>
	<expr_stmt><expr><name><name>col</name><index>[<expr><name>col1</name></expr>]</index><index>[<expr><name>col2</name></expr>]</index><index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal> <operator>-</operator> <name>pre1</name> <operator>-</operator> <name>pre2</name></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>to</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name><name>cost</name><index>[<expr><name><name>col</name><index>[<expr><name>col1</name></expr>]</index><index>[<expr><name>col2</name></expr>]</index><index>[<expr><name>p</name></expr>]</index></name></expr>]</index><index>[<expr><name>p</name></expr>]</index></name></expr>;</return></block></then></if>
	<decl_stmt><decl><type><name>ll</name></type> <name>ret</name> <init>= <expr><call><name>dfs</name><argument_list>(<argument><expr><name>to</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>pre1</name></expr></argument>, <argument><expr><name><name>col</name><index>[<expr><name>col1</name></expr>]</index><index>[<expr><name>col2</name></expr>]</index><index>[<expr><name>p</name></expr>]</index></name></expr></argument>, <argument><expr><name>col1</name></expr></argument>, <argument><expr><name>col2</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>cost</name><index>[<expr><name><name>col</name><index>[<expr><name>col1</name></expr>]</index><index>[<expr><name>col2</name></expr>]</index><index>[<expr><name>p</name></expr>]</index></name></expr>]</index><index>[<expr><name>p</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<return>return <expr><name>ret</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><name>ll</name></type> <name>ans</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ansi</name></decl>, <decl><type ref="prev"/><name>ansj</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>getdp</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>s2</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>e</name> <init>= <expr><name><name>first</name><index>[<expr><name>s</name></expr>]</index></name></expr></init></decl>;</init> <condition><expr><name>e</name></expr>;</condition> <incr><expr><name>e</name> <operator>=</operator> <name><name>es</name><index>[<expr><name>e</name></expr>]</index></name><operator>.</operator><name>next</name></expr></incr>)</control>
	<block>{
		<expr_stmt><expr><name>s2</name> <operator>=</operator> <name><name>es</name><index>[<expr><name>e</name></expr>]</index></name><operator>.</operator><name>to</name></expr>;</expr_stmt>
		<break>break;</break>
	}</block></for>
	<decl_stmt><decl><type><name>int</name></type> <name>s3</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>e</name> <init>= <expr><name><name>first</name><index>[<expr><name>s2</name></expr>]</index></name></expr></init></decl>;</init> <condition><expr><name>e</name></expr>;</condition> <incr><expr><name>e</name> <operator>=</operator> <name><name>es</name><index>[<expr><name>e</name></expr>]</index></name><operator>.</operator><name>next</name></expr></incr>)</control>
	<block>{
		<expr_stmt><expr><name>s3</name> <operator>=</operator> <name><name>es</name><index>[<expr><name>e</name></expr>]</index></name><operator>.</operator><name>to</name></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>s3</name> <operator>==</operator> <name>s</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then>
		<else>else <block type="pseudo"><break>break;</break></block></else></if>
	}</block></for>
	<expr_stmt><expr><name>ans</name> <operator>=</operator> <literal type="number">1e18</literal></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
		<block>{
			<if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>j</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
			<expr_stmt><expr><name><name>col</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>s</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr><operator>,</operator> <expr><name><name>col</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>s2</name></expr>]</index></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>ll</name></type> <name>tmp</name> <init>= <expr><call><name>dfs</name><argument_list>(<argument><expr><name>s3</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>ans</name> <operator>&gt;</operator> <name>tmp</name> <operator>+</operator> <name><name>cost</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>s</name></expr>]</index></name> <operator>+</operator> <name><name>cost</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>s2</name></expr>]</index></name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name>ansi</name> <operator>=</operator> <name>i</name></expr><operator>,</operator> <expr><name>ansj</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>ans</name> <operator>=</operator> <name>tmp</name> <operator>+</operator> <name><name>cost</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>s</name></expr>]</index></name> <operator>+</operator> <name><name>cost</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>s2</name></expr>]</index></name></expr>;</expr_stmt>
			}</block></then></if>
		}</block></for></block></for>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>col</name><index>[<expr><name>ansi</name></expr>]</index><index>[<expr><name>ansj</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>cost</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for></block></for>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>addE</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>addE</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>deg</name><index>[<expr><name>a</name></expr>]</index></name><operator>++</operator></expr><operator>,</operator> <expr><name><name>deg</name><index>[<expr><name>b</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
	}</block></for>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><if>if <condition>(<expr><name><name>deg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		}</block></then></if></block></for>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><if>if <condition>(<expr><name><name>deg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><call><name>getdp</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></block></for>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
