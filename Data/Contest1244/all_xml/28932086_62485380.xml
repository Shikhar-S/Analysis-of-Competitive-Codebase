<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28932086_62485380.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MN</name><init>=<expr><literal type="number">101010</literal></expr></init></decl>;</decl_stmt>
<struct>struct <name>Ed</name><block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>to</name></decl>,<decl><type ref="prev"/><name>ne</name></decl>;</decl_stmt>
</public>}</block><decl><name><name>e</name><index>[<expr><name>MN</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name></decl>;</struct>
<decl_stmt><decl><type><name>int</name></type> <name><name>cost</name><index>[<expr><name>MN</name></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>d</name><index>[<expr><name>MN</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>first</name><index>[<expr><name>MN</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name>id</name></decl>,<decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>adde</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fr</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>to</name></decl></parameter>)</parameter_list>
<block>{
	<expr_stmt><expr><name><name>e</name><index>[<expr><operator>++</operator><name>id</name></expr>]</index></name><operator>.</operator><name>to</name><operator>=</operator><name>to</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>e</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>ne</name><operator>=</operator><name><name>first</name><index>[<expr><name>fr</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>first</name><index>[<expr><name>fr</name></expr>]</index></name><operator>=</operator><name>id</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>d</name><index>[<expr><name>fr</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
}</block></function>
<decl_stmt><decl><type><name>int</name></type> <name><name>ca</name><index>[<expr><name>MN</name></expr>]</index><index>[<expr><literal type="number">7</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>minn</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cnt</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>fa</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>nc</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>qc</name></decl></parameter>,<parameter><decl><type><name>long</name> <name>long</name></type> <name>nowcost</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>ges</name></decl></parameter>)</parameter_list>
<block>{
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name><name>first</name><index>[<expr><name>p</name></expr>]</index></name></expr></init></decl>;</init><condition><expr><name>i</name></expr>;</condition><incr><expr><name>i</name><operator>=</operator><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ne</name></expr></incr>)</control>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>to</name><init>=<expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>to</name></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>to</name><operator>==</operator><name>fa</name></expr>)</condition><then>
			<block type="pseudo"><continue>continue;</continue></block></then></if>
		<expr_stmt><expr><name><name>ca</name><index>[<expr><name>to</name></expr>]</index><index>[<expr><name>cnt</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">6</literal><operator>-</operator><name>nc</name><operator>-</operator><name>qc</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>to</name></expr></argument>,<argument><expr><name>p</name></expr></argument>,<argument><expr><literal type="number">6</literal><operator>-</operator><name>nc</name><operator>-</operator><name>qc</name></expr></argument>,<argument><expr><name>nc</name></expr></argument>,<argument><expr><literal type="number">1ll</literal><operator>*</operator><name>nowcost</name><operator>+</operator><name><name>cost</name><index>[<expr><name>to</name></expr>]</index><index>[<expr><literal type="number">6</literal><operator>-</operator><name>nc</name><operator>-</operator><name>qc</name></expr>]</index></name></expr></argument>,<argument><expr><name>ges</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<if>if<condition>(<expr><name>ges</name><operator>==</operator><name>n</name></expr>)</condition><then>
	<block>{
<comment type="line">//		cout&lt;&lt;nowcost&lt;&lt;'*'&lt;&lt;endl;</comment>
		<expr_stmt><expr><name><name>minn</name><index>[<expr><operator>++</operator><name>cnt</name></expr>]</index></name><operator>=</operator><name>nowcost</name></expr>;</expr_stmt>
		<return>return;</return>
	}</block></then></if>
}</block></function>
<function><type><name>void</name></type> <name>fz</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fr</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>to</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>fc</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>nc</name></decl></parameter>)</parameter_list>
<block>{
	<expr_stmt><expr><name><name>ca</name><index>[<expr><name>fr</name></expr>]</index><index>[<expr><name>cnt</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name>fc</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ca</name><index>[<expr><name>to</name></expr>]</index><index>[<expr><name>cnt</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name>nc</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>fr</name></expr></argument>,<argument><expr><name>to</name></expr></argument>,<argument><expr><name>fc</name></expr></argument>,<argument><expr><name>nc</name></expr></argument>,<argument><expr><name><name>cost</name><index>[<expr><name>fr</name></expr>]</index><index>[<expr><name>fc</name></expr>]</index></name><operator>+</operator><name><name>cost</name><index>[<expr><name>to</name></expr>]</index><index>[<expr><name>nc</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>cost</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>cost</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>cost</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>u</name></decl>,<decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>u</name><operator>&gt;&gt;</operator><name>v</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>adde</name><argument_list>(<argument><expr><name>u</name></expr></argument>,<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>adde</name><argument_list>(<argument><expr><name>v</name></expr></argument>,<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<decl_stmt><decl><type><name>int</name></type> <name>fi</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>se</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><if>if<condition>(<expr><name><name>d</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>fi</name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></then>
		<elseif>else <if>if<condition>(<expr><name><name>d</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;</operator><literal type="number">2</literal></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>-</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		}</block></then></if></elseif></if></block></for>

	<expr_stmt><expr><name>se</name><operator>=</operator><name><name>e</name><index>[<expr><name><name>first</name><index>[<expr><name>fi</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>to</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fz</name><argument_list>(<argument><expr><name>se</name></expr></argument>,<argument><expr><name>fi</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fz</name><argument_list>(<argument><expr><name>se</name></expr></argument>,<argument><expr><name>fi</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fz</name><argument_list>(<argument><expr><name>se</name></expr></argument>,<argument><expr><name>fi</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fz</name><argument_list>(<argument><expr><name>se</name></expr></argument>,<argument><expr><name>fi</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fz</name><argument_list>(<argument><expr><name>se</name></expr></argument>,<argument><expr><name>fi</name></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fz</name><argument_list>(<argument><expr><name>se</name></expr></argument>,<argument><expr><name>fi</name></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>minp</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">6</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<if>if<condition>(<expr><name><name>minn</name><index>[<expr><name>minp</name></expr>]</index></name><operator>&gt;</operator><name><name>minn</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>minp</name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></then></if>
	}</block></for>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>minn</name><index>[<expr><name>minp</name></expr>]</index></name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>ca</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>minp</name></expr>]</index></name><operator>&lt;&lt;</operator><literal type="char">' '</literal></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
