<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28899114_62481161.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_FORTIFY_SOURCE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><cpp:literal>"Ofast"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><cpp:literal>"no-stack-protector"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><cpp:literal>"unroll-loops"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>target</name><name>(</name><cpp:literal>"sse,sse2,sse3,ssse3,popcnt,abm,mmx,tune=native"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><cpp:literal>"fast-math"</cpp:literal><name>)</name></cpp:pragma>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>int32_t</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>all</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name> <argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>all</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>all</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>all</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
    <decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>graph</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>x</name> <operator>&gt;&gt;</operator> <name>y</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>x</name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>y</name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>graph</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>graph</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><name><name>graph</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"-1\n"</literal></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        }</block></then></if>
    }</block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">1e18</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>ans</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>st</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>st</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>st</name><operator>++</operator></expr></incr>)</control> <block>{
        <if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><name><name>graph</name><index>[<expr><name>st</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><then>
            <block type="pseudo"><continue>continue;</continue></block></then></if>
        <decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><name>st</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><name><name>graph</name><index>[<expr><name>st</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>fir</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>fir</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>fir</name><operator>++</operator></expr></incr>)</control> <block>{
            <for>for <control>(<init><decl><type><name>int</name></type> <name>sec</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>sec</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>sec</name><operator>++</operator></expr></incr>)</control> <block>{
                <for>for <control>(<init><decl><type><name>int</name></type> <name>thir</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>thir</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>thir</name><operator>++</operator></expr></incr>)</control> <block>{
                    <if>if <condition>(<expr><name>fir</name> <operator>!=</operator> <name>sec</name> <operator>&amp;&amp;</operator> <name>fir</name> <operator>!=</operator> <name>thir</name> <operator>&amp;&amp;</operator> <name>sec</name> <operator>!=</operator> <name>thir</name></expr>)</condition><then> <block>{
                        <comment type="line">//cout &lt;&lt; "aaaaaaaaaaa\n";</comment>
                        <decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>num</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
                        <expr_stmt><expr><name><name>num</name><index>[<expr><name>a</name></expr>]</index></name> <operator>=</operator> <name>fir</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>num</name><index>[<expr><name>b</name></expr>]</index></name> <operator>=</operator> <name>sec</name></expr>;</expr_stmt>
                        <decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
                        <if>if <condition>(<expr><name><name>graph</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>st</name></expr>)</condition><then>
                            <block type="pseudo"><expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>graph</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block></then>
                        <else>else
                            <block type="pseudo"><expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>graph</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block></else></if>
                        <expr_stmt><expr><name><name>num</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <name>thir</name></expr>;</expr_stmt>
                        <decl_stmt><decl><type><name>int</name></type> <name>a1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>b1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>c1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><name>a1</name> <operator>+=</operator> <name>a</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>b1</name> <operator>+=</operator> <name>b</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>c1</name> <operator>+=</operator> <name>c</name></expr>;</expr_stmt>
                        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
                            <comment type="line">//cout &lt;&lt; a &lt;&lt; " " &lt;&lt; b &lt;&lt; " " &lt;&lt; c &lt;&lt; endl;</comment>
                            <decl_stmt><decl><type><name>int</name></type> <name>d1</name></decl>;</decl_stmt>
                            <if>if <condition>(<expr><name><name>graph</name><index>[<expr><name>c1</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>b1</name> <operator>||</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>graph</name><index>[<expr><name>c1</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
                                <block type="pseudo"><expr_stmt><expr><name>d1</name> <operator>=</operator> <name><name>graph</name><index>[<expr><name>c1</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block></then>
                            <else>else
                                <block type="pseudo"><expr_stmt><expr><name>d1</name> <operator>=</operator> <name><name>graph</name><index>[<expr><name>c1</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block></else></if>
                            <if>if <condition>(<expr><name><name>num</name><index>[<expr><name>b1</name></expr>]</index></name> <operator>!=</operator> <name>fir</name> <operator>&amp;&amp;</operator> <name><name>num</name><index>[<expr><name>c1</name></expr>]</index></name> <operator>!=</operator> <name>fir</name></expr>)</condition><then>
                                <block type="pseudo"><expr_stmt><expr><name><name>num</name><index>[<expr><name>d1</name></expr>]</index></name> <operator>=</operator> <name>fir</name></expr>;</expr_stmt></block></then>
                            <elseif>else <if>if <condition>(<expr><name><name>num</name><index>[<expr><name>b1</name></expr>]</index></name> <operator>!=</operator> <name>sec</name> <operator>&amp;&amp;</operator> <name><name>num</name><index>[<expr><name>c1</name></expr>]</index></name> <operator>!=</operator> <name>sec</name></expr>)</condition><then>
                                <block type="pseudo"><expr_stmt><expr><name><name>num</name><index>[<expr><name>d1</name></expr>]</index></name> <operator>=</operator> <name>sec</name></expr>;</expr_stmt></block></then></if></elseif>
                            <else>else
                                <block type="pseudo"><expr_stmt><expr><name><name>num</name><index>[<expr><name>d1</name></expr>]</index></name> <operator>=</operator> <name>thir</name></expr>;</expr_stmt></block></else></if>
                            <expr_stmt><expr><name>a1</name> <operator>=</operator> <name>b1</name></expr>;</expr_stmt>
                            <expr_stmt><expr><name>b1</name> <operator>=</operator> <name>c1</name></expr>;</expr_stmt>
                            <expr_stmt><expr><name>c1</name> <operator>=</operator> <name>d1</name></expr>;</expr_stmt>
                        }</block></for>
                        <decl_stmt><decl><type><name>int</name></type> <name>lol</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
                            <block type="pseudo"><expr_stmt><expr><name>lol</name> <operator>+=</operator> <name><name>all</name><index>[<expr><name><name>num</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
                        <if>if <condition>(<expr><name>lol</name> <operator>&lt;</operator> <name>res</name></expr>)</condition><then> <block>{
                            <expr_stmt><expr><name>res</name> <operator>=</operator> <name>lol</name></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                            <for>for <control>(<init><decl><type><name>auto</name></type> <name>el</name> <range>: <expr><name>num</name></expr></range></decl></init>)</control>
                                <block type="pseudo"><expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
                        }</block></then></if>
                    }</block></then></if>
                }</block></for>
            }</block></for>
        }</block></for>
    }</block></for>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>res</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>auto</name></type> <name>el</name> <range>: <expr><name>ans</name></expr></range></decl></init>)</control>
        <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>el</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
