<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28925463_62486766.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>M</name><init>=<expr><literal type="number">2e5</literal><operator>+</operator><literal type="number">5</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>K</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><name>M</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>tmp</name><index>[<expr><name>M</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>Operator</name><parameter_list>()</parameter_list>
<block>{
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>l</name><init>=<expr><ternary><condition><expr><name>i</name><operator>==</operator><literal type="number">1</literal></expr>?</condition><then><expr><name>n</name></expr></then><else>:<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>r</name><init>=<expr><ternary><condition><expr><name>i</name><operator>==</operator><name>n</name></expr>?</condition><then><expr><literal type="number">1</literal></expr></then><else>:<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>cnt</name><init>=<expr><operator>(</operator><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'W'</literal><operator>)</operator><operator>+</operator><operator>(</operator><name><name>str</name><index>[<expr><name>l</name></expr>]</index></name><operator>==</operator><literal type="char">'W'</literal><operator>)</operator><operator>+</operator><operator>(</operator><name><name>str</name><index>[<expr><name>r</name></expr>]</index></name><operator>==</operator><literal type="char">'W'</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>tmp</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><ternary><condition><expr><name>cnt</name><operator>&gt;=</operator><literal type="number">2</literal></expr>?</condition><then><expr><literal type="char">'W'</literal></expr></then><else>:<expr><literal type="char">'B'</literal></expr></else></ternary></expr>;</expr_stmt>
    }</block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>tmp</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
    <comment type="line">// printf("%s\n",str+1);</comment>
}</block></function>

<decl_stmt><decl><type><name>bool</name></type> <name><name>Ty</name><index>[<expr><name>M</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>Pre</name><index>[<expr><name>M</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>Pref</name><index>[<expr><name>M</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>Nxt</name><index>[<expr><name>M</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>Nxtf</name><index>[<expr><name>M</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>dfs_Pre</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>r</name><init>=<expr><ternary><condition><expr><name>pos</name><operator>==</operator><name>n</name></expr>?</condition><then><expr><literal type="number">1</literal></expr></then><else>:<expr><name>pos</name><operator>+</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><name><name>Ty</name><index>[<expr><name>r</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><return>return;</return></block></then></if>
    <expr_stmt><expr><name><name>Pre</name><index>[<expr><name>r</name></expr>]</index></name><operator>=</operator><name><name>Pre</name><index>[<expr><name>pos</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt><expr_stmt><expr><name><name>Pref</name><index>[<expr><name>r</name></expr>]</index></name><operator>=</operator><name><name>Pref</name><index>[<expr><name>pos</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>dfs_Pre</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type> <name>dfs_Nxt</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>l</name><init>=<expr><ternary><condition><expr><name>pos</name><operator>==</operator><literal type="number">1</literal></expr>?</condition><then><expr><name>n</name></expr></then><else>:<expr><name>pos</name><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><name><name>Ty</name><index>[<expr><name>l</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><return>return;</return></block></then></if>
    <expr_stmt><expr><name><name>Nxt</name><index>[<expr><name>l</name></expr>]</index></name><operator>=</operator><name><name>Nxt</name><index>[<expr><name>pos</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt><expr_stmt><expr><name><name>Nxtf</name><index>[<expr><name>l</name></expr>]</index></name><operator>=</operator><name><name>Nxtf</name><index>[<expr><name>pos</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>dfs_Nxt</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name>Solve</name><parameter_list>()</parameter_list>
<block>{
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>l</name><init>=<expr><ternary><condition><expr><name>i</name><operator>==</operator><literal type="number">1</literal></expr>?</condition><then><expr><name>n</name></expr></then><else>:<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>r</name><init>=<expr><ternary><condition><expr><name>i</name><operator>==</operator><name>n</name></expr>?</condition><then><expr><literal type="number">1</literal></expr></then><else>:<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>cnt</name><init>=<expr><operator>(</operator><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'W'</literal><operator>)</operator><operator>+</operator><operator>(</operator><name><name>str</name><index>[<expr><name>l</name></expr>]</index></name><operator>==</operator><literal type="char">'W'</literal><operator>)</operator><operator>+</operator><operator>(</operator><name><name>str</name><index>[<expr><name>r</name></expr>]</index></name><operator>==</operator><literal type="char">'W'</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>Ty</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><operator>(</operator><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><operator>(</operator><ternary><condition><expr><name>cnt</name><operator>&gt;=</operator><literal type="number">2</literal></expr>?</condition><then><expr><literal type="char">'W'</literal></expr></then><else>:<expr><literal type="char">'B'</literal></expr></else></ternary><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
    }</block></for>
    <decl_stmt><decl><type><name>bool</name></type> <name>f</name><init>=<expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name>f</name><operator>|=</operator><name><name>Ty</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
    <if>if<condition>(<expr><operator>!</operator><name>f</name></expr>)</condition><then><block>{<if>if<condition>(<expr><name>K</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>Operator</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>,<argument><expr><name>str</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return;</return>}</block></then></if>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <if>if<condition>(<expr><operator>!</operator><name><name>Ty</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
        <expr_stmt><expr><name><name>Pre</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt><expr_stmt><expr><name><name>Pref</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt><expr_stmt><expr><call><name>dfs_Pre</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>Nxt</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt><expr_stmt><expr><name><name>Nxtf</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt><expr_stmt><expr><call><name>dfs_Nxt</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <if>if<condition>(<expr><name><name>Ty</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
        <if>if<condition>(<expr><name><name>Pre</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;=</operator><name>K</name> <operator>&amp;&amp;</operator> <name><name>Pre</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;=</operator><name><name>Nxt</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>str</name><index>[<expr><name><name>Pref</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block></then>
        <elseif>else <if>if<condition>(<expr><name><name>Nxt</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;=</operator><name>K</name> <operator>&amp;&amp;</operator> <name><name>Nxt</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;=</operator><name><name>Pre</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>str</name><index>[<expr><name><name>Nxtf</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block></then></if></elseif>
        <elseif>else <if>if<condition>(<expr><name>K</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name><operator>^=</operator><literal type="char">'B'</literal><operator>^</operator><literal type="char">'W'</literal></expr>;</expr_stmt></block></then></if></elseif></if>
    }</block></for>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>,<argument><expr><name>str</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<decl_stmt><decl><type><name>char</name></type> <name><name>tbl</name><index>[<expr><name>M</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>Baoli_Solve</name><parameter_list>()</parameter_list>
<block>{
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name><name>tbl</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>K</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><call><name>Operator</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>,<argument><expr><name>str</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>tbl</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d%s"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>K</name></expr></argument>,<argument><expr><name>str</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// Baoli_Solve();</comment>
    <expr_stmt><expr><call><name>Solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
