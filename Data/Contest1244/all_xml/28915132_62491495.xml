<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28915132_62491495.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N</name></cpp:macro> <cpp:value>100010</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>ll</name></type> <name><name>A</name><index>[<expr><name>N</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>dp</name><index>[<expr><name>N</name></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>,  <decl><type ref="prev"/><name><name>ans</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name><name>maxi</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name><name>bk</name><index>[<expr><name>N</name></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>graph</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>getinv</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>)</parameter_list><block>{
	<if>if<condition>(<expr><name>a</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
		<return>return <expr><call><name>mp</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return>
	}</block></then>
	<elseif>else <if>if<condition>(<expr><name>a</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then><block>{
		<return>return <expr><call><name>mp</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return>
	}</block></then></if></elseif>
	<else>else <block type="pseudo"><return>return <expr><call><name>mp</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return></block></else></if>
}</block></function>
<function><type><name>ll</name></type> <name>getmin</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>)</parameter_list><block>{
	<comment type="line">//cerr &lt;&lt; s &lt;&lt; " " &lt;&lt; d &lt;&lt; " " &lt;&lt; r &lt;&lt; '\n';</comment>
	<if>if<condition>(<expr><name><name>dp</name><index>[<expr><name>s</name></expr>]</index><index>[<expr><name>d</name></expr>]</index><index>[<expr><name>r</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
		<block type="pseudo"><return>return <expr><name><name>dp</name><index>[<expr><name>s</name></expr>]</index><index>[<expr><name>d</name></expr>]</index><index>[<expr><name>r</name></expr>]</index></name></expr>;</return></block></then></if>
	<expr_stmt><expr><name><name>maxi</name><index>[<expr><name>s</name></expr>]</index></name> <operator>=</operator> <call><name>mp</name><argument_list>(<argument><expr><literal type="number">1e18</literal></expr></argument>, <argument><expr><call><name>mp</name><argument_list>(<argument><expr><literal type="number">1e18</literal></expr></argument>, <argument><expr><literal type="number">1e18</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>df</name></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>graph</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<if>if<condition>(<expr><name><name>graph</name><index>[<expr><name>s</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>p</name></expr>)</condition><then><block>{
			<expr_stmt><expr><call><name><name>df</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name><name>graph</name><index>[<expr><name>s</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
	<decl_stmt><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>inv</name> <init>= <expr><call><name>getinv</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if>if<condition>(<expr><call><name><name>df</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then><block>{
		<if>if<condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name><name>maxi</name><index>[<expr><name>s</name></expr>]</index></name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name><name>A</name><index>[<expr><name>s</name></expr>]</index><index>[<expr><name>d</name></expr>]</index></name> <operator>+</operator> <call><name>getmin</name><argument_list>(<argument><expr><name><name>df</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>inv</name><operator>.</operator><name>first</name></name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>mp</name><argument_list>(<argument><expr><name><name>inv</name><operator>.</operator><name>first</name></name></expr></argument>, <argument><expr><literal type="number">1e18</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>mp</name><argument_list>(<argument><expr><name><name>A</name><index>[<expr><name>s</name></expr>]</index><index>[<expr><name>d</name></expr>]</index></name> <operator>+</operator> <call><name>getmin</name><argument_list>(<argument><expr><name><name>df</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>inv</name><operator>.</operator><name>second</name></name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>mp</name><argument_list>(<argument><expr><name><name>inv</name><operator>.</operator><name>second</name></name></expr></argument>, <argument><expr><literal type="number">1e18</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>	
		}</block></then>
		<elseif>else <if>if<condition>(<expr><name><name>inv</name><operator>.</operator><name>first</name></name> <operator>==</operator> <name>r</name></expr>)</condition><then><block>{
			<expr_stmt><expr><name><name>maxi</name><index>[<expr><name>s</name></expr>]</index></name> <operator>=</operator> <call><name>mp</name><argument_list>(<argument><expr><name><name>A</name><index>[<expr><name>s</name></expr>]</index><index>[<expr><name>d</name></expr>]</index></name> <operator>+</operator> <call><name>getmin</name><argument_list>(<argument><expr><name><name>df</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>inv</name><operator>.</operator><name>second</name></name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>mp</name><argument_list>(<argument><expr><name><name>inv</name><operator>.</operator><name>second</name></name></expr></argument>, <argument><expr><literal type="number">1e18</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if></elseif>
		<else>else<block>{
			<expr_stmt><expr><name><name>maxi</name><index>[<expr><name>s</name></expr>]</index></name> <operator>=</operator> <call><name>mp</name><argument_list>(<argument><expr><name><name>A</name><index>[<expr><name>s</name></expr>]</index><index>[<expr><name>d</name></expr>]</index></name> <operator>+</operator> <call><name>getmin</name><argument_list>(<argument><expr><name><name>df</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>inv</name><operator>.</operator><name>first</name></name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>mp</name><argument_list>(<argument><expr><name><name>inv</name><operator>.</operator><name>first</name></name></expr></argument>, <argument><expr><literal type="number">1e18</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
	}</block></then>
	<elseif>else <if>if<condition>(<expr><call><name><name>df</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then><block>{
		<if>if<condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name><name>maxi</name><index>[<expr><name>s</name></expr>]</index></name> <operator>=</operator> <call><name>mp</name><argument_list>(<argument><expr><literal type="number">1e18</literal></expr></argument>, <argument><expr><call><name>mp</name><argument_list>(<argument><expr><literal type="number">1e18</literal></expr></argument>, <argument><expr><literal type="number">1e18</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<else>else
		<block type="pseudo"><expr_stmt><expr><name><name>maxi</name><index>[<expr><name>s</name></expr>]</index></name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name><name>A</name><index>[<expr><name>s</name></expr>]</index><index>[<expr><name>d</name></expr>]</index></name> <operator>+</operator> <call><name>getmin</name><argument_list>(<argument><expr><name><name>df</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>inv</name><operator>.</operator><name>first</name></name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>getmin</name><argument_list>(<argument><expr><name><name>df</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>inv</name><operator>.</operator><name>second</name></name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>mp</name><argument_list>(<argument><expr><name><name>inv</name><operator>.</operator><name>first</name></name></expr></argument>, <argument><expr><name><name>inv</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>mp</name><argument_list>(<argument><expr><name><name>A</name><index>[<expr><name>s</name></expr>]</index><index>[<expr><name>d</name></expr>]</index></name> <operator>+</operator> <call><name>getmin</name><argument_list>(<argument><expr><name><name>df</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>inv</name><operator>.</operator><name>first</name></name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>getmin</name><argument_list>(<argument><expr><name><name>df</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>inv</name><operator>.</operator><name>second</name></name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>mp</name><argument_list>(<argument><expr><name><name>inv</name><operator>.</operator><name>second</name></name></expr></argument>, <argument><expr><name><name>inv</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
	}</block></then></if></elseif>
	<else>else<block>{
		<expr_stmt><expr><name><name>maxi</name><index>[<expr><name>s</name></expr>]</index></name> <operator>=</operator> <call><name>mp</name><argument_list>(<argument><expr><name><name>A</name><index>[<expr><name>s</name></expr>]</index><index>[<expr><name>d</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>mp</name><argument_list>(<argument><expr><literal type="number">1e18</literal></expr></argument>, <argument><expr><literal type="number">1e18</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>
	<expr_stmt><expr><name><name>bk</name><index>[<expr><name>s</name></expr>]</index><index>[<expr><name>d</name></expr>]</index><index>[<expr><name>r</name></expr>]</index></name> <operator>=</operator> <name><name>maxi</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>second</name></expr>;</expr_stmt>
	<return>return <expr><name><name>dp</name><index>[<expr><name>s</name></expr>]</index><index>[<expr><name>d</name></expr>]</index><index>[<expr><name>r</name></expr>]</index></name> <operator>=</operator> <name><name>maxi</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>first</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>)</parameter_list><block>{
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>df</name></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>graph</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<if>if<condition>(<expr><name><name>graph</name><index>[<expr><name>s</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>p</name></expr>)</condition><then><block>{
			<expr_stmt><expr><call><name><name>df</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name><name>graph</name><index>[<expr><name>s</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
	<if>if<condition>(<expr><call><name><name>df</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then><block>{
		<expr_stmt><expr><name><name>ans</name><index>[<expr><name><name>df</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name><name>bk</name><index>[<expr><name>s</name></expr>]</index><index>[<expr><name>d</name></expr>]</index><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><name>first</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name><name>df</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>bk</name><index>[<expr><name>s</name></expr>]</index><index>[<expr><name>d</name></expr>]</index><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><name>first</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then>
	<elseif>else <if>if<condition>(<expr><call><name><name>df</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then><block>{
		<expr_stmt><expr><name><name>ans</name><index>[<expr><name><name>df</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name><name>bk</name><index>[<expr><name>s</name></expr>]</index><index>[<expr><name>d</name></expr>]</index><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><name>first</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ans</name><index>[<expr><name><name>df</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name><name>bk</name><index>[<expr><name>s</name></expr>]</index><index>[<expr><name>d</name></expr>]</index><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><name>second</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name><name>df</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>bk</name><index>[<expr><name>s</name></expr>]</index><index>[<expr><name>d</name></expr>]</index><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><name>first</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name><name>df</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>bk</name><index>[<expr><name>s</name></expr>]</index><index>[<expr><name>d</name></expr>]</index><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><name>second</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if></elseif></if>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>A</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>A</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>A</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>graph</name><index>[<expr><name>a</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>b</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>graph</name><index>[<expr><name>b</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>a</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<if>if<condition>(<expr><name><name>graph</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		}</block></then></if>
	}</block></for>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>mini</name> <init>= <expr><call><name>mp</name><argument_list>(<argument><expr><literal type="number">1e18</literal></expr></argument>, <argument><expr><literal type="number">1e18</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><name>mini</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>mini</name></expr></argument>, <argument><expr><call><name>mp</name><argument_list>(<argument><expr><call><name>getmin</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1LL</literal> <operator>*</operator> <name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<if>if<condition>(<expr><name><name>mini</name><operator>.</operator><name>first</name></name> <operator>&gt;</operator> <literal type="number">1e15</literal></expr>)</condition><then><block>{
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></then></if>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>mini</name><operator>.</operator><name>first</name></name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ans</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>mini</name><operator>.</operator><name>second</name></name></expr> ;</expr_stmt>
	<expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>mini</name><operator>.</operator><name>second</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name>  <operator>+</operator> <literal type="number">1</literal><operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>


}</block></function></unit>
