<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28928687_62480153.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>p</name></decl>,<decl><type ref="prev"/><name>w</name></decl>,<decl><type ref="prev"/><name>d</name></decl>,<decl><type ref="prev"/><name>c</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>p</name><operator>&gt;&gt;</operator><name>w</name><operator>&gt;&gt;</operator><name>d</name></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>n</name><operator>*</operator><name>w</name><operator>&lt;</operator><name>p</name></expr>)</condition><then><block>{<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt><return>return <expr><literal type="number">0</literal></expr>;</return>}</block></then></if>
    <for>for<control>(<init><decl><type><name>long</name> <name>long</name></type> <name>x</name><init>=<expr><call><name>max</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><operator>(</operator><name>p</name><operator>-</operator><name>w</name><operator>)</operator><operator>/</operator><name>w</name><operator>-</operator><name>w</name></expr></argument>)</argument_list></call></expr></init></decl>;</init> <condition><expr><name>x</name><operator>&lt;=</operator><call><name>min</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><operator>(</operator><name>p</name><operator>-</operator><name>w</name><operator>)</operator><operator>/</operator><name>w</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>l</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>r</name><init>=<expr><name>n</name><operator>-</operator><name>x</name></expr></init></decl>;</decl_stmt>
        <while>while<condition>(<expr><name>r</name><operator>-</operator><name>l</name><operator>&gt;</operator><literal type="number">1</literal></expr>)</condition>
        <block>{
            <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>m</name><init>=<expr><operator>(</operator><name>l</name><operator>+</operator><name>r</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name>x</name><operator>*</operator><name>w</name><operator>+</operator><name>m</name><operator>*</operator><name>d</name><operator>&lt;</operator><name>p</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>l</name><operator>=</operator><name>m</name></expr>;</expr_stmt></block></then>
            <else>else <block type="pseudo"><expr_stmt><expr><name>r</name><operator>=</operator><name>m</name></expr>;</expr_stmt></block></else></if>
        }</block></while>
        <if>if<condition>(<expr><name>x</name><operator>*</operator><name>w</name><operator>+</operator><name>l</name><operator>*</operator><name>d</name><operator>==</operator><name>p</name></expr>)</condition><then><block>{<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>x</name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name>l</name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name>n</name><operator>-</operator><name>x</name><operator>-</operator><name>l</name></expr>;</expr_stmt><return>return <expr><literal type="number">0</literal></expr>;</return>}</block></then></if>
        <if>if<condition>(<expr><name>x</name><operator>*</operator><name>w</name><operator>+</operator><name>r</name><operator>*</operator><name>d</name><operator>==</operator><name>p</name></expr>)</condition><then><block>{<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>x</name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name>r</name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name>n</name><operator>-</operator><name>x</name><operator>-</operator><name>r</name></expr>;</expr_stmt><return>return <expr><literal type="number">0</literal></expr>;</return>}</block></then></if>
    }</block></for>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
}</block></function>
</unit>
