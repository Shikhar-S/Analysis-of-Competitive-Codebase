<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28916777_62470061.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include> 
 
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>mod</name><init>=<expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>INF</name><init>=<expr><literal type="number">1e7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>EPS</name> <init>= <expr><literal type="number">1e-12</literal></expr></init></decl>;</decl_stmt>
<typedef>typedef <type><name>long</name> <name>long</name> <name>int</name></type> <name>lld</name>;</typedef>
<function><type><name>double</name></type> <name>tick</name><parameter_list>()</parameter_list><block>{<decl_stmt><decl><specifier>static</specifier> <type><name>clock_t</name></type> <name>oldt</name></decl>;</decl_stmt><decl_stmt><decl><type><name>clock_t</name></type> <name>newt</name><init>=<expr><call><name>clock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>diff</name><init>=<expr><literal type="number">1.0</literal><operator>*</operator><operator>(</operator><name>newt</name><operator>-</operator><name>oldt</name><operator>)</operator><operator>/</operator><name>CLOCKS_PER_SEC</name></expr></init></decl>;</decl_stmt><expr_stmt><expr><name>oldt</name> <operator>=</operator> <name>newt</name></expr>;</expr_stmt><return>return <expr><name>diff</name></expr>;</return>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(long long int i = (a); i &lt;= (n); ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>repI</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = (a); i &lt;= (n); ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>repD</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(long long int i = (a); i &gt;= (n); --i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>repDI</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = (a); i &gt;= (n); --i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ss</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sc</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%lld",&amp;a)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sc2</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%lld%lld",&amp;a,&amp;b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sc3</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%lld%lld%lld",&amp;a,&amp;b,&amp;c)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>scd</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%d",&amp;a)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>scd2</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%d%d",&amp;a,&amp;b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>scd3</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%d%d%d",&amp;a,&amp;b,&amp;c)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>scf</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%lf",&amp;a)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>scf2</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%lf%lf",&amp;a,&amp;b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>scf3</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%lf%lf%lf",&amp;a,&amp;b,&amp;c)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>prL</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>printf("%lld\n",a)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>prS</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>printf("%lld ",a)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>prdL</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>printf("%d\n",a)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>prdS</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>printf("%d ",a)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>c.begin(), c.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)a.size())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Error</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout&lt;&lt; #x &lt;&lt; " = " &lt;&lt; (x) &lt;&lt;endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Error2</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout&lt;&lt;"( "&lt;&lt;#a&lt;&lt;" , "&lt;&lt;#b&lt;&lt;" ) = ( "&lt;&lt;(a)&lt;&lt;" , "&lt;&lt;(b)&lt;&lt;" )\n";</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Error3</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout&lt;&lt;"("&lt;&lt;#a&lt;&lt;" , "&lt;&lt;#b&lt;&lt;" , "&lt;&lt;#c&lt;&lt;" ) = ( "&lt;&lt;(a)&lt;&lt;" , "&lt;&lt;(b)&lt;&lt;" , "&lt;&lt;(c)&lt;&lt;")\n";</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Error4</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout&lt;&lt;"("&lt;&lt;#a&lt;&lt;" , "&lt;&lt;#b&lt;&lt;" , "&lt;&lt;#c&lt;&lt;" , "&lt;&lt;#d&lt;&lt;" ) = \
( "&lt;&lt;(a)&lt;&lt;" , "&lt;&lt;(b)&lt;&lt;" , "&lt;&lt;(c)&lt;&lt;" , "&lt;&lt;(d)&lt;&lt;")\n";</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>errop</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout&lt;&lt;#a&lt;&lt;" = ( "&lt;&lt;((a).x)&lt;&lt;" , "&lt;&lt;((a).y)&lt;&lt;" )\n";</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mset</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(a, v, sizeof(a))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>popcount</name></cpp:macro> <cpp:value>__builtin_popcountll</cpp:value></cpp:define>

<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>lld</name></expr></argument>,<argument><expr><name>lld</name></expr></argument>&gt;</argument_list></name></type> <name>PA</name>;</typedef>
 
<function><type><name>lld</name></type> <name>powP</name><parameter_list>(<parameter><decl><type><name>lld</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>lld</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><name>b</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal><operator>%</operator><name>mod</name></expr>;</return></block></then></if>
    <decl_stmt><decl><type><name>lld</name></type> <name>k</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>k</name><operator>=</operator><call><name>powP</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>k</name><operator>=</operator><name>k</name><operator>*</operator><name>k</name><operator>%</operator><name>mod</name></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>b</name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>k</name></expr>;</return></block></then>
    <else>else <block type="pseudo"><return>return <expr><name>a</name><operator>*</operator><name>k</name><operator>%</operator><name>mod</name></expr>;</return></block></else></if>
}</block></function>
 
<function><type><name>bool</name></type> <name>bitSet</name><parameter_list>(<parameter><decl><type><name>lld</name></type> <name>n</name></decl></parameter>,<parameter><decl><type><name>lld</name></type> <name>i</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><operator>(</operator><name>n</name><operator>&amp;</operator><operator>(</operator><literal type="number">1LL</literal><operator>&lt;&lt;</operator><name>i</name><operator>)</operator><operator>)</operator><operator>!=</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then>
    <else>else <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></else></if>
}</block></function>
 
<function><type><name>lld</name></type> <name>findGcd</name><parameter_list>(<parameter><decl><type><name>lld</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>lld</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><name>a</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>b</name></expr>;</return></block></then>
    <else>else <block type="pseudo"><return>return <expr><call><name>findGcd</name><argument_list>(<argument><expr><name>b</name><operator>%</operator><name>a</name></expr></argument>,<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</return></block></else></if>
}</block></function>
 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lim</name></cpp:macro> <cpp:value>300010</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lim2</name></cpp:macro> <cpp:value>200010</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>qqqqqq</name></cpp:macro> <cpp:value>210</cpp:value></cpp:define>
<comment type="line">// Ab :)</comment>
<comment type="line">// inline lld sqr(lld x) { return x * x; }</comment>
<comment type="line">// unordered_map&lt;lld,lld&gt;::iterator it;</comment>
<comment type="line">// std::ios::sync_with_stdio(false);</comment>
<comment type="line">// priority_queue&lt;PA&gt; Q;</comment>
<comment type="line">// lld dp[1&lt;&lt;18];</comment>

<comment type="line">// vector&lt;lld&gt; G[lim];</comment>
<comment type="line">// string S[lim];</comment>
<comment type="line">// lld A[lim],B[lim],C[lim];</comment>
<comment type="line">// map&lt;lld,lld&gt; M;</comment>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name>lld</name></type> <name>T</name></decl>,<decl><type ref="prev"/><name>i</name></decl>,<decl><type ref="prev"/><name>p</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>l</name></decl>,<decl><type ref="prev"/><name>n</name></decl>,<decl><type ref="prev"/><name>e</name></decl>,<decl><type ref="prev"/><name>r</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>,<decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>q</name></decl>,<decl><type ref="prev"/><name>a</name></decl>,<decl><type ref="prev"/><name>d</name></decl>,<decl><type ref="prev"/><name>w</name></decl>,<decl><type ref="prev"/><name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>,<decl><type ref="prev"/><name>u</name></decl>,<decl><type ref="prev"/><name>v</name></decl>,<decl><type ref="prev"/><name>z</name></decl>,<decl><type ref="prev"/><name>t</name></decl>,<decl><type ref="prev"/><name>curr</name></decl>,<decl><type ref="prev"/><name>prev</name></decl>,<decl><type ref="prev"/><name>sum</name></decl>,<decl><type ref="prev"/><name>ans</name></decl>,<decl><type ref="prev"/><name>pos</name></decl>,<decl><type ref="prev"/><name>val</name></decl>,<decl><type ref="prev"/><name>countA</name></decl>,<decl><type ref="prev"/><name>indicator</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sc</name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>T</name><operator>--</operator></expr>)</condition> <block>{
    	<decl_stmt><decl><type><name>lld</name></type> <name>lec</name></decl>, <decl><type ref="prev"/><name>prac</name></decl>;</decl_stmt>
    	<expr_stmt><expr><call><name>sc2</name><argument_list>(<argument><expr><name>lec</name></expr></argument>, <argument><expr><name>prac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    	<decl_stmt><decl><type><name>lld</name></type> <name>pen</name></decl>, <decl><type ref="prev"/><name>pencil</name></decl>;</decl_stmt>
    	<expr_stmt><expr><call><name>sc2</name><argument_list>(<argument><expr><name>pen</name></expr></argument>, <argument><expr><name>pencil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    	<expr_stmt><expr><call><name>sc</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    	<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>lec</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>pen</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    	<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><name>prac</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>pencil</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    	<if>if<condition>(<expr><name>x</name> <operator>+</operator> <name>y</name> <operator>&gt;</operator> <name>k</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-1\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
    	<else>else <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld %lld\n"</literal></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block></else></if>
    }</block></while>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
