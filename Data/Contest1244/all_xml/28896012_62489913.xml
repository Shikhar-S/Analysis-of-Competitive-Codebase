<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28896012_62489913.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
 
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><cpp:literal>"Ofast"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>target</name><name>(</name><cpp:literal>"sse,sse2,sse3,ssse3,sse4"</cpp:literal><name>)</name></cpp:pragma>
 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>s</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>o</name></cpp:macro> <cpp:value>cout&lt;&lt;"BUG"&lt;&lt;endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>IOS</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(0);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>en</name></cpp:macro> <cpp:value>"\n"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>j</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int j = i; j &lt; n; ++j)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>forn</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>j</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int j = i; j &lt;= n; ++j)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nfor</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>j</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int j = n; j &gt;= i; --j)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sortv</name><parameter_list>(<parameter><type><name>vv</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>sort(vv.begin(), vv.end())</cpp:value></cpp:define>
 
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>maxn</name><init>=<expr><literal type="number">110000</literal></expr></init></decl>,<decl><type ref="prev"/><name>inf</name><init>=<expr><literal type="number">1e18</literal></expr></init></decl>,<decl><type ref="prev"/><name>LOG</name><init>=<expr><literal type="number">20</literal></expr></init></decl>,<decl><type ref="prev"/><name>mod</name><init>=<expr><literal type="number">998244353</literal></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive>  <cpp:macro><name>int</name></cpp:macro> <cpp:value>ll</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name><name>dp</name><index>[<expr><name>maxn</name></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>c</name><index>[<expr><name>maxn</name></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>col</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>deep</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name>pos</name></decl>, <decl><type ref="prev"/><name><name>a</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name>uk</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>edge</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name>vec</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pred</name> <init>= <expr><literal type="number">1</literal></expr></init></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><name><name>edge</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <if>if<condition>(<expr><name><name>edge</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>pos</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
    }</block></then></if>
    <macro><name>FOR</name><argument_list>(<argument><literal type="number">0</literal></argument>, <argument>i</argument>, <argument>edge[v].size()</argument>)</argument_list></macro>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>to</name> <init>= <expr><name><name>edge</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>to</name> <operator>==</operator> <name>pred</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
        <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>to</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>
}</block></function>

<function><type><name>void</name></type> <name>dfs2</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pred</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><name><name>a</name><index>[<expr><operator>++</operator><name>uk</name></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
    <macro><name>FOR</name><argument_list>(<argument><literal type="number">0</literal></argument>, <argument>i</argument>, <argument>edge[v].size()</argument>)</argument_list></macro>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>to</name> <init>= <expr><name><name>edge</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>to</name> <operator>==</operator> <name>pred</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
        <expr_stmt><expr><call><name>dfs2</name><argument_list>(<argument><expr><name>to</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>
}</block></function>

<function><name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>IOS</name></type>
    <name>cin</name> &gt;&gt; <name>n</name></decl>;</decl_stmt>
    <macro><name>forn</name><argument_list>(<argument><literal type="number">1</literal></argument>, <argument>i</argument>, <argument>n</argument>)</argument_list></macro>
    <block>{
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>c</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    }</block>
    <macro><name>forn</name><argument_list>(<argument><literal type="number">1</literal></argument>, <argument>i</argument>, <argument>n</argument>)</argument_list></macro>
    <block>{
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>c</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
    }</block>
    <macro><name>forn</name><argument_list>(<argument><literal type="number">1</literal></argument>, <argument>i</argument>, <argument>n</argument>)</argument_list></macro>
    <block>{
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>c</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
    }</block>
    <macro><name>forn</name><argument_list>(<argument><literal type="number">1</literal></argument>, <argument>i</argument>, <argument>n - <literal type="number">1</literal></argument>)</argument_list></macro>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>l</name> <operator>&gt;&gt;</operator> <name>r</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>edge</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>edge</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>
    <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>dfs2</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>c</name><index>[<expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>c</name><index>[<expr><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>c</name><index>[<expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>c</name><index>[<expr><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>c</name><index>[<expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>c</name><index>[<expr><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>c</name><index>[<expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>c</name><index>[<expr><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>c</name><index>[<expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>c</name><index>[<expr><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>c</name><index>[<expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>c</name><index>[<expr><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
    <macro><name>forn</name><argument_list>(<argument><literal type="number">3</literal></argument>, <argument>i</argument>, <argument>uk</argument>)</argument_list></macro>
    <block>{
        <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>dp</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>c</name><index>[<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>dp</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>c</name><index>[<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>dp</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>c</name><index>[<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>dp</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>c</name><index>[<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>dp</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>c</name><index>[<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>dp</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>c</name><index>[<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
    }</block>
    <decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><block>{<expr><name><name>dp</name><index>[<expr><name>uk</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>,<expr><name><name>dp</name><index>[<expr><name>uk</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>,<expr><name><name>dp</name><index>[<expr><name>uk</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>,<expr><name><name>dp</name><index>[<expr><name>uk</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>,<expr><name><name>dp</name><index>[<expr><name>uk</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>,<expr><name><name>dp</name><index>[<expr><name>uk</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>}</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>res</name> <operator>==</operator> <name><name>dp</name><index>[<expr><name>uk</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name><name>col</name><index>[<expr><name><name>a</name><index>[<expr><name>uk</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>col</name><index>[<expr><name><name>a</name><index>[<expr><name>uk</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    }</block></then></if>
    <if>if<condition>(<expr><name>res</name> <operator>==</operator> <name><name>dp</name><index>[<expr><name>uk</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name><name>col</name><index>[<expr><name><name>a</name><index>[<expr><name>uk</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>col</name><index>[<expr><name><name>a</name><index>[<expr><name>uk</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
    }</block></then></if>
    <if>if<condition>(<expr><name>res</name> <operator>==</operator> <name><name>dp</name><index>[<expr><name>uk</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name><name>col</name><index>[<expr><name><name>a</name><index>[<expr><name>uk</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>col</name><index>[<expr><name><name>a</name><index>[<expr><name>uk</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    }</block></then></if>
    <if>if<condition>(<expr><name>res</name> <operator>==</operator> <name><name>dp</name><index>[<expr><name>uk</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name><name>col</name><index>[<expr><name><name>a</name><index>[<expr><name>uk</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>col</name><index>[<expr><name><name>a</name><index>[<expr><name>uk</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
    }</block></then></if>
    <if>if<condition>(<expr><name>res</name> <operator>==</operator> <name><name>dp</name><index>[<expr><name>uk</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name><name>col</name><index>[<expr><name><name>a</name><index>[<expr><name>uk</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>col</name><index>[<expr><name><name>a</name><index>[<expr><name>uk</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    }</block></then></if>
    <if>if<condition>(<expr><name>res</name> <operator>==</operator> <name><name>dp</name><index>[<expr><name>uk</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name><name>col</name><index>[<expr><name><name>a</name><index>[<expr><name>uk</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>col</name><index>[<expr><name><name>a</name><index>[<expr><name>uk</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    }</block></then></if>
    <macro><name>nfor</name><argument_list>(<argument><literal type="number">1</literal></argument>, <argument>i</argument>, <argument>uk - <literal type="number">2</literal></argument>)</argument_list></macro>
    <block>{
        <expr_stmt><expr><name><name>col</name><index>[<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <literal type="number">6</literal> <operator>-</operator> <name><name>col</name><index>[<expr><name><name>a</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>-</operator> <name><name>col</name><index>[<expr><name><name>a</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
    }</block>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>res</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    <macro><name>forn</name><argument_list>(<argument><literal type="number">1</literal></argument>, <argument>i</argument>, <argument>n</argument>)</argument_list></macro>
    <block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>col</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt>
    }</block>
}</block></function></unit>
