<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28916331_62497071.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>bool</name></type> <name>cmp</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{
	<return>return <expr><name>x</name><operator>&gt;</operator><name>y</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>k</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>a</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>a</name><operator>+</operator><literal type="number">1</literal><operator>+</operator><name>n</name></expr></argument>,<argument><expr><name>cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>z1</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>z2</name><init>=<expr><name>n</name></expr></init></decl>,<decl><type ref="prev"/><name>val1</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>val2</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>k</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition>
	<block>{
		<while>while<condition>(<expr><name><name>a</name><index>[<expr><name>z1</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><name><name>a</name><index>[<expr><name>z1</name></expr>]</index></name><operator>&amp;&amp;</operator><name>z1</name><operator>&lt;=</operator><name>z2</name></expr>)</condition>
		<block>{
			<expr_stmt><expr><name>z1</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>val1</name><operator>++</operator></expr>;</expr_stmt>
		}</block></while>
		<while>while<condition>(<expr><name><name>a</name><index>[<expr><name>z2</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><name><name>a</name><index>[<expr><name>z2</name></expr>]</index></name><operator>&amp;&amp;</operator><name>z1</name><operator>&lt;=</operator><name>z2</name></expr>)</condition>
		<block>{
			<expr_stmt><expr><name>z2</name><operator>--</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>val2</name><operator>++</operator></expr>;</expr_stmt>
		}</block></while>
		<if>if<condition>(<expr><name>z1</name><operator>&gt;=</operator><name>z2</name></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		}</block></then></if>
		<if>if<condition>(<expr><name>val1</name><operator>&lt;=</operator><name>val2</name></expr>)</condition><then>
		<block>{
			<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>hc</name><init>=<expr><name><name>a</name><index>[<expr><name>z1</name></expr>]</index></name><operator>-</operator><name><name>a</name><index>[<expr><name>z1</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<if>if<condition>(<expr><name>hc</name><operator>*</operator><name>val1</name><operator>&gt;</operator><name>k</name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name><name>a</name><index>[<expr><name>z1</name></expr>]</index></name><operator>-=</operator><name>k</name><operator>/</operator><name>val1</name></expr>;</expr_stmt>
				<break>break;</break>
			}</block></then></if>
			<expr_stmt><expr><name>k</name><operator>-=</operator><name>hc</name><operator>*</operator><name>val1</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>a</name><index>[<expr><name>z1</name></expr>]</index></name><operator>-=</operator><name>hc</name></expr>;</expr_stmt>
		}</block></then></if>
		<if>if<condition>(<expr><name>val1</name><operator>&gt;</operator><name>val2</name></expr>)</condition><then>
		<block>{
			<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>hc</name><init>=<expr><name><name>a</name><index>[<expr><name>z2</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>a</name><index>[<expr><name>z2</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<if>if<condition>(<expr><name>hc</name><operator>*</operator><name>val2</name><operator>&gt;</operator><name>k</name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name><name>a</name><index>[<expr><name>z2</name></expr>]</index></name><operator>+=</operator><name>k</name><operator>/</operator><name>val2</name></expr>;</expr_stmt>
				<break>break;</break>
			}</block></then></if>
			<expr_stmt><expr><name>k</name><operator>-=</operator><name>hc</name><operator>*</operator><name>val2</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>a</name><index>[<expr><name>z2</name></expr>]</index></name><operator>+=</operator><name>hc</name></expr>;</expr_stmt>
		}</block></then></if>
	}</block></while>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><name><name>a</name><index>[<expr><name>z1</name></expr>]</index></name><operator>-</operator><name><name>a</name><index>[<expr><name>z2</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
