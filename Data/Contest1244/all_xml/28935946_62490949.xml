<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28935946_62490949.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;list&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;typeinfo&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
  <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>p</name> <operator>&gt;&gt;</operator> <name>w</name> <operator>&gt;&gt;</operator> <name>d</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>ll</name></type> <name>rem</name></decl>;</decl_stmt>

  <for>for <control>(<init><expr><name>rem</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>rem</name> <operator>&lt;</operator> <name>d</name></expr>;</condition> <incr><expr><name>rem</name><operator>++</operator></expr></incr>)</control> <block>{
    <if>if <condition>(<expr><name>p</name> <operator>-</operator> <name>w</name> <operator>*</operator> <name>rem</name> <operator>&gt;=</operator> <literal type="number">0ll</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>p</name> <operator>-</operator> <name>w</name> <operator>*</operator> <name>rem</name><operator>)</operator> <operator>%</operator> <name>d</name> <operator>==</operator> <literal type="number">0ll</literal></expr>)</condition><then> <block>{
      <break>break;</break>
    }</block></then></if>
  }</block></for>

  <if>if <condition>(<expr><name>p</name> <operator>-</operator> <name>w</name> <operator>*</operator> <name>rem</name> <operator>&lt;</operator> <literal type="number">0ll</literal> <operator>||</operator> <operator>(</operator><name>p</name> <operator>-</operator> <name>w</name> <operator>*</operator> <name>rem</name><operator>)</operator> <operator>%</operator> <name>d</name> <operator>!=</operator> <literal type="number">0ll</literal></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"-1\n"</literal></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name>ll</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>r</name> <init>= <expr><name>n</name> <operator>/</operator> <name>d</name></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><name>l</name> <operator>&lt;</operator> <name>r</name></expr>)</condition> <block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>m</name> <init>= <expr><operator>(</operator><name>l</name> <operator>+</operator> <name>r</name><operator>)</operator> <operator>/</operator> <literal type="number">2ll</literal> <operator>+</operator> <operator>(</operator><name>l</name> <operator>+</operator> <name>r</name><operator>)</operator> <operator>%</operator> <literal type="number">2ll</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>x</name> <init>= <expr><name>m</name> <operator>*</operator> <name>d</name> <operator>+</operator> <name>rem</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>y</name> <init>= <expr><name>p</name> <operator>-</operator> <name>w</name> <operator>*</operator> <name>x</name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>y</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>r</name> <operator>=</operator> <name>m</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><name>l</name> <operator>=</operator> <name>m</name></expr>;</expr_stmt>
    }</block></else></if>
  }</block></while>

  <decl_stmt><decl><type><name>ll</name></type> <name>x</name> <init>= <expr><name>l</name> <operator>*</operator> <name>d</name> <operator>+</operator> <name>rem</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ll</name></type> <name>y</name> <init>= <expr><operator>(</operator><name>p</name> <operator>-</operator> <name>w</name> <operator>*</operator> <name>x</name><operator>)</operator> <operator>/</operator> <name>d</name></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>y</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>n</name> <operator>-</operator> <name>x</name> <operator>-</operator> <name>y</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"-1\n"</literal></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  }</block></then></if>

  <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>x</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name>y</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name>n</name> <operator>-</operator> <name>x</name> <operator>-</operator> <name>y</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
