<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28893354_62483669.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">2e5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>long</name> <name>long</name></type> <name>MOD</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    
    <while>while <condition>(<expr><name>t</name><operator>--</operator></expr>)</condition> <block>{
        
        <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>k</name></expr>;</expr_stmt>
        
        <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>a</name><index>[<expr><name>n</name></expr>]</index></name></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
        
        <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>a</name> <operator>+</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>y</name> <init>= <expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>l</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>r</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>x</name> <operator>&lt;</operator> <name>y</name> <operator>and</operator> <name><name>a</name><index>[<expr><name>x</name></expr>]</index></name> <operator>&lt;</operator> <name><name>a</name><index>[<expr><name>y</name></expr>]</index></name></expr>)</condition> <block>{
            <if>if <condition>(<expr><name>l</name> <operator>&lt;</operator> <name>r</name></expr>)</condition><then> <block>{
                <while>while <condition>(<expr><name><name>a</name><index>[<expr><name>x</name></expr>]</index></name> <operator>==</operator> <name><name>a</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>and</operator> <name>x</name> <operator>&lt;</operator> <name>y</name></expr>)</condition> <block>{
                    <expr_stmt><expr><name>x</name><operator>++</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name>l</name><operator>++</operator></expr>;</expr_stmt>
                }</block></while>
                
                <expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>a</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>a</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>a</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+=</operator> <call><name>min</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>k</name> <operator>/</operator> <name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>k</name> <operator>-=</operator> <operator>(</operator><name>l</name> <operator>*</operator> <call><name>min</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>k</name> <operator>/</operator> <name>l</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <while>while <condition>(<expr><name><name>a</name><index>[<expr><name>y</name></expr>]</index></name> <operator>==</operator> <name><name>a</name><index>[<expr><name>y</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>and</operator> <name>x</name> <operator>&lt;</operator> <name>y</name></expr>)</condition> <block>{
                    <expr_stmt><expr><name>y</name><operator>--</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name>r</name><operator>++</operator></expr>;</expr_stmt>
                }</block></while>
                
                <expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>a</name><index>[<expr><name>y</name></expr>]</index></name> <operator>-</operator> <name><name>a</name><index>[<expr><name>y</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>a</name><index>[<expr><name>y</name></expr>]</index></name> <operator>-=</operator> <call><name>min</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>k</name> <operator>/</operator> <name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>k</name> <operator>-=</operator> <operator>(</operator><name>r</name> <operator>*</operator> <call><name>min</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>k</name> <operator>/</operator> <name>r</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
            }</block></else></if>
            
            <if>if <condition>(<expr><name>k</name> <operator>==</operator> <literal type="number">0</literal> <operator>or</operator> <name>k</name> <operator>&lt;</operator> <call><name>min</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <block type="pseudo"><break>break;</break></block></then></if>
        }</block></while>
        
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>(</operator><name><name>a</name><index>[<expr><name>y</name></expr>]</index></name> <operator>-</operator> <name><name>a</name><index>[<expr><name>x</name></expr>]</index></name><operator>)</operator><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    }</block></while>
	
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
