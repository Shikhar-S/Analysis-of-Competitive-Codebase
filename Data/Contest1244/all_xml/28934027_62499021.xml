<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28934027_62499021.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>



<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>k</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>gauche</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>droite</name> <init>= <expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></type> <name>v</name> <argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>c</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>c</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>v</name><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>v</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>k</name><operator>&gt;</operator><literal type="number">0</literal><operator>&amp;&amp;</operator><name>gauche</name><operator>&lt;</operator><name>droite</name></expr>)</condition> <block>{

        <comment type="line">//for(int c=0;c&lt;v.size();c++) cout&lt;&lt;v[c]&lt;&lt;" ";</comment>
        <comment type="line">//cout&lt;&lt;endl;</comment>

        <while>while<condition>(<expr><name>gauche</name><operator>+</operator><literal type="number">1</literal><operator>&lt;</operator><name>n</name><operator>&amp;&amp;</operator><name><name>v</name><index>[<expr><name>gauche</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><name><name>v</name><index>[<expr><name>gauche</name></expr>]</index></name></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>gauche</name><operator>++</operator></expr>;</expr_stmt></block></while>
        <while>while<condition>(<expr><name>droite</name><operator>-</operator><literal type="number">1</literal><operator>&gt;=</operator><literal type="number">0</literal><operator>&amp;&amp;</operator><name><name>v</name><index>[<expr><name>droite</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><name><name>v</name><index>[<expr><name>droite</name></expr>]</index></name></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>droite</name><operator>--</operator></expr>;</expr_stmt></block></while>
        <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>d1</name> <init>= <expr><name>gauche</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>d2</name> <init>= <expr><name>n</name><operator>-</operator><name>droite</name></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>d1</name> <operator>&lt;</operator> <name>d2</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>delta</name> <init>= <expr><name><name>v</name><index>[<expr><name>gauche</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>v</name><index>[<expr><name>gauche</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>go</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name>k</name><operator>/</operator><name>d1</name></expr></argument>,<argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name>go</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
            <expr_stmt><expr><name><name>v</name><index>[<expr><name>gauche</name></expr>]</index></name><operator>+=</operator><name>go</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>k</name><operator>-=</operator><name>go</name><operator>*</operator><name>d1</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>delta</name> <init>= <expr><name><name>v</name><index>[<expr><name>droite</name></expr>]</index></name><operator>-</operator><name><name>v</name><index>[<expr><name>droite</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>go</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name>k</name><operator>/</operator><name>d2</name></expr></argument>,<argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name>go</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
            <expr_stmt><expr><name><name>v</name><index>[<expr><name>droite</name></expr>]</index></name><operator>-=</operator><name>go</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>k</name><operator>-=</operator><name>go</name><operator>*</operator><name>d2</name></expr>;</expr_stmt>
        }</block></else></if>
    }</block></while>
    <if>if<condition>(<expr><name>droite</name> <operator>&lt;=</operator> <name>gauche</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="number">0</literal></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>v</name><index>[<expr><name>droite</name></expr>]</index></name><operator>-</operator><name><name>v</name><index>[<expr><name>gauche</name></expr>]</index></name></expr>;</expr_stmt>
}</block></function>
</unit>
