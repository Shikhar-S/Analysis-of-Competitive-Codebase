<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28903010_62490116.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fst</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>snd</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ios</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(0); cin.tie(0);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>open</name></cpp:macro> <cpp:value>freopen("anime.in", "r", stdin); freopen("anime.out", "w", stdout);</cpp:value></cpp:define>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>
 
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><name>ios</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>k</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name><name>a</name><index>[<expr><name>n</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>st</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>mp</name></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>mp</name><index>[<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
	}</block></for>
	<for>for <control>(<init><decl><type><name>auto</name></type> <name>u</name> <range>: <expr><name>mp</name></expr></range></decl></init>)</control><block>{
		<expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<while>while<condition>(<expr><call><name><name>st</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block>{
		<decl_stmt><decl><type><name>auto</name></type> <name>one</name> <init>= <expr><operator>*</operator><operator>(</operator><call><name><name>st</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>auto</name></type> <name>two</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>--</operator><call><name><name>st</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name><name>one</name><operator>.</operator><name>snd</name></name> <operator>&lt;</operator> <name><name>two</name><operator>.</operator><name>snd</name></name></expr>)</condition><then><block>{
			<decl_stmt><decl><type><name>auto</name></type> <name>need</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>++</operator><call><name><name>st</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><call><name>abs</name><argument_list>(<argument><expr><name><name>need</name><operator>.</operator><name>fst</name></name> <operator>-</operator> <name><name>one</name><operator>.</operator><name>fst</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>one</name><operator>.</operator><name>snd</name></name> <operator>&gt;</operator> <name>k</name></expr>)</condition><then><block>{
				<expr_stmt><expr><name>k</name> <operator>/=</operator> <name><name>one</name><operator>.</operator><name>snd</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>two</name><operator>.</operator><name>fst</name></name> <operator>-</operator> <operator>(</operator><name><name>one</name><operator>.</operator><name>fst</name></name> <operator>+</operator> <name>k</name><operator>)</operator></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
				<return>return <expr><literal type="number">0</literal></expr>;</return>
			}</block></then><else>else<block>{
				<expr_stmt><expr><name>k</name> <operator>-=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>need</name><operator>.</operator><name>fst</name></name> <operator>-</operator> <name><name>one</name><operator>.</operator><name>fst</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>one</name><operator>.</operator><name>snd</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>one</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>ll</name></type> <name>cnt</name> <init>= <expr><name><name>need</name><operator>.</operator><name>fst</name></name></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>ll</name></type> <name>count</name> <init>= <expr><name><name>need</name><operator>.</operator><name>snd</name></name> <operator>+</operator> <name><name>one</name><operator>.</operator><name>snd</name></name></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>need</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><block>{<expr><name>cnt</name></expr>, <expr><name>count</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
		}</block></then><else>else<block>{
			<decl_stmt><decl><type><name>auto</name></type> <name>need</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>--</operator><operator>(</operator><operator>--</operator><call><name><name>st</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><call><name>abs</name><argument_list>(<argument><expr><name><name>two</name><operator>.</operator><name>fst</name></name> <operator>-</operator> <name><name>need</name><operator>.</operator><name>fst</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>two</name><operator>.</operator><name>snd</name></name> <operator>&gt;</operator> <name>k</name></expr>)</condition><then><block>{
				<expr_stmt><expr><name>k</name> <operator>/=</operator> <name><name>two</name><operator>.</operator><name>snd</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>one</name><operator>.</operator><name>fst</name></name> <operator>-</operator> <operator>(</operator><name><name>two</name><operator>.</operator><name>fst</name></name> <operator>-</operator> <name>k</name><operator>)</operator></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
				<return>return <expr><literal type="number">0</literal></expr>;</return>
			}</block></then><else>else<block>{
				<expr_stmt><expr><name>k</name> <operator>-=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>two</name><operator>.</operator><name>fst</name></name> <operator>-</operator> <name><name>need</name><operator>.</operator><name>fst</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>two</name><operator>.</operator><name>snd</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>two</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>ll</name></type> <name>cnt</name> <init>= <expr><name><name>need</name><operator>.</operator><name>fst</name></name></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>ll</name></type> <name>count</name> <init>= <expr><name><name>need</name><operator>.</operator><name>snd</name></name> <operator>+</operator> <name><name>two</name><operator>.</operator><name>snd</name></name></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>need</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><block>{<expr><name>cnt</name></expr>, <expr><name>count</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
		}</block></else></if>
	}</block></while>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="number">0</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
}</block></function></unit>
