<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28894110_62478998.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<specifier>inline</specifier> <type><name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><specifier>static</specifier> <type><name>char</name></type> <name>ch</name></decl>;</decl_stmt> 
	<decl_stmt><decl><specifier>static</specifier> <type><name>bool</name></type> <name>opt</name></decl>;</decl_stmt> 
	<while>while <condition>(<expr><operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><name>ch</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>ch</name> <operator>!=</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><empty_stmt>;</empty_stmt></block></while> 
	<expr_stmt><expr><name>x</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>opt</name> <operator>=</operator> <name>ch</name> <operator>==</operator> <literal type="char">'-'</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>ch</name> <operator>-</operator> <literal type="char">'0'</literal></expr></else></ternary></expr>;</expr_stmt> 
	<while>while <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><name>ch</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
		<block type="pseudo"><expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <name>ch</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block></while> 
	<if>if <condition>(<expr><name>opt</name></expr>)</condition><then>
		<block type="pseudo"><expr_stmt><expr><name>x</name> <operator>=</operator> <operator>~</operator><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if> 
}</block></function>

<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<specifier>inline</specifier> <type><name>void</name></type> <name>putint</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><specifier>static</specifier> <type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">25</literal></expr>]</index></name></decl>, <modifier>*</modifier><decl><type ref="prev"/><name>tail</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt> 
	<if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then>
		<block type="pseudo"><expr_stmt><expr><name>x</name> <operator>=</operator> <operator>~</operator><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if> 
	<if>if <condition>(<expr><operator>!</operator><name>x</name></expr>)</condition><then>
		<block type="pseudo"><expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then> 
	<else>else
	<block>{
		<for>for <control>(<init>;</init> <condition><expr><name>x</name></expr>;</condition> <incr><expr><name>x</name> <operator>/=</operator> <literal type="number">10</literal></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><operator>*</operator><operator>++</operator><name>tail</name> <operator>=</operator> <name>x</name> <operator>%</operator> <literal type="number">10</literal> <operator>+</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block></for> 
		<for>for <control>(<init>;</init> <condition><expr><name>tail</name> <operator>!=</operator> <name>buf</name></expr>;</condition> <incr><expr><operator>--</operator><name>tail</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><operator>*</operator><name>tail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for> 
	}</block></else></if>
}</block></function>

<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<specifier>inline</specifier> <type><name>bool</name></type> <name>tense</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T</name> <modifier>&amp;</modifier></type><name>y</name></decl></parameter>)</parameter_list>
<block>{
	<return>return <expr><ternary><condition><expr><name>x</name> <operator>&gt;</operator> <name>y</name></expr> ?</condition><then> <expr><name>x</name> <operator>=</operator> <name>y</name></expr></then></ternary></expr><operator>,</operator> <expr><literal type="boolean">true</literal> <operator>:</operator> <literal type="boolean">false</literal></expr>;</return> 
}</block></function>

<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<specifier>inline</specifier> <type><name>bool</name></type> <name>relax</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T</name> <modifier>&amp;</modifier></type><name>y</name></decl></parameter>)</parameter_list>
<block>{
	<return>return <expr><ternary><condition><expr><name>x</name> <operator>&lt;</operator> <name>y</name></expr> ?</condition><then> <expr><name>x</name> <operator>=</operator> <name>y</name></expr></then></ternary></expr><operator>,</operator> <expr><literal type="boolean">true</literal> <operator>:</operator> <literal type="boolean">false</literal></expr>;</return> 
}</block></function>

<typedef>typedef <type><name>unsigned</name></type> <name>u32</name>;</typedef> 
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>s64</name>;</typedef> 
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>u64</name>;</typedef> 
<typedef>typedef <type><name><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></name></type> <name>pii</name>;</typedef> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>std::make_pair(x, y)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MaxN</name> <init>= <expr><literal type="number">1e5</literal> <operator>+</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>rt</name></decl>, <decl><type ref="prev"/><name><name>deg</name><index>[<expr><name>MaxN</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name><name>pos</name><index>[<expr><name>MaxN</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>col</name><index>[<expr><name>MaxN</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>cst</name><index>[<expr><name>MaxN</name></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name><name>ans</name><index>[<expr><name>MaxN</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>s64</name></type> <name>minans</name> <init>= <expr><literal type="number">1LL</literal> <operator>&lt;&lt;</operator> <literal type="number">60</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></name></type> <name><name>adj</name><index>[<expr><name>MaxN</name></expr>]</index></name></decl>;</decl_stmt> 

<function><specifier>inline</specifier> <type><name>int</name></type> <name>find_rt</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
	<while>while <condition>(<expr><name>x</name></expr>)</condition>
	<block>{
		<if>if <condition>(<expr><name><name>adj</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then>
		<block>{
			<if>if <condition>(<expr><name><name>adj</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>y</name></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><name>y</name> <operator>=</operator> <name>x</name></expr><operator>,</operator> <expr><name>x</name> <operator>=</operator> <name><name>adj</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block></then> 
			<else>else
				<block type="pseudo"><expr_stmt><expr><name>y</name> <operator>=</operator> <name>x</name></expr><operator>,</operator> <expr><name>x</name> <operator>=</operator> <name><name>adj</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block></else></if> 
		}</block></then>
		<else>else
			<block type="pseudo"><return>return <expr><name>x</name></expr>;</return></block></else></if> 
	}</block></while>
	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return> 
}</block></function>

<function><specifier>inline</specifier> <type><name>void</name></type> <name>init_pos</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name>rt</name></expr></init></decl>, <decl><type ref="prev"/><name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

	<decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
	<while>while <condition>(<expr><name>x</name></expr>)</condition>
	<block>{
		<expr_stmt><expr><name><name>pos</name><index>[<expr><operator>++</operator><name>cnt</name></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt> 
		<if>if <condition>(<expr><name><name>adj</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>y</name></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>y</name> <operator>=</operator> <name>x</name></expr><operator>,</operator> <expr><name>x</name> <operator>=</operator> <name><name>adj</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block></then> 
		<elseif>else <if>if <condition>(<expr><name><name>adj</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>y</name> <operator>=</operator> <name>x</name></expr><operator>,</operator> <expr><name>x</name> <operator>=</operator> <name><name>adj</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block></then></if></elseif> 
		<else>else
			<block type="pseudo"><break>break;</break></block></else></if> 
	}</block></while>
}</block></function>

<function><specifier>inline</specifier> <type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>s64</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{
		<if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name><name>col</name><index>[<expr><name><name>pos</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <literal type="number">6</literal> <operator>-</operator> <name><name>col</name><index>[<expr><name><name>pos</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>-</operator> <name><name>col</name><index>[<expr><name><name>pos</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block></then></if> 
		<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>cst</name><index>[<expr><name><name>pos</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index><index>[<expr><name><name>col</name><index>[<expr><name><name>pos</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt> 
	}</block></for>

	<if>if <condition>(<expr><call><name>tense</name><argument_list>(<argument><expr><name>minans</name></expr></argument>, <argument><expr><name>sum</name></expr></argument>)</argument_list></call></expr>)</condition><then>
	<block>{
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
			<block type="pseudo"><expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>col</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for> 
	}</block></then></if>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>orzczk</name></cpp:ifdef>
	<expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"input.txt"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
	<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
	<block type="pseudo"><for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name><name>cst</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for></block></for> 

	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt> 
		<expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>read</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
		<expr_stmt><expr><name><name>adj</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
		<expr_stmt><expr><name><name>adj</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
		<expr_stmt><expr><operator>++</operator><name><name>deg</name><index>[<expr><name>u</name></expr>]</index></name></expr><operator>,</operator> <expr><operator>++</operator><name><name>deg</name><index>[<expr><name>v</name></expr>]</index></name></expr>;</expr_stmt> 
	}</block></for>

	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block type="pseudo"><if>if <condition>(<expr><name><name>deg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
			<return>return <expr><literal type="number">0</literal></expr>;</return> 
		}</block></then></if></block></for>

	<expr_stmt><expr><name>rt</name> <operator>=</operator> <call><name>find_rt</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
	<if>if <condition>(<expr><name>rt</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
		<block type="pseudo"><return>return <expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">0</literal></expr>;</return></block></then></if> 

	<expr_stmt><expr><call><name>init_pos</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<comment type="line">//	std::cout &lt;&lt; "rt = " &lt;&lt; rt &lt;&lt; '\n'; </comment>

	<for>for <control>(<init><expr><name><name>col</name><index>[<expr><name><name>pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name><name>col</name><index>[<expr><name><name>pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><operator>++</operator><name><name>col</name><index>[<expr><name><name>pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr></incr>)</control>
	<block type="pseudo"><for>for <control>(<init><expr><name><name>col</name><index>[<expr><name><name>pos</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name><name>col</name><index>[<expr><name><name>pos</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><operator>++</operator><name><name>col</name><index>[<expr><name><name>pos</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index></name></expr></incr>)</control>
		<block type="pseudo"><if>if <condition>(<expr><name><name>col</name><index>[<expr><name><name>pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>!=</operator> <name><name>col</name><index>[<expr><name><name>pos</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index></name></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if></block></for></block></for> 

	<expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <name>minans</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt> 
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d "</literal></expr></argument>, <argument><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for> 

	<return>return <expr><literal type="number">0</literal></expr>;</return> 
}</block></function></unit>
