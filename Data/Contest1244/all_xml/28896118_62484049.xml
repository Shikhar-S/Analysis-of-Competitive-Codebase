<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28896118_62484049.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>k</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=k;i&lt;n;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name><name>vr</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name><name>ar</name><index>[<expr><literal type="number">100005</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>deg</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>dp</name><index>[<expr><literal type="number">100005</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>cr</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name>func</name><argument_list>(<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> <name>prt</name><parameter_list>(<parameter><decl><type><name>ll</name></type></decl></parameter>,<parameter><decl><type><name>ll</name></type></decl></parameter>,<parameter><decl><type><name>ll</name></type></decl></parameter>,<parameter><decl><type><name>ll</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">3</literal></argument>)</argument_list></macro>
	<macro><name>rep</name><argument_list>(<argument>j</argument>,<argument><literal type="number">1</literal></argument>,<argument>n+<literal type="number">1</literal></argument>)</argument_list></macro>
	<block>{
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>ar</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block>
	<decl_stmt><decl><type><name>ll</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>,<decl><type ref="prev"/><name>f</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n-<literal type="number">1</literal></argument>)</argument_list></macro>
	<block>{
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld %lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>deg</name><index>[<expr><name>x</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>deg</name><index>[<expr><name>y</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
		<if>if<condition>(<expr><name><name>deg</name><index>[<expr><name>x</name></expr>]</index></name><operator>&gt;</operator><literal type="number">2</literal><operator>||</operator><name><name>deg</name><index>[<expr><name>y</name></expr>]</index></name><operator>&gt;</operator><literal type="number">2</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>f</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
		<expr_stmt><expr><name><name>vr</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>vr</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block>
	<if>if<condition>(<expr><name>f</name></expr>)</condition><then>
		<block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"-1"</literal></expr>;</expr_stmt></block></then>
	<else>else
	<block>{
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dp</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>ll</name></type> <name>p</name></decl>;</decl_stmt>
		<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n+<literal type="number">1</literal></argument>)</argument_list></macro>
		<if>if<condition>(<expr><name><name>deg</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>p</name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></then></if>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>,<argument><expr><call><name>func</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>prt</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n+<literal type="number">1</literal></argument>)</argument_list></macro>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld "</literal></expr></argument>,<argument><expr><name><name>cr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>
}</block></function>
<function><type><name>ll</name></type> <name>func</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>idx</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>cur</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>prev_</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>p</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>ll</name></type> <name>size_</name><init>=<expr><name><name>vr</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></init></decl>,<decl><type ref="prev"/><name>min_</name><init>=<expr><literal type="number">100000000000000ll</literal></expr></init></decl>;</decl_stmt>
	<if>if<condition>(<expr><name><name>dp</name><index>[<expr><name>idx</name></expr>]</index><index>[<expr><name>cur</name></expr>]</index><index>[<expr><name>prev_</name></expr>]</index></name><operator>!=</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
		<block type="pseudo"><return>return <expr><name><name>dp</name><index>[<expr><name>idx</name></expr>]</index><index>[<expr><name>cur</name></expr>]</index><index>[<expr><name>prev_</name></expr>]</index></name></expr>;</return></block></then></if>
	<decl_stmt><decl><type><name>ll</name></type> <name>f</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>size_</argument>)</argument_list></macro>
	<block>{
		<if>if<condition>(<expr><name><name>vr</name><index>[<expr><name>idx</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name>p</name></expr>)</condition><then>
			<block type="pseudo"><continue>continue;</continue></block></then></if>
		<expr_stmt><expr><name>f</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
		<macro><name>rep</name><argument_list>(<argument>j</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">3</literal></argument>)</argument_list></macro>
		<if>if<condition>(<expr><name>j</name><operator>!=</operator><name>cur</name><operator>&amp;&amp;</operator><name>j</name><operator>!=</operator><name>prev_</name></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>min_</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>min_</name></expr></argument>,<argument><expr><call><name>func</name><argument_list>(<argument><expr><name><name>vr</name><index>[<expr><name>idx</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name>j</name></expr></argument>,<argument><expr><name>cur</name></expr></argument>,<argument><expr><name>idx</name></expr></argument>)</argument_list></call><operator>+</operator><name><name>ar</name><index>[<expr><name>idx</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
	}</block>
	<if>if<condition>(<expr><name>f</name></expr>)</condition><then>
	<block>{
		<macro><name>rep</name><argument_list>(<argument>j</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">3</literal></argument>)</argument_list></macro>
		<if>if<condition>(<expr><name>j</name><operator>!=</operator><name>cur</name><operator>&amp;&amp;</operator><name>j</name><operator>!=</operator><name>prev_</name></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>min_</name><operator>=</operator><name><name>ar</name><index>[<expr><name>idx</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block></then></if>
	}</block></then></if>
	<comment type="line">//cout&lt;&lt;idx&lt;&lt;" "&lt;&lt;cur&lt;&lt;" "&lt;&lt;prev_&lt;&lt;"\n";</comment>
	<return>return <expr><name><name>dp</name><index>[<expr><name>idx</name></expr>]</index><index>[<expr><name>cur</name></expr>]</index><index>[<expr><name>prev_</name></expr>]</index></name><operator>=</operator><name>min_</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>prt</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>idx</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>cur</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>prev_</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>p</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>ll</name></type> <name>size_</name><init>=<expr><name><name>vr</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>f</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>size_</argument>)</argument_list></macro>
	<block>{
		<if>if<condition>(<expr><name><name>vr</name><index>[<expr><name>idx</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name>p</name></expr>)</condition><then>
			<block type="pseudo"><continue>continue;</continue></block></then></if>
		<expr_stmt><expr><name>f</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
		<macro><name>rep</name><argument_list>(<argument>j</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">3</literal></argument>)</argument_list></macro>
		<if>if<condition>(<expr><name>j</name><operator>!=</operator><name>cur</name><operator>&amp;&amp;</operator><name>j</name><operator>!=</operator><name>prev_</name><operator>&amp;&amp;</operator><name><name>dp</name><index>[<expr><name><name>vr</name><index>[<expr><name>idx</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>cur</name></expr>]</index></name><operator>+</operator><name><name>ar</name><index>[<expr><name>idx</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>==</operator><name><name>dp</name><index>[<expr><name>idx</name></expr>]</index><index>[<expr><name>cur</name></expr>]</index><index>[<expr><name>prev_</name></expr>]</index></name></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name><name>cr</name><index>[<expr><name>idx</name></expr>]</index></name><operator>=</operator><name>j</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>prt</name><argument_list>(<argument><expr><name><name>vr</name><index>[<expr><name>idx</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name>j</name></expr></argument>,<argument><expr><name>cur</name></expr></argument>,<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		}</block></then></if>
	}</block>	
	<if>if<condition>(<expr><name>f</name></expr>)</condition><then>
	<block>{
		<comment type="line">//cout&lt;&lt;idx&lt;&lt;"SA";</comment>
		<decl_stmt><decl><type><name>ll</name></type> <name>min_</name><init>=<expr><literal type="number">1000000000000000ll</literal></expr></init></decl>;</decl_stmt>
		<macro><name>rep</name><argument_list>(<argument>j</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">3</literal></argument>)</argument_list></macro>
		<if>if<condition>(<expr><name>j</name><operator>!=</operator><name>cur</name><operator>&amp;&amp;</operator><name>j</name><operator>!=</operator><name>prev_</name></expr>)</condition><then>
		<block>{
			<if>if<condition>(<expr><name>min_</name><operator>&gt;</operator><name><name>ar</name><index>[<expr><name>idx</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name>min_</name><operator>=</operator><name><name>ar</name><index>[<expr><name>idx</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>cr</name><index>[<expr><name>idx</name></expr>]</index></name><operator>=</operator><name>j</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then></if>	
	}</block></then></if>	
}</block></function></unit>
