<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28933702_62491859.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name> <init>= <expr><literal type="number">2e5</literal> <operator>+</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>sign</name></decl>, <decl><type ref="prev"/><name><name>pre</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>nxt</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>c</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>in</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>cl</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>dl</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>cr</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>dr</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>res</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>k</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%lld"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>s</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'W'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></else></if></block></for>
    <expr_stmt><expr><name><name>res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'W'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>res</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'B'</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>pre</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name><operator>-</operator><literal type="number">1</literal></expr><operator>,</operator> <expr><name><name>nxt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><name><name>nxt</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>pre</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<comment type="line">//printf("%d\n", i);</comment>
        <if>if<condition>(<expr><operator>!</operator><name><name>in</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>c</name><index>[<expr><name><name>pre</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>||</operator> <name><name>c</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>c</name><index>[<expr><name><name>nxt</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>)</operator></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>sign</name> <operator>=</operator> <name><name>in</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><name><name>pre</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <while>while<condition>(<expr><name><name>c</name><index>[<expr><name>t</name></expr>]</index></name> <operator>==</operator> <name><name>c</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name>t</name><operator>!=</operator><name>i</name></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name><name>in</name><index>[<expr><name>t</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr><operator>,</operator> <expr><name>t</name><operator>=</operator><name><name>pre</name><index>[<expr><name>t</name></expr>]</index></name></expr>;</expr_stmt></block></while>
            <expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>nxt</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            <while>while<condition>(<expr><name><name>c</name><index>[<expr><name>t</name></expr>]</index></name> <operator>==</operator> <name><name>c</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name>t</name><operator>!=</operator><name>i</name></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name><name>in</name><index>[<expr><name>t</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr><operator>,</operator> <expr><name>t</name><operator>=</operator><name><name>nxt</name><index>[<expr><name>t</name></expr>]</index></name></expr>;</expr_stmt></block></while>
        }</block></then></if>
    }</block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<comment type="line">//printf("%d %d %d\n", i, nxt[i], pre[i]);</comment>
        <if>if<condition>(<expr><name><name>in</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>c</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name><name>c</name><index>[<expr><name><name>nxt</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>)</condition><then> <block>{<comment type="line">//printf("&gt;&gt;\n");</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>j</name><init>=<expr><name><name>nxt</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>dep</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <comment type="line">//printf("%d\n", j);</comment>
            <for>for<control>(<init>;</init> <condition><expr><operator>!</operator><name><name>in</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>=</operator><name><name>nxt</name><index>[<expr><name>j</name></expr>]</index></name></expr></incr>)</control> <block>{<comment type="line">//printf("%d\n", j);</comment>
                <expr_stmt><expr><name>dep</name><operator>++</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>cl</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>dl</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>dep</name></expr>;</expr_stmt>
            }</block></for>
        }</block></then></if>
        <if>if<condition>(<expr><name><name>in</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>c</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name><name>c</name><index>[<expr><name><name>pre</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>)</condition><then> <block>{<comment type="line">//printf("??\n");</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>j</name><init>=<expr><name><name>pre</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>dep</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <comment type="line">//printf("%d\n", j);</comment>
            <for>for<control>(<init>;</init> <condition><expr><operator>!</operator><name><name>in</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>=</operator><name><name>pre</name><index>[<expr><name>j</name></expr>]</index></name></expr></incr>)</control><block>{<comment type="line">//printf("%d\n", j);</comment>
                <expr_stmt><expr><name>dep</name><operator>++</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>cr</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>dr</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>dep</name></expr>;</expr_stmt>
            }</block></for>
        }</block></then></if>
    }</block></for>
    <if>if<condition>(<expr><operator>!</operator><name>sign</name></expr>)</condition><then> <block>{
        <if>if<condition>(<expr><name>k</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
            <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
                <block type="pseudo"><if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'W'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"B"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
                <else>else <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"W"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if></block></for>
        }</block></then>   <else>else <block>{
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>s</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>   <else>else <block>{
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
            <if>if<condition>(<expr><name><name>in</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
            <else>else <block>{
                <if>if<condition>(<expr><name><name>dl</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>dr</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block>{
                    <if>if<condition>(<expr><name><name>dl</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name>k</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><name><name>res</name><index>[<expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <operator>(</operator><name>k</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then>   <else>else <block>{
                        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><name><name>res</name><index>[<expr><name><name>cl</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>

                }</block></then>   <else>else <block>{
                    <if>if<condition>(<expr><name><name>dl</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;</operator><name><name>dr</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block>{
                        <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>dl</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>dr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>cl</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>cr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                    <if>if<condition>(<expr><name><name>dl</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name>k</name></expr>)</condition><then>
                        <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><name><name>res</name><index>[<expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <operator>(</operator><name>k</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
                    <else>else
                        <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><name><name>res</name><index>[<expr><name><name>cl</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>

                }</block></else></if>


            }</block></else></if>
        }</block></for>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
