<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28934429_62491938.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><specifier>inline</specifier> <type><name>int</name></type> <name>read</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>f</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt><decl_stmt><decl><type><name>char</name></type> <name>ch</name><init>=<expr><call><name>getchar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name><name>ch</name><argument_list type="generic">&lt;<argument><expr><literal type="char">'0'</literal><operator>||</operator><name>ch</name></expr></argument>&gt;</argument_list></name><literal type="char">'9'</literal></expr>)</condition> <block>{<if>if <condition>(<expr><name>ch</name><operator>==</operator><literal type="char">'-'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>f</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if><expr_stmt><expr><name>ch</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>}</block></while>
    <while>while <condition>(<expr><name>ch</name><operator>&gt;=</operator><literal type="char">'0'</literal><operator>&amp;&amp;</operator><name>ch</name><operator>&lt;=</operator><literal type="char">'9'</literal></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>ret</name><operator>=</operator><name>ret</name><operator>*</operator><literal type="number">10</literal><operator>+</operator><name>ch</name><operator>-</operator><literal type="char">'0'</literal></expr><operator>,</operator><expr><name>ch</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
    <return>return <expr><name>ret</name><operator>*</operator><name>f</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>INF</name><init>=<expr><literal type="number">0x3f3f3f3f3f3f3f3f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name><init>=<expr><literal type="number">100005</literal></expr></init></decl>,<decl><type ref="prev"/><name>maxe</name><init>=<expr><literal type="number">200005</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>c</name><index>[<expr><name>maxn</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tot</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name><name>lnk</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>nxt</name><index>[<expr><name>maxe</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>to</name><index>[<expr><name>maxe</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>f</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>dp</name><index>[<expr><name>maxn</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>clr</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>

<struct>struct <name>node</name><block>{<public type="default">
    <decl_stmt><decl><type><name>int</name></type> <name>first</name></decl>,<decl><type ref="prev"/><name>second</name></decl>,<decl><type ref="prev"/><name>third</name></decl>;</decl_stmt>
</public>}</block>;</struct>
<decl_stmt><decl><type><name>node</name></type> <name><name>pre</name><index>[<expr><name>maxn</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>add_edge</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{
    <expr_stmt><expr><name>tot</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name><name>to</name><index>[<expr><name>tot</name></expr>]</index></name><operator>=</operator><name>y</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>nxt</name><index>[<expr><name>tot</name></expr>]</index></name><operator>=</operator><name><name>lnk</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt><expr_stmt><expr><name><name>lnk</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><name>tot</name></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name>make_dp</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>fa</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>fafa</name></decl></parameter>)</parameter_list><block>{
    <for>for <control>(<init><decl><type><name>int</name></type> <name>now</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>now</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>now</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><for>for <control>(<init><decl><type><name>int</name></type> <name>fac</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>fac</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>fac</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><if>if <condition>(<expr><name>fac</name><operator>!=</operator><name>now</name></expr>)</condition><then>
            <block type="pseudo"><for>for <control>(<init><decl><type><name>int</name></type> <name>fff</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>fff</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>fff</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><if>if <condition>(<expr><name>fac</name><operator>!=</operator><name>fff</name> <operator>&amp;&amp;</operator> <name>fff</name><operator>!=</operator><name>now</name></expr>)</condition><then>
                <block type="pseudo"><if>if <condition>(<expr><name><name>dp</name><index>[<expr><name>fa</name></expr>]</index><index>[<expr><name>fac</name></expr>]</index><index>[<expr><name>fff</name></expr>]</index></name><operator>+</operator><name><name>c</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>now</name></expr>]</index></name> <operator>&lt;</operator> <name><name>dp</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>now</name></expr>]</index><index>[<expr><name>fac</name></expr>]</index></name></expr>)</condition><then><block>{
                    <expr_stmt><expr><name><name>dp</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>now</name></expr>]</index><index>[<expr><name>fac</name></expr>]</index></name> <operator>=</operator> <name><name>dp</name><index>[<expr><name>fa</name></expr>]</index><index>[<expr><name>fac</name></expr>]</index><index>[<expr><name>fff</name></expr>]</index></name><operator>+</operator><name><name>c</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>now</name></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>pre</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>now</name></expr>]</index><index>[<expr><name>fac</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>node</name><operator>)</operator><block>{<expr><name>fa</name></expr>,<expr><name>fac</name></expr>,<expr><name>fff</name></expr>}</block></expr>;</expr_stmt>
                }</block></then></if></block></then></if></block></for></block></then></if></block></for></block></for>
    
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name><name>lnk</name><index>[<expr><name>x</name></expr>]</index></name></expr></init></decl>;</init><condition><expr><name>i</name></expr>;</condition><incr><expr><name>i</name><operator>=</operator><name><name>nxt</name><index>[<expr><name>i</name></expr>]</index></name></expr></incr>)</control> <block type="pseudo"><if>if <condition>(<expr><name><name>to</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name>fa</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>make_dp</name><argument_list>(<argument><expr><name><name>to</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>fa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></block></for>
}</block></function>

<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><name>n</name><operator>=</operator><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></for>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>x</name><init>=<expr><call><name>read</name><argument_list>()</argument_list></call></expr></init></decl>,<decl><type ref="prev"/><name>y</name><init>=<expr><call><name>read</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>add_edge</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>add_edge</name><argument_list>(<argument><expr><name>y</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>f</name><index>[<expr><name>x</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt><expr_stmt><expr><name><name>f</name><index>[<expr><name>y</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
    }</block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><if>if <condition>(<expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;</operator><literal type="number">2</literal></expr>)</condition><then><block>{
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-1\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if></block></for>

    <decl_stmt><decl><type><name>int</name></type> <name>st</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>op</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><if>if <condition>(<expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
        <if>if <condition>(<expr><name>st</name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>st</name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></then> <else>else <block type="pseudo"><expr_stmt><expr><name>op</name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></else></if>
    }</block></then></if></block></for>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dp</name></expr></argument>,<argument><expr><literal type="number">0x3f</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>make_dp</name><argument_list>(<argument><expr><name>st</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <decl_stmt><decl><type><name>int</name></type> <name>ans</name><init>=<expr><name>INF</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>node</name></type> <name>lst</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><for>for <control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><if>if <condition>(<expr><name><name>dp</name><index>[<expr><name>op</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>&lt;</operator> <name>ans</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ans</name><operator>=</operator><name><name>dp</name><index>[<expr><name>op</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr><operator>,</operator><expr><name>lst</name><operator>=</operator><operator>(</operator><name>node</name><operator>)</operator><block>{<expr><name>op</name></expr>,<expr><name>i</name></expr>,<expr><name>j</name></expr>}</block></expr>;</expr_stmt></block></then></if></block></for></block></for>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>,<argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr><name><name>lst</name><operator>.</operator><name>first</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{
        <expr_stmt><expr><name><name>clr</name><index>[<expr><name><name>lst</name><operator>.</operator><name>first</name></name></expr>]</index></name><operator>=</operator><name><name>lst</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>lst</name><operator>=</operator><name><name>pre</name><index>[<expr><name><name>lst</name><operator>.</operator><name>first</name></name></expr>]</index><index>[<expr><name><name>lst</name><operator>.</operator><name>second</name></name></expr>]</index><index>[<expr><name><name>lst</name><operator>.</operator><name>third</name></name></expr>]</index></name></expr>;</expr_stmt>
    }</block></while>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld "</literal></expr></argument>,<argument><expr><name><name>clr</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
