<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28926600_62497660.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdlib&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N</name></cpp:macro> <cpp:value>200020</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>t</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>l</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>p</name></decl>, <decl><type ref="prev"/><name>q</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>f</name></decl>;</decl_stmt>

    <comment type="line">// freopen("t.in" , "r", stdin );</comment>
    <comment type="line">// freopen("t.out", "w", stdout);</comment>

    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>f</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><if>if<condition>(<expr><name><name>s</name><index>[<expr><operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <name>n</name><operator>)</operator> <operator>%</operator> <name>n</name></expr>]</index></name> <operator>!=</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">2</literal> <operator>+</operator> <name>n</name><operator>)</operator> <operator>%</operator> <name>n</name></expr>]</index></name> <operator>==</operator> <name><name>s</name><index>[<expr><operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <name>n</name><operator>)</operator> <operator>%</operator> <name>n</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>s</name><index>[<expr><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>n</name></expr>]</index></name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            <for>for<control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>j</name> <operator>++</operator></expr></incr>)</control>
                <block type="pseudo"><expr_stmt><expr><name><operator>::</operator><name>t</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><operator>(</operator><name>i</name> <operator>+</operator> <name>j</name><operator>)</operator> <operator>%</operator> <name>n</name></expr>]</index></name></expr>;</expr_stmt></block></for>
            <for>for<control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>j</name> <operator>++</operator></expr></incr>)</control>
                <block type="pseudo"><expr_stmt><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><operator>::</operator><name>t</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block></for>
            <expr_stmt><expr><name>x</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

            <break>break;</break>
        }</block></then></if></block></for>

    <comment type="line">// puts(s);</comment>

    <if>if<condition>(<expr><name>f</name></expr>)</condition><then>
    <block>{
        <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr/>)</control>
        <block>{
            <for>for<control>(<init><expr><name>p</name> <operator>=</operator> <name>i</name></expr>;</init> <condition><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>n</name> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><name>p</name></expr>]</index></name> <operator>!=</operator> <name><name>s</name><index>[<expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>p</name> <operator>++</operator></expr></incr>)</control>
                <block type="pseudo"><empty_stmt>;</empty_stmt></block></for>
            <expr_stmt><expr><operator>--</operator> <name>p</name></expr>;</expr_stmt>
            <for>for<control>(<init><expr><name>q</name> <operator>=</operator> <name>i</name></expr>;</init> <condition><expr><name>q</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>n</name> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><name>q</name></expr>]</index></name> <operator>==</operator> <name><name>s</name><index>[<expr><name>q</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>q</name> <operator>++</operator></expr></incr>)</control>
                <block type="pseudo"><empty_stmt>;</empty_stmt></block></for>

            <comment type="line">// printf("i = %d, p = %d, q = %d\n", i, p, q);</comment>

            <if>if<condition>(<expr><name>i</name> <operator>&lt;</operator> <name>q</name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>i</name> <operator>=</operator> <name>q</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <continue>continue;</continue>
            }</block></then></if>

            <for>for<control>(<init><expr><name>l</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>t</name> <operator>=</operator> <operator>(</operator><name>p</name> <operator>-</operator> <name>i</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>l</name> <operator>&lt;</operator> <name>k</name> <operator>&amp;&amp;</operator> <name>l</name> <operator>&lt;</operator> <name>t</name></expr>;</condition> <incr><expr><name>l</name> <operator>++</operator></expr></incr>)</control>
                <block type="pseudo"><expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name> <operator>+</operator> <name>l</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>i</name></expr> ?</condition><then> <expr><name><name>s</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><name><name>s</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></else></ternary><operator>)</operator></expr><operator>,</operator> <expr><name><name>s</name><index>[<expr><name>p</name> <operator>-</operator> <name>l</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block></for>
            <if>if<condition>(<expr><name>k</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then>
            <block>{
                <comment type="line">// printf("t = %d, l = %d\n", t, l);</comment>
                <for>for<control>(<init>;</init> <condition><expr><name>l</name> <operator>&lt;</operator> <name>t</name></expr>;</condition> <incr><expr><name>l</name> <operator>++</operator></expr></incr>)</control>
                <block>{
                    <comment type="line">// printf("%d %d\n", i + l, p - l);</comment>
                    <expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name> <operator>+</operator> <name>l</name></expr>]</index></name> <operator>=</operator> <literal type="char">'B'</literal> <operator>+</operator> <literal type="char">'W'</literal> <operator>-</operator> <name><name>s</name><index>[<expr><name>i</name> <operator>+</operator> <name>l</name></expr>]</index></name></expr>;</expr_stmt>
                    <if>if<condition>(<expr><name>i</name> <operator>+</operator> <name>l</name> <operator>!=</operator> <name>p</name> <operator>-</operator> <name>l</name></expr>)</condition><then>
                        <block type="pseudo"><expr_stmt><expr><name><name>s</name><index>[<expr><name>p</name> <operator>-</operator> <name>l</name></expr>]</index></name> <operator>=</operator> <literal type="char">'B'</literal> <operator>+</operator> <literal type="char">'W'</literal> <operator>-</operator> <name><name>s</name><index>[<expr><name>p</name> <operator>-</operator> <name>l</name></expr>]</index></name></expr>;</expr_stmt></block></then></if>
                }</block></for>
            }</block></then></if>
            <expr_stmt><expr><name>i</name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        }</block></for>

        <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><expr_stmt><expr><name><operator>::</operator><name>t</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><operator>(</operator><name>i</name> <operator>-</operator> <name>x</name> <operator>+</operator> <name>n</name><operator>)</operator> <operator>%</operator> <name>n</name></expr>]</index></name></expr>;</expr_stmt></block></for>
        <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><operator>::</operator><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
    }</block></then>
    <elseif>else
        <if>if<condition>(<expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>k</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><then>
            <block type="pseudo"><for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control>
                <block type="pseudo"><expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'B'</literal> <operator>+</operator> <literal type="char">'W'</literal> <operator>-</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for></block></then></if></elseif></if>

    <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
