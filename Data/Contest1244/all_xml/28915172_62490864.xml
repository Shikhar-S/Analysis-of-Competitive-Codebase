<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28915172_62490864.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOS</name></cpp:macro> <cpp:value>ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>"\n"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EPS</name></cpp:macro> <cpp:value>0.00000000000001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ld</name></cpp:macro> <cpp:value>long double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inf</name></cpp:macro> <cpp:value>1000000000000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N</name></cpp:macro> <cpp:value>100005</cpp:value></cpp:define>


<function><type><name>int32_t</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><name>IOS</name></expr>;</expr_stmt>
    <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ONLINE_JUDGE</name></cpp:ifndef>
    <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"int.txt"</literal></expr></argument>,<argument><expr><literal type="string">"r"</literal></expr></argument>,<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"out.txt"</literal></expr></argument>,<argument><expr><literal type="string">"w"</literal></expr></argument>,<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>g</name><index>[<expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>color</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    	<block type="pseudo"><expr_stmt><expr><name><name>color</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>resize</name><argument_list>(<argument><expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
    <block>{
    	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    		<block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>color</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
    }</block></for>
    <decl_stmt><decl><type><name>bool</name></type> <name>ch</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
    	<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
    	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name></expr>;</expr_stmt>
    	<expr_stmt><expr><name><name>g</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    	<expr_stmt><expr><name><name>g</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    	<if>if<condition>(<expr><name><name>g</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><then>
    		<block type="pseudo"><expr_stmt><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
    	<if>if<condition>(<expr><name><name>g</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><then>
    		<block type="pseudo"><expr_stmt><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
    }</block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>start</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    	<block type="pseudo"><if>if<condition>(<expr><name><name>g</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
    		<block type="pseudo"><expr_stmt><expr><name>start</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block></then></if></block></for>
    <if>if<condition>(<expr><name>ch</name></expr>)</condition><then>
    <block>{
    	<decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><name>inf</name></expr></init></decl>;</decl_stmt>
    	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>fans</name><argument_list>(<argument><expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>curans</name><argument_list>(<argument><expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    	<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
    	<block>{
    		<decl_stmt><decl><type><name>int</name></type> <name>lans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    		<decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><name>start</name></expr></init></decl>;</decl_stmt>
    		<decl_stmt><decl><type><name>int</name></type> <name>p</name> <init>= <expr><name>start</name></expr></init></decl>;</decl_stmt>
    		<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><name>j</name></expr></init></decl>;</decl_stmt>
    		<while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition>
    		<block>{
    			<expr_stmt><expr><name>lans</name> <operator>+=</operator> <name><name>color</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>s</name></expr>]</index></name></expr>;</expr_stmt>
    			<expr_stmt><expr><name><name>curans</name><index>[<expr><name>s</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
    			<decl_stmt><decl><type><name>int</name></type> <name>node</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    			<for>for<control>(<init><decl><type><name>auto</name></type> <name>it</name> <range>: <expr><name><name>g</name><index>[<expr><name>s</name></expr>]</index></name></expr></range></decl></init>)</control>
    			<block>{
    				<if>if<condition>(<expr><name>it</name> <operator>!=</operator> <name>p</name></expr>)</condition><then>
    				<block>{
    					<expr_stmt><expr><name>node</name> <operator>=</operator> <name>it</name></expr>;</expr_stmt>
    					<break>break;</break>
    				}</block></then></if>
    			}</block></for>
    			<comment type="line">//cerr &lt;&lt; s &lt;&lt; " " &lt;&lt; p &lt;&lt; endl;</comment>
    			<if>if<condition>(<expr><name>node</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
    				<block type="pseudo"><break>break;</break></block></then></if>
    			<expr_stmt><expr><name>p</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
    			<expr_stmt><expr><name>s</name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
    			<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>c</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">3</literal></expr>;</expr_stmt>
    		}</block></while>
			<if>if<condition>(<expr><name>ans</name> <operator>&gt;</operator> <name>lans</name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name>ans</name> <operator>=</operator> <name>lans</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>fans</name> <operator>=</operator> <name>curans</name></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><name>lans</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>s</name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>p</name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>c</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
    		<while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition>
    		<block>{
    			<expr_stmt><expr><name>lans</name> <operator>+=</operator> <name><name>color</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>s</name></expr>]</index></name></expr>;</expr_stmt>
    			<expr_stmt><expr><name><name>curans</name><index>[<expr><name>s</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
    			<decl_stmt><decl><type><name>int</name></type> <name>node</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    			<for>for<control>(<init><decl><type><name>auto</name></type> <name>it</name> <range>: <expr><name><name>g</name><index>[<expr><name>s</name></expr>]</index></name></expr></range></decl></init>)</control>
    			<block>{
    				<if>if<condition>(<expr><name>it</name> <operator>!=</operator> <name>p</name></expr>)</condition><then>
    				<block>{
    					<expr_stmt><expr><name>node</name> <operator>=</operator> <name>it</name></expr>;</expr_stmt>
    					<break>break;</break>
    				}</block></then></if>
    			}</block></for>
    			<comment type="line">//cerr &lt;&lt; s &lt;&lt; " " &lt;&lt; p &lt;&lt; endl;</comment>
    			<if>if<condition>(<expr><name>node</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
    				<block type="pseudo"><break>break;</break></block></then></if>
    			<expr_stmt><expr><name>p</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
    			<expr_stmt><expr><name>s</name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
    			<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>c</name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>%</operator> <literal type="number">3</literal></expr>;</expr_stmt>
    		}</block></while>
			<if>if<condition>(<expr><name>ans</name> <operator>&gt;</operator> <name>lans</name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name>ans</name> <operator>=</operator> <name>lans</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>fans</name> <operator>=</operator> <name>curans</name></expr>;</expr_stmt>
			}</block></then></if>
    	}</block></for>
    	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt><empty_stmt>;</empty_stmt>
    	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    		<block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>fans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr> ;</expr_stmt></block></for>
    }</block></then>
    <else>else
    	<block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
 
 </unit>
