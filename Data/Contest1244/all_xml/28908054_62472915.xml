<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28908054_62472915.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nn</name></cpp:macro> <cpp:value>100002</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LL</name></type> <name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr><name>nn</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%lld\n"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><name>a</name><operator>+</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>a</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>a</name><operator>+</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>dl</name><init>=<expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>,<decl><type ref="prev"/><name>dr</name><init>=<expr><name><name>a</name><index>[<expr><name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>l</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>r</name><init>=<expr><name>n</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>sl</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>sr</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<if>if<condition>(<expr><name>dl</name><operator>==</operator><name>dr</name></expr>)</condition><then> <block>{<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return> }</block></then></if>
	<while>while<condition>(<expr><name>k</name><operator>&amp;&amp;</operator><name>dl</name><operator>&lt;</operator><name>dr</name></expr>)</condition>
	<block>{
		<while>while<condition>(<expr><name>l</name><operator>&lt;=</operator><name>n</name><operator>&amp;&amp;</operator><name>dl</name><operator>==</operator><name><name>a</name><index>[<expr><name>l</name></expr>]</index></name></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>l</name><operator>++</operator></expr><operator>,</operator><expr><name>sl</name><operator>++</operator></expr>;</expr_stmt></block></while>
		<while>while<condition>(<expr><name>r</name><operator>&gt;=</operator><literal type="number">1</literal><operator>&amp;&amp;</operator><name><name>a</name><index>[<expr><name>r</name></expr>]</index></name><operator>==</operator><name>dr</name></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>r</name><operator>--</operator></expr><operator>,</operator><expr><name>sr</name><operator>++</operator></expr>;</expr_stmt></block></while>
		<if>if<condition>(<expr><name>sl</name><operator>&lt;=</operator><name>sr</name></expr>)</condition><then>
		<block>{
			<if>if<condition>(<expr><literal type="number">1LL</literal><operator>*</operator><operator>(</operator><name><name>a</name><index>[<expr><name>l</name></expr>]</index></name><operator>-</operator><name>dl</name><operator>)</operator><operator>*</operator><name>sl</name><operator>&lt;=</operator><name>k</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>k</name><operator>-=</operator><literal type="number">1LL</literal><operator>*</operator><operator>(</operator><name><name>a</name><index>[<expr><name>l</name></expr>]</index></name><operator>-</operator><name>dl</name><operator>)</operator><operator>*</operator><name>sl</name></expr><operator>,</operator><expr><name>dl</name><operator>=</operator><name><name>a</name><index>[<expr><name>l</name></expr>]</index></name></expr>;</expr_stmt></block></then>
			<else>else <block>{<expr_stmt><expr><name>dl</name><operator>+=</operator><name>k</name><operator>/</operator><name>sl</name></expr><operator>,</operator><expr><name>k</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt> <break>break;</break> }</block></else></if>
		}</block></then>
		<else>else
		<block>{
			<if>if<condition>(<expr><literal type="number">1LL</literal><operator>*</operator><operator>(</operator><name>dr</name><operator>-</operator><name><name>a</name><index>[<expr><name>r</name></expr>]</index></name><operator>)</operator><operator>*</operator><name>sr</name><operator>&lt;=</operator><name>k</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>k</name><operator>-=</operator><literal type="number">1LL</literal><operator>*</operator><operator>(</operator><name>dr</name><operator>-</operator><name><name>a</name><index>[<expr><name>r</name></expr>]</index></name><operator>)</operator><operator>*</operator><name>sr</name></expr><operator>,</operator><expr><name>dr</name><operator>=</operator><name><name>a</name><index>[<expr><name>r</name></expr>]</index></name></expr>;</expr_stmt></block></then>
			<else>else <block>{<expr_stmt><expr><name>dr</name><operator>-=</operator><name>k</name><operator>/</operator><name>sr</name></expr><operator>,</operator><expr><name>k</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt> <break>break;</break> }</block></else></if>
		}</block></else></if>
	}</block></while>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><name>dr</name><operator>-</operator><name>dl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
