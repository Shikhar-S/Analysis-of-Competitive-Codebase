<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28935271_62488297.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>var</name></cpp:macro> <cpp:value>auto</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>'\n'</cpp:value></cpp:define>

<function><type><name>ll</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
	<return>return <expr><ternary><condition><expr><name>b</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>a</name></expr> </then><else>: <expr><call><name>gcd</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name><operator>%</operator><name>b</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>p</name> <operator>&gt;&gt;</operator> <name>d</name> <operator>&gt;&gt;</operator> <name>w</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>var</name></type> <name>md</name> <init>= <expr><name>p</name> <operator>%</operator> <name>w</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>dCnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>curd</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><name>curd</name><operator>%</operator><name>w</name> <operator>!=</operator> <name>md</name></expr>)</condition>
	<block>{
		<expr_stmt><expr><name>dCnt</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>curd</name> <operator>=</operator> <operator>(</operator><name>curd</name> <operator>+</operator> <name>d</name><operator>)</operator> <operator>%</operator> <name>w</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>++</operator><name>cnt</name></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>cnt</name> <operator>==</operator> <name>w</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<return>return;</return>
		}</block></then></if>
	}</block></while>
	<expr_stmt><expr><name>n</name> <operator>-=</operator> <name>dCnt</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>p</name> <operator>-=</operator> <name>dCnt</name> <operator>*</operator> <name>d</name></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>p</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<return>return;</return>
	}</block></then></if>
	<decl_stmt><decl><type><name>var</name></type> <name>c</name> <init>= <expr><name>w</name> <operator>/</operator> <call><name>gcd</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>var</name></type> <name>x</name> <init>= <expr><operator>(</operator><name>p</name> <operator>/</operator> <operator>(</operator><name>c</name><operator>*</operator><name>d</name><operator>)</operator><operator>)</operator><operator>*</operator><name>c</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>dCnt</name> <operator>+=</operator> <name>x</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>n</name> <operator>-=</operator> <name>x</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>p</name> <operator>=</operator> <name>p</name> <operator>%</operator> <operator>(</operator><name>c</name><operator>*</operator><name>d</name><operator>)</operator></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>var</name></type> <name>wCnt</name> <init>= <expr><name>p</name> <operator>/</operator> <name>w</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>n</name> <operator>-=</operator> <name>wCnt</name></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	}</block></then>
	<else>else
	<block>{
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>dCnt</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name>wCnt</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name>n</name></expr>;</expr_stmt>
	}</block></else></if>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
	<comment type="line">//cin &gt;&gt; t;</comment>
	<expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>t</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></for>
}</block></function></unit>
