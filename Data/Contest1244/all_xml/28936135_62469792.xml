<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28936135_62469792.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>double</name></type> <name>f64</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>i64</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>i32</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>i32</name></expr></argument>, <argument><expr><name>i32</name></expr></argument>&gt;</argument_list></name></type> <name>pi32</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>u64</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>u32</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>i32</name></expr></argument>&gt;</argument_list></name></type> <name>vi32</name>;</typedef>
<typedef>typedef <type><name><name>deque</name><argument_list type="generic">&lt;<argument><expr><name>i32</name></expr></argument>&gt;</argument_list></name></type> <name>di32</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(c).begin(), (c).end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REP</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (auto i = a; i &lt; b; i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REPA</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>acc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (auto i = a; i &lt; b; i += acc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PB</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PF</name></cpp:macro> <cpp:value>push_front</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRINT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout &lt;&lt; #x ": " &lt;&lt; (x) &lt;&lt; endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TR</name><parameter_list>(<parameter><type><name>c</name></type></parameter>, <parameter><type><name>it</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (auto(it) = (c).begin(); (it) != (c).end(); (it)++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_PRECISION</name></cpp:macro> <cpp:value>cout &lt;&lt; setprecision(numeric_limits&lt;double&gt;::max_digits10);</cpp:value></cpp:define>

<function><type><name>i32</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
  <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// Makes IO faster, remove this line if C style scanf/printf needed.</comment>
  <decl_stmt><decl><type><name>i32</name></type> <name>q</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>q</name></expr>;</expr_stmt>

  <while>while<condition>(<expr><name>q</name><operator>--</operator></expr>)</condition> <block>{
    <decl_stmt><decl><type><name>i32</name></type> <name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>string</name></type> <name>f</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>f</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>i32</name></type> <name>ret</name> <init>= <expr><name>n</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>i32</name></type> <name>left</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>right</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <macro><name>REP</name><argument_list>(<argument>i</argument>, <argument><literal type="number">0</literal></argument>, <argument>n</argument>)</argument_list></macro> <block>{
      <if>if <condition>(<expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'1'</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>left</name> <operator>=</operator> <ternary><condition><expr><name>left</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><name>i</name></expr> </then><else>: <expr><name>left</name></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><name>right</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
      }</block></then></if>
    }</block>

    <if>if <condition>(<expr><name>left</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>right</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>right</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>right</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>n</name> <operator>-</operator> <name>right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>n</name> <operator>-</operator> <name>left</name> <operator>+</operator> <name>left</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>n</name> <operator>-</operator> <name>left</name> <operator>+</operator> <name>n</name> <operator>-</operator> <name>left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ret</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
  }</block></while>
}</block></function>
</unit>
