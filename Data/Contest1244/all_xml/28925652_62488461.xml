<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28925652_62488461.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<comment type="line">// base and base_digits must be consistent</comment>
<decl_stmt><decl><specifier>constexpr</specifier> <type><name>int</name></type> <name>base</name> <init>= <expr><literal type="number">1000000000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><specifier>constexpr</specifier> <type><name>int</name></type> <name>base_digits</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>;</decl_stmt>

<struct>struct <name>bigint</name>
<block>{<public type="default">
    <comment type="line">// value == 0 is represented by empty z</comment>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>z</name></decl>;</decl_stmt> <comment type="line">// digits</comment>

    <comment type="line">// sign == 1 &lt;==&gt; value &gt;= 0</comment>
    <comment type="line">// sign == -1 &lt;==&gt; value &lt; 0</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>sign</name></decl>;</decl_stmt>

    <constructor><name>bigint</name><parameter_list>()</parameter_list> <member_init_list>: <call><name>sign</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> </member_init_list><block>{}</block></constructor>

    <constructor><name>bigint</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><operator>*</operator><name>this</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt> }</block></constructor>

    <function type="operator"><type><name>bigint</name><modifier>&amp;</modifier></type> <name>operator<name>=</name></name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>v</name></decl></parameter>)</parameter_list>
    <block>{
        <expr_stmt><expr><name>sign</name> <operator>=</operator> <ternary><condition><expr><name>v</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><name>v</name> <operator>*=</operator> <name>sign</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>z</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init>;</init> <condition><expr><name>v</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>v</name> <operator>=</operator> <name>v</name> <operator>/</operator> <name>base</name></expr></incr>)</control>
            <block type="pseudo"><expr_stmt><expr><call><name><name>z</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call>(<name>int</name>)<argument_list>(<argument><expr><name>v</name> <operator>%</operator> <name>base</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
        <return>return <expr><operator>*</operator><name>this</name></expr>;</return>
    }</block></function>

    <constructor><name>bigint</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>string</name><modifier>&amp;</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></constructor>

    <function type="operator"><type><name>bigint</name><modifier>&amp;</modifier></type> <name>operator<name>+=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>bigint</name><modifier>&amp;</modifier></type> <name>other</name></decl></parameter>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>sign</name> <operator>==</operator> <name><name>other</name><operator>.</operator><name>sign</name></name></expr>)</condition><then>
        <block>{
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>carry</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>other</name><operator>.</operator><name>z</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>||</operator> <name>carry</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
            <block>{
                <if>if <condition>(<expr><name>i</name> <operator>==</operator> <call><name><name>z</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><call><name><name>z</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
                <expr_stmt><expr><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name>carry</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>other</name><operator>.</operator><name>z</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>other</name><operator>.</operator><name>z</name><index>[<expr><name>i</name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>carry</name> <operator>=</operator> <name><name>z</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <name>base</name></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>carry</name></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-=</operator> <name>base</name></expr>;</expr_stmt></block></then></if>
            }</block></for>
        }</block></then>
        <elseif>else <if>if <condition>(<expr><name>other</name> <operator>!=</operator> <literal type="number">0</literal></expr> <comment type="block">/* prevent infinite loop */</comment>)</condition><then>
        <block>{
            <expr_stmt><expr><operator>*</operator><name>this</name> <operator>-=</operator> <operator>-</operator><name>other</name></expr>;</expr_stmt>
        }</block></then></if></elseif></if>
        <return>return <expr><operator>*</operator><name>this</name></expr>;</return>
    }</block></function>

    <friend>friend <function type="operator"><type><name>bigint</name></type> <name>operator<name>+</name></name><parameter_list>(<parameter><decl><type><name>bigint</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bigint</name><modifier>&amp;</modifier></type> <name>b</name></decl></parameter>)</parameter_list>
    <block>{
        <return>return <expr><name>a</name> <operator>+=</operator> <name>b</name></expr>;</return>
    }</block></function></friend>

    <function type="operator"><type><name>bigint</name><modifier>&amp;</modifier></type> <name>operator<name>-=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>bigint</name><modifier>&amp;</modifier></type> <name>other</name></decl></parameter>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>sign</name> <operator>==</operator> <name><name>other</name><operator>.</operator><name>sign</name></name></expr>)</condition><then>
        <block>{
            <if>if <condition>(<expr><name>sign</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>this</name> <operator>&gt;=</operator> <name>other</name> <operator>||</operator> <name>sign</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>this</name> <operator>&lt;=</operator> <name>other</name></expr>)</condition><then>
            <block>{
                <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>carry</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>other</name><operator>.</operator><name>z</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>||</operator> <name>carry</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
                <block>{
                    <expr_stmt><expr><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-=</operator> <name>carry</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>other</name><operator>.</operator><name>z</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>other</name><operator>.</operator><name>z</name><index>[<expr><name>i</name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name>carry</name> <operator>=</operator> <name><name>z</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name>carry</name></expr>)</condition><then>
                        <block type="pseudo"><expr_stmt><expr><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name>base</name></expr>;</expr_stmt></block></then></if>
                }</block></for>
                <expr_stmt><expr><call><name>trim</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else
            <block>{
                <expr_stmt><expr><operator>*</operator><name>this</name> <operator>=</operator> <name>other</name> <operator>-</operator> <operator>*</operator><name>this</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>sign</name></name> <operator>=</operator> <operator>-</operator><name><name>this</name><operator>-&gt;</operator><name>sign</name></name></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then>
        <else>else
        <block>{
            <expr_stmt><expr><operator>*</operator><name>this</name> <operator>+=</operator> <operator>-</operator><name>other</name></expr>;</expr_stmt>
        }</block></else></if>
        <return>return <expr><operator>*</operator><name>this</name></expr>;</return>
    }</block></function>

    <friend>friend <function type="operator"><type><name>bigint</name></type> <name>operator<name>-</name></name><parameter_list>(<parameter><decl><type><name>bigint</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bigint</name><modifier>&amp;</modifier></type> <name>b</name></decl></parameter>)</parameter_list>
    <block>{
        <return>return <expr><name>a</name> <operator>-=</operator> <name>b</name></expr>;</return>
    }</block></function></friend>

    <function type="operator"><type><name>bigint</name><modifier>&amp;</modifier></type> <name>operator<name>*=</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>v</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>sign</name> <operator>=</operator> <operator>-</operator><name>sign</name></expr><operator>,</operator> <expr><name>v</name> <operator>=</operator> <operator>-</operator><name>v</name></expr>;</expr_stmt></block></then></if>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>carry</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>z</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>||</operator> <name>carry</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
        <block>{
            <if>if <condition>(<expr><name>i</name> <operator>==</operator> <call><name><name>z</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><call><name><name>z</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
            <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>cur</name> <init>= <expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>v</name> <operator>+</operator> <name>carry</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>carry</name> <operator>=</operator> <call>(<name>int</name>)<argument_list>(<argument><expr><name>cur</name> <operator>/</operator> <name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call>(<name>int</name>)<argument_list>(<argument><expr><name>cur</name> <operator>%</operator> <name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name>trim</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>*</operator><name>this</name></expr>;</return>
    }</block></function>

    <function type="operator"><type><name>bigint</name></type> <name>operator<name>*</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
    <block>{
        <return>return <expr><call><name>bigint</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call> <operator>*=</operator> <name>v</name></expr>;</return>
    }</block></function>

    <friend>friend <function><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>bigint</name></expr></argument>, <argument><expr><name>bigint</name></expr></argument>&gt;</argument_list></name></type> <name>divmod</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>bigint</name><modifier>&amp;</modifier></type> <name>a1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bigint</name><modifier>&amp;</modifier></type> <name>b1</name></decl></parameter>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>norm</name> <init>= <expr><name>base</name> <operator>/</operator> <operator>(</operator><call><name><name>b1</name><operator>.</operator><name>z</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bigint</name></type> <name>a</name> <init>= <expr><call><name><name>a1</name><operator>.</operator><name>abs</name></name><argument_list>()</argument_list></call> <operator>*</operator> <name>norm</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bigint</name></type> <name>b</name> <init>= <expr><call><name><name>b1</name><operator>.</operator><name>abs</name></name><argument_list>()</argument_list></call> <operator>*</operator> <name>norm</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bigint</name></type> <name>q</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
        <name><name>q</name><operator>.</operator><name>z</name><operator>.</operator><name>resize</name></name><expr_stmt><expr><operator>(</operator><call><name><name>a</name><operator>.</operator><name>z</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>)</operator></expr>;</expr_stmt>

        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name><name>a</name><operator>.</operator><name>z</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
        <block>{
            <name>r</name> <expr_stmt><expr><operator>*=</operator> <name>base</name></expr>;</expr_stmt>
            <name>r</name> <expr_stmt><expr><operator>+=</operator> <name><name>a</name><operator>.</operator><name>z</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>s1</name> <init>= <expr><ternary><condition><expr><call><name><name>b</name><operator>.</operator><name>z</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>r</name><operator>.</operator><name>z</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>r</name><operator>.</operator><name>z</name><index>[<expr><call><name><name>b</name><operator>.</operator><name>z</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>s2</name> <init>= <expr><ternary><condition><expr><call><name><name>b</name><operator>.</operator><name>z</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal> <operator>&lt;</operator> <call><name><name>r</name><operator>.</operator><name>z</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>r</name><operator>.</operator><name>z</name><index>[<expr><call><name><name>b</name><operator>.</operator><name>z</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><call>(<name>int</name>)<argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><name>s1</name> <operator>*</operator> <name>base</name> <operator>+</operator> <name>s2</name><operator>)</operator> <operator>/</operator> <call><name><name>b</name><operator>.</operator><name>z</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <name>r</name> <expr_stmt><expr><operator>-=</operator> <name>b</name> <operator>*</operator> <name>d</name></expr>;</expr_stmt>
            <while>while <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
                <block type="pseudo"><name>r</name> <expr_stmt><expr><operator>+=</operator> <name>b</name></expr><operator>,</operator> <expr><operator>--</operator><name>d</name></expr>;</expr_stmt></block></while>
            <name><name>q</name><operator>.</operator><name>z</name><index>[<expr><name>i</name></expr>]</index></name> <expr_stmt><expr><operator>=</operator> <name>d</name></expr>;</expr_stmt>
        }</block></for>

        <name><name>q</name><operator>.</operator><name>sign</name></name> <expr_stmt><expr><operator>=</operator> <name><name>a1</name><operator>.</operator><name>sign</name></name> <operator>*</operator> <name><name>b1</name><operator>.</operator><name>sign</name></name></expr>;</expr_stmt>
        <name><name>r</name><operator>.</operator><name>sign</name></name> <expr_stmt><expr><operator>=</operator> <name><name>a1</name><operator>.</operator><name>sign</name></name></expr>;</expr_stmt>
        <name><name>q</name><operator>.</operator><name>trim</name></name><expr_stmt><expr><operator>(</operator><operator>)</operator></expr>;</expr_stmt>
        <name><name>r</name><operator>.</operator><name>trim</name></name><expr_stmt><expr><operator>(</operator><operator>)</operator></expr>;</expr_stmt>
        <return>return <expr><block>{<expr><name>q</name></expr>, <expr><name>r</name> <operator>/</operator> <name>norm</name></expr>}</block></expr>;</return>
    }</block></function></friend>

    <friend>friend <function><type><name>bigint</name></type> <name>sqrt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>bigint</name><modifier>&amp;</modifier></type> <name>a1</name></decl></parameter>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>bigint</name></type> <name>a</name> <init>= <expr><name>a1</name></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>a</name><operator>.</operator><name>z</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>a</name><operator>.</operator><name>z</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
            <block type="pseudo"><name><name>a</name><operator>.</operator><name>z</name><operator>.</operator><name>push_back</name></name><expr_stmt><expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt></block></while>

        <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name><name>a</name><operator>.</operator><name>z</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>firstDigit</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name><operator>::</operator><name>sqrt</name></name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name><name>a</name><operator>.</operator><name>z</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>base</name> <operator>+</operator> <name><name>a</name><operator>.</operator><name>z</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>norm</name> <init>= <expr><name>base</name> <operator>/</operator> <operator>(</operator><name>firstDigit</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
        <name>a</name> <expr_stmt><expr><operator>*=</operator> <name>norm</name></expr>;</expr_stmt>
        <name>a</name> <expr_stmt><expr><operator>*=</operator> <name>norm</name></expr>;</expr_stmt>
        <while>while <condition>(<expr><call><name><name>a</name><operator>.</operator><name>z</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>a</name><operator>.</operator><name>z</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
            <block type="pseudo"><name><name>a</name><operator>.</operator><name>z</name><operator>.</operator><name>push_back</name></name><expr_stmt><expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt></block></while>

        <decl_stmt><decl><type><name>bigint</name></type> <name>r</name> <init>= <expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><name><name>a</name><operator>.</operator><name>z</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>base</name> <operator>+</operator> <name><name>a</name><operator>.</operator><name>z</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <name>firstDigit</name> <expr_stmt><expr><operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name><operator>::</operator><name>sqrt</name></name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name><name>a</name><operator>.</operator><name>z</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>base</name> <operator>+</operator> <name><name>a</name><operator>.</operator><name>z</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>q</name> <init>= <expr><name>firstDigit</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bigint</name></type> <name>res</name></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>n</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control>
        <block>{
            <for>for <control>(<init>;</init><condition>;</condition> <incr><expr><operator>--</operator><name>q</name></expr></incr>)</control>
            <block>{
                <decl_stmt><decl><type><name>bigint</name></type> <name>r1</name> <init>= <expr><operator>(</operator><name>r</name> <operator>-</operator> <operator>(</operator><name>res</name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name>base</name> <operator>+</operator> <name>q</name><operator>)</operator> <operator>*</operator> <name>q</name><operator>)</operator> <operator>*</operator> <name>base</name> <operator>*</operator> <name>base</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>j</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><name><name>a</name><operator>.</operator><name>z</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>base</name> <operator>+</operator> <name><name>a</name><operator>.</operator><name>z</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>j</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>r1</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><then>
                <block>{
                    <name>r</name> <expr_stmt><expr><operator>=</operator> <name>r1</name></expr>;</expr_stmt>
                    <break>break;</break>
                }</block></then></if>
            }</block></for>
            <name>res</name> <expr_stmt><expr><operator>*=</operator> <name>base</name></expr>;</expr_stmt>
            <name>res</name> <expr_stmt><expr><operator>+=</operator> <name>q</name></expr>;</expr_stmt>

            <if>if <condition>(<expr><name>j</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then>
            <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>d1</name> <init>= <expr><ternary><condition><expr><call><name><name>res</name><operator>.</operator><name>z</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">2</literal> <operator>&lt;</operator> <call><name><name>r</name><operator>.</operator><name>z</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>r</name><operator>.</operator><name>z</name><index>[<expr><call><name><name>res</name><operator>.</operator><name>z</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>d2</name> <init>= <expr><ternary><condition><expr><call><name><name>res</name><operator>.</operator><name>z</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <call><name><name>r</name><operator>.</operator><name>z</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>r</name><operator>.</operator><name>z</name><index>[<expr><call><name><name>res</name><operator>.</operator><name>z</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>d3</name> <init>= <expr><ternary><condition><expr><call><name><name>res</name><operator>.</operator><name>z</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>r</name><operator>.</operator><name>z</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>r</name><operator>.</operator><name>z</name><index>[<expr><call><name><name>res</name><operator>.</operator><name>z</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
                <name>q</name> <expr_stmt><expr><operator>=</operator> <call>(<name>int</name>)<argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><name>d1</name> <operator>*</operator> <name>base</name> <operator>*</operator> <name>base</name> <operator>+</operator> <operator>(</operator><name>long</name> <name>long</name><operator>)</operator><name>d2</name> <operator>*</operator> <name>base</name> <operator>+</operator> <name>d3</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>firstDigit</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>

        <name><name>res</name><operator>.</operator><name>trim</name></name><expr_stmt><expr><operator>(</operator><operator>)</operator></expr>;</expr_stmt>
        <return>return <expr><name>res</name> <operator>/</operator> <name>norm</name></expr>;</return>
    }</block></function></friend>

    <function type="operator"><type><name>bigint</name></type> <name>operator<name>/</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>bigint</name><modifier>&amp;</modifier></type> <name>v</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
    <block>{
        <return>return <expr><call><name>divmod</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call><operator>.</operator><name>first</name></expr>;</return>
    }</block></function>

    <function type="operator"><type><name>bigint</name></type> <name>operator<name>%</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>bigint</name><modifier>&amp;</modifier></type> <name>v</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
    <block>{
        <return>return <expr><call><name>divmod</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call><operator>.</operator><name>second</name></expr>;</return>
    }</block></function>

    <function type="operator"><type><name>bigint</name><modifier>&amp;</modifier></type> <name>operator<name>/=</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>v</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>sign</name> <operator>=</operator> <operator>-</operator><name>sign</name></expr><operator>,</operator> <expr><name>v</name> <operator>=</operator> <operator>-</operator><name>v</name></expr>;</expr_stmt></block></then></if>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name><name>z</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>rem</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control>
        <block>{
            <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>cur</name> <init>= <expr><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>rem</name> <operator>*</operator> <operator>(</operator><name>long</name> <name>long</name><operator>)</operator><name>base</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call>(<name>int</name>)<argument_list>(<argument><expr><name>cur</name> <operator>/</operator> <name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>rem</name> <operator>=</operator> <call>(<name>int</name>)<argument_list>(<argument><expr><name>cur</name> <operator>%</operator> <name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name>trim</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>*</operator><name>this</name></expr>;</return>
    }</block></function>

    <function type="operator"><type><name>bigint</name></type> <name>operator<name>/</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
    <block>{
        <return>return <expr><call><name>bigint</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call> <operator>/=</operator> <name>v</name></expr>;</return>
    }</block></function>

    <function type="operator"><type><name>int</name></type> <name>operator<name>%</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
    <block>{
        <if>if <condition>(<expr><name>v</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>v</name> <operator>=</operator> <operator>-</operator><name>v</name></expr>;</expr_stmt></block></then></if>
        <decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name><name>z</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control>
            <block type="pseudo"><expr_stmt><expr><name>m</name> <operator>=</operator> <call>(<name>int</name>)<argument_list>(<argument><expr><operator>(</operator><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>m</name> <operator>*</operator> <operator>(</operator><name>long</name> <name>long</name><operator>)</operator><name>base</name><operator>)</operator> <operator>%</operator> <name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
        <return>return <expr><name>m</name> <operator>*</operator> <name>sign</name></expr>;</return>
    }</block></function>

    <function type="operator"><type><name>bigint</name><modifier>&amp;</modifier></type> <name>operator<name>*=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>bigint</name><modifier>&amp;</modifier></type> <name>v</name></decl></parameter>)</parameter_list>
    <block>{
        <expr_stmt><expr><operator>*</operator><name>this</name> <operator>=</operator> <operator>*</operator><name>this</name> <operator>*</operator> <name>v</name></expr>;</expr_stmt>
        <return>return <expr><operator>*</operator><name>this</name></expr>;</return>
    }</block></function>

    <function type="operator"><type><name>bigint</name><modifier>&amp;</modifier></type> <name>operator<name>/=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>bigint</name><modifier>&amp;</modifier></type> <name>v</name></decl></parameter>)</parameter_list>
    <block>{
        <expr_stmt><expr><operator>*</operator><name>this</name> <operator>=</operator> <operator>*</operator><name>this</name> <operator>/</operator> <name>v</name></expr>;</expr_stmt>
        <return>return <expr><operator>*</operator><name>this</name></expr>;</return>
    }</block></function>

    <function type="operator"><type><name>bool</name></type> <name>operator<name>&lt;</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>bigint</name><modifier>&amp;</modifier></type> <name>v</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
    <block>{
        <if>if <condition>(<expr><name>sign</name> <operator>!=</operator> <name><name>v</name><operator>.</operator><name>sign</name></name></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><name>sign</name> <operator>&lt;</operator> <name><name>v</name><operator>.</operator><name>sign</name></name></expr>;</return></block></then></if>
        <if>if <condition>(<expr><call><name><name>z</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name><name>v</name><operator>.</operator><name>z</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><call><name><name>z</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>*</operator> <name>sign</name> <operator>&lt;</operator> <call><name><name>v</name><operator>.</operator><name>z</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>*</operator> <name><name>v</name><operator>.</operator><name>sign</name></name></expr>;</return></block></then></if>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name><name>z</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
            <block type="pseudo"><if>if <condition>(<expr><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>v</name><operator>.</operator><name>z</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
                <block type="pseudo"><return>return <expr><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>sign</name> <operator>&lt;</operator> <name><name>v</name><operator>.</operator><name>z</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>sign</name></expr>;</return></block></then></if></block></for>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    }</block></function>

    <function type="operator"><type><name>bool</name></type> <name>operator<name>&gt;</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>bigint</name><modifier>&amp;</modifier></type> <name>v</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
    <block>{
        <return>return <expr><name>v</name> <operator>&lt;</operator> <operator>*</operator><name>this</name></expr>;</return>
    }</block></function>

    <function type="operator"><type><name>bool</name></type> <name>operator<name>&lt;=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>bigint</name><modifier>&amp;</modifier></type> <name>v</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
    <block>{
        <return>return <expr><operator>!</operator><operator>(</operator><name>v</name> <operator>&lt;</operator> <operator>*</operator><name>this</name><operator>)</operator></expr>;</return>
    }</block></function>

    <function type="operator"><type><name>bool</name></type> <name>operator<name>&gt;=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>bigint</name><modifier>&amp;</modifier></type> <name>v</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
    <block>{
        <return>return <expr><operator>!</operator><operator>(</operator><operator>*</operator><name>this</name> <operator>&lt;</operator> <name>v</name><operator>)</operator></expr>;</return>
    }</block></function>

    <function type="operator"><type><name>bool</name></type> <name>operator<name>==</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>bigint</name><modifier>&amp;</modifier></type> <name>v</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
    <block>{
        <return>return <expr><operator>!</operator><operator>(</operator><operator>*</operator><name>this</name> <operator>&lt;</operator> <name>v</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>v</name> <operator>&lt;</operator> <operator>*</operator><name>this</name><operator>)</operator></expr>;</return>
    }</block></function>

    <function type="operator"><type><name>bool</name></type> <name>operator<name>!=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>bigint</name><modifier>&amp;</modifier></type> <name>v</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
    <block>{
        <return>return <expr><operator>*</operator><name>this</name> <operator>&lt;</operator> <name>v</name> <operator>||</operator> <name>v</name> <operator>&lt;</operator> <operator>*</operator><name>this</name></expr>;</return>
    }</block></function>

    <function><type><name>void</name></type> <name>trim</name><parameter_list>()</parameter_list>
    <block>{
        <while>while <condition>(<expr><operator>!</operator><call><name><name>z</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>z</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
            <block type="pseudo"><expr_stmt><expr><call><name><name>z</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
        <if>if <condition>(<expr><call><name><name>z</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>sign</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
    }</block></function>

    <function><type><name>bool</name></type> <name>isZero</name><parameter_list>()</parameter_list> <specifier>const</specifier>
    <block>{
        <return>return <expr><call><name><name>z</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <friend>friend <function type="operator"><type><name>bigint</name></type> <name>operator<name>-</name></name><parameter_list>(<parameter><decl><type><name>bigint</name></type> <name>v</name></decl></parameter>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><operator>!</operator><call><name><name>v</name><operator>.</operator><name>z</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><name><name>v</name><operator>.</operator><name>sign</name></name> <expr_stmt><expr><operator>=</operator> <operator>-</operator><name><name>v</name><operator>.</operator><name>sign</name></name></expr>;</expr_stmt></block></then></if>
        <return>return <expr><name>v</name></expr>;</return>
    }</block></function></friend>

    <function><type><name>bigint</name></type> <name>abs</name><parameter_list>()</parameter_list> <specifier>const</specifier>
    <block>{
        <return>return <expr><ternary><condition><expr><name>sign</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><operator>*</operator><name>this</name></expr> </then><else>: <expr><operator>-</operator><operator>*</operator><name>this</name></expr></else></ternary></expr>;</return>
    }</block></function>

    <function><type><name>long</name> <name>long</name></type> <name>longValue</name><parameter_list>()</parameter_list> <specifier>const</specifier>
    <block>{
        <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name><name>z</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
            <block type="pseudo"><expr_stmt><expr><name>res</name> <operator>=</operator> <name>res</name> <operator>*</operator> <name>base</name> <operator>+</operator> <name><name>z</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
        <return>return <expr><name>res</name> <operator>*</operator> <name>sign</name></expr>;</return>
    }</block></function>

    <friend>friend <function><type><name>bigint</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>bigint</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bigint</name><modifier>&amp;</modifier></type> <name>b</name></decl></parameter>)</parameter_list>
    <block>{
        <return>return <expr><ternary><condition><expr><call><name><name>b</name><operator>.</operator><name>isZero</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name>a</name></expr> </then><else>: <expr><call><name>gcd</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name> <operator>%</operator> <name>b</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
    }</block></function></friend>

    <friend>friend <function><type><name>bigint</name></type> <name>lcm</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>bigint</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bigint</name><modifier>&amp;</modifier></type> <name>b</name></decl></parameter>)</parameter_list>
    <block>{
        <return>return <expr><name>a</name> <operator>/</operator> <call><name>gcd</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>b</name></expr>;</return>
    }</block></function></friend>

    <function><type><name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>string</name><modifier>&amp;</modifier></type> <name>s</name></decl></parameter>)</parameter_list>
    <block>{
        <expr_stmt><expr><name>sign</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>z</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>pos</name> <operator>&lt;</operator> <call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal> <operator>||</operator> <name><name>s</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal><operator>)</operator></expr>)</condition>
        <block>{
            <if>if <condition>(<expr><name><name>s</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>sign</name> <operator>=</operator> <operator>-</operator><name>sign</name></expr>;</expr_stmt></block></then></if>
            <expr_stmt><expr><operator>++</operator><name>pos</name></expr>;</expr_stmt>
        }</block></while>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <name>pos</name></expr>;</condition> <incr><expr><name>i</name> <operator>-=</operator> <name>base_digits</name></expr></incr>)</control>
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><call><name>max</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <name>base_digits</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>i</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
                <block type="pseudo"><expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <name><name>s</name><index>[<expr><name>j</name></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block></for>
            <expr_stmt><expr><call><name><name>z</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name>trim</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <friend>friend <function type="operator"><type><name>istream</name><modifier>&amp;</modifier></type> <name>operator<name>&gt;&gt;</name></name><parameter_list>(<parameter><decl><type><name>istream</name><modifier>&amp;</modifier></type> <name>stream</name></decl></parameter>, <parameter><decl><type><name>bigint</name><modifier>&amp;</modifier></type> <name>v</name></decl></parameter>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>
        <name>stream</name> <expr_stmt><expr><operator>&gt;&gt;</operator> <name>s</name></expr>;</expr_stmt>
        <name><name>v</name><operator>.</operator><name>read</name></name><expr_stmt><expr><operator>(</operator><name>s</name><operator>)</operator></expr>;</expr_stmt>
        <return>return <expr><name>stream</name></expr>;</return>
    }</block></function></friend>

    <friend>friend <function type="operator"><type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type> <name>stream</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bigint</name><modifier>&amp;</modifier></type> <name>v</name></decl></parameter>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><name><name>v</name><operator>.</operator><name>sign</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
            <block type="pseudo"><name>stream</name> <expr_stmt><expr><operator>&lt;&lt;</operator> <literal type="char">'-'</literal></expr>;</expr_stmt></block></then></if>
        <name>stream</name> <expr_stmt><expr><operator>&lt;&lt;</operator> <operator>(</operator><ternary><condition><expr><call><name><name>v</name><operator>.</operator><name>z</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name><name>v</name><operator>.</operator><name>z</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name><name>v</name><operator>.</operator><name>z</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control>
            <block type="pseudo"><name>stream</name> <expr_stmt><expr><operator>&lt;&lt;</operator> <call><name>setw</name><argument_list>(<argument><expr><name>base_digits</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name>setfill</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name><name>v</name><operator>.</operator><name>z</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
        <return>return <expr><name>stream</name></expr>;</return>
    }</block></function></friend>

    <function><specifier>static</specifier> <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>convert_base</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>old_digits</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>new_digits</name></decl></parameter>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></type> <name>p</name><argument_list>(<argument><expr><call><name>max</name><argument_list>(<argument><expr><name>old_digits</name></expr></argument>, <argument><expr><name>new_digits</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>p</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>p</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <literal type="number">10</literal></expr>;</expr_stmt></block></for>
        <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>res</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>cur</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>cur_digits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>v</name> <range>: <expr><name>a</name></expr></range></decl></init>)</control>
        <block>{
            <expr_stmt><expr><name>cur</name> <operator>+=</operator> <name>v</name> <operator>*</operator> <name><name>p</name><index>[<expr><name>cur_digits</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>cur_digits</name> <operator>+=</operator> <name>old_digits</name></expr>;</expr_stmt>
            <while>while <condition>(<expr><name>cur_digits</name> <operator>&gt;=</operator> <name>new_digits</name></expr>)</condition>
            <block>{
                <expr_stmt><expr><call><name><name>res</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>int</name><argument_list>(<argument><expr><name>cur</name> <operator>%</operator> <name><name>p</name><index>[<expr><name>new_digits</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>cur</name> <operator>/=</operator> <name><name>p</name><index>[<expr><name>new_digits</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>cur_digits</name> <operator>-=</operator> <name>new_digits</name></expr>;</expr_stmt>
            }</block></while>
        }</block></for>
        <expr_stmt><expr><call><name><name>res</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr><operator>!</operator><call><name><name>res</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>res</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
            <block type="pseudo"><expr_stmt><expr><call><name><name>res</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
        <return>return <expr><name>res</name></expr>;</return>
    }</block></function>

    <typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></type> <name>vll</name>;</typedef>

    <function><specifier>static</specifier> <type><name>vll</name></type> <name>karatsubaMultiply</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vll</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vll</name><modifier>&amp;</modifier></type> <name>b</name></decl></parameter>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name><name>a</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>vll</name></type> <name>res</name><argument_list>(<argument><expr><name>n</name> <operator>+</operator> <name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>n</name> <operator>&lt;=</operator> <literal type="number">32</literal></expr>)</condition><then>
        <block>{
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
                <block type="pseudo"><for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
                    <block type="pseudo"><expr_stmt><expr><name><name>res</name><index>[<expr><name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>+=</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block></for></block></for>
            <return>return <expr><name>res</name></expr>;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>vll</name></type> <name>a1</name><argument_list>(<argument><expr><call><name><name>a</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>a</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>k</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>vll</name></type> <name>a2</name><argument_list>(<argument><expr><call><name><name>a</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>k</name></expr></argument>, <argument><expr><call><name><name>a</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>vll</name></type> <name>b1</name><argument_list>(<argument><expr><call><name><name>b</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>b</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>k</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>vll</name></type> <name>b2</name><argument_list>(<argument><expr><call><name><name>b</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>k</name></expr></argument>, <argument><expr><call><name><name>b</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>vll</name></type> <name>a1b1</name> <init>= <expr><call><name>karatsubaMultiply</name><argument_list>(<argument><expr><name>a1</name></expr></argument>, <argument><expr><name>b1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>vll</name></type> <name>a2b2</name> <init>= <expr><call><name>karatsubaMultiply</name><argument_list>(<argument><expr><name>a2</name></expr></argument>, <argument><expr><name>b2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>k</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><expr_stmt><expr><name><name>a2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>a1</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>k</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><expr_stmt><expr><name><name>b2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>b1</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>

        <decl_stmt><decl><type><name>vll</name></type> <name>r</name> <init>= <expr><call><name>karatsubaMultiply</name><argument_list>(<argument><expr><name>a2</name></expr></argument>, <argument><expr><name>b2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>a1b1</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><expr_stmt><expr><name><name>r</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-=</operator> <name><name>a1b1</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>a2b2</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><expr_stmt><expr><name><name>r</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-=</operator> <name><name>a2b2</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>

        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>r</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><expr_stmt><expr><name><name>res</name><index>[<expr><name>i</name> <operator>+</operator> <name>k</name></expr>]</index></name> <operator>+=</operator> <name><name>r</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>a1b1</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><expr_stmt><expr><name><name>res</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>a1b1</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>a2b2</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><expr_stmt><expr><name><name>res</name><index>[<expr><name>i</name> <operator>+</operator> <name>n</name></expr>]</index></name> <operator>+=</operator> <name><name>a2b2</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
        <return>return <expr><name>res</name></expr>;</return>
    }</block></function>

    <function type="operator"><type><name>bigint</name></type> <name>operator<name>*</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>bigint</name><modifier>&amp;</modifier></type> <name>v</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
    <block>{
        <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>a6</name> <init>= <expr><call><name>convert_base</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name>base_digits</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>b6</name> <init>= <expr><call><name>convert_base</name><argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>z</name></name></expr></argument>, <argument><expr><name>base_digits</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>vll</name></type> <name>a</name><argument_list>(<argument><expr><call><name><name>a6</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>a6</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>vll</name></type> <name>b</name><argument_list>(<argument><expr><call><name><name>b6</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>b6</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>a</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>b</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition>
            <block type="pseudo"><expr_stmt><expr><call><name><name>a</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></while>
        <while>while <condition>(<expr><call><name><name>b</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>a</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition>
            <block type="pseudo"><expr_stmt><expr><call><name><name>b</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></while>
        <while>while <condition>(<expr><call><name><name>a</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&amp;</operator> <operator>(</operator><call><name><name>a</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition>
            <block type="pseudo"><expr_stmt><expr><call><name><name>a</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name><name>b</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></while>
        <decl_stmt><decl><type><name>vll</name></type> <name>c</name> <init>= <expr><call><name>karatsubaMultiply</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bigint</name></type> <name>res</name></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>res</name><operator>.</operator><name>sign</name></name> <operator>=</operator> <name>sign</name> <operator>*</operator> <name><name>v</name><operator>.</operator><name>sign</name></name></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>carry</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>c</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>cur</name> <init>= <expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>carry</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>res</name><operator>.</operator><name>z</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call>(<name>int</name>)<argument_list>(<argument><expr><name>cur</name> <operator>%</operator> <literal type="number">1000000</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>carry</name> <operator>=</operator> <call>(<name>int</name>)<argument_list>(<argument><expr><name>cur</name> <operator>/</operator> <literal type="number">1000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><name><name>res</name><operator>.</operator><name>z</name></name> <operator>=</operator> <call><name>convert_base</name><argument_list>(<argument><expr><name><name>res</name><operator>.</operator><name>z</name></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>base_digits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>res</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>res</name></expr>;</return>
    }</block></function>
</public>}</block>;</struct>


<function><type><name>bigint</name></type> <name>exgcd</name><parameter_list>(<parameter><decl><type><name>bigint</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>bigint</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>bigint</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>,<parameter><decl><type><name>bigint</name> <modifier>&amp;</modifier></type><name>y</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>bigint</name></type> <name>x1</name></decl>,<decl><type ref="prev"/><name>y1</name></decl>,<decl><type ref="prev"/><name>x0</name></decl>,<decl><type ref="prev"/><name>y0</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>x0</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name>y0</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>x1</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name>y1</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name>y</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>bigint</name></type> <name>r</name><init>=<expr><name>a</name><operator>%</operator><name>b</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bigint</name></type> <name>q</name><init>=<expr><operator>(</operator><name>a</name><operator>-</operator><name>r</name><operator>)</operator><operator>/</operator><name>b</name></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>r</name><operator>!=</operator><literal type="number">0</literal></expr>)</condition>
    <block>{
        <expr_stmt><expr><name>x</name><operator>=</operator><name>x0</name><operator>-</operator><name>q</name><operator>*</operator><name>x1</name></expr>;</expr_stmt> <expr_stmt><expr><name>y</name><operator>=</operator><name>y0</name><operator>-</operator><name>q</name><operator>*</operator><name>y1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>x0</name><operator>=</operator><name>x1</name></expr>;</expr_stmt> <expr_stmt><expr><name>y0</name><operator>=</operator><name>y1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>x1</name><operator>=</operator><name>x</name></expr>;</expr_stmt> <expr_stmt><expr><name>y1</name><operator>=</operator><name>y</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>a</name><operator>=</operator><name>b</name></expr>;</expr_stmt> <expr_stmt><expr><name>b</name><operator>=</operator><name>r</name></expr>;</expr_stmt> <expr_stmt><expr><name>r</name><operator>=</operator><name>a</name><operator>%</operator><name>b</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>q</name><operator>=</operator><operator>(</operator><name>a</name><operator>-</operator><name>r</name><operator>)</operator><operator>/</operator><name>b</name></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><name>b</name></expr>;</return>
}</block></function>
<function><type><name>bool</name></type> <name>q_ie</name><parameter_list>(<parameter><decl><type><name>bigint</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>bigint</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>bigint</name></type> <name>c</name></decl></parameter>,<parameter><decl><type><name>bigint</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>,<parameter><decl><type><name>bigint</name> <modifier>&amp;</modifier></type><name>y</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>bigint</name></type> <name>_gcd</name><init>=<expr><call><name>exgcd</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if>if<condition>(<expr><name>c</name><operator>%</operator><name>_gcd</name><operator>!=</operator><literal type="number">0</literal></expr>)</condition><then>
	<block>{
		<return>return <expr><literal type="boolean">false</literal></expr>;</return>
	}</block></then>
	<else>else
	<block>{
		<decl_stmt><decl><type><name>bigint</name></type> <name>k</name><init>=<expr><name>c</name><operator>/</operator><name>_gcd</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>x</name><operator>*=</operator><name>k</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>y</name><operator>*=</operator><name>k</name></expr>;</expr_stmt>
		<return>return <expr><literal type="boolean">true</literal></expr>;</return>
	}</block></else></if>
}</block></function>
<decl_stmt><decl><type><name>bigint</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>p</name></decl>,<decl><type ref="prev"/><name>d</name></decl>,<decl><type ref="prev"/><name>w</name></decl>,<decl><type ref="prev"/><name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>p</name><operator>&gt;&gt;</operator><name>w</name><operator>&gt;&gt;</operator><name>d</name></expr>;</expr_stmt>
    <if>if<condition>(<expr><call><name>q_ie</name><argument_list>(<argument><expr><name>w</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>p</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
        <decl_stmt><decl><type><name>bigint</name></type> <name>ta</name><init>=<expr><name>d</name><operator>/</operator><call><name>__gcd</name><argument_list>(<argument><expr><name>w</name></expr></argument>,<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bigint</name></type> <name>tb</name><init>=<expr><name>w</name><operator>/</operator><call><name>__gcd</name><argument_list>(<argument><expr><name>w</name></expr></argument>,<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bigint</name></type> <name>k1</name><init>=<expr><name>x</name><operator>/</operator><name>ta</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>x</name><operator>-=</operator><name>k1</name><operator>*</operator><name>ta</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>y</name><operator>+=</operator><name>k1</name><operator>*</operator><name>tb</name></expr>;</expr_stmt>
        <while>while<condition>(<expr><name>x</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition>
        <block>{
            <expr_stmt><expr><name>x</name><operator>+=</operator><name>ta</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>y</name><operator>-=</operator><name>tb</name></expr>;</expr_stmt>
        }</block></while>
        <if>if<condition>(<expr><name>y</name><operator>&gt;=</operator><literal type="number">0</literal><operator>&amp;&amp;</operator><name>x</name><operator>+</operator><name>y</name><operator>&lt;=</operator><name>n</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>x</name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name>y</name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name>n</name><operator>-</operator><name>x</name><operator>-</operator><name>y</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>bigint</name></type> <name>k2</name><init>=<expr><name>y</name><operator>/</operator><name>tb</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>y</name><operator>-=</operator><name>k2</name><operator>*</operator><name>tb</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>x</name><operator>+=</operator><name>k2</name><operator>*</operator><name>ta</name></expr>;</expr_stmt>
        <while>while<condition>(<expr><name>y</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition>
        <block>{
            <expr_stmt><expr><name>y</name><operator>+=</operator><name>tb</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>x</name><operator>-=</operator><name>ta</name></expr>;</expr_stmt>
        }</block></while>
        <if>if<condition>(<expr><name>x</name><operator>&gt;=</operator><literal type="number">0</literal><operator>&amp;&amp;</operator><name>x</name><operator>+</operator><name>y</name><operator>&lt;=</operator><name>n</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>x</name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name>y</name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name>n</name><operator>-</operator><name>x</name><operator>-</operator><name>y</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-1\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else
    <block>{
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-1\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
}</block></function></unit>
