<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28918379_62491219.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_map&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></type> <name>keys</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>unordered_map</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>, <argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>tint</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>operation</name><parameter_list>()</parameter_list><block>{
	<if>if<condition>(<expr><name><name>count</name><index>[<expr><operator>*</operator><call><name><name>keys</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>]</index></name> <operator>&lt;</operator> <name><name>count</name><index>[<expr><operator>*</operator><operator>(</operator><operator>--</operator><call><name><name>keys</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call><operator>)</operator></expr>]</index></name></expr>)</condition><then><block>{
		<comment type="line">//increase</comment>
		<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>c</name> <init>= <expr><name><name>count</name><index>[<expr><operator>*</operator><call><name><name>keys</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>curr</name> <init>= <expr><operator>*</operator><call><name><name>keys</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>next</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>++</operator><call><name><name>keys</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>c</name> <operator>*</operator> <operator>(</operator><name>next</name> <operator>-</operator> <name>curr</name><operator>)</operator> <operator>&lt;=</operator> <name>k</name></expr>)</condition><then><block>{
			<expr_stmt><expr><name>k</name> <operator>-=</operator> <name>c</name> <operator>*</operator> <operator>(</operator><name>next</name> <operator>-</operator> <name>curr</name><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>count</name><index>[<expr><name>next</name></expr>]</index></name> <operator>+=</operator> <name><name>count</name><index>[<expr><name>curr</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>count</name><index>[<expr><name>curr</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>keys</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>keys</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		}</block></then></if>
		<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>maxp</name> <init>= <expr><name>k</name> <operator>/</operator> <name>c</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>keys</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>keys</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>keys</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>curr</name> <operator>+</operator> <name>maxp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	}</block></then>
	<else>else<block>{
		<comment type="line">//decrease</comment>
		<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>c</name> <init>= <expr><name><name>count</name><index>[<expr><operator>*</operator><operator>(</operator><operator>--</operator><call><name><name>keys</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call><operator>)</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>curr</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>--</operator><call><name><name>keys</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>prev</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>--</operator><operator>(</operator><operator>--</operator><call><name><name>keys</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>c</name> <operator>*</operator> <operator>(</operator><name>curr</name> <operator>-</operator> <name>prev</name><operator>)</operator> <operator>&lt;=</operator> <name>k</name></expr>)</condition><then><block>{
			<expr_stmt><expr><name>k</name> <operator>-=</operator> <name>c</name> <operator>*</operator> <operator>(</operator><name>curr</name> <operator>-</operator> <name>prev</name><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>count</name><index>[<expr><name>prev</name></expr>]</index></name> <operator>+=</operator> <name><name>count</name><index>[<expr><name>curr</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>count</name><index>[<expr><name>curr</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>keys</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><operator>--</operator><call><name><name>keys</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		}</block></then></if>
		<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>maxp</name> <init>= <expr><name>k</name> <operator>/</operator> <name>c</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>keys</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><operator>--</operator><call><name><name>keys</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>keys</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>curr</name> <operator>-</operator> <name>maxp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	}</block></else></if>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>tint</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>keys</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>tint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>count</name><index>[<expr><name>tint</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
	}</block></for>
	<while>while<condition>(<expr><name>k</name> <operator>&amp;&amp;</operator> <call><name><name>keys</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block type="pseudo"><expr_stmt><expr><call><name>operation</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>*</operator><operator>(</operator><operator>--</operator><call><name><name>keys</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>-</operator> <operator>*</operator><call><name><name>keys</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function></unit>
