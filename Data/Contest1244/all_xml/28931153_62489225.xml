<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28931153_62489225.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ii</name></cpp:macro> <cpp:value>pair &lt;int, int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>app</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a.begin(), a.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bp</name></cpp:macro> <cpp:value>__builtin_popcount</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>s</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Time</name></cpp:macro> <cpp:value>(double)clock()/CLOCKS_PER_SEC</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">1e5</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>, <decl><type ref="prev"/><name>INF</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name><name>a</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>pref</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>post</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>bool</name></type> <name>check</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>m</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
        <while>while <condition>(<expr><name>l</name> <operator>&lt;</operator> <name>n</name> <operator>&amp;&amp;</operator> <name><name>a</name><index>[<expr><name>l</name></expr>]</index></name> <operator>&lt;=</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>m</name></expr>)</condition> <block type="pseudo"><expr_stmt><expr><operator>++</operator><name>l</name></expr>;</expr_stmt></block></while>
        <if>if <condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>i</name> <operator>-</operator> <name><name>pref</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>post</name><index>[<expr><name>l</name></expr>]</index></name> <operator>-</operator> <operator>(</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>m</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>n</name> <operator>-</operator> <name>l</name><operator>)</operator> <operator>&lt;=</operator> <name>k</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
    }</block></for>   
    <decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{
        <while>while <condition>(<expr><name>r</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>a</name><index>[<expr><name>r</name></expr>]</index></name> <operator>&gt;=</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name>m</name></expr>)</condition> <block type="pseudo"><expr_stmt><expr><operator>--</operator><name>r</name></expr>;</expr_stmt></block></while>
        <if>if <condition>(<expr><operator>(</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name>m</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>r</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <name><name>pref</name><index>[<expr><name>r</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>post</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>n</name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;=</operator> <name>k</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
    }</block></for>   
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>   
<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HOME</name></cpp:ifdef>
    <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"input.txt"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>a</name> <operator>+</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>pref</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>pref</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>post</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>post</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><name>INF</name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>l</name> <operator>&lt;</operator> <name>r</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><operator>(</operator><name>l</name> <operator>+</operator> <name>r</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name>check</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>r</name> <operator>=</operator> <name>m</name></expr>;</expr_stmt></block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><name>l</name> <operator>=</operator> <name>m</name></expr>;</expr_stmt></block></else></if>
    }</block></while>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>r</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
}</block></function>   </unit>
