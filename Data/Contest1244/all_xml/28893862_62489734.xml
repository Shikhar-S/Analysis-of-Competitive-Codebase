<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28893862_62489734.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a.begin(),a.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>setDP</name><parameter_list>(<parameter><type><name>arr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(arr,-1,sizeof arr)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>oo</name></cpp:macro> <cpp:value>2000000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inf</name></cpp:macro> <cpp:value>1000000000000000LL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">105001</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>freqL</name></decl>,<decl><type ref="prev"/><name>freqR</name></decl>,<decl><type ref="prev"/><name>L</name></decl>,<decl><type ref="prev"/><name>R</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>freq</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>a</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>v</name></decl>;</decl_stmt>
<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ONLINE_JUDGE</name></cpp:ifndef>
        <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"in.txt"</literal></expr></argument>,<argument><expr><literal type="string">"r"</literal></expr></argument>,<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>k</name></expr> ;</expr_stmt>
    <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>,<argument><expr><name>a</name><operator>+</operator><name>i</name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><name><name>freq</name><index>[<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>a</name><operator>+</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><if>if<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><call><name><name>v</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></block></for>
    <expr_stmt><expr><name>freqL</name><operator>=</operator><name><name>freq</name><index>[<expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>freqR</name><operator>=</operator><name><name>freq</name><index>[<expr><call><name><name>v</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>steps</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>L</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>R</name><operator>=</operator><call><name><name>v</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>k</name><operator>&gt;</operator><literal type="number">0</literal><operator>&amp;&amp;</operator><name>L</name><operator>!=</operator><name>R</name></expr>)</condition><block>{
        <if>if<condition>(<expr><name>freqL</name><operator>&lt;</operator><name>freqR</name></expr>)</condition><then><block>{
            <expr_stmt><expr><name>steps</name> <operator>=</operator> <name>k</name><operator>/</operator><name>freqL</name></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>steps</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><break>break;</break></block></then></if>
            <if>if<condition>(<expr><name><name>v</name><index>[<expr><name>L</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name>steps</name><operator>&lt;=</operator><name><name>v</name><index>[<expr><name>L</name></expr>]</index></name></expr>)</condition><then><block>{
                <expr_stmt><expr><name>k</name><operator>-=</operator><operator>(</operator><name><name>v</name><index>[<expr><name>L</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>v</name><index>[<expr><name>L</name></expr>]</index></name><operator>)</operator><operator>*</operator><name>freqL</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>L</name><operator>++</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>freqL</name><operator>+=</operator><name><name>freq</name><index>[<expr><name><name>v</name><index>[<expr><name>L</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
            }</block></then><else>else<block>{
                <expr_stmt><expr><name><name>v</name><index>[<expr><name>L</name></expr>]</index></name><operator>+=</operator><name>steps</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>k</name><operator>-=</operator><name>freqL</name><operator>*</operator><name>steps</name></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then><else>else<block>{
            <expr_stmt><expr><name>steps</name> <operator>=</operator> <name>k</name><operator>/</operator><name>freqR</name></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>steps</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><break>break;</break></block></then></if>
            <if>if<condition>(<expr><name><name>v</name><index>[<expr><name>R</name></expr>]</index></name><operator>-</operator><name>steps</name><operator>&lt;=</operator><name><name>v</name><index>[<expr><name>R</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><then><block>{
                <expr_stmt><expr><name>k</name><operator>-=</operator><operator>(</operator><name><name>v</name><index>[<expr><name>R</name></expr>]</index></name><operator>-</operator><name><name>v</name><index>[<expr><name>R</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>*</operator><name>freqR</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>R</name><operator>--</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>freqR</name><operator>+=</operator><name><name>freq</name><index>[<expr><name><name>v</name><index>[<expr><name>R</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
            }</block></then><else>else<block>{
                <expr_stmt><expr><name><name>v</name><index>[<expr><name>R</name></expr>]</index></name><operator>-=</operator><name>steps</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>k</name><operator>-=</operator><name>freqR</name><operator>*</operator><name>steps</name></expr>;</expr_stmt>
            }</block></else></if>
        }</block></else></if>
    }</block></while>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>v</name><index>[<expr><name>R</name></expr>]</index></name><operator>-</operator><name><name>v</name><index>[<expr><name>L</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>




    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
