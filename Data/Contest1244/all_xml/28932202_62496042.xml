<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28932202_62496042.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>LL</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name><init>=<expr><literal type="number">100005</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name><name>a</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LL</name></type> <name><name>L</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>R</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LL</name></type> <name>k</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>BS</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>l</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>r</name><init>=<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>mid</name></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>l</name><operator>+</operator><literal type="number">1</literal><operator>&lt;</operator><name>r</name></expr>)</condition> <block>{
		<expr_stmt><expr><name>mid</name><operator>=</operator><operator>(</operator><name>l</name><operator>+</operator><name>r</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<if>if<condition>(<expr><name><name>a</name><index>[<expr><name>mid</name></expr>]</index></name><operator>&lt;=</operator><name>val</name></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>l</name><operator>=</operator><name>mid</name></expr>;</expr_stmt></block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><name>r</name><operator>=</operator><name>mid</name></expr>;</expr_stmt></block></else></if>
	}</block></while>
	<return>return <expr><name>l</name></expr>;</return>
}</block></function>
<function><type><name>bool</name></type> <name>Check</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>d</name></decl></parameter>)</parameter_list> <block>{
	<for>for<control>(<init><decl><type><name>LL</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<decl_stmt><decl><type><name>LL</name></type> <name>j</name><init>=<expr><call><name>BS</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name>d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>LL</name></type> <name>sl</name><init>=<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><operator>(</operator><name>i</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>-</operator><name><name>L</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>LL</name></type> <name>sr</name><init>=<expr><name><name>R</name><index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><operator>(</operator><name>n</name><operator>-</operator><name>j</name><operator>)</operator><operator>*</operator><operator>(</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name>d</name><operator>)</operator></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>sl</name><operator>+</operator><name>sr</name><operator>&lt;=</operator><name>k</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>
	}</block></for>
	<for>for<control>(<init><decl><type><name>LL</name></type> <name>j</name><init>=<expr><name>n</name></expr></init></decl>;</init><condition><expr><name>j</name><operator>&gt;=</operator><literal type="number">1</literal></expr>;</condition><incr><expr><name>j</name><operator>--</operator></expr></incr>)</control> <block>{
		<decl_stmt><decl><type><name>LL</name></type> <name>i</name><init>=<expr><call><name>BS</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name><operator>-</operator><name>d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>LL</name></type> <name>sl</name><init>=<expr><operator>(</operator><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name><operator>-</operator><name>d</name><operator>)</operator><operator>*</operator><name>i</name><operator>-</operator><name><name>L</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>LL</name></type> <name>sr</name><init>=<expr><name><name>R</name><index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><operator>(</operator><name>n</name><operator>-</operator><name>j</name><operator>)</operator><operator>*</operator><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>sl</name><operator>+</operator><name>sr</name><operator>&lt;=</operator><name>k</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>
	}</block></for>
	<return>return <expr><literal type="boolean">false</literal></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>a</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>a</name><operator>+</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><name><name>L</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>L</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>n</name></expr></init></decl>;</init><condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">1</literal></expr>;</condition><incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><name><name>R</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>R</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
	<decl_stmt><decl><type><name>int</name></type> <name>l</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>r</name><init>=<expr><literal type="number">1e9</literal></expr></init></decl>,<decl><type ref="prev"/><name>mid</name></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>l</name><operator>+</operator><literal type="number">1</literal><operator>&lt;</operator><name>r</name></expr>)</condition> <block>{
		<expr_stmt><expr><name>mid</name><operator>=</operator><operator>(</operator><name>l</name><operator>+</operator><name>r</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<if>if<condition>(<expr><call><name>Check</name><argument_list>(<argument><expr><name>mid</name></expr></argument>)</argument_list></call></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>r</name><operator>=</operator><name>mid</name></expr>;</expr_stmt></block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><name>l</name><operator>=</operator><name>mid</name></expr>;</expr_stmt></block></else></if>
	}</block></while>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
