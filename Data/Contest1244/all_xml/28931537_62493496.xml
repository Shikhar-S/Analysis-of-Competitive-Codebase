<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28931537_62493496.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ull</name></cpp:macro> <cpp:value>unsigned ll</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vi</name></cpp:macro> <cpp:value>vector&lt;ll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vvi</name></cpp:macro> <cpp:value>vector&lt;vi&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x.begin(), x.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ld</name></cpp:macro> <cpp:value>long double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;ll, ll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mt</name></cpp:macro> <cpp:value>make_tuple</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mn</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a = min(a, b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mx</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a = max(a, b)</cpp:value></cpp:define>
 
<using>using <namespace>namespace <name>std</name>;</namespace></using>
 
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>INF</name> <init>= <expr><operator>(</operator><name>ll</name><operator>)</operator><literal type="number">2e9</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>inf</name> <init>= <expr><operator>(</operator><name>ll</name><operator>)</operator><literal type="number">2e18</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ld</name></type> <name>eps</name> <init>= <expr><operator>(</operator><name>ld</name><operator>)</operator><literal type="number">1e-6</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>mod</name> <init>= <expr><operator>(</operator><name>ll</name><operator>)</operator><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>MAXN</name> <init>= <expr><operator>(</operator><name>ll</name><operator>)</operator><literal type="number">1e6</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>MAXC</name> <init>= <expr><operator>(</operator><name>ll</name><operator>)</operator><literal type="number">6e6</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>MAXLOG</name> <init>= <expr><literal type="number">65</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>maxlen</name> <init>= <expr><operator>(</operator><name>ll</name><operator>)</operator><literal type="number">1e5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>asci</name> <init>= <expr><operator>(</operator><name>ll</name><operator>)</operator><literal type="number">256</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>block</name> <init>= <expr><literal type="number">707</literal></expr></init></decl>;</decl_stmt>
<comment type="line">//</comment>
<comment type="block">/*#include &lt;ext/pb_ds/assoc_container.hpp&gt;
#include &lt;ext/pb_ds/tree_policy.hpp&gt;
using namespace __gnu_pbds;
typedef tree&lt;
ll,
null_type,
less&lt;ll&gt;,
rb_tree_tag,
tree_order_statistics_node_update&gt;
ordered_set;*/</comment>
 
<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name>istream</name><modifier>&amp;</modifier></type> <name>operator <name>&gt;&gt;</name></name><parameter_list>(<parameter><decl><type><name>istream</name> <modifier>&amp;</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>arr</name></decl></parameter>)</parameter_list><block>{
     <for>for <control>(<init><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>cnt</name> <range>: <expr><name>arr</name></expr></range></decl></init>)</control> <block>{
        <expr_stmt><expr><name>in</name> <operator>&gt;&gt;</operator> <name>cnt</name></expr>;</expr_stmt>
    }</block></for>
    <return>return <expr><name>in</name></expr>;</return>
}</block></function><empty_stmt>;</empty_stmt>
 
<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>vi</name></type> <name>a</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>r</name> <init>= <expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>r</name> <operator>&gt;</operator> <name>l</name></expr>)</condition> <block>{
        <if>if <condition>(<expr><name><name>a</name><index>[<expr><name>l</name></expr>]</index></name> <operator>==</operator> <name><name>a</name><index>[<expr><name>l</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><then> <block>{<expr_stmt><expr><name>l</name><operator>++</operator></expr>;</expr_stmt> <continue>continue;</continue>}</block></then></if>
        <if>if <condition>(<expr><name><name>a</name><index>[<expr><name>r</name></expr>]</index></name> <operator>==</operator> <name><name>a</name><index>[<expr><name>r</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><then> <block>{<expr_stmt><expr><name>r</name><operator>--</operator></expr>;</expr_stmt> <continue>continue;</continue>}</block></then></if>
        <if>if <condition>(<expr><name>l</name> <operator>&lt;=</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>r</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>k</name> <operator>&gt;=</operator> <operator>(</operator><name>l</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>a</name><index>[<expr><name>l</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>a</name><index>[<expr><name>l</name></expr>]</index></name><operator>)</operator></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>k</name> <operator>-=</operator> <operator>(</operator><name>l</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>a</name><index>[<expr><name>l</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>a</name><index>[<expr><name>l</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt></block></then>
            <else>else <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>a</name><index>[<expr><name>r</name></expr>]</index></name> <operator>-</operator> <name><name>a</name><index>[<expr><name>l</name></expr>]</index></name> <operator>-</operator> <name>k</name> <operator>/</operator> <operator>(</operator><name>l</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr><operator>,</operator> <expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
            <expr_stmt><expr><name>l</name><operator>++</operator></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <if>if <condition>(<expr><name>k</name> <operator>&gt;=</operator> <operator>(</operator><name>n</name> <operator>-</operator> <name>r</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>a</name><index>[<expr><name>r</name></expr>]</index></name> <operator>-</operator> <name><name>a</name><index>[<expr><name>r</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>k</name> <operator>-=</operator> <operator>(</operator><name>n</name> <operator>-</operator> <name>r</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>a</name><index>[<expr><name>r</name></expr>]</index></name> <operator>-</operator> <name><name>a</name><index>[<expr><name>r</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt></block></then>
            <else>else <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>a</name><index>[<expr><name>r</name></expr>]</index></name> <operator>-</operator> <name>k</name> <operator>/</operator> <operator>(</operator><name>n</name> <operator>-</operator> <name>r</name><operator>)</operator> <operator>-</operator> <name><name>a</name><index>[<expr><name>l</name></expr>]</index></name></expr><operator>,</operator> <expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
            <expr_stmt><expr><name>r</name><operator>--</operator></expr>;</expr_stmt>
        }</block></else></if>
    }</block></while>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="number">0</literal> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
}</block></function>
 
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LOCAL</name></cpp:ifdef>
    <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"input.txt"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"output.txt"</literal></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>precision</name></name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
 
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
