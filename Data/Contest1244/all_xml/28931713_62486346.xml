<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28931713_62486346.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iterator&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></name></type> <name>map</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%lld"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>n</name><operator>--</operator></expr>)</condition>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt> <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>++</operator><name><name>map</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
	}</block></while>
	<while>while <condition>(<expr><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name><name>map</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
		<block type="pseudo"><if>if <condition>(<expr><call><name><name>map</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>second</name> <operator>&lt;</operator> <call><name><name>map</name><operator>.</operator><name>rbegin</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>second</name></expr>)</condition><then>
		<block>{
			<decl_stmt><decl><type><name>auto</name></type> <name>iter</name> <init>= <expr><call><name><name>map</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>step</name> <init>= <expr><call><name><name>std</name><operator>::</operator><name>min</name></name><argument_list>(<argument><expr><name>k</name> <operator>/</operator> <name><name>iter</name><operator>-&gt;</operator><name>second</name></name></expr></argument>, <argument><expr><call>(<name>long</name> <name>long</name>)<argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>next</name></name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>first</name> <operator>-</operator> <name><name>iter</name><operator>-&gt;</operator><name>first</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>step</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
			<expr_stmt><expr><name><name>map</name><index>[<expr><name><name>iter</name><operator>-&gt;</operator><name>first</name></name> <operator>+</operator> <name>step</name></expr>]</index></name> <operator>+=</operator> <name><name>iter</name><operator>-&gt;</operator><name>second</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>k</name> <operator>-=</operator> <name>step</name> <operator>*</operator> <name><name>iter</name><operator>-&gt;</operator><name>second</name></name></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>auto</name></type> <name>nxt_iter</name> <init>= <expr><call><name><name>std</name><operator>::</operator><name>next</name></name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>iter</name> <operator>=</operator> <name>nxt_iter</name></expr>;</expr_stmt>
		}</block></then>
		<else>else
		<block>{
			<decl_stmt><decl><type><name>auto</name></type> <name>iter</name> <init>= <expr><call><name><name>map</name><operator>.</operator><name>rbegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>step</name> <init>= <expr><call><name><name>std</name><operator>::</operator><name>min</name></name><argument_list>(<argument><expr><name>k</name> <operator>/</operator> <name><name>iter</name><operator>-&gt;</operator><name>second</name></name></expr></argument>, <argument><expr><call>(<name>long</name> <name>long</name>)<argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>first</name></name> <operator>-</operator> <call><name><name>std</name><operator>::</operator><name>next</name></name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>first</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>step</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
			<expr_stmt><expr><name><name>map</name><index>[<expr><name><name>iter</name><operator>-&gt;</operator><name>first</name></name> <operator>-</operator> <name>step</name></expr>]</index></name> <operator>+=</operator> <name><name>iter</name><operator>-&gt;</operator><name>second</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>k</name> <operator>-=</operator> <name>step</name> <operator>*</operator> <name><name>iter</name><operator>-&gt;</operator><name>second</name></name></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>auto</name></type> <name>nxt_iter</name> <init>= <expr><call><name><name>std</name><operator>::</operator><name>next</name></name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>iter</name> <operator>=</operator> <name>nxt_iter</name></expr>;</expr_stmt>
		}</block></else></if></block></while>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><call><name><name>map</name><operator>.</operator><name>rbegin</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>first</name> <operator>-</operator> <call><name><name>map</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
