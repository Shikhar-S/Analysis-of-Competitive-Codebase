<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28932948_62480504.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REP</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = 0;i &lt; (int)(n);i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>s</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = s;i &lt; (int)n;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RREP</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = (int)n-1;i &gt;= 0;i--)</cpp:value></cpp:define>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template><specifier>inline</specifier> <type><name>bool</name></type> <name>CHMAX</name><parameter_list>(<parameter><decl><type><name>T</name><modifier>&amp;</modifier></type><name>a</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<if>if<condition>(<expr><name>a</name><operator>&lt;</operator><name>b</name></expr>)</condition><then><block>{<expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt><return>return <expr><literal type="boolean">true</literal></expr>;</return>}</block></then></if><return>return <expr><literal type="boolean">false</literal></expr>;</return>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template><specifier>inline</specifier> <type><name>bool</name></type> <name>CHMIN</name><parameter_list>(<parameter><decl><type><name>T</name><modifier>&amp;</modifier></type><name>a</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<if>if<condition>(<expr><name>a</name><operator>&gt;</operator><name>b</name></expr>)</condition><then><block>{<expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt><return>return <expr><literal type="boolean">true</literal></expr>;</return>}</block></then></if><return>return <expr><literal type="boolean">false</literal></expr>;</return>}</block></function>



<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>int</name></type> <name>N</name></decl>,<decl><type ref="prev"/><name>P</name></decl>,<decl><type ref="prev"/><name>W</name></decl>,<decl><type ref="prev"/><name>D</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>N</name><operator>&gt;&gt;</operator><name>P</name><operator>&gt;&gt;</operator><name>W</name><operator>&gt;&gt;</operator><name>D</name></expr>;</expr_stmt>
	<macro><name>REP</name><argument_list>(<argument>i</argument>,<argument>W+<literal type="number">1</literal></argument>)</argument_list></macro><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name>i</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>p</name> <init>= <expr><name>P</name> <operator>-</operator> <name>y</name> <operator>*</operator> <name>D</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name>p</name> <operator>/</operator> <name>W</name></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>x</name><operator>&gt;=</operator><literal type="number">0</literal><operator>&amp;&amp;</operator><name>y</name><operator>&gt;=</operator><literal type="number">0</literal><operator>&amp;&amp;</operator><name>x</name><operator>*</operator><name>W</name><operator>+</operator><name>y</name><operator>*</operator><name>D</name><operator>==</operator><name>P</name><operator>&amp;&amp;</operator><name>x</name><operator>+</operator><name>y</name><operator>&lt;=</operator><name>N</name></expr>)</condition><then><block>{
			<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>x</name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name>y</name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name>N</name><operator>-</operator><name>x</name><operator>-</operator><name>y</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		}</block></then></if>
	}</block>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>-</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
}</block></function></unit>
