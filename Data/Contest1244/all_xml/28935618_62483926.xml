<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28935618_62483926.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>w</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list> <block>{
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>v</name> <init>= <expr><name>p</name> <operator>/</operator> <name>w</name></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>v</name> <operator>&gt;</operator> <name>n</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <literal type="string">"-1"</literal></expr>;</expr_stmt>
    <return>return;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name>uint64_t</name></type> <name>rem</name> <init>= <expr><name>p</name> <operator>%</operator> <name>w</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>di</name> <init>= <expr><name>d</name></expr></init></decl>;</decl_stmt>  
  <do>do <block>{
    <if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>rem</name> <operator>%</operator> <name>d</name><operator>)</operator></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>uint64_t</name></type> <name>draws</name> <init>= <expr><name>rem</name> <operator>/</operator> <name>d</name></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>v</name> <operator>+</operator> <name>draws</name> <operator>&gt;</operator> <name>n</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <literal type="string">"-1"</literal></expr>;</expr_stmt>
        <return>return;</return>      
      }</block></then></if>
      <decl_stmt><decl><type><name>uint64_t</name></type> <name>loses</name> <init>= <expr><name>n</name> <operator>-</operator> <name>draws</name> <operator>-</operator> <name>v</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <name>v</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name>draws</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name>loses</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
      <return>return;</return>
    }</block></then></if>
    <if>if <condition>(<expr><name>v</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><operator>--</operator><name>v</name></expr>;</expr_stmt></block></then></if>
    <expr_stmt><expr><operator>--</operator><name>di</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>rem</name> <operator>+=</operator> <name>w</name></expr>;</expr_stmt>
  }</block> while <condition>(<expr><name>v</name> <operator>&amp;&amp;</operator> <name>di</name></expr>)</condition>;</do>
  <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <literal type="string">"-1"</literal></expr>;</expr_stmt>  
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
  <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cin</name></name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>p</name> <operator>&gt;&gt;</operator> <name>w</name> <operator>&gt;&gt;</operator> <name>d</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>  
}</block></function>
</unit>
