<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28925177_62491897.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<namespace>namespace <name>fastIO</name>
<block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUF_SIZE</name></cpp:macro> <cpp:value>100000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OUT_SIZE</name></cpp:macro> <cpp:value>100000</cpp:value></cpp:define>
<comment type="line">//fread-&gt;read</comment>
<decl_stmt><decl><type><name>bool</name></type> <name>IOerror</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<function><specifier>inline</specifier> <type><name>char</name></type> <name>nc</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><specifier>static</specifier> <type><name>char</name></type> <name><name>buf</name><index>[<expr><name>BUF_SIZE</name></expr>]</index></name></decl>, <modifier>*</modifier><decl><type ref="prev"/><name>p1</name> <init>= <expr><name>buf</name> <operator>+</operator> <name>BUF_SIZE</name></expr></init></decl>, <modifier>*</modifier><decl><type ref="prev"/><name>pend</name> <init>= <expr><name>buf</name> <operator>+</operator> <name>BUF_SIZE</name></expr></init></decl>;</decl_stmt>
	<if>if <condition>(<expr><name>p1</name> <operator>==</operator> <name>pend</name></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><name>p1</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>pend</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <call><name>fread</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>BUF_SIZE</name></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>pend</name> <operator>==</operator> <name>p1</name></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>IOerror</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		}</block></then></if>
	}</block></then></if>
	<return>return <expr><operator>*</operator><name>p1</name><operator>++</operator></expr>;</return>
}</block></function>
<function><specifier>inline</specifier> <type><name>bool</name></type> <name>blank</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>ch</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name>ch</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="char">'\t'</literal></expr>;</return> }</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<specifier>inline</specifier> <type><name>bool</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>bool</name></type> <name>sign</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name>ch</name> <init>= <expr><call><name>nc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for <control>(<init>;</init> <condition><expr><call><name>blank</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>ch</name> <operator>=</operator> <call><name>nc</name><argument_list>()</argument_list></call></expr></incr>)</control>
		<block type="pseudo"><empty_stmt>;</empty_stmt></block></for>
	<if>if <condition>(<expr><name>IOerror</name></expr>)</condition><then>
		<block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
	<if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><then>
		<block type="pseudo"><expr_stmt><expr><name>sign</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>ch</name> <operator>=</operator> <call><name>nc</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
	<for>for <control>(<init>;</init> <condition><expr><name>ch</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>ch</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>;</condition> <incr><expr><name>ch</name> <operator>=</operator> <call><name>nc</name><argument_list>()</argument_list></call></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <name>ch</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block></for>
	<if>if <condition>(<expr><name>sign</name></expr>)</condition><then>
		<block type="pseudo"><expr_stmt><expr><name>x</name> <operator>=</operator> <operator>-</operator><name>x</name></expr>;</expr_stmt></block></then></if>
	<return>return <expr><literal type="boolean">true</literal></expr>;</return>
}</block></function>
<function><specifier>inline</specifier> <type><name>bool</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>double</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>bool</name></type> <name>sign</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name>ch</name> <init>= <expr><call><name>nc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for <control>(<init>;</init> <condition><expr><call><name>blank</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>ch</name> <operator>=</operator> <call><name>nc</name><argument_list>()</argument_list></call></expr></incr>)</control>
		<block type="pseudo"><empty_stmt>;</empty_stmt></block></for>
	<if>if <condition>(<expr><name>IOerror</name></expr>)</condition><then>
		<block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
	<if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><then>
		<block type="pseudo"><expr_stmt><expr><name>sign</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>ch</name> <operator>=</operator> <call><name>nc</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
	<for>for <control>(<init>;</init> <condition><expr><name>ch</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>ch</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>;</condition> <incr><expr><name>ch</name> <operator>=</operator> <call><name>nc</name><argument_list>()</argument_list></call></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <name>ch</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block></for>
	<if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><then>
	<block>{
		<decl_stmt><decl><type><name>double</name></type> <name>tmp</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>nc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init>;</init> <condition><expr><name>ch</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>ch</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>;</condition> <incr><expr><name>ch</name> <operator>=</operator> <call><name>nc</name><argument_list>()</argument_list></call></expr></incr>)</control>
			<block type="pseudo"><expr_stmt><expr><name>tmp</name> <operator>/=</operator> <literal type="number">10.0</literal></expr><operator>,</operator> <expr><name>x</name> <operator>+=</operator> <name>tmp</name> <operator>*</operator> <operator>(</operator><name>ch</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt></block></for>
	}</block></then></if>
	<if>if <condition>(<expr><name>sign</name></expr>)</condition><then>
		<block type="pseudo"><expr_stmt><expr><name>x</name> <operator>=</operator> <operator>-</operator><name>x</name></expr>;</expr_stmt></block></then></if>
	<return>return <expr><literal type="boolean">true</literal></expr>;</return>
}</block></function>
<function><specifier>inline</specifier> <type><name>bool</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>char</name></type> <name>ch</name> <init>= <expr><call><name>nc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init>;</init> <condition><expr><call><name>blank</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>ch</name> <operator>=</operator> <call><name>nc</name><argument_list>()</argument_list></call></expr></incr>)</control>
		<block type="pseudo"><empty_stmt>;</empty_stmt></block></for>
	<if>if <condition>(<expr><name>IOerror</name></expr>)</condition><then>
		<block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
	<for>for <control>(<init>;</init> <condition><expr><operator>!</operator><call><name>blank</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>IOerror</name></expr>;</condition> <incr><expr><name>ch</name> <operator>=</operator> <call><name>nc</name><argument_list>()</argument_list></call></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>=</operator> <name>ch</name></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<return>return <expr><literal type="boolean">true</literal></expr>;</return>
}</block></function>
<function><specifier>inline</specifier> <type><name>bool</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>&amp;</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{
	<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <call><name>nc</name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><call><name>blank</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>c</name> <operator>=</operator> <call><name>nc</name><argument_list>()</argument_list></call></expr></incr>)</control>
		<block type="pseudo"><empty_stmt>;</empty_stmt></block></for>
	<if>if <condition>(<expr><name>IOerror</name></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<return>return <expr><literal type="boolean">false</literal></expr>;</return>
	}</block></then></if>
	<return>return <expr><literal type="boolean">true</literal></expr>;</return>
}</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>, <parameter><type><name>class</name><modifier>...</modifier></type> <name>U</name></parameter>&gt;</parameter_list></template>
<type><name>bool</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>U</name> <modifier>&amp;</modifier><modifier>...</modifier></type> <name>t</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>read</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>read</name><argument_list>(<argument><expr><name>t</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>OUT_SIZE</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BUF_SIZE</name></cpp:undef>
}</block></namespace><empty_stmt>;</empty_stmt> <comment type="line">// namespace fastIO</comment>
<using>using <namespace>namespace <name>fastIO</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAXN</name> <init>= <expr><literal type="number">100005</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>LLINF</name> <init>= <expr><literal type="number">0x3f3f3f3f3f3f3f3f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>c</name><index>[<expr><name>MAXN</name></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>v</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>ans</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>temp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>color</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fa</name></decl></parameter>)</parameter_list>
<block>{
	<expr_stmt><expr><name>temp</name> <operator>+=</operator> <name><name>c</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name><name>p</name><index>[<expr><operator>(</operator><name>pos</name><operator>++</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">3</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>auto</name></type> <name>w</name> <range>: <expr><name><name>v</name><index>[<expr><name>u</name></expr>]</index></name></expr></range></decl></init>)</control>
		<block type="pseudo"><if>if <condition>(<expr><name>w</name> <operator>==</operator> <name>fa</name></expr>)</condition><then>
			<block type="pseudo"><continue>continue;</continue></block></then>
		<else>else
			<block type="pseudo"><expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if></block></for>
}</block></function>
<function><type><name>void</name></type> <name>getcolor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fa</name></decl></parameter>)</parameter_list>
<block>{
	<expr_stmt><expr><name><name>color</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <name><name>ans</name><index>[<expr><operator>(</operator><name>pos</name><operator>++</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>auto</name></type> <name>w</name> <range>: <expr><name><name>v</name><index>[<expr><name>u</name></expr>]</index></name></expr></range></decl></init>)</control>
		<block type="pseudo"><if>if <condition>(<expr><name>w</name> <operator>==</operator> <name>fa</name></expr>)</condition><then>
			<block type="pseudo"><continue>continue;</continue></block></then>
		<else>else
			<block type="pseudo"><expr_stmt><expr><call><name>getcolor</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if></block></for>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<comment type="line">//freopen("1.in", "r", stdin);</comment>
	<comment type="line">//freopen("1.out", "w", stdout);</comment>
	<expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{
		<expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>v</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>v</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{
		<if>if <condition>(<expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-1\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		}</block></then></if>
	}</block></for>
	<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>root</name></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block type="pseudo"><if>if <condition>(<expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>root</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
			<break>break;</break>
		}</block></then></if></block></for>
	<decl_stmt><decl><type><name>ll</name></type> <name>ret</name> <init>= <expr><name>LLINF</name></expr></init></decl>;</decl_stmt>
	<do>do
	<block>{
		<expr_stmt><expr><name>temp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>pos</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>temp</name> <operator>&lt;</operator> <name>ret</name></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>ans</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>ans</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>ans</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
		}</block></then></if>
	}</block> while <condition>(<expr><call><name>next_permutation</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition>;</do>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>pos</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>getcolor</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d "</literal></expr></argument>, <argument><expr><name><name>color</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
