<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28934307_62493864.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;array&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;chrono&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bitset&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;deque&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fstream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iomanip&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;numeric&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;random&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>double</name></expr></argument>&gt;</argument_list></name></type> <name>vd</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></type> <name>vb</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>&gt;</argument_list></name></type> <name>vs</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ld</name></expr></argument>&gt;</argument_list></name></type> <name>vld</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>vvi</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>vl</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>vvl</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ld</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>vvld</name>;</typedef>
<typedef>typedef <type><name><name>pair</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<typedef>typedef <type><name><name>pair</name> <argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>pll</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pll</name></expr></argument>&gt;</argument_list></name></type> <name>vpll</name>;</typedef>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>OLBOEB</name></cpp:ifdef>
<decl_stmt><decl><type><name>mt19937</name></type> <name>rnd</name><argument_list>(<argument><expr><literal type="number">228</literal> <operator>+</operator> <literal type="number">1488</literal> <operator>+</operator> <literal type="number">238</literal> <operator>+</operator> <literal type="number">24111997</literal> <operator>%</operator> <literal type="number">322</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>mt19937</name></type> <name>rnd</name><argument_list>(<argument><expr><call><name><name>chrono</name><operator>::</operator><name>high_resolution_clock</name><operator>::</operator><name>now</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>time_since_epoch</name><argument_list>()</argument_list></call><operator>.</operator><call><name>count</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>print_time</name><parameter_list>()</parameter_list> <block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>OLBOEB</name></cpp:ifdef>
    <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <literal type="string">"\ntime: "</literal> <operator>&lt;&lt;</operator> <call><name>clock</name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">1.0</literal> <operator>/</operator> <name>CLOCKS_PER_SEC</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>eb</name></cpp:macro> <cpp:value>emplace_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((ll)(x).size())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x).begin(), (x).end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rall</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x).rbegin(), (x).rend()</cpp:value></cpp:define>

<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T1</name></parameter>, <parameter><type><name>class</name></type> <name>T2</name></parameter>&gt;</parameter_list></template>
<type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name> <parameter_list>(<parameter><decl><type><name>ostream</name> <modifier>&amp;</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>T1</name></expr></argument>, <argument><expr><name>T2</name></expr></argument>&gt;</argument_list></name></type> <name>pair</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name>out</name> <operator>&lt;&lt;</operator> <literal type="string">"("</literal> <operator>&lt;&lt;</operator> <name><name>pair</name><operator>.</operator><name>first</name></name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal> <operator>&lt;&lt;</operator> <name><name>pair</name><operator>.</operator><name>second</name></name> <operator>&lt;&lt;</operator> <literal type="string">")"</literal></expr>;</return>}</block></function>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>vec</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>out</name><operator>&lt;&lt;</operator><literal type="string">"("</literal></expr>;</expr_stmt> <for>for <control>(<init><expr><name>auto</name><operator>&amp;</operator> <name>v</name><operator>:</operator> <name>vec</name></expr></init>)</control> <block type="pseudo"><expr_stmt><expr><name>out</name><operator>&lt;&lt;</operator><name>v</name><operator>&lt;&lt;</operator><literal type="string">", "</literal></expr>;</expr_stmt></block></for> <return>return <expr><name>out</name><operator>&lt;&lt;</operator><literal type="string">")"</literal></expr>;</return> }</block></function>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>vec</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>out</name><operator>&lt;&lt;</operator><literal type="string">"("</literal></expr>;</expr_stmt> <for>for <control>(<init><expr><name>auto</name><operator>&amp;</operator> <name>v</name><operator>:</operator> <name>vec</name></expr></init>)</control> <block type="pseudo"><expr_stmt><expr><name>out</name><operator>&lt;&lt;</operator><name>v</name><operator>&lt;&lt;</operator><literal type="string">", "</literal></expr>;</expr_stmt></block></for> <return>return <expr><name>out</name><operator>&lt;&lt;</operator><literal type="string">")"</literal></expr>;</return> }</block></function>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>L</name></parameter>, <parameter><type><name>class</name></type> <name>R</name></parameter>&gt;</parameter_list></template> <type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>L</name></expr></argument>, <argument><expr><name>R</name></expr></argument>&gt;</argument_list></name></type> <name>vec</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>out</name><operator>&lt;&lt;</operator><literal type="string">"("</literal></expr>;</expr_stmt> <for>for <control>(<init><expr><name>auto</name><operator>&amp;</operator> <name>v</name><operator>:</operator> <name>vec</name></expr></init>)</control> <block type="pseudo"><expr_stmt><expr><name>out</name><operator>&lt;&lt;</operator><name>v</name><operator>&lt;&lt;</operator><literal type="string">", "</literal></expr>;</expr_stmt></block></for> <return>return <expr><name>out</name><operator>&lt;&lt;</operator><literal type="string">")"</literal></expr>;</return> }</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>MAXN</name> <init>= <expr><literal type="number">2e5</literal> <operator>+</operator> <literal type="number">228</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<struct>struct <name>Block</name> <block>{<public type="default">
    <constructor><name>Block</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>t</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>l</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call>, <call><name>r</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call>, <call><name>t</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call> </member_init_list><block>{}</block></constructor>
    <constructor><name>Block</name><parameter_list>()</parameter_list> <member_init_list>: <call><name>Block</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> </member_init_list><block>{}</block></constructor>
    <function><type><name>bool</name></type> <name>is_big</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><name>r</name> <operator>!=</operator> <name>l</name> <operator>+</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>r</name> <operator>!=</operator> <name>l</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>n</name></expr>;</return> }</block></function>
    <decl_stmt><decl><type><name>ll</name></type> <name>l</name></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
</public>}</block>;</struct>

<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>, <decl><type ref="prev"/><name>g</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>s</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>g</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>vl</name></type> <name>state</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>vl</name></type> <name>cnt</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
        <expr_stmt><expr><name><name>state</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'B'</literal></expr>;</expr_stmt>
        <expr_stmt><expr><operator>++</operator><name><name>cnt</name><index>[<expr><name><name>state</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
    }</block></for>
    <for>for <control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
        <if>if <condition>(<expr><name><name>cnt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>s</name></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>
    }</block></for>

    <decl_stmt><decl><type><name>ll</name></type> <name>curr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>auto</name></type> <name>nxt</name> <init>= <expr><lambda><capture>[<argument><modifier>&amp;</modifier></argument>]</capture><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>pos</name></decl></parameter>)</parameter_list> -&gt; <type><name>ll</name></type> <block>{ <expr_stmt><expr><operator>++</operator><name>pos</name></expr>;</expr_stmt> <if>if <condition>(<expr><name>pos</name> <operator>&gt;=</operator> <name>n</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>pos</name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt></block></then></if> <return>return <expr><name>pos</name></expr>;</return> }</block></lambda></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>auto</name></type> <name>prv</name> <init>= <expr><lambda><capture>[<argument><modifier>&amp;</modifier></argument>]</capture><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>pos</name></decl></parameter>)</parameter_list> -&gt; <type><name>ll</name></type> <block>{ <expr_stmt><expr><operator>--</operator><name>pos</name></expr>;</expr_stmt> <if>if <condition>(<expr><name>pos</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>pos</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt></block></then></if> <return>return <expr><name>pos</name></expr>;</return> }</block></lambda></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name><name>state</name><index>[<expr><call><name>prv</name><argument_list>(<argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>==</operator> <name><name>state</name><index>[<expr><name>curr</name></expr>]</index></name></expr>)</condition> <block>{ <expr_stmt><expr><name>curr</name> <operator>=</operator> <call><name>prv</name><argument_list>(<argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></while>

    <decl_stmt><decl><type><name>ll</name></type> <name>start</name> <init>= <expr><name>curr</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Block</name></expr></argument>&gt;</argument_list></name></type> <name>blocks</name></decl>;</decl_stmt>
    <do>do <block>{
        <if>if <condition>(<expr><name><name>state</name><index>[<expr><name>curr</name></expr>]</index></name> <operator>!=</operator> <name><name>state</name><index>[<expr><call><name>prv</name><argument_list>(<argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>blocks</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><name>curr</name></expr></argument>, <argument><expr><call><name>nxt</name><argument_list>(<argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>state</name><index>[<expr><name>curr</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>blocks</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>r</name> <operator>=</operator> <call><name>nxt</name><argument_list>(<argument><expr><call><name><name>blocks</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name>curr</name> <operator>=</operator> <call><name>nxt</name><argument_list>(<argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block> while <condition>(<expr><name>curr</name> <operator>!=</operator> <name>start</name></expr>)</condition>;</do>

    <decl_stmt><decl><type><name>bool</name></type> <name>has_big</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>auto</name></type> <name>b</name> <range>: <expr><name>blocks</name></expr></range></decl></init>)</control> <block>{
        <expr_stmt><expr><name>has_big</name> <operator>|=</operator> <call><name><name>b</name><operator>.</operator><name>is_big</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <if>if <condition>(<expr><operator>!</operator><name>has_big</name></expr>)</condition><then> <block>{
        <for>for <control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
            <if>if <condition>(<expr><name>k</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>state</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <name><name>state</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></then></if>
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>(</operator><ternary><condition><expr><name><name>state</name><index>[<expr><name>i</name></expr>]</index></name></expr> ?</condition><then> <expr><literal type="char">'B'</literal></expr> </then><else>: <expr><literal type="char">'W'</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
        }</block></for>
        <return>return;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name>ll</name></type> <name>m</name> <init>= <expr><call><name>sz</name><argument_list>(<argument><expr><name>blocks</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>sb</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><operator>!</operator><name><name>blocks</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><call><name>is_big</name><argument_list>()</argument_list></call></expr>)</condition> <block type="pseudo"><expr_stmt><expr><operator>++</operator><name>sb</name></expr>;</expr_stmt></block></while>
    <decl_stmt><decl><type><name>ll</name></type> <name>last_bid_block</name> <init>= <expr><name>sb</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>vl</name></type> <name>lbb</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>cb</name> <init>= <expr><name>sb</name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>cb</name> <operator>&gt;=</operator> <name>m</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cb</name> <operator>-=</operator> <name>m</name></expr>;</expr_stmt></block></then></if>
        <if>if <condition>(<expr><name><name>blocks</name><index>[<expr><name>cb</name></expr>]</index></name><operator>.</operator><call><name>is_big</name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>last_bid_block</name> <operator>=</operator> <name>cb</name></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name><name>lbb</name><index>[<expr><name>cb</name></expr>]</index></name> <operator>=</operator> <name>last_bid_block</name></expr>;</expr_stmt>
    }</block></for>

    <expr_stmt><expr><name>last_bid_block</name> <operator>=</operator> <name>sb</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>vl</name></type> <name>nbb</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>cb</name> <init>= <expr><name>sb</name> <operator>-</operator> <name>i</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>cb</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cb</name> <operator>+=</operator> <name>m</name></expr>;</expr_stmt></block></then></if>
        <if>if <condition>(<expr><name><name>blocks</name><index>[<expr><name>cb</name></expr>]</index></name><operator>.</operator><call><name>is_big</name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>last_bid_block</name> <operator>=</operator> <name>cb</name></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name><name>nbb</name><index>[<expr><name>cb</name></expr>]</index></name> <operator>=</operator> <name>last_bid_block</name></expr>;</expr_stmt>
    }</block></for>

    <for>for <control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
        <expr_stmt><expr><name>auto</name><operator>&amp;</operator> <name>b</name> <operator>=</operator> <name><name>blocks</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name><name>b</name><operator>.</operator><name>is_big</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
        <decl_stmt><decl><type><name>ll</name></type> <name>l</name> <init>= <expr><name>i</name> <operator>-</operator> <name><name>lbb</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>l</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>l</name> <operator>+=</operator> <name>m</name></expr>;</expr_stmt></block></then></if>
        <decl_stmt><decl><type><name>ll</name></type> <name>r</name> <init>= <expr><name><name>nbb</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name>i</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>r</name> <operator>+=</operator> <name>m</name></expr>;</expr_stmt></block></then></if>
        <decl_stmt><decl><type><name>bool</name></type> <name>kek</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>l</name> <operator>&lt;</operator> <name>r</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>l</name> <operator>&lt;=</operator> <name>k</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>state</name><index>[<expr><name><name>b</name><operator>.</operator><name>l</name></name></expr>]</index></name> <operator>=</operator> <name><name>blocks</name><index>[<expr><name><name>lbb</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>t</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>g</name><index>[<expr><name><name>b</name><operator>.</operator><name>l</name></name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name><name>state</name><index>[<expr><name><name>b</name><operator>.</operator><name>l</name></name></expr>]</index></name></expr> ?</condition><then> <expr><literal type="char">'B'</literal></expr> </then><else>: <expr><literal type="char">'W'</literal></expr></else></ternary></expr>;</expr_stmt>
                <expr_stmt><expr><name>kek</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then> <elseif>else <if>if <condition>(<expr><name>l</name> <operator>&gt;=</operator> <name>r</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>r</name> <operator>&lt;=</operator> <name>k</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>state</name><index>[<expr><name><name>b</name><operator>.</operator><name>l</name></name></expr>]</index></name> <operator>=</operator> <name><name>blocks</name><index>[<expr><name><name>nbb</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>t</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>g</name><index>[<expr><name><name>b</name><operator>.</operator><name>l</name></name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name><name>state</name><index>[<expr><name><name>b</name><operator>.</operator><name>l</name></name></expr>]</index></name></expr> ?</condition><then> <expr><literal type="char">'B'</literal></expr> </then><else>: <expr><literal type="char">'W'</literal></expr></else></ternary></expr>;</expr_stmt>
                <expr_stmt><expr><name>kek</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if></elseif></if>
        <if>if <condition>(<expr><operator>!</operator><name>kek</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>k</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>state</name><index>[<expr><name><name>b</name><operator>.</operator><name>l</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <name><name>state</name><index>[<expr><name><name>b</name><operator>.</operator><name>l</name></name></expr>]</index></name></expr>;</expr_stmt></block></then></if>
            <expr_stmt><expr><name><name>g</name><index>[<expr><name><name>b</name><operator>.</operator><name>l</name></name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name><name>state</name><index>[<expr><name><name>b</name><operator>.</operator><name>l</name></name></expr>]</index></name></expr> ?</condition><then> <expr><literal type="char">'B'</literal></expr> </then><else>: <expr><literal type="char">'W'</literal></expr></else></ternary></expr>;</expr_stmt>
        }</block></then></if>
    }</block></for>

    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>g</name></expr>;</expr_stmt>
}</block></function>


<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>fixed</name> <operator>&lt;&lt;</operator> <call><name>setprecision</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>ll</name></type> <name>t</name></decl>;</decl_stmt>
    <comment type="line">// cin &gt;&gt; t;</comment>
    <expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>t</name><operator>--</operator></expr>)</condition> <block>{
        <expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></while>

    <expr_stmt><expr><call><name>print_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

</unit>
