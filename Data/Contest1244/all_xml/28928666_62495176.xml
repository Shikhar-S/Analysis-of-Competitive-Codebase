<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28928666_62495176.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bits/stdc++.h"</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PB</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro> <cpp:value>100000000007;</cpp:value></cpp:define>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef> 
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>ii</name>;</typedef> 
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ii</name></expr></argument>&gt;</argument_list></name></type> <name>vii</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>vll</name>;</typedef>

<comment type="line">// Print fn to print array</comment>

<function><type><name>void</name></type> <name>fn</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>vi</name> <modifier>&amp;</modifier></type><name>parent</name></decl></parameter>, <parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>visited</name></decl></parameter>, <parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vi</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>arr</name></decl></parameter>)</parameter_list><block>{
	<expr_stmt><expr><name><name>visited</name><index>[<expr><name>p</name></expr>]</index></name><operator>=</operator><literal type="boolean">true</literal></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>arr</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<if>if<condition>(<expr><name><name>visited</name><index>[<expr><name><name>arr</name><index>[<expr><name>p</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>==</operator><literal type="boolean">false</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name><name>parent</name><index>[<expr><name>p</name></expr>]</index></name><operator>=</operator><name><name>arr</name><index>[<expr><name>p</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>fn</name><argument_list>(<argument><expr><name><name>arr</name><index>[<expr><name>p</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name>parent</name></expr></argument>,<argument><expr><name>visited</name></expr></argument>,<argument><expr><name>arr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
}</block></function>

<function><type><name>void</name></type> <name>fn1</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>ll</name> <modifier>&amp;</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><name>vi</name> <modifier>&amp;</modifier></type><name>res1</name></decl></parameter>, <parameter><decl><type><name>vll</name> <modifier>&amp;</modifier></type><name>c1</name></decl></parameter>, <parameter><decl><type><name>vll</name> <modifier>&amp;</modifier></type><name>c2</name></decl></parameter>, <parameter><decl><type><name>vll</name> <modifier>&amp;</modifier></type><name>c3</name></decl></parameter>, <parameter><decl><type><name>vi</name> <modifier>&amp;</modifier></type><name>parent</name></decl></parameter>)</parameter_list><block>{
	<if>if<condition>(<expr><name><name>parent</name><index>[<expr><name>p</name></expr>]</index></name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then></if>
	<if>if<condition>(<expr><call><name>min</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>max</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">2</literal></expr>)</condition><then><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>res1</name><index>[<expr><name><name>parent</name><index>[<expr><name>p</name></expr>]</index></name></expr>]</index></name><operator>=</operator><name>c</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>res</name><operator>+=</operator><operator>(</operator><name><name>c3</name><index>[<expr><name><name>parent</name><index>[<expr><name>p</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fn1</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>parent</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>,<argument><expr><name>res</name></expr></argument>,<argument><expr><name>res1</name></expr></argument>,<argument><expr><name>c1</name></expr></argument>,<argument><expr><name>c2</name></expr></argument>,<argument><expr><name>c3</name></expr></argument>,<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then>
	<elseif>else <if>if<condition>(<expr><call><name>min</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>max</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">3</literal></expr>)</condition><then><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>res1</name><index>[<expr><name><name>parent</name><index>[<expr><name>p</name></expr>]</index></name></expr>]</index></name><operator>=</operator><name>c</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>res</name><operator>+=</operator><operator>(</operator><name><name>c2</name><index>[<expr><name><name>parent</name><index>[<expr><name>p</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fn1</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>parent</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>,<argument><expr><name>res</name></expr></argument>,<argument><expr><name>res1</name></expr></argument>,<argument><expr><name>c1</name></expr></argument>,<argument><expr><name>c2</name></expr></argument>,<argument><expr><name>c3</name></expr></argument>,<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if></elseif>
	<else>else<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>res1</name><index>[<expr><name><name>parent</name><index>[<expr><name>p</name></expr>]</index></name></expr>]</index></name><operator>=</operator><name>c</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>res</name><operator>+=</operator><operator>(</operator><name><name>c1</name><index>[<expr><name><name>parent</name><index>[<expr><name>p</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fn1</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>parent</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>,<argument><expr><name>res</name></expr></argument>,<argument><expr><name>res1</name></expr></argument>,<argument><expr><name>c1</name></expr></argument>,<argument><expr><name>c2</name></expr></argument>,<argument><expr><name>c3</name></expr></argument>,<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition><block>{
    	<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>;</decl_stmt>
    	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
    	<decl_stmt><decl><type><name>vll</name></type> <name>c1</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    	<decl_stmt><decl><type><name>vll</name></type> <name>c2</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    	<decl_stmt><decl><type><name>vll</name></type> <name>c3</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>c1</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
    	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>c2</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
    	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>c3</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>

    	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vi</name></expr></argument>&gt;</argument_list></name></type> <name>arr</name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
    		<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
    		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name></expr>;</expr_stmt>
    		<expr_stmt><expr><name><name>arr</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><call><name>PB</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    		<expr_stmt><expr><name><name>arr</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><call><name>PB</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    	}</block></for>

    	<if>if<condition>(<expr><name>n</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
    		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>c1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><call><name>min</name><argument_list>(<argument><expr><name><name>c2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>c3</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    		<return>return <expr><literal type="number">0</literal></expr>;</return>
    	}</block></then></if>

    	<decl_stmt><decl><type><name>int</name></type> <name>p</name></decl>;</decl_stmt>
    	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
    		<if>if<condition>(<expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>&gt;</operator><literal type="number">2</literal></expr>)</condition><then><block>{
    			<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    			<return>return <expr><literal type="number">0</literal></expr>;</return>
    		}</block></then></if>
    		<if>if<condition>(<expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>p</name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></then></if>
    	}</block></for>

    	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>parent</name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></type> <name>visited</name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    	<expr_stmt><expr><call><name>fn</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><name>parent</name></expr></argument>,<argument><expr><name>visited</name></expr></argument>,<argument><expr><name>arr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    	<decl_stmt><decl><type><name>ll</name></type> <name>res1</name><init>=<expr><name><name>c1</name><index>[<expr><name>p</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>c2</name><index>[<expr><name><name>parent</name><index>[<expr><name>p</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>,
    		<decl><type ref="prev"/><name>res2</name><init>=<expr><name><name>c1</name><index>[<expr><name>p</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>c3</name><index>[<expr><name><name>parent</name><index>[<expr><name>p</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>,
    		<decl><type ref="prev"/><name>res3</name><init>=<expr><name><name>c2</name><index>[<expr><name>p</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>c3</name><index>[<expr><name><name>parent</name><index>[<expr><name>p</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>,
    		<decl><type ref="prev"/><name>res4</name><init>=<expr><name><name>c2</name><index>[<expr><name>p</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>c1</name><index>[<expr><name><name>parent</name><index>[<expr><name>p</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>,
    		<decl><type ref="prev"/><name>res5</name><init>=<expr><name><name>c3</name><index>[<expr><name>p</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>c1</name><index>[<expr><name><name>parent</name><index>[<expr><name>p</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>,
    		<decl><type ref="prev"/><name>res6</name><init>=<expr><name><name>c3</name><index>[<expr><name>p</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>c2</name><index>[<expr><name><name>parent</name><index>[<expr><name>p</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    	<decl_stmt><decl><type><name>vi</name></type> <name>res</name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    	<expr_stmt><expr><name><name>res</name><index>[<expr><name>p</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    	<expr_stmt><expr><name><name>res</name><index>[<expr><name><name>parent</name><index>[<expr><name>p</name></expr>]</index></name></expr>]</index></name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt>
    	<expr_stmt><expr><call><name>fn1</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><name><name>parent</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>,<argument><expr><name>res1</name></expr></argument>,<argument><expr><name>res</name></expr></argument>,<argument><expr><name>c1</name></expr></argument>,<argument><expr><name>c2</name></expr></argument>,<argument><expr><name>c3</name></expr></argument>,<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    	<decl_stmt><decl><type><name>ll</name></type> <name>res8</name> <init>= <expr><name>res1</name></expr></init></decl>;</decl_stmt>
    	<comment type="line">// cout &lt;&lt; res8 &lt;&lt; endl;</comment>
    	<comment type="line">// for(int i=1;i&lt;=n;i++) cout &lt;&lt; res[i] &lt;&lt; " "; cout &lt;&lt; endl;</comment>

    	<decl_stmt><decl><type><name>vi</name></type> <name>res7</name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    	<expr_stmt><expr><name><name>res7</name><index>[<expr><name>p</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    	<expr_stmt><expr><name><name>res7</name><index>[<expr><name><name>parent</name><index>[<expr><name>p</name></expr>]</index></name></expr>]</index></name><operator>=</operator><literal type="number">3</literal></expr>;</expr_stmt>
    	<expr_stmt><expr><call><name>fn1</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><name><name>parent</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>,<argument><expr><name>res2</name></expr></argument>,<argument><expr><name>res7</name></expr></argument>,<argument><expr><name>c1</name></expr></argument>,<argument><expr><name>c2</name></expr></argument>,<argument><expr><name>c3</name></expr></argument>,<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    	<if>if<condition>(<expr><name>res2</name><operator>&lt;</operator><name>res8</name></expr>)</condition><then><block>{
    		<expr_stmt><expr><name>res</name><operator>=</operator><name>res7</name></expr>;</expr_stmt>
    		<expr_stmt><expr><name>res8</name> <operator>=</operator> <name>res2</name></expr>;</expr_stmt>
    	}</block></then></if>
    	<comment type="line">// cout &lt;&lt; res8 &lt;&lt; endl;</comment>
    	<comment type="line">// for(int i=1;i&lt;=n;i++) cout &lt;&lt; res[i] &lt;&lt; " "; cout &lt;&lt; endl;</comment>
    	<expr_stmt><expr><name><name>res7</name><index>[<expr><name>p</name></expr>]</index></name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt>
    	<expr_stmt><expr><name><name>res7</name><index>[<expr><name><name>parent</name><index>[<expr><name>p</name></expr>]</index></name></expr>]</index></name><operator>=</operator><literal type="number">3</literal></expr>;</expr_stmt>
    	<expr_stmt><expr><call><name>fn1</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><name><name>parent</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>,<argument><expr><name>res3</name></expr></argument>,<argument><expr><name>res7</name></expr></argument>,<argument><expr><name>c1</name></expr></argument>,<argument><expr><name>c2</name></expr></argument>,<argument><expr><name>c3</name></expr></argument>,<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    	<if>if<condition>(<expr><name>res3</name><operator>&lt;</operator><name>res8</name></expr>)</condition><then><block>{
    		<expr_stmt><expr><name>res</name><operator>=</operator><name>res7</name></expr>;</expr_stmt>
    		<expr_stmt><expr><name>res8</name> <operator>=</operator> <name>res3</name></expr>;</expr_stmt>
    	}</block></then></if>
    	<comment type="line">// cout &lt;&lt; res8 &lt;&lt; endl;</comment>
    	<comment type="line">// for(int i=1;i&lt;=n;i++) cout &lt;&lt; res[i] &lt;&lt; " "; cout &lt;&lt; endl;</comment>
    	<expr_stmt><expr><name><name>res7</name><index>[<expr><name>p</name></expr>]</index></name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt>
    	<expr_stmt><expr><name><name>res7</name><index>[<expr><name><name>parent</name><index>[<expr><name>p</name></expr>]</index></name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    	<expr_stmt><expr><call><name>fn1</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name><name>parent</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>,<argument><expr><name>res4</name></expr></argument>,<argument><expr><name>res7</name></expr></argument>,<argument><expr><name>c1</name></expr></argument>,<argument><expr><name>c2</name></expr></argument>,<argument><expr><name>c3</name></expr></argument>,<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    	<if>if<condition>(<expr><name>res4</name><operator>&lt;</operator><name>res8</name></expr>)</condition><then><block>{
    		<expr_stmt><expr><name>res</name><operator>=</operator><name>res7</name></expr>;</expr_stmt>
    		<expr_stmt><expr><name>res8</name> <operator>=</operator> <name>res4</name></expr>;</expr_stmt>
    	}</block></then></if>
    	<comment type="line">// cout &lt;&lt; res8 &lt;&lt; endl;</comment>
    	<comment type="line">// for(int i=1;i&lt;=n;i++) cout &lt;&lt; res[i] &lt;&lt; " "; cout &lt;&lt; endl;</comment>
    	<expr_stmt><expr><name><name>res7</name><index>[<expr><name>p</name></expr>]</index></name><operator>=</operator><literal type="number">3</literal></expr>;</expr_stmt>
    	<expr_stmt><expr><name><name>res7</name><index>[<expr><name><name>parent</name><index>[<expr><name>p</name></expr>]</index></name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    	<expr_stmt><expr><call><name>fn1</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name><name>parent</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>,<argument><expr><name>res5</name></expr></argument>,<argument><expr><name>res7</name></expr></argument>,<argument><expr><name>c1</name></expr></argument>,<argument><expr><name>c2</name></expr></argument>,<argument><expr><name>c3</name></expr></argument>,<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    	<if>if<condition>(<expr><name>res5</name><operator>&lt;</operator><name>res8</name></expr>)</condition><then><block>{
    		<expr_stmt><expr><name>res</name><operator>=</operator><name>res7</name></expr>;</expr_stmt>
    		<expr_stmt><expr><name>res8</name> <operator>=</operator> <name>res5</name></expr>;</expr_stmt>
    	}</block></then></if>
    	<comment type="line">// cout &lt;&lt; res8 &lt;&lt; endl;</comment>
    	<comment type="line">// for(int i=1;i&lt;=n;i++) cout &lt;&lt; res[i] &lt;&lt; " "; cout &lt;&lt; endl;</comment>
    	<expr_stmt><expr><name><name>res7</name><index>[<expr><name>p</name></expr>]</index></name><operator>=</operator><literal type="number">3</literal></expr>;</expr_stmt>
    	<expr_stmt><expr><name><name>res7</name><index>[<expr><name><name>parent</name><index>[<expr><name>p</name></expr>]</index></name></expr>]</index></name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt>
    	<expr_stmt><expr><call><name>fn1</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><name><name>parent</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>,<argument><expr><name>res6</name></expr></argument>,<argument><expr><name>res7</name></expr></argument>,<argument><expr><name>c1</name></expr></argument>,<argument><expr><name>c2</name></expr></argument>,<argument><expr><name>c3</name></expr></argument>,<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    	<if>if<condition>(<expr><name>res6</name><operator>&lt;</operator><name>res8</name></expr>)</condition><then><block>{
    		<expr_stmt><expr><name>res</name><operator>=</operator><name>res7</name></expr>;</expr_stmt>
    		<expr_stmt><expr><name>res8</name> <operator>=</operator> <name>res6</name></expr>;</expr_stmt>
    	}</block></then></if>

    	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>res8</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>res</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt></block></for> <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
	}</block></while>	
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
