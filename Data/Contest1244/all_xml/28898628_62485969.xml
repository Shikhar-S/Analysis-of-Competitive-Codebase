<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28898628_62485969.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstdlib&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rnt</name></cpp:macro> <cpp:value>re int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>re</name></cpp:macro></cpp:define> <comment type="line">//register</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>I</name></cpp:macro> <cpp:value>inline int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V</name></cpp:macro> <cpp:value>inline void</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>isnum</name><parameter_list>(<parameter><type><name>ch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>('0'&lt;=ch&amp;&amp;ch&lt;='9')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(rnt i=a;i&lt;=b;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROF</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(rnt i=a;i&gt;=b;i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REP</name><parameter_list>(<parameter><type><name>u</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(rnt _=h[u],v;v=e[_].t,_;_=e[_].n)if(v!=fa)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gc</name></cpp:macro> <cpp:value>(_op==_ed&amp;&amp;(_ed=(_op=_buf)+fread(_buf,1,100000,stdin),_op==_ed)?EOF:*_op++)</cpp:value></cpp:define>
<decl_stmt><decl><type><name>char</name></type> <name><name>_buf</name><index>[<expr><literal type="number">100000</literal></expr>]</index></name></decl>,<modifier>*</modifier><decl><type ref="prev"/><name>_op</name><argument_list>(<argument><expr><name>_buf</name></expr></argument>)</argument_list></decl>,<modifier>*</modifier><decl><type ref="prev"/><name>_ed</name><argument_list>(<argument><expr><name>_buf</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function><type><name>I</name></type> <name>getint</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>rnt</name></type> <name>_s</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt><decl_stmt><decl><type><name>re</name> <name>char</name></type> <name>_ch</name><init>=<expr><name>gc</name></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><operator>!</operator><call><name>isnum</name><argument_list>(<argument><expr><name>_ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>_ch</name><operator>=</operator><name>gc</name></expr>;</expr_stmt></block></while>
	<while>while<condition>(<expr><call><name>isnum</name><argument_list>(<argument><expr><name>_ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>_s</name><operator>=</operator><name>_s</name><operator>*</operator><literal type="number">10</literal><operator>+</operator><name>_ch</name><operator>-</operator><literal type="number">48</literal></expr><operator>,</operator><expr><name>_ch</name><operator>=</operator><name>gc</name></expr>;</expr_stmt></block></while>
	<return>return <expr><name>_s</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name><init>=<expr><literal type="number">1e5</literal><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>tot</name></decl>,<decl><type ref="prev"/><name><name>h</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>c</name><index>[<expr><name>N</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>d</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<struct>struct <name>edge</name><block>{<public type="default"><decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>,<decl><type ref="prev"/><name>n</name></decl>;</decl_stmt></public>}</block><decl><name><name>e</name><index>[<expr><name>N</name><operator>&lt;&lt;</operator><literal type="number">1</literal></expr>]</index></name></decl>;</struct>
<function><type><name>V</name></type> <name>add_edge</name><parameter_list>(<parameter><decl><type><name>rnt</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>rnt</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{
	<expr_stmt><expr><name><name>e</name><index>[<expr><operator>++</operator><name>tot</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>edge</name><operator>)</operator><block>{<expr><name>y</name></expr>,<expr><name><name>h</name><index>[<expr><name>x</name></expr>]</index></name></expr>}</block></expr><operator>,</operator><expr><name><name>h</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><name>tot</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>e</name><index>[<expr><operator>++</operator><name>tot</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>edge</name><operator>)</operator><block>{<expr><name>x</name></expr>,<expr><name><name>h</name><index>[<expr><name>y</name></expr>]</index></name></expr>}</block></expr><operator>,</operator><expr><name><name>h</name><index>[<expr><name>y</name></expr>]</index></name><operator>=</operator><name>tot</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>d</name><index>[<expr><name>x</name></expr>]</index></name><operator>++</operator></expr><operator>,</operator><expr><name><name>d</name><index>[<expr><name>y</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
}</block></function>
<function><type><name>V</name></type> <name>input</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><name>n</name><operator>=</operator><call><name>getint</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro><expr_stmt><expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><call><name>getint</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro><expr_stmt><expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><call><name>getint</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro><expr_stmt><expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><call><name>getint</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>rnt</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
	<macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">2</literal></argument>,<argument>n</argument>)</argument_list></macro><expr_stmt><expr><name>x</name><operator>=</operator><call><name>getint</name><argument_list>()</argument_list></call></expr><operator>,</operator><expr><name>y</name><operator>=</operator><call><name>getint</name><argument_list>()</argument_list></call></expr><operator>,</operator><expr><call><name>add_edge</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>V</name></type> <name>init</name><parameter_list>()</parameter_list><block>{
	
}</block></function>
<function><type><name>ll</name></type> <name>min</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ll</name><modifier>&amp;</modifier></type><name>x</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>ll</name><modifier>&amp;</modifier></type><name>y</name></decl></parameter>)</parameter_list><block>{<return>return <expr><ternary><condition><expr><name>x</name><operator>&lt;</operator><name>y</name></expr>?</condition><then><expr><name>x</name></expr></then><else>:<expr><name>y</name></expr></else></ternary></expr>;</return>}</block></function>
<decl_stmt><decl><type><name>ll</name></type> <name><name>f</name><index>[<expr><name>N</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>V</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>rnt</name></type> <name>u</name></decl></parameter>,<parameter><decl><type><name>rnt</name></type> <name>fa</name></decl></parameter>)</parameter_list><block>{
	<decl_stmt><decl><type><name>int</name></type> <name>flag</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<macro><name>REP</name><argument_list>(<argument>u</argument>)</argument_list></macro><block>{
		<expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>v</name></expr></argument>,<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>flag</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"-1"</literal></expr><operator>,</operator><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
		<expr_stmt><expr><name>flag</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">2</literal></argument>)</argument_list></macro><macro><name>FOR</name><argument_list>(<argument>j</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">2</literal></argument>)</argument_list></macro><if>if<condition>(<expr><name>i</name><operator>^</operator><name>j</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name><name>f</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><literal type="number">3</literal><operator>^</operator><name>i</name><operator>^</operator><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>+=</operator><name><name>f</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block></then></if>
	}</block>
	<macro><name>FOR</name><argument_list>(<argument>j</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">2</literal></argument>)</argument_list></macro><macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">2</literal></argument>)</argument_list></macro><expr_stmt><expr><name><name>f</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>+=</operator><name><name>c</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
}</block></function>
<decl_stmt><decl><type><name>int</name></type> <name><name>co</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>V</name></type> <name>paint</name><parameter_list>(<parameter><decl><type><name>rnt</name></type> <name>u</name></decl></parameter>,<parameter><decl><type><name>rnt</name></type> <name>fa</name></decl></parameter>,<parameter><decl><type><name>rnt</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>rnt</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{
	<expr_stmt><expr><name><name>co</name><index>[<expr><name>u</name></expr>]</index></name><operator>=</operator><name>x</name></expr>;</expr_stmt>
	<macro><name>REP</name><argument_list>(<argument>u</argument>)</argument_list></macro><expr_stmt><expr><call><name>paint</name><argument_list>(<argument><expr><name>v</name></expr></argument>,<argument><expr><name>u</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><literal type="number">3</literal><operator>^</operator><name>x</name><operator>^</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>V</name></type> <name>work</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>rnt</name></type> <name>st</name></decl>,<decl><type ref="prev"/><name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
	<macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro><if>if<condition>(<expr><name><name>d</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>st</name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></then></if>
	<expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>st</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>ans</name><init>=<expr><literal type="number">1ll</literal><operator>&lt;&lt;</operator><literal type="number">62</literal></expr></init></decl>;</decl_stmt>
	<macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">2</literal></argument>)</argument_list></macro><macro><name>FOR</name><argument_list>(<argument>j</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">2</literal></argument>)</argument_list></macro><if>if<condition>(<expr><name>i</name><operator>^</operator><name>j</name></expr>)</condition><then>
		<block type="pseudo"><if>if<condition>(<expr><name>ans</name><operator>&gt;</operator><name><name>f</name><index>[<expr><name>st</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>x</name><operator>=</operator><name>i</name></expr><operator>,</operator><expr><name>y</name><operator>=</operator><name>j</name></expr><operator>,</operator><expr><name>ans</name><operator>=</operator><name><name>f</name><index>[<expr><name>st</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block></then></if></block></then></if>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>paint</name><argument_list>(<argument><expr><name>st</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>co</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="char">' '</literal></expr>;</expr_stmt>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
<comment type="line">//	freopen("test.in","r",stdin);</comment>
<comment type="line">//	freopen(".out","w",stdout);</comment>
	<expr_stmt><expr><call><name>input</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>work</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
