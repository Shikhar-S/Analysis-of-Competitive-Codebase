<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28929551_62489485.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>u</name></decl>,<decl><type ref="prev"/><name>v</name></decl>,<decl><type ref="prev"/><name><name>d</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>cnt</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>c</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>go</name><index>[<expr><literal type="number">100005</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>vis</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>li</name></decl>,<decl><type ref="prev"/><name>lj</name></decl>,<decl><type ref="prev"/><name>lo</name></decl>,<decl><type ref="prev"/><name><name>lie</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>an</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>add</name></decl>,<decl><type ref="prev"/><name>ans</name><init>=<expr><literal type="number">1e18</literal></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>c</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	}</block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>u</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>go</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name><name>d</name><index>[<expr><name>u</name></expr>]</index></name></expr>]</index></name><operator>=</operator><name>v</name></expr><operator>,</operator><expr><name><name>go</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name><name>d</name><index>[<expr><name>v</name></expr>]</index></name></expr>]</index></name><operator>=</operator><name>u</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>d</name><index>[<expr><name>u</name></expr>]</index></name><operator>++</operator></expr><operator>,</operator><expr><name><name>d</name><index>[<expr><name>v</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
	}</block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>cnt</name><index>[<expr><name><name>d</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block></for>
	<if>if<condition>(<expr><name><name>cnt</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="number">2</literal><operator>&amp;&amp;</operator><name><name>cnt</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>==</operator><name>n</name><operator>-</operator><literal type="number">2</literal></expr>)</condition><then><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>pre</name></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
			<if>if<condition>(<expr><name><name>d</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
				<expr_stmt><expr><name>pre</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
				<break>break;</break>
			}</block></then></if>
		}</block></for> 
		<expr_stmt><expr><name><name>vis</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name><name>vis</name><index>[<expr><name>pre</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>lie</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name>pre</name></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
			<if>if<condition>(<expr><operator>!</operator><name><name>vis</name><index>[<expr><name><name>go</name><index>[<expr><name><name>lie</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>lie</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>go</name><index>[<expr><name><name>lie</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block></then>
			<else>else <block type="pseudo"><expr_stmt><expr><name><name>lie</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>go</name><index>[<expr><name><name>lie</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block></else></if>
			<expr_stmt><expr><name><name>vis</name><index>[<expr><name><name>go</name><index>[<expr><name><name>lie</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>=</operator><name><name>vis</name><index>[<expr><name><name>go</name><index>[<expr><name><name>lie</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
		}</block></for>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
			<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
				<if>if<condition>(<expr><name>i</name><operator>!=</operator><name>j</name></expr>)</condition><then><block>{
					<decl_stmt><decl><type><name>int</name></type> <name>o</name></decl>;</decl_stmt><expr_stmt><expr><name>add</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
					<if>if<condition>(<expr><operator>(</operator><name>i</name><operator>==</operator><literal type="number">1</literal><operator>&amp;&amp;</operator><name>j</name><operator>==</operator><literal type="number">2</literal><operator>)</operator><operator>||</operator><operator>(</operator><name>i</name><operator>==</operator><literal type="number">2</literal><operator>&amp;&amp;</operator><name>j</name><operator>==</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>o</name><operator>=</operator><literal type="number">3</literal></expr>;</expr_stmt></block></then></if>
					<if>if<condition>(<expr><operator>(</operator><name>i</name><operator>==</operator><literal type="number">1</literal><operator>&amp;&amp;</operator><name>j</name><operator>==</operator><literal type="number">3</literal><operator>)</operator><operator>||</operator><operator>(</operator><name>i</name><operator>==</operator><literal type="number">3</literal><operator>&amp;&amp;</operator><name>j</name><operator>==</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>o</name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt></block></then></if>
					<if>if<condition>(<expr><operator>(</operator><name>i</name><operator>==</operator><literal type="number">2</literal><operator>&amp;&amp;</operator><name>j</name><operator>==</operator><literal type="number">3</literal><operator>)</operator><operator>||</operator><operator>(</operator><name>i</name><operator>==</operator><literal type="number">3</literal><operator>&amp;&amp;</operator><name>j</name><operator>==</operator><literal type="number">2</literal><operator>)</operator></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>o</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
					<for>for<control>(<init><decl><type><name>int</name></type> <name>k</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>k</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block>{
						<if>if<condition>(<expr><name>k</name><operator>%</operator><literal type="number">3</literal><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>add</name><operator>+=</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name><name>lie</name><index>[<expr><name>k</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block></then>
						<elseif>else <if>if<condition>(<expr><name>k</name><operator>%</operator><literal type="number">3</literal><operator>==</operator><literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>add</name><operator>+=</operator><name><name>c</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name><name>lie</name><index>[<expr><name>k</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block></then></if></elseif>
						<else>else <block type="pseudo"><expr_stmt><expr><name>add</name><operator>+=</operator><name><name>c</name><index>[<expr><name>o</name></expr>]</index><index>[<expr><name><name>lie</name><index>[<expr><name>k</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block></else></if>
					}</block></for>
					<if>if<condition>(<expr><name>ans</name><operator>&gt;</operator><name>add</name></expr>)</condition><then><block>{
						<expr_stmt><expr><name>ans</name><operator>=</operator><name>add</name></expr>;</expr_stmt>
						<expr_stmt><expr><name>li</name><operator>=</operator><name>i</name></expr><operator>,</operator><expr><name>lj</name><operator>=</operator><name>j</name></expr><operator>,</operator><expr><name>lo</name><operator>=</operator><name>o</name></expr>;</expr_stmt>
					}</block></then></if>
				}</block></then></if>
			}</block></for>
		}</block></for>
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>k</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>k</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block>{
			<if>if<condition>(<expr><name>k</name><operator>%</operator><literal type="number">3</literal><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>an</name><index>[<expr><name><name>lie</name><index>[<expr><name>k</name></expr>]</index></name></expr>]</index></name><operator>=</operator><name>li</name></expr>;</expr_stmt></block></then>
			<elseif>else <if>if<condition>(<expr><name>k</name><operator>%</operator><literal type="number">3</literal><operator>==</operator><literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>an</name><index>[<expr><name><name>lie</name><index>[<expr><name>k</name></expr>]</index></name></expr>]</index></name><operator>=</operator><name>lj</name></expr>;</expr_stmt></block></then></if></elseif>
			<else>else <block type="pseudo"><expr_stmt><expr><name><name>an</name><index>[<expr><name><name>lie</name><index>[<expr><name>k</name></expr>]</index></name></expr>]</index></name><operator>=</operator><name>lo</name></expr>;</expr_stmt></block></else></if>
		}</block></for>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>k</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>k</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d "</literal></expr></argument>,<argument><expr><name><name>an</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	}</block></then>
	<else>else <block type="pseudo"><expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"-1\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
