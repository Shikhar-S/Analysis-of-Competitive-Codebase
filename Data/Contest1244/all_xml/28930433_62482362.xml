<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28930433_62482362.cpp"><cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>comment</name><name>(</name><name>linker</name><name>,</name> <cpp:literal>"/stack:200000000"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><cpp:literal>"O3"</cpp:literal><name>,</name><cpp:literal>"unroll-loops"</cpp:literal><name>,</name><cpp:literal>"omit-frame-pointer"</cpp:literal><name>,</name><cpp:literal>"inline"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>option</name><name>(</name><cpp:literal>"arch=native"</cpp:literal><name>,</name><cpp:literal>"tune=native"</cpp:literal><name>,</name><cpp:literal>"no-zero-upper"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>target</name><name>(</name><cpp:literal>"avx"</cpp:literal><name>)</name></cpp:pragma>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ext/pb_ds/assoc_container.hpp&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<using>using <name>ll</name> <init>= <type><name>long</name> <name>long</name></type></init>;</using>
<using>using <name>ld</name> <init>= <type><name>long</name> <name>double</name></type></init>;</using>
<using>using <name>ull</name> <init>= <type><name>unsigned</name> <name>long</name> <name>long</name></type></init>;</using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>v.begin(), v.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rall</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>v.rbegin(), v.rend()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>shift</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name>shift</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name>a</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>cntl</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>cntr</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>l</name> <operator>&lt;</operator> <name>r</name></expr>)</condition> <block>{
        <if>if <condition>(<expr><name>cntl</name> <operator>&lt;</operator> <name>cntr</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>k</name> <operator>&lt;</operator> <operator>(</operator><name><name>a</name><index>[<expr><name>l</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>a</name><index>[<expr><name>l</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>cntl</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>mx</name> <init>= <expr><name><name>a</name><index>[<expr><name>l</name></expr>]</index></name> <operator>+</operator> <name>k</name> <operator>/</operator> <name>cntl</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>a</name><index>[<expr><name>r</name></expr>]</index></name> <operator>-</operator> <name>mx</name></expr>;</expr_stmt>
                <return>return <expr><literal type="number">0</literal></expr>;</return>
            }</block></then></if>
            <expr_stmt><expr><name>k</name> <operator>-=</operator> <operator>(</operator><name><name>a</name><index>[<expr><name>l</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>a</name><index>[<expr><name>l</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>cntl</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>++</operator><name>l</name></expr><operator>,</operator> <expr><name>cntl</name><operator>++</operator></expr>;</expr_stmt>
            <while>while<condition>(<expr><name>l</name> <operator>&lt;</operator> <name>r</name> <operator>&amp;&amp;</operator> <name><name>a</name><index>[<expr><name>l</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name><name>a</name><index>[<expr><name>l</name></expr>]</index></name></expr>)</condition>
                <block type="pseudo"><expr_stmt><expr><operator>++</operator><name>l</name></expr><operator>,</operator> <expr><name>cntl</name><operator>++</operator></expr>;</expr_stmt></block></while>
        }</block></then> <else>else <block>{
            <if>if <condition>(<expr><name>k</name> <operator>&lt;</operator> <operator>(</operator><name><name>a</name><index>[<expr><name>r</name></expr>]</index></name> <operator>-</operator> <name><name>a</name><index>[<expr><name>r</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>cntr</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>mx</name> <init>= <expr><name><name>a</name><index>[<expr><name>r</name></expr>]</index></name> <operator>-</operator> <name>k</name> <operator>/</operator> <name>cntr</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>mx</name> <operator>-</operator> <name><name>a</name><index>[<expr><name>l</name></expr>]</index></name></expr>;</expr_stmt>
                <return>return <expr><literal type="number">0</literal></expr>;</return>
            }</block></then></if>
            <expr_stmt><expr><name>k</name> <operator>-=</operator> <operator>(</operator><name><name>a</name><index>[<expr><name>r</name></expr>]</index></name> <operator>-</operator> <name><name>a</name><index>[<expr><name>r</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>cntr</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>--</operator><name>r</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>cntr</name><operator>++</operator></expr>;</expr_stmt>
            <while>while<condition>(<expr><name>l</name> <operator>&lt;</operator> <name>r</name> <operator>&amp;&amp;</operator> <name><name>a</name><index>[<expr><name>r</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name><name>a</name><index>[<expr><name>r</name></expr>]</index></name></expr>)</condition>
                <block type="pseudo"><expr_stmt><expr><operator>--</operator><name>r</name></expr><operator>,</operator> <expr><name>cntr</name><operator>++</operator></expr>;</expr_stmt></block></while>
        }</block></else></if>
    }</block></while>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
