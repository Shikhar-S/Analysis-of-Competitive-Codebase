<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28935128_62465642.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PB</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>push_back(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>make_pair(x,y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>boost</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(false),cin.tie(NULL);</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MOD</name> <init>= <expr><literal type="number">998244353</literal></expr></init></decl>;</decl_stmt>
<comment type="line">//#include &lt;ext/pb_ds/assoc_container.hpp&gt; // Common file </comment>
<comment type="line">//#include &lt;ext/pb_ds/tree_policy.hpp&gt;  </comment>
<comment type="line">//using namespace __gnu_pbds; </comment>
<comment type="line">//stringstream ss; string temp; ss&lt;&lt;str(original string) ss&gt;&gt;temp;</comment>

<function><type><name>int32_t</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{   
    <decl_stmt><decl><type><name>boost</name></type>
    <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ONLINE_JUDGE</name></cpp:ifndef>
        <name>freopen</name><argument_list>(<argument><expr><literal type="string">"input.txt"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"output.txt"</literal></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>,<decl><type ref="prev"/><name>d</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>a</name><operator>&gt;&gt;</operator><name>b</name><operator>&gt;&gt;</operator><name>c</name><operator>&gt;&gt;</operator><name>d</name><operator>&gt;&gt;</operator><name>k</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>pen</name> <init>= <expr><name>a</name><operator>/</operator><name>c</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>cil</name> <init>= <expr><name>b</name><operator>/</operator><name>d</name></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>a</name><operator>%</operator><name>c</name><operator>!=</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>pen</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
        <if>if<condition>(<expr><name>b</name><operator>%</operator><name>d</name><operator>!=</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cil</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
        <if>if<condition>(<expr><name>pen</name><operator>+</operator><name>cil</name> <operator>&lt;=</operator> <name>k</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>pen</name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name>cil</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
        }</block></then>
        <else>else
        <block>{
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"-1"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
        }</block></else></if>
    }</block></while>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function> 
</unit>
