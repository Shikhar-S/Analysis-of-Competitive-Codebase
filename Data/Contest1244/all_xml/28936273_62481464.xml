<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28936273_62481464.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mx</name></cpp:macro> <cpp:value>200000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>

<decl_stmt><decl><type><name>ll</name></type> <name><name>dp</name><index>[<expr><name>mx</name></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>ara</name><index>[<expr><name>mx</name></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>color</name><index>[<expr><name>mx</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name><name>vc</name><index>[<expr><name>mx</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>ac</name><index>[<expr><name>mx</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>big</name><init>=<expr><operator>(</operator><literal type="number">1LL</literal><operator>&lt;&lt;</operator><literal type="number">58</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<function><type><name>ll</name></type> <name>dp_func</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>par</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>grand</name></decl></parameter>)</parameter_list>
<block>{

    <if>if<condition>(<expr><name><name>dp</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>par</name></expr>]</index><index>[<expr><name>grand</name></expr>]</index></name><operator>!=</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><name><name>dp</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>par</name></expr>]</index><index>[<expr><name>grand</name></expr>]</index></name></expr>;</return></block></then></if>
    <decl_stmt><decl><type><name>ll</name></type> <name>ans</name><init>=<expr><operator>(</operator><literal type="number">1LL</literal><operator>&lt;&lt;</operator><literal type="number">58</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>g</name></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>par</name><operator>!=</operator><literal type="number">1</literal><operator>&amp;&amp;</operator><name>grand</name><operator>!=</operator><literal type="number">1</literal></expr>)</condition><then>
    <block>{
          <expr_stmt><expr><name>g</name><operator>=</operator><name><name>ara</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
          <if>if<condition>(<expr><name><name>vc</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>g</name><operator>+=</operator><call><name>dp_func</name><argument_list>(<argument><expr><name><name>vc</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>par</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
          <expr_stmt><expr><name>ans</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>ans</name></expr></argument>,<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
     <if>if<condition>(<expr><name>par</name><operator>!=</operator><literal type="number">2</literal><operator>&amp;&amp;</operator><name>grand</name><operator>!=</operator><literal type="number">2</literal></expr>)</condition><then>
    <block>{
          <expr_stmt><expr><name>g</name><operator>=</operator><name><name>ara</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
          <if>if<condition>(<expr><name><name>vc</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>g</name><operator>+=</operator><call><name>dp_func</name><argument_list>(<argument><expr><name><name>vc</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><name>par</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
          <expr_stmt><expr><name>ans</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>ans</name></expr></argument>,<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
     <if>if<condition>(<expr><name>par</name><operator>!=</operator><literal type="number">3</literal><operator>&amp;&amp;</operator><name>grand</name><operator>!=</operator><literal type="number">3</literal></expr>)</condition><then>
    <block>{
          <expr_stmt><expr><name>g</name><operator>=</operator><name><name>ara</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
          <if>if<condition>(<expr><name><name>vc</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>g</name><operator>+=</operator><call><name>dp_func</name><argument_list>(<argument><expr><name><name>vc</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><name>par</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
          <expr_stmt><expr><name>ans</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>ans</name></expr></argument>,<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <return>return <expr><name><name>dp</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>par</name></expr>]</index><index>[<expr><name>grand</name></expr>]</index></name><operator>=</operator><name>ans</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>par</name></decl></parameter>)</parameter_list>
<block>{
     <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>ac</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
     <block>{
         <decl_stmt><decl><type><name>int</name></type> <name>w</name><init>=<expr><name><name>ac</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
         <if>if<condition>(<expr><name>w</name><operator>==</operator><name>par</name></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
         <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>w</name></expr></argument>,<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><name><name>vc</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     }</block></for>
}</block></function>
<function><type><name>void</name></type> <name>path</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>par</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>grand</name></decl></parameter>)</parameter_list>
<block>{
     <decl_stmt><decl><type><name>ll</name></type> <name>ret</name><init>=<expr><name><name>dp</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>par</name></expr>]</index><index>[<expr><name>grand</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <if>if<condition>(<expr><name>j</name><operator>==</operator><name>par</name><operator>||</operator><name>j</name><operator>==</operator><name>grand</name></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
        <decl_stmt><decl><type><name>ll</name></type> <name>g</name><init>=<expr><name><name>ara</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name><name>vc</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>g</name><operator>+=</operator><call><name>dp_func</name><argument_list>(<argument><expr><name><name>vc</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name>j</name></expr></argument>,<argument><expr><name>par</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <if>if<condition>(<expr><name>g</name><operator>==</operator><name>ret</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name><name>color</name><index>[<expr><name>v</name></expr>]</index></name><operator>=</operator><name>j</name></expr>;</expr_stmt>
            <if>if<condition>(<expr><name><name>vc</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>path</name><argument_list>(<argument><expr><name><name>vc</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name>j</name></expr></argument>,<argument><expr><name>par</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
            <return>return ;</return>
        }</block></then></if>
    }</block></for>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
   <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dp</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof <name>dp</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
    <block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
       <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>ara</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for></block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>ck</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>l</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ac</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ac</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr><name><name>ac</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>&gt;=</operator><literal type="number">3</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>ck</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
        }</block></then></if>
         <if>if<condition>(<expr><name><name>ac</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>&gt;=</operator><literal type="number">3</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>ck</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
        }</block></then></if>
    }</block></for>
    <if>if<condition>(<expr><name>ck</name></expr>)</condition><then>
    <block>{
       <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>
    <decl_stmt><decl><type><name>int</name></type> <name>root</name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
       <if>if<condition>(<expr><name><name>ac</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>root</name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></then></if>
    }</block></for>
    <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>root</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>ans</name><init>=<expr><call><name>dp_func</name><argument_list>(<argument><expr><name>root</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>ans</name><operator>==</operator><name>big</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>path</name><argument_list>(<argument><expr><name>root</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d "</literal></expr></argument>,<argument><expr><name><name>color</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>




}</block></function>
</unit>
