<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28902371_62494335.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>


<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>a</name><index>[<expr><literal type="number">100100</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt; <argument><expr><name><name>vector</name> <argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>V</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>deg</name><index>[<expr><literal type="number">100100</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name><name>vis</name><index>[<expr><literal type="number">100100</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt; <argument><expr><name><name>vector</name> <argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>edge</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>par</name><index>[<expr><literal type="number">100100</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>colors</name><index>[<expr><literal type="number">100100</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>stack</name> <argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></type> <name>stk</name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><name><name>vis</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>stk</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>auto</name></type> <name>v</name> <range>: <expr><name><name>V</name><index>[<expr><name>u</name></expr>]</index></name></expr></range></decl></init>)</control>
        <block type="pseudo"><if>if <condition>(<expr><operator>!</operator><name><name>vis</name><index>[<expr><name>v</name></expr>]</index></name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name><name>edge</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>vis</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>par</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <name>u</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></block></for>
}</block></function>
<decl_stmt><decl><type><name>ll</name></type> <name><name>dp</name><index>[<expr><literal type="number">100100</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">100100</literal></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
        <block type="pseudo"><for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
            <block type="pseudo"><for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">3</literal></expr> ;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control>
                <block type="pseudo"><expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <literal type="number">1e15</literal></expr>;</expr_stmt></block></for></block></for></block></for>

    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>V</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>edge</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
        <block type="pseudo"><for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
            <block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for></block></for>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{
	    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>V</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>V</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><operator>++</operator><name><name>deg</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
	    <expr_stmt><expr><operator>++</operator><name><name>deg</name><index>[<expr><name>y</name></expr>]</index></name></expr>;</expr_stmt>
	}</block></for>
	<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>=<expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
    <block>{
        <if>if <condition>(<expr><name><name>deg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name><name>deg</name><index>[<expr><name>idx</name></expr>]</index></name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>idx</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block></then></if>
        <if>if <condition>(<expr><name><name>deg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
        <block>{
            <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
                <block type="pseudo"><for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control>
                    <block type="pseudo"><expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block></for></block></for>
        }</block></then></if>
    }</block></for>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>deg</name></expr></argument>, <argument><expr><name>deg</name> <operator>+</operator> <literal type="number">100100</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if>if <condition>(<expr><name><name>deg</name><index>[<expr><literal type="number">100100</literal><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>||</operator> <name><name>deg</name><index>[<expr><literal type="number">100100</literal><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
    <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>u</name></decl>,<decl><type ref="prev"/><name>p</name></decl>;</decl_stmt>
    <while>while <condition>(<expr><call><name><name>stk</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{
        <expr_stmt><expr><name>u</name> <operator>=</operator> <call><name><name>stk</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>stk</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>par</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>u</name> <operator>==</operator> <name>idx</name> <operator>||</operator> <name>p</name> <operator>==</operator> <name>idx</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
            <block type="pseudo"><for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control>
                <block type="pseudo"><if>if <condition>(<expr><name>j</name> <operator>!=</operator> <name>k</name></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name><name>dp</name><index>[<expr><name>p</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><index>[<expr><name>p</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>dp</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name>k</name></expr>]</index><index>[<expr><operator>(</operator><name>j</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dp</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name>k</name></expr>]</index><index>[<expr><operator>(</operator><name>j</name><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>%</operator><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></block></for></block></for>
    }</block></while>
    <if>if <condition>(<expr><name><name>deg</name><index>[<expr><literal type="number">100100</literal><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
    <block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><name>LLONG_MAX</name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name><operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
            <block type="pseudo"><for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
                <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>ans</name></expr></argument>, <argument><expr><name><name>dp</name><index>[<expr><name>idx</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for></block></for>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>, <argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else
    <block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><name>LLONG_MAX</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>colorroot</name></decl>, <decl><type ref="prev"/><name>colorleftChild</name></decl>, <decl><type ref="prev"/><name>colorRightchild</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name><name>arr</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
        <block type="pseudo"><for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
        <block type="pseudo"><for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control>
        <block>{
            <if>if <condition>(<expr><name>j</name> <operator>==</operator> <name>k</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
            <if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>j</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
            <if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>k</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
            <if>if <condition>(<expr><name><name>a</name><index>[<expr><name>idx</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>dp</name><index>[<expr><name><name>edge</name><index>[<expr><name>idx</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator> <name><name>dp</name><index>[<expr><name><name>edge</name><index>[<expr><name>idx</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>&lt;</operator> <name>ans</name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>=</operator> <name><name>a</name><index>[<expr><name>idx</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>dp</name><index>[<expr><name><name>edge</name><index>[<expr><name>idx</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator> <name><name>dp</name><index>[<expr><name><name>edge</name><index>[<expr><name>idx</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr><operator>,</operator>
                <expr><name>colorroot</name> <operator>=</operator> <name>i</name></expr><operator>,</operator>
                <expr><name>colorleftChild</name> <operator>=</operator> <name>j</name></expr><operator>,</operator> <expr><name>colorRightchild</name> <operator>=</operator> <name>k</name></expr>;</expr_stmt></block></then></if>
        }</block></for></block></for></block></for>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>, <argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>colors</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name>colorroot</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>colors</name><index>[<expr><name><name>edge</name><index>[<expr><name>idx</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>colorleftChild</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>colors</name><index>[<expr><name><name>edge</name><index>[<expr><name>idx</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>colorRightchild</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>u</name> <init>= <expr><name><name>edge</name><index>[<expr><name>idx</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>tmp</name> <init>= <expr><name>colorroot</name></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name><name>edge</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{
            <expr_stmt><expr><name>u</name> <operator>=</operator> <name><name>edge</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>ba</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>bool</name></type> <name><name>bla</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{}</block></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>bla</name><index>[<expr><name>colorroot</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>bla</name><index>[<expr><name>colorleftChild</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
                <block type="pseudo"><if>if <condition>(<expr><name><name>bla</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><empty_stmt>;</empty_stmt></block></then>
                <else>else <block type="pseudo"><expr_stmt><expr><name>ba</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block></else></if></block></for>
            <expr_stmt><expr><name><name>colors</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <name>ba</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>colorroot</name> <operator>=</operator> <name>colorleftChild</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>colorleftChild</name> <operator>=</operator> <name>ba</name></expr>;</expr_stmt>
        }</block></while>
        <expr_stmt><expr><name>colorroot</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>u</name> <operator>=</operator> <name><name>edge</name><index>[<expr><name>idx</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
        <while>while <condition>(<expr><name><name>edge</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{
            <expr_stmt><expr><name>u</name> <operator>=</operator> <name><name>edge</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>ba</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>bool</name></type> <name><name>bla</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{}</block></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>bla</name><index>[<expr><name>colorroot</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>bla</name><index>[<expr><name>colorRightchild</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
                <block type="pseudo"><if>if <condition>(<expr><name><name>bla</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><empty_stmt>;</empty_stmt></block></then>
                <else>else <block type="pseudo"><expr_stmt><expr><name>ba</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block></else></if></block></for>
            <expr_stmt><expr><name><name>colors</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <name>ba</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>colorroot</name> <operator>=</operator> <name>colorRightchild</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>colorRightchild</name> <operator>=</operator> <name>ba</name></expr>;</expr_stmt>
        }</block></while>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
            <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d "</literal></expr></argument>, <argument><expr><name><name>colors</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    }</block></else></if>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
