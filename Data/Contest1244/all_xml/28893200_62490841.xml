<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28893200_62490841.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mk</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fs</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sc</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>
<decl_stmt><decl><type><name>ll</name></type> <name><name>a</name><index>[<expr><literal type="number">100010</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>trakm</name><index>[<expr><literal type="number">100010</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name><name>trakm1</name><index>[<expr><literal type="number">100010</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>ll</name></type> <name>fn</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>cnt</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>tmp</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>mn</name><init>=<expr><literal type="number">1e15</literal></expr></init></decl>, <decl><type ref="prev"/><name>tmp1</name></decl>, <decl><type ref="prev"/><name>p1</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
        <if>if<condition>(<expr><name>i</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name>tmp</name><operator>+=</operator><name>cnt</name><operator>*</operator><operator>(</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>a</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
        }</block></then></if>
        <for>for<control>(<init><expr><name>p1</name></expr>;</init> <condition><expr><name>p1</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>p1</name></expr></incr>)</control><block>{
            <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>p1</name></expr>]</index></name><operator>&gt;=</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name>x</name></expr>)</condition><then><block>{
                <break>break;</break>
            }</block></then></if>
        }</block></for>
        <expr_stmt><expr><name>tmp1</name><operator>=</operator><name>tmp</name><operator>+</operator><name><name>trakm</name><index>[<expr><name>p1</name></expr>]</index></name><operator>-</operator><operator>(</operator><name>n</name><operator>-</operator><name>p1</name><operator>)</operator><operator>*</operator><operator>(</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name>x</name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>mn</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>mn</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>++</operator><name>cnt</name></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><name>cnt</name><operator>=</operator><literal type="number">0</literal></expr><operator>,</operator> <expr><name>tmp</name><operator>=</operator><literal type="number">0</literal></expr><operator>,</operator> <expr><name>tmp1</name></expr><operator>,</operator> <expr><name>p1</name><operator>=</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control><block>{
        <if>if<condition>(<expr><name>i</name><operator>&lt;</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name>tmp</name><operator>+=</operator><name>cnt</name><operator>*</operator><operator>(</operator><name><name>a</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
        }</block></then></if>
        <for>for<control>(<init><expr><name>p1</name></expr>;</init> <condition><expr><name>p1</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>p1</name></expr></incr>)</control><block>{
            <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>p1</name></expr>]</index></name><operator>&lt;=</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name>x</name></expr>)</condition><then><block>{
                <break>break;</break>
            }</block></then></if>
        }</block></for>
        <expr_stmt><expr><name>tmp1</name><operator>=</operator><name>tmp</name><operator>-</operator><name><name>trakm1</name><index>[<expr><name>p1</name></expr>]</index></name><operator>+</operator><operator>(</operator><name>p1</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><operator>(</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name>x</name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>mn</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>mn</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>++</operator><name>cnt</name></expr>;</expr_stmt>
    }</block></for>
    <return>return <expr><name>mn</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>k</name></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>k</name></expr>)</condition><block>{
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
            <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>,<argument><expr><name>a</name><operator>+</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>a</name><operator>+</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>trakm</name><index>[<expr><name>n</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control><block>{
            <expr_stmt><expr><name><name>trakm</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>trakm</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><name><name>trakm1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
            <expr_stmt><expr><name><name>trakm1</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>trakm1</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></for>
        <decl_stmt><decl><type><name>ll</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ll</name></type> <name>st</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>nd</name> <init>= <expr><literal type="number">1e9</literal></expr></init></decl>, <decl><type ref="prev"/><name>md</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>
        <while>while<condition>(<expr><name>st</name><operator>&lt;</operator><name>nd</name></expr>)</condition><block>{
            <expr_stmt><expr><name>md</name><operator>=</operator><operator>(</operator><name>st</name><operator>+</operator><name>nd</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>tmp</name><operator>=</operator><call><name>fn</name><argument_list>(<argument><expr><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>tmp</name><operator>&lt;=</operator><name>k</name></expr>)</condition><then><block>{
                <expr_stmt><expr><name>nd</name><operator>=</operator><name>md</name></expr>;</expr_stmt>
            }</block></then>
            <else>else<block>{
                <expr_stmt><expr><name>st</name><operator>=</operator><name>md</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
            }</block></else></if>
        }</block></while>
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>nd</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    }</block></while>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>


</unit>
