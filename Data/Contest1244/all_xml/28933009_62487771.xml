<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28933009_62487771.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>p</name></decl>,<decl><type ref="prev"/><name>w</name></decl>,<decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
<function><type><name>long</name> <name>long</name></type> <name>multiply</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>long</name> <name>long</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>long</name> <name>long</name></type> <name>mod</name></decl></parameter>)</parameter_list><block>{
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>ret</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>b</name></expr>)</condition><block>{
		<if>if<condition>(<expr><name>b</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name>ret</name><operator>=</operator><operator>(</operator><name>ret</name><operator>+</operator><name>a</name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><name>a</name><operator>=</operator><operator>(</operator><name>a</name><operator>+</operator><name>a</name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>b</name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr>;</expr_stmt>
	}</block></while>
	<return>return <expr><name>ret</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>exgcd</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>,<parameter><decl><type><name>long</name> <name>long</name> <modifier>&amp;</modifier></type><name>y</name></decl></parameter>,<parameter><decl><type><name>long</name> <name>long</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>long</name> <name>long</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
	<if>if<condition>(<expr><name>b</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
		<expr_stmt><expr><name>x</name><operator>=</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
		<return>return <expr><name>a</name></expr>;</return>
	}</block></then></if>
	<decl_stmt><decl><type><name>int</name></type> <name>g</name><init>=<expr><call><name>exgcd</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>a</name><operator>%</operator><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>z</name><init>=<expr><name>x</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>x</name><operator>=</operator><name>y</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>y</name><operator>=</operator><name>z</name><operator>-</operator><operator>(</operator><name>a</name><operator>/</operator><name>b</name><operator>)</operator><operator>*</operator><name>y</name></expr>;</expr_stmt>
	<return>return <expr><name>g</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>p</name><operator>&gt;&gt;</operator><name>w</name><operator>&gt;&gt;</operator><name>d</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>g</name><init>=<expr><call><name>exgcd</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>w</name></expr></argument>,<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if>if<condition>(<expr><name>p</name><operator>%</operator><name>g</name><operator>!=</operator><literal type="number">0</literal></expr>)</condition><then><block>{
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-1\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></then></if>
	<expr_stmt><expr><name>x</name><operator>%=</operator><name>d</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>x</name><operator>=</operator><operator>(</operator><name>x</name><operator>+</operator><name>d</name><operator>)</operator><operator>%</operator><name>d</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>x</name><operator>=</operator><call><name>multiply</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>p</name><operator>/</operator><name>g</name></expr></argument>,<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>y</name><operator>=</operator><operator>(</operator><name>p</name><operator>-</operator><operator>(</operator><name>x</name><operator>*</operator><name>w</name><operator>)</operator><operator>)</operator><operator>/</operator><name>d</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>d</name><operator>/=</operator><name>g</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>w</name><operator>/=</operator><name>g</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>m</name><init>=<expr><name>d</name><operator>-</operator><name>w</name></expr></init></decl>;</decl_stmt> <comment type="line">//å·®å¼</comment>
	<if>if<condition>(<expr><name>x</name><operator>&lt;</operator><literal type="number">0</literal><operator>&amp;&amp;</operator><name>y</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then><block>{
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-1\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></then></if>
	<if>if<condition>(<expr><name>x</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then><block>{
		<expr_stmt><expr><name>x</name><operator>+=</operator><name>d</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>y</name><operator>-=</operator><name>w</name></expr>;</expr_stmt>
	}</block></then></if>
	<if>if<condition>(<expr><name>y</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then><block>{
		<expr_stmt><expr><name>x</name><operator>-=</operator><name>d</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>y</name><operator>+=</operator><name>w</name></expr>;</expr_stmt>
	}</block></then></if>
	<if>if<condition>(<expr><name>x</name><operator>&lt;</operator><literal type="number">0</literal><operator>||</operator><name>y</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then><block>{
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-1\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></then></if>
	<if>if<condition>(<expr><name>m</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then><block>{
		<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>k</name><init>=<expr><name>y</name><operator>/</operator><name>w</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>x</name><operator>+=</operator><name>k</name><operator>*</operator><name>d</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>y</name><operator>-=</operator><name>k</name><operator>*</operator><name>w</name></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>x</name><operator>+</operator><name>y</name><operator>&lt;=</operator><name>n</name></expr>)</condition><then><block>{
			<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>x</name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name>y</name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name>n</name><operator>-</operator><name>x</name><operator>-</operator><name>y</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
		}</block></then>
		<else>else<block>{
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-1\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></then>
	<elseif>else <if>if<condition>(<expr><name>m</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
		<if>if<condition>(<expr><name>x</name><operator>+</operator><name>y</name><operator>&lt;=</operator><name>n</name></expr>)</condition><then><block>{
			<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>x</name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name>y</name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name>n</name><operator>-</operator><name>x</name><operator>-</operator><name>y</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
		}</block></then>
		<else>else<block>{
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-1\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></then></if></elseif></if>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>k</name><init>=<expr><name>x</name><operator>/</operator><name>d</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>x</name><operator>-=</operator><name>k</name><operator>*</operator><name>d</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>y</name><operator>+=</operator><name>k</name><operator>*</operator><name>w</name></expr>;</expr_stmt>
	<if>if<condition>(<expr><name>x</name><operator>+</operator><name>y</name><operator>&lt;=</operator><name>n</name></expr>)</condition><then><block>{
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>x</name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name>y</name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name>n</name><operator>-</operator><name>x</name><operator>-</operator><name>y</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	}</block></then>
	<else>else<block>{
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-1\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
