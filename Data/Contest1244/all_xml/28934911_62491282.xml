<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28934911_62491282.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int i = (a); i &lt; (b); i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FORD</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = (a); i &gt; (b); i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>push_back(a)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>make_pair(a,b)</cpp:value></cpp:define>
<typedef>typedef <type><name>long</name> <name>long</name> <name>int</name></type> <name>ll</name>;</typedef>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>ll</name></type> <name>mod</name><init>=<expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>t</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<comment type="line">//	cin&gt;&gt;t;</comment>
	<while>while <condition>( <expr><name>t</name><operator>--</operator></expr> )</condition> 
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>u</name></decl>,<decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>ll</name></type> <name><name>c1</name><index>[<expr><name>n</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>c2</name><index>[<expr><name>n</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>c3</name><index>[<expr><name>n</name></expr>]</index></name></decl>;</decl_stmt>
		<macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro>
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>c1</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro>
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>c2</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro>
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>c3</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></type> <name><name>tree</name><index>[<expr><name>n</name></expr>]</index></name></decl>;</decl_stmt>
		<macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro>
		<block>{
			<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>u</name><operator>&gt;&gt;</operator><name>v</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>tree</name><index>[<expr><name>u</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>v</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>tree</name><index>[<expr><name>v</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>u</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block>
		<decl_stmt><decl><type><name>int</name></type> <name>o</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro>
		<block>{
			<if>if<condition>(<expr><name><name>tree</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>o</name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>o</name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></then></if>
			<if>if<condition>(<expr><name><name>tree</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>&gt;</operator><literal type="number">2</literal></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
				<return>return <expr><literal type="number">0</literal></expr>;</return>
			}</block></then></if>
		}</block>
<comment type="line">//cout&lt;&lt;o&lt;&lt;"scwedf\n";</comment>
		<decl_stmt><decl><type><name>int</name></type> <name><name>pos</name><index>[<expr><name>n</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name>p</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt><comment type="line">//poa[n];</comment>
		<decl_stmt><decl><type><name>ll</name></type> <name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><init>=<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>,<decl><type ref="prev"/><name><name>ar</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><init>=<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
		<macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro>
		<block>{
<comment type="line">//			cout&lt;&lt;o&lt;&lt;' ';</comment>
			<expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name><operator>%</operator><literal type="number">3</literal></expr>]</index></name><operator>+=</operator><name><name>c1</name><index>[<expr><name>o</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>a</name><index>[<expr><operator>(</operator><literal type="number">1</literal><operator>+</operator><name>i</name><operator>)</operator><operator>%</operator><literal type="number">3</literal></expr>]</index></name><operator>+=</operator><name><name>c2</name><index>[<expr><name>o</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>a</name><index>[<expr><operator>(</operator><literal type="number">2</literal><operator>+</operator><name>i</name><operator>)</operator><operator>%</operator><literal type="number">3</literal></expr>]</index></name><operator>+=</operator><name><name>c3</name><index>[<expr><name>o</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>ar</name><index>[<expr><operator>(</operator><literal type="number">300000</literal><operator>-</operator><name>i</name><operator>)</operator><operator>%</operator><literal type="number">3</literal></expr>]</index></name><operator>+=</operator><name><name>c1</name><index>[<expr><name>o</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>ar</name><index>[<expr><operator>(</operator><literal type="number">300000</literal><operator>-</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><literal type="number">3</literal></expr>]</index></name><operator>+=</operator><name><name>c2</name><index>[<expr><name>o</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>ar</name><index>[<expr><operator>(</operator><literal type="number">300000</literal><operator>-</operator><name>i</name><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>%</operator><literal type="number">3</literal></expr>]</index></name><operator>+=</operator><name><name>c3</name><index>[<expr><name>o</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>pos</name><index>[<expr><name>o</name></expr>]</index></name><operator>=</operator><name>i</name><operator>%</operator><literal type="number">3</literal></expr>;</expr_stmt>
<comment type="line">//			poa[o]=(n-i)%3;</comment>
			<if>if<condition>(<expr><name><name>tree</name><index>[<expr><name>o</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><name>p</name> <operator>&amp;&amp;</operator> <name>i</name><operator>&lt;</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name>p</name><operator>=</operator><name>o</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>o</name><operator>=</operator><name><name>tree</name><index>[<expr><name>o</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
			}</block></then>
			<else>else
			<block>{
				<expr_stmt><expr><name>p</name><operator>=</operator><name>o</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>o</name><operator>=</operator><name><name>tree</name><index>[<expr><name>o</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
			}</block></else></if>
		}</block>
		<decl_stmt><decl><type><name>ll</name></type> <name>m</name><init>=<expr><literal type="number">1e18</literal></expr></init></decl>;</decl_stmt>
		<macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">3</literal></argument>)</argument_list></macro>
		<block>{
			<if>if<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;</operator><name>m</name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name>m</name><operator>=</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>o</name><operator>=</operator><literal type="number">3</literal><operator>+</operator><name>i</name></expr>;</expr_stmt>
			}</block></then></if>
		}</block>
		<decl_stmt><decl><type><name>bool</name></type> <name>f</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">3</literal></argument>)</argument_list></macro>
		<block>{
			<if>if<condition>(<expr><name><name>ar</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;</operator><name>m</name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name>m</name><operator>=</operator><name><name>ar</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>o</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>f</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
<comment type="line">//				cout&lt;&lt;o;</comment>
			}</block></then></if>
		}</block>
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>m</name><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>f</name></expr>)</condition><then>
		<block>{
			<macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro>
			<block>{
				<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>(</operator><name>o</name><operator>-</operator><name><name>pos</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>%</operator><literal type="number">3</literal><operator>+</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="char">' '</literal></expr>;</expr_stmt>
			}</block>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		}</block></then></if>
		<macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro>
		<block>{
			<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>(</operator><name><name>pos</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name>o</name><operator>)</operator><operator>%</operator><literal type="number">3</literal><operator>+</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="char">' '</literal></expr>;</expr_stmt>
		}</block>
<comment type="line">//		cout&lt;&lt;o;</comment>
	}</block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
