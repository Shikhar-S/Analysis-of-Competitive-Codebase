<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28914534_62469574.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ext/pb_ds/assoc_container.hpp&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ext/pb_ds/tree_policy.hpp&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>__gnu_pbds</name>;</namespace></using>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>orewabaka</name></cpp:ifndef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>s</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>minna</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a.begin(), a.end()</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ovse</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a.rbegin(), a.rend()</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>aut '\n'</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ar</name></cpp:macro> <cpp:value>vector</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>var</name></cpp:macro> <cpp:value>auto</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rand</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(((rand()&lt;&lt;15)+rand())&amp;INT32_MAX)</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ain</name></cpp:macro> <cpp:value>cin,</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>aut</name></cpp:macro> <cpp:value>cout,</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>$</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(i64)a.size()</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>in</name></cpp:macro> <cpp:value>insert</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fusrodah</name></cpp:macro> <cpp:value>return</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(i64 i=0;i&lt;(n);i++)</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep1</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(i64 i=1;i&lt;(n);i++)</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fro2</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(i64 i=(a);i&lt;(b);i++)</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>elif</name></cpp:macro> <cpp:value>else if</cpp:value></cpp:define>

    <typedef>typedef <type><name>int</name></type> <name>i32</name>;</typedef>
    <typedef>typedef <type><name>unsigned</name></type> <name>u32</name>;</typedef>
    <typedef>typedef <type><name>long</name> <name>long</name></type> <name>i64</name>;</typedef>
    <typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>u64</name>;</typedef>
    <typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>i32</name></expr></argument>, <argument><expr><name>i32</name></expr></argument>&gt;</argument_list></name></type> <name>p32</name>;</typedef>
    <typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>i64</name></expr></argument>, <argument><expr><name>i64</name></expr></argument>&gt;</argument_list></name></type> <name>p64</name>;</typedef>
    <typedef>typedef <type><name>double</name></type> <name>lf</name>;</typedef>
    <typedef>typedef <type><name><name>tree</name><argument_list type="generic">&lt;<argument><expr><name>p64</name></expr></argument>, <argument><expr><name>null_type</name></expr></argument>, <argument><expr><name><name>less</name><argument_list type="generic">&lt;<argument><expr><name>p64</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>rb_tree_tag</name></expr></argument>, <argument><expr><name>tree_order_statistics_node_update</name></expr></argument>&gt;</argument_list></name></type> <name>ordered_set</name>;</typedef>

    <namespace>namespace <name>shyutsuryoku</name><block>{
        <decl_stmt><decl><type><specifier>const</specifier> <name>i32</name></type> <name>STRSZ</name><init>=<expr><literal type="number">3e6</literal><operator>+</operator><literal type="number">13</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name></type> <name><name>inbufer</name><index>[<expr><name>STRSZ</name></expr>]</index></name></decl>;</decl_stmt>
        <function><specifier>inline</specifier> <type><name>void</name></type> <name>cscan</name><parameter_list>(<parameter><decl><type><name>string</name><modifier>&amp;</modifier></type> <name>i</name></decl></parameter>)</parameter_list><block>{
            <decl_stmt><decl><type><name>i32</name></type> <name>c</name><init>=<expr><call><name>getc</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>cnt</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt><while>while<condition>(<expr><name>c</name><operator>&lt;=</operator><literal type="number">32</literal></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>c</name><operator>=</operator><call><name>getc</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></while>
            <while>while<condition>(<expr><name>c</name><operator>&gt;</operator><literal type="number">32</literal></expr>)</condition><block type="pseudo"><expr_stmt><expr><operator>*</operator><operator>(</operator><name>inbufer</name><operator>+</operator><name>cnt</name><operator>)</operator><operator>=</operator><name>c</name></expr><operator>,</operator><expr><name>c</name><operator>=</operator><call><name>getc</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><operator>++</operator><name>cnt</name></expr>;</expr_stmt></block></while>
            <expr_stmt><expr><operator>*</operator><operator>(</operator><name>cnt</name><operator>+</operator><name>inbufer</name><operator>)</operator><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt><expr_stmt><expr><name>i</name><operator>=</operator><name>inbufer</name></expr>;</expr_stmt>
        }</block></function>
        <function><specifier>inline</specifier> <type><name>void</name></type> <name>cprint</name><parameter_list>(<parameter><decl><type><name>string</name><modifier>&amp;</modifier></type> <name>i</name></decl></parameter>)</parameter_list><block>{
            <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name><init>=<expr><operator>new</operator> <name><name>char</name><index>[<expr><call><name><name>i</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt> 
            <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name><name>i</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <while>while<condition>(<expr><operator>*</operator><name>s</name></expr>)</condition><block type="pseudo"><expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name>s</name><operator>++</operator></expr>;</expr_stmt></block></while>
        }</block></function>
        <function><specifier>inline</specifier> <type><name>void</name></type> <name>cprint</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier><modifier>&amp;</modifier></type> <name>i</name></decl></parameter>)</parameter_list><block>{
            <decl_stmt><decl><type><name>i32</name></type> <name>cnt</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <while>while<condition>(<expr><operator>*</operator><operator>(</operator><name>i</name><operator>+</operator><name>cnt</name><operator>)</operator></expr>)</condition><block type="pseudo"><expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>i</name><operator>+</operator><name>cnt</name><operator>)</operator></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt></block></while>
        }</block></function>
        <function><specifier>inline</specifier> <type><name>void</name></type> <name>cscan</name><parameter_list>(<parameter><decl><type><name>i32</name><modifier>&amp;</modifier></type><name>i</name></decl></parameter>)</parameter_list><block>{
            <expr_stmt><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt><decl_stmt><decl><type><name>i32</name></type> <name>c</name><init>=<expr><call><name>getc</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>b</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt><while>while<condition>(<expr><name>c</name><operator>&lt;=</operator><literal type="number">32</literal></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>c</name><operator>=</operator><call><name>getc</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></while><if>if<condition>(<expr><name>c</name><operator>==</operator><literal type="char">'-'</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>b</name><operator>=</operator><literal type="number">1</literal></expr><operator>,</operator> <expr><name>c</name><operator>=</operator><call><name>getc</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
            <while>while<condition>(<expr><name>c</name><operator>&gt;=</operator><literal type="char">'0'</literal><operator>&amp;&amp;</operator><name>c</name><operator>&lt;=</operator><literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>i</name><operator>*=</operator><literal type="number">10</literal></expr><operator>,</operator><expr><name>i</name><operator>+=</operator><name>c</name><operator>-</operator><literal type="char">'0'</literal></expr><operator>,</operator><expr><name>c</name><operator>=</operator><call><name>getc</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></while>
            <if>if<condition>(<expr><name>b</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>i</name><operator>=</operator><operator>-</operator><name>i</name></expr>;</expr_stmt></block></then></if>
        }</block></function>
        <function><specifier>inline</specifier> <type><name>void</name></type> <name>cprint</name><parameter_list>(<parameter><decl><type><name>i32</name></type> <name>i</name></decl></parameter>)</parameter_list><block>{
            <if>if<condition>(<expr><name>i</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>,<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><name>i</name><operator>=</operator><operator>-</operator><name>i</name></expr>;</expr_stmt></block></then></if>
            <decl_stmt><decl><type><name>i32</name></type> <name>sz</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt><decl_stmt><decl><type><name>char</name></type> <name><name>ans</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></decl>;</decl_stmt><while>while<condition>(<expr><name>i</name><operator>||</operator><operator>!</operator><name>sz</name></expr>)</condition><block type="pseudo"><expr_stmt><expr><name><name>ans</name><index>[<expr><name>sz</name><operator>++</operator></expr>]</index></name><operator>=</operator><name>i</name><operator>%</operator><literal type="number">10</literal><operator>+</operator><literal type="char">'0'</literal></expr><operator>,</operator><expr><name>i</name><operator>/=</operator><literal type="number">10</literal></expr>;</expr_stmt></block></while>
            <while>while<condition>(<expr><name>sz</name><operator>--</operator></expr>)</condition><block type="pseudo"><expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><name><name>ans</name><index>[<expr><name>sz</name></expr>]</index></name></expr></argument>,<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></while>
        }</block></function>
        <function><specifier>inline</specifier> <type><name>void</name></type> <name>cscan</name><parameter_list>(<parameter><decl><type><name>i64</name><modifier>&amp;</modifier></type><name>i</name></decl></parameter>)</parameter_list><block>{
            <expr_stmt><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt><decl_stmt><decl><type><name>i32</name></type> <name>c</name><init>=<expr><call><name>getc</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>b</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt><while>while<condition>(<expr><name>c</name><operator>&lt;=</operator><literal type="number">32</literal></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>c</name><operator>=</operator><call><name>getc</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></while><if>if<condition>(<expr><name>c</name><operator>==</operator><literal type="char">'-'</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>b</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name>c</name><operator>=</operator><call><name>getc</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
            <while>while<condition>(<expr><name>c</name><operator>&gt;=</operator><literal type="char">'0'</literal><operator>&amp;&amp;</operator><name>c</name><operator>&lt;=</operator><literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>i</name><operator>*=</operator><literal type="number">10</literal></expr><operator>,</operator><expr><name>i</name><operator>+=</operator><name>c</name><operator>-</operator><literal type="char">'0'</literal></expr><operator>,</operator><expr><name>c</name><operator>=</operator><call><name>getc</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></while>
            <expr_stmt><expr><name>i</name><operator>*=</operator><name>b</name></expr>;</expr_stmt>
        }</block></function>
        <function><specifier>inline</specifier> <type><name>void</name></type> <name>cprint</name><parameter_list>(<parameter><decl><type><name>i64</name></type> <name>i</name></decl></parameter>)</parameter_list><block>{
            <if>if<condition>(<expr><name>i</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>,<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><name>i</name><operator>=</operator><operator>-</operator><name>i</name></expr>;</expr_stmt></block></then></if>
            <decl_stmt><decl><type><name>i32</name></type> <name>sz</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt><decl_stmt><decl><type><name>char</name></type> <name><name>ans</name><index>[<expr><literal type="number">21</literal></expr>]</index></name></decl>;</decl_stmt><while>while<condition>(<expr><name>i</name><operator>||</operator><operator>!</operator><name>sz</name></expr>)</condition><block type="pseudo"><expr_stmt><expr><name><name>ans</name><index>[<expr><name>sz</name><operator>++</operator></expr>]</index></name><operator>=</operator><name>i</name><operator>%</operator><literal type="number">10</literal><operator>+</operator><literal type="char">'0'</literal></expr><operator>,</operator><expr><name>i</name><operator>/=</operator><literal type="number">10</literal></expr>;</expr_stmt></block></while>
            <while>while<condition>(<expr><name>sz</name><operator>--</operator></expr>)</condition><block type="pseudo"><expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><name><name>ans</name><index>[<expr><name>sz</name></expr>]</index></name></expr></argument>,<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></while>
        }</block></function>
        <function><specifier>inline</specifier> <type><name>void</name></type> <name>cscan</name><parameter_list>(<parameter><decl><type><name>u32</name><modifier>&amp;</modifier></type><name>i</name></decl></parameter>)</parameter_list><block>{
            <expr_stmt><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt><decl_stmt><decl><type><name>i32</name></type> <name>c</name><init>=<expr><call><name>getc</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><while>while<condition>(<expr><name>c</name><operator>&lt;=</operator><literal type="number">32</literal></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>c</name><operator>=</operator><call><name>getc</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></while>
            <while>while<condition>(<expr><name>c</name><operator>&gt;=</operator><literal type="char">'0'</literal><operator>&amp;&amp;</operator><name>c</name><operator>&lt;=</operator><literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>i</name><operator>*=</operator><literal type="number">10</literal></expr><operator>,</operator><expr><name>i</name><operator>+=</operator><name>c</name><operator>-</operator><literal type="char">'0'</literal></expr><operator>,</operator><expr><name>c</name><operator>=</operator><call><name>getc</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></while>
        }</block></function>
        <function><specifier>inline</specifier> <type><name>void</name></type> <name>cprint</name><parameter_list>(<parameter><decl><type><name>u32</name></type> <name>i</name></decl></parameter>)</parameter_list><block>{
            <decl_stmt><decl><type><name>i32</name></type> <name>sz</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt><decl_stmt><decl><type><name>char</name></type> <name><name>ans</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt><while>while<condition>(<expr><name>i</name><operator>||</operator><operator>!</operator><name>sz</name></expr>)</condition><block type="pseudo"><expr_stmt><expr><name><name>ans</name><index>[<expr><name>sz</name><operator>++</operator></expr>]</index></name><operator>=</operator><name>i</name><operator>%</operator><literal type="number">10</literal><operator>+</operator><literal type="char">'0'</literal></expr><operator>,</operator><expr><name>i</name><operator>/=</operator><literal type="number">10</literal></expr>;</expr_stmt></block></while>
            <while>while<condition>(<expr><name>sz</name><operator>--</operator></expr>)</condition><block type="pseudo"><expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><name><name>ans</name><index>[<expr><name>sz</name></expr>]</index></name></expr></argument>,<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></while>
        }</block></function>
        <function><specifier>inline</specifier> <type><name>void</name></type> <name>cscan</name><parameter_list>(<parameter><decl><type><name>u64</name><modifier>&amp;</modifier></type><name>i</name></decl></parameter>)</parameter_list><block>{
            <expr_stmt><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt><decl_stmt><decl><type><name>i32</name></type> <name>c</name><init>=<expr><call><name>getc</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><while>while<condition>(<expr><name>c</name><operator>&lt;=</operator><literal type="number">32</literal></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>c</name><operator>=</operator><call><name>getc</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></while>
            <while>while<condition>(<expr><name>c</name><operator>&gt;=</operator><literal type="char">'0'</literal><operator>&amp;&amp;</operator><name>c</name><operator>&lt;=</operator><literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>i</name><operator>*=</operator><literal type="number">10</literal></expr><operator>,</operator><expr><name>i</name><operator>+=</operator><name>c</name><operator>-</operator><literal type="char">'0'</literal></expr><operator>,</operator><expr><name>c</name><operator>=</operator><call><name>getc</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></while>
        }</block></function>
        <function><specifier>inline</specifier> <type><name>void</name></type> <name>cprint</name><parameter_list>(<parameter><decl><type><name>u64</name></type> <name>i</name></decl></parameter>)</parameter_list><block>{
            <decl_stmt><decl><type><name>i32</name></type> <name>sz</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt><decl_stmt><decl><type><name>char</name></type> <name><name>ans</name><index>[<expr><literal type="number">21</literal></expr>]</index></name></decl>;</decl_stmt><while>while<condition>(<expr><name>i</name><operator>||</operator><operator>!</operator><name>sz</name></expr>)</condition><block type="pseudo"><expr_stmt><expr><name><name>ans</name><index>[<expr><name>sz</name><operator>++</operator></expr>]</index></name><operator>=</operator><name>i</name><operator>%</operator><literal type="number">10</literal><operator>+</operator><literal type="char">'0'</literal></expr><operator>,</operator><expr><name>i</name><operator>/=</operator><literal type="number">10</literal></expr>;</expr_stmt></block></while>
            <while>while<condition>(<expr><name>sz</name><operator>--</operator></expr>)</condition><block type="pseudo"><expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><name><name>ans</name><index>[<expr><name>sz</name></expr>]</index></name></expr></argument>,<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></while>
        }</block></function>
        <function><specifier>inline</specifier> <type><name>void</name></type> <name>cscan</name><parameter_list>(<parameter><decl><type><name>lf</name><modifier>&amp;</modifier></type><name>i</name></decl></parameter>)</parameter_list><block>{
            <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lf"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
        <function><specifier>inline</specifier> <type><name>void</name></type> <name>cprint</name><parameter_list>(<parameter><decl><type><name>lf</name></type> <name>i</name></decl></parameter>)</parameter_list><block>{
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%.20lf"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
        <function><specifier>inline</specifier> <type><name>void</name></type> <name>cprint</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>i</name></decl></parameter>)</parameter_list><block>{
            <expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
        <function><specifier>inline</specifier> <type><name>void</name></type> <name>cscan</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>&amp;</modifier></type><name>i</name></decl></parameter>)</parameter_list><block>{
            <decl_stmt><decl><type><name>i32</name></type> <name>b</name><init>=<expr><call><name>getc</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while<condition>(<expr><name>b</name><operator>&lt;=</operator><literal type="number">32</literal></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>b</name><operator>=</operator><call><name>getc</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></while>
            <expr_stmt><expr><name>i</name><operator>=</operator><name>b</name></expr>;</expr_stmt>
        }</block></function>
        <function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>, <parameter><type><name>class</name></type> <name>K</name></parameter>&gt;</parameter_list></template><specifier>inline</specifier> <type><name>void</name></type> <name>cscan</name><parameter_list>(<parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name>K</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>i</name></decl></parameter>)</parameter_list><block>{
            <expr_stmt><expr><call><name>cscan</name><argument_list>(<argument><expr><name><name>i</name><operator>.</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>cscan</name><argument_list>(<argument><expr><name><name>i</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
        <function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>, <parameter><type><name>class</name></type> <name>K</name></parameter>&gt;</parameter_list></template><specifier>inline</specifier> <type><name>void</name></type> <name>cprint</name><parameter_list>(<parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name>K</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>i</name></decl></parameter>)</parameter_list><block>{
            <expr_stmt><expr><call><name>cprint</name><argument_list>(<argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>cprint</name><argument_list>(<argument><expr><name><name>i</name><operator>.</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>cprint</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>cprint</name><argument_list>(<argument><expr><name><name>i</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>cprint</name><argument_list>(<argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
        <function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template><specifier>inline</specifier> <type><name>void</name></type> <name>cscan</name><parameter_list>(<parameter><decl><type><name><name>ar</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>i</name></decl></parameter>)</parameter_list><block>{
            <for>for<control>(<init><decl><type><name>var</name><modifier>&amp;</modifier></type> <name>j</name><range>:<expr><name>i</name></expr></range></decl></init>)</control><block type="pseudo"><expr_stmt><expr><call><name>cscan</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
        }</block></function>
        <function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template><specifier>inline</specifier> <type><name>void</name></type> <name>cprint</name><parameter_list>(<parameter><decl><type><name><name>ar</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>i</name></decl></parameter>)</parameter_list><block>{
            <for>for<control>(<init><decl><type><name>var</name><modifier>&amp;</modifier></type> <name>j</name><range>:<expr><name>i</name></expr></range></decl></init>)</control><block type="pseudo"><expr_stmt><expr><call><name>cprint</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>cprint</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
        }</block></function>
        <function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template><specifier>inline</specifier> <type><name>void</name></type> <name>cprint</name><parameter_list>(<parameter><decl><type><name><name>ar</name><argument_list type="generic">&lt;<argument><expr><name><name>ar</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name><modifier>&amp;</modifier></type> <name>i</name></decl></parameter>)</parameter_list><block>{
            <for>for<control>(<init><decl><type><name>var</name><modifier>&amp;</modifier></type> <name>j</name><range>:<expr><name>i</name></expr></range></decl></init>)</control><block type="pseudo"><expr_stmt><expr><call><name>cprint</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>cprint</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
        }</block></function>
    }</block></namespace>
    <function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name>ostream</name> <modifier>&amp;</modifier></type><name>operator<name>,</name></name><parameter_list>(<parameter><decl><type><name>ostream</name> <modifier>&amp;</modifier></type><name>os</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>v</name></decl></parameter>)</parameter_list><block>{
        <expr_stmt><expr><call><name><name>shyutsuryoku</name><operator>::</operator><name>cprint</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line">//cprint(' ');</comment>
        <return>return <expr><name>os</name></expr>;</return>
    }</block></function>
    <function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name>istream</name> <modifier>&amp;</modifier></type><name>operator<name>,</name></name><parameter_list>(<parameter><decl><type><name>istream</name> <modifier>&amp;</modifier></type><name>is</name></decl></parameter>, <parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>v</name></decl></parameter>)</parameter_list><block>{
        <expr_stmt><expr><call><name><name>shyutsuryoku</name><operator>::</operator><name>cscan</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>is</name></expr>;</return>
    }</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>void</name></type> <name>exe_cute</name><parameter_list>()</parameter_list>;</function_decl>

<function><type><name>i32</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>tavan_sersyv</name></cpp:ifdef>
        <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"input.txt"</literal></expr></argument>,<argument><expr><literal type="string">"r"</literal></expr></argument>,<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"output.txt"</literal></expr></argument>,<argument><expr><literal type="string">"w"</literal></expr></argument>,<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <expr_stmt><expr><call><name>srand</name><argument_list>(<argument><expr><call><name>time</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exe_cute</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>tavan_sersyv</name></cpp:ifdef>
        <expr_stmt><expr><name>aut</name> <literal type="char">'\n'</literal></expr><operator>,</operator> <expr><operator>(</operator><name>lf</name><operator>)</operator><call><name>clock</name><argument_list>()</argument_list></call><operator>/</operator><name>CLOCKS_PER_SEC</name></expr><operator>,</operator> <expr><literal type="string">" ç§\n"</literal></expr>;</expr_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><name>fusrodah</name> <literal type="number">0</literal></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name>exe_cute</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name>i32</name></type> <name>t</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ain</name></type> <name>t</name></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition><block>{
        <decl_stmt><decl><type><name>i64</name></type> <name>n</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ain</name></type> <name>n</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>i64</name></type> <name>mn</name><init>=<expr><literal type="number">1e9</literal></expr></init></decl>, <decl><type ref="prev"/><name>mx</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <macro><name>rep</name><argument_list>(<argument>i</argument>, <argument>n</argument>)</argument_list></macro><block>{
            <decl_stmt><decl><type><name>char</name></type> <name>v</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ain</name></type> <name>v</name></decl>;</decl_stmt>
            <if>if<condition>(<expr><name>v</name><operator>==</operator><literal type="char">'1'</literal></expr>)</condition><then><block>{
                <expr_stmt><expr><name>mn</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>mn</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>mx</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>mx</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block>
        <if>if<condition>(<expr><name>mx</name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block>{
            <decl_stmt><decl><type><name>aut</name></type> <name>n</name></decl>, '\n';</decl_stmt>
            <continue>continue;</continue>
        }</block></then></if>
        <decl_stmt><decl><type><name>i32</name></type> <name>f</name><init>=<expr><call><name>max</name><argument_list>(<argument><expr><name>n</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>mx</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>mn</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>aut</name> <argument_list>(<argument><expr><name>mx</name><operator>-</operator><name>mn</name></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">2</literal><operator>+</operator><name>f</name></expr><operator>,</operator> <expr><literal type="char">'\n'</literal></expr>;</expr_stmt><empty_stmt>;</empty_stmt>
    }</block></while>
}</block></function></unit>
