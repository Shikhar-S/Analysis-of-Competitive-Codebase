<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28922887_62490994.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sqr</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a)*(a))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rsz</name></cpp:macro> <cpp:value>resize</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>forr</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=(a);i&lt;(b);i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>forn</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>forr(i,0,n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dforn</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=n-1;i&gt;=0;i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>forall</name><parameter_list>(<parameter><type><name>it</name></type></parameter>,<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(auto it=v.begin();it!=v.end();it++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)c.size())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>zero</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(v, 0, sizeof(v))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lb</name></cpp:macro> <cpp:value>lower_bound</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ub</name></cpp:macro> <cpp:value>upper_bound</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fst</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>snd</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PI</name></cpp:macro> <cpp:value>3.1415926535897932384626</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXN</name></cpp:macro> <cpp:value>100010</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>ii</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ii</name></expr></argument>&gt;</argument_list></name></type> <name>vii</name>;</typedef>

<decl_stmt><decl><type><name>ll</name></type> <name><name>dp</name><index>[<expr><name>MAXN</name></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>v</name><index>[<expr><name>MAXN</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>ans</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>g</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>

<struct>struct <name>state</name><block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>node</name></decl>,<decl><type ref="prev"/><name>no1</name></decl>,<decl><type ref="prev"/><name>no2</name></decl>;</decl_stmt>
</public>}</block><decl><name><name>vnxt</name><index>[<expr><name>MAXN</name></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</struct>

<function><type><name>ll</name></type> <name>solve</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>node</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>no1</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>no2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>)</parameter_list>
<block>{
	<if>if<condition>(<expr><name>p</name><operator>!=</operator><operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>g</name><index>[<expr><name>node</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
	<block>{
		<macro><name>forn</name><argument_list>(<argument>i</argument>,<argument><literal type="number">3</literal></argument>)</argument_list></macro><if>if<condition>(<expr><name>i</name><operator>!=</operator><name>no1</name> <operator>&amp;&amp;</operator> <name>i</name><operator>!=</operator><name>no2</name></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name><name>vnxt</name><index>[<expr><name>node</name></expr>]</index><index>[<expr><name>no1</name></expr>]</index><index>[<expr><name>no2</name></expr>]</index></name><operator>.</operator><name>node</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>vnxt</name><index>[<expr><name>node</name></expr>]</index><index>[<expr><name>no1</name></expr>]</index><index>[<expr><name>no2</name></expr>]</index></name><operator>.</operator><name>no2</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
			<return>return <expr><name><name>v</name><index>[<expr><name>node</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>
		}</block></then></if>
	}</block></then></if>
	<if>if<condition>(<expr><name><name>dp</name><index>[<expr><name>node</name></expr>]</index><index>[<expr><name>no1</name></expr>]</index><index>[<expr><name>no2</name></expr>]</index></name><operator>!=</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name><name>dp</name><index>[<expr><name>node</name></expr>]</index><index>[<expr><name>no1</name></expr>]</index><index>[<expr><name>no2</name></expr>]</index></name></expr>;</return></block></then></if>
	<decl_stmt><decl><type><name>ll</name></type> <name>ret</name><init>=<expr><name>MAXN</name><operator>*</operator><literal type="number">1e9</literal></expr></init></decl>;</decl_stmt>
	<macro><name>forn</name><argument_list>(<argument>i</argument>,<argument><literal type="number">3</literal></argument>)</argument_list></macro><if>if<condition>(<expr><name>i</name><operator>!=</operator><name>no1</name> <operator>&amp;&amp;</operator> <name>i</name><operator>!=</operator><name>no2</name></expr>)</condition><then> <block type="pseudo"><macro><name>forall</name><argument_list>(<argument>it</argument>,<argument>g[node]</argument>)</argument_list></macro><if>if<condition>(<expr><operator>*</operator><name>it</name><operator>!=</operator><name>p</name></expr>)</condition><then>
	<block>{
		<decl_stmt><decl><type><name>ll</name></type> <name>aux</name><init>=<expr><call><name>solve</name><argument_list>(<argument><expr><operator>*</operator><name>it</name></expr></argument>,<argument><expr><name>no2</name></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><name>node</name></expr></argument>)</argument_list></call><operator>+</operator><name><name>v</name><index>[<expr><name>node</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>aux</name><operator>&lt;</operator><name>ret</name></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>ret</name><operator>=</operator><name>aux</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>vnxt</name><index>[<expr><name>node</name></expr>]</index><index>[<expr><name>no1</name></expr>]</index><index>[<expr><name>no2</name></expr>]</index></name><operator>.</operator><name>node</name><operator>=</operator><operator>*</operator><name>it</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>vnxt</name><index>[<expr><name>node</name></expr>]</index><index>[<expr><name>no1</name></expr>]</index><index>[<expr><name>no2</name></expr>]</index></name><operator>.</operator><name>no1</name><operator>=</operator><name>no2</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>vnxt</name><index>[<expr><name>node</name></expr>]</index><index>[<expr><name>no1</name></expr>]</index><index>[<expr><name>no2</name></expr>]</index></name><operator>.</operator><name>no2</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
		}</block></then></if>
	}</block></then></if></block></then></if>
	<if>if<condition>(<expr><name>p</name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>auxnode</name><init>=<expr><name>node</name></expr></init></decl>,<decl><type ref="prev"/><name>auxno1</name><init>=<expr><name>no1</name></expr></init></decl>,<decl><type ref="prev"/><name>auxno2</name><init>=<expr><name>no2</name></expr></init></decl>,<decl><type ref="prev"/><name>nn</name></decl>,<decl><type ref="prev"/><name>nn1</name></decl>,<decl><type ref="prev"/><name>nn2</name></decl>;</decl_stmt>
		<while>while<condition>(<expr><name>auxnode</name><operator>!=</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition>
		<block>{
			<expr_stmt><expr><name><name>ans</name><index>[<expr><name>auxnode</name></expr>]</index></name><operator>=</operator><name><name>vnxt</name><index>[<expr><name>auxnode</name></expr>]</index><index>[<expr><name>auxno1</name></expr>]</index><index>[<expr><name>auxno2</name></expr>]</index></name><operator>.</operator><name>no2</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>nn</name><operator>=</operator><name><name>vnxt</name><index>[<expr><name>auxnode</name></expr>]</index><index>[<expr><name>auxno1</name></expr>]</index><index>[<expr><name>auxno2</name></expr>]</index></name><operator>.</operator><name>node</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>nn1</name><operator>=</operator><name><name>vnxt</name><index>[<expr><name>auxnode</name></expr>]</index><index>[<expr><name>auxno1</name></expr>]</index><index>[<expr><name>auxno2</name></expr>]</index></name><operator>.</operator><name>no1</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>nn2</name><operator>=</operator><name><name>vnxt</name><index>[<expr><name>auxnode</name></expr>]</index><index>[<expr><name>auxno1</name></expr>]</index><index>[<expr><name>auxno2</name></expr>]</index></name><operator>.</operator><name>no2</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>auxnode</name><operator>=</operator><name>nn</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>auxno1</name><operator>=</operator><name>nn1</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>auxno2</name><operator>=</operator><name>nn2</name></expr>;</expr_stmt>
		}</block></while>
	}</block></then></if>
	<return>return <expr><name><name>dp</name><index>[<expr><name>node</name></expr>]</index><index>[<expr><name>no1</name></expr>]</index><index>[<expr><name>no2</name></expr>]</index></name><operator>=</operator><name>ret</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>REJUNTE</name></cpp:ifdef>
	<expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"input.in"</literal></expr></argument>,<argument><expr><literal type="string">"r"</literal></expr></argument>,<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">//freopen("output.out","w",stdout);</comment>
	<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dp</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
	<macro><name>forn</name><argument_list>(<argument>j</argument>,<argument><literal type="number">3</literal></argument>)</argument_list></macro> <macro><name>forn</name><argument_list>(<argument>i</argument>,<argument>n</argument>)</argument_list></macro> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>v</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
	<if>if<condition>(<expr><name>n</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
	<block>{
		<decl_stmt><decl><type><name>ll</name></type> <name>ans</name><init>=<expr><literal type="number">2e9</literal><operator>+</operator><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
		<macro><name>forn</name><argument_list>(<argument>i</argument>,<argument><literal type="number">3</literal></argument>)</argument_list></macro> <expr_stmt><expr><name>ans</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>ans</name></expr></argument>,<argument><expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></then></if>
	<if>if<condition>(<expr><name>n</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then>
	<block>{
		<decl_stmt><decl><type><name>ll</name></type> <name>ans</name><init>=<expr><literal type="number">2e9</literal><operator>+</operator><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
		<macro><name>forn</name><argument_list>(<argument>i</argument>,<argument><literal type="number">3</literal></argument>)</argument_list></macro><macro><name>forn</name><argument_list>(<argument>j</argument>,<argument><literal type="number">3</literal></argument>)</argument_list></macro> <if>if<condition>(<expr><name>i</name><operator>!=</operator><name>j</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ans</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>ans</name></expr></argument>,<argument><expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></then></if>
	<macro><name>forn</name><argument_list>(<argument>i</argument>,<argument>n-<literal type="number">1</literal></argument>)</argument_list></macro>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>a</name><operator>--</operator></expr>;</expr_stmt><expr_stmt><expr><name>b</name><operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>g</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>g</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block>
	<decl_stmt><decl><type><name>int</name></type> <name>root</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<macro><name>forn</name><argument_list>(<argument>i</argument>,<argument>n</argument>)</argument_list></macro> 
	<block>{
		<if>if<condition>(<expr><name><name>g</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>&gt;</operator><literal type="number">2</literal></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"-1\n"</literal></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		}</block></then>
		<elseif>else <if>if<condition>(<expr><name><name>g</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>root</name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></then></if></elseif></if>
	}</block>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>solve</name><argument_list>(<argument><expr><name>root</name></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
	<macro><name>forn</name><argument_list>(<argument>i</argument>,<argument>n</argument>)</argument_list></macro> <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
