<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28934655_62477600.cpp"><comment type="block" format="doxygen">/***************************************************************
	File name: 1244D.cpp
	Author: huhao
	Create time: Sun 13 Oct 2019 05:28:05 PM CST
***************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fr</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=(a),end_##i=(b);i&lt;=end_##i;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fd</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=(a),end_##i=(b);i&gt;=end_##i;i--)</cpp:value></cpp:define>
<function><type><name>int</name></type> <name>read</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>r</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>t</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>c</name><init>=<expr><call><name>getchar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name><name>c</name><argument_list type="generic">&lt;<argument><expr><literal type="char">'0'</literal><operator>||</operator><name>c</name></expr></argument>&gt;</argument_list></name><literal type="char">'9'</literal></expr>)</condition>
	<block>{
		<expr_stmt><expr><name>t</name><operator>=</operator><ternary><condition><expr><name>c</name><operator>==</operator><literal type="char">'-'</literal></expr>?</condition><then><expr><operator>-</operator><literal type="number">1</literal></expr></then><else>:<expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
		<expr_stmt><expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></while>
	<while>while<condition>(<expr><name>c</name><operator>&gt;=</operator><literal type="char">'0'</literal><operator>&amp;&amp;</operator><name>c</name><operator>&lt;=</operator><literal type="char">'9'</literal></expr>)</condition>
	<block>{
		<expr_stmt><expr><name>r</name><operator>=</operator><name>r</name><operator>*</operator><literal type="number">10</literal><operator>+</operator><name>c</name><operator>-</operator><literal type="number">48</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></while>
	<return>return <expr><name>r</name><operator>*</operator><name>t</name></expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>i64</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name><init>=<expr><literal type="number">100010</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>i64</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name><name>a</name><index>[<expr><name>N</name></expr>]</index><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>A</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>p</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name><name>c</name><index>[<expr><literal type="number">10</literal></expr>]</index><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name>r</name></decl>,<decl><type ref="prev"/><name>ans</name></decl>,<decl><type ref="prev"/><name>Ans</name></decl>,<decl><type ref="prev"/><name><name>col</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><name>n</name><operator>=</operator><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<macro><name>fr</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument><literal type="number">3</literal></argument>)</argument_list></macro>
		<macro><name>fr</name><argument_list>(<argument>j</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro>
			<expr_stmt><expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<macro><name>fr</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n-<literal type="number">1</literal></argument>)</argument_list></macro>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>u</name><init>=<expr><call><name>read</name><argument_list>()</argument_list></call></expr></init></decl>,<decl><type ref="prev"/><name>v</name><init>=<expr><call><name>read</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>A</name><index>[<expr><name>u</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>A</name><index>[<expr><name>v</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
		<if>if<condition>(<expr><name><name>A</name><index>[<expr><name>u</name></expr>]</index></name><operator>&gt;</operator><literal type="number">2</literal><operator>||</operator><name><name>A</name><index>[<expr><name>v</name></expr>]</index></name><operator>&gt;</operator><literal type="number">2</literal></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-1\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		}</block></then></if>
		<expr_stmt><expr><name><name>a</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name><name>A</name><index>[<expr><name>u</name></expr>]</index></name></expr>]</index></name><operator>=</operator><name>v</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>a</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name><name>A</name><index>[<expr><name>v</name></expr>]</index></name></expr>]</index></name><operator>=</operator><name>u</name></expr>;</expr_stmt>
	}</block>
	<macro><name>fr</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro>
		<if>if<condition>(<expr><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>r</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
			<break>break;</break>
		}</block></then></if>
	<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name>r</name></expr>;</expr_stmt>
	<macro><name>fr</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n-<literal type="number">1</literal></argument>)</argument_list></macro>
		<expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name><name>a</name><index>[<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>^</operator><name><name>a</name><index>[<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>^</operator><name><name>p</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ans</name><operator>=</operator><literal type="number">1ll</literal><operator>&lt;&lt;</operator><literal type="number">50</literal></expr>;</expr_stmt>
	<macro><name>fr</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument><literal type="number">3</literal></argument>)</argument_list></macro>
		<macro><name>fr</name><argument_list>(<argument>j</argument>,<argument><literal type="number">1</literal></argument>,<argument><literal type="number">3</literal></argument>)</argument_list></macro>
			<macro><name>fr</name><argument_list>(<argument>k</argument>,<argument><literal type="number">1</literal></argument>,<argument><literal type="number">3</literal></argument>)</argument_list></macro>
				<if>if<condition>(<expr><name>i</name><operator>!=</operator><name>j</name><operator>&amp;&amp;</operator><name>i</name><operator>!=</operator><name>k</name><operator>&amp;&amp;</operator><name>j</name><operator>!=</operator><name>k</name></expr>)</condition><then>
				<block>{
					<decl_stmt><decl><type><name>i64</name></type> <name>t</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><name><name>col</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>col</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><name>j</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>col</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>=</operator><name>k</name></expr>;</expr_stmt>
					<macro><name>fr</name><argument_list>(<argument>l</argument>,<argument><literal type="number">4</literal></argument>,<argument>n</argument>)</argument_list></macro>
						<expr_stmt><expr><name><name>col</name><index>[<expr><name>l</name></expr>]</index></name><operator>=</operator><name><name>col</name><index>[<expr><name>l</name><operator>-</operator><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
					<macro><name>fr</name><argument_list>(<argument>l</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro>
						<expr_stmt><expr><name>t</name><operator>+=</operator><name><name>c</name><index>[<expr><name><name>col</name><index>[<expr><name>l</name></expr>]</index></name></expr>]</index><index>[<expr><name><name>p</name><index>[<expr><name>l</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>					
					<if>if<condition>(<expr><name>t</name><operator>&lt;</operator><name>ans</name></expr>)</condition><then>
					<block>{
						<expr_stmt><expr><name>ans</name><operator>=</operator><name>t</name></expr>;</expr_stmt>
						<expr_stmt><expr><name>Ans</name><operator>=</operator><name>i</name><operator>*</operator><literal type="number">100</literal><operator>+</operator><name>j</name><operator>*</operator><literal type="number">10</literal><operator>+</operator><name>k</name></expr>;</expr_stmt>
					}</block></then></if>
				}</block></then></if>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>i</name><operator>=</operator><name>Ans</name><operator>/</operator><literal type="number">100</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>j</name><operator>=</operator><operator>(</operator><name>Ans</name><operator>/</operator><literal type="number">10</literal><operator>)</operator><operator>%</operator><literal type="number">10</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>k</name><operator>=</operator><name>Ans</name><operator>%</operator><literal type="number">10</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>col</name><index>[<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>col</name><index>[<expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index></name><operator>=</operator><name>j</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>col</name><index>[<expr><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>]</index></name><operator>=</operator><name>k</name></expr>;</expr_stmt>
	<macro><name>fr</name><argument_list>(<argument>l</argument>,<argument><literal type="number">4</literal></argument>,<argument>n</argument>)</argument_list></macro>
		<expr_stmt><expr><name><name>col</name><index>[<expr><name><name>p</name><index>[<expr><name>l</name></expr>]</index></name></expr>]</index></name><operator>=</operator><name><name>col</name><index>[<expr><name><name>p</name><index>[<expr><name>l</name><operator>-</operator><literal type="number">3</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%I64d\n"</literal></expr></argument>,<argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>fr</name><argument_list>(<argument>l</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d%c"</literal></expr></argument>,<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>col</name><index>[<expr><name>l</name></expr>]</index></name></expr></argument>,<argument><expr><ternary><condition><expr><name>l</name><operator>==</operator><name>n</name></expr>?</condition><then><expr><literal type="char">'\n'</literal></expr></then><else>:<expr><literal type="char">' '</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
