<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28925559_62483548.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N</name></cpp:macro> <cpp:value>100005</cpp:value></cpp:define>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name><name>C</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>To</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>HEAD</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>Ne</name><index>[<expr><name>N</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>E</name><index>[<expr><name>N</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>s</name></decl>,<decl><type ref="prev"/><name>e</name></decl>,<decl><type ref="prev"/><name>lian</name></decl>,<decl><type ref="prev"/><name>rt</name></decl>,<decl><type ref="prev"/><name><name>AN</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>K</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>Sum</name><index>[<expr><literal type="number">5</literal></expr>]</index><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name>ans</name></decl>,<decl><type ref="prev"/><name>_1</name></decl>,<decl><type ref="prev"/><name>_2</name></decl>,<decl><type ref="prev"/><name>_3</name></decl>,<decl><type ref="prev"/><name>_4</name></decl>,<decl><type ref="prev"/><name>_5</name></decl>,<decl><type ref="prev"/><name>_6</name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>ADD</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
	<expr_stmt><expr><name><name>Ne</name><index>[<expr><operator>++</operator><name>b</name></expr>]</index></name><operator>=</operator><name><name>HEAD</name><index>[<expr><name>s</name></expr>]</index></name></expr><operator>,</operator><expr><name><name>HEAD</name><index>[<expr><name>s</name></expr>]</index></name><operator>=</operator><name>b</name></expr><operator>,</operator><expr><name><name>E</name><index>[<expr><name>b</name></expr>]</index></name><operator>=</operator><name>e</name></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type> <name>DFS</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>f</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list> <block>{
	<expr_stmt><expr><ternary><condition><expr><name>k</name><operator>==</operator><literal type="number">3</literal></expr>?</condition><then><expr><name>k</name><operator>-=</operator><literal type="number">3</literal></expr></then><else>:<expr><name>k</name></expr></else></ternary></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>K</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>k</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>Sum</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>+=</operator><name><name>C</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>Sum</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>+=</operator><name><name>C</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>Sum</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>+=</operator><name><name>C</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>z</name><init>=<expr><name><name>HEAD</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</init> <condition><expr><name>z</name></expr>;</condition> <incr><expr><name>z</name><operator>=</operator><name><name>Ne</name><index>[<expr><name>z</name></expr>]</index></name></expr></incr>)</control>
		<block type="pseudo"><if>if<condition>(<expr><name><name>E</name><index>[<expr><name>z</name></expr>]</index></name><operator>!=</operator><name>f</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>DFS</name><argument_list>(<argument><expr><name><name>E</name><index>[<expr><name>z</name></expr>]</index></name></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><name>k</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></block></for>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>C</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>C</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>C</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><call><name>ADD</name><argument_list>(<argument><expr><name>e</name></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>To</name><index>[<expr><name>s</name></expr>]</index></name><operator>++</operator></expr><operator>,</operator><expr><name><name>To</name><index>[<expr><name>e</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><name>lian</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
		<expr_stmt><expr><name>lian</name><operator>&amp;=</operator><name><name>To</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;=</operator><literal type="number">2</literal></expr>;</expr_stmt>
		<if>if<condition>(<expr><name><name>To</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>rt</name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></then></if>
	}</block></for>
	<if>if<condition>(<expr><operator>!</operator><name>lian</name></expr>)</condition><then><block type="pseudo"><return>return <expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><literal type="number">0</literal></expr>;</return></block></then></if>
	<expr_stmt><expr><call><name>DFS</name><argument_list>(<argument><expr><name>rt</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><name>ans</name><operator>=</operator><literal type="number">1e18</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>_1</name><operator>=</operator><name><name>Sum</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>+</operator><name><name>Sum</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>Sum</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>_2</name><operator>=</operator><name><name>Sum</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>+</operator><name><name>Sum</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>+</operator><name><name>Sum</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>_3</name><operator>=</operator><name><name>Sum</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>Sum</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>+</operator><name><name>Sum</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>_4</name><operator>=</operator><name><name>Sum</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>Sum</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>+</operator><name><name>Sum</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>_5</name><operator>=</operator><name><name>Sum</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>+</operator><name><name>Sum</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>+</operator><name><name>Sum</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>_6</name><operator>=</operator><name><name>Sum</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>+</operator><name><name>Sum</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>Sum</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ans</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>_1</name></expr></argument>,<argument><expr><call><name>min</name><argument_list>(<argument><expr><name>_2</name></expr></argument>,<argument><expr><call><name>min</name><argument_list>(<argument><expr><name>_3</name></expr></argument>,<argument><expr><call><name>min</name><argument_list>(<argument><expr><name>_4</name></expr></argument>,<argument><expr><call><name>min</name><argument_list>(<argument><expr><name>_5</name></expr></argument>,<argument><expr><name>_6</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>,<argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if<condition>(<expr><name>ans</name><operator>==</operator><name>_1</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>AN</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name><name>AN</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">2</literal></expr><operator>,</operator><expr><name><name>AN</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><literal type="number">3</literal></expr>;</expr_stmt></block></then>
	<elseif>else <if>if<condition>(<expr><name>ans</name><operator>==</operator><name>_2</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name><name>AN</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name><name>AN</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">3</literal></expr><operator>,</operator><expr><name><name>AN</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt></block></then></if></elseif>
	<elseif>else <if>if<condition>(<expr><name>ans</name><operator>==</operator><name>_3</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name><name>AN</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">2</literal></expr><operator>,</operator><expr><name><name>AN</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name><name>AN</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><literal type="number">3</literal></expr>;</expr_stmt></block></then></if></elseif>
	<elseif>else <if>if<condition>(<expr><name>ans</name><operator>==</operator><name>_4</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name><name>AN</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">2</literal></expr><operator>,</operator><expr><name><name>AN</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">3</literal></expr><operator>,</operator><expr><name><name>AN</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if></elseif>
	<elseif>else <if>if<condition>(<expr><name>ans</name><operator>==</operator><name>_5</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name><name>AN</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">3</literal></expr><operator>,</operator><expr><name><name>AN</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name><name>AN</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt></block></then></if></elseif>
	<elseif>else <if>if<condition>(<expr><name>ans</name><operator>==</operator><name>_6</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name><name>AN</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">3</literal></expr><operator>,</operator><expr><name><name>AN</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">2</literal></expr><operator>,</operator><expr><name><name>AN</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if></elseif></if>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d "</literal></expr></argument>,<argument><expr><name><name>AN</name><index>[<expr><name><name>K</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
