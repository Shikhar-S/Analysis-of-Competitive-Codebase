<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28899114_62489247.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_FORTIFY_SOURCE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><cpp:literal>"Ofast"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><cpp:literal>"no-stack-protector"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><cpp:literal>"unroll-loops"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>target</name><name>(</name><cpp:literal>"sse,sse2,sse3,ssse3,popcnt,abm,mmx,tune=native"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><cpp:literal>"fast-math"</cpp:literal><name>)</name></cpp:pragma>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>int32_t</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>num</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>set</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>all</name></decl>, <decl><type ref="prev"/><name>all1</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>num</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>all</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name><name>num</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>all1</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><operator>-</operator><name><name>num</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>num</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>num</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>map</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>smth</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>auto</name></type> <name>el</name> <range>: <expr><name>num</name></expr></range></decl></init>)</control>
        <block type="pseudo"><expr_stmt><expr><name><name>smth</name><index>[<expr><name>el</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>min_el</name> <init>= <expr><name><name>num</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>max_el</name> <init>= <expr><call><name><name>num</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name> <init>= <expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>k1</name> <init>= <expr><name><name>smth</name><index>[<expr><name>min_el</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>k2</name> <init>= <expr><name><name>smth</name><index>[<expr><name>max_el</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{
        <if>if <condition>(<expr><name>max_el</name> <operator>==</operator> <name>min_el</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"0\n"</literal></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name>k1</name> <operator>&gt;</operator> <name>k</name> <operator>&amp;&amp;</operator> <name>k2</name> <operator>&gt;</operator> <name>k</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>max_el</name> <operator>-</operator> <name>min_el</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name>k1</name> <operator>&lt;</operator> <name>k2</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>kek</name> <init>= <expr><operator>*</operator><call><name><name>all</name><operator>.</operator><name>upper_bound</name></name><argument_list>(<argument><expr><name>min_el</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">//cout &lt;&lt; kek &lt;&lt; endl;</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>diff</name> <init>= <expr><name>kek</name> <operator>-</operator> <name>min_el</name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>diff</name> <operator>*</operator> <name>k1</name> <operator>&lt;=</operator> <name>k</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>k</name> <operator>-=</operator> <name>k1</name> <operator>*</operator> <name>diff</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>min_el</name> <operator>+=</operator> <name>diff</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>k1</name> <operator>+=</operator> <name><name>smth</name><index>[<expr><name>min_el</name></expr>]</index></name></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><name>min_el</name> <operator>+=</operator> <name>k</name> <operator>/</operator> <name>k1</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>max_el</name> <operator>-</operator> <name>min_el</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
                <return>return <expr><literal type="number">0</literal></expr>;</return>
            }</block></else></if>
        }</block></then>
        <else>else <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>kek</name> <init>= <expr><operator>*</operator><call><name><name>all1</name><operator>.</operator><name>upper_bound</name></name><argument_list>(<argument><expr><operator>-</operator><name>max_el</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>kek</name> <operator>*=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <comment type="line">//cout &lt;&lt; kek &lt;&lt; endl;</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>diff</name> <init>= <expr><name>max_el</name> <operator>-</operator> <name>kek</name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>diff</name> <operator>*</operator> <name>k2</name> <operator>&lt;=</operator> <name>k</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>k</name> <operator>-=</operator> <name>k2</name> <operator>*</operator> <name>diff</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>max_el</name> <operator>-=</operator> <name>diff</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>k2</name> <operator>+=</operator> <name><name>smth</name><index>[<expr><name>max_el</name></expr>]</index></name></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><name>max_el</name> <operator>-=</operator> <name>k</name> <operator>/</operator> <name>k2</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>max_el</name> <operator>-</operator> <name>min_el</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
                <return>return <expr><literal type="number">0</literal></expr>;</return>
            }</block></else></if>
        }</block></else></if>
    }</block></while>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
