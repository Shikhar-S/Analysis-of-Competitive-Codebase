<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28934950_62465797.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOS</name></cpp:macro> <cpp:value>ios::sync_with_stdio(0);cin.tie(0);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Y</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=a;i&lt;=b;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>de</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout&lt;&lt;#x&lt;&lt;" "&lt;&lt;x&lt;&lt;y;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pray</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n_thing</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int x=i;x&lt;=(i+n_thing);x++) cout&lt;&lt;#a&lt;&lt;"["&lt;&lt;x&lt;&lt;"] :"&lt;&lt;a[x]&lt;&lt;endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mem</name><parameter_list>(<parameter><type><name>aa</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(aa,x,sizeof aa)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>ii</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name><init>=<expr><literal type="number">4e5</literal><operator>+</operator><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>arr</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>

<function><name>main</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>int</name></type> <name>T</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>T</name></expr>;</expr_stmt>
	<while>while<condition>( <expr><name>T</name><operator>--</operator></expr> )</condition> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>,<decl><type ref="prev"/><name>d</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>a</name><operator>&gt;&gt;</operator><name>b</name><operator>&gt;&gt;</operator><name>c</name><operator>&gt;&gt;</operator><name>d</name><operator>&gt;&gt;</operator><name>k</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>ans1</name></decl>,<decl><type ref="prev"/><name>ans2</name></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>a</name><operator>%</operator><name>c</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>ans1</name> <operator>=</operator> <name>a</name><operator>/</operator><name>c</name></expr>;</expr_stmt>
		}</block></then>
		<else>else
			<block type="pseudo"><expr_stmt><expr><name>ans1</name> <operator>=</operator> <name>a</name><operator>/</operator><name>c</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
		<if>if<condition>(<expr><name>b</name><operator>%</operator><name>d</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>ans2</name> <operator>=</operator> <name>b</name><operator>/</operator><name>d</name></expr>;</expr_stmt>
		}</block></then>
		<else>else
			<block type="pseudo"><expr_stmt><expr><name>ans2</name> <operator>=</operator> <name>b</name><operator>/</operator><name>d</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
		<if>if<condition>(<expr><name>ans1</name><operator>+</operator><name>ans2</name> <operator>&gt;</operator><name>k</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>-</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="string">"\n"</literal></expr>;</expr_stmt>
		}</block></then>
		<else>else
			<block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans1</name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name>ans2</name><operator>&lt;&lt;</operator><literal type="string">"\n"</literal></expr>;</expr_stmt></block></else></if> 
		
	}</block></while>
	
}</block></function>

</unit>
