<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28934466_62484831.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pob</name></cpp:macro> <cpp:value>pop_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pf</name></cpp:macro> <cpp:value>push_front</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pof</name></cpp:macro> <cpp:value>pop_front</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nd</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>st</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<using>using <name>ll</name><init>=<type><name>long</name> <name>long</name></type></init>;</using>
<using>using <name>pii</name><init>=<type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>pll</name><init>=<type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>vi</name><init>=<type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>vl</name><init>=<type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>mii</name><init>=<type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>si</name><init>=<type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>vpi</name><init>=<type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pii</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>vpl</name><init>=<type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pll</name></expr></argument>&gt;</argument_list></name></type></init>;</using>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name><init>=<expr><operator>(</operator><name>int</name><operator>)</operator><literal type="number">1e0</literal><operator>+</operator><literal type="number">5</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>,<decl><type ref="prev"/><name>q</name></decl>,<decl><type ref="prev"/><name>roz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vi</name></type> <name>V</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vpl</name></type> <name>lic</name></decl>,<decl><type ref="prev"/><name>zm1</name></decl>,<decl><type ref="prev"/><name>zm2</name></decl>,<decl><type ref="prev"/><name>xd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>k</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>R</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>)</parameter_list><block>{
	<return>return <expr><call><name>rand</name><argument_list>()</argument_list></call><operator>%</operator><operator>(</operator><name>p</name><operator>-</operator><name>l</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><name>l</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>wczytaj</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>k</name></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>a</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>V</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>V</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>V</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>roz</name><operator>=</operator><name><name>V</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>V</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ile</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>war</name><init>=<expr><name><name>V</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
		<if>if <condition>(<expr><name><name>V</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name>war</name></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>ile</name><operator>++</operator></expr>;</expr_stmt></block></then>
		<else>else<block>{
			<expr_stmt><expr><call><name><name>lic</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><block>{<expr><name>ile</name></expr>,<expr><name>war</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>ile</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>war</name><operator>=</operator><name><name>V</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		}</block></else></if>
	}</block></for>
	<expr_stmt><expr><call><name><name>lic</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><block>{<expr><name>ile</name></expr>,<expr><name>war</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>int</name></type> <name>koszt</name><init>=<expr><name><name>lic</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>st</name></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name><name>lic</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
		<expr_stmt><expr><call><name><name>zm1</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><block>{<expr><name>koszt</name></expr>,<expr><name><name>lic</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nd</name><operator>-</operator><name><name>lic</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>nd</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>koszt</name><operator>+=</operator><name><name>lic</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>st</name></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><name>koszt</name><operator>=</operator><call><name><name>lic</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>st</name></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><call><name><name>lic</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control><block>{
		<expr_stmt><expr><call><name><name>zm2</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><block>{<expr><name>koszt</name></expr>,<expr><name><name>lic</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nd</name><operator>-</operator><name><name>lic</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>nd</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>koszt</name><operator>+=</operator><name><name>lic</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>st</name></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><call><name><name>zm2</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><block>{<expr><operator>(</operator><name>ll</name><operator>)</operator><literal type="number">1e18</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>zm1</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><block>{<expr><operator>(</operator><name>ll</name><operator>)</operator><literal type="number">1e18</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>auto</name></type> <name>i</name><range>:<expr><name>zm1</name></expr></range></decl></init>)</control>
		<block type="pseudo"><expr_stmt><expr><call><name><name>xd</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<for>for <control>(<init><decl><type><name>auto</name></type> <name>i</name><range>:<expr><name>zm2</name></expr></range></decl></init>)</control>
		<block type="pseudo"><expr_stmt><expr><call><name><name>xd</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>xd</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>xd</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>wsk</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><name>roz</name><operator>&gt;</operator><literal type="number">0</literal> <operator>and</operator> <name>k</name><operator>&gt;=</operator><name><name>xd</name><index>[<expr><name>wsk</name></expr>]</index></name><operator>.</operator><name>st</name></expr>)</condition><block>{
		<decl_stmt><decl><type><name>ll</name></type> <name>maxi</name><init>=<expr><name>k</name><operator>/</operator><name><name>xd</name><index>[<expr><name>wsk</name></expr>]</index></name><operator>.</operator><name>st</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>maxi</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>maxi</name></expr></argument>,<argument><expr><name><name>xd</name><index>[<expr><name>wsk</name></expr>]</index></name><operator>.</operator><name>nd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>roz</name><operator>-=</operator><name>maxi</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>k</name><operator>-=</operator><name>maxi</name><operator>*</operator><name><name>xd</name><index>[<expr><name>wsk</name></expr>]</index></name><operator>.</operator><name>st</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>wsk</name><operator>++</operator></expr>;</expr_stmt>
	}</block></while>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name>max</name><argument_list>(<argument><expr><literal type="number">0LL</literal></expr></argument>,<argument><expr><name>roz</name></expr></argument>)</argument_list></call><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ilosc_przypadkow_testowych</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<comment type="line">//	cin&gt;&gt;ilosc_przypadkow_testowych</comment>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>ilosc_przypadkow_testowych</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
		<expr_stmt><expr><call><name>wczytaj</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></for>
}</block></function>
</unit>
