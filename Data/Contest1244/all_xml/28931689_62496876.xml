<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28931689_62496876.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inf</name></cpp:macro> <cpp:value>1000000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;int,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>r1</name></cpp:macro> <cpp:value>rt&lt;&lt;1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>r2</name></cpp:macro> <cpp:value>rt&lt;&lt;1|1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ri</name></cpp:macro> <cpp:value>register int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(ri i=(a);i&lt;=(b);++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep2</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(ri i=(a);i&lt;=(b);i+=(c))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REP</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(ri i=(a);i&gt;=(b);--i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REP2</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(ri i=(a);i&gt;=(b);i-=(c))</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name><init>=<expr><literal type="number">4e5</literal><operator>+</operator><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name><name>vis</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>b</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ri</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>k</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>s</name></expr>;</expr_stmt><expr_stmt><expr><name>s</name><operator>=</operator><literal type="char">' '</literal><operator>+</operator><name>s</name><operator>+</operator><name>s</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ri</name></type> <name>x</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>x</name><operator>&lt;</operator><name>n</name><operator>&amp;&amp;</operator><name><name>s</name><index>[<expr><name>x</name></expr>]</index></name><operator>==</operator><name><name>s</name><index>[<expr><name>n</name></expr>]</index></name></expr>)</condition> <block type="pseudo"><expr_stmt><expr><operator>++</operator><name>x</name></expr>;</expr_stmt></block></while>
	<if>if<condition>(<expr><name>x</name><operator>==</operator><name>n</name></expr>)</condition><then><block>{
		<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt><return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></then></if>
	<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument>x</argument>,<argument>x+n-<literal type="number">1</literal></argument>)</argument_list></macro><block>{
		<decl_stmt><decl><type><name>ri</name></type> <name>j</name><init>=<expr><name>i</name></expr></init></decl>;</decl_stmt>
		<while>while<condition>(<expr><name>j</name><operator>+</operator><literal type="number">1</literal><operator>&lt;=</operator><name>x</name><operator>+</operator><name>n</name><operator>-</operator><literal type="number">1</literal><operator>&amp;&amp;</operator><name><name>s</name><index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition> <block type="pseudo"><expr_stmt><expr><operator>++</operator><name>j</name></expr>;</expr_stmt></block></while>
		<if>if<condition>(<expr><name>j</name><operator>!=</operator><name>i</name></expr>)</condition><then><block>{
			<macro><name>rep</name><argument_list>(<argument>l</argument>,<argument>i</argument>,<argument>j</argument>)</argument_list></macro> <expr_stmt><expr><name><name>vis</name><index>[<expr><name>l</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><name>i</name><operator>=</operator><name>j</name></expr>;</expr_stmt>
	}</block>
	<decl_stmt><decl><type><name>ri</name></type> <name>pos</name><init>=<expr><name>x</name></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>pos</name><operator>&lt;=</operator><name>n</name><operator>+</operator><name>x</name><operator>-</operator><literal type="number">1</literal><operator>&amp;&amp;</operator><operator>!</operator><name><name>vis</name><index>[<expr><name>pos</name></expr>]</index></name></expr>)</condition><block>{
		<expr_stmt><expr><operator>++</operator><name>pos</name></expr>;</expr_stmt>
	}</block></while>
	<if>if<condition>(<expr><name>pos</name><operator>&gt;</operator><name>n</name><operator>+</operator><name>x</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block>{
		<if>if<condition>(<expr><name>k</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then>
		<block type="pseudo"><macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call>(<name>char</name>)<argument_list>(<argument><expr><literal type="char">'W'</literal><operator>+</operator><literal type="char">'B'</literal><operator>-</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
		<else>else <block type="pseudo"><macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></else></if><return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></then></if>
	<decl_stmt><decl><type><name>ri</name></type> <name>lst</name><init>=<expr><name>pos</name></expr></init></decl>,<decl><type ref="prev"/><name>d</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro><block>{
		<expr_stmt><expr><operator>++</operator><name>pos</name></expr>;</expr_stmt><expr_stmt><expr><operator>++</operator><name>d</name></expr>;</expr_stmt><if>if<condition>(<expr><name>pos</name><operator>==</operator><name>x</name><operator>+</operator><name>n</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>pos</name><operator>=</operator><name>x</name></expr>;</expr_stmt></block></then></if>
		<if>if<condition>(<expr><name><name>vis</name><index>[<expr><name>pos</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>lst</name><operator>=</operator><name>pos</name></expr><operator>,</operator><expr><name>d</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><name><name>a</name><index>[<expr><name>pos</name></expr>]</index></name><operator>=</operator><name>lst</name></expr><operator>,</operator><expr><name><name>b</name><index>[<expr><name>pos</name></expr>]</index></name><operator>=</operator><name>d</name></expr>;</expr_stmt></block></else></if>
	}</block>
	<expr_stmt><expr><name>pos</name><operator>=</operator><name>x</name></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>pos</name><operator>&lt;=</operator><name>n</name><operator>+</operator><name>x</name><operator>-</operator><literal type="number">1</literal><operator>&amp;&amp;</operator><operator>!</operator><name><name>vis</name><index>[<expr><name>pos</name></expr>]</index></name></expr>)</condition><block>{
		<expr_stmt><expr><operator>++</operator><name>pos</name></expr>;</expr_stmt>
	}</block></while>
	<expr_stmt><expr><name>lst</name><operator>=</operator><name>pos</name></expr><operator>,</operator><expr><name>d</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro><block>{
		<expr_stmt><expr><operator>--</operator><name>pos</name></expr>;</expr_stmt><expr_stmt><expr><operator>++</operator><name>d</name></expr>;</expr_stmt><if>if<condition>(<expr><name>pos</name><operator>&lt;</operator><name>x</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>pos</name><operator>=</operator><name>x</name><operator>+</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
		<if>if<condition>(<expr><name><name>vis</name><index>[<expr><name>pos</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>lst</name><operator>=</operator><name>pos</name></expr><operator>,</operator><expr><name>d</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></then>
		<else>else<block>{
			<if>if<condition>(<expr><name>d</name><operator>&lt;</operator><name><name>b</name><index>[<expr><name>pos</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>a</name><index>[<expr><name>pos</name></expr>]</index></name><operator>=</operator><name>lst</name></expr><operator>,</operator><expr><name><name>b</name><index>[<expr><name>pos</name></expr>]</index></name><operator>=</operator><name>d</name></expr>;</expr_stmt></block></then></if>
		}</block></else></if>
	}</block>
	<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument>n+<literal type="number">1</literal></argument>,<argument>x+n-<literal type="number">1</literal></argument>)</argument_list></macro><block>{
		<if>if<condition>(<expr><name><name>vis</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></then>
		<else>else<block>{
			<if>if<condition>(<expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;=</operator><name>k</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>s</name><index>[<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block></then>
			<else>else<block>{
				<if>if<condition>(<expr><name>k</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call>(<name>char</name>)<argument_list>(<argument><expr><literal type="char">'W'</literal><operator>+</operator><literal type="char">'B'</literal><operator>-</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
				<else>else <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></else></if>
			}</block></else></if>
		}</block></else></if>
	}</block>
	<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument>x</argument>,<argument>n</argument>)</argument_list></macro><block>{
		<if>if<condition>(<expr><name><name>vis</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></then>
		<else>else<block>{
			<if>if<condition>(<expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;=</operator><name>k</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>s</name><index>[<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block></then>
			<else>else<block>{
				<if>if<condition>(<expr><name>k</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call>(<name>char</name>)<argument_list>(<argument><expr><literal type="char">'W'</literal><operator>+</operator><literal type="char">'B'</literal><operator>-</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
				<else>else <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></else></if>
			}</block></else></if>
		}</block></else></if>
	}</block>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
