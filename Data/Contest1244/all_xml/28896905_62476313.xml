<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28896905_62476313.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list> 
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>p</name></decl>,<decl><type ref="prev"/><name>w</name></decl>,<decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%I64d%I64d%I64d%I64d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>w</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>p</name><operator>/</operator><name>w</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&gt;=</operator><call><name>max</name><argument_list>(<argument><expr><literal type="number">0ll</literal></expr></argument>,<argument><expr><name>p</name><operator>/</operator><name>w</name><operator>-</operator><literal type="number">1000000</literal></expr></argument>)</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>y</name><init>=<expr><operator>(</operator><name>p</name><operator>-</operator><name>i</name><operator>*</operator><name>w</name><operator>)</operator><operator>/</operator><name>d</name></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>y</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then>
			<block type="pseudo"><continue>continue;</continue></block></then></if>
		<if>if<condition>(<expr><name>i</name><operator>+</operator><name>y</name><operator>&lt;=</operator><name>n</name><operator>&amp;&amp;</operator><name>i</name><operator>*</operator><name>w</name><operator>+</operator><name>y</name><operator>*</operator><name>d</name><operator>==</operator><name>p</name></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%I64d %I64d %I64d"</literal></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>n</name><operator>-</operator><name>i</name><operator>-</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		}</block></then></if>
	}</block></for>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
<comment type="block">/*
30 60 3 2
*/</comment></unit>
