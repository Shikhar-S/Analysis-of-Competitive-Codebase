<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28915624_62489948.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ss</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<comment type="line">//#define double long double</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">2e5</literal> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>MOD</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>, <decl><type ref="prev"/><name>mod</name> <init>= <expr><literal type="number">998244353</literal></expr></init></decl>, <decl><type ref="prev"/><name>INF</name> <init>= <expr><literal type="number">3e18</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mt19937</name></type> <name>Flash_new_51</name><argument_list>(<argument><expr><literal type="number">51515</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<using>using <name>vi</name> <init>= <type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>vp</name> <init>= <type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name><name>pair</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type></init>;</using>

<decl_stmt><decl><type><name><name>map</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>mp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>multiset</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>set</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>s1</name></decl>;</decl_stmt>

<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
   <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>Flash</name></cpp:ifdef>
   <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"input.txt"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"output.txt"</literal></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
   <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
   <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
   <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>x</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mp</name><index>[<expr><name>x</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>s1</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   }</block></for>
   <if>if <condition>(<expr><call><name><name>s1</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
   }</block></then></if>
   <while>while <condition>(<expr><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block>{
        <if>if <condition>(<expr><call><name><name>s1</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
       }</block></then></if>
       <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><operator>*</operator><call><name><name>s1</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>o1</name> <init>= <expr><operator>*</operator><call><name><name>s1</name><operator>.</operator><name>rbegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
       <expr_stmt><expr><call><name><name>s1</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <decl_stmt><decl><type><name>int</name></type> <name>ol</name> <init>= <expr><operator>*</operator><call><name><name>s1</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
       <expr_stmt><expr><call><name><name>s1</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>s1</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>o1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <decl_stmt><decl><type><name>int</name></type> <name>ol1</name> <init>= <expr><operator>*</operator><call><name><name>s1</name><operator>.</operator><name>rbegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
       <expr_stmt><expr><call><name><name>s1</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>o1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <if>if <condition>(<expr><name>o</name> <operator>==</operator> <name>o1</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
       <if>if <condition>(<expr><name><name>mp</name><index>[<expr><name>o</name></expr>]</index></name> <operator>&lt;</operator> <name><name>mp</name><index>[<expr><name>o1</name></expr>]</index></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>s1</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>l1</name> <init>= <expr><operator>*</operator><call><name><name>s1</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name><name>mp</name><index>[<expr><name>o</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>l1</name> <operator>-</operator> <name>o</name><operator>)</operator> <operator>&gt;=</operator> <name>k</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>oo</name> <init>= <expr><name>k</name> <operator>/</operator> <name><name>mp</name><index>[<expr><name>o</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>o</name><operator>+=</operator> <name>oo</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>o1</name> <operator>-</operator> <name>o</name></expr>;</expr_stmt>
                <return>return <expr><literal type="number">0</literal></expr>;</return>
            }</block></then></if>
            <expr_stmt><expr><name>k</name><operator>-=</operator> <name><name>mp</name><index>[<expr><name>o</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>l1</name> <operator>-</operator> <name>o</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>mp</name><index>[<expr><name>l1</name></expr>]</index></name><operator>+=</operator> <name><name>mp</name><index>[<expr><name>o</name></expr>]</index></name></expr>;</expr_stmt>
       }</block></then>
       <else>else <block>{
           <expr_stmt><expr><call><name><name>s1</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>o1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <decl_stmt><decl><type><name>int</name></type> <name>l1</name> <init>= <expr><operator>*</operator><call><name><name>s1</name><operator>.</operator><name>rbegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
           <if>if <condition>(<expr><name><name>mp</name><index>[<expr><name>o1</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>o1</name> <operator>-</operator> <name>l1</name><operator>)</operator> <operator>&gt;=</operator> <name>k</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>oo</name> <init>= <expr><name>k</name> <operator>/</operator> <name><name>mp</name><index>[<expr><name>o1</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>o1</name><operator>-=</operator> <name>oo</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>o1</name> <operator>-</operator> <name>o</name></expr>;</expr_stmt>
                <return>return <expr><literal type="number">0</literal></expr>;</return>
           }</block></then></if>
           <expr_stmt><expr><name>k</name><operator>-=</operator> <name><name>mp</name><index>[<expr><name>o1</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>o1</name> <operator>-</operator> <name>l1</name><operator>)</operator></expr>;</expr_stmt>
           <expr_stmt><expr><name><name>mp</name><index>[<expr><name>l1</name></expr>]</index></name><operator>+=</operator> <name><name>mp</name><index>[<expr><name>o1</name></expr>]</index></name></expr>;</expr_stmt>
       }</block></else></if>
      <comment type="line">// cout &lt;&lt; k &lt;&lt; endl;</comment>
   }</block></while>
   <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>


}</block></function>
</unit>
