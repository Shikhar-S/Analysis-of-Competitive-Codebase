<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28912821_62477431.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>

<function><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>xa</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ya</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>xb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>yb</name></decl></parameter>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name>b</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
    <block>{
        <return>return <expr><block>{<expr><name>xa</name></expr>, <expr><name>ya</name></expr>}</block></expr>;</return>
    }</block></then></if>
    <decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><name>a</name> <operator>/</operator> <name>b</name></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name>gcd</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name> <operator>%</operator> <name>b</name></expr></argument>, <argument><expr><name>xb</name></expr></argument>, <argument><expr><name>yb</name></expr></argument>, <argument><expr><name>xa</name> <operator>-</operator> <name>k</name> <operator>*</operator> <name>xb</name></expr></argument>, <argument><expr><name>ya</name> <operator>-</operator> <name>k</name> <operator>*</operator> <name>yb</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>diaff</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>char</name></type> <name>f1</name></decl>, <decl><type ref="prev"/><name>f2</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>f1</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>f2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>c</name> <operator>*=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>a</name> <operator>*=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>b</name> <operator>*=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    }</block></then></if>
    <if>if <condition>(<expr><name>a</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>f1</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>a</name> <operator>=</operator> <operator>-</operator><name>a</name></expr>;</expr_stmt></block></then></if>
    <if>if <condition>(<expr><name>b</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>f2</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>b</name> <operator>=</operator> <operator>-</operator><name>b</name></expr>;</expr_stmt></block></then></if>
    <decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><call><name>__gcd</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>c</name> <operator>%</operator> <name>d</name></expr>)</condition><then>
    <block>{
        <return>return <expr><block>{<expr><operator>-</operator><name>LLONG_MAX</name></expr>, <expr><operator>-</operator><name>LLONG_MAX</name></expr>}</block></expr>;</return>
    }</block></then></if>
    <decl_stmt><decl><type><name>auto</name></type> <name>imp</name> <init>= <expr><call><name>gcd</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>imp</name><operator>.</operator><name>first</name></name> <operator>*=</operator> <name>c</name> <operator>/</operator> <name>d</name></expr><operator>,</operator> <expr><name><name>imp</name><operator>.</operator><name>second</name></name> <operator>*=</operator> <name>c</name> <operator>/</operator> <name>d</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>f1</name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name><name>imp</name><operator>.</operator><name>first</name></name> <operator>*=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
    <if>if <condition>(<expr><name>f2</name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name><name>imp</name><operator>.</operator><name>second</name></name> <operator>*=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
    <return>return <expr><name>imp</name></expr>;</return>
}</block></function>

<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>arrias</name></cpp:ifdef>
    <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"true.txt"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>p</name> <operator>&gt;&gt;</operator> <name>w</name> <operator>&gt;&gt;</operator> <name>d</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>f</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;=</operator> <name>w</name></expr>;</condition> <incr><expr><operator>++</operator><name>y</name></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><name>p</name> <operator>-</operator> <name>y</name> <operator>*</operator> <name>d</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>cnt</name> <operator>%</operator> <name>w</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>cnt</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>n</name> <operator>&gt;=</operator> <name>cnt</name> <operator>/</operator> <name>w</name> <operator>+</operator> <name>y</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>cnt</name> <operator>/</operator> <name>w</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name>y</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name>n</name> <operator>-</operator> <name>cnt</name> <operator>/</operator> <name>w</name> <operator>-</operator> <name>y</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
            <break>break;</break>
        }</block></then></if>
    }</block></for>

    <if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    }</block></then></if>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
