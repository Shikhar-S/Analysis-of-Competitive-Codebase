<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28895851_62484981.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<comment type="block">/*
//functions from gfg

long long int power(long long int x,long long int y,long long  int p)
{
    long long int res = 1;     // Initialize result
 
    x = x % p;  // Update x if it is more than or 
                // equal to p
 
    while (y &gt; 0)
    {
        // If y is odd, multiply x with result
        if (y &amp; 1)
            {//d=(long double)x/p;
            res = (res*x) % p;
            }
 
        // y must be even now
        y = y&gt;&gt;1; // y = y/2
        x=(x*x)%p;
        
    }
    return res%p;
}

long long int gcd(long long int a,long long int b) 
{ 
    if (a == 0) 
        return b; 
    return gcd(b % a, a); 
}

long long int binomialCoeff(long long int n,long long int k) 
{ 
    long long int C[k+1]; 
    memset(C, 0, sizeof(C)); 
  
    C[0] = 1;  // nC0 is 1 
  
    for (ll i = 1; i &lt;= n; i++) 
    { 
        // Compute next row of pascal triangle using 
        // the previous row 
        for (ll j = min(i, k); j &gt; 0; j--) 
            C[j] = C[j] + C[j-1]; //add percent mod if want nCk percent mod;
    } 
    return C[k]; 
} 


*/</comment>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    
    <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name>l</name></decl>,<decl><type ref="prev"/><name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>p</name></decl>,<decl><type ref="prev"/><name>w</name></decl>,<decl><type ref="prev"/><name>d</name></decl>,<decl><type ref="prev"/><name>hi</name></decl>,<decl><type ref="prev"/><name>lo</name></decl>,<decl><type ref="prev"/><name>med</name></decl>,<decl><type ref="prev"/><name>winsm</name></decl>,<decl><type ref="prev"/><name>drm</name></decl>,<decl><type ref="prev"/><name>p1</name></decl>,<decl><type ref="prev"/><name>dif</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>p</name><operator>&gt;&gt;</operator><name>w</name><operator>&gt;&gt;</operator><name>d</name></expr>;</expr_stmt>
    
    <if>if<condition>(<expr><name>n</name><operator>*</operator><name>w</name><operator>&lt;</operator><name>p</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>-</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    }</block></then>
    <elseif>else <if>if<condition>(<expr><name>n</name><operator>*</operator><name>w</name><operator>==</operator><name>p</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>n</name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><literal type="number">0</literal><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><literal type="number">0</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    }</block></then></if></elseif>
    <elseif>else <if>if<condition>(<expr><name>p</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="number">0</literal><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><literal type="number">0</literal><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name>n</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    }</block></then></if></elseif>
    <else>else
    <block>{
        <expr_stmt><expr><name>winsm</name><operator>=</operator><name>p</name><operator>/</operator><name>w</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>p1</name><operator>=</operator><name>p</name><operator>-</operator><name>winsm</name><operator>*</operator><name>w</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>drm</name><operator>=</operator><name>p1</name><operator>/</operator><name>d</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>k</name><operator>=</operator><name>p1</name><operator>-</operator><name>drm</name><operator>*</operator><name>d</name></expr>;</expr_stmt>
        
        <expr_stmt><expr><name>dif</name><operator>=</operator><name>w</name><operator>-</operator><name>d</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>dif</name><operator>%=</operator><name>d</name></expr>;</expr_stmt>
        
        <if>if<condition>(<expr><name>k</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>winsm</name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name>drm</name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name>n</name><operator>-</operator><name>drm</name><operator>-</operator><name>winsm</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
        }</block></then>
        <else>else
        <block>{
            <decl_stmt><decl><type><name>ll</name></type> <name>d1</name><init>=<expr><name>d</name></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name>dif</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>-</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
            }</block></then>
            <else>else
            <block>{
                <expr_stmt><expr><name>ans</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
                <while>while<condition>(<expr><operator>(</operator><name>d1</name><operator>-</operator><name>k</name><operator>)</operator><operator>%</operator><name>dif</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition>
                <block>{
                    <if>if<condition>(<expr><operator>(</operator><name>d1</name><operator>-</operator><name>k</name><operator>)</operator><operator>/</operator><name>dif</name><operator>&gt;</operator><name>winsm</name></expr>)</condition><then>
                    <block>{
                        <expr_stmt><expr><name>ans</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
                        <break>break;</break>
                    }</block></then></if>
                    <expr_stmt><expr><name>d1</name><operator>+=</operator><name>d</name></expr>;</expr_stmt>
                }</block></while>
                <if>if<condition>(<expr><name>ans</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>-</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></then>
                <else>else
                <block>{
                    <decl_stmt><decl><type><name>ll</name></type> <name>ww</name><init>=<expr><name>winsm</name><operator>-</operator><operator>(</operator><name>d1</name><operator>-</operator><name>k</name><operator>)</operator><operator>/</operator><name>dif</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>ll</name></type> <name>dd</name><init>=<expr><operator>(</operator><name>p</name><operator>-</operator><name>ww</name><operator>*</operator><name>w</name><operator>)</operator><operator>/</operator><name>d</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>ll</name></type> <name>loss</name><init>=<expr><name>n</name><operator>-</operator><name>ww</name><operator>-</operator><name>dd</name></expr></init></decl>;</decl_stmt>
                    <if>if<condition>(<expr><name>ww</name><operator>&lt;</operator><literal type="number">0</literal><operator>||</operator><name>loss</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>-</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></then>
                    <else>else
                    <block>{
                        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ww</name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name>dd</name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name>loss</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></else></if>
            }</block></else></if>
        }</block></else></if>
    }</block></else></if>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
