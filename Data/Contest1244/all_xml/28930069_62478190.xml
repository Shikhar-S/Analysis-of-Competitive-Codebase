<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28930069_62478190.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<comment type="line">//haha</comment>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fastio</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(0);cin.tie(0);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fileio</name></cpp:macro> <cpp:value>freopen("input.txt", "r", stdin);freopen("output.txt", "w", stdout);</cpp:value></cpp:define>
<decl_stmt><decl><type><name>int</name></type> <name>INF</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">50</literal></expr></init></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
    <while>while <condition>(<expr><name>b</name></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>p</name> <init>= <expr><name>a</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>b</name> <operator>=</operator> <name>p</name> <operator>%</operator> <name>b</name></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><name>a</name></expr>;</return>
}</block></function>

<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>fastio</name>
<comment type="line">// fileio</comment>
    <name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>p</name> <operator>&gt;&gt;</operator> <name>w</name> <operator>&gt;&gt;</operator> <name>d</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>gcd1</name> <init>= <expr><call><name>gcd</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>p</name> <operator>%</operator> <name>gcd1</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name>p</name> <operator>/=</operator> <name>gcd1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>d</name> <operator>/=</operator> <name>gcd1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>w</name> <operator>/=</operator> <name>gcd1</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>p</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="number">0</literal> <operator>&lt;&lt;</operator> <literal type="char">' '</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal> <operator>&lt;&lt;</operator> <literal type="char">' '</literal> <operator>&lt;&lt;</operator> <name>n</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>
    <if>if <condition>(<expr><name>p</name> <operator>&lt;</operator> <name>d</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>
    <if>if <condition>(<expr><name>p</name> <operator>&lt;</operator> <name>w</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name>p</name> <operator>%</operator> <name>d</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name>p</name> <operator>/</operator> <name>d</name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>y</name> <operator>&gt;</operator> <name>n</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
                <return>return <expr><literal type="number">0</literal></expr>;</return>
            }</block></then></if>
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="number">0</literal> <operator>&lt;&lt;</operator> <literal type="char">' '</literal> <operator>&lt;&lt;</operator> <name>y</name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal> <operator>&lt;&lt;</operator> <name>n</name> <operator>-</operator> <name>y</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
        }</block></else></if>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>
    <decl_stmt><decl><type><name>int</name></type> <name>ost</name> <init>= <expr><name>p</name> <operator>%</operator> <name>d</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>how</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>how</name> <operator>&lt;</operator> <name>d</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>how</name> <operator>*</operator> <name>w</name><operator>)</operator> <operator>%</operator> <name>d</name> <operator>!=</operator> <name>ost</name></expr>)</condition> <block type="pseudo"><expr_stmt><expr><operator>++</operator><name>how</name></expr>;</expr_stmt></block></while>
    <if>if <condition>(<expr><name>how</name> <operator>==</operator> <name>d</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>
    <decl_stmt><decl><type><name>int</name></type> <name>osth</name> <init>= <expr><name>how</name> <operator>%</operator> <name>d</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name>p</name> <operator>/</operator> <name>w</name> <operator>/</operator> <name>d</name> <operator>*</operator> <name>d</name> <operator>+</operator> <name>osth</name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>w</name> <operator>*</operator> <name>x</name> <operator>&gt;</operator> <name>p</name></expr>)</condition> <block>{<expr_stmt><expr><name>x</name> <operator>-=</operator> <name>d</name></expr>;</expr_stmt>}</block></while>
    <decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><operator>(</operator><name>p</name> <operator>-</operator> <name>x</name> <operator>*</operator> <name>w</name><operator>)</operator> <operator>/</operator> <name>d</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>z</name> <init>= <expr><name>n</name> <operator>-</operator> <name>x</name> <operator>-</operator> <name>y</name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>z</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>x</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>y</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>x</name> <operator>*</operator> <name>w</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>d</name> <operator>==</operator> <name>p</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>x</name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal> <operator>&lt;&lt;</operator> <name>y</name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal> <operator>&lt;&lt;</operator> <name>z</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
}</block></function></unit>
