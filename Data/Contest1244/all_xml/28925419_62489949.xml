<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28925419_62489949.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N</name></cpp:macro> <cpp:value>100005</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>bool</name></type> <name>cur1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>head</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name>id</name></decl>;</decl_stmt>
<struct>struct <name>edge</name><block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>to</name></decl>,<decl><type ref="prev"/><name>nxt</name></decl>;</decl_stmt>
</public>}</block><decl><name><name>E</name><index>[<expr><name>N</name><operator>&lt;&lt;</operator><literal type="number">1</literal></expr>]</index></name></decl>;</struct>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>add_edge</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
	<expr_stmt><expr><name><name>E</name><index>[<expr><operator>++</operator><name>id</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>edge</name><operator>)</operator><block>{<expr><name>b</name></expr>,<expr><name><name>head</name><index>[<expr><name>a</name></expr>]</index></name></expr>}</block></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>head</name><index>[<expr><name>a</name></expr>]</index></name><operator>=</operator><name>id</name></expr>;</expr_stmt>
}</block></function>
<function><specifier>inline</specifier> <type><name>long</name> <name>long</name></type> <name>min3</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>long</name> <name>long</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>long</name> <name>long</name></type> <name>c</name></decl></parameter>)</parameter_list><block>{<return>return <expr><call><name>min</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><call><name>min</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>}</block></function>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>Rd</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>&amp;</modifier></type><name>res</name></decl></parameter>)</parameter_list><block>{
	<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt><expr_stmt><expr><name>res</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr><operator>,</operator><expr><name>c</name><operator>&lt;</operator><literal type="number">48</literal></expr>)</condition><block type="pseudo"><empty_stmt>;</empty_stmt></block></while>
	<do>do <block type="pseudo"><expr_stmt><expr><name>res</name><operator>=</operator><operator>(</operator><name>res</name><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator><operator>+</operator><operator>(</operator><name>res</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><operator>(</operator><name>c</name><operator>^</operator><literal type="number">48</literal><operator>)</operator></expr>;</expr_stmt></block>
	while<condition>(<expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr><operator>,</operator><expr><name>c</name><operator>&gt;</operator><literal type="number">47</literal></expr>)</condition>;</do>
	<return>return;</return>
}</block></function>
<function><specifier>inline</specifier> <type><name>bool</name></type> <name>check</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>int</name></type> <name>sum</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>ct</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><name><name>head</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</init><condition><expr><name>j</name></expr>;</condition><incr><expr><name>j</name><operator>=</operator><name><name>E</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>nxt</name></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name>ct</name><operator>++</operator></expr>;</expr_stmt></block></for>
		<if>if<condition>(<expr><name>ct</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>sum</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
	}</block></for>
	<return>return <expr><name>sum</name><operator>==</operator><literal type="number">2</literal></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name>int</name></type> <name><name>que</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name>cnt</name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>f</name></decl></parameter>)</parameter_list><block>{
	<expr_stmt><expr><name><name>que</name><index>[<expr><operator>++</operator><name>cnt</name></expr>]</index></name><operator>=</operator><name>x</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name><name>head</name><index>[<expr><name>x</name></expr>]</index></name></expr></init></decl>;</init><condition><expr><name>i</name></expr>;</condition><incr><expr><name>i</name><operator>=</operator><name><name>E</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nxt</name></expr></incr>)</control><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>v</name><init>=<expr><name><name>E</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>to</name></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>v</name><operator>==</operator><name>f</name></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
		<expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>v</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
}</block></function>
<function><specifier>inline</specifier> <type><name>int</name></type> <name>NUM</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{
	<if>if<condition>(<expr><name>x</name><operator>&amp;&amp;</operator><name>y</name></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
	<if>if<condition>(<expr><name>x</name><operator>!=</operator><literal type="number">1</literal><operator>&amp;&amp;</operator><name>y</name><operator>!=</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
	<return>return <expr><literal type="number">2</literal></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name>int</name></type> <name><name>clo</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<function><specifier>inline</specifier> <type><name>long</name> <name>long</name></type> <name>Calc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>res</name><init>=<expr><name><name>c</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name><name>que</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>+</operator><name><name>c</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><name><name>que</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>clo</name><index>[<expr><name><name>que</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>=</operator><name>x</name></expr>;</expr_stmt><expr_stmt><expr><name><name>clo</name><index>[<expr><name><name>que</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index></name><operator>=</operator><name>y</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">3</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><name><name>clo</name><index>[<expr><name><name>que</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>=</operator><call><name>NUM</name><argument_list>(<argument><expr><name><name>clo</name><index>[<expr><name><name>que</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr></argument>,<argument><expr><name><name>clo</name><index>[<expr><name><name>que</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>res</name><operator>+=</operator><name><name>c</name><index>[<expr><name><name>clo</name><index>[<expr><name><name>que</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>]</index><index>[<expr><name><name>que</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
	}</block></for>
	<return>return <expr><name>res</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name>bool</name></type> <name>cur2</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
<comment type="line">//	printf("%lf MB\n",(&amp;cur2-&amp;cur1)/1024.0/1024);</comment>
	<expr_stmt><expr><call><name>Rd</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">2</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><call><name>Rd</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><call><name>Rd</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>Rd</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>add_edge</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>add_edge</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<if>if<condition>(<expr><operator>!</operator><call><name>check</name><argument_list>()</argument_list></call></expr>)</condition><then><block>{<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><literal type="number">0</literal></expr>;</return>}</block></then></if>
	<decl_stmt><decl><type><name>int</name></type> <name>rt</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>ct</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><name><name>head</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</init><condition><expr><name>j</name></expr>;</condition><incr><expr><name>j</name><operator>=</operator><name><name>E</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>nxt</name></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name>ct</name><operator>++</operator></expr>;</expr_stmt></block></for>
		<if>if<condition>(<expr><name>ct</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>rt</name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></then></if>
	}</block></for>
	<expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>rt</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>ans</name><init>=<expr><literal type="number">1e18</literal></expr></init></decl>,<decl><type ref="prev"/><name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">2</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><literal type="number">2</literal></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><if>if<condition>(<expr><name>i</name><operator>!=</operator><name>j</name></expr>)</condition><then><block>{
			<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>o</name><init>=<expr><call><name>Calc</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if<condition>(<expr><name>o</name><operator>&lt;</operator><name>ans</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>ans</name><operator>=</operator><name>o</name></expr><operator>,</operator><expr><name>x</name><operator>=</operator><name>i</name></expr><operator>,</operator><expr><name>y</name><operator>=</operator><name>j</name></expr>;</expr_stmt></block></then></if>
		}</block></then></if></block></for>
	}</block></for>
	<expr_stmt><expr><call><name>Calc</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>,<argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d "</literal></expr></argument>,<argument><expr><name><name>clo</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>,<argument><expr><name><name>clo</name><index>[<expr><name>n</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
