<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28925802_62482889.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>l</name></type></parameter>,<parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = l; i &lt;= r; ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REP</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>l</name></type></parameter>,<parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = l; i &lt; r; ++i)</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name>T</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LL</name></type> <name>N</name></decl>,<decl><type ref="prev"/><name>p</name></decl>,<decl><type ref="prev"/><name>w</name></decl>,<decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>_listModulo</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>process</name><parameter_list>()</parameter_list><block>{
	<macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>d - <literal type="number">1</literal></argument>)</argument_list></macro><block>{
		<decl_stmt><decl><type><name>LL</name></type> <name>w2</name> <init>= <expr><operator>(</operator><operator>(</operator><name>w</name> <operator>%</operator> <name>d</name><operator>)</operator> <operator>*</operator> <call>(<name>LL</name>)<argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>%</operator> <name>d</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>LL</name></type> <name>p2</name> <init>= <expr><name>p</name> <operator>%</operator> <name>d</name></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>w2</name> <operator>==</operator> <name>p2</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>_listModulo</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
	}</block>
	<comment type="line">//</comment>
	<decl_stmt><decl><type><name>double</name></type> <name>dmax</name> <init>= <expr><operator>(</operator><name>double</name><operator>)</operator><name>p</name><operator>/</operator><call><name>double</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if>if<condition>(<expr><name>dmax</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<return>return ;</return>
	}</block></then></if>
	<decl_stmt><decl><type><name>double</name></type> <name>dmin</name> <init>= <expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name>p</name> <operator>-</operator> <operator>(</operator><name>double</name><operator>)</operator><name>N</name> <operator>*</operator> <operator>(</operator><name>double</name><operator>)</operator><name>d</name><operator>)</operator><operator>/</operator><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name>w</name> <operator>-</operator> <call><name>double</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>dmin</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>dmin</name></expr></argument>,<argument><expr><operator>(</operator><name>double</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>LL</name></type> <name>vmax</name> <init>= <expr><operator>(</operator><name>LL</name><operator>)</operator><call><name>trunc</name><argument_list>(<argument><expr><name>dmax</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LL</name></type> <name>vmin</name> <init>= <expr><operator>(</operator><name>LL</name><operator>)</operator><call><name>trunc</name><argument_list>(<argument><expr><name>dmin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>vmin</name> <operator>&lt;</operator> <name>dmin</name></expr>)</condition> <block type="pseudo"><expr_stmt><expr><operator>++</operator><name>vmin</name></expr>;</expr_stmt></block></while>
<comment type="line">//	cout &lt;&lt; vmax &lt;&lt; " " &lt;&lt; vmin &lt;&lt; endl;</comment>
	<macro><name>REP</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>_listModulo.size()</argument>)</argument_list></macro><block>{
		<decl_stmt><decl><type><name>LL</name></type> <name>z</name> <init>= <expr><name><name>_listModulo</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>LL</name></type> <name>x</name> <init>= <expr><name>dmin</name><operator>/</operator><name>d</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>*</operator> <name>d</name> <operator>+</operator> <name>z</name></expr>;</expr_stmt>
		<while>while<condition>(<expr><name>x</name> <operator>&lt;</operator> <name>dmin</name></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>x</name> <operator>+=</operator> <name>d</name></expr>;</expr_stmt></block></while>
		<while>while<condition>(<expr><name>x</name> <operator>-</operator> <name>d</name> <operator>&gt;=</operator> <name>dmin</name></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>x</name> <operator>-=</operator> <name>d</name></expr>;</expr_stmt></block></while>
		<if>if<condition>(<expr><name>x</name> <operator>&lt;=</operator> <name>dmax</name></expr>)</condition><then><block>{
			<decl_stmt><decl><type><name>LL</name></type> <name>y</name> <init>= <expr><call><name>trunc</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name>p</name> <operator>-</operator> <operator>(</operator><name>double</name><operator>)</operator><name>x</name> <operator>*</operator> <operator>(</operator><name>double</name><operator>)</operator><name>w</name><operator>)</operator><operator>/</operator><operator>(</operator><name>double</name><operator>)</operator><name>d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>x</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name>y</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name>N</name> <operator>-</operator> <name>x</name> <operator>-</operator> <name>y</name></expr>;</expr_stmt>
			<comment type="line">//cout &lt;&lt; endl &lt;&lt; " " &lt;&lt; x * w + y * d;</comment>
			<return>return ;</return>
		}</block></then></if>
	}</block>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>N</name> <operator>&gt;&gt;</operator> <name>p</name> <operator>&gt;&gt;</operator> <name>w</name> <operator>&gt;&gt;</operator> <name>d</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>process</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
