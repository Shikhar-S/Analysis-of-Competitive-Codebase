<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28898759_62484572.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>k</name></decl>,<decl><type ref="prev"/><name><name>a</name><index>[<expr><literal type="number">100009</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>minidx</name></decl>,<decl><type ref="prev"/><name>maxidx</name></decl>,<decl><type ref="prev"/><name>mincnt</name></decl>,<decl><type ref="prev"/><name>maxcnt</name></decl>,<decl><type ref="prev"/><name>minv</name></decl>,<decl><type ref="prev"/><name>maxv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>tored</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>a</name><operator>+</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>minidx</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>maxidx</name><operator>=</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>minv</name><operator>=</operator><name><name>a</name><index>[<expr><name>minidx</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>maxv</name><operator>=</operator><name><name>a</name><index>[<expr><name>maxidx</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>mincnt</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>maxcnt</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>minidx</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name><name>a</name><index>[<expr><name>minidx</name></expr>]</index></name></expr>)</condition><then><block>{
            <expr_stmt><expr><name>mincnt</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>minidx</name><operator>++</operator></expr>;</expr_stmt>
        }</block></then>
        <else>else <block type="pseudo"><break>break;</break></block></else></if>
    }</block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>maxidx</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition><incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block>{
        <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name><name>a</name><index>[<expr><name>maxidx</name></expr>]</index></name></expr>)</condition><then><block>{
            <expr_stmt><expr><name>maxcnt</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>maxidx</name><operator>--</operator></expr>;</expr_stmt>
        }</block></then>
        <else>else <block type="pseudo"><break>break;</break></block></else></if>
    }</block></for>
    <while>while<condition>(<expr><name>k</name><operator>&gt;</operator><literal type="number">0</literal><operator>&amp;&amp;</operator><name>minv</name><operator>!=</operator><name>maxv</name></expr>)</condition><block>{
        <decl_stmt><decl><type><name>bool</name></type> <name>allused</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>mincnt</name><operator>&gt;</operator><name>maxcnt</name></expr>)</condition><then><block>{
            <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>tored</name><init>=<expr><name><name>a</name><index>[<expr><name>maxidx</name></expr>]</index></name><operator>-</operator><name><name>a</name><index>[<expr><name>maxidx</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>canch</name><init>=<expr><call><name>min</name><argument_list>(<argument><expr><name>k</name><operator>/</operator><name>maxcnt</name></expr></argument>,<argument><expr><name>tored</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>a</name><index>[<expr><name>maxidx</name></expr>]</index></name><operator>-=</operator><name>canch</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>maxv</name><operator>=</operator><name><name>a</name><index>[<expr><name>maxidx</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>k</name><operator>-=</operator><name>canch</name><operator>*</operator><name>maxcnt</name></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>tored</name><operator>&gt;</operator><name>canch</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>allused</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
        }</block></then>
        <else>else<block>{
            <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>tored</name><init>=<expr><name><name>a</name><index>[<expr><name>minidx</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>a</name><index>[<expr><name>minidx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>canch</name><init>=<expr><call><name>min</name><argument_list>(<argument><expr><name>k</name><operator>/</operator><name>mincnt</name></expr></argument>,<argument><expr><name>tored</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>a</name><index>[<expr><name>minidx</name></expr>]</index></name><operator>+=</operator><name>canch</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>minv</name><operator>=</operator><name><name>a</name><index>[<expr><name>minidx</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>k</name><operator>-=</operator><name>canch</name><operator>*</operator><name>mincnt</name></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>tored</name><operator>&gt;</operator><name>canch</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>allused</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
        }</block></else></if>
        <if>if<condition>(<expr><name>allused</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
        <comment type="line">//</comment>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>minidx</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
            <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name><name>a</name><index>[<expr><name>minidx</name></expr>]</index></name></expr>)</condition><then><block>{
                <expr_stmt><expr><name>mincnt</name><operator>++</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>minidx</name><operator>++</operator></expr>;</expr_stmt>
            }</block></then>
            <else>else <block type="pseudo"><break>break;</break></block></else></if>
        }</block></for>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>maxidx</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition><incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block>{
            <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name><name>a</name><index>[<expr><name>maxidx</name></expr>]</index></name></expr>)</condition><then><block>{
                <expr_stmt><expr><name>maxcnt</name><operator>++</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>maxidx</name><operator>--</operator></expr>;</expr_stmt>
            }</block></then>
            <else>else <block type="pseudo"><break>break;</break></block></else></if>
        }</block></for>
    }</block></while>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>,<argument><expr><name>maxv</name><operator>-</operator><name>minv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
