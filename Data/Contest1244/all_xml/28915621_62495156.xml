<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28915621_62495156.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<struct>struct <name>pp</name> <block>{<public type="default">
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>val</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>count</name></decl>;</decl_stmt>
</public>}</block>;</struct>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>iostream</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>k</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>a</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>long</name> <name>long</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>a</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>a</name> <operator>+</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt; <argument><expr><name>pp</name></expr></argument> &gt;</argument_list></name></type> <name>d</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pp</name></type> <name>ed</name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>ed</name><operator>.</operator><name>val</name></name> <operator>=</operator> <name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr><operator>,</operator> <expr><name><name>ed</name><operator>.</operator><name>count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>ed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>long</name> <name>long</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<if>if <condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>a</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name><name>d</name><index>[<expr><call><name><name>d</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>count</name><operator>++</operator></expr>;</expr_stmt></block></then>
		<else>else <block>{
			<expr_stmt><expr><name><name>ed</name><operator>.</operator><name>val</name></name> <operator>=</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>ed</name><operator>.</operator><name>count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>ed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
	}</block></for>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>bot</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>top</name> <init>= <expr><call><name><name>d</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt> 
	<while>while <condition>(<expr><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{
		<if>if <condition>(<expr><name>bot</name> <operator>==</operator> <name>top</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"0"</literal></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		}</block></then></if>
		<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>first</name> <init>= <expr><name><name>d</name><index>[<expr><name>bot</name></expr>]</index></name><operator>.</operator><name>count</name> <operator>*</operator> <operator>(</operator><name><name>d</name><index>[<expr><name>bot</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>val</name> <operator>-</operator> <name><name>d</name><index>[<expr><name>bot</name></expr>]</index></name><operator>.</operator><name>val</name><operator>)</operator></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>second</name> <init>= <expr><name><name>d</name><index>[<expr><name>top</name></expr>]</index></name><operator>.</operator><name>count</name> <operator>*</operator> <operator>(</operator><name><name>d</name><index>[<expr><name>top</name></expr>]</index></name><operator>.</operator><name>val</name> <operator>-</operator> <name><name>d</name><index>[<expr><name>top</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>val</name><operator>)</operator></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name><name>d</name><index>[<expr><name>bot</name></expr>]</index></name><operator>.</operator><name>count</name> <operator>&lt;=</operator> <name><name>d</name><index>[<expr><name>top</name></expr>]</index></name><operator>.</operator><name>count</name></expr>)</condition><then> <block>{ <comment type="line">//move up</comment>
			<if>if <condition>(<expr><name>first</name> <operator>&lt;=</operator> <name>k</name></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>bot</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>d</name><index>[<expr><name>bot</name></expr>]</index></name><operator>.</operator><name>count</name> <operator>+=</operator> <name><name>d</name><index>[<expr><name>bot</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>count</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>k</name> <operator>-=</operator> <name>first</name></expr>;</expr_stmt>
				<continue>continue;</continue>
			}</block></then></if>
			<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>c</name> <init>= <expr><name>k</name> <operator>/</operator> <name><name>d</name><index>[<expr><name>bot</name></expr>]</index></name><operator>.</operator><name>count</name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>(</operator><name><name>d</name><index>[<expr><name>top</name></expr>]</index></name><operator>.</operator><name>val</name> <operator>-</operator> <name><name>d</name><index>[<expr><name>bot</name></expr>]</index></name><operator>.</operator><name>val</name> <operator>-</operator> <name>c</name><operator>)</operator><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		}</block></then> <else>else <block>{ <comment type="line">//move down</comment>
			<if>if <condition>(<expr><name>second</name> <operator>&lt;=</operator> <name>k</name></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>top</name><operator>--</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>d</name><index>[<expr><name>top</name></expr>]</index></name><operator>.</operator><name>count</name> <operator>+=</operator> <name><name>d</name><index>[<expr><name>top</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>count</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>k</name> <operator>-=</operator> <name>second</name></expr>;</expr_stmt>
				<continue>continue;</continue>
			}</block></then></if>
			<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>c</name> <init>= <expr><name>k</name> <operator>/</operator> <name><name>d</name><index>[<expr><name>top</name></expr>]</index></name><operator>.</operator><name>count</name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>(</operator><name><name>d</name><index>[<expr><name>top</name></expr>]</index></name><operator>.</operator><name>val</name> <operator>-</operator> <name><name>d</name><index>[<expr><name>bot</name></expr>]</index></name><operator>.</operator><name>val</name> <operator>-</operator> <name>c</name><operator>)</operator><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		}</block></else></if>
	}</block></while>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>d</name><index>[<expr><name>top</name></expr>]</index></name><operator>.</operator><name>val</name><operator>-</operator><name><name>d</name><index>[<expr><name>bot</name></expr>]</index></name><operator>.</operator><name>val</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
}</block></function></unit>
