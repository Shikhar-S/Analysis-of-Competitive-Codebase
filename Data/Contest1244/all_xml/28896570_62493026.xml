<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28896570_62493026.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>long</name> <name>long</name> <name>int</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>vl</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vi</name></expr></argument>&gt;</argument_list></name></type> <name>vvi</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vl</name></expr></argument>&gt;</argument_list></name></type> <name>vvl</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>&gt;</argument_list></name></type><name>vst</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>pll</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pii</name></expr></argument>&gt;</argument_list></name></type> <name>vii</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pll</name></expr></argument>&gt;</argument_list></name></type> <name>vll</name>;</typedef>
<typedef>typedef <type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>dct</name>;</typedef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fastio</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(false);cin.tie(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>ct</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ct.begin() , ct.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>"\n"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fr</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(auto i:a)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=a;i&lt;b;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fd</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=a;i&gt;=b;i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>in</name><parameter_list>(<parameter><type><name>d</name></type></parameter>,<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>d.find(v)!=d.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>

<function><type><name>bool</name></type> <name>compare</name><parameter_list>(<parameter><decl><type><name>pll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>pll</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{   <return>return <expr><operator>(</operator><name><name>a</name><operator>.</operator><name>first</name></name><operator>*</operator><name><name>b</name><operator>.</operator><name>second</name></name><operator>)</operator> <operator>&lt;</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>second</name></name><operator>*</operator><name><name>b</name><operator>.</operator><name>first</name></name><operator>)</operator></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mod</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>inf</name> <init>= <expr><call><name>ll</name><argument_list>(<argument><expr><literal type="number">1e18</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vi</name></type> <name><name>g</name><index>[<expr><literal type="number">100000</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vvi</name></type> <name>c</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><call><name>vi</name><argument_list>(<argument><expr><literal type="number">100000</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vi</name></type> <name>color</name><argument_list>(<argument><expr><literal type="number">100000</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>)</parameter_list><block>{
    <macro><name>fr</name><argument_list>(<argument>i</argument>,<argument>g[s]</argument>)</argument_list></macro><block>{
        <if>if<condition>(<expr><name>i</name><operator>!=</operator><name>p</name></expr>)</condition><then><block>{
            <expr_stmt><expr><name><name>color</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>color</name><index>[<expr><name>s</name></expr>]</index></name><operator>%</operator><literal type="number">3</literal><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block>
}</block></function>
<decl_stmt><decl><type><name>vi</name></type> <name>ed</name><argument_list>(<argument><expr><literal type="number">100000</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <comment type="line">//clock_t tm = clock();</comment>
    <expr_stmt><expr><name>fastio</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt><decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
    <macro><name>f</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument><literal type="number">4</literal></argument>)</argument_list></macro><macro><name>f</name><argument_list>(<argument>j</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
    <macro><name>f</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n-<literal type="number">1</literal></argument>)</argument_list></macro><block>{
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>x</name><operator>&gt;&gt;</operator><name>y</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>g</name><index>[<expr><name>x</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>y</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name><name>g</name><index>[<expr><name>y</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>x</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name><name>ed</name><index>[<expr><name>x</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt><expr_stmt><expr><name><name>ed</name><index>[<expr><name>y</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
    }</block>
    <decl_stmt><decl><type><name>int</name></type> <name>source</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <macro><name>f</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro><block>{
        <if>if<condition>(<expr><name><name>ed</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>source</name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></then></if>
        <if>if<condition>(<expr><name><name>ed</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;</operator><literal type="number">2</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>-</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        }</block></then></if>
    }</block>
    <expr_stmt><expr><name><name>color</name><index>[<expr><name>source</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>source</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>s</name><operator>=</operator><literal type="string">"123"</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <macro><name>f</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro><block>{<expr_stmt><expr><name>ans</name> <operator>+=</operator> <name><name>c</name><index>[<expr><name><name>color</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    }</block>
    <decl_stmt><decl><type><name>ll</name></type> <name>tmp</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <macro><name>f</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro><block>{
        <if>if<condition>(<expr><name><name>color</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name>tmp</name> <operator>+=</operator> <name><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></then></if>
        <if>if<condition>(<expr><name><name>color</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">3</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name>tmp</name> <operator>+=</operator> <name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></then></if>
        <if>if<condition>(<expr><name><name>color</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name>tmp</name> <operator>+=</operator> <name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></then></if>
    }</block>
    <if>if<condition>(<expr><name>tmp</name><operator>&lt;</operator><name>ans</name></expr>)</condition><then><block>{
        <expr_stmt><expr><name>ans</name><operator>=</operator><name>tmp</name></expr>;</expr_stmt><expr_stmt><expr><name>s</name><operator>=</operator><literal type="string">"132"</literal></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><name>tmp</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
    <macro><name>f</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro><block>{
        <if>if<condition>(<expr><name><name>color</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name>tmp</name> <operator>+=</operator> <name><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></then></if>
        <if>if<condition>(<expr><name><name>color</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">3</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name>tmp</name> <operator>+=</operator> <name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></then></if>
        <if>if<condition>(<expr><name><name>color</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name>tmp</name> <operator>+=</operator> <name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></then></if>
    }</block>
    <if>if<condition>(<expr><name>tmp</name><operator>&lt;</operator><name>ans</name></expr>)</condition><then><block>{
        <expr_stmt><expr><name>ans</name><operator>=</operator><name>tmp</name></expr>;</expr_stmt><expr_stmt><expr><name>s</name><operator>=</operator><literal type="string">"231"</literal></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><name>tmp</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
    <macro><name>f</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro><block>{
        <if>if<condition>(<expr><name><name>color</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name>tmp</name> <operator>+=</operator> <name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></then></if>
        <if>if<condition>(<expr><name><name>color</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">3</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name>tmp</name> <operator>+=</operator> <name><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></then></if>
        <if>if<condition>(<expr><name><name>color</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name>tmp</name> <operator>+=</operator> <name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></then></if>
    }</block>
    <if>if<condition>(<expr><name>tmp</name><operator>&lt;</operator><name>ans</name></expr>)</condition><then><block>{
        <expr_stmt><expr><name>ans</name><operator>=</operator><name>tmp</name></expr>;</expr_stmt><expr_stmt><expr><name>s</name><operator>=</operator><literal type="string">"213"</literal></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><name>tmp</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
    <macro><name>f</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro><block>{
        <if>if<condition>(<expr><name><name>color</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name>tmp</name> <operator>+=</operator> <name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></then></if>
        <if>if<condition>(<expr><name><name>color</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">3</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name>tmp</name> <operator>+=</operator> <name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></then></if>
        <if>if<condition>(<expr><name><name>color</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name>tmp</name> <operator>+=</operator> <name><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></then></if>
    }</block>
    <if>if<condition>(<expr><name>tmp</name><operator>&lt;</operator><name>ans</name></expr>)</condition><then><block>{
        <expr_stmt><expr><name>ans</name><operator>=</operator><name>tmp</name></expr>;</expr_stmt><expr_stmt><expr><name>s</name><operator>=</operator><literal type="string">"312"</literal></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><name>tmp</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
    <macro><name>f</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro><block>{
        <if>if<condition>(<expr><name><name>color</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name>tmp</name> <operator>+=</operator> <name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></then></if>
        <if>if<condition>(<expr><name><name>color</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">3</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name>tmp</name> <operator>+=</operator> <name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></then></if>
        <if>if<condition>(<expr><name><name>color</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name>tmp</name> <operator>+=</operator> <name><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></then></if>
    }</block>
    <if>if<condition>(<expr><name>tmp</name><operator>&lt;</operator><name>ans</name></expr>)</condition><then><block>{
        <expr_stmt><expr><name>ans</name><operator>=</operator><name>tmp</name></expr>;</expr_stmt><expr_stmt><expr><name>s</name><operator>=</operator><literal type="string">"321"</literal></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    <macro><name>f</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro><block>{
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>s</name><index>[<expr><name><name>color</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="string">" "</literal></expr>;</expr_stmt>
    }</block>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    <comment type="line">//cout&lt;&lt;((clock()-tm)*1.0)/CLOCKS_PER_SEC&lt;&lt;endl;</comment>
}</block></function></unit>
