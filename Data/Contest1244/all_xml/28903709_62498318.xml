<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28903709_62498318.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>z</name></decl>;</decl_stmt>
<function><type><name>long</name> <name>long</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
	<while>while<condition>(<expr><name>b</name></expr>)</condition><block>{<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>c</name><init>=<expr><name>b</name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><name>b</name><operator>=</operator><name>a</name><operator>%</operator><name>b</name></expr>;</expr_stmt> <expr_stmt><expr><name>a</name><operator>=</operator><name>c</name></expr>;</expr_stmt>}</block></while>
	<return>return <expr><name>a</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name> <parameter_list>()</parameter_list><block>{
<expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>p</name> <operator>&gt;&gt;</operator> <name>w</name> <operator>&gt;&gt;</operator> <name>d</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>provjera</name><init>=<expr><call><name>gcd</name><argument_list>(<argument><expr><name>w</name></expr></argument>,<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>p</name><operator>%</operator><name>provjera</name></expr>)</condition><then><block>{<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"-1"</literal></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return>}</block></then></if>
<expr_stmt><expr><name>p</name><operator>/=</operator><name>provjera</name></expr>;</expr_stmt> <expr_stmt><expr><name>w</name><operator>/=</operator><name>provjera</name></expr>;</expr_stmt> <expr_stmt><expr><name>d</name><operator>/=</operator><name>provjera</name></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>d</name> <operator>and</operator> <operator>(</operator><name>p</name><operator>-</operator><name>i</name><operator>*</operator><name>w</name><operator>)</operator><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
	<if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><name>p</name><operator>-</operator><name>i</name><operator>*</operator><name>w</name><operator>)</operator><operator>%</operator><name>d</name><operator>)</operator></expr>)</condition><then><block>{
		<expr_stmt><expr><name>x</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><name>p</name><operator>-</operator><name>i</name><operator>*</operator><name>w</name><operator>)</operator><operator>/</operator><name>d</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>z</name> <operator>=</operator> <name>n</name><operator>-</operator><name>x</name><operator>-</operator><name>y</name></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>z</name><operator>&gt;=</operator><literal type="number">0</literal></expr>)</condition><then><block>{<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>x</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name>y</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name>z</name></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return>}</block></then></if>
		<decl_stmt><decl><type><name>int</name></type> <name>korekcija</name> <init>= <expr><operator>(</operator><operator>-</operator><name>z</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>w</name><operator>-</operator><name>d</name><operator>)</operator></expr></init></decl>;</decl_stmt> <if>if <condition>(<expr><operator>(</operator><operator>-</operator><name>z</name><operator>)</operator><operator>%</operator><operator>(</operator><name>w</name><operator>-</operator><name>d</name><operator>)</operator></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>korekcija</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
		<expr_stmt><expr><name>z</name> <operator>=</operator> <name>z</name> <operator>+</operator> <operator>(</operator><name>w</name><operator>-</operator><name>d</name><operator>)</operator><operator>*</operator><name>korekcija</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>+</operator> <name>d</name><operator>*</operator><name>korekcija</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>y</name> <operator>=</operator> <name>y</name> <operator>-</operator> <name>w</name><operator>*</operator><name>korekcija</name></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>x</name><operator>&gt;=</operator><literal type="number">0</literal> <operator>and</operator> <name>y</name><operator>&gt;=</operator><literal type="number">0</literal> <operator>and</operator> <name>z</name><operator>&gt;=</operator><literal type="number">0</literal></expr>)</condition><then><block>{<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>x</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name>y</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name>z</name></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return>}</block></then>
		<else>else <block>{<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"-1"</literal></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return>}</block></else></if>
	}</block></then></if>
}</block></for>
<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"-1"</literal></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

</unit>
