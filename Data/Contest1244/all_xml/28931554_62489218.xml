<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28931554_62489218.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<namespace>namespace <name>Dango</name>
<block>{
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAXN</name><init>=<expr><literal type="number">100005</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name><name>num</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>ans</name></decl>;</decl_stmt>
	<function><type><name>int</name></type> <name>work</name><parameter_list>()</parameter_list>
	<block>{
		<expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>k</name></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block type="pseudo"><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>num</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
		<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>num</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>num</name><operator>+</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>j</name><init>=<expr><name>n</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>ans</name><operator>=</operator><name><name>num</name><index>[<expr><name>n</name></expr>]</index></name><operator>-</operator><name><name>num</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		<while>while<condition>(<expr><name>k</name><operator>&amp;&amp;</operator><name>i</name><operator>&lt;</operator><name>j</name></expr>)</condition>
		<block>{
			<decl_stmt><decl><type><name>int</name></type> <name>x</name><init>=<expr><name>i</name></expr></init></decl>,<decl><type ref="prev"/><name>y</name><init>=<expr><name>n</name><operator>-</operator><name>j</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
			<if>if<condition>(<expr><name>x</name><operator>&lt;</operator><name>y</name></expr>)</condition><then>
			<block>{
				<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>tmp</name><init>=<expr><name><name>num</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>num</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>,<decl><type ref="prev"/><name>cnt</name><init>=<expr><call><name>min</name><argument_list>(<argument><expr><name>k</name></expr></argument>,<argument><expr><name>tmp</name><operator>*</operator><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name>k</name><operator>-=</operator><name>cnt</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>ans</name><operator>-=</operator><name>cnt</name><operator>/</operator><name>x</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
			}</block></then>
			<else>else
			<block>{
				<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>tmp</name><init>=<expr><name><name>num</name><index>[<expr><name>j</name></expr>]</index></name><operator>-</operator><name><name>num</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>,<decl><type ref="prev"/><name>cnt</name><init>=<expr><call><name>min</name><argument_list>(<argument><expr><name>k</name></expr></argument>,<argument><expr><name>tmp</name><operator>*</operator><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name>k</name><operator>-=</operator><name>cnt</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>ans</name><operator>-=</operator><name>cnt</name><operator>/</operator><name>y</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>j</name><operator>--</operator></expr>;</expr_stmt>
			}</block></else></if>
		}</block></while>
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></function>
}</block></namespace>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<return>return <expr><call><name><name>Dango</name><operator>::</operator><name>work</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></function></unit>
