<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28912022_62490325.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">100005</literal></expr></init></decl>;</decl_stmt>
<using>using <name>ll</name> <init>= <type><name>long</name> <name>long</name></type></init>;</using>
<using>using <name>pii</name> <init>= <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt><decl_stmt><decl><type><name>ll</name></type> <name>kk</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pii</name></type> <name><name>a</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt><decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>mp</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name> <parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>kk</name></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>tmp</name></decl>;</decl_stmt><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>tmp</name></expr>;</expr_stmt><expr_stmt><expr><operator>++</operator><name><name>mp</name><index>[<expr><name>tmp</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>i</name> <operator>:</operator> <name>mp</name></expr></init>)</control> <block type="pseudo"><expr_stmt><expr><name><name>a</name><index>[<expr><operator>++</operator><name>r</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>lc</name> <init>= <expr><name><name>a</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>second</name></expr></init></decl>,<decl><type ref="prev"/><name>rc</name> <init>= <expr><name><name>a</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><name>second</name></expr></init></decl>,
            <decl><type ref="prev"/><name>lnum</name> <init>= <expr><name><name>a</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>first</name></expr></init></decl>,<decl><type ref="prev"/><name>rnum</name> <init>= <expr><name><name>a</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><name>first</name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>l</name> <operator>!=</operator> <name>r</name> <operator>&amp;&amp;</operator> <name>kk</name></expr>)</condition>
    <block>{
        <if>if <condition>(<expr><name>lc</name> <operator>&lt;</operator> <name>rc</name></expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name>ll</name></type> <name>tmp</name> <init>= <expr><name>kk</name> <operator>/</operator> <name>lc</name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name><name>a</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>+</operator> <name>tmp</name> <operator>&gt;=</operator> <name><name>a</name><index>[<expr><name>l</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>first</name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>a</name><index>[<expr><name>l</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>first</name> <operator>-</operator> <name><name>a</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>first</name></expr>;</expr_stmt><expr_stmt><expr><name>kk</name> <operator>-=</operator> <name>tmp</name> <operator>*</operator> <name>lc</name></expr>;</expr_stmt>
                <expr_stmt><expr><operator>++</operator><name>l</name></expr>;</expr_stmt><expr_stmt><expr><name>lc</name> <operator>+=</operator> <name><name>a</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>second</name></expr>;</expr_stmt><expr_stmt><expr><name>lnum</name> <operator>=</operator> <name><name>a</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>first</name></expr>;</expr_stmt>
            }</block></then>
            <else>else
            <block>{
                <expr_stmt><expr><name>lnum</name> <operator>+=</operator> <name>tmp</name></expr>;</expr_stmt><break>break;</break>
            }</block></else></if>
        }</block></then>
        <else>else
        <block>{
            <decl_stmt><decl><type><name>ll</name></type> <name>tmp</name> <init>= <expr><name>kk</name> <operator>/</operator> <name>rc</name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name><name>a</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>-</operator> <name>tmp</name> <operator>&lt;=</operator> <name><name>a</name><index>[<expr><name>r</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>first</name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>a</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>-</operator> <name><name>a</name><index>[<expr><name>r</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>first</name></expr>;</expr_stmt><expr_stmt><expr><name>kk</name> <operator>-=</operator> <name>tmp</name> <operator>*</operator> <name>rc</name></expr>;</expr_stmt>
                <expr_stmt><expr><operator>--</operator><name>r</name></expr>;</expr_stmt><expr_stmt><expr><name>rc</name> <operator>+=</operator> <name><name>a</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><name>second</name></expr>;</expr_stmt><expr_stmt><expr><name>rnum</name> <operator>=</operator> <name><name>a</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><name>first</name></expr>;</expr_stmt>
            }</block></then>
            <else>else
            <block>{
                <expr_stmt><expr><name>rnum</name> <operator>-=</operator> <name>tmp</name></expr>;</expr_stmt><break>break;</break>
            }</block></else></if>
        }</block></else></if>
    }</block></while>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>rnum</name> <operator>-</operator> <name>lnum</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
