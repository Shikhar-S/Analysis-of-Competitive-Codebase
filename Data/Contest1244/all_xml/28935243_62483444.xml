<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28935243_62483444.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ri</name></cpp:macro> <cpp:value>register int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>rlen</name><init>=<expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">18</literal><operator>|</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>rlen</name></expr>]</index></name></decl>,<modifier>*</modifier><decl><type ref="prev"/><name>ib</name><init>=<expr><name>buf</name></expr></init></decl>,<modifier>*</modifier><decl><type ref="prev"/><name>ob</name><init>=<expr><name>buf</name></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gc</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)</cpp:value></cpp:define>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>poly</name>;</typedef>
<function><specifier>inline</specifier> <type><name>int</name></type> <name>read</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>int</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name>ch</name><init>=<expr><call><name>gc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>ch</name><operator>=</operator><call><name>gc</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
	<while>while<condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>ans</name><operator>=</operator><operator>(</operator><operator>(</operator><name>ans</name><operator>&lt;&lt;</operator><literal type="number">2</literal><operator>)</operator><operator>+</operator><name>ans</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><operator>(</operator><name>ch</name><operator>^</operator><literal type="number">48</literal><operator>)</operator></expr><operator>,</operator><expr><name>ch</name><operator>=</operator><call><name>gc</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
	<return>return <expr><name>ans</name></expr>;</return>
}</block></function>
<function><specifier>inline</specifier> <type><name>ll</name></type> <name>readl</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>ll</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name>ch</name><init>=<expr><call><name>gc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>ch</name><operator>=</operator><call><name>gc</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
	<while>while<condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>ans</name><operator>=</operator><operator>(</operator><operator>(</operator><name>ans</name><operator>&lt;&lt;</operator><literal type="number">2</literal><operator>)</operator><operator>+</operator><name>ans</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><operator>(</operator><name>ch</name><operator>^</operator><literal type="number">48</literal><operator>)</operator></expr><operator>,</operator><expr><name>ch</name><operator>=</operator><call><name>gc</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
	<return>return <expr><name>ans</name></expr>;</return>
}</block></function>
<function><specifier>inline</specifier> <type><name>int</name></type> <name>Read</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list><block>{
	<decl_stmt><decl><type><name>int</name></type> <name>top</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name>ch</name><init>=<expr><call><name>gc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>ch</name><operator>=</operator><call><name>gc</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
	<while>while<condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><expr_stmt><expr><name><name>s</name><index>[<expr><operator>++</operator><name>top</name></expr>]</index></name><operator>=</operator><name>ch</name></expr><operator>,</operator><expr><name>ch</name><operator>=</operator><call><name>gc</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
	<return>return <expr><name>top</name></expr>;</return>
}</block></function>
<namespace>namespace <name>modular</name><block>{
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mod</name><init>=<expr><literal type="number">998244353</literal></expr></init></decl>;</decl_stmt>
	<function><specifier>inline</specifier> <type><name>int</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<return>return <expr><ternary><condition><expr><operator>(</operator><name>a</name><operator>+=</operator><name>b</name><operator>)</operator><operator>&lt;</operator><name>mod</name></expr>?</condition><then><expr><name>a</name></expr></then><else>:<expr><name>a</name><operator>-</operator><name>mod</name></expr></else></ternary></expr>;</return>}</block></function>
	<function><specifier>inline</specifier> <type><name>void</name></type> <name>Add</name><parameter_list>(<parameter><decl><type><name>int</name><modifier>&amp;</modifier></type><name>a</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name>a</name><operator>=</operator><call><name>add</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function>
	<function><specifier>inline</specifier> <type><name>int</name></type> <name>dec</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<return>return <expr><ternary><condition><expr><operator>(</operator><name>a</name><operator>-=</operator><name>b</name><operator>)</operator><operator>&lt;</operator><literal type="number">0</literal></expr>?</condition><then><expr><name>a</name><operator>+</operator><name>mod</name></expr></then><else>:<expr><name>a</name></expr></else></ternary></expr>;</return>}</block></function>
	<function><specifier>inline</specifier> <type><name>void</name></type> <name>Dec</name><parameter_list>(<parameter><decl><type><name>int</name><modifier>&amp;</modifier></type><name>a</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name>a</name><operator>=</operator><call><name>dec</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function>
	<function><specifier>inline</specifier> <type><name>int</name></type> <name>mul</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<return>return <expr><operator>(</operator><name>ll</name><operator>)</operator><name>a</name><operator>*</operator><name>b</name><operator>%</operator><name>mod</name></expr>;</return>}</block></function>
	<function><specifier>inline</specifier> <type><name>void</name></type> <name>Mul</name><parameter_list>(<parameter><decl><type><name>int</name><modifier>&amp;</modifier></type><name>a</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name>a</name><operator>=</operator><operator>(</operator><name>ll</name><operator>)</operator><name>a</name><operator>*</operator><name>b</name><operator>%</operator><name>mod</name></expr>;</expr_stmt>}</block></function>
	<function><specifier>inline</specifier> <type><name>int</name></type> <name>ksm</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name>int</name></type> <name>ret</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt><for>for<control>(<init>;</init><condition><expr><name>p</name></expr>;</condition><incr><expr><name>p</name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr><operator>,</operator><expr><call><name>Mul</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><operator>(</operator><name>p</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>&amp;&amp;</operator><operator>(</operator><call><name>Mul</name><argument_list>(<argument><expr><name>ret</name></expr></argument>,<argument><expr><name>a</name></expr></argument>)</argument_list></call><operator>,</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block></for><return>return <expr><name>ret</name></expr>;</return>}</block></function>
}</block></namespace>
<using>using <namespace>namespace <name>modular</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name><init>=<expr><literal type="number">100005</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name><name>a</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>b</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name>sig</name></decl>,<decl><type ref="prev"/><name><name>pre</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>suf</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>Pre</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>Suf</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>pvl</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>svl</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>K</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ldxcaicai</name></cpp:ifdef>
	<expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"lx.in"</literal></expr></argument>,<argument><expr><literal type="string">"r"</literal></expr></argument>,<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name>n</name><operator>=</operator><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>K</name><operator>=</operator><call><name>readl</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>ri</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>a</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>a</name><operator>+</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>sig</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>ri</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
		<if>if<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name><name>a</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name><name>a</name><index>[<expr><operator>++</operator><name>sig</name></expr>]</index></name><operator>=</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr><operator>,</operator><expr><name><name>b</name><index>[<expr><name>sig</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><operator>++</operator><name><name>b</name><index>[<expr><name>sig</name></expr>]</index></name></expr>;</expr_stmt></block></else></if>
	}</block></for>
	<for>for<control>(<init><decl><type><name>ri</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>sig</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name><name>pre</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>pre</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr><operator>,</operator><expr><name><name>Pre</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>Pre</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><operator>(</operator><name>ll</name><operator>)</operator><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr><operator>,</operator><expr><name><name>pvl</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>ll</name><operator>)</operator><name><name>pre</name><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>Pre</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>ri</name></type> <name>i</name><init>=<expr><name>sig</name></expr></init></decl>;</init><condition><expr><name>i</name></expr>;</condition><incr><expr><operator>--</operator><name>i</name></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name><name>suf</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>suf</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr><operator>,</operator><expr><name><name>Suf</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>Suf</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><operator>(</operator><name>ll</name><operator>)</operator><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr><operator>,</operator><expr><name><name>svl</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>ll</name><operator>)</operator><name><name>Suf</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><operator>(</operator><name>ll</name><operator>)</operator><name><name>suf</name><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
	<decl_stmt><decl><type><name>ll</name></type> <name>res</name><init>=<expr><name><name>a</name><index>[<expr><name>sig</name></expr>]</index></name><operator>-</operator><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>ri</name></type> <name>ps1</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>ps2</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>ps1</name><operator>&lt;=</operator><name>sig</name></expr>;</condition><incr><expr><operator>++</operator><name>ps1</name></expr></incr>)</control><block>{
		<while>while<condition>(<expr><name>ps2</name><operator>&lt;=</operator><name>sig</name><operator>&amp;&amp;</operator><name><name>pvl</name><index>[<expr><name>ps1</name></expr>]</index></name><operator>+</operator><name><name>svl</name><index>[<expr><name>ps2</name></expr>]</index></name><operator>&gt;</operator><name>K</name></expr>)</condition><block type="pseudo"><expr_stmt><expr><operator>++</operator><name>ps2</name></expr>;</expr_stmt></block></while>
		<if>if<condition>(<expr><name>ps2</name><operator>&gt;</operator><name>sig</name></expr>)</condition><then><block type="pseudo"><break>break;</break></block></then></if>
		<if>if<condition>(<expr><name>ps1</name><operator>&gt;=</operator><name>ps2</name></expr>)</condition><then><block type="pseudo"><return>return <expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><literal type="number">0</literal></expr>;</return></block></then></if>
		<expr_stmt><expr><name>res</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>res</name></expr></argument>,<argument><expr><name><name>a</name><index>[<expr><name>ps2</name></expr>]</index></name><operator>-</operator><name><name>a</name><index>[<expr><name>ps1</name></expr>]</index></name><operator>-</operator><operator>(</operator><name>K</name><operator>-</operator><name><name>pvl</name><index>[<expr><name>ps1</name></expr>]</index></name><operator>-</operator><name><name>svl</name><index>[<expr><name>ps2</name></expr>]</index></name><operator>)</operator><operator>/</operator><name><name>suf</name><index>[<expr><name>ps2</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<for>for<control>(<init><decl><type><name>ri</name></type> <name>ps1</name><init>=<expr><name>sig</name></expr></init></decl>,<decl><type ref="prev"/><name>ps2</name><init>=<expr><name>sig</name></expr></init></decl>;</init><condition><expr><name>ps2</name></expr>;</condition><incr><expr><operator>--</operator><name>ps2</name></expr></incr>)</control><block>{
		<while>while<condition>(<expr><name>ps1</name><operator>&amp;&amp;</operator><name><name>pvl</name><index>[<expr><name>ps1</name></expr>]</index></name><operator>+</operator><name><name>svl</name><index>[<expr><name>ps2</name></expr>]</index></name><operator>&gt;</operator><name>K</name></expr>)</condition><block type="pseudo"><expr_stmt><expr><operator>--</operator><name>ps1</name></expr>;</expr_stmt></block></while>
		<if>if<condition>(<expr><operator>!</operator><name>ps1</name></expr>)</condition><then><block type="pseudo"><break>break;</break></block></then></if>
		<if>if<condition>(<expr><name>ps1</name><operator>&gt;=</operator><name>ps2</name></expr>)</condition><then><block type="pseudo"><return>return <expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><literal type="number">0</literal></expr>;</return></block></then></if>
		<expr_stmt><expr><name>res</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>res</name></expr></argument>,<argument><expr><name><name>a</name><index>[<expr><name>ps2</name></expr>]</index></name><operator>-</operator><name><name>a</name><index>[<expr><name>ps1</name></expr>]</index></name><operator>-</operator><operator>(</operator><name>K</name><operator>-</operator><name><name>pvl</name><index>[<expr><name>ps1</name></expr>]</index></name><operator>-</operator><name><name>svl</name><index>[<expr><name>ps2</name></expr>]</index></name><operator>)</operator><operator>/</operator><name><name>pre</name><index>[<expr><name>ps1</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for> 
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>res</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
