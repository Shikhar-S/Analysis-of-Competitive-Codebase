<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28933271_62490718.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<decl_stmt><decl><type><name>ll</name></type> <name>leaf</name></decl>,<decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>ar</name><index>[<expr><literal type="number">100002</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>br</name><index>[<expr><literal type="number">100002</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>cr</name><index>[<expr><literal type="number">100002</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>col</name><index>[<expr><literal type="number">100002</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>col1</name><index>[<expr><literal type="number">100002</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>vec</name><argument_list>(<argument><expr><literal type="number">100002</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<function><type><name>ll</name></type> <name>func</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x1</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>x2</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>x3</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>ll</name></type> <name><name>visit</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><init>=<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>,<decl><type ref="prev"/><name>s</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>i</name><init>=<expr><name>leaf</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name><name>arr</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>arr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name>x1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>arr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><name>x2</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>arr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>=</operator><name>x3</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>visit</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition>
    <block>{
       <comment type="line">//cout&lt;&lt;i&lt;&lt;"\n";</comment>
       <if>if<condition>(<expr><name><name>arr</name><index>[<expr><name>j</name></expr>]</index></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
       <block>{
           <expr_stmt><expr><name>s</name><operator>+=</operator><name><name>ar</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
           <expr_stmt><expr><name><name>col1</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
       }</block></then></if>
       <if>if<condition>(<expr><name><name>arr</name><index>[<expr><name>j</name></expr>]</index></name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then>
       <block>{
           <expr_stmt><expr><name>s</name><operator>+=</operator><name><name>br</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
           <expr_stmt><expr><name><name>col1</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt>
       }</block></then></if>
       <if>if<condition>(<expr><name><name>arr</name><index>[<expr><name>j</name></expr>]</index></name><operator>==</operator><literal type="number">3</literal></expr>)</condition><then>
       <block>{
           <expr_stmt><expr><name>s</name><operator>+=</operator><name><name>cr</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
           <expr_stmt><expr><name><name>col1</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">3</literal></expr>;</expr_stmt>
       }</block></then></if>
       <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
       <if>if<condition>(<expr><name>j</name><operator>==</operator><literal type="number">4</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>j</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
       <if>if<condition>(<expr><name>i</name><operator>!=</operator><name>leaf</name> <operator>&amp;&amp;</operator> <name><name>vec</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
            <block type="pseudo"><break>break;</break></block></then></if>
       <decl_stmt><decl><type><name>ll</name></type> <name>z1</name></decl>;</decl_stmt>
       <for>for<control>(<init><decl><type><name>auto</name></type> <name>it</name><init>=<expr><name><name>vec</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</init><condition><expr><name>it</name><operator>!=</operator><name><name>vec</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>it</name><operator>++</operator></expr></incr>)</control>
       <block>{
           <if>if<condition>(<expr><name><name>visit</name><index>[<expr><operator>*</operator><name>it</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
           <block>{
               <expr_stmt><expr><name><name>visit</name><index>[<expr><operator>*</operator><name>it</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
               <expr_stmt><expr><name>z1</name><operator>=</operator><operator>*</operator><name>it</name></expr>;</expr_stmt>
           }</block></then></if>
       }</block></for>
       <expr_stmt><expr><name>i</name><operator>=</operator><name>z1</name></expr>;</expr_stmt>
    }</block></while>
    <comment type="line">//cout&lt;&lt;s&lt;&lt;"\n";</comment>
    <return>return <expr><name>s</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>,<decl><type ref="prev"/><name>min1</name></decl>,<decl><type ref="prev"/><name>s</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name><name>cnt</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><init>=<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>ar</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></for>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>br</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></for>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>cr</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></for>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>x</name><operator>&gt;&gt;</operator><name>y</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>vec</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>vec</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cnt</name><index>[<expr><name>x</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cnt</name><index>[<expr><name>y</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
    }</block></for>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <if>if<condition>(<expr><name><name>cnt</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>leaf</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
        }</block></then></if>
    }</block></for>
    <comment type="line">//cout&lt;&lt;leaf&lt;&lt;" "&lt;&lt;s&lt;&lt;"\n";</comment>
    <if>if<condition>(<expr><name>s</name><operator>&gt;</operator><literal type="number">2</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"-1"</literal></expr>;</expr_stmt></block></then>
    <else>else
    <block>{
        <expr_stmt><expr><name>min1</name><operator>=</operator><call><name>func</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <expr_stmt><expr><name><name>col</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>col1</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></for>
        <if>if<condition>(<expr><name>min1</name><operator>&gt;</operator><call><name>func</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>min1</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>min1</name></expr></argument>,<argument><expr><call><name>func</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block>{
                <expr_stmt><expr><name><name>col</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>col1</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            }</block></for>
        }</block></then></if>
        <if>if<condition>(<expr><name>min1</name><operator>&gt;</operator><call><name>func</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>min1</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>min1</name></expr></argument>,<argument><expr><call><name>func</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block>{
                <expr_stmt><expr><name><name>col</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>col1</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            }</block></for>
        }</block></then></if>
        <if>if<condition>(<expr><name>min1</name><operator>&gt;</operator><call><name>func</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>min1</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>min1</name></expr></argument>,<argument><expr><call><name>func</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block>{
                <expr_stmt><expr><name><name>col</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>col1</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            }</block></for>
        }</block></then></if>
        <if>if<condition>(<expr><name>min1</name><operator>&gt;</operator><call><name>func</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>min1</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>min1</name></expr></argument>,<argument><expr><call><name>func</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block>{
                <expr_stmt><expr><name><name>col</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>col1</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            }</block></for>
        }</block></then></if>
        <if>if<condition>(<expr><name>min1</name><operator>&gt;</operator><call><name>func</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>min1</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>min1</name></expr></argument>,<argument><expr><call><name>func</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block>{
                <expr_stmt><expr><name><name>col</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>col1</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            }</block></for>
        }</block></then></if>

        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>min1</name><operator>&lt;&lt;</operator><literal type="string">"\n"</literal></expr>;</expr_stmt>
        <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>col</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;&lt;</operator><literal type="string">" "</literal></expr>;</expr_stmt>
        }</block></for>
    }</block></else></if>
}</block></function>
</unit>
