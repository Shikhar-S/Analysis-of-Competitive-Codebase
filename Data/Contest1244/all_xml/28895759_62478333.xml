<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28895759_62478333.cpp"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_USE_MATH_DEFINES</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<function><type><name>void</name></type> <name>out</name> <parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{
  <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>a</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name>b</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name>c</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type> <name>err</name><parameter_list>()</parameter_list> <block>{
  <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{ 
  <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">//c</comment>
  <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>p</name> <operator>&gt;&gt;</operator> <name>w</name> <operator>&gt;&gt;</operator> <name>d</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>k</name> <init>= <expr><name>p</name> <operator>/</operator> <name>w</name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>long</name> <name>long</name></type> <name>x</name> <init>= <expr><name>k</name></expr></init></decl>, <decl><type ref="prev"/><name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;=</operator> <name>d</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>x</name><operator>--</operator></expr></incr>)</control> <block>{
    <if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>-</operator> <name>w</name> <operator>*</operator> <name>x</name><operator>)</operator> <operator>%</operator> <name>d</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
      <if>if <condition>(<expr><name>x</name> <operator>+</operator> <operator>(</operator><name>p</name> <operator>-</operator> <name>w</name> <operator>*</operator> <name>x</name><operator>)</operator> <operator>/</operator> <name>d</name> <operator>&lt;=</operator> <name>n</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>out</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><operator>(</operator><name>p</name> <operator>-</operator> <name>w</name> <operator>*</operator> <name>x</name><operator>)</operator> <operator>/</operator> <name>d</name></expr></argument>, <argument><expr><name>n</name> <operator>-</operator> <name>x</name> <operator>-</operator> <operator>(</operator><name>p</name> <operator>-</operator> <name>w</name> <operator>*</operator> <name>x</name><operator>)</operator> <operator>/</operator> <name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></then></if>
  }</block></for>
  <expr_stmt><expr><call><name>err</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
