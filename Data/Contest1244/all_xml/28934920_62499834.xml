<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28934920_62499834.cpp">
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>for(int a = 0; a &lt; (b); ++a)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro>      <cpp:value>(a).begin(),(a).end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro>        <cpp:value>'\n'</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<using>using <name>Graph</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>ll</name> <init>= <type><name>int64_t</name></type></init>;</using>



<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>precision</name></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name><operator>&gt;&gt;</operator><name>k</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>arr</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument>n</argument>)</argument_list></macro> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>occs</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>rep</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>++</operator><name><name>occs</name><index>[<expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>nums</name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>auto</name></type> <name>p</name> <range>: <expr><name>occs</name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><call><name><name>nums</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>front</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>back</name> <init>= <expr><call><name><name>nums</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>back</name><operator>-</operator><name>front</name><operator>&gt;=</operator><literal type="number">1</literal></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>low</name> <init>= <expr><name><name>nums</name><index>[<expr><name>front</name></expr>]</index></name><operator>.</operator><name>second</name> <operator>&lt;</operator> <name><name>nums</name><index>[<expr><name>back</name></expr>]</index></name><operator>.</operator><name>second</name></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>low</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>auto</name><operator>&amp;</operator> <name>p0</name> <operator>=</operator> <name><name>nums</name><index>[<expr><name>front</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>auto</name><operator>&amp;</operator> <name>p1</name> <operator>=</operator> <name><name>nums</name><index>[<expr><name>front</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>auto</name></type> <name>diff</name> <init>= <expr><name><name>p1</name><operator>.</operator><name>first</name></name> <operator>-</operator> <name><name>p0</name><operator>.</operator><name>first</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>auto</name></type> <name>ops</name> <init>= <expr><call><name><name>min</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>diff</name></expr></argument>,<argument><expr><name>k</name><operator>/</operator><name><name>p0</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name>ops</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
            <expr_stmt><expr><name>k</name><operator>-=</operator><name>ops</name><operator>*</operator><name><name>p0</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>p0</name><operator>.</operator><name>first</name></name> <operator>+=</operator> <name>ops</name></expr>;</expr_stmt>
            <if>if<condition>(<expr><name><name>p0</name><operator>.</operator><name>first</name></name><operator>==</operator><name><name>p1</name><operator>.</operator><name>first</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>p1</name><operator>.</operator><name>second</name></name> <operator>+=</operator> <name><name>p0</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>front</name><operator>++</operator></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>auto</name><operator>&amp;</operator> <name>p0</name> <operator>=</operator> <name><name>nums</name><index>[<expr><name>back</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>auto</name><operator>&amp;</operator> <name>p1</name> <operator>=</operator> <name><name>nums</name><index>[<expr><name>back</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>auto</name></type> <name>diff</name> <init>= <expr><name><name>p0</name><operator>.</operator><name>first</name></name> <operator>-</operator> <name><name>p1</name><operator>.</operator><name>first</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>auto</name></type> <name>ops</name> <init>= <expr><call><name><name>min</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>diff</name></expr></argument>,<argument><expr><name>k</name><operator>/</operator><name><name>p0</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name>ops</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
            <expr_stmt><expr><name>k</name><operator>-=</operator><name>ops</name><operator>*</operator><name><name>p0</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>p0</name><operator>.</operator><name>first</name></name> <operator>-=</operator> <name>ops</name></expr>;</expr_stmt>
            <if>if<condition>(<expr><name><name>p0</name><operator>.</operator><name>first</name></name><operator>==</operator><name><name>p1</name><operator>.</operator><name>first</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>p1</name><operator>.</operator><name>second</name></name> <operator>+=</operator> <name><name>p0</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>back</name><operator>--</operator></expr>;</expr_stmt>
            }</block></then></if>
        }</block></else></if>
    }</block></while>

    <expr_stmt><expr><name>cout</name>  <operator>&lt;&lt;</operator> <name><name>nums</name><index>[<expr><name>back</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>-</operator> <name><name>nums</name><index>[<expr><name>front</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

</unit>
