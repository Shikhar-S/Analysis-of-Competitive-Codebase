<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28925346_62481357.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iomanip&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;numeric&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bitset&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>

<decl_stmt><decl><specifier>static</specifier> <type><specifier>const</specifier> <name>int</name></type> <name>MOD</name> <init>= <expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>
<using>using <name>ll</name> <init>= <type><name>long</name> <name>long</name></type></init>;</using>
<using>using <name>u32</name> <init>= <type><name>uint32_t</name></type></init>;</using>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>constexpr</specifier> <type><name>T</name></type> <name>INF</name> <init>= <expr><call><name><operator>::</operator><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>max</name></name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">32</literal><operator>*</operator><literal type="number">15</literal><operator>+</operator><literal type="number">208</literal></expr></init></decl>;</decl_stmt>


<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type> <name>os</name></decl></parameter>, <parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">"{"</literal></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>v</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
        <if>if<condition>(<expr><name>i</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></for>
    <return>return <expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">"}"</literal></expr>;</return>
}</block></function>

<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>L</name></parameter>, <parameter><type><name>class</name></type> <name>R</name></parameter>&gt;</parameter_list></template>
<type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type> <name>os</name></decl></parameter>, <parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>L</name></expr></argument>, <argument><expr><name>R</name></expr></argument>&gt;</argument_list></name></type> <name>p</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">"{"</literal> <operator>&lt;&lt;</operator> <name><name>p</name><operator>.</operator><name>first</name></name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal> <operator>&lt;&lt;</operator> <name><name>p</name><operator>.</operator><name>second</name></name> <operator>&lt;&lt;</operator> <literal type="string">"}"</literal></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>v</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>auto</name> <operator>&amp;&amp;</operator><name>i</name> <operator>:</operator> <name>v</name></expr></init>)</control> <block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>v</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>u</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>u</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
        <if>if<condition>(<expr><call><name><name>u</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>first</name> <operator>==</operator> <name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>u</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>second</name><operator>++</operator></expr>;</expr_stmt></block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><call><name><name>u</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
    }</block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>cur1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>cur2</name> <init>= <expr><call>(<name>int</name>)<argument_list>(<argument><expr><call><name><name>u</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>cur2</name> <operator>-</operator> <name>cur1</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block>{
        <if>if<condition>(<expr><name><name>u</name><index>[<expr><name>cur1</name></expr>]</index></name><operator>.</operator><name>second</name> <operator>&lt;</operator> <name><name>u</name><index>[<expr><name>cur2</name></expr>]</index></name><operator>.</operator><name>second</name></expr>)</condition><then><block>{
            <decl_stmt><decl><type><name>ll</name></type> <name>x</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name>k</name><operator>/</operator><name><name>u</name><index>[<expr><name>cur1</name></expr>]</index></name><operator>.</operator><name>second</name></expr></argument>,
                       <argument><expr><operator>(</operator><name>ll</name><operator>)</operator><name><name>u</name><index>[<expr><name>cur1</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>first</name><operator>-</operator><name><name>u</name><index>[<expr><name>cur1</name></expr>]</index></name><operator>.</operator><name>first</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name>x</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
            <expr_stmt><expr><name>k</name> <operator>-=</operator> <name>x</name><operator>*</operator><name><name>u</name><index>[<expr><name>cur1</name></expr>]</index></name><operator>.</operator><name>second</name></expr>;</expr_stmt>
            <if>if<condition>(<expr><name><name>u</name><index>[<expr><name>cur1</name></expr>]</index></name><operator>.</operator><name>first</name><operator>+</operator><name>x</name> <operator>==</operator> <name><name>u</name><index>[<expr><name>cur1</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>first</name></expr>)</condition><then><block>{
                <expr_stmt><expr><name><name>u</name><index>[<expr><name>cur1</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>second</name> <operator>+=</operator> <name><name>u</name><index>[<expr><name>cur1</name></expr>]</index></name><operator>.</operator><name>second</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>u</name><index>[<expr><name>cur1</name></expr>]</index></name><operator>.</operator><name>second</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>cur1</name><operator>++</operator></expr>;</expr_stmt>
            }</block></then><else>else <block>{
                <expr_stmt><expr><name><name>u</name><index>[<expr><name>cur1</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>+=</operator> <name>x</name></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then><else>else <block>{
            <decl_stmt><decl><type><name>ll</name></type> <name>x</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name>k</name><operator>/</operator><name><name>u</name><index>[<expr><name>cur2</name></expr>]</index></name><operator>.</operator><name>second</name></expr></argument>,
                       <argument><expr><operator>(</operator><name>ll</name><operator>)</operator><name><name>u</name><index>[<expr><name>cur2</name></expr>]</index></name><operator>.</operator><name>first</name><operator>-</operator><name><name>u</name><index>[<expr><name>cur2</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>first</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name>x</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
            <expr_stmt><expr><name>k</name> <operator>-=</operator> <name>x</name><operator>*</operator><name><name>u</name><index>[<expr><name>cur2</name></expr>]</index></name><operator>.</operator><name>second</name></expr>;</expr_stmt>
            <if>if<condition>(<expr><name><name>u</name><index>[<expr><name>cur2</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>first</name><operator>+</operator><name>x</name> <operator>==</operator> <name><name>u</name><index>[<expr><name>cur2</name></expr>]</index></name><operator>.</operator><name>first</name></expr>)</condition><then><block>{
                <expr_stmt><expr><name><name>u</name><index>[<expr><name>cur2</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>second</name> <operator>+=</operator> <name><name>u</name><index>[<expr><name>cur2</name></expr>]</index></name><operator>.</operator><name>second</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>u</name><index>[<expr><name>cur2</name></expr>]</index></name><operator>.</operator><name>second</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>cur2</name><operator>--</operator></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><name><name>u</name><index>[<expr><name>cur2</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>-=</operator> <name>x</name></expr>;</expr_stmt>
            }</block></else></if>
        }</block></else></if>
    }</block></while>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>u</name><index>[<expr><name>cur2</name></expr>]</index></name><operator>.</operator><name>first</name><operator>-</operator><name><name>u</name><index>[<expr><name>cur1</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
