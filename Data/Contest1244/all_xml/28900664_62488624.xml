<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28900664_62488624.cpp"><comment type="block">/*
Uruchamiamy samolot zwiadowczy ( + 500% do wzlamaniej )

/â/  /â/  /&amp;#9680;/   /â/   /â/ /â/ /â/ /&amp;#128293;/   choose  own style!

***IT'S OUR LONG WAY TO THE OIILLLL***


ââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââ
ââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââ
âââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââð¥âââââââââââââ
ââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââ
ââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââ
ââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââ
ââââââââââââââââââââââââââââââââââââââââââ ââ ââ ââ ââ ââ ââ ââ ââ ââ ââ ââ ââ âââââ
ââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââ
ââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââ
ââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââð¥ââââââââââââ
ââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââ
ââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââ
ââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââ
ââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââ
ââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââ
ââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââ
*/</comment>


<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><cpp:literal>"Ofast"</cpp:literal><name>)</name></cpp:pragma>
<comment type="line">//#pragma GCC target("sse,sse2,sse3,ssse3,sse4")</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ext/pb_ds/detail/standard_policies.hpp&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ext/pb_ds/assoc_container.hpp&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ext/pb_ds/tree_policy.hpp&gt;</cpp:file></cpp:include>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ld</name></cpp:macro> <cpp:value>long double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>eb</name></cpp:macro> <cpp:value>emplace_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair &lt; int , int &gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pipii</name></cpp:macro> <cpp:value>pair&lt; int, pair &lt; int , int &gt; &gt;</cpp:value></cpp:define>
<decl_stmt><decl><type><name>mt19937</name></type> <name>gen</name><argument_list>(<argument><expr><call><name><name>chrono</name><operator>::</operator><name>high_resolution_clock</name><operator>::</operator><name>now</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>time_since_epoch</name><argument_list>()</argument_list></call><operator>.</operator><call><name>count</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<using>using <namespace>namespace <name>__gnu_pbds</name>;</namespace></using>

<using><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
using <name>ordered_set</name> <init>= <type><name><name>tree</name> <argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name>null_type</name></expr></argument>, <argument><expr><name><name>less</name><argument_list type="generic">&lt; <argument><expr><name>T</name></expr></argument> &gt;</argument_list></name></expr></argument>, <argument><expr><name>rb_tree_tag</name></expr></argument>,<argument><expr><name>tree_order_statistics_node_update</name></expr></argument>&gt;</argument_list></name></type></init>;</using>


<namespace>namespace <name>fastio</name> <block>{
    <function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>ostream</name> <modifier>&amp;</modifier></type><name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name> <modifier>&amp;</modifier></type><name>os</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>container</name></decl></parameter>)</parameter_list><block>{<for>for <control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>u</name> <operator>:</operator> <name>container</name></expr></init>)</control><block type="pseudo"><expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <name>u</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt></block></for><return>return <expr><name>os</name></expr>;</return>}</block></function>
    <function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T1</name></parameter>, <parameter><type><name>class</name></type> <name>T2</name></parameter>&gt;</parameter_list></template> <type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator <name>&lt;&lt;</name></name> <parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type> <name>os</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>T1</name></expr></argument>, <argument><expr><name>T2</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>p</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name>os</name> <operator>&lt;&lt;</operator> <name><name>p</name><operator>.</operator><name>first</name></name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name><name>p</name><operator>.</operator><name>second</name></name></expr>;</return> }</block></function>
    <function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>ostream</name> <modifier>&amp;</modifier></type><name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name> <modifier>&amp;</modifier></type><name>os</name></decl></parameter>, <parameter><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier><modifier>&amp;</modifier></type> <name>con</name></decl></parameter>)</parameter_list> <block>{ <for>for <control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>u</name> <operator>:</operator> <name>con</name></expr></init>)</control> <block type="pseudo"><expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <name>u</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt></block></for> <return>return <expr><name>os</name></expr>;</return> }</block></function>
    <function><type><name>void</name></type> <name>pr</name><parameter_list>()</parameter_list> <block>{}</block></function>
    <function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>, <parameter><type><name>typename</name><modifier>...</modifier></type> <name>args</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>pr</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>args</name><modifier>...</modifier></type> <name>tail</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>x</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt> <expr_stmt><expr><call><name>pr</name><argument_list>(<argument><expr><name>tail</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function>
}</block></namespace>
<using>using <namespace>namespace <name>fastio</name>;</namespace></using>


<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">1e5</literal> <operator>+</operator> <literal type="number">15</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MA</name> <init>= <expr><literal type="number">1e6</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>M</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>Estb_probitie</name></cpp:ifdef>
        <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"input.txt"</literal></expr></argument>,<argument><expr><literal type="string">"r"</literal></expr></argument>,<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"output.txt"</literal></expr></argument>,<argument><expr><literal type="string">"w"</literal></expr></argument>,<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr><name>n</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name>mx</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>mn</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr><operator>,</operator> <expr><name>mx</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>mx</name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name>mn</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>mn</name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>

    <decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt; <argument><expr><name><name>pair</name> <argument_list type="generic">&lt; <argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>v1</name></decl>, <decl><type ref="prev"/><name>v2</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>a</name> <operator>+</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>kol</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>now</name> <init>= <expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>zn</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <while>while<condition>(<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>n</name> <operator>&amp;&amp;</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>a</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition>
            <block type="pseudo"><expr_stmt><expr><operator>++</operator><name>i</name></expr><operator>,</operator> <expr><operator>++</operator><name>zn</name></expr>;</expr_stmt></block></while>
        <expr_stmt><expr><call><name><name>v1</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><block>{<expr><name>kol</name></expr>, <macro><name>min</name><argument_list>(<argument>a[i] - now</argument>, <argument>(k - sum) / kol</argument>)</argument_list></macro>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>sum</name> <operator>+=</operator> <name>kol</name> <operator>*</operator> <operator>(</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name>now</name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>now</name> <operator>=</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>sum</name> <operator>&gt;=</operator> <name>k</name></expr>)</condition><then>
            <block type="pseudo"><break>break;</break></block></then></if>
        <expr_stmt><expr><name>kol</name> <operator>+=</operator> <name>zn</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><name>sum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt><expr_stmt><expr><name>kol</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>now</name> <operator>=</operator> <name><name>a</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>n</name> <operator>-</operator> <literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>zn</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <while>while<condition>(<expr><name>i</name> <operator>&amp;&amp;</operator> <name><name>a</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
            <block type="pseudo"><expr_stmt><expr><operator>--</operator><name>i</name></expr><operator>,</operator> <expr><operator>++</operator><name>zn</name></expr>;</expr_stmt></block></while>
        <expr_stmt><expr><call><name><name>v2</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><block>{<expr><name>kol</name></expr>, <macro><name>min</name><argument_list>(<argument>now - a[i]</argument>, <argument>(k - sum) / kol</argument>)</argument_list></macro>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>sum</name> <operator>+=</operator> <name>kol</name> <operator>*</operator> <operator>(</operator><name>now</name> <operator>-</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>now</name> <operator>=</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>sum</name> <operator>&gt;=</operator> <name>k</name></expr>)</condition><then>
            <block type="pseudo"><break>break;</break></block></then></if>
        <expr_stmt><expr><name>kol</name> <operator>+=</operator> <name>zn</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    }</block></for>
<comment type="line">//    cout&lt;&lt;v1&lt;&lt;endl;cout&lt;&lt;v2&lt;&lt;endl;</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>poz1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>poz2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>poz1</name> <operator>&lt;</operator> <name>n</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>v1</name><index>[<expr><name>poz1</name></expr>]</index></name><operator>.</operator><name>fi</name></expr>)</condition> <block type="pseudo"><expr_stmt><expr><operator>++</operator><name>poz1</name></expr>;</expr_stmt></block></while>
    <while>while<condition>(<expr><name>poz2</name> <operator>&lt;</operator> <name>n</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>v2</name><index>[<expr><name>poz2</name></expr>]</index></name><operator>.</operator><name>fi</name></expr>)</condition> <block type="pseudo"><expr_stmt><expr><operator>++</operator><name>poz2</name></expr>;</expr_stmt></block></while>

    <while>while<condition>(<expr><literal type="boolean">true</literal></expr>)</condition>
    <block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>c1</name> <init>= <expr><literal type="number">1e18</literal></expr></init></decl>, <decl><type ref="prev"/><name>c2</name> <init>= <expr><literal type="number">1e18</literal></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>poz1</name> <operator>&lt;</operator> <call><name><name>v1</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>c1</name> <operator>=</operator> <name><name>v1</name><index>[<expr><name>poz1</name></expr>]</index></name><operator>.</operator><name>fi</name></expr>;</expr_stmt></block></then></if>
        <if>if <condition>(<expr><name>poz2</name> <operator>&lt;</operator> <call><name><name>v2</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>c2</name> <operator>=</operator> <name><name>v2</name><index>[<expr><name>poz2</name></expr>]</index></name><operator>.</operator><name>fi</name></expr>;</expr_stmt></block></then></if>
        <if>if <condition>(<expr><name>c1</name> <operator>&gt;</operator> <name>k</name> <operator>&amp;&amp;</operator> <name>c2</name> <operator>&gt;</operator> <name>k</name></expr>)</condition><then>
            <block type="pseudo"><break>break;</break></block></then></if>

        <if>if <condition>(<expr><name>c1</name> <operator>&lt;</operator> <name>c2</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>kol</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>v1</name><index>[<expr><name>poz1</name></expr>]</index></name><operator>.</operator><name>se</name></expr></argument>, <argument><expr><name>k</name> <operator>/</operator> <name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>ans</name> <operator>+=</operator> <name>kol</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>k</name> <operator>-=</operator> <name>kol</name> <operator>*</operator> <name>c1</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>++</operator><name>poz1</name></expr>;</expr_stmt>
        }</block></then> <else>else
        <block>{
            <expr_stmt><expr><name>kol</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>v2</name><index>[<expr><name>poz2</name></expr>]</index></name><operator>.</operator><name>se</name></expr></argument>, <argument><expr><name>k</name> <operator>/</operator> <name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>ans</name> <operator>+=</operator> <name>kol</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>k</name> <operator>-=</operator> <name>kol</name> <operator>*</operator> <name>c2</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>++</operator><name>poz2</name></expr>;</expr_stmt>
        }</block></else></if>
<comment type="line">//        cout&lt;&lt;c1&lt;&lt;" "&lt;&lt;c2&lt;&lt;" "&lt;&lt;poz1&lt;&lt;" "&lt;&lt;poz2&lt;&lt;" "&lt;&lt;k&lt;&lt;" "&lt;&lt;kol&lt;&lt;" "&lt;&lt;ans&lt;&lt;endl;</comment>
    }</block></while>

    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>max</name><argument_list>(<argument><expr><name>mx</name> <operator>-</operator> <name>mn</name> <operator>-</operator> <name>ans</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
