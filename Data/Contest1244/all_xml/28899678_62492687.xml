<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28899678_62492687.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ull</name></cpp:macro> <cpp:value>unsigned long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ss</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inarr</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>k</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=k;i&lt;n;i++){cin&gt;&gt;a[i];}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>outarr</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>k</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=k;i&lt;n;i++){cout&lt;&lt;a[i]&lt;&lt;" ";}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inpair</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cin&gt;&gt;a.first&gt;&gt;a.second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>outpair</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout&lt;&lt;a.ff&lt;&lt;" "&lt;&lt;a.ss&lt;&lt;endl</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>in2</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cin&gt;&gt;a&gt;&gt;b</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>in3</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cin&gt;&gt;a&gt;&gt;b&gt;&gt;c</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fastio</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(false)</cpp:value></cpp:define>
<function><type><name>ll</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><name>a</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><name>b</name></expr>;</return></block></then></if>
    <expr_stmt><expr><name>b</name><operator>%=</operator><name>a</name></expr>;</expr_stmt>
    <return>return <expr><call><name>gcd</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>adj</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>clr</name><index>[<expr><literal type="number">100005</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name><init>=<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>ansc</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name><init>=<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sm</name></decl>;</decl_stmt><decl_stmt><decl><type><name>bool</name></type> <name>prt</name><init>=<expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
<function><type><name>ll</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list><block>{
    <expr_stmt><expr><name>c</name><operator>+=</operator><name>sm</name></expr>;</expr_stmt><expr_stmt><expr><name>c</name><operator>%=</operator><literal type="number">3</literal></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>prt</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name><name>ansc</name><index>[<expr><name>k</name></expr>]</index></name><operator>=</operator><name>c</name></expr>;</expr_stmt></block></then></if>
    <decl_stmt><decl><type><name>ll</name></type> <name>ret</name> <init>= <expr><name><name>clr</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>c</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>h</name> <range>: <expr><name><name>adj</name><index>[<expr><name>k</name></expr>]</index></name></expr></range></decl></init>)</control><block>{
        <if>if<condition>(<expr><name>h</name><operator>==</operator><name>p</name></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
        <expr_stmt><expr><name>ret</name><operator>+=</operator><call><name>dfs</name><argument_list>(<argument><expr><name>h</name></expr></argument>,<argument><expr><name>k</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <return>return <expr><name>ret</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><name>fastio</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>t</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <comment type="line">//cin&gt;&gt;t;</comment>
    <while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <while>while<condition>(<expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>)</condition><block>{<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>clr</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt><expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>}</block></while>
        <expr_stmt><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <while>while<condition>(<expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>)</condition><block>{<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>clr</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt><expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>}</block></while>
        <expr_stmt><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <while>while<condition>(<expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>)</condition><block>{<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>clr</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt><expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>}</block></while>
        <expr_stmt><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt><decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>a</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
        <while>while<condition>(<expr><name>i</name><operator>&lt;</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><block>{
            <expr_stmt><expr><call><name>in2</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>adj</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name><name>adj</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if<condition>(<expr><operator>(</operator><name><name>adj</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>&gt;</operator><literal type="number">2</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>adj</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>&gt;</operator><literal type="number">2</literal><operator>)</operator></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>a</name><operator>=</operator><literal type="boolean">false</literal></expr>;</expr_stmt></block></then></if>
            <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
        }</block></while>
        <if>if<condition>(<expr><operator>!</operator><name>a</name></expr>)</condition><then><block>{<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>-</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt><continue>continue;</continue>}</block></then></if>
        <expr_stmt><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt><expr_stmt><expr><name>x</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <while>while<condition>(<expr><name>x</name><operator>&lt;=</operator><name>n</name></expr>)</condition><block>{
            <if>if<condition>(<expr><name><name>adj</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>&lt;=</operator><literal type="number">1</literal></expr>)</condition><then><block>{<expr_stmt><expr><name>x</name><operator>=</operator><name>i</name></expr>;</expr_stmt><break>break;</break>}</block></then></if><expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
        }</block></while>
        <if>if<condition>(<expr><name>x</name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block>{<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>-</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt><continue>continue;</continue>}</block></then></if>
        <expr_stmt><expr><name>sm</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><call><name>dfs</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>rsm</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt><decl_stmt><decl><type><name>int</name></type> <name>s</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <comment type="line">//</comment>
        <decl_stmt><decl><type><name>ll</name></type> <name>tmp</name><init>=<expr><call><name>dfs</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>ans</name><operator>&gt;</operator><name>tmp</name></expr>)</condition><then><block>{<expr_stmt><expr><name>ans</name><operator>=</operator><name>tmp</name></expr>;</expr_stmt><expr_stmt><expr><name>s</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>}</block></then></if>
        <expr_stmt><expr><name>tmp</name><operator>=</operator><call><name>dfs</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>ans</name><operator>&gt;</operator><name>tmp</name></expr>)</condition><then><block>{<expr_stmt><expr><name>ans</name><operator>=</operator><name>tmp</name></expr>;</expr_stmt><expr_stmt><expr><name>s</name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt>}</block></then></if>
        <comment type="line">//</comment>
        <expr_stmt><expr><name>sm</name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>tmp</name><operator>=</operator><call><name>dfs</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>ans</name><operator>&gt;</operator><name>tmp</name></expr>)</condition><then><block>{<expr_stmt><expr><name>ans</name><operator>=</operator><name>tmp</name></expr>;</expr_stmt><expr_stmt><expr><name>s</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt><expr_stmt><expr><name>rsm</name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt>}</block></then></if>
        <expr_stmt><expr><name>tmp</name><operator>=</operator><call><name>dfs</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>ans</name><operator>&gt;</operator><name>tmp</name></expr>)</condition><then><block>{<expr_stmt><expr><name>ans</name><operator>=</operator><name>tmp</name></expr>;</expr_stmt><expr_stmt><expr><name>s</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt><expr_stmt><expr><name>rsm</name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt>}</block></then></if>
        <expr_stmt><expr><name>tmp</name><operator>=</operator><call><name>dfs</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>ans</name><operator>&gt;</operator><name>tmp</name></expr>)</condition><then><block>{<expr_stmt><expr><name>ans</name><operator>=</operator><name>tmp</name></expr>;</expr_stmt><expr_stmt><expr><name>s</name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt><expr_stmt><expr><name>rsm</name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt>}</block></then></if>
        <expr_stmt><expr><name>prt</name><operator>=</operator><literal type="boolean">true</literal></expr>;</expr_stmt><expr_stmt><expr><name>sm</name><operator>=</operator><name>rsm</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ans</name> <operator>=</operator> <call><name>dfs</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <while>while<condition>(<expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>)</condition><block>{
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>ansc</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="string">" "</literal></expr>;</expr_stmt><expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
        }</block></while>
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
