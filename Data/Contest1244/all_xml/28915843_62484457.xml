<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28915843_62484457.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/extc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>em</name></cpp:macro> <cpp:value>emplace</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>eb</name></cpp:macro> <cpp:value>emplace_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lb</name></cpp:macro> <cpp:value>lower_bound</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ub</name></cpp:macro> <cpp:value>upped_bound</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fbo</name></cpp:macro> <cpp:value>find_by_order</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ofk</name></cpp:macro> <cpp:value>order_of_key</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<using>using <namespace>namespace <name>__gnu_cxx</name>;</namespace></using>
<using>using <namespace>namespace <name>__gnu_pbds</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name>pii</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type><name>pll</name>;</typedef>
<using><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template>using <name>pq</name><init>=<type><name><name>__gnu_pbds</name><operator>::</operator><name><name>priority_queue</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>,<argument><expr><name><name>greater</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></expr></argument>,<argument><expr><name>pairing_heap_tag</name></expr></argument>&gt;</argument_list></name></name></type></init>;</using>
<using><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template>using <name>tr</name><init>=<type><name><name>tree</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>,<argument><expr><name>null_type</name></expr></argument>,<argument><expr><name><name>less</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></expr></argument>,<argument><expr><name>rb_tree_tag</name></expr></argument>,<argument><expr><name>tree_order_statistics_node_update</name></expr></argument>&gt;</argument_list></name></type></init>;</using>

<decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>n</name></decl>,<decl><type ref="prev"/><name>ans</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>m</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>m</name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>a</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>a</name><operator>+</operator><literal type="number">1</literal><operator>+</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ans</name><operator>=</operator><name><name>a</name><index>[<expr><name>n</name></expr>]</index></name><operator>-</operator><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name><operator>&amp;&amp;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name><name>a</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><empty_stmt>;</empty_stmt></block></for>
    <for>for<control>(<init><expr><name>j</name><operator>=</operator><name>n</name></expr>;</init><condition><expr><name>j</name><operator>&gt;=</operator><literal type="number">1</literal><operator>&amp;&amp;</operator><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name><operator>==</operator><name><name>a</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</condition><incr><expr><name>j</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><empty_stmt>;</empty_stmt></block></for>
    <while>while<condition>(<expr><name>i</name><operator>&lt;</operator><name>j</name></expr>)</condition>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>t</name><init>=<expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>i</name><operator>&lt;</operator><name>n</name><operator>-</operator><name>j</name><operator>+</operator><literal type="number">1</literal></expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name>ll</name></type> <name>k</name><init>=<expr><call><name>min</name><argument_list>(<argument><expr><name>m</name><operator>/</operator><name>i</name></expr></argument>,<argument><expr><call><name>ll</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name>k</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>t</name><operator>=</operator><literal type="boolean">true</literal></expr>;</expr_stmt></block></then></if>
            <expr_stmt><expr><name>m</name><operator>-=</operator><name>k</name><operator>*</operator><name>i</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>ans</name><operator>-=</operator><name>k</name></expr>;</expr_stmt>
            <for>for<control>(<init><expr><name>i</name><operator>++</operator></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name><operator>&amp;&amp;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name><name>a</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><empty_stmt>;</empty_stmt></block></for>
        }</block></then>
        <else>else
        <block>{
            <decl_stmt><decl><type><name>ll</name></type> <name>k</name><init>=<expr><call><name>min</name><argument_list>(<argument><expr><name>m</name><operator>/</operator><operator>(</operator><name>n</name><operator>-</operator><name>j</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>,<argument><expr><call><name>ll</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name><operator>-</operator><name><name>a</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name>k</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>t</name><operator>=</operator><literal type="boolean">true</literal></expr>;</expr_stmt></block></then></if>
            <expr_stmt><expr><name>m</name><operator>-=</operator><name>k</name><operator>*</operator><operator>(</operator><name>n</name><operator>-</operator><name>j</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>ans</name><operator>-=</operator><name>k</name></expr>;</expr_stmt>
            <for>for<control>(<init><expr><name>j</name><operator>--</operator></expr>;</init><condition><expr><name>j</name><operator>&gt;=</operator><literal type="number">1</literal><operator>&amp;&amp;</operator><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name><operator>==</operator><name><name>a</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</condition><incr><expr><name>j</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><empty_stmt>;</empty_stmt></block></for>
        }</block></else></if>
        <if>if<condition>(<expr><operator>!</operator><name>t</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
    }</block></while>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
