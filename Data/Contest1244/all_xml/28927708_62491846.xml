<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28927708_62491846.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name> <modifier>*</modifier></type><name>tree</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>chain</name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>par</name></decl></parameter>)</parameter_list><block>{
    <expr_stmt><expr><call><name><name>chain</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>tree</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block type="pseudo"><if>if<condition>(<expr><name><name>tree</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name>par</name></expr>)</condition><then>
    <block type="pseudo"><expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name><name>tree</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></block></for>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <comment type="block">/* Enter your code here. Read input from STDIN. Print output to STDOUT */</comment>
<expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>cost</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>degree</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block type="pseudo"><expr_stmt><expr><name><name>degree</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></for>
<expr_stmt><expr><name>tree</name><operator>=</operator><operator>new</operator> <name><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><index>[<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
<block type="pseudo"><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>cost</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block></for></block></for>
<decl_stmt><decl><type><name>bool</name></type> <name>poss</name><init>=<expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>u</name></decl>,<decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>u</name><operator>&gt;&gt;</operator><name>v</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>degree</name><index>[<expr><name>u</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>degree</name><index>[<expr><name>v</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tree</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tree</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
}</block></for>
<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block type="pseudo"><if>if<condition>(<expr><name><name>degree</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;</operator><literal type="number">2</literal></expr>)</condition><then>
<block type="pseudo"><expr_stmt><expr><name>poss</name><operator>=</operator><literal type="boolean">false</literal></expr>;</expr_stmt></block></then></if></block></for>
<if>if<condition>(<expr><operator>!</operator><name>poss</name></expr>)</condition><then>
<block>{<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>}</block></then></if>
<decl_stmt><decl><type><name>int</name></type> <name>start</name></decl>;</decl_stmt>
<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block type="pseudo"><if>if<condition>(<expr><name><name>degree</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
<expr_stmt><expr><name>start</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if></block></for>

<expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>final_costs</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">6</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block type="pseudo"><expr_stmt><expr><name><name>final_costs</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></for>
<decl_stmt><decl><type><name>string</name></type> <name><name>matrix</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="string">"012"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matrix</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="string">"021"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matrix</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><literal type="string">"102"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matrix</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>=</operator><literal type="string">"120"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matrix</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>=</operator><literal type="string">"210"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matrix</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>=</operator><literal type="string">"201"</literal></expr>;</expr_stmt>
<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">6</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
    <expr_stmt><expr><name><name>final_costs</name><index>[<expr><name>i</name></expr>]</index></name><operator>+=</operator><name><name>cost</name><index>[<expr><name><name>matrix</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name><operator>%</operator><literal type="number">3</literal></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal></expr>]</index><index>[<expr><name><name>chain</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
}</block></for></block></for>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>minm</name><init>=<expr><literal type="number">1000000000000000000</literal></expr></init></decl>;</decl_stmt>
<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">6</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block type="pseudo"><expr_stmt><expr><name>minm</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>minm</name></expr></argument>,<argument><expr><name><name>final_costs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>minm</name><operator>&lt;&lt;</operator><literal type="string">"\n"</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ind</name></decl>;</decl_stmt>
<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">6</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block type="pseudo"><if>if<condition>(<expr><name><name>final_costs</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name>minm</name></expr>)</condition><then><block>{
    <expr_stmt><expr><name>ind</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
    <break>break;</break>
}</block></then></if></block></for>
<decl_stmt><decl><type><name>int</name></type> <name><name>ans</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block type="pseudo"><expr_stmt><expr><name><name>ans</name><index>[<expr><name><name>chain</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>=</operator> <operator>(</operator><name><name>matrix</name><index>[<expr><name>ind</name></expr>]</index><index>[<expr><name>i</name><operator>%</operator><literal type="number">3</literal></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block></for>
<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;&lt;</operator><literal type="string">" "</literal></expr>;</expr_stmt></block></for>

}</block></function></unit>
