<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28927867_62486562.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>boost</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(0); cin.tie(0);cout.tie(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lb</name></cpp:macro> <cpp:value>lower_bound</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ub</name></cpp:macro> <cpp:value>upper_bound</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;int,int&gt;</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">1e5</literal> <operator>+</operator> <literal type="number">1000</literal></expr></init></decl>, <decl><type ref="prev"/><name>mod</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>a</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>ll</name></type> <name>bin_pow</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><name>y</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
    <if>if<condition>(<expr><name>y</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><name>x</name></expr>;</return></block></then></if>
    <if>if<condition>(<expr><name>y</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>z</name> <init>= <expr><call><name>bin_pow</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><operator>(</operator><name>z</name> <operator>*</operator> <name>z</name><operator>)</operator> <operator>%</operator> <name>mod</name></expr>;</return>
    }</block></then></if>
    <return>return <expr><operator>(</operator><call><name>bin_pow</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>x</name><operator>)</operator> <operator>%</operator> <name>mod</name></expr>;</return>
}</block></function>


<function><type><name>bool</name></type> <name>check</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{

}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><name>boost</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>a</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>a</name> <operator>+</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>r</name> <init>= <expr><name>n</name></expr></init></decl>, <decl><type ref="prev"/><name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name><name>a</name><index>[<expr><name>l</name></expr>]</index></name> <operator>==</operator> <name><name>a</name><index>[<expr><name>l</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition>
        <block type="pseudo"><expr_stmt><expr><name>l</name><operator>++</operator></expr>;</expr_stmt></block></while>
    <while>while<condition>(<expr><name><name>a</name><index>[<expr><name>r</name></expr>]</index></name> <operator>==</operator> <name><name>a</name><index>[<expr><name>r</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition>
        <block type="pseudo"><expr_stmt><expr><name>r</name><operator>--</operator></expr>;</expr_stmt></block></while>
    <expr_stmt><expr><name>x</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>y</name> <operator>=</operator> <name>n</name> <operator>-</operator> <name>r</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>x</name> <operator>+</operator> <name>y</name> <operator>&lt;=</operator> <name>n</name></expr>)</condition><block>{
        <if>if<condition>(<expr><name>x</name> <operator>&lt;=</operator> <name>y</name></expr>)</condition><then><block>{
            <expr_stmt><expr><name>k</name> <operator>-=</operator> <operator>(</operator><name><name>a</name><index>[<expr><name>l</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>a</name><index>[<expr><name>l</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>x</name></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>k</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
                <expr_stmt><expr><name>k</name> <operator>+=</operator> <operator>(</operator><name><name>a</name><index>[<expr><name>l</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>a</name><index>[<expr><name>l</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>x</name></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>ll</name></type> <name>p</name> <init>= <expr><name>k</name> <operator>/</operator> <name>x</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>a</name><index>[<expr><name>l</name></expr>]</index></name> <operator>+=</operator> <name>p</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>a</name><index>[<expr><name>r</name></expr>]</index></name> <operator>-</operator> <name><name>a</name><index>[<expr><name>l</name></expr>]</index></name></expr>;</expr_stmt>
                <return>return <expr><literal type="number">0</literal></expr>;</return>
            }</block></then></if>
            <expr_stmt><expr><name><name>a</name><index>[<expr><name>l</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><index>[<expr><name>l</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
            <while>while<condition>(<expr><name><name>a</name><index>[<expr><name>l</name></expr>]</index></name> <operator>==</operator> <name><name>a</name><index>[<expr><name>l</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name>x</name> <operator>+</operator> <name>y</name> <operator>&lt;=</operator> <name>n</name></expr>)</condition><block>{
                <expr_stmt><expr><name>l</name><operator>++</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>x</name><operator>++</operator></expr>;</expr_stmt>
            }</block></while>
        }</block></then><else>else<block>{
            <expr_stmt><expr><name>k</name> <operator>-=</operator> <operator>(</operator><name><name>a</name><index>[<expr><name>r</name></expr>]</index></name> <operator>-</operator> <name><name>a</name><index>[<expr><name>r</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>y</name></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>k</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
                <expr_stmt><expr><name>k</name> <operator>+=</operator> <operator>(</operator><name><name>a</name><index>[<expr><name>r</name></expr>]</index></name> <operator>-</operator> <name><name>a</name><index>[<expr><name>r</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>y</name></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>ll</name></type> <name>p</name> <init>= <expr><name>k</name> <operator>/</operator> <name>y</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>a</name><index>[<expr><name>r</name></expr>]</index></name> <operator>-=</operator> <name>p</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>a</name><index>[<expr><name>r</name></expr>]</index></name> <operator>-</operator> <name><name>a</name><index>[<expr><name>l</name></expr>]</index></name></expr>;</expr_stmt>
                <return>return <expr><literal type="number">0</literal></expr>;</return>
            }</block></then></if>
            <expr_stmt><expr><name><name>a</name><index>[<expr><name>r</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><index>[<expr><name>r</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
            <while>while<condition>(<expr><name><name>a</name><index>[<expr><name>r</name></expr>]</index></name> <operator>==</operator> <name><name>a</name><index>[<expr><name>r</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name>x</name> <operator>+</operator> <name>y</name> <operator>&lt;=</operator> <name>n</name></expr>)</condition><block>{
                <expr_stmt><expr><name>r</name><operator>--</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>y</name><operator>++</operator></expr>;</expr_stmt>
            }</block></while>
        }</block></else></if>
    }</block></while>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>a</name><index>[<expr><name>r</name></expr>]</index></name> <operator>-</operator> <name><name>a</name><index>[<expr><name>l</name></expr>]</index></name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

</unit>
