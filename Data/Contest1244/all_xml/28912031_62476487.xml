<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28912031_62476487.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>zp</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>zm</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>zl</name></cpp:macro> <cpp:value>lower_bound</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>z1</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>z2</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<function><type><name>int</name></type> <name>z</name><parameter_list>()</parameter_list><block>{<decl_stmt><decl><type><name>int</name></type> <name>z</name></decl>;</decl_stmt><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><name>z</name></expr>;</return>}</block></function>
<function><type><name>ll</name></type> <name>Z</name><parameter_list>()</parameter_list><block>{<decl_stmt><decl><type><name>ll</name></type> <name>Z</name></decl>;</decl_stmt><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%I64d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>Z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><name>Z</name></expr>;</return>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>M</name> <init>= <expr><literal type="number">5e5</literal><operator>+</operator><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>p</name></decl>,<decl><type ref="prev"/><name>w</name></decl>,<decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>cal</name><parameter_list>()</parameter_list><block>{
    <if>if<condition>(<expr><name>p</name><operator>&gt;</operator><name>n</name><operator>*</operator><name>w</name></expr>)</condition><then><block>{
        <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return;</return>
    }</block></then></if>
    <if>if<condition>(<expr><name>p</name><operator>%</operator><name>d</name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>p</name><operator>/</operator><name>d</name><operator>&lt;=</operator><name>n</name></expr>)</condition><then><block>{
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="number">0</literal> <operator>&lt;&lt;</operator><literal type="char">' '</literal><operator>&lt;&lt;</operator><name>p</name><operator>/</operator><name>d</name><operator>&lt;&lt;</operator><literal type="char">' '</literal><operator>&lt;&lt;</operator><operator>(</operator><name>n</name><operator>-</operator><name>p</name><operator>/</operator><name>d</name><operator>)</operator><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
        <return>return;</return>
    }</block></then></if>
    <if>if<condition>(<expr><name>p</name><operator>%</operator><name>w</name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>p</name><operator>/</operator><name>w</name><operator>&lt;=</operator><name>n</name></expr>)</condition><then><block>{
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>p</name><operator>/</operator><name>w</name> <operator>&lt;&lt;</operator><literal type="char">' '</literal><operator>&lt;&lt;</operator><literal type="number">0</literal><operator>&lt;&lt;</operator><literal type="char">' '</literal><operator>&lt;&lt;</operator><operator>(</operator><name>n</name><operator>-</operator><name>p</name><operator>/</operator><name>w</name><operator>)</operator><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
        <return>return;</return>
    }</block></then></if>
    <decl_stmt><decl><type><name>ll</name></type> <name>high</name> <init>= <expr><name>p</name> <operator>/</operator> <name>w</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>low</name> <init>= <expr><name>high</name> <operator>-</operator> <name>d</name></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>low</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>low</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
    <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><name>high</name></expr></init></decl>;</init><condition><expr><name>i</name><operator>&gt;=</operator><name>low</name></expr>;</condition><incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>rem</name> <init>= <expr><name>p</name> <operator>-</operator> <name>i</name> <operator>*</operator> <name>w</name></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>rem</name> <operator>%</operator> <name>d</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>rem</name><operator>/</operator><name>d</name> <operator>+</operator> <name>i</name><operator>&lt;=</operator><name>n</name></expr>)</condition><then><block>{
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>i</name> <operator>&lt;&lt;</operator><literal type="char">' '</literal><operator>&lt;&lt;</operator><name>rem</name><operator>/</operator><name>d</name><operator>&lt;&lt;</operator><literal type="char">' '</literal><operator>&lt;&lt;</operator><operator>(</operator><name>n</name><operator>-</operator><name>i</name><operator>-</operator><name>rem</name><operator>/</operator><name>d</name><operator>)</operator><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>
    }</block></for>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-1\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>p</name><operator>&gt;&gt;</operator><name>w</name><operator>&gt;&gt;</operator><name>d</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cal</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
