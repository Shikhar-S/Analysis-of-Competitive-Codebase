<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28925584_62485994.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>reg</name></cpp:macro> <cpp:value>register</cpp:value></cpp:define>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(reg int i=a,i##end=b;i&lt;=i##end;++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>drep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(reg int i=a,i##end=b;i&gt;=i##end;--i)</cpp:value></cpp:define>

<decl_stmt><decl><type><name>char</name></type> <name>IO</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>rd</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>int</name></type> <name>s</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>f</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><name>IO</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block type="pseudo"><if>if<condition>(<expr><name>IO</name><operator>==</operator><literal type="char">'-'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>f</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if></block></while>
	<do>do <block type="pseudo"><expr_stmt><expr><name>s</name><operator>=</operator><operator>(</operator><name>s</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><operator>(</operator><name>s</name><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator><operator>+</operator><operator>(</operator><name>IO</name><operator>^</operator><literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt></block>
	while<condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><name>IO</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>;</do>
	<return>return <expr><ternary><condition><expr><name>f</name></expr>?</condition><then><expr><operator>-</operator><name>s</name></expr></then><else>:<expr><name>s</name></expr></else></ternary></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name><init>=<expr><literal type="number">1e5</literal><operator>+</operator><literal type="number">10</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>c</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<struct>struct <name>Edge</name><block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>to</name></decl>,<decl><type ref="prev"/><name>nxt</name></decl>;</decl_stmt>
</public>}</block><decl><name><name>e</name><index>[<expr><name>N</name><operator>&lt;&lt;</operator><literal type="number">1</literal></expr>]</index></name></decl>;</struct>
<decl_stmt><decl><type><name>int</name></type> <name><name>head</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name>ecnt</name></decl>,<decl><type ref="prev"/><name><name>ind</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>AddEdge</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
	<expr_stmt><expr><name><name>e</name><index>[<expr><operator>++</operator><name>ecnt</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>Edge</name><operator>)</operator><block>{<expr><name>v</name></expr>,<expr><name><name>head</name><index>[<expr><name>u</name></expr>]</index></name></expr>}</block></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>head</name><index>[<expr><name>u</name></expr>]</index></name><operator>=</operator><name>ecnt</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ind</name><index>[<expr><name>u</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
}</block></function>


<decl_stmt><decl><type><name>ll</name></type> <name>idx</name></decl>,<decl><type ref="prev"/><name>idy</name></decl>,<decl><type ref="prev"/><name>mi</name><init>=<expr><literal type="number">1e18</literal></expr></init></decl>,<decl><type ref="prev"/><name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>ans</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>f</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>t</name><init>=<expr><literal type="number">6</literal><operator>-</operator><name>a</name><operator>-</operator><name>b</name></expr></init></decl>;</decl_stmt>
	<comment type="line">//cout&lt;&lt;"%"&lt;&lt;u&lt;&lt;' '&lt;&lt;t&lt;&lt;endl;</comment>
	<expr_stmt><expr><name><name>ans</name><index>[<expr><name>u</name></expr>]</index></name><operator>=</operator><name>t</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>res</name><operator>+=</operator><name><name>c</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name><name>head</name><index>[<expr><name>u</name></expr>]</index></name></expr></init></decl>;</init><condition><expr><name>i</name></expr>;</condition><incr><expr><name>i</name><operator>=</operator><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nxt</name></expr></incr>)</control> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>v</name><init>=<expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>to</name></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>v</name><operator>==</operator><name>f</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
		<expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>v</name></expr></argument>,<argument><expr><name>u</name></expr></argument>,<argument><expr><name>t</name></expr></argument>,<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
}</block></function>



<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{ 
	<expr_stmt><expr><name>n</name><operator>=</operator><call><name>rd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument><literal type="number">3</literal></argument>)</argument_list></macro> <macro><name>rep</name><argument_list>(<argument>j</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro> <expr_stmt><expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><call><name>rd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">2</literal></argument>,<argument>n</argument>)</argument_list></macro> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>u</name><init>=<expr><call><name>rd</name><argument_list>()</argument_list></call></expr></init></decl>,<decl><type ref="prev"/><name>v</name><init>=<expr><call><name>rd</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>AddEdge</name><argument_list>(<argument><expr><name>u</name></expr></argument>,<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>AddEdge</name><argument_list>(<argument><expr><name>v</name></expr></argument>,<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block>
	<decl_stmt><decl><type><name>int</name></type> <name>fl</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro> <if>if<condition>(<expr><name><name>ind</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;=</operator><literal type="number">3</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>fl</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
	<if>if<condition>(<expr><name>fl</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><literal type="number">0</literal></expr>;</return></block></then></if>
	<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro> <if>if<condition>(<expr><name><name>ind</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>reg</name> <name>int</name></type> <name>j</name><init>=<expr><name><name>head</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</init><condition><expr><name>j</name></expr>;</condition><incr><expr><name>j</name><operator>=</operator><name><name>e</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>nxt</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>t</name><operator>=</operator><name><name>e</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>to</name></expr>;</expr_stmt></block></for>
		<decl_stmt><decl><type><name>int</name></type> <name>v</name></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>reg</name> <name>int</name></type> <name>j</name><init>=<expr><name><name>head</name><index>[<expr><name>t</name></expr>]</index></name></expr></init></decl>;</init><condition><expr><name>j</name></expr>;</condition><incr><expr><name>j</name><operator>=</operator><name><name>e</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>nxt</name></expr></incr>)</control> <block type="pseudo"><if>if<condition>(<expr><name><name>e</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>to</name><operator>!=</operator><name>i</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>v</name><operator>=</operator><name><name>e</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>to</name></expr>;</expr_stmt></block></then></if></block></for>
		<comment type="line">//cout&lt;&lt;i&lt;&lt;' '&lt;&lt;t&lt;&lt;' '&lt;&lt;v&lt;&lt;endl;</comment>
		<comment type="line">//puts("");</comment>
		<macro><name>rep</name><argument_list>(<argument>a</argument>,<argument><literal type="number">1</literal></argument>,<argument><literal type="number">3</literal></argument>)</argument_list></macro> <macro><name>rep</name><argument_list>(<argument>b</argument>,<argument><literal type="number">1</literal></argument>,<argument><literal type="number">3</literal></argument>)</argument_list></macro> <if>if<condition>(<expr><name>a</name><operator>!=</operator><name>b</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>res</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>res</name><operator>+=</operator><name><name>c</name><index>[<expr><name>a</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>c</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>t</name></expr>]</index></name></expr>;</expr_stmt>
			<comment type="line">//cout&lt;&lt;"#"&lt;&lt;a&lt;&lt;' '&lt;&lt;b&lt;&lt;endl;</comment>
			<expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>v</name></expr></argument>,<argument><expr><name>t</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if<condition>(<expr><name>res</name><operator>&lt;</operator><name>mi</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>mi</name><operator>=</operator><name>res</name></expr><operator>,</operator><expr><name>idx</name><operator>=</operator><name>a</name></expr><operator>,</operator><expr><name>idy</name><operator>=</operator><name>b</name></expr>;</expr_stmt></block></then></if>
		}</block></then></if>
		<expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>idx</name></expr><operator>,</operator><expr><name><name>ans</name><index>[<expr><name>t</name></expr>]</index></name><operator>=</operator><name>idy</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>v</name></expr></argument>,<argument><expr><name>t</name></expr></argument>,<argument><expr><name>idy</name></expr></argument>,<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>mi</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>idx</name></expr><operator>,</operator><expr><name><name>ans</name><index>[<expr><name>t</name></expr>]</index></name><operator>=</operator><name>idy</name></expr>;</expr_stmt>
		<macro><name>rep</name><argument_list>(<argument>j</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d "</literal></expr></argument>,<argument><expr><name><name>ans</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	}</block></then></if>
}</block></function>




</unit>
