<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28933631_62493298.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>,<decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
<function><type><name>char</name></type> <name>op</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{
	<if>if<condition>(<expr><name>c</name><operator>==</operator><literal type="char">'W'</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="char">'B'</literal></expr>;</return></block></then>
	<else>else <block type="pseudo"><return>return <expr><literal type="char">'W'</literal></expr>;</return></block></else></if>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>k</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>s</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>t</name><operator>=</operator><name>s</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>s</name><operator>=</operator><literal type="char">' '</literal><operator>+</operator><name>s</name><operator>+</operator><name>s</name><operator>+</operator><literal type="char">' '</literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>fr</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>flag</name><init>=<expr><operator>(</operator><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>==</operator><name><name>s</name><index>[<expr><name>n</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">2</literal><operator>*</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name><name>s</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><then>
		<block>{
			<if>if<condition>(<expr><operator>!</operator><name>flag</name></expr>)</condition><then>
			<block>{
				<decl_stmt><decl><type><name>int</name></type> <name>l</name><init>=<expr><name>fr</name></expr></init></decl>,<decl><type ref="prev"/><name>r</name><init>=<expr><name>i</name><operator>-</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
				<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>l</name><operator>&lt;=</operator><name>r</name> <operator>and</operator> <name>j</name><operator>&lt;=</operator><name>k</name></expr>;</condition><incr><expr><name>l</name><operator>++</operator></expr><operator>,</operator><expr><name>r</name><operator>--</operator></expr><operator>,</operator><expr><name>j</name><operator>++</operator></expr></incr>)</control>
					<block type="pseudo"><expr_stmt><expr><name><name>s</name><index>[<expr><name>l</name></expr>]</index></name><operator>=</operator><name><name>s</name><index>[<expr><name>fr</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr><operator>,</operator><expr><name><name>s</name><index>[<expr><name>r</name></expr>]</index></name><operator>=</operator><name><name>s</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block></for>
				<if>if<condition>(<expr><operator>(</operator><name>k</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator> <operator>and</operator> <name>l</name><operator>&lt;=</operator><name>r</name></expr>)</condition><then>
					<block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><name>l</name></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>r</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>  <block type="pseudo"><expr_stmt><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><call><name>op</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for></block></then></if>
				<expr_stmt><expr><name>flag</name><operator>=</operator><literal type="boolean">true</literal></expr>;</expr_stmt>
			 }</block></then></if> 
		}</block></then>
		<elseif>else <if>if<condition>(<expr><name>flag</name></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>fr</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>flag</name><operator>=</operator><literal type="boolean">false</literal></expr>;</expr_stmt>
		}</block></then></if></elseif></if>
	}</block></for>
	<decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>;</decl_stmt>
	<if>if<condition>(<expr><name><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><name><name>t</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><then>  <block type="pseudo"><expr_stmt><expr><name>pos</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then>
	<else>else
	<block>{
		<for>for<control>(<init><expr><name>pos</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name><name>t</name><index>[<expr><name>pos</name></expr>]</index></name><operator>!=</operator><name><name>t</name><index>[<expr><name>pos</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>and</operator> <name>pos</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>pos</name><operator>++</operator></expr></incr>)</control>  <block type="pseudo"><empty_stmt>;</empty_stmt></block></for>
		<if>if<condition>(<expr><name>pos</name><operator>==</operator><name>n</name></expr>)</condition><then> 	<block type="pseudo"><expr_stmt><expr><name>pos</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
	}</block></else></if>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>pos</name><operator>+</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>  <block type="pseudo"><expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>pos</name></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>  <block type="pseudo"><expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
