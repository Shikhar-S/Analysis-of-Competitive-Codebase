<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28933790_62481339.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>w</name></decl>;</decl_stmt>
<function><type><name><name>pair</name> <argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>, <argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></type> <name>fun</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>x</name> <init>= <expr><name>p</name> <operator>/</operator> <name>w</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>left</name> <init>= <expr><name>p</name> <operator>-</operator> <operator>(</operator><name>x</name> <operator>*</operator> <name>w</name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>mod</name> <init>= <expr><operator>(</operator><name>d</name> <operator>-</operator> <operator>(</operator><name>left</name> <operator>%</operator> <name>d</name><operator>)</operator><operator>)</operator> <operator>%</operator> <name>d</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>K</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>long</name> <name>long</name></type> <name>tod</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>tod</name> <operator>&lt;=</operator> <name>d</name></expr>;</condition> <incr><expr><name>tod</name><operator>++</operator></expr></incr>)</control> <block>{
        <comment type="line">//cout &lt;&lt; left &lt;&lt; " " &lt;&lt; w &lt;&lt; " " &lt;&lt; tod &lt;&lt; " " &lt;&lt; d &lt;&lt; " " &lt;&lt; mod &lt;&lt; "\n";</comment>
        <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>w</name> <operator>*</operator> <name>tod</name><operator>)</operator> <operator>%</operator> <name>d</name><operator>)</operator> <operator>==</operator> <name>mod</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>K</name> <operator>=</operator> <name>tod</name></expr>;</expr_stmt>
            <break>break;</break>
        }</block></then></if>
    }</block></for>
    <if>if <condition>(<expr><name>K</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>K</name> <operator>&gt;</operator> <name>x</name></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>;</return></block></then></if>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>y</name> <init>= <expr><operator>(</operator><name>left</name> <operator>+</operator> <name>w</name> <operator>*</operator> <name>K</name><operator>)</operator> <operator>/</operator> <name>d</name></expr></init></decl>;</decl_stmt>
    <comment type="line">//cout &lt;&lt; x - K &lt;&lt; " " &lt;&lt; y &lt;&lt; " " &lt;&lt; K &lt;&lt; " " &lt;&lt; mod &lt;&lt; " " &lt;&lt; left &lt;&lt; "\n";</comment>
    <if>if <condition>(<expr><operator>(</operator><name>x</name> <operator>-</operator> <name>K</name> <operator>+</operator> <name>y</name><operator>)</operator> <operator>&gt;</operator> <name>n</name></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>;</return></block></then></if>
    <if>if <condition>(<expr><name>w</name> <operator>&gt;</operator> <name>d</name></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><block>{<expr><name>x</name> <operator>-</operator> <name>K</name></expr>, <expr><name>y</name></expr>}</block></expr>;</return></block></then>
    <else>else
        <block type="pseudo"><return>return <expr><block>{<expr><name>y</name></expr>, <expr><name>x</name> <operator>-</operator> <name>K</name></expr>}</block></expr>;</return></block></else></if>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>p</name> <operator>&gt;&gt;</operator> <name>w</name> <operator>&gt;&gt;</operator> <name>d</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>pair</name> <argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>, <argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></type> <name>p</name> <init>= <expr><call><name>fun</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name><name>p</name><operator>.</operator><name>first</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"-1"</literal></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>p</name><operator>.</operator><name>first</name></name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name><name>p</name><operator>.</operator><name>second</name></name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name>n</name> <operator>-</operator> <name><name>p</name><operator>.</operator><name>first</name></name> <operator>-</operator> <name><name>p</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt>
}</block></function>
</unit>
