<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28892399_62485982.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fstream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;deque&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro>					<cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>q</name></type></parameter>)</parameter_list></cpp:macro>				<cpp:value>q.begin(), q.end()</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list>
	<block>{
	<expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>precision</name></name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>w</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>d</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ans2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ans1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>p</name> <operator>&gt;&gt;</operator> <name>d</name> <operator>&gt;&gt;</operator> <name>w</name></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>q</name> <init>= <expr><name>w</name></expr></init></decl>, <decl><type ref="prev"/><name>r</name> <init>= <expr><name>d</name></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><name>q</name> <operator>!=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>	<block type="pseudo"><expr_stmt><expr><name>q</name> <operator>%=</operator> <name>r</name></expr><operator>,</operator> <expr><call><name>swap</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></while>

	<if>if <condition>(<expr><name>p</name> <operator>%</operator> <name>q</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt></block></then>
	<else>else
		<block>{
		<while>while <condition>(<expr><operator>(</operator><name>w</name> <operator>*</operator> <name>ans2</name> <operator>-</operator> <name>p</name><operator>)</operator> <operator>%</operator> <name>d</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>	<block type="pseudo"><expr_stmt><expr><name>ans2</name><operator>++</operator></expr>;</expr_stmt></block></while>
		<expr_stmt><expr><name>ans1</name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>w</name> <operator>*</operator> <name>ans2</name> <operator>-</operator> <name>p</name><operator>)</operator> <operator>/</operator> <name>d</name></expr>;</expr_stmt>

		<if>if <condition>(<expr><name>ans1</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>ans2</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></then>
		<else>else
			<block>{
			<if>if <condition>(<expr><name>ans1</name> <operator>+</operator> <name>ans2</name> <operator>&gt;</operator> <name>n</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"-1"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></then>
			<else>else <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans1</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name>ans2</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name>n</name> <operator>-</operator> <name>ans1</name> <operator>-</operator> <name>ans2</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></else></if>
			}</block></else></if>
		}</block></else></if>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></function></unit>
