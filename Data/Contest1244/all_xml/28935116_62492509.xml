<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28935116_62492509.cpp"> <cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fr</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PI</name></cpp:macro> <cpp:value>3.1415926535</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mpr</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a.begin(),a.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rall</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a.rbegin(),a.rend()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOS1</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(false);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOS2</name></cpp:macro>    <cpp:value>cin.tie(NULL);cout.tie(NULL);</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<function><type><name>ll</name></type> <name>power</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>res</name> <init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>b</name></expr>)</condition>
    <block>{
        <if>if<condition>(<expr><name>b</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>res</name><operator>%</operator><name>mod</name><operator>*</operator><name>a</name><operator>%</operator><name>mod</name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name>b</name><operator>/=</operator><literal type="number">2</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>a</name><operator>%</operator><name>mod</name><operator>*</operator><name>a</name><operator>%</operator><name>mod</name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><name>res</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name>ll</name></type> <name><name>sieve</name><index>[<expr><literal type="number">1000005</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>pre</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><name><name>sieve</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sieve</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">1000005</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <if>if<condition>(<expr><name><name>sieve</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
        <block>{
            <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">2</literal><operator>*</operator><name>i</name></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><literal type="number">1000005</literal></expr>;</condition><incr><expr><name>j</name><operator>+=</operator><name>i</name></expr></incr>)</control>
            <block>{
                <expr_stmt><expr><name><name>sieve</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
            }</block></for>
        }</block></then></if>
    }</block></for>
}</block></function>
<decl_stmt><decl><type><name>ll</name></type> <name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>indeg</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type><name><name>adj</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type><name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>vis</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>ans3</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{
  <expr_stmt><expr><name><name>vis</name><index>[<expr><name>s</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><decl><type><name>auto</name></type> <name>it</name> <range>: <expr><name><name>adj</name><index>[<expr><name>s</name></expr>]</index></name></expr></range></decl></init>)</control>
  <block>{
    <if>if<condition>(<expr><operator>!</operator><name><name>vis</name><index>[<expr><name>it</name></expr>]</index></name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></for>
}</block></function>
<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{   
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ONLINE_JUDGE</name></cpp:ifndef>
    <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"input.txt"</literal></expr></argument>,<argument><expr><literal type="string">"r"</literal></expr></argument>,<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"output.txt"</literal></expr></argument>,<argument><expr><literal type="string">"w"</literal></expr></argument>,<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      
      <decl_stmt><decl><type><name>IOS1</name>
      <name>IOS2</name>
      
      <name>ll</name></type> <name>n</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
      <block>{
        <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>p</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></for>
      }</block></for>
      <decl_stmt><decl><type><name>ll</name></type> <name>f</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>ll</name></type> <name>st</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
      <block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>a</name><operator>&gt;&gt;</operator><name>b</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>adj</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>adj</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>indeg</name><index>[<expr><name>a</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>indeg</name><index>[<expr><name>b</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
        <if>if<condition>(<expr><name><name>indeg</name><index>[<expr><name>a</name></expr>]</index></name><operator>&gt;=</operator><literal type="number">3</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>f</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
       <if>if<condition>(<expr><name><name>indeg</name><index>[<expr><name>b</name></expr>]</index></name><operator>&gt;=</operator><literal type="number">3</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>f</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
         
      }</block></for>
      <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
      <block>{
        <if>if<condition>(<expr><name><name>indeg</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name>st</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
          <break>break;</break>
        }</block></then></if>
      }</block></for>
      <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if<condition>(<expr><name>f</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"-1"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></then>
      <else>else
      <block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><literal type="number">1e18</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ll</name></type> <name>ch1</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>ch2</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>ch3</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
          <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
          <block>{
            <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
            <block>{
                <for>for<control>(<init><decl><type><name>int</name></type> <name>k</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>k</name><operator>&lt;=</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
                <block>{
                    <if>if<condition>(<expr><name>i</name><operator>!=</operator><name>j</name> <operator>&amp;&amp;</operator> <name>i</name><operator>!=</operator><name>k</name> <operator>&amp;&amp;</operator> <name>j</name><operator>!=</operator><name>k</name></expr>)</condition><then>
                    <block>{
                      <decl_stmt><decl><type><name>ll</name></type> <name>ans1</name> <init>= <expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>+</operator><name><name>p</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name><name>v</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index></name><operator>+</operator><name><name>p</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name><name>v</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt> 
                       <for>for<control>(<init><decl><type><name>int</name></type> <name>l</name><init>=<expr><literal type="number">4</literal></expr></init></decl>;</init><condition><expr><name>l</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>l</name><operator>++</operator></expr></incr>)</control>
                       <block>{
                          <if>if<condition>(<expr><name>l</name><operator>%</operator><literal type="number">3</literal><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
                          <block type="pseudo"><expr_stmt><expr><name>ans1</name><operator>+=</operator><name><name>p</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name><name>v</name><index>[<expr><name>l</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block></then>
                         <elseif>else <if>if<condition>(<expr><name>l</name><operator>%</operator><literal type="number">3</literal><operator>==</operator><literal type="number">2</literal></expr>)</condition><then>
                            <block type="pseudo"><expr_stmt><expr><name>ans1</name><operator>+=</operator><name><name>p</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name><name>v</name><index>[<expr><name>l</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block></then></if></elseif>
                        <else>else <block type="pseudo"><expr_stmt><expr><name>ans1</name><operator>+=</operator><name><name>p</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name><name>v</name><index>[<expr><name>l</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block></else></if>
                       }</block></for>
                       <if>if<condition>(<expr><name>ans1</name><operator>&lt;</operator><name>ans</name></expr>)</condition><then>
                       <block>{
                        <expr_stmt><expr><name>ans</name> <operator>=</operator> <name>ans1</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>ch1</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>ch2</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>ch3</name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
                       }</block></then></if>
                    }</block></then></if>
                }</block></for>
            }</block></for>
          }</block></for>
          <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>ans3</name><index>[<expr><name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>ch1</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>ans3</name><index>[<expr><name><name>v</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>ch2</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>ans3</name><index>[<expr><name><name>v</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>ch3</name></expr>;</expr_stmt>
          <for>for<control>(<init><decl><type><name>int</name></type> <name>l</name><init>=<expr><literal type="number">4</literal></expr></init></decl>;</init><condition><expr><name>l</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>l</name><operator>++</operator></expr></incr>)</control>
          <block>{
            <if>if<condition>(<expr><name>l</name><operator>%</operator><literal type="number">3</literal><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>ans3</name><index>[<expr><name><name>v</name><index>[<expr><name>l</name></expr>]</index></name></expr>]</index></name><operator>=</operator> <name>ch1</name></expr>;</expr_stmt></block></then>
            <elseif>else <if>if<condition>(<expr><name>l</name><operator>%</operator><literal type="number">3</literal><operator>==</operator><literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>ans3</name><index>[<expr><name><name>v</name><index>[<expr><name>l</name></expr>]</index></name></expr>]</index></name><operator>=</operator><name>ch2</name></expr>;</expr_stmt></block></then></if></elseif>
            <else>else <block type="pseudo"><expr_stmt><expr><name><name>ans3</name><index>[<expr><name><name>v</name><index>[<expr><name>l</name></expr>]</index></name></expr>]</index></name><operator>=</operator><name>ch3</name></expr>;</expr_stmt></block></else></if>
          }</block></for>
          <for>for<control>(<init><decl><type><name>int</name></type> <name>l</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>l</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>l</name><operator>++</operator></expr></incr>)</control>
          <block>{
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>ans3</name><index>[<expr><name>l</name></expr>]</index></name><operator>&lt;&lt;</operator><literal type="string">" "</literal></expr>;</expr_stmt>
          }</block></for>
      }</block></else></if>
}</block></function>


















</unit>
