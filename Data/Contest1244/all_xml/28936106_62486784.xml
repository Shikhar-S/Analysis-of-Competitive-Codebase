<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28936106_62486784.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;random&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;numeric&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdlib&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>disable</name> <name>:</name> <name>4996</name><name>)</name></cpp:pragma>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ft</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sd</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>__array</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__array).begin(), (__array).end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nl</name></cpp:macro> <cpp:value>'\n'</cpp:value></cpp:define>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>double</name></type> <name>dl</name>;</typedef>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>INF</name> <init>= <expr><call><name><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>max</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>LINF</name> <init>= <expr><call><name><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>max</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>dl</name></type> <name>EPS</name> <init>= <expr><literal type="number">1e-8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>dl</name></type> <name>PI</name> <init>= <expr><call><name>acos</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>random_device</name></type> <name>rnd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><literal type="number">1e5</literal> <operator>+</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>M</name> <init>= <expr><literal type="number">17</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>K</name> <init>= <expr><literal type="number">320</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MOD</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<function><specifier>inline</specifier> <type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>k</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>mp</name></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>val</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>mp</name><index>[<expr><name>val</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
	}</block></for>
	
	<while>while <condition>(<expr><name>k</name> <operator>&amp;&amp;</operator> <call><name><name>mp</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{
		<decl_stmt><decl><type><name>auto</name></type> <name>begin</name> <init>= <expr><call><name><name>mp</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>auto</name></type> <name>last</name> <init>= <expr><call><name>prev</name><argument_list>(<argument><expr><call><name><name>mp</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>int</name></type> <name>cntBeg</name> <init>= <expr><name><name>begin</name><operator>-&gt;</operator><name>second</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>cntLast</name> <init>= <expr><name><name>last</name><operator>-&gt;</operator><name>second</name></name></expr></init></decl>;</decl_stmt>

		<if>if <condition>(<expr><name>cntBeg</name> <operator>&lt;</operator> <name>cntLast</name></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>ll</name></type> <name>dif</name> <init>= <expr><call><name>next</name><argument_list>(<argument><expr><name>begin</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>first</name> <operator>-</operator> <name><name>begin</name><operator>-&gt;</operator><name>first</name></name></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>dif</name> <operator>*</operator> <literal type="number">1LL</literal> <operator>*</operator> <name>cntBeg</name> <operator>&lt;=</operator> <name>k</name></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name>next</name><argument_list>(<argument><expr><name>begin</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>second</name> <operator>+=</operator> <name>cntBeg</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>k</name> <operator>-=</operator> <name>dif</name> <operator>*</operator> <literal type="number">1LL</literal> <operator>*</operator> <name>cntBeg</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>mp</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>begin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then>
			<else>else <block>{
				<decl_stmt><decl><type><name>ll</name></type> <name>newVal</name> <init>= <expr><name><name>begin</name><operator>-&gt;</operator><name>first</name></name> <operator>+</operator> <name>k</name> <operator>/</operator> <name>cntBeg</name></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>mp</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>begin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>mp</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><block>{ <expr><name>newVal</name></expr>, <expr><name>cntBeg</name></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
		}</block></then>
		<else>else <block>{
			<decl_stmt><decl><type><name>ll</name></type> <name>dif</name> <init>= <expr><name><name>last</name><operator>-&gt;</operator><name>first</name></name> <operator>-</operator> <call><name>prev</name><argument_list>(<argument><expr><name>last</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>first</name></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>dif</name> <operator>*</operator> <literal type="number">1LL</literal> <operator>*</operator> <name>cntLast</name> <operator>&lt;=</operator> <name>k</name></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name>prev</name><argument_list>(<argument><expr><name>last</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>second</name> <operator>+=</operator> <name>cntLast</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>k</name> <operator>-=</operator> <name>dif</name> <operator>*</operator> <literal type="number">1LL</literal> <operator>*</operator> <name>cntLast</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>mp</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then>
			<else>else <block>{
				<decl_stmt><decl><type><name>ll</name></type> <name>newVal</name> <init>= <expr><name><name>last</name><operator>-&gt;</operator><name>first</name></name> <operator>-</operator> <name>k</name> <operator>/</operator> <name>cntLast</name></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>mp</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>mp</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><block>{ <expr><name>newVal</name></expr>, <expr><name>cntLast</name></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
		}</block></else></if>
	}</block></while>


	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>prev</name><argument_list>(<argument><expr><call><name><name>mp</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>first</name> <operator>-</operator> <call><name><name>mp</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>first</name> <operator>&lt;&lt;</operator> <name>nl</name></expr>;</expr_stmt>
}</block></function>

<function><specifier>inline</specifier> <type><name>void</name></type> <name>IO</name><parameter_list>()</parameter_list> <block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_SEVA</name></cpp:ifdef>
	<expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"input.txt"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"output.txt"</literal></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>


<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><call><name>IO</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
