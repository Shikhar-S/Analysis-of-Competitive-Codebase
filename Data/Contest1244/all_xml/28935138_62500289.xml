<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28935138_62500289.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL</name></cpp:macro> <cpp:value>long long int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIO</name></cpp:macro> <cpp:value>ios::sync_with_stdio(false)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FRD</name></cpp:macro> <cpp:value>freopen("input.txt","r",stdin)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lowbit</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x&amp;-(x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INF</name></cpp:macro> <cpp:value>1e18</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ms</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(x,0,sizeof x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>push_back(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lson</name></cpp:macro> <cpp:value>l,mid,now&lt;&lt;1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rson</name></cpp:macro> <cpp:value>mid+1,r,now&lt;&lt;1|1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNIQUE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>unique(x.begin(),x.end())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SORT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>sort(x.begin(),x.end())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LISAN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x.erase(UNIQUE(x),x.end())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;int,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pll</name></cpp:macro> <cpp:value>pair&lt;LL,LL&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N</name></cpp:macro> <cpp:value>100010</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>const</specifier> <name>LL</name></type> <name>MOD</name><init>=<expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>T</name></type> <name>Min</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>T</name><modifier>&amp;</modifier></type> <name>b</name></decl></parameter>)</parameter_list><block>{<return>return <expr><ternary><condition><expr><name>a</name><operator>&lt;</operator><name>b</name></expr>?</condition><then><expr><name>a</name></expr></then><else>:<expr><name>b</name></expr></else></ternary></expr>;</return>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>T</name></type> <name>Max</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>T</name><modifier>&amp;</modifier></type> <name>b</name></decl></parameter>)</parameter_list><block>{<return>return <expr><ternary><condition><expr><name>a</name><operator>&lt;</operator><name>b</name></expr>?</condition><then><expr><name>b</name></expr></then><else>:<expr><name>a</name></expr></else></ternary></expr>;</return>}</block></function>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>inc</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>,<parameter><decl><type><name>int</name> <modifier>&amp;</modifier></type><name>v</name></decl></parameter>,<parameter><decl><type><name>int</name> <modifier>&amp;</modifier></type><name>mod</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name>x</name><operator>+=</operator><name>v</name></expr>;</expr_stmt><if>if<condition>(<expr><name>x</name><operator>&gt;=</operator><name>mod</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>x</name><operator>-=</operator><name>mod</name></expr>;</expr_stmt></block></then></if>}</block></function>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>dec</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>,<parameter><decl><type><name>int</name> <modifier>&amp;</modifier></type><name>v</name></decl></parameter>,<parameter><decl><type><name>int</name> <modifier>&amp;</modifier></type><name>mod</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name>x</name><operator>-=</operator><name>v</name></expr>;</expr_stmt><if>if<condition>(<expr><name>x</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>x</name><operator>+=</operator><name>mod</name></expr>;</expr_stmt></block></then></if>}</block></function>
<function><specifier>inline</specifier> <type><name>int</name></type> <name>read</name><parameter_list>()</parameter_list><block>{<decl_stmt><decl><type><name>char</name></type> <name>ch</name> <init>= <expr><call><name>getchar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>f</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt><while>while<condition>(<expr><name><name>ch</name> <argument_list type="generic">&lt; <argument><expr><literal type="char">'0'</literal> <operator>||</operator> <name>ch</name></expr></argument> &gt;</argument_list></name> <literal type="char">'9'</literal></expr>)</condition> <block>{<if>if<condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>f</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if><expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>}</block></while><while>while<condition>(<expr><literal type="char">'0'</literal> <operator>&lt;=</operator> <name>ch</name> <operator>&amp;&amp;</operator> <name>ch</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition> <block>{<expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <name>ch</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt><expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>}</block></while><return>return <expr><name>x</name> <operator>*</operator> <name>f</name></expr>;</return>}</block></function>
<function><specifier>inline</specifier> <type><name>LL</name></type> <name>readl</name><parameter_list>()</parameter_list><block>{<decl_stmt><decl><type><name>char</name></type> <name>ch</name> <init>= <expr><call><name>getchar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><decl_stmt><decl><type><name>LL</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>f</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt><while>while<condition>(<expr><name><name>ch</name> <argument_list type="generic">&lt; <argument><expr><literal type="char">'0'</literal> <operator>||</operator> <name>ch</name></expr></argument> &gt;</argument_list></name> <literal type="char">'9'</literal></expr>)</condition> <block>{<if>if<condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>f</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if><expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>}</block></while><while>while<condition>(<expr><literal type="char">'0'</literal> <operator>&lt;=</operator> <name>ch</name> <operator>&amp;&amp;</operator> <name>ch</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition> <block>{<expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <name>ch</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt><expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>}</block></while><return>return <expr><name>x</name> <operator>*</operator> <name>f</name></expr>;</return>}</block></function>
<decl_stmt><decl><type><name>string</name></type> <name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>update</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list><block>{
	<if>if<condition>(<expr><name>l</name><operator>==</operator><name>r</name></expr>)</condition><then>	<block type="pseudo"><return>return;</return></block></then></if>
	<decl_stmt><decl><type><name>int</name></type> <name>len</name><init>=<expr><name>r</name><operator>-</operator><name>l</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<if>if<condition>(<expr><name>len</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then><block>{
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>cnt</name><init>=<expr><name>k</name></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><operator>(</operator><name>r</name><operator>+</operator><name>l</name><operator>)</operator><operator>/</operator><literal type="number">2</literal><operator>&amp;&amp;</operator><name>cnt</name></expr>;</condition><incr><expr><name>cnt</name><operator>--</operator></expr><operator>,</operator><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
			<expr_stmt><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>str</name><index>[<expr><name>l</name></expr>]</index></name></expr>;</expr_stmt>
		}</block></for>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>r</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>cnt</name><init>=<expr><name>k</name></expr></init></decl>;</init><condition><expr><name>i</name><operator>&gt;=</operator><operator>(</operator><name>r</name><operator>+</operator><name>l</name><operator>)</operator><operator>/</operator><literal type="number">2</literal><operator>&amp;&amp;</operator><name>cnt</name></expr>;</condition><incr><expr><name>cnt</name><operator>--</operator></expr><operator>,</operator><expr><name>i</name><operator>--</operator></expr></incr>)</control><block>{
			<expr_stmt><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>str</name><index>[<expr><name>r</name></expr>]</index></name></expr>;</expr_stmt>
		}</block></for>
		<if>if<condition>(<expr><name>k</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then><block>{
			<decl_stmt><decl><type><name>int</name></type> <name>L</name><init>=<expr><name>l</name><operator>+</operator><name>k</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>R</name><init>=<expr><name>r</name><operator>-</operator><name>k</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
			<while>while<condition>(<expr><name>L</name><operator>&lt;=</operator><name>R</name></expr>)</condition><block>{
				<if>if<condition>(<expr><name><name>str</name><index>[<expr><name>L</name></expr>]</index></name><operator>==</operator><literal type="char">'B'</literal></expr>)</condition><then>	<block type="pseudo"><expr_stmt><expr><name><name>str</name><index>[<expr><name>L</name></expr>]</index></name><operator>=</operator><literal type="char">'W'</literal></expr>;</expr_stmt></block></then>
				<else>else <block type="pseudo"><expr_stmt><expr><name><name>str</name><index>[<expr><name>L</name></expr>]</index></name><operator>=</operator><literal type="char">'B'</literal></expr>;</expr_stmt></block></else></if>
				<expr_stmt><expr><name>L</name><operator>++</operator></expr>;</expr_stmt>
			}</block></while>
		}</block></then></if>
	}</block></then>
	<else>else<block>{
		<comment type="line">//cout&lt;&lt;l&lt;&lt;' '&lt;&lt;r&lt;&lt;' '&lt;&lt;len&lt;&lt;endl;</comment>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>cnt</name><init>=<expr><name>k</name></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>l</name><operator>+</operator><name>len</name><operator>/</operator><literal type="number">2</literal><operator>&amp;&amp;</operator><name>cnt</name></expr>;</condition><incr><expr><name>cnt</name><operator>--</operator></expr><operator>,</operator><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
			<expr_stmt><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>str</name><index>[<expr><name>l</name></expr>]</index></name></expr>;</expr_stmt>
		}</block></for>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>r</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>cnt</name><init>=<expr><name>k</name></expr></init></decl>;</init><condition><expr><name>i</name><operator>&gt;</operator><name>r</name><operator>-</operator><name>len</name><operator>/</operator><literal type="number">2</literal><operator>&amp;&amp;</operator><name>cnt</name></expr>;</condition><incr><expr><name>cnt</name><operator>--</operator></expr><operator>,</operator><expr><name>i</name><operator>--</operator></expr></incr>)</control><block>{
			<expr_stmt><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>str</name><index>[<expr><name>r</name></expr>]</index></name></expr>;</expr_stmt>
		}</block></for>
		<if>if<condition>(<expr><name>k</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then><block>{
			<decl_stmt><decl><type><name>int</name></type> <name>L</name><init>=<expr><name>l</name><operator>+</operator><name>k</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>R</name><init>=<expr><name>r</name><operator>-</operator><name>k</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
			<while>while<condition>(<expr><name>L</name><operator>&lt;=</operator><name>R</name></expr>)</condition><block>{
				<if>if<condition>(<expr><name><name>str</name><index>[<expr><name>L</name></expr>]</index></name><operator>==</operator><literal type="char">'B'</literal></expr>)</condition><then>	<block type="pseudo"><expr_stmt><expr><name><name>str</name><index>[<expr><name>L</name></expr>]</index></name><operator>=</operator><literal type="char">'W'</literal></expr>;</expr_stmt></block></then>
				<else>else <block type="pseudo"><expr_stmt><expr><name><name>str</name><index>[<expr><name>L</name></expr>]</index></name><operator>=</operator><literal type="char">'B'</literal></expr>;</expr_stmt></block></else></if>
				<expr_stmt><expr><name>L</name><operator>++</operator></expr>;</expr_stmt>
			}</block></while>
		}</block></then></if>
	}</block></else></if>
}</block></function>
<function><type><name>void</name></type> <name>solve</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list><block>{
<comment type="line">//	cout&lt;&lt;l&lt;&lt;' '&lt;&lt;r&lt;&lt;endl;</comment>
<comment type="line">//	for(int i=n;i&lt;=r;i++)</comment>
<comment type="line">//		cout&lt;&lt;str[i];</comment>
<comment type="line">//	for(int i=l;i&lt;n;i++){</comment>
<comment type="line">//		cout&lt;&lt;str[i];</comment>
<comment type="line">//	}</comment>
<comment type="line">//	cout&lt;&lt;endl;</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>lastpt</name><init>=<expr><name>l</name></expr></init></decl>,<decl><type ref="prev"/><name>nowpt</name><init>=<expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>flag</name><init>=<expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>nowpt</name><operator>&lt;=</operator><name>r</name></expr>)</condition><block>{
		<if>if<condition>(<expr><name><name>str</name><index>[<expr><name>nowpt</name></expr>]</index></name><operator>==</operator><name><name>str</name><index>[<expr><name>nowpt</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><then><block>{
			<expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name>lastpt</name></expr></argument>,<argument><expr><name>nowpt</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>lastpt</name><operator>=</operator><name>nowpt</name></expr>;</expr_stmt>
<comment type="line">//			for(int i=n;i&lt;=r;i++)</comment>
<comment type="line">//				cout&lt;&lt;str[i];</comment>
<comment type="line">//			for(int i=l;i&lt;n;i++){</comment>
<comment type="line">//				cout&lt;&lt;str[i];</comment>
<comment type="line">//			}</comment>
<comment type="line">//			cout&lt;&lt;endl;</comment>
		}</block></then></if>
		<expr_stmt><expr><name>nowpt</name><operator>++</operator></expr>;</expr_stmt>
	}</block></while>
	<expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name>lastpt</name></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>n</name></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>r</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>l</name></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	}</block></for>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ONLINE_JUDGE</name></cpp:ifndef>
    	<decl_stmt><decl><type><name>int</name></type> <name>startTime</name> <init>= <expr><call><name>clock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>FRD</name></expr>;</expr_stmt>
	<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name>FIO</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>k</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>str</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>flag</name><init>=<expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
	<if>if<condition>(<expr><name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><name><name>str</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><then>	<block type="pseudo"><expr_stmt><expr><name>flag</name><operator>=</operator><literal type="boolean">false</literal></expr>;</expr_stmt></block></then></if>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>str</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<if>if<condition>(<expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name><name>str</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><then>	<block type="pseudo"><expr_stmt><expr><name>flag</name><operator>=</operator><literal type="boolean">false</literal></expr>;</expr_stmt></block></then></if>
	}</block></for>
	<if>if<condition>(<expr><name>flag</name></expr>)</condition><then><block>{
		<if>if<condition>(<expr><name>k</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then><block>{
			<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>str</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
				<if>if<condition>(<expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'B'</literal></expr>)</condition><then>	<block type="pseudo"><expr_stmt><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="char">'W'</literal></expr>;</expr_stmt></block></then>
				<else>else <block type="pseudo"><expr_stmt><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="char">'B'</literal></expr>;</expr_stmt></block></else></if>
			}</block></for>
			<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>str</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
		}</block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>str</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></else></if>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></then>
	<else>else<block>{
		<expr_stmt><expr><name>str</name><operator>+=</operator><name>str</name></expr>;</expr_stmt>
		<if>if<condition>(<expr><name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><name><name>str</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><then>	<block type="pseudo"><expr_stmt><expr><call><name>solve</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
		<else>else<block>{
			<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
				<if>if<condition>(<expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name><name>str</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><then><block>{
					<expr_stmt><expr><call><name>solve</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>i</name><operator>+</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				}</block></then></if>
			}</block></for>
		}</block></else></if>
	}</block></else></if>
	<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ONLINE_JUDGE</name></cpp:ifndef>
    	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Time = %dms\n"</literal></expr></argument>, <argument><expr><call><name>clock</name><argument_list>()</argument_list></call> <operator>-</operator> <name>startTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>









</unit>
