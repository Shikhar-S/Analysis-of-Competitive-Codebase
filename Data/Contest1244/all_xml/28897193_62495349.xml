<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28897193_62495349.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name> <init>= <expr><literal type="number">1e5</literal><operator>+</operator><literal type="number">23</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>k</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator> <name>k</name></expr> ;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><name>a</name><operator>+</operator><name>i</name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><name><name>m</name><index>[<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>cnt</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>k</name><operator>&gt;</operator><literal type="number">0</literal><operator>&amp;&amp;</operator><call><name><name>m</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&gt;=</operator><literal type="number">2</literal></expr>)</condition><block>{
        <decl_stmt><decl><type><name>auto</name></type> <name>it</name><init>=<expr><call><name><name>m</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>,<decl><type ref="prev"/><name>ite</name><init>=<expr><call><name><name>m</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><expr_stmt><expr><name>ite</name><operator>--</operator></expr>;</expr_stmt>
        <if>if<condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>second</name></name><operator>&lt;=</operator><name><name>ite</name><operator>-&gt;</operator><name>second</name></name></expr>)</condition><then><block>{
            <decl_stmt><decl><type><name>int</name></type> <name>x</name><init>=<expr><name><name>it</name><operator>-&gt;</operator><name>first</name></name></expr></init></decl>,<decl><type ref="prev"/><name>y</name><init>=<expr><name><name>it</name><operator>-&gt;</operator><name>second</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>it</name><operator>++</operator></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>x2</name><init>=<expr><name><name>it</name><operator>-&gt;</operator><name>first</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>dif</name><init>=<expr><call><name>abs</name><argument_list>(<argument><expr><name>x2</name><operator>-</operator><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if<condition>(<expr><literal type="number">1ll</literal><operator>*</operator><name>dif</name><operator>*</operator><name>y</name><operator>&lt;=</operator><name>k</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>k</name><operator>-=</operator><literal type="number">1ll</literal><operator>*</operator><name>dif</name><operator>*</operator><name>y</name></expr><operator>,</operator><expr><name><name>m</name><index>[<expr><name>x2</name></expr>]</index></name><operator>+=</operator><name>y</name></expr>;</expr_stmt></block></then>
            <else>else <block type="pseudo"><expr_stmt><expr><name>x</name><operator>+=</operator><operator>(</operator><name>k</name><operator>/</operator><name>y</name><operator>)</operator></expr><operator>,</operator><expr><name><name>m</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>y</name><operator>)</operator></expr><operator>,</operator><expr><name>k</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></else></if>
        }</block></then>
        <else>else<block>{
            <decl_stmt><decl><type><name>int</name></type> <name>x</name><init>=<expr><name><name>ite</name><operator>-&gt;</operator><name>first</name></name></expr></init></decl>,<decl><type ref="prev"/><name>y</name><init>=<expr><name><name>ite</name><operator>-&gt;</operator><name>second</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>ite</name><operator>--</operator></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>x2</name><init>=<expr><name><name>ite</name><operator>-&gt;</operator><name>first</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>dif</name><init>=<expr><call><name>abs</name><argument_list>(<argument><expr><name>x</name><operator>-</operator><name>x2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if<condition>(<expr><literal type="number">1ll</literal><operator>*</operator><name>dif</name><operator>*</operator><name>y</name><operator>&lt;=</operator><name>k</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>k</name><operator>-=</operator><literal type="number">1ll</literal><operator>*</operator><name>dif</name><operator>*</operator><name>y</name></expr><operator>,</operator><expr><name><name>m</name><index>[<expr><name>x2</name></expr>]</index></name><operator>+=</operator><name>y</name></expr>;</expr_stmt></block></then>
            <else>else <block type="pseudo"><expr_stmt><expr><name>x</name><operator>-=</operator><operator>(</operator><name>k</name><operator>/</operator><name>y</name><operator>)</operator></expr><operator>,</operator><expr><name><name>m</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><name>y</name></expr><operator>,</operator><expr><name>k</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></else></if>
        }</block></else></if>
    }</block></while>
    <if>if<condition>(<expr><call><name><name>m</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
    <else>else<block>{
        <decl_stmt><decl><type><name>auto</name></type> <name>it</name><init>=<expr><call><name><name>m</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>,<decl><type ref="prev"/><name>ite</name><init>=<expr><call><name><name>m</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><expr_stmt><expr><name>ite</name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><name><name>ite</name><operator>-&gt;</operator><name>first</name></name><operator>-</operator><name><name>it</name><operator>-&gt;</operator><name>first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
}</block></function>
</unit>
