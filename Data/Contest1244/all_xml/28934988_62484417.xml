<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28934988_62484417.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits\stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name> <init>= <expr><literal type="number">1e5</literal> <operator>+</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>LL</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LL</name></type> <name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pii</name></type> <name><name>b</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%I64d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>a</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>a</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>cnt</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>head</name></decl>, <decl><type ref="prev"/><name>tail</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>tail</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition><incr/>)</control> <block>{
        <expr_stmt><expr><name>cnt</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <while>while <condition>(<expr><operator>++</operator><name>i</name> <operator>&lt;=</operator> <name>n</name> <operator>&amp;&amp;</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>a</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition>
            <block type="pseudo"><expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt></block></while>
        <expr_stmt><expr><name><name>b</name><index>[<expr><operator>++</operator><name>tail</name></expr>]</index></name> <operator>=</operator> <call><name>make_pair</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <if>if <condition>(<expr><name>tail</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"0\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>
    <decl_stmt><decl><type><name>LL</name></type> <name>sum</name> <init>= <expr><name>k</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>head</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>head</name> <operator>&lt;</operator> <name>tail</name></expr>)</condition> <block>{
        <if>if <condition>(<expr><name><name>b</name><index>[<expr><name>head</name></expr>]</index></name><operator>.</operator><name>second</name> <operator>&lt;</operator> <name><name>b</name><index>[<expr><name>tail</name></expr>]</index></name><operator>.</operator><name>second</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>LL</name></type> <name>cnt</name> <init>= <expr><call><name>LL</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><name>head</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>first</name> <operator>-</operator> <name><name>b</name><index>[<expr><name>head</name></expr>]</index></name><operator>.</operator><name>first</name></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>b</name><index>[<expr><name>head</name></expr>]</index></name><operator>.</operator><name>second</name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>cnt</name> <operator>&lt;=</operator> <name>sum</name></expr>)</condition><then><block>{
                <expr_stmt><expr><name>sum</name> <operator>-=</operator> <name>cnt</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>head</name><operator>++</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>b</name><index>[<expr><name>head</name></expr>]</index></name><operator>.</operator><name>second</name> <operator>+=</operator> <name><name>b</name><index>[<expr><name>head</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>second</name></expr>;</expr_stmt>
            }</block></then>
            <else>else<block>{
                <expr_stmt><expr><name><name>b</name><index>[<expr><name>head</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>+=</operator> <name>sum</name> <operator>/</operator> <name><name>b</name><index>[<expr><name>head</name></expr>]</index></name><operator>.</operator><name>second</name></expr>;</expr_stmt>
                <break>break;</break>
            }</block></else></if>
        }</block></then>
        <else>else<block>{
            <decl_stmt><decl><type><name>LL</name></type> <name>cnt</name> <init>= <expr><call><name>LL</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><name>tail</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>-</operator> <name><name>b</name><index>[<expr><name>tail</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>first</name></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>b</name><index>[<expr><name>tail</name></expr>]</index></name><operator>.</operator><name>second</name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>cnt</name> <operator>&lt;=</operator> <name>sum</name></expr>)</condition><then><block>{
                <expr_stmt><expr><name>sum</name> <operator>-=</operator> <name>cnt</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>tail</name><operator>--</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>b</name><index>[<expr><name>tail</name></expr>]</index></name><operator>.</operator><name>second</name> <operator>+=</operator> <name><name>b</name><index>[<expr><name>tail</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>second</name></expr>;</expr_stmt>
            }</block></then>
            <else>else<block>{
                <expr_stmt><expr><name><name>b</name><index>[<expr><name>tail</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>-=</operator> <name>sum</name> <operator>/</operator> <name><name>b</name><index>[<expr><name>tail</name></expr>]</index></name><operator>.</operator><name>second</name></expr>;</expr_stmt>
                <break>break;</break>
            }</block></else></if>
        }</block></else></if>
    }</block></while>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><name>tail</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>-</operator> <name><name>b</name><index>[<expr><name>head</name></expr>]</index></name><operator>.</operator><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
