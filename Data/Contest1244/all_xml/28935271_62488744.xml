<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28935271_62488744.cpp"><comment type="line">//#include "pch.h"</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;list&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>var</name></cpp:macro> <cpp:value>auto</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>'\n'</cpp:value></cpp:define>


<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type><name>m</name></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>x</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>m</name><index>[<expr><name>x</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
	}</block></for>
	<decl_stmt><decl><type><name><name>list</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>pairs</name></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>auto</name></type> <name>a</name> <range>: <expr><name>m</name></expr></range></decl></init>)</control>
		<block type="pseudo"><expr_stmt><expr><call><name><name>pairs</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>

	<expr_stmt><expr><call><name><name>pairs</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>lhs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>rhs</name></decl></parameter>)</parameter_list>
	<block>{
		<return>return <expr><name><name>lhs</name><operator>.</operator><name>first</name></name> <operator>&lt;</operator> <name><name>rhs</name><operator>.</operator><name>first</name></name></expr>;</return>
	}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition>
	<block>{
		<if>if <condition>(<expr><call><name><name>pairs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<return>return;</return>
		}</block></then></if>
		<if>if <condition>(<expr><call><name><name>pairs</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call><operator>.</operator><name>second</name> <operator>&lt;</operator> <call><name><name>pairs</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>second</name></expr>)</condition><then>
		<block>{
			<decl_stmt><decl><type><name>var</name></type> <name>fst</name> <init>= <expr><call><name><name>pairs</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>pairs</name><operator>.</operator><name>pop_front</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>var</name></type> <name>snd</name> <init>= <expr><call><name><name>pairs</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>k</name> <operator>&lt;</operator> <name><name>fst</name><operator>.</operator><name>second</name></name><operator>*</operator><operator>(</operator><name><name>snd</name><operator>.</operator><name>first</name></name> <operator>-</operator> <name><name>fst</name><operator>.</operator><name>first</name></name><operator>)</operator></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name><name>pairs</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>first</name> <operator>-</operator> <name><name>fst</name><operator>.</operator><name>first</name></name> <operator>-</operator> <name>k</name> <operator>/</operator> <name><name>fst</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt>
				<return>return;</return>
			}</block></then>
			<else>else
			<block>{
				<expr_stmt><expr><name>k</name> <operator>-=</operator> <name><name>fst</name><operator>.</operator><name>second</name></name><operator>*</operator><operator>(</operator><name><name>snd</name><operator>.</operator><name>first</name></name> <operator>-</operator> <name><name>fst</name><operator>.</operator><name>first</name></name><operator>)</operator></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>pairs</name><operator>.</operator><name>pop_front</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>snd</name><operator>.</operator><name>second</name></name> <operator>+=</operator> <name><name>fst</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>pairs</name><operator>.</operator><name>push_front</name></name><argument_list>(<argument><expr><name>snd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
		}</block></then>
		<else>else
		<block>{
			<decl_stmt><decl><type><name>var</name></type> <name>fst</name> <init>= <expr><call><name><name>pairs</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>pairs</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>var</name></type> <name>snd</name> <init>= <expr><call><name><name>pairs</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>k</name> <operator>&lt;</operator> <name><name>fst</name><operator>.</operator><name>second</name></name><operator>*</operator><operator>(</operator><name><name>fst</name><operator>.</operator><name>first</name></name> <operator>-</operator> <name><name>snd</name><operator>.</operator><name>first</name></name><operator>)</operator></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>fst</name><operator>.</operator><name>first</name></name> <operator>-</operator> <call><name><name>pairs</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call><operator>.</operator><name>first</name> <operator>-</operator> <name>k</name> <operator>/</operator> <name><name>fst</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt>
				<return>return;</return>
			}</block></then>
			<else>else
			<block>{
				<expr_stmt><expr><name>k</name> <operator>-=</operator> <name><name>fst</name><operator>.</operator><name>second</name></name><operator>*</operator><operator>(</operator><name><name>fst</name><operator>.</operator><name>first</name></name> <operator>-</operator> <name><name>snd</name><operator>.</operator><name>first</name></name><operator>)</operator></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>pairs</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>snd</name><operator>.</operator><name>second</name></name> <operator>+=</operator> <name><name>fst</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>pairs</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>snd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
		}</block></else></if>
	}</block></while>

}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<comment type="line">//cin &gt;&gt; t;</comment>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>t</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></for>
}</block></function></unit>
