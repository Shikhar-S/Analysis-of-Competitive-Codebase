<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28931759_62481366.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<using>using <name>LL</name><init>=<type><name>long</name> <name>long</name></type></init>;</using>

<decl_stmt><decl><type><name>LL</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>p</name></decl>,<decl><type ref="prev"/><name>d</name></decl>,<decl><type ref="prev"/><name>w</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>LL</name></expr></argument>&gt;</argument_list></name></type> <name>V</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld%lld%lld%lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>w</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>LL</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>w</name><operator>-</operator><name>d</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><if>if<condition>(<expr><operator>(</operator><name>d</name><operator>*</operator><operator>(</operator><name>n</name><operator>-</operator><name>i</name><operator>)</operator><operator>%</operator><operator>(</operator><name>w</name><operator>-</operator><name>d</name><operator>)</operator><operator>+</operator><name>w</name><operator>-</operator><name>d</name><operator>)</operator><operator>%</operator><operator>(</operator><name>w</name><operator>-</operator><name>d</name><operator>)</operator><operator>==</operator><name>p</name><operator>%</operator><operator>(</operator><name>w</name><operator>-</operator><name>d</name><operator>)</operator></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>V</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></block></for>
    <for>for<control>(<init><decl><type><name>LL</name> <modifier>&amp;</modifier></type><name>t</name><range>:<expr><name>V</name></expr></range></decl></init>)</control>
    <block>{
        <decl_stmt><decl><type><name>LL</name></type> <name>ss</name><init>=<expr><operator>(</operator><name>w</name><operator>*</operator><operator>(</operator><name>n</name><operator>-</operator><name>t</name><operator>)</operator><operator>-</operator><name>p</name><operator>)</operator><operator>/</operator><operator>(</operator><name>w</name><operator>-</operator><name>d</name><operator>)</operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>LL</name></type> <name>k</name></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>ss</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>k</name> <operator>=</operator> <operator>(</operator><operator>-</operator><name>ss</name><operator>)</operator> <operator>/</operator> <name>w</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <if>if <condition>(<expr><operator>(</operator><operator>-</operator><name>ss</name><operator>)</operator> <operator>%</operator> <name>w</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>k</name><operator>--</operator></expr>;</expr_stmt></block></then></if>
        }</block></then>
        <else>else
            <block type="pseudo"><expr_stmt><expr><name>k</name><operator>=</operator><name>ss</name><operator>/</operator><name>w</name></expr>;</expr_stmt></block></else></if>
        <decl_stmt><decl><type><name>LL</name></type> <name>y</name><init>=<expr><operator>-</operator><name>w</name><operator>*</operator><name>k</name><operator>+</operator><name>ss</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>LL</name></type> <name>z</name><init>=<expr><name>k</name><operator>*</operator><operator>(</operator><name>w</name><operator>-</operator><name>d</name><operator>)</operator><operator>+</operator><name>t</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>LL</name></type> <name>x</name><init>=<expr><name>n</name><operator>-</operator><name>y</name><operator>-</operator><name>z</name></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>x</name><operator>&gt;=</operator><literal type="number">0</literal><operator>&amp;&amp;</operator><name>y</name><operator>&gt;=</operator><literal type="number">0</literal><operator>&amp;&amp;</operator><name>z</name><operator>&gt;=</operator><literal type="number">0</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld %lld %lld"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        }</block></then></if>
    }</block></for>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
