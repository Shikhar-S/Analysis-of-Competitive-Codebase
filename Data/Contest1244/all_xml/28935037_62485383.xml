<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28935037_62485383.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = a; i &lt; (b); ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>repr</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = (b) - 1; i &gt;= (a); --i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>repChar</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (char i = 'a'; i &lt;= 'z'; i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>trav</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(auto&amp; a : x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x.begin(), x.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(int)(x).size()</cpp:value></cpp:define>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ull</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
  <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>xs</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt> <macro><name>trav</name><argument_list>(<argument>x</argument>,<argument>xs</argument>)</argument_list></macro> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>x</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>m</name></decl>;</decl_stmt>
  <macro><name>trav</name><argument_list>(<argument>x</argument>,<argument>xs</argument>)</argument_list></macro> <expr_stmt><expr><name><name>m</name><index>[<expr><name>x</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

  <while>while <condition>(<expr><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>sz</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>small</name> <init>= <expr><call><name><name>m</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>first</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>smallCount</name> <init>= <expr><call><name><name>m</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>second</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><call><name><name>m</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> <expr_stmt><expr><name>it</name><operator>--</operator></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>big</name> <init>= <expr><name><name>it</name><operator>-&gt;</operator><name>first</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>bigCount</name> <init>= <expr><name><name>it</name><operator>-&gt;</operator><name>second</name></name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>smallCount</name> <operator>&lt;</operator> <name>bigCount</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>m</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>ll</name></type> <name>nextSmall</name> <init>= <expr><call><name><name>m</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>first</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>ll</name></type> <name>diff</name> <init>= <expr><name>nextSmall</name> <operator>-</operator> <name>small</name></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>diff</name> <operator>*</operator> <name>smallCount</name> <operator>&lt;=</operator> <name>k</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>m</name><index>[<expr><name>nextSmall</name></expr>]</index></name> <operator>+=</operator> <name>smallCount</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>k</name> <operator>-=</operator> <name>diff</name> <operator>*</operator> <name>smallCount</name></expr>;</expr_stmt>
      }</block></then> <else>else <block>{
        <expr_stmt><expr><name>diff</name> <operator>=</operator> <name>k</name> <operator>/</operator> <name>smallCount</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>m</name><index>[<expr><name>small</name> <operator>+</operator> <name>diff</name></expr>]</index></name> <operator>=</operator> <name>smallCount</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      }</block></else></if>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>it</name> <operator>=</operator> <call><name><name>m</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>it</name><operator>--</operator></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>ll</name></type> <name>nextBig</name> <init>= <expr><name><name>it</name><operator>-&gt;</operator><name>first</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>ll</name></type> <name>diff</name> <init>= <expr><name>big</name> <operator>-</operator> <name>nextBig</name></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>diff</name> <operator>*</operator> <name>bigCount</name> <operator>&lt;=</operator> <name>k</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>m</name><index>[<expr><name>nextBig</name></expr>]</index></name> <operator>+=</operator> <name>bigCount</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>k</name> <operator>-=</operator> <name>diff</name> <operator>*</operator> <name>bigCount</name></expr>;</expr_stmt>
      }</block></then> <else>else <block>{
        <expr_stmt><expr><name>diff</name> <operator>=</operator> <name>k</name> <operator>/</operator> <name>bigCount</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>m</name><index>[<expr><name>big</name> <operator>-</operator> <name>diff</name></expr>]</index></name> <operator>=</operator> <name>bigCount</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      }</block></else></if>
    }</block></else></if>
  }</block></while>

  <if>if <condition>(<expr><call><name>sz</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="number">0</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
  }</block></then> <else>else <block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>small</name> <init>= <expr><call><name><name>m</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>first</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><call><name><name>m</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> <expr_stmt><expr><name>it</name><operator>--</operator></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>big</name> <init>= <expr><name><name>it</name><operator>-&gt;</operator><name>first</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>big</name> <operator>-</operator> <name>small</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
  }</block></else></if>
}</block></function>
</unit>
