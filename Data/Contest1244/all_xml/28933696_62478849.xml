<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28933696_62478849.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>long</name> <name>long</name></type> <name>gcd</name> <parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><name>a</name> <operator>&lt;</operator> <name>b</name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    <if>if <condition>(<expr><name>b</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><name>a</name></expr>;</return></block></then></if>
    <return>return <expr><call><name>gcd</name><argument_list>(<argument><expr><name>a</name> <operator>%</operator> <name>b</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>p</name></decl>,<decl><type ref="prev"/><name>w</name></decl>,<decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>p</name> <operator>&gt;&gt;</operator> <name>w</name> <operator>&gt;&gt;</operator> <name>d</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>g</name> <init>= <expr><call><name>gcd</name><argument_list>(<argument><expr><name>w</name></expr></argument>,<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>p</name> <operator>%</operator> <name>g</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name>p</name> <operator>/=</operator> <name>g</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>w</name> <operator>/=</operator> <name>g</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>d</name> <operator>/=</operator> <name>g</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>x0</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>y0</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>d</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><if>if<condition>( <expr><operator>(</operator><name>p</name> <operator>-</operator> <name>i</name> <operator>*</operator> <name>w</name><operator>)</operator> <operator>%</operator> <name>d</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>x0</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block></then></if></block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><if>if<condition>( <expr><operator>(</operator><name>p</name> <operator>-</operator> <name>i</name> <operator>*</operator> <name>d</name><operator>)</operator> <operator>%</operator> <name>w</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>y0</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block></then></if></block></for>
    <if>if<condition>(<expr><name>x0</name>  <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>y0</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>q</name> <init>= <expr><name>p</name> <operator>-</operator> <name>x0</name><operator>*</operator><name>w</name> <operator>-</operator> <name>y0</name><operator>*</operator><name>d</name></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>q</name> <operator>%</operator> <operator>(</operator><name>w</name><operator>*</operator><name>d</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name>q</name> <operator>/=</operator> <name>w</name><operator>*</operator><name>d</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>z</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>z0</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>m</name> <init>= <expr><name>n</name> <operator>-</operator> <name>x0</name> <operator>-</operator> <name>y0</name><operator>-</operator> <name>q</name><operator>*</operator><name>d</name></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>m</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>
    <if>if<condition>(<expr><name>w</name> <operator>==</operator> <name>d</name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>z</name> <operator>=</operator> <name>m</name></expr>;</expr_stmt></block></then>
    <else>else
    <block>{
        <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>z0</name> <init>= <expr><name>m</name> <operator>%</operator> <operator>(</operator><name>w</name> <operator>-</operator> <name>d</name><operator>)</operator></expr></init></decl>;</decl_stmt>
        <if>if<condition>( <expr><operator>(</operator><name>m</name> <operator>-</operator> <name>z0</name><operator>)</operator><operator>/</operator><operator>(</operator><name>w</name> <operator>-</operator> <name>d</name><operator>)</operator> <operator>&gt;</operator> <name>q</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>z</name> <operator>=</operator> <name>m</name> <operator>-</operator> <name>q</name><operator>*</operator><operator>(</operator><name>w</name> <operator>-</operator> <name>d</name><operator>)</operator></expr>;</expr_stmt>
        }</block></then>
        <else>else<block>{
            <expr_stmt><expr><name>z</name> <operator>=</operator> <name>z0</name></expr>;</expr_stmt>

        }</block></else></if>
    }</block></else></if>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>l</name> <init>= <expr><operator>(</operator><name>m</name> <operator>-</operator> <name>z</name><operator>)</operator><operator>/</operator><operator>(</operator><name>w</name> <operator>-</operator> <name>d</name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>k</name> <init>= <expr><name>q</name> <operator>-</operator> <name>l</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>x</name> <init>= <expr><name>k</name><operator>*</operator><name>d</name> <operator>+</operator> <name>x0</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>y</name> <init>= <expr><name>l</name><operator>*</operator><name>w</name> <operator>+</operator> <name>y0</name></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>y</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>z</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>x</name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal> <operator>&lt;&lt;</operator> <name>y</name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal> <operator>&lt;&lt;</operator> <name>z</name>  <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    <comment type="line">//cout &lt;&lt; x *w + y * d &lt;&lt; ' ' &lt;&lt; p &lt;&lt; endl;</comment>
    <comment type="line">//cout &lt;&lt; x + y + z &lt;&lt; ' ' &lt;&lt; n;</comment>

}</block></function>
</unit>
