<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28936232_62488994.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name> ;</typedef>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">1e5</literal> <operator>+</operator> <literal type="number">10</literal></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>inf</name> <init>= <expr><literal type="number">1e18</literal></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></type> <name><name>G</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>cost</name><index>[<expr><name>N</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></type> <name>ve</name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>)</parameter_list><block>{
     <expr_stmt><expr><call><name><name>ve</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <for>for<control>(<init><decl><type><name>auto</name></type> <name>v</name> <range>: <expr><name><name>G</name><index>[<expr><name>u</name></expr>]</index></name></expr></range></decl></init>)</control><block>{
          <if>if<condition>(<expr><name>v</name> <operator>==</operator> <name>p</name></expr>)</condition><then> <block type="pseudo"><continue>continue ;</continue></block></then></if>
          <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     }</block></for>
}</block></function>

<decl_stmt><decl><type><name>ll</name></type> <name><name>memo</name><index>[<expr><name>N</name></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>ll</name></type> <name>solve</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>last</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>last2</name></decl></parameter>)</parameter_list><block>{

   <if>if<condition>(<expr><name>i</name> <operator>==</operator> <call><name><name>ve</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr> ;</return></block></then></if>

   <decl_stmt><decl><type><name>ll</name> <modifier>&amp;</modifier></type><name>ret</name> <init>= <expr><name><name>memo</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>last</name></expr>]</index><index>[<expr><name>last2</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
   <if>if<condition>(<expr><name>ret</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>ret</name></expr> ;</return></block></then></if>

   <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>inf</name></expr> ;</expr_stmt>

   <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition>  <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
       <block type="pseudo"><if>if<condition>(<expr><name>j</name> <operator>!=</operator> <name>last</name> <operator>&amp;&amp;</operator> <name>j</name> <operator>!=</operator> <name>last2</name></expr>)</condition><then>
           <block type="pseudo"><expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>ret</name></expr></argument> , <argument><expr><name><name>cost</name><index>[<expr><name><name>ve</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <call><name>solve</name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> , <argument><expr><name>j</name></expr></argument> , <argument><expr><name>last</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></block></for>

   <return>return <expr><name>ret</name></expr> ;</return>
}</block></function>

<decl_stmt><decl><type><name>int</name></type> <name><name>res</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>build</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>last</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>last2</name></decl></parameter>)</parameter_list><block>{

     <if>if<condition>(<expr><name>i</name> <operator>==</operator> <call><name><name>ve</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return ;</return></block></then></if>

     <decl_stmt><decl><type><name>ll</name></type> <name>optimal</name> <init>= <expr><call><name>solve</name><argument_list>(<argument><expr><name>i</name></expr></argument> , <argument><expr><name>last</name></expr></argument> , <argument><expr><name>last2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

     <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">3</literal></expr> ;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
            <if>if<condition>(<expr><name>j</name> <operator>!=</operator> <name>last</name> <operator>&amp;&amp;</operator> <name>j</name> <operator>!=</operator> <name>last2</name></expr>)</condition><then><block>{
                  <decl_stmt><decl><type><name>ll</name></type> <name>c</name> <init>= <expr><name><name>cost</name><index>[<expr><name><name>ve</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <call><name>solve</name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> , <argument><expr><name>j</name></expr></argument> , <argument><expr><name>last</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                  <if>if<condition>(<expr><name>c</name> <operator>==</operator> <name>optimal</name></expr>)</condition><then><block>{
                       <expr_stmt><expr><name><name>res</name><index>[<expr><name><name>ve</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                       <expr_stmt><expr><call><name>build</name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> , <argument><expr><name>j</name></expr></argument> , <argument><expr><name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                       <break>break ;</break>
                  }</block></then></if>
            }</block></then></if>
     }</block></for>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr> <operator>,</operator> <expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> <operator>,</operator> <expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl> ;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
          <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>n</name></expr> ;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
               <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>cost</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr> ;</expr_stmt>
          }</block></for>
    }</block></for>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
          <decl_stmt><decl><type><name>int</name></type> <name>u</name></decl> , <decl><type ref="prev"/><name>v</name></decl> ;</decl_stmt>
          <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>u</name> <operator>&gt;&gt;</operator> <name>v</name></expr> ;</expr_stmt>
          <expr_stmt><expr><name><name>G</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>G</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <decl_stmt><decl><type><name>int</name></type> <name>root</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
         <if>if<condition>(<expr><name><name>G</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr> <operator>,</operator> <expr><literal type="number">0</literal></expr>;</return></block></then></if>
         <if>if<condition>(<expr><name><name>G</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>root</name> <operator>=</operator> <name>i</name></expr> ;</expr_stmt></block></then></if>
    }</block></for>

    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>memo</name></expr></argument> , <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> , <argument><expr><sizeof>sizeof <name>memo</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>root</name></expr></argument> , <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>solve</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr> ;</expr_stmt>


    <expr_stmt><expr><call><name>build</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>res</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr> ;</expr_stmt></block></for>


    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
