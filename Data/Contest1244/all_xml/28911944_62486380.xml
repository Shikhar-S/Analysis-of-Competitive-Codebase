<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28911944_62486380.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout &lt;&lt; #x &lt;&lt; "  :  " &lt;&lt; x</cpp:value></cpp:define>


<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>lst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></type> <name>cost1</name></decl>, <decl><type ref="prev"/><name>cost2</name></decl>, <decl><type ref="prev"/><name>cost3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></type> <name>tps1</name></decl>, <decl><type ref="prev"/><name>tps2</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>dfs1</name> <parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>p</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl></parameter>)</parameter_list> <block>{
    <for>for <control>(<init><expr><name>auto</name><operator>&amp;</operator> <name>i</name> <operator>:</operator> <name><name>lst</name><index>[<expr><name>v</name></expr>]</index></name></expr></init>)</control> <block>{
        <if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>p</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
        <expr_stmt><expr><call><name>dfs1</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><call><name><name>tps1</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type> <name>dfs2</name> <parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>p</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl></parameter>)</parameter_list> <block>{
    <for>for <control>(<init><expr><name>auto</name><operator>&amp;</operator> <name>i</name> <operator>:</operator> <name><name>lst</name><index>[<expr><name>v</name></expr>]</index></name></expr></init>)</control> <block>{
        <if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>p</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
        <expr_stmt><expr><call><name>dfs2</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><call><name><name>tps2</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>int</name></type> <name>main</name> <parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>lst</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cost1</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cost2</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cost3</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>long</name> <name>long</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>a</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cost1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
    }</block></for>
    <for>for <control>(<init><decl><type><name>long</name> <name>long</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>a</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cost2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
    }</block></for>
    <for>for <control>(<init><decl><type><name>long</name> <name>long</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>a</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cost3</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
    }</block></for>
    <for>for <control>(<init><decl><type><name>long</name> <name>long</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>a</name><operator>--</operator></expr><operator>,</operator> <expr><name>b</name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>lst</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>lst</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>listya</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>long</name> <name>long</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
        <if>if <condition>(<expr><name><name>lst</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>listya</name><operator>++</operator></expr>;</expr_stmt></block></then>
        <elseif>else <if>if <condition>(<expr><name><name>lst</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt></block></then></if></elseif></if>
    }</block></for>
    <if>if <condition>(<expr><name>listya</name> <operator>+</operator> <name>cnt</name> <operator>==</operator> <name>n</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>cur</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>long</name> <name>long</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
            <if>if <condition>(<expr><name><name>lst</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name>cur</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><call><name>dfs1</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name>cur</name><operator>++</operator></expr>;</expr_stmt></block></then>
                <else>else
                    <block type="pseudo"><expr_stmt><expr><call><name>dfs2</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
            }</block></then></if>
        }</block></for>
        <expr_stmt><expr><call><name>reverse</name><argument_list>(<argument><expr><call><name><name>tps1</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>tps1</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>mx1</name> <init>= <expr><literal type="number">1e18</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></type> <name>ans1</name></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>long</name> <name>long</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
            <for>for <control>(<init><decl><type><name>long</name> <name>long</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{
                <if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>j</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
                <decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></type> <name>now</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>now</name><index>[<expr><name><name>tps1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>now</name><index>[<expr><name><name>tps1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
                <for>for <control>(<init><decl><type><name>long</name> <name>long</name></type> <name>k</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{
                    <expr_stmt><expr><name><name>now</name><index>[<expr><name><name>tps1</name><index>[<expr><name>k</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <literal type="number">6</literal> <operator>-</operator> <name><name>now</name><index>[<expr><name><name>tps1</name><index>[<expr><name>k</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>-</operator> <name><name>now</name><index>[<expr><name><name>tps1</name><index>[<expr><name>k</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
                }</block></for>
                <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>cost</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>long</name> <name>long</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{
                    <if>if <condition>(<expr><name><name>now</name><index>[<expr><name><name>tps1</name><index>[<expr><name>k</name></expr>]</index></name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
                        <block type="pseudo"><expr_stmt><expr><name>cost</name> <operator>+=</operator> <name><name>cost1</name><index>[<expr><name><name>tps1</name><index>[<expr><name>k</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block></then>
                    <elseif>else <if>if <condition>(<expr><name><name>now</name><index>[<expr><name><name>tps1</name><index>[<expr><name>k</name></expr>]</index></name></expr>]</index></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then>
                        <block type="pseudo"><expr_stmt><expr><name>cost</name> <operator>+=</operator> <name><name>cost2</name><index>[<expr><name><name>tps1</name><index>[<expr><name>k</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block></then></if></elseif>
                    <else>else
                        <block type="pseudo"><expr_stmt><expr><name>cost</name> <operator>+=</operator> <name><name>cost3</name><index>[<expr><name><name>tps1</name><index>[<expr><name>k</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block></else></if>
                }</block></for>
                <if>if <condition>(<expr><name>cost</name> <operator>&lt;</operator> <name>mx1</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>mx1</name> <operator>=</operator> <name>cost</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>ans1</name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></for>
        }</block></for>

        <expr_stmt><expr><call><name>reverse</name><argument_list>(<argument><expr><call><name><name>tps2</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>tps2</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>mx2</name> <init>= <expr><literal type="number">1e18</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></type> <name>ans2</name></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>long</name> <name>long</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
            <for>for <control>(<init><decl><type><name>long</name> <name>long</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{
                <if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>j</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
                <decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></type> <name>now</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>now</name><index>[<expr><name><name>tps2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>now</name><index>[<expr><name><name>tps2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
                <for>for <control>(<init><decl><type><name>long</name> <name>long</name></type> <name>k</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{
                    <expr_stmt><expr><name><name>now</name><index>[<expr><name><name>tps2</name><index>[<expr><name>k</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <literal type="number">6</literal> <operator>-</operator> <name><name>now</name><index>[<expr><name><name>tps2</name><index>[<expr><name>k</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>-</operator> <name><name>now</name><index>[<expr><name><name>tps2</name><index>[<expr><name>k</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
                }</block></for>
                <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>cost</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>long</name> <name>long</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{
                    <if>if <condition>(<expr><name><name>now</name><index>[<expr><name><name>tps2</name><index>[<expr><name>k</name></expr>]</index></name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
                        <block type="pseudo"><expr_stmt><expr><name>cost</name> <operator>+=</operator> <name><name>cost1</name><index>[<expr><name><name>tps2</name><index>[<expr><name>k</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block></then>
                    <elseif>else <if>if <condition>(<expr><name><name>now</name><index>[<expr><name><name>tps2</name><index>[<expr><name>k</name></expr>]</index></name></expr>]</index></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then>
                        <block type="pseudo"><expr_stmt><expr><name>cost</name> <operator>+=</operator> <name><name>cost2</name><index>[<expr><name><name>tps2</name><index>[<expr><name>k</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block></then></if></elseif>
                    <else>else
                        <block type="pseudo"><expr_stmt><expr><name>cost</name> <operator>+=</operator> <name><name>cost3</name><index>[<expr><name><name>tps2</name><index>[<expr><name>k</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block></else></if>
                }</block></for>
                <if>if <condition>(<expr><name>cost</name> <operator>&lt;</operator> <name>mx2</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>mx2</name> <operator>=</operator> <name>cost</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>ans2</name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></for>
        }</block></for>
        <if>if <condition>(<expr><name>mx1</name> <operator>&lt;</operator> <name>mx2</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>mx1</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
            <for>for <control>(<init><expr><name>auto</name><operator>&amp;</operator> <name>el</name> <operator>:</operator> <name>ans1</name></expr></init>)</control>
                <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>el</name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block></for>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>mx2</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
            <for>for <control>(<init><expr><name>auto</name><operator>&amp;</operator> <name>el</name> <operator>:</operator> <name>ans2</name></expr></init>)</control>
                <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>el</name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block></for>
        }</block></else></if>
    }</block></then>
    <else>else <block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    }</block></else></if>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
