<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28913487_62488230.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<struct>struct <name>node</name>
<block>{<public type="default">
    <decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>,<decl><type ref="prev"/><name>height</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>sum</name></decl>;</decl_stmt>
</public>}</block>;</struct>
<decl_stmt><decl><type><name>int</name></type> <name><name>num</name><index>[<expr><literal type="number">100010</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>node</name></type> <name><name>inf</name><index>[<expr><literal type="number">100010</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>inf0</name><index>[<expr><literal type="number">100010</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>get_inf</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>tim</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>num</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>num</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <if>if<condition>(<expr><name><name>num</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name><name>num</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name><name>inf</name><index>[<expr><operator>++</operator><name>tim</name></expr>]</index></name><operator>.</operator><name>height</name> <operator>=</operator> <name><name>num</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>num</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>inf</name><index>[<expr><name>tim</name></expr>]</index></name><operator>.</operator><name>width</name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>inf</name><index>[<expr><name>tim</name></expr>]</index></name><operator>.</operator><name>sum</name> <operator>=</operator> <literal type="number">1LL</literal><operator>*</operator><name><name>inf</name><index>[<expr><name>tim</name></expr>]</index></name><operator>.</operator><name>height</name><operator>*</operator><name><name>inf</name><index>[<expr><name>tim</name></expr>]</index></name><operator>.</operator><name>width</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>w</name><operator>++</operator></expr>;</expr_stmt>
        }</block></then>
        <else>else
            <block type="pseudo"><expr_stmt><expr><name>w</name><operator>++</operator></expr>;</expr_stmt></block></else></if>
    }</block></for>
    <expr_stmt><expr><name>w</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name>tim</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>n</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
    <block>{
        <if>if<condition>(<expr><name><name>num</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name><name>num</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name><name>inf0</name><index>[<expr><operator>++</operator><name>tim</name></expr>]</index></name><operator>.</operator><name>height</name> <operator>=</operator> <name><name>num</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>num</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>inf0</name><index>[<expr><name>tim</name></expr>]</index></name><operator>.</operator><name>width</name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>inf0</name><index>[<expr><name>tim</name></expr>]</index></name><operator>.</operator><name>sum</name> <operator>=</operator> <literal type="number">1LL</literal><operator>*</operator><name><name>inf0</name><index>[<expr><name>tim</name></expr>]</index></name><operator>.</operator><name>height</name><operator>*</operator><name><name>inf0</name><index>[<expr><name>tim</name></expr>]</index></name><operator>.</operator><name>width</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>w</name><operator>++</operator></expr>;</expr_stmt>
        }</block></then>
        <else>else
            <block type="pseudo"><expr_stmt><expr><name>w</name><operator>++</operator></expr>;</expr_stmt></block></else></if>
    }</block></for>
}</block></function>

<function><type><name>int</name></type> <name>get_ans</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>,<parameter><decl><type><name>long</name> <name>long</name></type> <name>k</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>low</name> <init>= <expr><name><name>num</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>,<decl><type ref="prev"/><name>high</name> <init>= <expr><name><name>num</name><index>[<expr><name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>t</name> <init>= <expr><name>k</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>cnt1</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>cnt2</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name><name>low</name> <argument_list type="generic">&lt; <argument><expr><name>high</name><operator>&amp;&amp;</operator><name>t</name></expr></argument> &gt;</argument_list></name> <literal type="number">0</literal></expr>)</condition>
    <block>{
        <comment type="line">//cout&lt;&lt;cnt1&lt;&lt;' '&lt;&lt;cnt2&lt;&lt;' '&lt;&lt;t&lt;&lt;endl;</comment>
        <if>if<condition>(<expr><name><name>inf</name><index>[<expr><name>cnt1</name></expr>]</index></name><operator>.</operator><name>width</name> <operator>&lt;=</operator> <name><name>inf0</name><index>[<expr><name>cnt2</name></expr>]</index></name><operator>.</operator><name>width</name></expr>)</condition><then>
        <block>{
            <if>if<condition>(<expr><name>t</name> <operator>&gt;=</operator> <name><name>inf</name><index>[<expr><name>cnt1</name></expr>]</index></name><operator>.</operator><name>sum</name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>t</name> <operator>-=</operator> <name><name>inf</name><index>[<expr><name>cnt1</name></expr>]</index></name><operator>.</operator><name>sum</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>low</name> <operator>+=</operator> <name><name>inf</name><index>[<expr><name>cnt1</name></expr>]</index></name><operator>.</operator><name>height</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>cnt1</name><operator>++</operator></expr>;</expr_stmt>
            }</block></then>
            <elseif>else <if>if<condition>(<expr><name>t</name> <operator>&lt;</operator> <name><name>inf</name><index>[<expr><name>cnt1</name></expr>]</index></name><operator>.</operator><name>sum</name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>low</name> <operator>+=</operator> <name>t</name><operator>/</operator><name><name>inf</name><index>[<expr><name>cnt1</name></expr>]</index></name><operator>.</operator><name>width</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>cnt1</name><operator>++</operator></expr>;</expr_stmt>
            }</block></then></if></elseif></if>
        }</block></then>
        <elseif>else <if>if<condition>(<expr><name><name>inf</name><index>[<expr><name>cnt1</name></expr>]</index></name><operator>.</operator><name>width</name> <operator>&gt;</operator> <name><name>inf0</name><index>[<expr><name>cnt2</name></expr>]</index></name><operator>.</operator><name>width</name></expr>)</condition><then>
        <block>{
            <if>if<condition>(<expr><name>t</name> <operator>&gt;=</operator> <name><name>inf0</name><index>[<expr><name>cnt2</name></expr>]</index></name><operator>.</operator><name>sum</name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>t</name> <operator>-=</operator> <name><name>inf0</name><index>[<expr><name>cnt2</name></expr>]</index></name><operator>.</operator><name>sum</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>high</name> <operator>-=</operator> <name><name>inf0</name><index>[<expr><name>cnt2</name></expr>]</index></name><operator>.</operator><name>height</name></expr>;</expr_stmt>
                <comment type="line">//cout&lt;&lt;inf0[cnt2].height&lt;&lt;"dd"&lt;&lt;cnt2&lt;&lt;endl;</comment>
                <expr_stmt><expr><name>cnt2</name><operator>++</operator></expr>;</expr_stmt>
            }</block></then>
            <elseif>else <if>if<condition>(<expr><name>t</name> <operator>&lt;</operator> <name><name>inf0</name><index>[<expr><name>cnt2</name></expr>]</index></name><operator>.</operator><name>sum</name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>high</name> <operator>-=</operator> <name>t</name><operator>/</operator><name><name>inf0</name><index>[<expr><name>cnt2</name></expr>]</index></name><operator>.</operator><name>width</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>cnt2</name><operator>++</operator></expr>;</expr_stmt>
            }</block></then></if></elseif></if>
        }</block></then></if></elseif></if>
    }</block></while>
    <return>return <expr><name>high</name><operator>-</operator><name>low</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>k</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>k</name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>num</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>num</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>num</name><operator>+</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>get_inf</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/*for(int i = 1; i &lt;= 5; i++)
    {
        cout&lt;&lt;inf[i].height&lt;&lt;' '&lt;&lt;inf[i].width&lt;&lt;endl;
    }
    for(int i = 1; i &lt;= 5; i++)
    {
        cout&lt;&lt;inf0[i].height&lt;&lt;' '&lt;&lt;inf0[i].width&lt;&lt;endl;
    }*/</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><call><name>get_ans</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
