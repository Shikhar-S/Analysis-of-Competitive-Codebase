<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28900834_62479443.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr><name>n</name></expr>]</index></name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>a</name> <operator>+</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>idl</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>idr</name> <init>= <expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>k</name> <operator>&amp;&amp;</operator> <name>idl</name> <operator>&lt;</operator> <name>idr</name></expr>)</condition> <block>{
        <while>while <condition>(<expr><name>idr</name> <operator>&amp;&amp;</operator> <name><name>a</name><index>[<expr><name>idr</name></expr>]</index></name> <operator>==</operator> <name><name>a</name><index>[<expr><name>idr</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block type="pseudo"><expr_stmt><expr><operator>--</operator><name>idr</name></expr>;</expr_stmt></block></while>
        <while>while <condition>(<expr><name>idl</name> <operator>&lt;</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>a</name><index>[<expr><name>idl</name></expr>]</index></name> <operator>==</operator> <name><name>a</name><index>[<expr><name>idl</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block type="pseudo"><expr_stmt><expr><operator>++</operator><name>idl</name></expr>;</expr_stmt></block></while>
        <if>if <condition>(<expr><name>idl</name> <operator>==</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal> <operator>||</operator> <name>idr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
        <if>if <condition>(<expr><name>idl</name> <operator>&lt;</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>idr</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>k</name> <operator>&lt;</operator> <operator>(</operator><name><name>a</name><index>[<expr><name>idl</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>a</name><index>[<expr><name>idl</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>idl</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>a</name><index>[<expr><name>idl</name></expr>]</index></name> <operator>+=</operator> <name>k</name> <operator>/</operator> <operator>(</operator><name>idl</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><name>k</name> <operator>-=</operator> <operator>(</operator><name><name>a</name><index>[<expr><name>idl</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>a</name><index>[<expr><name>idl</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>idl</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
                <expr_stmt><expr><operator>++</operator><name>idl</name></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then>
        <else>else <block>{
            <if>if <condition>(<expr><name>k</name> <operator>&lt;</operator> <operator>(</operator><name><name>a</name><index>[<expr><name>idr</name></expr>]</index></name> <operator>-</operator> <name><name>a</name><index>[<expr><name>idr</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>n</name> <operator>-</operator> <name>idr</name><operator>)</operator></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>a</name><index>[<expr><name>idr</name></expr>]</index></name> <operator>-=</operator> <name>k</name> <operator>/</operator> <operator>(</operator><name>n</name> <operator>-</operator> <name>idr</name><operator>)</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><name>k</name> <operator>-=</operator> <operator>(</operator><name><name>a</name><index>[<expr><name>idr</name></expr>]</index></name> <operator>-</operator> <name><name>a</name><index>[<expr><name>idr</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>n</name> <operator>-</operator> <name>idr</name><operator>)</operator></expr>;</expr_stmt>
                <expr_stmt><expr><operator>--</operator><name>idr</name></expr>;</expr_stmt>
            }</block></else></if>
        }</block></else></if>
    }</block></while>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>max</name><argument_list>(<argument><expr><literal type="number">0ll</literal></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><name>idr</name></expr>]</index></name> <operator>-</operator> <name><name>a</name><index>[<expr><name>idl</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
